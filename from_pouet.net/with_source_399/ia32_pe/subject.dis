// fn00401000
// Return size: 4
void fn00401000()
fn00401000_entry:
	// succ:  l00401000
l00401000:
	esp = fp
	edx = Mem0[esp + 0x00000004:word32]
	ecx = Mem0[eax + 0x00000004:word32]
	esp = esp - 0x00000008
	SCZO = cond(esp)
	SZO = cond(edx & edx)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = Mem0[esp + 0x00000014:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = Mem0[eax:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000024:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[eax + 0x0000000C:word32]
	branch Test(LT,SO) l004011D2
	// succ:  l00401023 l004011D2
l00401023:
	eax = Mem0[esp + 0x00000024:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(LT,SO) l004011D2
	// succ:  l0040102F l004011D2
l0040102F:
	SZO = cond(ebx & ebx)
	C = false
	branch Test(LT,SO) l004011D2
	// succ:  l00401037 l004011D2
l00401037:
	SZO = cond(esi & esi)
	C = false
	branch Test(LT,SO) l004011D2
	// succ:  l0040103F l004011D2
l0040103F:
	SCZO = cond(edx - ebp)
	branch Test(GE,SO) l004011D2
	// succ:  l00401047 l004011D2
l00401047:
	SCZO = cond(eax - ebp)
	branch Test(GE,SO) l004011D2
	// succ:  l0040104F l004011D2
l0040104F:
	SCZO = cond(ebx - ecx)
	branch Test(GE,SO) l004011D2
	// succ:  l00401057 l004011D2
l00401057:
	SCZO = cond(esi - ecx)
	branch Test(GE,SO) l004011D2
	// succ:  l0040105F l004011D2
l0040105F:
	ecx = eax
	esi = esi - ebx
	SCZO = cond(esi)
	ecx = ecx - edx
	SCZO = cond(ecx)
	eax = esi
	edx_eax = (int64) eax
	ebx = eax
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	ebx = ebx - edx
	SCZO = cond(ebx)
	eax = ecx
	edx_eax = (int64) eax
	eax = eax ^ edx
	SZO = cond(eax)
	C = false
	eax = eax - edx
	SCZO = cond(eax)
	SCZO = cond(ebx - eax)
	branch Test(LE,SZO) l00401135
	// succ:  l0040107D l00401135
l0040107D:
	edx = Mem0[esp + 0x00000028:word32]
	eax = Mem0[esp + 0x00000020:word32]
	SCZO = cond(edx - eax)
	branch Test(GE,SO) l004010AF
	// succ:  l00401089 l004010AF
l00401089:
	ebx = Mem0[esp + 0x00000024:word32]
	eax = edx
	edx = (word32) Mem0[esp + 0x00000030:byte]
	Mem0[esp + 0x0000001C:word32] = edx
	dl = Mem0[esp + 0x0000002C:byte]
	Mem0[esp + 0x00000030:byte] = dl
	edx = (word32) Mem0[esp + 0x0000001C:byte]
	esi = -esi
	SCZO = cond(esi)
	C = esi == 0x00000000
	ecx = -ecx
	SCZO = cond(ecx)
	C = ecx == 0x00000000
	Mem0[esp + 0x0000002C:byte] = dl
	goto l004010B3
	// succ:  l004010B3
l004010AF:
	ebx = Mem0[esp + 0x0000001C:word32]
	// succ:  l004010B3
l004010B3:
	SZO = cond(esi & esi)
	C = false
	branch Test(EQ,Z) l004011D2
	// succ:  l004010BB l004011D2
l004010BB:
	edx = ebp
	edx = edx *s eax
	SCZO = cond(edx)
	eax = (word32) Mem0[esp + 0x00000030:byte]
	edx = edx + ebx
	SCZO = cond(edx)
	ebx = (word32) Mem0[esp + 0x0000002C:byte]
	eax = eax - ebx
	SCZO = cond(eax)
	eax = eax << 0x00000010
	SCZO = cond(eax)
	edi = edi + edx
	SCZO = cond(edi)
	edx_eax = (int64) eax
	edx = edx_eax % esi
	eax = edx_eax / esi
	SCZO = cond(eax)
	ebx = ebx << 0x00000010
	SCZO = cond(ebx)
	Mem0[esp + 0x00000014:word32] = eax
	eax = ecx
	eax = eax << 0x00000010
	SCZO = cond(eax)
	edx_eax = (int64) eax
	edx = edx_eax % esi
	eax = edx_eax / esi
	SCZO = cond(eax)
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	SZO = cond(esi & esi)
	C = false
	Mem0[esp + 0x00000010:word32] = eax
	branch Test(LE,SZO) l004011D2
	// succ:  l004010F3 l004011D2
l004010F3:
	Mem0[esp + 0x0000001C:word32] = esi
	// succ:  l00401100
l00401100:
	edx = edx + Mem0[esp + 0x00000010:word32]
	SCZO = cond(edx)
	ebx = ebx + Mem0[esp + 0x00000014:word32]
	SCZO = cond(ebx)
	ecx = edx
	ecx = ecx >> 0x00000010
	SCZO = cond(ecx)
	eax = (word32) Mem0[ecx + edi:byte]
	ecx = ecx + edi
	SCZO = cond(ecx)
	esi = ebx
	eax = eax << 0x00000006
	SCZO = cond(eax)
	esi = esi >> 0x00000010
	SCZO = cond(esi)
	al = Mem0[eax + 0x00478840 + esi:byte]
	edi = edi + ebp
	SCZO = cond(edi)
	v18 = Mem0[esp + 0x0000001C:word32] - 0x00000001
	Mem0[esp + 0x0000001C:word32] = v18
	SCZO = cond(v18)
	Mem0[ecx:byte] = al
	branch Test(NE,Z) l00401100
	// succ:  l0040112D l00401100
l0040112D:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000008
	SCZO = cond(esp)
	return
	// succ:  fn00401000_exit
l00401135:
	edx = Mem0[esp + 0x00000024:word32]
	eax = Mem0[esp + 0x0000001C:word32]
	SCZO = cond(edx - eax)
	branch Test(GE,SO) l00401162
	// succ:  l00401141 l00401162
l00401141:
	ebx = Mem0[esp + 0x00000028:word32]
	eax = edx
	edx = (word32) Mem0[esp + 0x00000030:byte]
	Mem0[esp + 0x0000001C:word32] = edx
	dl = Mem0[esp + 0x0000002C:byte]
	ecx = -ecx
	SCZO = cond(ecx)
	C = ecx == 0x00000000
	Mem0[esp + 0x00000030:byte] = dl
	dl = Mem0[esp + 0x0000001C:byte]
	esi = -esi
	SCZO = cond(esi)
	C = esi == 0x00000000
	goto l0040116A
	// succ:  l0040116A
l00401162:
	dl = Mem0[esp + 0x0000002C:byte]
	ebx = Mem0[esp + 0x00000020:word32]
	// succ:  l0040116A
l0040116A:
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l004011D2
	// succ:  l0040116E l004011D2
l0040116E:
	ebp = ebp *s ebx
	SCZO = cond(ebp)
	ebp = ebp + eax
	SCZO = cond(ebp)
	eax = (word32) Mem0[esp + 0x00000030:byte]
	ebx = (word32) dl
	eax = eax - ebx
	SCZO = cond(eax)
	eax = eax << 0x00000010
	SCZO = cond(eax)
	edx_eax = (int64) eax
	edx = edx_eax % ecx
	eax = edx_eax / ecx
	SCZO = cond(eax)
	edi = edi + ebp
	SCZO = cond(edi)
	ebx = ebx << 0x00000010
	SCZO = cond(ebx)
	ebp = eax
	eax = esi
	eax = eax << 0x00000010
	SCZO = cond(eax)
	edx_eax = (int64) eax
	edx = edx_eax % ecx
	eax = edx_eax / ecx
	SCZO = cond(eax)
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	SZO = cond(ecx & ecx)
	C = false
	Mem0[esp + 0x00000014:word32] = eax
	branch Test(LE,SZO) l004011D2
	// succ:  l0040119C l004011D2
l0040119C:
	Mem0[esp + 0x0000001C:word32] = ecx
	// succ:  l004011A0
l004011A0:
	esi = esi + Mem0[esp + 0x00000014:word32]
	SCZO = cond(esi)
	ebx = ebx + ebp
	SCZO = cond(ebx)
	edx = esi
	edx = edx >> 0x00000010
	SCZO = cond(edx)
	edx = edx + edx * 0x00000004
	edx = edx << 0x00000006
	SCZO = cond(edx)
	eax = (word32) Mem0[edx + edi:byte]
	edx = edx + edi
	SCZO = cond(edx)
	ecx = ebx
	eax = eax << 0x00000006
	SCZO = cond(eax)
	ecx = ecx >> 0x00000010
	SCZO = cond(ecx)
	al = Mem0[eax + 0x00478840 + ecx:byte]
	edi = edi + 0x00000001
	SCZO = cond(edi)
	v19 = Mem0[esp + 0x0000001C:word32] - 0x00000001
	Mem0[esp + 0x0000001C:word32] = v19
	SCZO = cond(v19)
	Mem0[edx:byte] = al
	branch Test(NE,Z) l004011A0
	// succ:  l004011D2 l004011A0
l004011D2:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000008
	SCZO = cond(esp)
	return
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000008
	SCZO = cond(esp)
	return
	// succ:  fn00401000_exit fn00401000_exit
fn00401000_exit:


// fn004011E0
// Return size: 4
void fn004011E0()
fn004011E0_entry:
	// succ:  l004011E0
l004011E0:
	esp = fp
	esp = esp - 0x0000002C
	SCZO = cond(esp)
	rLoc1 = Mem0[esp + 0x0000003C:real32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	Mem0[esp + 0x00000020:real64] = rLoc1
	rLoc2 = Mem0[esp + 0x00000040:real32]
	ebp = Mem0[esp + 0x0000003C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	Mem0[esp + 0x0000002C:real64] = rLoc2
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = eax
	call _CIsin (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[esp + 0x00000030:real64]
	Mem0[esp + 0x0000001C:real32] = rLoc1
	rLoc1 = Mem0[esp + 0x00000028:real64]
	call _CIcos (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[esp + 0x00000030:real64]
	Mem0[esp + 0x00000018:real32] = rLoc1
	rLoc1 = Mem0[esp + 0x00000050:real32]
	Mem0[esp + 0x00000028:real64] = rLoc1
	call _CIsin (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[esp + 0x00000030:real64]
	Mem0[esp + 0x00000024:real32] = rLoc1
	rLoc1 = Mem0[esp + 0x00000028:real64]
	call _CIcos (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[esp + 0x00000030:real64]
	Mem0[esp + 0x00000020:real32] = rLoc1
	rLoc1 = Mem0[esp + 0x00000054:real32]
	Mem0[esp + 0x00000028:real64] = rLoc1
	call _CIsin (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[esp + 0x00000030:real64]
	Mem0[esp + 0x00000014:real32] = rLoc1
	rLoc1 = Mem0[esp + 0x00000028:real64]
	call _CIcos (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[esp + 0x00000030:real64]
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	SCZO = cond(edi - 0x00000004)
	Mem0[esp + 0x00000054:real32] = rLoc1
	branch Test(LT,SO) l00401511
	// succ:  l00401272 l00401511
l00401272:
	edx = Mem0[esp + 0x00000040:word32]
	rLoc1 = Mem0[esp + 0x00000054:real32]
	rLoc2 = Mem0[esp + 0x00000014:real32]
	ecx = edx + 0x00000008
	rLoc3 = Mem0[esp + 0x00000018:real32]
	ebx = ebp
	rLoc4 = Mem0[esp + 0x0000001C:real32]
	ebx = ebx - edx
	SCZO = cond(ebx)
	rLoc5 = Mem0[esp + 0x00000020:real32]
	edx = edi - 0x00000004
	rLoc6 = Mem0[esp + 0x00000024:real32]
	edx = edx >>u 0x00000002
	SCZO = cond(edx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	Mem0[esp + 0x00000030:real64] = rLoc6
	eax = ebp + 0x00000010
	esi = 0x00000000 + edx * 0x00000004
	// succ:  l004012AC
l004012AC:
	rLoc6 = Mem0[ecx - 0x00000008:real32]
	Mem0[esp + 0x00000048:real32] = rLoc6
	rLoc6 = Mem0[ecx - 0x00000004:real32]
	Mem0[esp + 0x0000004C:real32] = rLoc6
	rLoc6 = Mem0[ecx:real32]
	Mem0[esp + 0x00000050:real32] = rLoc6
	rLoc6 = Mem0[esp + 0x00000048:real32]
	rLoc7 = Mem0[esp + 0x0000004C:real32]
	Mem0[esp + 0x00000028:real64] = rLoc7
	rLoc7 = rLoc7 * rLoc1
	rLoc8 = rLoc3
	rLoc8 = rLoc8 * rLoc6
	rLoc7 = rLoc7 + rLoc8
	Mem0[eax - 0x0000000C:real32] = rLoc7
	rLoc6 = rLoc6 * rLoc1
	rLoc7 = rLoc3
	rLoc7 = rLoc7 * Mem0[esp + 0x00000028:real64]
	rLoc6 = rLoc6 - rLoc7
	Mem0[esp + 0x00000048:real32] = rLoc6
	rLoc6 = Mem0[eax - 0x0000000C:real32]
	Mem0[esp + 0x0000004C:real32] = rLoc6
	rLoc6 = Mem0[esp + 0x0000004C:real32]
	Mem0[esp + 0x00000028:real64] = rLoc6
	rLoc7 = Mem0[esp + 0x00000050:real32]
	rLoc8 = rLoc4
	rLoc6 = rLoc6 * rLoc8
	rLoc8 = rLoc5
	rLoc8 = rLoc8 * rLoc7
	rLoc6 = rLoc6 - rLoc8
	v22 = rLoc7
	rLoc7 = rLoc6
	rLoc6 = v22
	Mem0[eax - 0x0000000C:real32] = rLoc7
	rLoc6 = rLoc6 * rLoc3
	rLoc7 = rLoc5
	rLoc7 = rLoc7 * Mem0[esp + 0x00000028:real64]
	rLoc6 = rLoc6 + rLoc7
	Mem0[esp + 0x00000050:real32] = rLoc6
	rLoc6 = Mem0[esp + 0x00000048:real32]
	rLoc7 = Mem0[esp + 0x00000050:real32]
	Mem0[esp + 0x00000028:real64] = rLoc7
	rLoc7 = rLoc7 * Mem0[esp + 0x00000030:real64]
	rLoc8 = rLoc6
	rLoc8 = rLoc8 * rLoc6
	rLoc7 = rLoc7 + rLoc8
	Mem0[eax - 0x00000010:real32] = rLoc7
	rLoc7 = rLoc6
	rLoc7 = rLoc7 * Mem0[esp + 0x00000028:real64]
	rLoc8 = Mem0[esp + 0x00000030:real64]
	rLoc6 = rLoc6 * rLoc8
	rLoc6 = rLoc7 - rLoc6
	Mem0[ecx + ebx:real32] = rLoc6
	rLoc6 = Mem0[ecx + 0x00000004:real32]
	Mem0[esp + 0x00000048:real32] = rLoc6
	rLoc6 = Mem0[ecx + 0x00000008:real32]
	Mem0[esp + 0x0000004C:real32] = rLoc6
	rLoc6 = Mem0[ecx + 0x0000000C:real32]
	Mem0[esp + 0x00000050:real32] = rLoc6
	rLoc6 = Mem0[esp + 0x00000048:real32]
	rLoc7 = Mem0[esp + 0x0000004C:real32]
	Mem0[esp + 0x00000028:real64] = rLoc7
	rLoc7 = rLoc7 * rLoc1
	rLoc8 = rLoc3
	rLoc8 = rLoc8 * rLoc6
	rLoc7 = rLoc7 + rLoc8
	Mem0[eax:real32] = rLoc7
	rLoc6 = rLoc6 * rLoc1
	rLoc7 = rLoc3
	rLoc7 = rLoc7 * Mem0[esp + 0x00000028:real64]
	rLoc6 = rLoc6 - rLoc7
	Mem0[esp + 0x00000048:real32] = rLoc6
	rLoc6 = Mem0[eax:real32]
	Mem0[esp + 0x0000004C:real32] = rLoc6
	rLoc6 = Mem0[esp + 0x0000004C:real32]
	Mem0[esp + 0x00000028:real64] = rLoc6
	rLoc7 = Mem0[esp + 0x00000050:real32]
	rLoc8 = rLoc4
	rLoc6 = rLoc6 * rLoc8
	rLoc8 = rLoc5
	rLoc8 = rLoc8 * rLoc7
	rLoc6 = rLoc6 - rLoc8
	v23 = rLoc7
	rLoc7 = rLoc6
	rLoc6 = v23
	Mem0[eax:real32] = rLoc7
	rLoc6 = rLoc6 * rLoc3
	rLoc7 = rLoc5
	rLoc7 = rLoc7 * Mem0[esp + 0x00000028:real64]
	rLoc6 = rLoc6 + rLoc7
	Mem0[esp + 0x00000050:real32] = rLoc6
	rLoc6 = Mem0[esp + 0x00000048:real32]
	rLoc7 = Mem0[esp + 0x00000050:real32]
	Mem0[esp + 0x00000028:real64] = rLoc7
	rLoc7 = rLoc7 * Mem0[esp + 0x00000030:real64]
	rLoc8 = rLoc6
	rLoc8 = rLoc8 * rLoc6
	rLoc7 = rLoc7 + rLoc8
	Mem0[eax - 0x00000004:real32] = rLoc7
	rLoc7 = rLoc6
	rLoc7 = rLoc7 * Mem0[esp + 0x00000028:real64]
	rLoc8 = Mem0[esp + 0x00000030:real64]
	rLoc6 = rLoc6 * rLoc8
	rLoc6 = rLoc7 - rLoc6
	Mem0[eax + 0x00000004:real32] = rLoc6
	rLoc6 = Mem0[ecx + 0x00000010:real32]
	Mem0[esp + 0x00000048:real32] = rLoc6
	rLoc6 = Mem0[ecx + 0x00000014:real32]
	Mem0[esp + 0x0000004C:real32] = rLoc6
	rLoc6 = Mem0[ecx + 0x00000018:real32]
	Mem0[esp + 0x00000050:real32] = rLoc6
	rLoc6 = Mem0[esp + 0x00000048:real32]
	rLoc7 = Mem0[esp + 0x0000004C:real32]
	Mem0[esp + 0x00000028:real64] = rLoc7
	rLoc7 = rLoc7 * rLoc1
	rLoc8 = rLoc3
	rLoc8 = rLoc8 * rLoc6
	rLoc7 = rLoc7 + rLoc8
	Mem0[eax + 0x0000000C:real32] = rLoc7
	rLoc6 = rLoc6 * rLoc1
	rLoc7 = rLoc3
	rLoc7 = rLoc7 * Mem0[esp + 0x00000028:real64]
	rLoc6 = rLoc6 - rLoc7
	Mem0[esp + 0x00000048:real32] = rLoc6
	rLoc6 = Mem0[eax + 0x0000000C:real32]
	Mem0[esp + 0x0000004C:real32] = rLoc6
	rLoc6 = Mem0[esp + 0x0000004C:real32]
	Mem0[esp + 0x00000028:real64] = rLoc6
	rLoc7 = Mem0[esp + 0x00000050:real32]
	rLoc8 = rLoc4
	rLoc6 = rLoc6 * rLoc8
	rLoc8 = rLoc5
	rLoc8 = rLoc8 * rLoc7
	rLoc6 = rLoc6 - rLoc8
	v24 = rLoc7
	rLoc7 = rLoc6
	rLoc6 = v24
	Mem0[eax + 0x0000000C:real32] = rLoc7
	rLoc6 = rLoc6 * rLoc3
	rLoc7 = rLoc5
	rLoc7 = rLoc7 * Mem0[esp + 0x00000028:real64]
	rLoc6 = rLoc6 + rLoc7
	Mem0[esp + 0x00000050:real32] = rLoc6
	rLoc6 = Mem0[esp + 0x00000048:real32]
	rLoc7 = Mem0[esp + 0x00000050:real32]
	Mem0[esp + 0x00000028:real64] = rLoc7
	rLoc7 = rLoc7 * Mem0[esp + 0x00000030:real64]
	rLoc8 = rLoc6
	rLoc8 = rLoc8 * rLoc6
	rLoc7 = rLoc7 + rLoc8
	Mem0[eax + 0x00000008:real32] = rLoc7
	rLoc7 = rLoc6
	rLoc7 = rLoc7 * Mem0[esp + 0x00000028:real64]
	rLoc8 = Mem0[esp + 0x00000030:real64]
	rLoc6 = rLoc6 * rLoc8
	rLoc6 = rLoc7 - rLoc6
	Mem0[eax + 0x00000010:real32] = rLoc6
	rLoc6 = Mem0[ecx + 0x0000001C:real32]
	Mem0[esp + 0x00000048:real32] = rLoc6
	rLoc6 = Mem0[ecx + 0x00000020:real32]
	Mem0[esp + 0x0000004C:real32] = rLoc6
	rLoc6 = Mem0[ecx + 0x00000024:real32]
	Mem0[esp + 0x00000050:real32] = rLoc6
	rLoc6 = Mem0[esp + 0x00000048:real32]
	rLoc7 = Mem0[esp + 0x0000004C:real32]
	Mem0[esp + 0x00000028:real64] = rLoc7
	rLoc7 = rLoc7 * rLoc1
	rLoc8 = rLoc3
	rLoc8 = rLoc8 * rLoc6
	rLoc7 = rLoc7 + rLoc8
	ecx = ecx + 0x00000030
	SCZO = cond(ecx)
	eax = eax + 0x00000030
	SCZO = cond(eax)
	edx = edx - 0x00000001
	SCZO = cond(edx)
	Mem0[eax - 0x00000018:real32] = rLoc7
	rLoc6 = rLoc6 * rLoc1
	rLoc7 = rLoc3
	rLoc7 = rLoc7 * Mem0[esp + 0x00000028:real64]
	rLoc6 = rLoc6 - rLoc7
	Mem0[esp + 0x00000048:real32] = rLoc6
	rLoc6 = Mem0[eax - 0x00000018:real32]
	Mem0[esp + 0x0000004C:real32] = rLoc6
	rLoc6 = Mem0[esp + 0x0000004C:real32]
	Mem0[esp + 0x00000028:real64] = rLoc6
	rLoc7 = Mem0[esp + 0x00000050:real32]
	rLoc8 = rLoc4
	rLoc6 = rLoc6 * rLoc8
	rLoc8 = rLoc5
	rLoc8 = rLoc8 * rLoc7
	rLoc6 = rLoc6 - rLoc8
	v25 = rLoc7
	rLoc7 = rLoc6
	rLoc6 = v25
	Mem0[eax - 0x00000018:real32] = rLoc7
	rLoc6 = rLoc6 * rLoc3
	rLoc7 = rLoc5
	rLoc7 = rLoc7 * Mem0[esp + 0x00000028:real64]
	rLoc6 = rLoc6 + rLoc7
	Mem0[esp + 0x00000050:real32] = rLoc6
	rLoc6 = Mem0[esp + 0x00000048:real32]
	rLoc7 = Mem0[esp + 0x00000050:real32]
	Mem0[esp + 0x00000028:real64] = rLoc7
	rLoc7 = rLoc7 * Mem0[esp + 0x00000030:real64]
	rLoc8 = rLoc6
	rLoc8 = rLoc8 * rLoc6
	rLoc7 = rLoc7 + rLoc8
	Mem0[eax - 0x0000001C:real32] = rLoc7
	rLoc7 = rLoc6
	rLoc7 = rLoc7 * Mem0[esp + 0x00000028:real64]
	rLoc8 = Mem0[esp + 0x00000030:real64]
	rLoc6 = rLoc6 * rLoc8
	rLoc6 = rLoc7 - rLoc6
	Mem0[eax - 0x00000014:real32] = rLoc6
	branch Test(NE,Z) l004012AC
	// succ:  l00401507 l004012AC
l00401507:
	rLoc1 = rLoc5
	rLoc2 = rLoc4
	rLoc3 = rLoc3
	rLoc2 = rLoc2
	rLoc1 = rLoc1
	// succ:  l00401511
l00401511:
	SCZO = cond(esi - edi)
	branch Test(GE,SO) l004015F0
	// succ:  l00401519 l004015F0
l00401519:
	rLoc1 = Mem0[esp + 0x00000054:real32]
	ebx = Mem0[esp + 0x00000040:word32]
	rLoc2 = Mem0[esp + 0x00000014:real32]
	eax = esi + esi * 0x00000002
	rLoc3 = Mem0[esp + 0x00000018:real32]
	eax = eax + eax
	SCZO = cond(eax)
	rLoc4 = Mem0[esp + 0x0000001C:real32]
	eax = eax + eax
	SCZO = cond(eax)
	rLoc5 = Mem0[esp + 0x00000020:real32]
	edx = ebp
	Mem0[esp + 0x00000028:real64] = rLoc5
	ecx = eax + 0x00000004 + ebp
	rLoc5 = Mem0[esp + 0x00000024:real32]
	edx = edx - ebx
	SCZO = cond(edx)
	Mem0[esp + 0x00000030:real64] = rLoc5
	eax = eax + 0x00000008 + ebx
	edi = edi - esi
	SCZO = cond(edi)
	// succ:  l00401552
l00401552:
	rLoc5 = Mem0[eax - 0x00000008:real32]
	eax = eax + 0x0000000C
	SCZO = cond(eax)
	Mem0[esp + 0x00000048:real32] = rLoc5
	ecx = ecx + 0x0000000C
	SCZO = cond(ecx)
	edi = edi - 0x00000001
	SCZO = cond(edi)
	rLoc5 = Mem0[eax - 0x00000010:real32]
	Mem0[esp + 0x0000004C:real32] = rLoc5
	rLoc5 = Mem0[eax - 0x0000000C:real32]
	Mem0[esp + 0x00000050:real32] = rLoc5
	rLoc5 = Mem0[esp + 0x00000048:real32]
	rLoc6 = Mem0[esp + 0x0000004C:real32]
	rLoc7 = rLoc7
	rLoc7 = rLoc7 * rLoc1
	rLoc8 = rLoc3
	rLoc8 = rLoc8 * rLoc5
	rLoc7 = rLoc7 + rLoc8
	Mem0[ecx - 0x0000000C:real32] = rLoc7
	rLoc7 = rLoc2
	rLoc5 = rLoc5 * rLoc7
	rLoc6 = rLoc6 * rLoc2
	rLoc5 = rLoc5 - rLoc6
	Mem0[esp + 0x00000048:real32] = rLoc5
	rLoc5 = Mem0[ecx - 0x0000000C:real32]
	Mem0[esp + 0x0000004C:real32] = rLoc5
	rLoc5 = Mem0[esp + 0x0000004C:real32]
	rLoc6 = Mem0[esp + 0x00000050:real32]
	rLoc7 = rLoc4
	rLoc7 = rLoc7 * rLoc5
	rLoc8 = rLoc5
	rLoc8 = rLoc8 * rLoc6
	rLoc7 = rLoc7 - rLoc8
	Mem0[ecx - 0x0000000C:real32] = rLoc7
	rLoc6 = rLoc6 * rLoc3
	rLoc7 = rLoc5
	rLoc5 = rLoc5 * rLoc7
	rLoc5 = rLoc5 + rLoc6
	Mem0[esp + 0x00000050:real32] = rLoc5
	rLoc5 = Mem0[esp + 0x00000048:real32]
	rLoc6 = Mem0[esp + 0x00000050:real32]
	rLoc7 = Mem0[esp + 0x00000030:real64]
	rLoc7 = rLoc7 * rLoc6
	rLoc8 = Mem0[esp + 0x00000028:real64]
	rLoc8 = rLoc8 * rLoc5
	rLoc7 = rLoc7 + rLoc8
	Mem0[ecx - 0x00000010:real32] = rLoc7
	rLoc6 = rLoc6 * Mem0[esp + 0x00000028:real64]
	rLoc7 = Mem0[esp + 0x00000030:real64]
	rLoc5 = rLoc5 * rLoc7
	rLoc5 = rLoc6 - rLoc5
	Mem0[eax - 0x0000000C + edx:real32] = rLoc5
	branch Test(NE,Z) l00401552
	// succ:  l004015E8 l00401552
l004015E8:
	rLoc1 = rLoc4
	rLoc2 = rLoc3
	rLoc2 = rLoc2
	rLoc1 = rLoc1
	// succ:  l004015F0
l004015F0:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x0000002C
	SCZO = cond(esp)
	return
	// succ:  fn004011E0_exit
fn004011E0_exit:


// fn00401600
// Return size: 4
void fn00401600()
fn00401600_entry:
	// succ:  l00401600
l00401600:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = Mem0[esp + 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	SZO = cond(ebp & ebp)
	C = false
	branch Test(LE,SZO) l00401676
	// succ:  l0040160C l00401676
l0040160C:
	rLoc1 = Mem0[esp + 0x00000018:real32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	rLoc2 = Mem0[0x0041AD28:real64]
	edi = eax
	rLoc2 = rLoc2 * rLoc1
	edi = edi + 0x00000004
	SCZO = cond(edi)
	rLoc3 = Mem0[esp + 0x00000018:real32]
	rLoc4 = Mem0[esp + 0x00000014:real32]
	rLoc5 = Mem0[0x0041AD20:real64]
	// succ:  l0040162C
l0040162C:
	rLoc6 = Mem0[edi + 0x00000004:real32]
	rLoc6 = rLoc6 + rLoc5
	Mem0[esp + 0x00000010:real32] = rLoc6
	rLoc6 = Mem0[edi - 0x00000004:real32]
	rLoc6 = rLoc6 * rLoc2
	rLoc7 = Mem0[esp + 0x00000010:real32]
	rLoc8 = rLoc8
	rLoc6 = rLoc6 / rLoc8
	rLoc8 = rLoc5
	rLoc6 = rLoc6 + rLoc8
	v18 = rLoc7
	rLoc7 = rLoc6
	rLoc6 = v18
	call fn00412520 (retsize: 4; FPU: 7;)
	Mem0[ebx + esi * 0x00000008:word32] = eax
	rLoc7 = Mem0[edi:real32]
	rLoc7 = rLoc7 * rLoc1
	rLoc6 = rLoc7 / rLoc6
	rLoc6 = rLoc6 + rLoc3
	call fn00412520 (retsize: 4; FPU: 6;)
	Mem0[ebx + 0x00000004 + esi * 0x00000008:word32] = eax
	esi = esi + 0x00000001
	SCZO = cond(esi)
	edi = edi + 0x0000000C
	SCZO = cond(edi)
	SCZO = cond(esi - ebp)
	branch Test(LT,SO) l0040162C
	// succ:  l0040166B l0040162C
l0040166B:
	rLoc1 = rLoc5
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	rLoc2 = rLoc4
	rLoc3 = rLoc3
	rLoc2 = rLoc2
	rLoc1 = rLoc1
	// succ:  l00401676
l00401676:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00401600_exit
fn00401600_exit:


// fn00401680
// Return size: 4
void fn00401680()
fn00401680_entry:
	// succ:  l00401680
l00401680:
	esp = fp
	esp = esp - 0x00000018
	SCZO = cond(esp)
	rLoc1 = Mem0[0x0041CA18:real32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	rLoc1 = rLoc1 / Mem0[0x0041AD88:real64]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = Mem0[esp + 0x00000028:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	Mem0[esp + 0x00000010:word32] = edi
	call _CIsin (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[0x0041AD80:real64]
	Mem0[esp + 0x00000014:word32] = 0x00000004
	Mem0[esp + 0x00000020:real64] = rLoc1
	rLoc1 = Mem0[esp + 0x0000003C:real32]
	rLoc1 = rLoc1 * Mem0[0x0041ACA0:real64]
	rLoc1 = rLoc1 + Mem0[0x0041AD78:real64]
	Mem0[esp + 0x0000001C:real32] = rLoc1
	// succ:  l004016C8
l004016C8:
	rLoc1 = (real64) Mem0[esp + 0x00000014:int32]
	esp = esp - 0x00000010
	SCZO = cond(esp)
	eax = Mem0[ebp + 0x00000000:word32]
	esi = Mem0[ebp + 0x00000004:word32]
	rLoc1 = rLoc1 * Mem0[esp + 0x00000030:real64]
	edx_eax = (int64) eax
	edx = edx & 0x00000003
	SZO = cond(edx)
	C = false
	eax = eax + edx
	SCZO = cond(eax)
	rLoc1 = rLoc1 + Mem0[0x0041CA18:real32]
	eax = eax >> 0x00000002
	SCZO = cond(eax)
	ecx = eax
	ecx = ecx *s edi
	SCZO = cond(ecx)
	Mem0[esp + 0x00000028:real32] = rLoc1
	rLoc1 = Mem0[esp + 0x00000028:real32]
	rLoc2 = Mem0[0x0041AD40:real64]
	rLoc2 = rLoc1 / rLoc2
	edx = ecx + ecx * 0x00000002
	esi = esi + edx * 0x00000004
	edx = Mem0[ebp + 0x00000008:word32]
	ebx = edx + ecx * 0x00000008
	ecx = Mem0[ebp + 0x0000000C:word32]
	Mem0[esp + 0x00000028:real32] = rLoc2
	rLoc2 = Mem0[esp + 0x00000028:real32]
	Mem0[esp + 0x0000000C:real32] = rLoc2
	rLoc2 = Mem0[0x0041AD70:real64]
	rLoc2 = rLoc1 / rLoc2
	Mem0[esp + 0x00000028:real32] = rLoc2
	rLoc2 = Mem0[esp + 0x00000028:real32]
	Mem0[esp + 0x00000008:real32] = rLoc2
	rLoc1 = rLoc1 * Mem0[0x0041AD68:real64]
	Mem0[esp + 0x00000028:real32] = rLoc1
	rLoc1 = Mem0[esp + 0x00000028:real32]
	Mem0[esp + 0x00000004:real32] = rLoc1
	rLoc1 = (real64) Mem0[esp + 0x00000020:int32]
	rLoc1 = rLoc1 * Mem0[0x0041AD60:real64]
	rLoc1 = rLoc1 + Mem0[0x0041AD58:real64]
	Mem0[esp + 0x00000028:real32] = rLoc1
	rLoc1 = Mem0[esp + 0x00000028:real32]
	Mem0[esp:real32] = rLoc1
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	call fn004011E0 (retsize: 4;)
	rLoc1 = Mem0[esp + 0x00000034:real32]
	eax = Mem0[ebp + 0x00000000:word32]
	Mem0[esp + 0x00000014:real32] = rLoc1
	rLoc1 = Mem0[esp + 0x00000050:real32]
	edx_eax = (int64) eax
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	edx = edx & 0x00000003
	SZO = cond(edx)
	C = false
	Mem0[esp + 0x00000004:real32] = rLoc1
	eax = eax + edx
	SCZO = cond(eax)
	rLoc1 = Mem0[esp + 0x00000040:real32]
	eax = eax >> 0x00000002
	SCZO = cond(eax)
	Mem0[esp:real32] = rLoc1
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = esi
	call fn00401600 (retsize: 4;)
	eax = Mem0[esp + 0x00000024:word32]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	edi = edi + 0x00000001
	SCZO = cond(edi)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	Mem0[esp + 0x00000010:word32] = edi
	Mem0[esp + 0x00000014:word32] = eax
	branch Test(GT,SZO) l004016C8
	// succ:  l004017AB l004016C8
l004017AB:
	eax = Mem0[ebp + 0x00000000:word32]
	rLoc1 = 1
	rLoc2 = Mem0[0x0041AD50:real64]
	edx_eax = (int64) eax
	rLoc3 = Mem0[0x0041AD00:real64]
	edx = edx & 0x00000003
	SZO = cond(edx)
	C = false
	eax = eax + edx
	SCZO = cond(eax)
	Mem0[esp + 0x00000010:word32] = 0x00000000
	eax = eax >> 0x00000002
	SCZO = cond(eax)
	// succ:  l004017CD
l004017CD:
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l00401898
	// succ:  l004017D7 l00401898
l004017D7:
	rLoc4 = (real64) Mem0[esp + 0x00000010:int32]
	rLoc4 = rLoc4 + rLoc1
	Mem0[esp + 0x0000001C:real32] = rLoc4
	rLoc4 = (real64) Mem0[esp + 0x00000010:int32]
	Mem0[esp + 0x00000018:real32] = rLoc4
	rLoc4 = Mem0[esp + 0x0000001C:real32]
	rLoc5 = Mem0[esp + 0x00000018:real32]
	// succ:  l004017F1
l004017F1:
	edx = Mem0[ebp + 0x00000008:word32]
	edi = eax
	edi = edi *s Mem0[esp + 0x00000010:word32]
	SCZO = cond(edi)
	ecx = edx + edi * 0x00000008
	ebx = Mem0[ecx + esi * 0x00000008:word32]
	ecx = Mem0[ecx + 0x00000004 + esi * 0x00000008:word32]
	Mem0[esp + 0x0000001C:word32] = ecx
	ecx = Mem0[esp + 0x00000010:word32]
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	ecx = ecx *s eax
	SCZO = cond(ecx)
	eax = Mem0[ebp + 0x00000004:word32]
	Mem0[esp + 0x00000018:word32] = ebx
	ebx = edx + ecx * 0x00000008
	ecx = ecx + esi
	SCZO = cond(ecx)
	edx = ecx + ecx * 0x00000002
	rLoc6 = Mem0[eax + 0x00000008 + edx * 4F:real32]
	rLoc6 = rLoc2 - rLoc6
	rLoc6 = rLoc6 * rLoc4
	rLoc6 = rLoc6 * rLoc3
	call fn00412520 (retsize: 4; FPU: 6;)
	eax = eax >> 0x00000003
	SCZO = cond(eax)
	ecx = 0x0000003F
	cl = cl - al
	SCZO = cond(cl)
	eax = Mem0[ebp + 0x00000004:word32]
	edi = edi + esi
	SCZO = cond(edi)
	edx = edi + edi * 0x00000002
	rLoc6 = Mem0[eax + 0x00000008 + edx * 4F:real32]
	rLoc6 = rLoc2 - rLoc6
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	rLoc6 = rLoc6 * rLoc5
	rLoc6 = rLoc6 * rLoc3
	call fn00412520 (retsize: 4; FPU: 6;)
	edx = Mem0[ebx + 0x00000004 + esi * 0x00000008:word32]
	eax = eax >> 0x00000003
	SCZO = cond(eax)
	ecx = 0x0000003F
	cl = cl - al
	SCZO = cond(cl)
	eax = Mem0[ebx + esi * 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	ecx = Mem0[esp + 0x00000024:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	edx = Mem0[esp + 0x00000024:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = Mem0[esp + 0x0000003C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call fn00401000 (retsize: 4; FPU: 5;)
	eax = Mem0[ebp + 0x00000000:word32]
	edx_eax = (int64) eax
	edx = edx & 0x00000003
	SZO = cond(edx)
	C = false
	eax = eax + edx
	SCZO = cond(eax)
	esi = esi + 0x00000001
	SCZO = cond(esi)
	eax = eax >> 0x00000002
	SCZO = cond(eax)
	esp = esp + 0x00000018
	SCZO = cond(esp)
	SCZO = cond(esi - eax)
	branch Test(LT,SO) l004017F1
	// succ:  l00401894 l004017F1
l00401894:
	rLoc4 = rLoc5
	rLoc4 = rLoc4
	// succ:  l00401898
l00401898:
	ecx = Mem0[esp + 0x00000010:word32]
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	SCZO = cond(ecx - 0x00000003)
	Mem0[esp + 0x00000010:word32] = ecx
	branch Test(LT,SO) l004017CD
	// succ:  l004018AC l004017CD
l004018AC:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	rLoc2 = rLoc3
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	rLoc2 = rLoc2
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	rLoc1 = rLoc1
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000018
	SCZO = cond(esp)
	return
	// succ:  fn00401680_exit
fn00401680_exit:


// fn004018C0
// Return size: 4
void fn004018C0()
fn004018C0_entry:
	// succ:  l004018C0
l004018C0:
	esp = fp
	esp = esp - 0x00000010
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = rand
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esi = esi + 0x00000008
	SCZO = cond(esi)
	edi = 0x000002EE
	goto l004018DA
	// succ:  l004018DA
l004018D8:
	rLoc1 = rLoc1
	// succ:  l004018DA
l004018DA:
	eax = rand()
	Mem0[esp + 0x00000014:word32] = eax
	rLoc1 = (real64) Mem0[esp + 0x00000014:int32]
	rLoc1 = rLoc1 / Mem0[0x0041AD10:real64]
	Mem0[esp + 0x00000014:real32] = rLoc1
	rLoc1 = Mem0[esp + 0x00000014:real32]
	rLoc1 = rLoc1 + rLoc1
	rLoc1 = rLoc1 - Mem0[0x0041ACD0:real64]
	Mem0[esp + 0x0000000C:real32] = rLoc1
	eax = rand()
	Mem0[esp + 0x00000014:word32] = eax
	rLoc1 = (real64) Mem0[esp + 0x00000014:int32]
	rLoc1 = rLoc1 / Mem0[0x0041AD10:real64]
	Mem0[esp + 0x00000014:real32] = rLoc1
	rLoc1 = Mem0[esp + 0x00000014:real32]
	rLoc1 = rLoc1 + rLoc1
	rLoc1 = rLoc1 - Mem0[0x0041ACD0:real64]
	Mem0[esp + 0x00000010:real32] = rLoc1
	eax = rand()
	Mem0[esp + 0x00000014:word32] = eax
	rLoc1 = (real64) Mem0[esp + 0x00000014:int32]
	rLoc1 = rLoc1 / Mem0[0x0041AD10:real64]
	Mem0[esp + 0x00000014:real32] = rLoc1
	rLoc1 = Mem0[esp + 0x00000014:real32]
	rLoc1 = rLoc1 + rLoc1
	rLoc1 = rLoc1 - Mem0[0x0041ACD0:real64]
	Mem0[esp + 0x00000014:real32] = rLoc1
	rLoc1 = Mem0[esp + 0x00000010:real32]
	rLoc2 = Mem0[esp + 0x0000000C:real32]
	rLoc3 = Mem0[esp + 0x00000014:real32]
	rLoc4 = rLoc3
	rLoc2 = rLoc2 * rLoc4
	rLoc4 = rLoc2
	rLoc1 = rLoc1 * rLoc4
	v12 = rLoc3
	rLoc3 = rLoc2
	rLoc2 = v12
	rLoc1 = rLoc1 + rLoc3
	rLoc2 = rLoc2 * rLoc2
	rLoc1 = rLoc1 + rLoc2
	call _CIsqrt (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	Mem0[esp + 0x00000018:real32] = rLoc1
	rLoc1 = 1
	rLoc2 = Mem0[esp + 0x00000018:real32]
	FPUF = cond(rLoc2 - rLoc2)
	ax = (word16) FPUF << 8
	rLoc1 = rLoc2
	SZO = cond(ah & 0x41)
	C = false
	branch Test(EQ,Z) l004018D8
	// succ:  l00401980 l004018D8
l00401980:
	rLoc2 = 1
	esi = esi + 0x0000000C
	SCZO = cond(esi)
	edi = edi - 0x00000001
	SCZO = cond(edi)
	rLoc1 = rLoc2 / rLoc1
	rLoc2 = Mem0[esp + 0x0000000C:real32]
	rLoc2 = rLoc2 * rLoc1
	rLoc3 = Mem0[esp + 0x00000020:real32]
	rLoc4 = rLoc4
	rLoc2 = rLoc2 * rLoc4
	v19 = rLoc3
	rLoc3 = rLoc2
	rLoc2 = v19
	Mem0[esp + 0x0000000C:real32] = rLoc3
	rLoc3 = Mem0[esp + 0x00000010:real32]
	rLoc3 = rLoc3 * rLoc1
	rLoc3 = rLoc3 * rLoc2
	Mem0[esp + 0x00000010:real32] = rLoc3
	rLoc3 = Mem0[esp + 0x00000014:real32]
	rLoc1 = rLoc1 * rLoc3
	rLoc1 = rLoc1 * rLoc2
	Mem0[esp + 0x00000014:real32] = rLoc1
	rLoc1 = Mem0[esp + 0x0000000C:real32]
	Mem0[esi - 0x00000014:real32] = rLoc1
	rLoc1 = Mem0[esp + 0x00000010:real32]
	Mem0[esi - 0x00000010:real32] = rLoc1
	rLoc1 = Mem0[esp + 0x00000014:real32]
	Mem0[esi - 0x0000000C:real32] = rLoc1
	branch Test(NE,Z) l004018DA
	// succ:  l004019D1 l004018DA
l004019D1:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000010
	SCZO = cond(esp)
	return
	// succ:  fn004018C0_exit
fn004018C0_exit:


// fn004019E0
// Return size: 4
void fn004019E0()
fn004019E0_entry:
	// succ:  l004019E0
l004019E0:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	Mem0[esp + 0x00000010:word32] = 0x00000000
	ebx = 0x00478840
	ebp = 0x00000001
	// succ:  l004019F7
l004019F7:
	edi = Mem0[esp + 0x00000010:word32]
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	edi = edi + 0xFFFFFFFF
	SCZO = cond(edi)
	esi = ebp
	// succ:  l00401A02
l00401A02:
	eax = esi
	edx_eax = (int64) eax
	edx = edx & 0x0000003F
	SZO = cond(edx)
	C = false
	eax = eax + edx
	SCZO = cond(eax)
	eax = eax >> 0x00000006
	SCZO = cond(eax)
	al = al + 0x01
	SCZO = cond(al)
	Mem0[ebx + ecx:byte] = al
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	esi = esi + edi
	SCZO = cond(esi)
	SCZO = cond(ecx - 0x00000040)
	branch Test(LT,SO) l00401A02
	// succ:  l00401A1C l00401A02
l00401A1C:
	v16 = Mem0[esp + 0x00000010:word32] + 0x00000001
	Mem0[esp + 0x00000010:word32] = v16
	SCZO = cond(v16)
	ebp = ebp - 0x00000001
	SCZO = cond(ebp)
	ebx = ebx + 0x00000040
	SCZO = cond(ebx)
	SCZO = cond(ebp - 0xFFFFFFC1)
	branch Test(GT,SZO) l004019F7
	// succ:  l00401A2C l004019F7
l00401A2C:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004019E0_exit
fn004019E0_exit:


// fn00401A40
// Return size: 4
void fn00401A40()
fn00401A40_entry:
	// succ:  l00401A40
l00401A40:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = Mem0[esp + 0x0000000C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = malloc
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0000002C
	eax = malloc(Mem0[esp:size_t])
	esp = esp + 0x00000004
	SCZO = cond(esp)
	esi = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00002328
	Mem0[esi:word32] = 0x000002EE
	eax = malloc(Mem0[esp:size_t])
	esp = esp + 0x00000004
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00001770
	Mem0[esi + 0x00000004:word32] = eax
	eax = malloc(Mem0[esp:size_t])
	esp = esp + 0x00000004
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00002328
	Mem0[esi + 0x00000008:word32] = eax
	eax = malloc(Mem0[esp:size_t])
	ebx = eax
	esp = esp + 0x00000004
	SCZO = cond(esp)
	Mem0[esi + 0x0000000C:word32] = ebx
	call fn004019E0 (retsize: 4;)
	rLoc1 = Mem0[0x0041AD48:real32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	eax = ebx
	Mem0[esp:real32] = rLoc1
	call fn004018C0 (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000C00
	ebx = esi + 0x00000010
	eax = malloc(Mem0[esp:size_t])
	rLoc1 = (real64) Mem0[ebp + 0x00000000:int32]
	rLoc2 = Mem0[0x0041ACD8:real64]
	Mem0[ebx:word32] = eax
	eax = Mem0[ebp + 0x00000004:word32]
	rLoc2 = rLoc2 * rLoc1
	eax = -eax
	SCZO = cond(eax)
	C = eax == 0x00000000
	v13 = rLoc2
	rLoc2 = rLoc1
	rLoc1 = v13
	Mem0[esp + 0x00000018:word32] = eax
	esp = esp + 0x00000004
	SCZO = cond(esp)
	Mem0[esi + 0x00000024:real32] = rLoc2
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041A7B0
	rLoc2 = (real64) Mem0[esp + 0x00000018:int32]
	ecx = esi + 0x00000014
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	rLoc1 = rLoc1 * rLoc2
	Mem0[esi + 0x00000028:real32] = rLoc1
	call fn004023D0 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = esi
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00401A40_exit
fn00401A40_exit:


// fn00401AF0
// Return size: 4
void fn00401AF0()
fn00401AF0_entry:
	// succ:  l00401AF0
l00401AF0:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	rLoc1 = Mem0[0x0041CE78:real32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	rLoc2 = rLoc2
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	rLoc2 = rLoc2 + Mem0[0x0041CA14:real32]
	edi = eax
	Mem0[0x0041CA14:real32] = rLoc2
	rLoc1 = rLoc1 + Mem0[0x0041AD18:real64]
	Mem0[0x0041CE78:real32] = rLoc1
	rLoc1 = (real64) Mem0[edi + 0x00000004:int32]
	Mem0[esp + 0x00000008:real32] = rLoc1
	rLoc1 = Mem0[0x0041CA14:real32]
	rLoc2 = Mem0[esp + 0x00000008:real32]
	FPUF = cond(rLoc2 - rLoc2)
	ax = (word16) FPUF << 8
	rLoc1 = rLoc2
	SZO = cond(ah & 0x05)
	C = false
	branch Test(PE,P) l00401B41
	// succ:  l00401B31 l00401B41
l00401B31:
	Mem0[0x0041CA14:real32] = rLoc1
	rLoc1 = 0
	Mem0[0x0041CE78:real32] = rLoc1
	goto l00401B43
	// succ:  l00401B43
l00401B41:
	rLoc1 = rLoc1
	// succ:  l00401B43
l00401B43:
	rLoc1 = Mem0[0x0041CA14:real32]
	call fn00412520 (retsize: 4; FPU: 1;)
	esi = eax
	eax = Mem0[edi:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0000003F
	eax = esi
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	call fn004020E0 (retsize: 4;)
	ecx = Mem0[edi + 0x00000004:word32]
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	Mem0[esp + 0x00000014:word32] = ecx
	rLoc1 = (real64) Mem0[esp + 0x00000014:int32]
	rLoc1 = rLoc1 - Mem0[0x0041CA14:real32]
	call fn00412520 (retsize: 4; FPU: 1;)
	edx = Mem0[edi:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	ecx = esi
	call fn004020E0 (retsize: 4;)
	esp = esp + 0x00000018
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00401AF0_exit
fn00401AF0_exit:


// fn00401B90
// Return size: 4
void fn00401B90()
fn00401B90_entry:
	// succ:  l00401B90
l00401B90:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	eax = edi
	call fn00401AF0 (retsize: 4;)
	SCZO = cond(Mem0[0x0041CA1C:word32] - 0x00000000)
	branch Test(EQ,Z) l00401BE1
	// succ:  l00401BA4 l00401BE1
l00401BA4:
	ebx = Mem0[edi + 0x00000004:word32]
	SZO = cond(ebx & ebx)
	C = false
	esi = Mem0[edi + 0x0000000C:word32]
	Mem0[0x0041CA1C:word32] = 0x00000000
	branch Test(LE,SZO) l00401BCE
	// succ:  l00401BB8 l00401BCE
l00401BB8:
	ebp = Mem0[edi:word32]
	// succ:  l00401BBA
l00401BBA:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	eax = memset(Mem0[esp:(ptr void)], Mem0[esp + 4:int32], Mem0[esp + 8:size_t])
	esi = esi + Mem0[edi + 0x00000008:word32]
	SCZO = cond(esi)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	ebx = ebx - 0x00000001
	SCZO = cond(ebx)
	branch Test(NE,Z) l00401BBA
	// succ:  l00401BCE l00401BBA
l00401BCE:
	esi = Mem0[esp + 0x00000014:word32]
	ecx = esi + 0x00000010
	edx = 0x00000080
	call fn00402230 (retsize: 4;)
	goto l00401BE5
	// succ:  l00401BE5
l00401BE1:
	esi = Mem0[esp + 0x00000014:word32]
	// succ:  l00401BE5
l00401BE5:
	SCZO = cond(Mem0[esp + 0x00000018:word32] - 0x00000000)
	rLoc1 = Mem0[0x0041CA18:real32]
	rLoc2 = 1
	rLoc2 = rLoc2 + rLoc1
	v16 = rLoc2
	rLoc2 = rLoc1
	rLoc1 = v16
	Mem0[0x0041CA18:real32] = rLoc2
	branch Test(EQ,Z) l00401C0A
	// succ:  l00401BFE l00401C0A
l00401BFE:
	rLoc2 = Mem0[0x0041AE50:real32]
	Mem0[0x0041CE8C:real32] = rLoc2
	// succ:  l00401C0A
l00401C0A:
	rLoc2 = Mem0[0x0041CE88:real32]
	ebx = Mem0[edi + 0x00000004:word32]
	rLoc3 = rLoc3
	Mem0[esp + 0x00000014:word32] = ebx
	rLoc3 = rLoc3 + Mem0[0x0041CE84:real32]
	Mem0[0x0041CE84:real32] = rLoc3
	rLoc2 = rLoc2 + Mem0[0x0041CE8C:real32]
	Mem0[0x0041CE88:real32] = rLoc2
	rLoc2 = (real64) Mem0[esp + 0x00000014:int32]
	Mem0[esp + 0x00000014:real32] = rLoc2
	rLoc2 = Mem0[0x0041CE84:real32]
	rLoc3 = Mem0[esp + 0x00000014:real32]
	FPUF = cond(rLoc3 - rLoc3)
	ax = (word16) FPUF << 8
	rLoc2 = rLoc3
	SZO = cond(ah & 0x05)
	C = false
	branch Test(PE,P) l00401C5E
	// succ:  l00401C4E l00401C5E
l00401C4E:
	rLoc3 = 0
	Mem0[0x0041CE88:real32] = rLoc3
	Mem0[0x0041CE84:real32] = rLoc2
	goto l00401C60
	// succ:  l00401C60
l00401C5E:
	rLoc2 = rLoc2
	// succ:  l00401C60
l00401C60:
	v22 = Mem0[0x0041CE80:word32] + 0x00000001
	Mem0[0x0041CE80:word32] = v22
	SCZO = cond(v22)
	SCZO = cond(Mem0[esp + 0x0000001C:word32] - 0x00000000)
	branch Test(EQ,Z) l00401C80
	// succ:  l00401C6E l00401C80
l00401C6E:
	rLoc2 = 1
	Mem0[0x0041CE80:word32] = 0x00000000
	Mem0[0x0041CE7C:real32] = rLoc2
	// succ:  l00401C80
l00401C80:
	rLoc2 = Mem0[0x0041CE7C:real32]
	rLoc2 = rLoc2 * Mem0[0x0041AD58:real64]
	Mem0[0x0041CE7C:real32] = rLoc2
	rLoc1 = rLoc1 - Mem0[0x0041CE7C:real32]
	rLoc1 = rLoc1 * Mem0[0x0041ADA8:real64]
	rLoc1 = rLoc1 + Mem0[0x0041ADA0:real64]
	call _CIsin (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 + Mem0[0x0041AD98:real64]
	rLoc2 = 1
	eax = ebx
	rLoc1 = rLoc2 / rLoc1
	edx_eax = (int64) eax
	esp = esp - 0x0000000C
	SCZO = cond(esp)
	eax = eax - edx
	SCZO = cond(eax)
	eax = eax >> 0x00000001
	SCZO = cond(eax)
	rLoc1 = rLoc1 - Mem0[0x0041AD90:real64]
	Mem0[esp + 0x00000020:real32] = rLoc1
	rLoc1 = Mem0[esp + 0x00000020:real32]
	Mem0[esp + 0x00000020:word32] = eax
	Mem0[esp + 0x00000008:real32] = rLoc1
	rLoc1 = Mem0[0x0041CE84:real32]
	rLoc1 = rLoc1 - (real64) Mem0[esp + 0x00000020:word32]
	Mem0[esp + 0x00000020:real32] = rLoc1
	rLoc1 = Mem0[esp + 0x00000020:real32]
	Mem0[esp + 0x00000004:real32] = rLoc1
	rLoc1 = Mem0[esi + 0x00000024:real32]
	Mem0[esp:real32] = rLoc1
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00401680 (retsize: 4;)
	esp = esp + 0x00000014
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00401B90_exit
fn00401B90_exit:


// fn00401D00
// Return size: 4
void fn00401D00()
fn00401D00_entry:
	// succ:  l00401D00
l00401D00:
	esp = fp
	eax = Mem0[0x0041A7E8:word32]
	ecx = Mem0[0x0041A7EC:word32]
	edx = Mem0[0x0041A7F0:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	Mem0[0x0041CD78:word32] = eax
	eax = Mem0[0x0041A7F4:word32]
	Mem0[0x0041CD7C:word32] = ecx
	cl = Mem0[0x0041A7F8:byte]
	edi = 0x0041CD78
	Mem0[0x0041CD80:word32] = edx
	Mem0[0x0041CD84:word32] = eax
	Mem0[0x0041CD88:byte] = cl
	edi = edi + 0xFFFFFFFF
	SCZO = cond(edi)
	// succ:  l00401D41
l00401D41:
	al = Mem0[edi + 0x00000001:byte]
	edi = edi + 0x00000001
	SCZO = cond(edi)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l00401D41
	// succ:  l00401D4B l00401D41
l00401D4B:
	dx = Mem0[0x0041A7FC:word16]
	eax = 0x0041CD78
	Mem0[edi:word16] = dx
	eax = eax + 0xFFFFFFFF
	SCZO = cond(eax)
	ecx = ecx + 0x00000000
	// succ:  l00401D60
l00401D60:
	cl = Mem0[eax + 0x00000001:byte]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	SZO = cond(cl & cl)
	C = false
	branch Test(NE,Z) l00401D60
	// succ:  l00401D6A l00401D60
l00401D6A:
	ecx = Mem0[0x0041A800:word32]
	Mem0[eax:word32] = ecx
	ecx = Mem0[0x0041A804:word32]
	Mem0[eax + 0x00000004:word32] = ecx
	cx = Mem0[0x0041A808:word16]
	edi = 0x0041CD78
	Mem0[eax + 0x00000008:word16] = cx
	edi = edi + 0xFFFFFFFF
	SCZO = cond(edi)
	edi = edi
	// succ:  l00401D90
l00401D90:
	al = Mem0[edi + 0x00000001:byte]
	edi = edi + 0x00000001
	SCZO = cond(edi)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l00401D90
	// succ:  l00401D9A l00401D90
l00401D9A:
	eax = 0x0041CD78
	Mem0[edi:word16] = dx
	eax = eax + 0xFFFFFFFF
	SCZO = cond(eax)
	edx = eax + 0x00000001
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000000
	// succ:  l00401DB0
l00401DB0:
	cl = Mem0[eax + 0x00000001:byte]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	SZO = cond(cl & cl)
	C = false
	branch Test(NE,Z) l00401DB0
	// succ:  l00401DBA l00401DB0
l00401DBA:
	ecx = Mem0[0x0041AA90:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = MSVCR80.dll!fopen
	Mem0[eax:word32] = ecx
	ecx = Mem0[0x0041AA94:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041A80C
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	Mem0[eax + 0x00000004:word32] = ecx
	call MSVCR80.dll!fopen (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00401DF2
	// succ:  l00401DE1 l00401DF2
l00401DE1:
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call MSVCR80.dll!fclose (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	eax = 0x0041CD78
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00401D00_exit
l00401DF2:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l00401E00
l00401E00:
	cl = Mem0[eax + 0x0041AA90:byte]
	Mem0[eax + 0x0041CD78:byte] = cl
	eax = eax + 0x00000001
	SCZO = cond(eax)
	SZO = cond(cl & cl)
	C = false
	branch Test(NE,Z) l00401E00
	// succ:  l00401E13 l00401E00
l00401E13:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041A80C
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041AA90
	call esi (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00401DE1
	// succ:  l00401E26 l00401DE1
l00401E26:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041AA90
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041A810
	call __iob_func (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	eax = eax + 0x00000040
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call MSVCR80.dll!fprintf (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00401D00_exit
fn00401D00_exit:


// fn00401E50
// Return size: 4
void fn00401E50()
fn00401E50_entry:
	// succ:  l00401E50
l00401E50:
	esp = fp
	esp = esp - 0x0000001C
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = malloc
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0000080C
	edi = eax
	Mem0[esp + 0x00000020:word32] = 0x0041A7CC
	ebp = 0x0041C3C0
	eax = malloc(Mem0[esp:size_t])
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000080
	Mem0[esp + 0x0000001C:word32] = eax
	eax = malloc(Mem0[esp:size_t])
	ecx = Mem0[edi + 0x00000008:word32]
	esi = eax
	eax = Mem0[edi + 0x0000000C:word32]
	Mem0[esi:word32] = 0x00000010
	Mem0[esi + 0x0000000C:word32] = eax
	Mem0[esi + 0x00000008:word32] = ecx
	edx = 0x0000000C
	Mem0[esi + 0x00000004:word32] = edx
	edi = eax + 0x00000011
	Mem0[esi + 0x0000001C:word32] = edi
	Mem0[esi + 0x00000010:word32] = 0x00000010
	Mem0[esi + 0x00000014:word32] = edx
	Mem0[esi + 0x00000018:word32] = ecx
	edi = eax + 0x00000022
	Mem0[esi + 0x0000002C:word32] = edi
	Mem0[esi + 0x00000020:word32] = 0x00000010
	Mem0[esi + 0x00000024:word32] = edx
	Mem0[esi + 0x00000028:word32] = ecx
	edi = eax + 0x00000033
	Mem0[esi + 0x0000003C:word32] = edi
	Mem0[esi + 0x00000030:word32] = 0x00000010
	Mem0[esi + 0x00000034:word32] = edx
	Mem0[esi + 0x00000038:word32] = ecx
	edi = eax + 0x00000044
	Mem0[esi + 0x0000004C:word32] = edi
	Mem0[esi + 0x00000040:word32] = 0x00000010
	Mem0[esi + 0x00000044:word32] = edx
	Mem0[esi + 0x00000048:word32] = ecx
	edi = eax + 0x00000055
	Mem0[esi + 0x0000005C:word32] = edi
	Mem0[esi + 0x00000050:word32] = 0x00000010
	Mem0[esi + 0x00000054:word32] = edx
	Mem0[esi + 0x00000058:word32] = ecx
	edi = eax + 0x00000066
	Mem0[esi + 0x0000006C:word32] = edi
	edi = 0x00000010
	Mem0[esi + 0x00000060:word32] = edi
	Mem0[esi + 0x00000064:word32] = edx
	Mem0[esi + 0x00000068:word32] = ecx
	eax = eax + 0x00000077
	SCZO = cond(eax)
	Mem0[esi + 0x0000007C:word32] = eax
	Mem0[esi + 0x00000070:word32] = edi
	Mem0[esi + 0x00000074:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	Mem0[esi + 0x00000078:word32] = ecx
	eax = malloc(Mem0[esp:size_t])
	edi = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00012FC0
	Mem0[edi:word32] = 0x00000510
	Mem0[edi + 0x00000004:word32] = 0x0000003C
	Mem0[edi + 0x00000008:word32] = 0x00000510
	eax = malloc(Mem0[esp:size_t])
	Mem0[edi + 0x0000000C:word32] = eax
	eax = Mem0[esp + 0x00000024:word32]
	esp = esp + 0x00000010
	SCZO = cond(esp)
	Mem0[eax + 0x00000808:word32] = edi
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	Mem0[esp + 0x00000018:word32] = eax
	Mem0[esp + 0x00000024:word32] = eax
	// succ:  l00401F56
l00401F56:
	eax = Mem0[esp + 0x0000001C:word32]
	cl = Mem0[eax:byte]
	edx = Mem0[esp + 0x00000014:word32]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	Mem0[esp + 0x0000001C:word32] = eax
	eax = Mem0[edx + 0x00000808:word32]
	Mem0[esp + 0x00000013:byte] = cl
	Mem0[esp + 0x00000028:word32] = eax
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	// succ:  l00401F80
l00401F80:
	edi = Mem0[esp + 0x00000018:word32]
	Mem0[esp + 0x00000020:word32] = 0x00000003
	esp = esp + 0x00000000
	// succ:  l00401F90
l00401F90:
	ecx = Mem0[ebp + 0x00000000:word32]
	eax = Mem0[esp + 0x00000028:word32]
	ecx = ecx << 0x00000004
	SCZO = cond(ecx)
	ecx = ecx + esi
	SCZO = cond(ecx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	edx = edi
	ebp = ebp + 0x00000004
	SCZO = cond(ebp)
	call fn00402150 (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	edi = edi + 0x00000010
	SCZO = cond(edi)
	v14 = Mem0[esp + 0x00000020:word32] - 0x00000001
	Mem0[esp + 0x00000020:word32] = v14
	SCZO = cond(v14)
	branch Test(NE,Z) l00401F90
	// succ:  l00401FB4 l00401F90
l00401FB4:
	ebx = ebx + 0x0000000C
	SCZO = cond(ebx)
	SCZO = cond(ebx - 0x0000003C)
	branch Test(LT,SO) l00401F80
	// succ:  l00401FBC l00401F80
l00401FBC:
	eax = (word32) Mem0[esp + 0x00000013:byte]
	ecx = Mem0[esp + 0x00000024:word32]
	edx = Mem0[esp + 0x00000014:word32]
	edi = 0x00000030
	v17 = Mem0[esp + 0x00000018:word32] + edi
	Mem0[esp + 0x00000018:word32] = v17
	SCZO = cond(v17)
	Mem0[edx + 0x00000404 + eax * 0x00000004:word32] = ecx
	ecx = ecx + edi
	SCZO = cond(ecx)
	SCZO = cond(ecx - 0x00000510)
	Mem0[edx + 0x00000004 + eax * 0x00000004:word32] = edi
	Mem0[esp + 0x00000024:word32] = ecx
	branch Test(LT,SO) l00401F56
	// succ:  l00401FEF l00401F56
l00401FEF:
	eax = edx
	Mem0[eax + 0x00000804:word32] = edi
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[eax:word32] = 0x0000003C
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x0000001C
	SCZO = cond(esp)
	return
	// succ:  fn00401E50_exit
fn00401E50_exit:


// fn00402010
// Return size: 4
void fn00402010()
fn00402010_entry:
	// succ:  l00402010
l00402010:
	esp = fp
	esp = esp - 0x00000008
	SCZO = cond(esp)
	ecx = Mem0[edi + 0x00000808:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	eax = (word32) al
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = Mem0[esp + 0x00000014:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[edi + 0x00000404 + eax * 0x00000004:word32]
	esi = esi + Mem0[ecx + 0x0000000C:word32]
	SCZO = cond(esi)
	eax = Mem0[edi + 0x00000004 + eax * 0x00000004:word32]
	ecx = Mem0[ecx:word32]
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	SCZO = cond(Mem0[edi:word32] - ebx)
	Mem0[esp + 0x0000000C:word32] = eax
	Mem0[esp + 0x00000010:word32] = ecx
	branch Test(LE,SZO) l0040205F
	// succ:  l00402041 l0040205F
l00402041:
	edx = Mem0[esp + 0x0000000C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	eax = memcpy(Mem0[esp:(ptr void)], Mem0[esp + 4:(ptr void)], Mem0[esp + 8:size_t])
	esi = esi + Mem0[esp + 0x0000001C:word32]
	SCZO = cond(esi)
	ebp = ebp + Mem0[esp + 0x00000028:word32]
	SCZO = cond(ebp)
	ebx = ebx + 0x00000001
	SCZO = cond(ebx)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	SCZO = cond(ebx - Mem0[edi:word32])
	branch Test(LT,SO) l00402041
	// succ:  l0040205F l00402041
l0040205F:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000008
	SCZO = cond(esp)
	return
	// succ:  fn00402010_exit
fn00402010_exit:


// fn00402070
// Return size: 4
void fn00402070()
fn00402070_entry:
	// succ:  l00402070
l00402070:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	edx = Mem0[esp + 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = ecx
	ecx = Mem0[edx + 0x00000004:word32]
	ecx = ecx - Mem0[edi:word32]
	SCZO = cond(ecx)
	ebp = 0x0041ABA4
	SCZO = cond(eax - ecx)
	ebx = 0x00000140
	branch Test(GT,SZO) l004020DB
	// succ:  l0040208D l004020DB
l0040208D:
	ecx = Mem0[edx:word32]
	ecx = ecx *s eax
	SCZO = cond(ecx)
	ecx = ecx + Mem0[edx + 0x0000000C:word32]
	SCZO = cond(ecx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	Mem0[esp + 0x00000010:word32] = ecx
	al = 0x61
	goto l004020A4
	// succ:  l004020A4
l004020A0:
	edx = Mem0[esp + 0x00000018:word32]
	// succ:  l004020A4
l004020A4:
	esi = (word32) al
	esi = Mem0[edi + 0x00000004 + esi * 0x00000004:word32]
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	esi = esi + 0x00000001
	SCZO = cond(esi)
	SZO = cond(ebx & ebx)
	C = false
	branch Test(LT,SO) l004020D1
	// succ:  l004020B5 l004020D1
l004020B5:
	edx = Mem0[edx:word32]
	edx = edx - esi
	SCZO = cond(edx)
	SCZO = cond(ebx - edx)
	branch Test(GT,SZO) l004020D1
	// succ:  l004020BD l004020D1
l004020BD:
	edx = Mem0[esp + 0x0000001C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	ecx = ecx + ebx
	SCZO = cond(ecx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	call fn00402010 (retsize: 4;)
	ecx = Mem0[esp + 0x00000018:word32]
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l004020D1
l004020D1:
	al = Mem0[ebp + 0x00000000:byte]
	ebx = ebx + esi
	SCZO = cond(ebx)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l004020A0
	// succ:  l004020DA l004020A0
l004020DA:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l004020DB
l004020DB:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00402070_exit
fn00402070_exit:


// fn004020E0
// Return size: 4
void fn004020E0()
fn004020E0_entry:
	// succ:  l004020E0
l004020E0:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = eax
	eax = Mem0[edi + 0x00000004:word32]
	SCZO = cond(ecx - eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[edi + 0x0000000C:word32]
	branch Test(GT,SZO) l0040214C
	// succ:  l004020EE l0040214C
l004020EE:
	edx = Mem0[edi:word32]
	SCZO = cond(Mem0[esp + 0x00000010:word32] - edx)
	branch Test(GT,SZO) l0040214C
	// succ:  l004020F6 l0040214C
l004020F6:
	SCZO = cond(Mem0[esp + 0x00000014:word32] - 0x00000000)
	branch Test(LE,SZO) l0040214C
	// succ:  l004020FD l0040214C
l004020FD:
	SZO = cond(ebx & ebx)
	C = false
	branch Test(LE,SZO) l0040214C
	// succ:  l00402101 l0040214C
l00402101:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = ecx + ebx
	SCZO = cond(ebp - eax)
	branch Test(LE,SZO) l0040210D
	// succ:  l00402109 l0040210D
l00402109:
	eax = eax - ecx
	SCZO = cond(eax)
	ebx = eax
	// succ:  l0040210D
l0040210D:
	eax = Mem0[esp + 0x00000014:word32]
	ebp = Mem0[esp + 0x00000018:word32]
	ebp = ebp + eax
	SCZO = cond(ebp)
	SCZO = cond(ebp - edx)
	branch Test(LE,SZO) l00402121
	// succ:  l0040211B l00402121
l0040211B:
	edx = edx - eax
	SCZO = cond(edx)
	Mem0[esp + 0x00000018:word32] = edx
	// succ:  l00402121
l00402121:
	edx = Mem0[edi + 0x00000008:word32]
	edx = edx *s ecx
	SCZO = cond(edx)
	edx = edx + eax
	SCZO = cond(edx)
	esi = esi + edx
	SCZO = cond(esi)
	SZO = cond(ebx & ebx)
	C = false
	branch Test(LE,SZO) l0040214B
	// succ:  l0040212F l0040214B
l0040212F:
	ebp = (word32) Mem0[esp + 0x00000010:byte]
	// succ:  l00402134
l00402134:
	eax = Mem0[esp + 0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	eax = memset(Mem0[esp:(ptr void)], Mem0[esp + 4:int32], Mem0[esp + 8:size_t])
	esi = esi + Mem0[edi + 0x00000008:word32]
	SCZO = cond(esi)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	ebx = ebx - 0x00000001
	SCZO = cond(ebx)
	branch Test(NE,Z) l00402134
	// succ:  l0040214B l00402134
l0040214B:
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l0040214C
l0040214C:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004020E0_exit
fn004020E0_exit:


// fn00402150
// Return size: 4
void fn00402150()
fn00402150_entry:
	// succ:  l00402150
l00402150:
	esp = fp
	esp = esp - 0x00000014
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[ecx + 0x0000000C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = eax
	eax = Mem0[edi + 0x00000008:word32]
	ebx = Mem0[edi + 0x0000000C:word32]
	Mem0[esp + 0x0000001C:word32] = eax
	eax = Mem0[ecx + 0x00000008:word32]
	Mem0[esp + 0x00000020:word32] = eax
	eax = Mem0[ecx:word32]
	ecx = Mem0[ecx + 0x00000004:word32]
	ebp = eax
	ebp = -ebp
	SCZO = cond(ebp)
	C = ebp == 0x00000000
	SCZO = cond(edx - ebp)
	Mem0[esp + 0x00000010:word32] = eax
	Mem0[esp + 0x00000018:word32] = ecx
	branch Test(LT,SO) l0040221A
	// succ:  l00402186 l0040221A
l00402186:
	ebp = ecx
	ecx = Mem0[esp + 0x00000028:word32]
	ebp = -ebp
	SCZO = cond(ebp)
	C = ebp == 0x00000000
	SCZO = cond(ecx - ebp)
	branch Test(LT,SO) l0040221A
	// succ:  l00402196 l0040221A
l00402196:
	ebp = Mem0[edi:word32]
	SCZO = cond(edx - ebp)
	branch Test(GT,SZO) l0040221A
	// succ:  l0040219C l0040221A
l0040219C:
	edi = Mem0[edi + 0x00000004:word32]
	SCZO = cond(ecx - edi)
	Mem0[esp + 0x00000014:word32] = edi
	branch Test(GT,SZO) l0040221A
	// succ:  l004021A7 l0040221A
l004021A7:
	SZO = cond(edx & edx)
	C = false
	branch Test(GE,SO) l004021B5
	// succ:  l004021AB l004021B5
l004021AB:
	v14 = Mem0[esp + 0x00000010:word32] + edx
	Mem0[esp + 0x00000010:word32] = v14
	SCZO = cond(v14)
	esi = esi - edx
	SCZO = cond(esi)
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	goto l004021C8
	// succ:  l004021C8
l004021B5:
	edi = eax + edx
	SCZO = cond(edi - ebp)
	edi = Mem0[esp + 0x00000014:word32]
	branch Test(LE,SZO) l004021C8
	// succ:  l004021C0 l004021C8
l004021C0:
	ebp = ebp - eax
	SCZO = cond(ebp)
	ebp = ebp - edx
	SCZO = cond(ebp)
	v15 = Mem0[esp + 0x00000010:word32] + ebp
	Mem0[esp + 0x00000010:word32] = v15
	SCZO = cond(v15)
	// succ:  l004021C8
l004021C8:
	SZO = cond(ecx & ecx)
	C = false
	branch Test(GE,SO) l004021DB
	// succ:  l004021CC l004021DB
l004021CC:
	eax = eax *s ecx
	SCZO = cond(eax)
	esi = esi - eax
	SCZO = cond(esi)
	eax = Mem0[esp + 0x00000018:word32]
	eax = eax + ecx
	SCZO = cond(eax)
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	goto l004021EC
	// succ:  l004021EC
l004021DB:
	eax = Mem0[esp + 0x00000018:word32]
	ebp = eax + ecx
	SCZO = cond(ebp - edi)
	branch Test(LE,SZO) l004021EC
	// succ:  l004021E6 l004021EC
l004021E6:
	edi = edi - eax
	SCZO = cond(edi)
	edi = edi - ecx
	SCZO = cond(edi)
	eax = eax + edi
	SCZO = cond(eax)
	// succ:  l004021EC
l004021EC:
	edi = Mem0[esp + 0x0000001C:word32]
	ebp = edi
	ebp = ebp *s ecx
	SCZO = cond(ebp)
	ebp = ebp + edx
	SCZO = cond(ebp)
	ebx = ebx + ebp
	SCZO = cond(ebx)
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0040221A
	// succ:  l004021FD l0040221A
l004021FD:
	ebp = eax
	// succ:  l00402200
l00402200:
	ecx = Mem0[esp + 0x00000010:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	eax = memcpy(Mem0[esp:(ptr void)], Mem0[esp + 4:(ptr void)], Mem0[esp + 8:size_t])
	esi = esi + Mem0[esp + 0x0000002C:word32]
	SCZO = cond(esi)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	ebx = ebx + edi
	SCZO = cond(ebx)
	ebp = ebp - 0x00000001
	SCZO = cond(ebp)
	branch Test(NE,Z) l00402200
	// succ:  l0040221A l00402200
l0040221A:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000014
	SCZO = cond(esp)
	return
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000014
	SCZO = cond(esp)
	return
	// succ:  fn00402150_exit fn00402150_exit
fn00402150_exit:


// fn00402230
// Return size: 4
void fn00402230()
fn00402230_entry:
	// succ:  l00402230
l00402230:
	esp = fp
	esp = esp - 0x00000304
	SCZO = cond(esp)
	eax = Mem0[0x0041C340:word32]
	eax = eax ^ esp
	SZO = cond(eax)
	C = false
	Mem0[esp + 0x00000300:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = edx
	SZO = cond(esi & esi)
	C = false
	eax = esp + 0x00000004
	branch Test(LE,SZO) l00402277
	// succ:  l0040224F l00402277
l0040224F:
	ecx = Mem0[ecx:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = esi
	// succ:  l00402254
l00402254:
	edx = (word32) Mem0[ecx:byte]
	Mem0[eax:byte] = dl
	edx = (word32) Mem0[ecx + 0x00000004:byte]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = dl
	edx = (word32) Mem0[ecx + 0x00000008:byte]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = dl
	eax = eax + 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x0000000C
	SCZO = cond(ecx)
	edi = edi - 0x00000001
	SCZO = cond(edi)
	branch Test(NE,Z) l00402254
	// succ:  l00402276 l00402254
l00402276:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00402277
l00402277:
	ecx = esp + 0x00000004
	call fn00402A40 (retsize: 4;)
	ecx = Mem0[esp + 0x00000304:word32]
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x00000304
	SCZO = cond(esp)
	return
	// succ:  fn00402230_exit
fn00402230_exit:


// fn004022A0
// Return size: 4
void fn004022A0()
fn004022A0_entry:
	// succ:  l004022A0
l004022A0:
	esp = fp
	SCZO = cond(eax - ecx)
	branch Test(LT,SO) l004022B0
	// succ:  l004022A4 l004022B0
l004022A4:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SZO = cond(ecx & ecx)
	C = false
	al = Test(LT,SO)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	eax = eax & ecx
	SZO = cond(eax)
	C = false
	// succ:  l004022B0
l004022B0:
	return
	// succ:  fn004022A0_exit
fn004022A0_exit:


// fn004022C0
// Return size: 4
void fn004022C0()
fn004022C0_entry:
	// succ:  l004022C0
l004022C0:
	esp = fp
	Mem0[0x00478830:word32] = 0x00000000
	call libmikmod.dll!MikMod_RegisterAllDrivers (retsize: 4;)
	call libmikmod.dll!MikMod_RegisterAllLoaders (retsize: 4;)
	eax = libmikmod.dll!md_mode
	ecx = libmikmod.dll!md_reverb
	Mem0[eax:word16] = 0x0009
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041A836
	Mem0[ecx:byte] = 0x00
	call libmikmod.dll!MikMod_Init (retsize: 4;)
	edx = libmikmod.dll!md_mode
	ecx = Mem0[esp + 0x00000008:word32]
	eax = libmikmod.dll!md_reverb
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000006
	Mem0[edx:word16] = 0x0009
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	Mem0[eax:byte] = 0x00
	call libmikmod.dll!Player_Load (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	Mem0[0x00478834:word32] = eax
	branch Test(NE,Z) l00402326
	// succ:  l00402322 l00402326
l00402322:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	return
	// succ:  fn004022C0_exit
l00402326:
	Mem0[eax + 0x000000F8:word32] = 0x00000001
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	return
	// succ:  fn004022C0_exit
fn004022C0_exit:


// fn00402340
// Return size: 4
void fn00402340()
fn00402340_entry:
	// succ:  l00402340
l00402340:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0000002C
	eax = malloc(Mem0[esp:size_t])
	ecx = Mem0[0x0041C374:word32]
	edx = Mem0[0x0041C378:word32]
	Mem0[eax:word32] = ecx
	ecx = Mem0[0x0041C37C:word32]
	Mem0[eax + 0x00000004:word32] = edx
	edx = Mem0[0x0041C380:word32]
	Mem0[eax + 0x00000008:word32] = ecx
	ecx = Mem0[0x0041C384:word32]
	Mem0[eax + 0x0000000C:word32] = edx
	edx = Mem0[0x0041C388:word32]
	Mem0[eax + 0x00000010:word32] = ecx
	ecx = Mem0[0x0041C38C:word32]
	Mem0[eax + 0x00000014:word32] = edx
	edx = Mem0[0x0041C390:word32]
	Mem0[eax + 0x00000018:word32] = ecx
	ecx = Mem0[0x0041C394:word32]
	Mem0[eax + 0x0000001C:word32] = edx
	edx = Mem0[0x0041C398:word32]
	Mem0[eax + 0x00000020:word32] = ecx
	ecx = Mem0[0x0041C39C:word32]
	Mem0[eax + 0x00000024:word32] = edx
	esp = esp + 0x00000004
	SCZO = cond(esp)
	Mem0[0x00478838:word32] = eax
	Mem0[0x00478830:word32] = 0x0000000B
	Mem0[eax + 0x00000028:word32] = ecx
	return
	// succ:  fn00402340_exit
fn00402340_exit:


// fn004023D0
// Return size: 4
void fn004023D0()
fn004023D0_entry:
	// succ:  l004023D0
l004023D0:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	esp = esp - 0x0000002C
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = MSVCR80.dll!printf
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[ebp + 0x00000010:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041A838
	Mem0[ebp - 0x0000001C:word32] = 0x00000000
	call MSVCR80.dll!printf (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041A850
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call MSVCR80.dll!fopen (retsize: 4;)
	edi = eax
	esp = esp + 0x00000010
	SCZO = cond(esp)
	SZO = cond(edi & edi)
	C = false
	Mem0[ebp - 0x00000018:word32] = edi
	branch Test(NE,Z) l00402420
	// succ:  l00402409 l00402420
l00402409:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041A854
	call MSVCR80.dll!printf (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	eax = 0x00000001
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004023D0_exit
l00402420:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004023C0
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004023C0
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041A878
	call fn00407B20 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	Mem0[ebp - 0x00000008:word32] = eax
	branch Test(NE,Z) l0040245E
	// succ:  l00402440 l0040245E
l00402440:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041A880
	call MSVCR80.dll!printf (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call MSVCR80.dll!fclose (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	eax = 0x00000001
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004023D0_exit
l0040245E:
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn004083B0 (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	Mem0[ebp - 0x00000010:word32] = eax
	branch Test(NE,Z) l00402499
	// succ:  l0040246E l00402499
l0040246E:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041A880
	call MSVCR80.dll!printf (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call MSVCR80.dll!fclose (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	eax = ebp - 0x00000008
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn00407B50 (retsize: 4;)
	esp = esp + 0x00000018
	SCZO = cond(esp)
	eax = 0x00000001
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004023D0_exit
l00402499:
	ecx = Mem0[ebp - 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	call _setjmp3 (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004024DE
	// succ:  l004024AB l004024DE
l004024AB:
	edx = Mem0[ebp + 0x00000010:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041A880
	call MSVCR80.dll!printf (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	eax = ebp - 0x00000010
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	ecx = ebp - 0x00000008
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	call fn00407B50 (retsize: 4;)
	edx = Mem0[ebp - 0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call MSVCR80.dll!fclose (retsize: 4;)
	esp = esp + 0x00000018
	SCZO = cond(esp)
	eax = 0x00000001
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004023D0_exit
l004024DE:
	eax = Mem0[ebp - 0x00000018:word32]
	ecx = Mem0[ebp - 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	call fn00408290 (retsize: 4;)
	edx = Mem0[ebp - 0x0000001C:word32]
	eax = Mem0[ebp - 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn00407C10 (retsize: 4;)
	ecx = Mem0[ebp - 0x00000010:word32]
	edx = Mem0[ebp - 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call fn00405510 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	eax = ebp - 0x00000024
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	ecx = ebp - 0x00000028
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	edx = ebp - 0x0000002C
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	edx = Mem0[ebp - 0x00000010:word32]
	eax = ebp - 0x0000000C
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = Mem0[ebp - 0x00000008:word32]
	ecx = ebp - 0x00000014
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn00405140 (retsize: 4;)
	ecx = Mem0[ebp - 0x0000000C:word32]
	ebx = malloc
	edx = 0x00000000 + ecx * 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	eax = malloc(Mem0[esp:size_t])
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	esp = esp + 0x00000040
	SCZO = cond(esp)
	SCZO = cond(Mem0[ebp - 0x0000000C:word32] - esi)
	edi = eax
	branch Test(ULE,CZ) l00402572
	// succ:  l00402549 l00402572
l00402549:
	esp = esp + 0x00000000
	// succ:  l00402550
l00402550:
	eax = Mem0[ebp - 0x00000010:word32]
	ecx = Mem0[ebp - 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	call fn00405120 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = malloc(Mem0[esp:size_t])
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	Mem0[edi + esi * 0x00000004:word32] = eax
	branch Test(EQ,Z) l004025B7
	// succ:  l0040256A l004025B7
l0040256A:
	esi = esi + 0x00000001
	SCZO = cond(esi)
	SCZO = cond(esi - Mem0[ebp - 0x0000000C:word32])
	branch Test(ULT,C) l00402550
	// succ:  l00402572 l00402550
l00402572:
	edx = Mem0[ebp - 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call fn004069C0 (retsize: 4;)
	eax = Mem0[ebp - 0x00000014:word32]
	esi = Mem0[ebp + 0x00000008:word32]
	ecx = Mem0[ebp - 0x0000000C:word32]
	Mem0[esi:word32] = eax
	Mem0[esi + 0x00000008:word32] = eax
	eax = eax *s ecx
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	Mem0[esi + 0x00000004:word32] = ecx
	call ebx (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	Mem0[esi + 0x0000000C:word32] = eax
	branch Test(NE,Z) l004025CF
	// succ:  l0040259D l004025CF
l0040259D:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041A8E4
	call MSVCR80.dll!printf (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	eax = 0x00000001
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004023D0_exit
l004025B7:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041A8BC
	call MSVCR80.dll!printf (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004023D0_exit
l004025CF:
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	SCZO = cond(Mem0[ebp - 0x0000000C:word32] - ebx)
	esi = eax
	branch Test(ULE,CZ) l0040260C
	// succ:  l004025D8 l0040260C
l004025D8:
	edx = Mem0[ebp - 0x00000014:word32]
	// succ:  l004025E0
l004025E0:
	eax = Mem0[edi + ebx * 0x00000004:word32]
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	SZO = cond(edx & edx)
	C = false
	branch Test(ULE,CZ) l00402604
	// succ:  l004025E9 l00402604
l004025E9:
	esp = esp + 0x00000000
	// succ:  l004025F0
l004025F0:
	dl = Mem0[eax:byte]
	Mem0[esi:byte] = dl
	edx = Mem0[ebp - 0x00000014:word32]
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	esi = esi + 0x00000001
	SCZO = cond(esi)
	eax = eax + 0x00000001
	SCZO = cond(eax)
	SCZO = cond(ecx - edx)
	branch Test(ULT,C) l004025F0
	// succ:  l00402604 l004025F0
l00402604:
	ebx = ebx + 0x00000001
	SCZO = cond(ebx)
	SCZO = cond(ebx - Mem0[ebp - 0x0000000C:word32])
	branch Test(ULT,C) l004025E0
	// succ:  l0040260C l004025E0
l0040260C:
	ebx = free
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	SCZO = cond(Mem0[ebp - 0x0000000C:word32] - esi)
	branch Test(ULE,CZ) l00402631
	ebx = free
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	SCZO = cond(Mem0[ebp - 0x0000000C:word32] - esi)
	branch Test(ULE,CZ) l00402631
	// succ:  l00402619 l00402631
l00402619:
	esp = esp + 0x00000000
	esp = esp + 0x00000000
	// succ:  l00402620
l00402620:
	eax = Mem0[edi + esi * 0x00000004:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	free(Mem0[esp:(ptr void)])
	esi = esi + 0x00000001
	SCZO = cond(esi)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	SCZO = cond(esi - Mem0[ebp - 0x0000000C:word32])
	branch Test(ULT,C) l00402620
	// succ:  l00402631 l00402620
l00402631:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call ebx (retsize: 4;)
	esi = malloc
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000300
	eax = malloc(Mem0[esp:size_t])
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000C00
	Mem0[ebp - 0x00000004:word32] = eax
	eax = malloc(Mem0[esp:size_t])
	esi = Mem0[ebp + 0x0000000C:word32]
	ecx = ebp - 0x00000020
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	ecx = Mem0[ebp - 0x00000008:word32]
	edx = ebp - 0x00000004
	Mem0[esi:word32] = eax
	eax = Mem0[ebp - 0x00000010:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	Mem0[ebp - 0x00000020:word32] = 0x00000100
	call fn00405270 (retsize: 4;)
	esp = esp + 0x0000001C
	SCZO = cond(esp)
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l00402673
l00402673:
	edx = Mem0[ebp - 0x00000004:word32]
	edx = (word32) Mem0[eax + edx:byte]
	edi = Mem0[esi:word32]
	edx = edx >>u 0x00000002
	SCZO = cond(edx)
	Mem0[ecx + edi:word32] = edx
	edx = Mem0[ebp - 0x00000004:word32]
	edx = (word32) Mem0[eax + 0x00000001 + edx:byte]
	edi = Mem0[esi:word32]
	edx = edx >>u 0x00000002
	SCZO = cond(edx)
	Mem0[ecx + 0x00000004 + edi:word32] = edx
	edx = Mem0[ebp - 0x00000004:word32]
	edx = (word32) Mem0[eax + 0x00000002 + edx:byte]
	edi = Mem0[esi:word32]
	edx = edx >>u 0x00000002
	SCZO = cond(edx)
	Mem0[ecx + 0x00000008 + edi:word32] = edx
	edx = Mem0[ebp - 0x00000004:word32]
	edx = (word32) Mem0[eax + 0x00000003 + edx:byte]
	edi = Mem0[esi:word32]
	edx = edx >>u 0x00000002
	SCZO = cond(edx)
	Mem0[ecx + 0x0000000C + edi:word32] = edx
	edx = Mem0[ebp - 0x00000004:word32]
	edx = (word32) Mem0[eax + 0x00000004 + edx:byte]
	edi = Mem0[esi:word32]
	edx = edx >>u 0x00000002
	SCZO = cond(edx)
	Mem0[ecx + 0x00000010 + edi:word32] = edx
	edx = Mem0[ebp - 0x00000004:word32]
	edx = (word32) Mem0[eax + 0x00000005 + edx:byte]
	edi = Mem0[esi:word32]
	edx = edx >>u 0x00000002
	SCZO = cond(edx)
	Mem0[ecx + 0x00000014 + edi:word32] = edx
	edx = Mem0[ebp - 0x00000004:word32]
	edx = (word32) Mem0[eax + 0x00000006 + edx:byte]
	edi = Mem0[esi:word32]
	edx = edx >>u 0x00000002
	SCZO = cond(edx)
	Mem0[ecx + 0x00000018 + edi:word32] = edx
	edx = Mem0[ebp - 0x00000004:word32]
	edx = (word32) Mem0[eax + 0x00000007 + edx:byte]
	edi = Mem0[esi:word32]
	edx = edx >>u 0x00000002
	SCZO = cond(edx)
	Mem0[ecx + 0x0000001C + edi:word32] = edx
	edx = Mem0[ebp - 0x00000004:word32]
	edx = (word32) Mem0[eax + 0x00000008 + edx:byte]
	edi = Mem0[esi:word32]
	edx = edx >>u 0x00000002
	SCZO = cond(edx)
	Mem0[ecx + 0x00000020 + edi:word32] = edx
	edx = Mem0[ebp - 0x00000004:word32]
	edx = (word32) Mem0[eax + 0x00000009 + edx:byte]
	edi = Mem0[esi:word32]
	edx = edx >>u 0x00000002
	SCZO = cond(edx)
	Mem0[ecx + 0x00000024 + edi:word32] = edx
	edx = Mem0[ebp - 0x00000004:word32]
	edx = (word32) Mem0[eax + 0x0000000A + edx:byte]
	edi = Mem0[esi:word32]
	edx = edx >>u 0x00000002
	SCZO = cond(edx)
	Mem0[ecx + 0x00000028 + edi:word32] = edx
	edx = Mem0[ebp - 0x00000004:word32]
	edx = (word32) Mem0[eax + 0x0000000B + edx:byte]
	edi = Mem0[esi:word32]
	edx = edx >>u 0x00000002
	SCZO = cond(edx)
	Mem0[ecx + 0x0000002C + edi:word32] = edx
	eax = eax + 0x0000000C
	SCZO = cond(eax)
	ecx = ecx + 0x00000030
	SCZO = cond(ecx)
	SCZO = cond(eax - 0x00000300)
	branch Test(LT,SO) l00402673
	// succ:  l0040274E l00402673
l0040274E:
	eax = Mem0[ebp - 0x00000010:word32]
	ecx = Mem0[ebp - 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	call fn00406A20 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	edx = ebp - 0x00000010
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	eax = ebp - 0x00000008
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn00407B50 (retsize: 4;)
	ecx = Mem0[ebp - 0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	call MSVCR80.dll!fclose (retsize: 4;)
	esp = esp + 0x00000018
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004023D0_exit
fn004023D0_exit:


// fn00402780
// Return size: 4
void fn00402780()
fn00402780_entry:
	// succ:  l00402780
l00402780:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000020
	call SDL.dll!SDL_Init (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	branch Test(GE,SO) l00402795
	// succ:  l0040278E l00402795
l0040278E:
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	exit(Mem0[esp:int32])
	// succ:  l00402795
l00402795:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	call SDL.dll!SDL_ShowCursor (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0xC0000001
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000008
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x000000C8
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000140
	call SDL.dll!SDL_SetVideoMode (retsize: 4;)
	esp = esp + 0x00000014
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	Mem0[0x0041CE90:word32] = eax
	branch Test(NE,Z) l004027D5
	// succ:  l004027BE l004027D5
l004027BE:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041A910
	call MSVCR80.dll!printf (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	call SDL.dll!SDL_Quit (retsize: 4;)
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	return
	// succ:  fn00402780_exit
l004027D5:
	ecx = Mem0[eax + 0x0000000C:word32]
	edx = Mem0[eax + 0x00000008:word32]
	eax = (word32) Mem0[eax + 0x00000010:word16]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041A928
	Mem0[0x0047850C:word32] = 0x00000000
	Mem0[0x00478508:word32] = 0x00000001
	call MSVCR80.dll!printf (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000300
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00478520
	eax = memset(Mem0[esp:(ptr void)], Mem0[esp + 4:int32], Mem0[esp + 8:size_t])
	ecx = Mem0[0x0041CE90:word32]
	edx = (word32) Mem0[ecx + 0x00000010:word16]
	esi = malloc
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0000FA00
	Mem0[0x00478518:word32] = edx
	Mem0[0x00478500:word32] = 0x00000140
	Mem0[0x00478504:word32] = 0x000000C8
	Mem0[0x0047882C:word32] = 0x00000008
	eax = malloc(Mem0[esp:size_t])
	edi = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000010
	Mem0[0x0047851C:word32] = edi
	eax = malloc(Mem0[esp:size_t])
	esi = timeGetTime
	esp = esp + 0x00000024
	SCZO = cond(esp)
	Mem0[0x00478824:word32] = eax
	Mem0[eax:word32] = 0x00000140
	Mem0[eax + 0x00000004:word32] = 0x000000C8
	Mem0[eax + 0x00000008:word32] = 0x00000140
	Mem0[eax + 0x0000000C:word32] = edi
	Mem0[0x00478828:word32] = 0x000037CD
	eax = timeGetTime()
	Mem0[0x00478510:word32] = eax
	eax = timeGetTime()
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[0x00478820:word32] = eax
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00402780_exit
fn00402780_exit:


// fn004028A0
// Return size: 4
void fn004028A0()
fn004028A0_entry:
	// succ:  l004028A0
l004028A0:
	esp = fp
	eax = esp - 0x00000014
	esp = esp - 0x00000014
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call SDL.dll!SDL_PollEvent (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004028CF
	// succ:  l004028B4 l004028CF
l004028B4:
	al = Mem0[esp:byte]
	SCZO = cond(al - 0x03)
	branch Test(EQ,Z) l004028E8
	// succ:  l004028BB l004028E8
l004028BB:
	SCZO = cond(al - 0x0C)
	branch Test(EQ,Z) l004028D5
	// succ:  l004028BF l004028D5
l004028BF:
	ecx = esp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	call SDL.dll!SDL_PollEvent (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l004028B4
	// succ:  l004028CF l004028B4
l004028CF:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	esp = esp + 0x00000014
	SCZO = cond(esp)
	return
	// succ:  fn004028A0_exit
l004028D5:
	Mem0[0x0047850C:word32] = 0x0000001B
	eax = 0x00000001
	esp = esp + 0x00000014
	SCZO = cond(esp)
	return
	// succ:  fn004028A0_exit
l004028E8:
	edx = Mem0[esp + 0x00000008:word32]
	Mem0[0x0047850C:word32] = edx
	eax = 0x00000001
	esp = esp + 0x00000014
	SCZO = cond(esp)
	return
	// succ:  fn004028A0_exit
fn004028A0_exit:


// fn00402900
// Return size: 4
void fn00402900()
fn00402900_entry:
	// succ:  l00402900
l00402900:
	esp = fp
	esp = esp - 0x00000400
	SCZO = cond(esp)
	SCZO = cond(Mem0[0x00478508:word32] - 0x00000000)
	branch Test(EQ,Z) l00402969
	// succ:  l0040290F l00402969
l0040290F:
	Mem0[0x00478508:word32] = 0x00000000
	ecx = esp + 0x00000001
	eax = 0x00478521
	// succ:  l00402922
l00402922:
	edx = (word32) Mem0[eax - 0x00000001:byte]
	dl = dl + dl
	SCZO = cond(dl)
	dl = dl + dl
	SCZO = cond(dl)
	Mem0[ecx - 0x00000001:byte] = dl
	edx = (word32) Mem0[eax:byte]
	dl = dl + dl
	SCZO = cond(dl)
	dl = dl + dl
	SCZO = cond(dl)
	Mem0[ecx:byte] = dl
	edx = (word32) Mem0[eax + 0x00000001:byte]
	dl = dl + dl
	SCZO = cond(dl)
	dl = dl + dl
	SCZO = cond(dl)
	Mem0[ecx + 0x00000001:byte] = dl
	eax = eax + 0x00000003
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	SCZO = cond(eax - 0x00478821)
	branch Test(LT,SO) l00402922
	// succ:  l0040294E l00402922
l0040294E:
	ecx = Mem0[0x0041CE90:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000100
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	eax = esp + 0x00000008
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	call SDL.dll!SDL_SetColors (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	// succ:  l00402969
l00402969:
	edx = Mem0[0x0041CE90:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call SDL.dll!SDL_LockSurface (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00402992
	// succ:  l0040297C l00402992
l0040297C:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041A944
	call MSVCR80.dll!printf (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000001
	exit(Mem0[esp:int32])
	// succ:  l00402992
l00402992:
	eax = Mem0[0x0041CE90:word32]
	ecx = Mem0[esp + 0x00000404:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = Mem0[0x00478504:word32]
	SZO = cond(ebx & ebx)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[eax + 0x00000014:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[ecx + 0x0000000C:word32]
	Mem0[0x00478514:word32] = esi
	branch Test(EQ,Z) l00402A08
	// succ:  l004029B7 l00402A08
l004029B7:
	ecx = Mem0[0x00478500:word32]
	eax = ecx
	edx_eax = (int64) eax
	edx = edx & 0x00000003
	SZO = cond(edx)
	C = false
	eax = eax + edx
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = eax
	eax = Mem0[0x00478518:word32]
	eax = eax - ecx
	SCZO = cond(eax)
	edx_eax = (int64) eax
	edx = edx & 0x00000003
	SZO = cond(edx)
	C = false
	eax = eax + edx
	SCZO = cond(eax)
	eax = eax >> 0x00000002
	SCZO = cond(eax)
	eax = eax + eax
	SCZO = cond(eax)
	ebp = ebp >> 0x00000002
	SCZO = cond(ebp)
	eax = eax + eax
	SCZO = cond(eax)
	// succ:  l004029E0
l004029E0:
	ecx = ebp
	ebx = ebx - 0x00000001
	SCZO = cond(ebx)
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l00402A01
	// succ:  l004029E9 l00402A01
l004029E9:
	esp = esp + 0x00000000
	// succ:  l004029F0
l004029F0:
	edx = Mem0[edi:word32]
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	Mem0[esi:word32] = edx
	esi = esi + 0x00000004
	SCZO = cond(esi)
	edi = edi + 0x00000004
	SCZO = cond(edi)
	SZO = cond(ecx & ecx)
	C = false
	branch Test(NE,Z) l004029F0
	// succ:  l00402A01 l004029F0
l00402A01:
	esi = esi + eax
	SCZO = cond(esi)
	SZO = cond(ebx & ebx)
	C = false
	branch Test(NE,Z) l004029E0
	// succ:  l00402A07 l004029E0
l00402A07:
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00402A08
l00402A08:
	eax = Mem0[0x0041CE90:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call SDL.dll!SDL_UnlockSurface (retsize: 4;)
	ecx = Mem0[0x0041CE90:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	call SDL.dll!SDL_UpdateRect (retsize: 4;)
	esp = esp + 0x00000018
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000400
	SCZO = cond(esp)
	return
	// succ:  fn00402900_exit
fn00402900_exit:


// fn00402A40
// Return size: 4
void fn00402A40()
fn00402A40_entry:
	// succ:  l00402A40
l00402A40:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	SZO = cond(esi & esi)
	C = false
	branch Test(LE,SZO) l00402A96
	// succ:  l00402A47 l00402A96
l00402A47:
	Mem0[0x00478508:word32] = 0x00000001
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	// succ:  l00402A52
l00402A52:
	bl = Mem0[ecx:byte]
	eax = (word32) Mem0[ecx + 0x00000001:byte]
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	Mem0[esp + 0x00000006:byte] = al
	eax = (word32) Mem0[ecx:byte]
	Mem0[esp + 0x00000007:byte] = al
	eax = (word32) dl
	Mem0[eax + 0x00478520 + eax * 0x02:byte] = bl
	ebx = (word32) Mem0[esp + 0x00000006:byte]
	Mem0[eax + 0x00478521 + eax * 0x02:byte] = bl
	ebx = (word32) Mem0[esp + 0x00000007:byte]
	edx = edx + 0x00000001
	SCZO = cond(edx)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	SCZO = cond(edx - esi)
	Mem0[eax + 0x00478522 + eax * 0x02:byte] = bl
	branch Test(LT,SO) l00402A52
	// succ:  l00402A95 l00402A52
l00402A95:
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00402A96
l00402A96:
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00402A40_exit
fn00402A40_exit:


// fn00402AA0
// Return size: 4
void fn00402AA0()
fn00402AA0_entry:
	// succ:  l00402AA0
l00402AA0:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000004
	eax = malloc(Mem0[esp:size_t])
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041A964
	esi = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004784C0
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004784F0
	Mem0[esi:word32] = 0x00000001
	call fn004023D0 (retsize: 4;)
	eax = Mem0[0x004784F8:word32]
	ecx = Mem0[0x004784FC:word32]
	edx = eax + eax * 0x00000004
	edx = edx << 0x00000004
	SCZO = cond(edx)
	edx = edx + ecx
	SCZO = cond(edx)
	edi = 0x00000050
	esp = esp + 0x00000010
	SCZO = cond(esp)
	Mem0[0x004784DC:word32] = edx
	edx = ecx + 0x00000050
	Mem0[0x004784E0:word32] = edi
	ebx = ecx + 0x000000A0
	Mem0[0x004784B0:word32] = edi
	Mem0[0x004784A0:word32] = edi
	Mem0[0x00478490:word32] = edi
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[0x004784D8:word32] = eax
	Mem0[0x004784E8:word32] = eax
	Mem0[0x004784B8:word32] = eax
	Mem0[0x004784A8:word32] = eax
	Mem0[0x004784EC:word32] = edx
	edx = 0x0000003C
	eax = esi
	ecx = ecx + 0x000000F0
	SCZO = cond(ecx)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[0x004784BC:word32] = ebx
	Mem0[0x004784D0:word32] = 0x0000006A
	Mem0[0x004784D4:word32] = 0x00000018
	Mem0[0x004784E4:word32] = edx
	Mem0[0x004784B4:word32] = edx
	Mem0[0x004784AC:word32] = ecx
	Mem0[0x004784A4:word32] = edx
	Mem0[0x004784C4:word32] = edx
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00402AA0_exit
fn00402AA0_exit:


// fn00402B70
// Return size: 4
void fn00402B70()
fn00402B70_entry:
	// succ:  l00402B70
l00402B70:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = eax
	eax = Mem0[esp + 0x00000018:word32]
	SCZO = cond(Mem0[eax:word32] - 0x00000001)
	branch Test(NE,Z) l00402BD4
	// succ:  l00402B80 l00402BD4
l00402B80:
	ebx = Mem0[edi + 0x00000004:word32]
	SZO = cond(ebx & ebx)
	C = false
	esi = Mem0[edi + 0x0000000C:word32]
	branch Test(LE,SZO) l00402BA6
	// succ:  l00402B8A l00402BA6
l00402B8A:
	ebp = ebx
	esp = esp + 0x00000000
	// succ:  l00402B90
l00402B90:
	eax = Mem0[edi:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	eax = memset(Mem0[esp:(ptr void)], Mem0[esp + 4:int32], Mem0[esp + 8:size_t])
	esi = esi + Mem0[edi + 0x00000008:word32]
	SCZO = cond(esi)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	ebp = ebp - 0x00000001
	SCZO = cond(ebp)
	branch Test(NE,Z) l00402B90
	// succ:  l00402BA6 l00402B90
l00402BA6:
	eax = Mem0[0x004784D4:word32]
	eax = eax + eax * 0x00000002
	edx_eax = (int64) eax
	eax = eax - edx
	SCZO = cond(eax)
	eax = eax >> 0x00000001
	SCZO = cond(eax)
	ebx = ebx - eax
	SCZO = cond(ebx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ecx = 0x004784D0
	edx = 0x0000001E
	eax = edi
	call fn00402150 (retsize: 4;)
	ecx = Mem0[esp + 0x0000001C:word32]
	esp = esp + 0x00000004
	SCZO = cond(esp)
	Mem0[ecx:word32] = 0x00000000
	// succ:  l00402BD4
l00402BD4:
	edx = Mem0[0x00478834:word32]
	eax = (word32) Mem0[edx + 0x00000104:word16]
	edx = 0x00000004
	eax = eax + edx
	SCZO = cond(eax)
	ecx = eax
	eax = eax >> 0x00000004
	SCZO = cond(eax)
	ecx = ecx & 0x0000000F
	SZO = cond(ecx)
	C = false
	SCZO = cond(eax - 0x00000003)
	Mem0[esp + 0x00000010:word32] = eax
	branch Test(GE,SO) l00402C0B
	// succ:  l00402BF9 l00402C0B
l00402BF9:
	SCZO = cond(Mem0[0x0041CE98:word32] - 0x0000003F)
	branch Test(GE,SO) l00402C08
	// succ:  l00402C02 l00402C08
l00402C02:
	v16 = Mem0[0x0041CE98:word32] + edx
	Mem0[0x0041CE98:word32] = v16
	SCZO = cond(v16)
	// succ:  l00402C08
l00402C08:
	SCZO = cond(eax - 0x00000003)
	// succ:  l00402C0B
l00402C0B:
	branch Test(LE,SZO) l00402C1C
	// succ:  l00402C0D l00402C1C
l00402C0D:
	SCZO = cond(Mem0[0x0041CE98:word32] - 0x00000000)
	branch Test(LE,SZO) l00402C1C
	// succ:  l00402C16 l00402C1C
l00402C16:
	v17 = Mem0[0x0041CE98:word32] - edx
	Mem0[0x0041CE98:word32] = v17
	SCZO = cond(v17)
	// succ:  l00402C1C
l00402C1C:
	SCZO = cond(ecx - 0x00000008)
	ebp = Mem0[0x0041CE94:word32]
	branch Test(GE,SO) l00402C31
	// succ:  l00402C27 l00402C31
l00402C27:
	SCZO = cond(ebp - 0x0000003F)
	branch Test(GE,SO) l00402C3E
	// succ:  l00402C2C l00402C3E
l00402C2C:
	ebp = ebp + 0x00000003
	SCZO = cond(ebp)
	goto l00402C38
	// succ:  l00402C38
l00402C31:
	SZO = cond(ebp & ebp)
	C = false
	branch Test(LE,SZO) l00402C3E
	// succ:  l00402C35 l00402C3E
l00402C35:
	ebp = ebp - 0x00000003
	SCZO = cond(ebp)
	// succ:  l00402C38
l00402C38:
	Mem0[0x0041CE94:word32] = ebp
	// succ:  l00402C3E
l00402C3E:
	eax = Mem0[0x004784C4:word32]
	esi = Mem0[edi + 0x00000004:word32]
	ebx = Mem0[0x00478490:word32]
	edx_eax = (int64) eax
	eax = eax - edx
	SCZO = cond(eax)
	eax = eax >> 0x00000001
	SCZO = cond(eax)
	esi = esi - 0x0000001B
	SCZO = cond(esi)
	ecx = esi
	ecx = ecx - eax
	SCZO = cond(ecx)
	eax = ebx
	edx_eax = (int64) eax
	eax = eax - edx
	SCZO = cond(eax)
	eax = eax >> 0x00000001
	SCZO = cond(eax)
	edx = 0x000000DC
	edx = edx - eax
	SCZO = cond(edx)
	eax = Mem0[0x004784C4:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	call fn004020E0 (retsize: 4;)
	eax = Mem0[esp + 0x0000001C:word32]
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	branch Test(EQ,Z) l00402C98
	// succ:  l00402C80 l00402C98
l00402C80:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	branch Test(EQ,Z) l00402C91
	// succ:  l00402C85 l00402C91
l00402C85:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	branch Test(NE,Z) l00402CC5
	// succ:  l00402C8A l00402CC5
l00402C8A:
	ecx = 0x004784A0
	goto l00402C9D
	// succ:  l00402C9D
l00402C91:
	ecx = 0x004784B0
	goto l00402C9D
	// succ:  l00402C9D
l00402C98:
	ecx = 0x004784E0
	// succ:  l00402C9D
l00402C9D:
	eax = Mem0[0x004784E4:word32]
	edx_eax = (int64) eax
	eax = eax - edx
	SCZO = cond(eax)
	eax = eax >> 0x00000001
	SCZO = cond(eax)
	esi = esi - eax
	SCZO = cond(esi)
	eax = Mem0[0x004784E0:word32]
	edx_eax = (int64) eax
	eax = eax - edx
	SCZO = cond(eax)
	eax = eax >> 0x00000001
	SCZO = cond(eax)
	edx = 0x000000DC
	edx = edx - eax
	SCZO = cond(edx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	eax = edi
	call fn00402150 (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	// succ:  l00402CC5
l00402CC5:
	esi = Mem0[0x004784C0:word32]
	eax = 0x000000E0
	Mem0[esp + 0x00000018:word32] = eax
	esi = esi + 0x00000A84
	SCZO = cond(esi)
	ebx = ebx + 0x00000000
	// succ:  l00402CE0
l00402CE0:
	ecx = Mem0[esi + 0x00000004:word32]
	edx = Mem0[esi:word32]
	ecx = ecx *s ebp
	SCZO = cond(ecx)
	ebx = Mem0[esi - 0x00000004:word32]
	edx = edx *s ebp
	SCZO = cond(edx)
	ebx = ebx *s ebp
	SCZO = cond(ebx)
	eax = (word32) al
	ecx = ecx >>u 0x00000006
	SCZO = cond(ecx)
	edx = edx >>u 0x00000006
	SCZO = cond(edx)
	ebx = ebx >>u 0x00000006
	SCZO = cond(ebx)
	Mem0[eax + 0x00478520 + eax * 0x02:byte] = bl
	Mem0[eax + 0x00478521 + eax * 0x02:byte] = dl
	Mem0[eax + 0x00478522 + eax * 0x02:byte] = cl
	eax = Mem0[esp + 0x00000018:word32]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	esi = esi + 0x0000000C
	SCZO = cond(esi)
	SCZO = cond(eax - 0x000000E5)
	Mem0[esp + 0x00000018:word32] = eax
	branch Test(LT,SO) l00402CE0
	// succ:  l00402D27 l00402CE0
l00402D27:
	esi = Mem0[esp + 0x00000010:word32]
	SCZO = cond(esi - 0x00000001)
	branch Test(EQ,Z) l00402D39
	// succ:  l00402D30 l00402D39
l00402D30:
	SCZO = cond(esi - 0x00000002)
	branch Test(EQ,Z) l00402D39
	// succ:  l00402D35 l00402D39
l00402D35:
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	goto l00402D3B
	// succ:  l00402D3B
l00402D39:
	ecx = ebp
	// succ:  l00402D3B
l00402D3B:
	eax = Mem0[0x0041CE98:word32]
	ecx = ecx >> 0x00000001
	SCZO = cond(ecx)
	edx = ecx
	edx = edx *s eax
	SCZO = cond(edx)
	edx = edx >> 0x00000006
	SCZO = cond(edx)
	Mem0[0x004787D8:byte] = dl
	edx = ecx + 0x0000000A
	ecx = ecx + 0x00000014
	SCZO = cond(ecx)
	edx = edx *s eax
	SCZO = cond(edx)
	ecx = ecx *s eax
	SCZO = cond(ecx)
	ecx = ecx >> 0x00000006
	SCZO = cond(ecx)
	edx = edx >> 0x00000006
	SCZO = cond(edx)
	Mem0[0x004787DA:byte] = cl
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	SCZO = cond(esi - 0x00000003)
	cl = Test(NE,Z)
	Mem0[0x004787D9:byte] = dl
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[0x00478508:word32] = 0x00000001
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	ecx = ecx & ebp
	SZO = cond(ecx)
	C = false
	ecx = ecx >> 0x00000001
	SCZO = cond(ecx)
	edx = ecx
	edx = edx *s eax
	SCZO = cond(edx)
	edx = edx >> 0x00000006
	SCZO = cond(edx)
	Mem0[0x004787DE:byte] = dl
	edx = ecx + 0x0000000A
	ecx = ecx + 0x00000014
	SCZO = cond(ecx)
	edx = edx *s eax
	SCZO = cond(edx)
	ecx = ecx *s eax
	SCZO = cond(ecx)
	ecx = ecx >> 0x00000006
	SCZO = cond(ecx)
	edx = edx >> 0x00000006
	SCZO = cond(edx)
	Mem0[0x004787E0:byte] = cl
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	SCZO = cond(esi - 0x00000002)
	cl = Test(NE,Z)
	Mem0[0x004787DF:byte] = dl
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	ecx = ecx & ebp
	SZO = cond(ecx)
	C = false
	ecx = ecx >> 0x00000001
	SCZO = cond(ecx)
	edx = ecx
	edx = edx *s eax
	SCZO = cond(edx)
	edx = edx >> 0x00000006
	SCZO = cond(edx)
	Mem0[0x004787E4:byte] = dl
	edx = ecx + 0x0000000A
	ecx = ecx + 0x00000014
	SCZO = cond(ecx)
	edx = edx *s eax
	SCZO = cond(edx)
	ecx = ecx *s eax
	SCZO = cond(ecx)
	edx = edx >> 0x00000006
	SCZO = cond(edx)
	ecx = ecx >> 0x00000006
	SCZO = cond(ecx)
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[0x004787E5:byte] = dl
	Mem0[0x004787E6:byte] = cl
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00402B70_exit
fn00402B70_exit:


// fn00402E00
// Return size: 4
void fn00402E00()
fn00402E00_entry:
	// succ:  l00402E00
l00402E00:
	esp = fp
	esp = esp - 0x00000034
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[0x0047848C:word32]
	eax = Mem0[esi:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esi + 0x0000000C:word32]
	ecx = eax - 0x00000001 + edi
	Mem0[esp + 0x00000014:word32] = ecx
	ecx = Mem0[esi + 0x00000004:word32]
	Mem0[esp + 0x00000034:word32] = ecx
	rLoc1 = (real64) Mem0[esp + 0x00000034:int32]
	ebx = Mem0[esi + 0x00000008:word32]
	rLoc2 = Mem0[0x0041ACD8:real64]
	Mem0[esp + 0x00000010:word32] = eax
	ecx = ecx + 0xFFFFFFFF
	SCZO = cond(ecx)
	rLoc2 = rLoc2 * rLoc1
	ecx = ecx *s ebx
	SCZO = cond(ecx)
	rLoc3 = 1
	rLoc1 = rLoc3 / rLoc1
	ebp = ecx + edi
	edx = eax - 0x00000001 + ebp
	Mem0[esp + 0x00000018:word32] = edx
	edx_eax = (int64) eax
	eax = eax - edx
	SCZO = cond(eax)
	ecx = eax
	eax = Mem0[esi + 0x00000008:word32]
	ecx = ecx >> 0x00000001
	SCZO = cond(ecx)
	eax = eax + ecx
	SCZO = cond(eax)
	Mem0[esp + 0x00000040:word32] = eax
	eax = Mem0[esi + 0x00000004:word32]
	edx_eax = (int64) eax
	eax = eax - edx
	SCZO = cond(eax)
	ebx = ebx - ecx
	SCZO = cond(ebx)
	eax = eax >> 0x00000001
	SCZO = cond(eax)
	SZO = cond(eax & eax)
	C = false
	Mem0[esp + 0x0000003C:word32] = ebx
	Mem0[esp + 0x0000001C:word32] = 0x00000000
	v17 = rLoc2
	rLoc2 = rLoc1
	rLoc1 = v17
	Mem0[esp + 0x00000034:real32] = rLoc2
	rLoc2 = (real64) Mem0[esp + 0x00000010:int32]
	rLoc2 = rLoc2 * rLoc1
	v18 = Mem0[0x0041AD08:real64] / rLoc2
	Mem0[0x0041AD08:real64] = v18
	Mem0[esp + 0x00000030:real32] = rLoc2
	branch Test(LE,SZO) l0040302D
	// succ:  l00402E8D l0040302D
l00402E8D:
	rLoc2 = Mem0[esp + 0x00000034:real32]
	rLoc3 = Mem0[esp + 0x00000030:real32]
	// succ:  l00402E95
l00402E95:
	SZO = cond(ecx & ecx)
	C = false
	rLoc4 = (real64) Mem0[esp + 0x0000001C:int32]
	Mem0[esp + 0x0000002C:real32] = rLoc4
	rLoc4 = (real64) Mem0[esi + 0x00000004:int32]
	rLoc4 = rLoc4 * rLoc1
	rLoc5 = Mem0[esp + 0x0000002C:real32]
	Mem0[esp + 0x0000002C:word32] = 0x00000000
	rLoc6 = Mem0[0x0041AD00:real64]
	rLoc6 = rLoc6 + rLoc5
	rLoc6 = rLoc6 - rLoc4
	rLoc6 = rLoc6 * rLoc2
	Mem0[esp + 0x00000024:real32] = rLoc6
	rLoc6 = Mem0[esp + 0x00000024:real32]
	rLoc6 = rLoc6 * rLoc6
	Mem0[esp + 0x00000024:real32] = rLoc6
	rLoc6 = rLoc6
	rLoc6 = rLoc6 + rLoc1
	rLoc6 = rLoc6 - rLoc4
	rLoc6 = rLoc6 * rLoc2
	Mem0[esp + 0x00000020:real32] = rLoc6
	rLoc6 = Mem0[esp + 0x00000020:real32]
	rLoc6 = rLoc6 * rLoc6
	Mem0[esp + 0x00000020:real32] = rLoc6
	rLoc5 = rLoc5 + Mem0[0x0041ACF8:real64]
	rLoc4 = rLoc5 - rLoc4
	rLoc4 = rLoc4 * rLoc2
	Mem0[esp + 0x00000028:real32] = rLoc4
	rLoc4 = Mem0[esp + 0x00000028:real32]
	rLoc4 = rLoc4 * rLoc4
	Mem0[esp + 0x00000028:real32] = rLoc4
	branch Test(LE,SZO) l00403002
	// succ:  l00402EFE l00403002
l00402EFE:
	rLoc2 = rLoc3
	goto l00402F0C
	// succ:  l00402F0C
l00402F02:
	rLoc1 = Mem0[0x0041ACD8:real64]
	rLoc2 = Mem0[esp + 0x00000030:real32]
	// succ:  l00402F0C
l00402F0C:
	rLoc3 = (real64) Mem0[esp + 0x0000002C:int32]
	rLoc3 = rLoc3 + rLoc1
	rLoc4 = (real64) Mem0[esp + 0x00000010:int32]
	rLoc1 = rLoc1 * rLoc4
	rLoc4 = Mem0[0x0041ACF0:real64]
	rLoc4 = rLoc3 - rLoc4
	rLoc4 = rLoc4 - rLoc1
	rLoc4 = rLoc4 * rLoc2
	Mem0[esp + 0x00000010:real32] = rLoc4
	rLoc4 = Mem0[esp + 0x00000010:real32]
	rLoc4 = rLoc4 * rLoc4
	Mem0[esp + 0x00000010:real32] = rLoc4
	rLoc3 = rLoc3 + Mem0[0x0041ACE8:real64]
	rLoc1 = rLoc3 - rLoc1
	rLoc1 = rLoc1 * rLoc2
	Mem0[esp + 0x00000038:real32] = rLoc1
	rLoc1 = Mem0[esp + 0x00000038:real32]
	rLoc1 = rLoc1 * rLoc1
	Mem0[esp + 0x00000038:real32] = rLoc1
	rLoc1 = Mem0[esp + 0x00000038:real32]
	rLoc1 = rLoc1 + Mem0[esp + 0x00000020:real32]
	call _CIsqrt (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[0x0041ACE0:real64]
	call fn00412520 (retsize: 4; FPU: 1;)
	rLoc1 = Mem0[esp + 0x00000010:real32]
	rLoc1 = rLoc1 + Mem0[esp + 0x00000024:real32]
	ebx = eax
	ebx = ebx & 0x00000003
	SZO = cond(ebx)
	C = false
	call _CIsqrt (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[0x0041ACE0:real64]
	call fn00412520 (retsize: 4; FPU: 1;)
	rLoc1 = Mem0[esp + 0x00000010:real32]
	rLoc1 = rLoc1 + Mem0[esp + 0x00000028:real32]
	eax = eax & 0x00000003
	SZO = cond(eax)
	C = false
	eax = eax + eax
	SCZO = cond(eax)
	eax = eax + eax
	SCZO = cond(eax)
	ebx = ebx | eax
	SZO = cond(ebx)
	C = false
	ebx = ebx + ebx
	SCZO = cond(ebx)
	ebx = ebx + ebx
	SCZO = cond(ebx)
	call _CIsqrt (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[0x0041ACE0:real64]
	call fn00412520 (retsize: 4; FPU: 1;)
	eax = eax & 0x00000003
	SZO = cond(eax)
	C = false
	ebx = ebx | eax
	SZO = cond(ebx)
	C = false
	eax = Mem0[esp + 0x00000014:word32]
	Mem0[edi:byte] = bl
	Mem0[eax:byte] = bl
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[esp + 0x00000014:word32] = eax
	eax = Mem0[esp + 0x00000018:word32]
	Mem0[ebp + 0x00000000:byte] = bl
	Mem0[eax:byte] = bl
	ebx = Mem0[esp + 0x0000002C:word32]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[esp + 0x00000018:word32] = eax
	eax = Mem0[esi:word32]
	Mem0[esp + 0x00000010:word32] = eax
	edx_eax = (int64) eax
	eax = eax - edx
	SCZO = cond(eax)
	ecx = eax
	ebx = ebx + 0x00000001
	SCZO = cond(ebx)
	ecx = ecx >> 0x00000001
	SCZO = cond(ecx)
	edi = edi + 0x00000001
	SCZO = cond(edi)
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	SCZO = cond(ebx - ecx)
	Mem0[esp + 0x0000002C:word32] = ebx
	branch Test(LT,SO) l00402F02
	// succ:  l00402FEE l00402F02
l00402FEE:
	rLoc1 = Mem0[esp + 0x00000030:real32]
	ebx = Mem0[esp + 0x0000003C:word32]
	rLoc2 = Mem0[esp + 0x00000034:real32]
	rLoc3 = Mem0[0x0041ACD8:real64]
	v24 = rLoc3
	rLoc3 = rLoc1
	rLoc1 = v24
	// succ:  l00403002
l00403002:
	eax = Mem0[esp + 0x00000040:word32]
	v25 = Mem0[esp + 0x00000014:word32] + eax
	Mem0[esp + 0x00000014:word32] = v25
	SCZO = cond(v25)
	v26 = Mem0[esp + 0x0000001C:word32] + 0x00000001
	Mem0[esp + 0x0000001C:word32] = v26
	SCZO = cond(v26)
	v27 = Mem0[esp + 0x00000018:word32] - ebx
	Mem0[esp + 0x00000018:word32] = v27
	SCZO = cond(v27)
	ebp = ebp - eax
	SCZO = cond(ebp)
	eax = Mem0[esi + 0x00000004:word32]
	edx_eax = (int64) eax
	eax = eax - edx
	SCZO = cond(eax)
	eax = eax >> 0x00000001
	SCZO = cond(eax)
	edi = edi + ebx
	SCZO = cond(edi)
	SCZO = cond(Mem0[esp + 0x0000001C:word32] - eax)
	branch Test(LT,SO) l00402E95
	// succ:  l00403029 l00402E95
l00403029:
	rLoc1 = rLoc3
	rLoc1 = rLoc2
	// succ:  l0040302D
l0040302D:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	rLoc1 = rLoc1
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000034
	SCZO = cond(esp)
	return
	// succ:  fn00402E00_exit
fn00402E00_exit:


// fn00403040
// Return size: 4
void fn00403040()
fn00403040_entry:
	// succ:  l00403040
l00403040:
	esp = fp
	esp = esp - 0x00000028
	SCZO = cond(esp)
	ecx = Mem0[eax + 0x0000000C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	Mem0[esp + 0x00000008:word32] = ecx
	ecx = Mem0[0x0047848C:word32]
	ebx = Mem0[ecx + 0x00000008:word32]
	ebx = ebx *s Mem0[esp + 0x00000040:word32]
	SCZO = cond(ebx)
	ebx = ebx + Mem0[ecx + 0x0000000C:word32]
	SCZO = cond(ebx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	ebx = ebx + Mem0[esp + 0x00000040:word32]
	SCZO = cond(ebx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[ecx + 0x00000008:word32]
	edi = edi *s Mem0[esp + 0x00000040:word32]
	SCZO = cond(edi)
	edi = edi + Mem0[ecx + 0x0000000C:word32]
	SCZO = cond(edi)
	ecx = Mem0[eax + 0x00000004:word32]
	edi = edi + Mem0[esp + 0x0000003C:word32]
	SCZO = cond(edi)
	SZO = cond(ecx & ecx)
	C = false
	Mem0[esp + 0x00000040:word32] = 0x00000000
	Mem0[esp + 0x00000014:word32] = ecx
	branch Test(LE,SZO) l0040317E
	// succ:  l00403089 l0040317E
l00403089:
	rLoc1 = (real64) Mem0[0x0041CEB0:int32]
	ebp = Mem0[eax:word32]
	edx = Mem0[eax + 0x00000008:word32]
	ebp = ebp >> 0x00000002
	SCZO = cond(ebp)
	rLoc1 = rLoc1 * Mem0[0x0041ACD8:real64]
	Mem0[esp + 0x0000003C:word32] = ebp
	Mem0[esp + 0x00000044:word32] = edx
	Mem0[esp + 0x00000018:real64] = rLoc1
	rLoc1 = Mem0[esp + 0x0000004C:real32]
	Mem0[esp + 0x00000020:real64] = rLoc1
	goto l004030B7
	// succ:  l004030B7
l004030B3:
	ebp = Mem0[esp + 0x0000003C:word32]
	// succ:  l004030B7
l004030B7:
	rLoc1 = (real64) Mem0[esp + 0x00000040:int32]
	Mem0[esp + 0x00000028:real64] = rLoc1
	rLoc1 = rLoc1 / Mem0[0x0041AC00:real64]
	rLoc1 = rLoc1 + Mem0[esp + 0x00000018:real64]
	call _CIsin (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 + Mem0[0x0041ACD0:real64]
	rLoc1 = rLoc1 * Mem0[0x0041ACC8:real64]
	Mem0[esp + 0x00000030:real64] = rLoc1
	rLoc1 = rLoc1 * Mem0[esp + 0x00000020:real64]
	call fn00412520 (retsize: 4; FPU: 1;)
	rLoc1 = Mem0[esp + 0x00000028:real64]
	rLoc1 = rLoc1 / Mem0[0x0041ACC0:real64]
	esi = eax
	esi = esi + edi
	SCZO = cond(esi)
	rLoc1 = rLoc1 + Mem0[esp + 0x00000018:real64]
	call _CIsin (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	SZO = cond(ebp & ebp)
	C = false
	branch Test(EQ,Z) l00403154
	// succ:  l00403102 l00403154
l00403102:
	rLoc2 = Mem0[esp + 0x00000020:real64]
	rLoc3 = Mem0[esp + 0x00000030:real64]
	rLoc3 = rLoc3 * rLoc2
	call fn00412520 (retsize: 4; FPU: 3;)
	rLoc3 = 1
	rLoc1 = rLoc3 - rLoc1
	eax = eax + edi
	SCZO = cond(eax)
	v17 = rLoc2
	rLoc2 = rLoc1
	rLoc1 = v17
	Mem0[esp + 0x00000048:word32] = eax
	rLoc2 = rLoc2 * Mem0[0x0041ACC8:real64]
	rLoc1 = rLoc1 * rLoc2
	call fn00412520 (retsize: 4; FPU: 1;)
	edx = Mem0[esp + 0x00000048:word32]
	eax = eax - edx
	SCZO = cond(eax)
	ecx = eax + ebx
	eax = Mem0[esp + 0x00000010:word32]
	eax = eax - edx
	SCZO = cond(eax)
	esp = esp + 0x00000000
	// succ:  l00403140
l00403140:
	edx = Mem0[ecx + esi:word32]
	edx = edx ^ Mem0[esi:word32]
	SZO = cond(edx)
	C = false
	ebp = ebp - 0x00000001
	SCZO = cond(ebp)
	Mem0[eax + esi:word32] = edx
	esi = esi + 0x00000004
	SCZO = cond(esi)
	SZO = cond(ebp & ebp)
	C = false
	branch Test(NE,Z) l00403140
	// succ:  l00403152 l00403140
l00403152:
	goto l00403156
	// succ:  l00403156
l00403154:
	rLoc1 = rLoc1
	// succ:  l00403156
l00403156:
	eax = Mem0[esp + 0x00000044:word32]
	v18 = Mem0[esp + 0x00000010:word32] + eax
	Mem0[esp + 0x00000010:word32] = v18
	SCZO = cond(v18)
	eax = Mem0[0x0047848C:word32]
	edi = edi + Mem0[eax + 0x00000008:word32]
	SCZO = cond(edi)
	ebx = ebx + Mem0[eax + 0x00000008:word32]
	SCZO = cond(ebx)
	eax = Mem0[esp + 0x00000040:word32]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	SCZO = cond(eax - Mem0[esp + 0x00000014:word32])
	Mem0[esp + 0x00000040:word32] = eax
	branch Test(LT,SO) l004030B3
	// succ:  l0040317E l004030B3
l0040317E:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000028
	SCZO = cond(esp)
	return
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000028
	SCZO = cond(esp)
	return
	// succ:  fn00403040_exit fn00403040_exit
fn00403040_exit:


// fn00403190
// Return size: 4
void fn00403190()
fn00403190_entry:
	// succ:  l00403190
l00403190:
	esp = fp
	esp = esp - 0x00000014
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = malloc
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000004
	edi = eax
	eax = malloc(Mem0[esp:size_t])
	esi = Mem0[edi:word32]
	ebx = Mem0[edi + 0x00000004:word32]
	esp = esp + 0x00000004
	SCZO = cond(esp)
	esi = esi + 0x00000180
	SCZO = cond(esi)
	ebx = ebx + 0x000000C8
	SCZO = cond(ebx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000010
	Mem0[esp + 0x00000018:word32] = eax
	Mem0[0x00478484:word32] = esi
	Mem0[0x00478488:word32] = ebx
	eax = malloc(Mem0[esp:size_t])
	edi = eax
	Mem0[edi + 0x00000004:word32] = ebx
	ebx = ebx *s esi
	SCZO = cond(ebx)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	SZO = cond(ebx & ebx)
	C = false
	Mem0[edi:word32] = esi
	Mem0[edi + 0x00000008:word32] = esi
	branch Test(ULE,CZ) l004031EA
	// succ:  l004031DF l004031EA
l004031DF:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	eax = malloc(Mem0[esp:size_t])
	esp = esp + 0x00000004
	SCZO = cond(esp)
	Mem0[edi + 0x0000000C:word32] = eax
	goto l004031F1
	// succ:  l004031F1
l004031EA:
	Mem0[edi + 0x0000000C:word32] = 0x00000000
	// succ:  l004031F1
l004031F1:
	Mem0[0x0047848C:word32] = edi
	call fn00402E00 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000C00
	call ebp (retsize: 4;)
	rLoc1 = Mem0[0x0041AD40:real64]
	edi = Mem0[esp + 0x00000018:word32]
	rLoc2 = Mem0[0x0041AD38:real64]
	rLoc3 = Mem0[0x0041AD30:real64]
	esp = esp + 0x00000004
	SCZO = cond(esp)
	Mem0[edi:word32] = eax
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	esi = eax
	// succ:  l00403222
l00403222:
	ecx = edx
	ecx = ecx >> 0x00000006
	SCZO = cond(ecx)
	ecx = ecx & 0x00000003
	SZO = cond(ecx)
	C = false
	eax = edx
	eax = eax >> 0x00000004
	SCZO = cond(eax)
	eax = eax & 0x00000003
	SZO = cond(eax)
	C = false
	ecx = ecx + eax
	SCZO = cond(ecx)
	eax = edx
	eax = eax >> 0x00000002
	SCZO = cond(eax)
	eax = eax & 0x00000003
	SZO = cond(eax)
	C = false
	ecx = ecx + eax
	SCZO = cond(ecx)
	eax = edx
	eax = eax & 0x00000003
	SZO = cond(eax)
	C = false
	ecx = ecx + eax
	SCZO = cond(ecx)
	ecx = ecx + ecx
	SCZO = cond(ecx)
	ecx = ecx + ecx
	SCZO = cond(ecx)
	Mem0[esp + 0x00000014:word32] = ecx
	rLoc4 = (real64) Mem0[esp + 0x00000014:int32]
	Mem0[esi + 0x00000008:word32] = ecx
	Mem0[esp + 0x00000014:word16] = __fstcw()
	edx = edx + 0x00000001
	SCZO = cond(edx)
	eax = (word32) Mem0[esp + 0x00000014:word16]
	rLoc5 = rLoc5
	rLoc5 = rLoc5 * rLoc1
	eax = eax | 0x00000C00
	SZO = cond(eax)
	C = false
	Mem0[esp + 0x00000018:word32] = eax
	esi = esi + 0x0000000C
	SCZO = cond(esi)
	rLoc5 = rLoc5 / rLoc2
	__fldcw(Mem0[esp + 0x00000018:word16])
	Mem0[esp + 0x00000018:int64] = (int64) rLoc5
	eax = Mem0[esp + 0x00000018:word32]
	Mem0[esi - 0x0000000C:word32] = eax
	__fldcw(Mem0[esp + 0x00000014:word16])
	rLoc4 = rLoc4 * rLoc3
	Mem0[esp + 0x00000014:word16] = __fstcw()
	rLoc4 = rLoc4 / rLoc2
	eax = (word32) Mem0[esp + 0x00000014:word16]
	eax = eax | 0x00000C00
	SZO = cond(eax)
	C = false
	SCZO = cond(edx - 0x00000040)
	Mem0[esp + 0x00000018:word32] = eax
	__fldcw(Mem0[esp + 0x00000018:word16])
	Mem0[esp + 0x00000018:int64] = (int64) rLoc4
	eax = Mem0[esp + 0x00000018:word32]
	Mem0[esi - 0x00000008:word32] = eax
	__fldcw(Mem0[esp + 0x00000014:word16])
	branch Test(LT,SO) l00403222
	// succ:  l004032B7 l00403222
l004032B7:
	eax = edi
	rLoc2 = rLoc3
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	rLoc1 = rLoc2
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	rLoc1 = rLoc1
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000014
	SCZO = cond(esp)
	return
	// succ:  fn00403190_exit
fn00403190_exit:


// fn004032D0
// Return size: 4
void fn004032D0()
fn004032D0_entry:
	// succ:  l004032D0
l004032D0:
	esp = fp
	esp = esp - 0x00000020
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	ebp = ebp ^ ebp
	SZO = cond(ebp)
	C = false
	SCZO = cond(Mem0[0x0041C3BC:word32] - ebp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = eax
	branch Test(EQ,Z) l004032F3
	// succ:  l004032E3 l004032F3
l004032E3:
	edx = 0x00000040
	Mem0[0x0041C3BC:word32] = ebp
	call fn00402230 (retsize: 4;)
	// succ:  l004032F3
l004032F3:
	ecx = 0x00000001
	v14 = Mem0[0x0041CEB0:word32] + ecx
	Mem0[0x0041CEB0:word32] = v14
	SCZO = cond(v14)
	SCZO = cond(Mem0[esp + 0x00000034:word32] - ebp)
	branch Test(EQ,Z) l00403312
	// succ:  l00403304 l00403312
l00403304:
	rLoc1 = 1
	Mem0[0x0041CEB0:word32] = ebp
	Mem0[0x0041CEAC:real32] = rLoc1
	// succ:  l00403312
l00403312:
	rLoc1 = Mem0[0x0041CEAC:real32]
	rLoc1 = rLoc1 * Mem0[0x0041AD58:real64]
	Mem0[0x0041CEAC:real32] = rLoc1
	rLoc1 = 0
	rLoc2 = Mem0[0x0041CEAC:real32]
	FPUF = cond(rLoc2 - rLoc2)
	ax = (word16) FPUF << 8
	rLoc1 = rLoc2
	SZO = cond(ah & 0x41)
	C = false
	branch Test(NE,Z) l00403345
	// succ:  l00403337 l00403345
l00403337:
	rLoc1 = rLoc1 + Mem0[0x0041ADD0:real64]
	Mem0[0x0041CEAC:real32] = rLoc1
	goto l00403347
	// succ:  l00403347
l00403345:
	rLoc1 = rLoc1
	// succ:  l00403347
l00403347:
	SCZO = cond(Mem0[esp + 0x00000038:word32] - ebp)
	branch Test(EQ,Z) l00403395
	// succ:  l0040334D l00403395
l0040334D:
	SCZO = cond(Mem0[0x0041CEA8:word32] - ebp)
	branch Test(EQ,Z) l0040339B
	// succ:  l00403355 l0040339B
l00403355:
	rLoc1 = Mem0[0x0041C3AC:real32]
	Mem0[0x0041CEA8:word32] = ebp
	rLoc1 = -rLoc1
	Mem0[0x0041C3AC:real32] = rLoc1
	rLoc1 = Mem0[0x0041C3B0:real32]
	rLoc1 = -rLoc1
	Mem0[0x0041C3B0:real32] = rLoc1
	rLoc1 = Mem0[0x0041C3B4:real32]
	rLoc1 = -rLoc1
	Mem0[0x0041C3B4:real32] = rLoc1
	rLoc1 = Mem0[0x0041C3B8:real32]
	rLoc1 = -rLoc1
	Mem0[0x0041C3B8:real32] = rLoc1
	goto l0040339B
	// succ:  l0040339B
l00403395:
	Mem0[0x0041CEA8:word32] = ecx
	// succ:  l0040339B
l0040339B:
	rLoc1 = Mem0[0x0041CEA4:real32]
	v20 = Mem0[0x0041CE9C:word32] + ecx
	Mem0[0x0041CE9C:word32] = v20
	SCZO = cond(v20)
	SCZO = cond(Mem0[esp + 0x0000003C:word32] - ebp)
	rLoc1 = rLoc1 + Mem0[0x0041C3AC:real32]
	edx = Mem0[0x0041CEA0:word32]
	Mem0[0x0041CEA4:real32] = rLoc1
	rLoc1 = Mem0[0x0041C3A0:real32]
	rLoc1 = rLoc1 + Mem0[0x0041C3B0:real32]
	Mem0[0x0041C3A0:real32] = rLoc1
	rLoc1 = Mem0[0x0041C3A4:real32]
	rLoc1 = rLoc1 + Mem0[0x0041C3B4:real32]
	Mem0[0x0041C3A4:real32] = rLoc1
	rLoc1 = Mem0[0x0041C3A8:real32]
	rLoc1 = rLoc1 + Mem0[0x0041C3B8:real32]
	Mem0[0x0041C3A8:real32] = rLoc1
	branch Test(EQ,Z) l00403411
	// succ:  l004033F5 l00403411
l004033F5:
	eax = Mem0[edi + 0x00000004:word32]
	SCZO = cond(edx - eax)
	branch Test(GE,SO) l00403407
	// succ:  l004033FC l00403407
l004033FC:
	edx = edx + 0x00000002
	SCZO = cond(edx)
	Mem0[0x0041CEA0:word32] = edx
	SCZO = cond(edx - eax)
	// succ:  l00403407
l00403407:
	branch Test(LE,SZO) l00403411
	// succ:  l00403409 l00403411
l00403409:
	edx = eax
	Mem0[0x0041CEA0:word32] = edx
	// succ:  l00403411
l00403411:
	ecx = Mem0[edi + 0x00000004:word32]
	esi = Mem0[edi + 0x0000000C:word32]
	ebx = Mem0[edi:word32]
	edi = Mem0[edi + 0x00000008:word32]
	eax = ecx
	eax = eax - edx
	SCZO = cond(eax)
	SCZO = cond(eax - ecx)
	Mem0[esp + 0x0000002C:word32] = esi
	Mem0[esp + 0x00000020:word32] = ebx
	Mem0[esp + 0x00000024:word32] = eax
	Mem0[esp + 0x00000028:word32] = edi
	edx = 0x00000002
	branch Test(GT,SZO) l00403468
	// succ:  l00403439 l00403468
l00403439:
	SCZO = cond(ebx - ebp)
	branch Test(LE,SZO) l00403468
	// succ:  l0040343D l00403468
l0040343D:
	ebp = eax + 0x00000002
	SCZO = cond(ebp - ecx)
	branch Test(LE,SZO) l00403448
	// succ:  l00403444 l00403448
l00403444:
	ecx = ecx - eax
	SCZO = cond(ecx)
	edx = ecx
	// succ:  l00403448
l00403448:
	ecx = edi
	ecx = ecx *s eax
	SCZO = cond(ecx)
	esi = esi + ecx
	SCZO = cond(esi)
	SZO = cond(edx & edx)
	C = false
	branch Test(LE,SZO) l00403468
	// succ:  l00403453 l00403468
l00403453:
	ebp = edx
	// succ:  l00403455
l00403455:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	eax = memset(Mem0[esp:(ptr void)], Mem0[esp + 4:int32], Mem0[esp + 8:size_t])
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	esi = esi + edi
	SCZO = cond(esi)
	ebp = ebp - 0x00000001
	SCZO = cond(ebp)
	branch Test(NE,Z) l00403455
	// succ:  l00403468 l00403455
l00403468:
	rLoc1 = (real64) Mem0[0x0041CE9C:int32]
	rLoc1 = rLoc1 / Mem0[0x0041AC50:real64]
	Mem0[esp + 0x00000010:real64] = rLoc1
	call _CIsin (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[0x0041ACD8:real64]
	Mem0[esp + 0x00000018:real64] = rLoc1
	rLoc1 = Mem0[esp + 0x00000010:real64]
	call _CIcos (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[0x0041ACD8:real64]
	Mem0[esp + 0x00000010:real64] = rLoc1
	rLoc1 = Mem0[0x0041CEAC:real32]
	rLoc2 = 1
	rLoc1 = rLoc2 - rLoc1
	rLoc1 = rLoc1 * Mem0[0x0041ADA8:real64]
	rLoc1 = rLoc1 + Mem0[0x0041ADA0:real64]
	call _CIsin (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 + Mem0[0x0041AD98:real64]
	rLoc2 = 1
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	rLoc1 = rLoc2 / rLoc1
	rLoc1 = rLoc1 - Mem0[0x0041AD90:real64]
	Mem0[esp + 0x00000038:real32] = rLoc1
	rLoc1 = Mem0[esp + 0x00000038:real32]
	Mem0[esp:real32] = rLoc1
	rLoc1 = Mem0[0x0041C3A8:real32]
	rLoc1 = rLoc1 / Mem0[0x0041ACA0:real64]
	call _CIcos (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[0x0041ACD8:real64]
	rLoc1 = rLoc1 + Mem0[0x0041ACD0:real64]
	rLoc2 = Mem0[0x0041AC00:real64]
	rLoc2 = rLoc2 * rLoc1
	rLoc2 = rLoc2 * Mem0[esp + 0x0000001C:real64]
	rLoc1 = rLoc1 + rLoc2
	call fn00412520 (retsize: 4; FPU: 1;)
	rLoc1 = Mem0[0x0041C3A4:real32]
	rLoc1 = rLoc1 / Mem0[0x0041ACA0:real64]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call _CIsin (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[0x0041ACD8:real64]
	rLoc1 = rLoc1 + Mem0[0x0041ACD0:real64]
	rLoc2 = Mem0[0x0041ADE0:real64]
	rLoc2 = rLoc2 * rLoc1
	rLoc2 = rLoc2 * Mem0[esp + 0x00000018:real64]
	rLoc1 = rLoc1 + rLoc2
	call fn00412520 (retsize: 4; FPU: 1;)
	rLoc1 = Mem0[0x0041C3A0:real32]
	rLoc1 = rLoc1 / Mem0[0x0041ACA0:real64]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call _CIsin (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[0x0041ACD8:real64]
	rLoc1 = rLoc1 + Mem0[0x0041ACD0:real64]
	rLoc2 = Mem0[0x0041AC00:real64]
	rLoc2 = rLoc2 * rLoc1
	rLoc2 = rLoc2 * Mem0[esp + 0x0000001C:real64]
	rLoc1 = rLoc1 + rLoc2
	call fn00412520 (retsize: 4; FPU: 1;)
	rLoc1 = Mem0[0x0041CEA4:real32]
	rLoc1 = rLoc1 / Mem0[0x0041ACA0:real64]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call _CIcos (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[0x0041ACD8:real64]
	rLoc1 = rLoc1 + Mem0[0x0041ACD0:real64]
	rLoc2 = Mem0[0x0041ADE0:real64]
	rLoc2 = rLoc2 * rLoc1
	rLoc2 = rLoc2 * Mem0[esp + 0x00000028:real64]
	rLoc1 = rLoc1 + rLoc2
	call fn00412520 (retsize: 4; FPU: 1;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = esp + 0x00000034
	call fn00403040 (retsize: 4;)
	esp = esp + 0x00000014
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000020
	SCZO = cond(esp)
	return
	rLoc1 = (real64) Mem0[0x0041CE9C:int32]
	rLoc1 = rLoc1 / Mem0[0x0041AC50:real64]
	Mem0[esp + 0x00000010:real64] = rLoc1
	call _CIsin (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[0x0041ACD8:real64]
	Mem0[esp + 0x00000018:real64] = rLoc1
	rLoc1 = Mem0[esp + 0x00000010:real64]
	call _CIcos (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[0x0041ACD8:real64]
	Mem0[esp + 0x00000010:real64] = rLoc1
	rLoc1 = Mem0[0x0041CEAC:real32]
	rLoc2 = 1
	rLoc1 = rLoc2 - rLoc1
	rLoc1 = rLoc1 * Mem0[0x0041ADA8:real64]
	rLoc1 = rLoc1 + Mem0[0x0041ADA0:real64]
	call _CIsin (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 + Mem0[0x0041AD98:real64]
	rLoc2 = 1
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	rLoc1 = rLoc2 / rLoc1
	rLoc1 = rLoc1 - Mem0[0x0041AD90:real64]
	Mem0[esp + 0x00000038:real32] = rLoc1
	rLoc1 = Mem0[esp + 0x00000038:real32]
	Mem0[esp:real32] = rLoc1
	rLoc1 = Mem0[0x0041C3A8:real32]
	rLoc1 = rLoc1 / Mem0[0x0041ACA0:real64]
	call _CIcos (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[0x0041ACD8:real64]
	rLoc1 = rLoc1 + Mem0[0x0041ACD0:real64]
	rLoc2 = Mem0[0x0041AC00:real64]
	rLoc2 = rLoc2 * rLoc1
	rLoc2 = rLoc2 * Mem0[esp + 0x0000001C:real64]
	rLoc1 = rLoc1 + rLoc2
	call fn00412520 (retsize: 4; FPU: 1;)
	rLoc1 = Mem0[0x0041C3A4:real32]
	rLoc1 = rLoc1 / Mem0[0x0041ACA0:real64]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call _CIsin (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[0x0041ACD8:real64]
	rLoc1 = rLoc1 + Mem0[0x0041ACD0:real64]
	rLoc2 = Mem0[0x0041ADE0:real64]
	rLoc2 = rLoc2 * rLoc1
	rLoc2 = rLoc2 * Mem0[esp + 0x00000018:real64]
	rLoc1 = rLoc1 + rLoc2
	call fn00412520 (retsize: 4; FPU: 1;)
	rLoc1 = Mem0[0x0041C3A0:real32]
	rLoc1 = rLoc1 / Mem0[0x0041ACA0:real64]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call _CIsin (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[0x0041ACD8:real64]
	rLoc1 = rLoc1 + Mem0[0x0041ACD0:real64]
	rLoc2 = Mem0[0x0041AC00:real64]
	rLoc2 = rLoc2 * rLoc1
	rLoc2 = rLoc2 * Mem0[esp + 0x0000001C:real64]
	rLoc1 = rLoc1 + rLoc2
	call fn00412520 (retsize: 4; FPU: 1;)
	rLoc1 = Mem0[0x0041CEA4:real32]
	rLoc1 = rLoc1 / Mem0[0x0041ACA0:real64]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call _CIcos (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[0x0041ACD8:real64]
	rLoc1 = rLoc1 + Mem0[0x0041ACD0:real64]
	rLoc2 = Mem0[0x0041ADE0:real64]
	rLoc2 = rLoc2 * rLoc1
	rLoc2 = rLoc2 * Mem0[esp + 0x00000028:real64]
	rLoc1 = rLoc1 + rLoc2
	call fn00412520 (retsize: 4; FPU: 1;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = esp + 0x00000034
	call fn00403040 (retsize: 4;)
	esp = esp + 0x00000014
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000020
	SCZO = cond(esp)
	return
	// succ:  fn004032D0_exit fn004032D0_exit
fn004032D0_exit:


// fn004035B0
// Return size: 4
void fn004035B0()
fn004035B0_entry:
	// succ:  l004035B0
l004035B0:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	__align(esp)
	esp = esp - 0x00000050
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = MSVCR80.dll!printf
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041A970
	Mem0[esp + 0x00000014:word32] = 0x000000C8
	Mem0[esp + 0x0000001C:word32] = edi
	call MSVCR80.dll!printf (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041A974
	call MSVCR80.dll!printf (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041A990
	call MSVCR80.dll!printf (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041A970
	call MSVCR80.dll!printf (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041A9C8
	call MSVCR80.dll!printf (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041AA18
	call MSVCR80.dll!printf (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041AA64
	call MSVCR80.dll!printf (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041A970
	call MSVCR80.dll!printf (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	call fn00402780 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041A7BC
	eax = esp + 0x00000018
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	ecx = esp + 0x00000048
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	call fn004023D0 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	edx = 0x00000100
	ecx = esp + 0x00000014
	call fn00402230 (retsize: 4;)
	eax = esp + 0x00000040
	call fn00401E50 (retsize: 4;)
	Mem0[0x0047883C:word32] = eax
	call fn00401D00 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn004022C0 (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	call fn00402340 (retsize: 4;)
	ebx = Mem0[0x00478824:word32]
	SCZO = cond(Mem0[ebx + 0x00000004:word32] - edi)
	esi = Mem0[ebx + 0x0000000C:word32]
	branch Test(LE,SZO) l00403693
	// succ:  l0040367A l00403693
l0040367A:
	edx = Mem0[ebx:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	eax = memset(Mem0[esp:(ptr void)], Mem0[esp + 4:int32], Mem0[esp + 8:size_t])
	esi = esi + Mem0[ebx + 0x00000008:word32]
	SCZO = cond(esi)
	edi = edi + 0x00000001
	SCZO = cond(edi)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	SCZO = cond(edi - Mem0[ebx + 0x00000004:word32])
	branch Test(LT,SO) l0040367A
	// succ:  l00403693 l0040367A
l00403693:
	eax = Mem0[ebx + 0x0000000C:word32]
	ecx = Mem0[ebx + 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041AA98
	edx = esp + 0x00000020
	Mem0[esp + 0x00000040:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	eax = esp + 0x00000058
	esi = 0x00000140
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	Mem0[esp + 0x0000003C:word32] = esi
	Mem0[esp + 0x00000040:word32] = 0x000000B4
	Mem0[esp + 0x00000044:word32] = ecx
	call fn004023D0 (retsize: 4;)
	ecx = Mem0[esp + 0x00000068:word32]
	edx = Mem0[esp + 0x00000064:word32]
	eax = esp + 0x0000003C
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	Mem0[esp + 0x00000050:word32] = ecx
	Mem0[esp + 0x00000044:word32] = esi
	Mem0[esp + 0x00000048:word32] = 0x00000014
	Mem0[esp + 0x0000004C:word32] = edx
	call fn00401A40 (retsize: 4;)
	edi = eax
	esp = esp + 0x00000004
	SCZO = cond(esp)
	Mem0[esp + 0x00000020:word32] = edi
	call fn00403EF0 (retsize: 4;)
	eax = esp + 0x00000030
	call fn00403190 (retsize: 4;)
	Mem0[esp + 0x00000028:word32] = eax
	call fn00404080 (retsize: 4;)
	Mem0[esp + 0x00000014:word32] = eax
	call fn00404FD0 (retsize: 4;)
	Mem0[esp + 0x00000024:word32] = eax
	call fn00402AA0 (retsize: 4;)
	edx = 0x00000100
	ecx = esp + 0x0000001C
	Mem0[esp + 0x0000002C:word32] = eax
	call fn00402230 (retsize: 4;)
	ecx = Mem0[0x00478834:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	call libmikmod.dll!Player_Start (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	goto l00403754
	// succ:  l00403754
l00403750:
	edi = Mem0[esp + 0x00000020:word32]
	// succ:  l00403754
l00403754:
	eax = Mem0[0x00478834:word32]
	esi = (word32) Mem0[eax + 0x00000104:word16]
	eax = (int32) Mem0[eax + 0x00000106:word16]
	SCZO = cond(eax - 0x00000009)
	branch Test(UGT,CZ) l00403975
	// succ:  l00403770 l00403975
l00403770:
	switch (eax) { l0040397D l00403777 l004037A4 l004037F7 l00403813 l0040386E l00403890 l004038A2 l004038C6 l00403941 }
	// succ:  l0040397D l00403777 l004037A4 l004037F7 l00403813 l0040386E l00403890 l004038A2 l004038C6 l00403941
l00403777:
	ecx = Mem0[esp + 0x00000014:word32]
	eax = 0x00000000 + esi * 0x00000004
	edx_eax = (int64) eax
	edx = edx & 0x0000003F
	SZO = cond(edx)
	C = false
	edx = edx + eax
	SCZO = cond(edx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	edx = edx >> 0x00000006
	SCZO = cond(edx)
	eax = esp + 0x00000034
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	edx = edx + 0x00000001
	SCZO = cond(edx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn004042F0 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	goto l0040397D
	// succ:  l0040397D
l004037A4:
	ecx = 0x00000000 + esi * 0x00000004
	eax = 0x92492493
	edx_eax = ecx *s eax
	SCZO = cond(edx_eax)
	edx = edx + ecx
	SCZO = cond(edx)
	edx = edx >> 0x00000004
	SCZO = cond(edx)
	ecx = edx
	ecx = ecx >>u 0x0000001F
	SCZO = cond(ecx)
	ecx = ecx + edx
	SCZO = cond(ecx)
	eax = 0x00000004
	eax = eax - ecx
	SCZO = cond(eax)
	SCZO = cond(eax - 0x00000004)
	branch Test(LE,SZO) l004037D1
	// succ:  l004037CA l004037D1
l004037CA:
	edx = 0x00000004
	goto l004037DD
	// succ:  l004037DD
l004037D1:
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	SZO = cond(eax & eax)
	C = false
	dl = Test(LT,SO)
	edx = edx - 0x00000001
	SCZO = cond(edx)
	edx = edx & eax
	SZO = cond(edx)
	C = false
	// succ:  l004037DD
l004037DD:
	ecx = Mem0[esp + 0x00000014:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000001
	eax = esp + 0x00000034
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000002
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn004042F0 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	goto l0040397D
	// succ:  l0040397D
l004037F7:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000001
	ecx = esp + 0x00000034
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000002
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	ecx = Mem0[esp + 0x00000020:word32]
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	call fn004042F0 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	goto l0040397D
	// succ:  l0040397D
l00403813:
	SCZO = cond(esi - 0x00000014)
	branch Test(LE,SZO) l00403829
	// succ:  l00403818 l00403829
l00403818:
	edx = esi
	edx = edx & 0x0000000F
	SZO = cond(edx)
	C = false
	SCZO = cond(dl - 0x03)
	branch Test(NE,Z) l00403829
	// succ:  l00403822 l00403829
l00403822:
	eax = 0x00000001
	goto l0040382B
	// succ:  l0040382B
l00403829:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l0040382B
l0040382B:
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SCZO = cond(esi - 0x0000000F)
	al = Test(GT,SZO)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = esp + 0x0000003C
	call fn00401B90 (retsize: 4;)
	eax = Mem0[esp + 0x0000001C:word32]
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	SCZO = cond(eax - 0x000000B4)
	branch Test(LE,SZO) l0040397D
	// succ:  l00403851 l0040397D
l00403851:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[esp + 0x00000010:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	ecx = esp + 0x00000044
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	eax = ebx
	call fn00402150 (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	goto l0040397D
	// succ:  l0040397D
l0040386E:
	ecx = esi
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	ecx = ecx & 0x0000000F
	SZO = cond(ecx)
	C = false
	SCZO = cond(cl - 0x03)
	dl = Test(EQ,Z)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000001
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = esp + 0x0000003C
	call fn00401B90 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	goto l0040397D
	// succ:  l0040397D
l00403890:
	eax = esp + 0x00000030
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn00403FB0 (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	goto l0040397D
	// succ:  l0040397D
l004038A2:
	ecx = esi
	ecx = ecx & 0x0000000F
	SZO = cond(ecx)
	C = false
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	SCZO = cond(cl - 0x0B)
	ecx = Mem0[esp + 0x00000024:word32]
	dl = Test(EQ,Z)
	eax = esp + 0x00000030
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn00405030 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	goto l0040397D
	// succ:  l0040397D
l004038C6:
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	SCZO = cond(esi - 0x0000002D)
	cl = Test(GT,SZO)
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	edx = esi
	dl = dl & 0x07
	SZO = cond(dl)
	C = false
	SCZO = cond(dl - 0x04)
	al = Test(EQ,Z)
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	ecx = esi
	ecx = ecx & 0x0000000F
	SZO = cond(ecx)
	C = false
	SCZO = cond(cl - 0x0A)
	ecx = Mem0[esp + 0x0000002C:word32]
	dl = Test(EQ,Z)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = esp + 0x00000038
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call fn004032D0 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	SCZO = cond(esi - 0x00000038)
	branch Test(LE,SZO) l0040397D
	// succ:  l00403900 l0040397D
l00403900:
	SCZO = cond(Mem0[esp + 0x00000010:word32] - 0x000000C8)
	branch Test(GE,SO) l0040397D
	// succ:  l0040390A l0040397D
l0040390A:
	esi = Mem0[esp + 0x00000010:word32]
	esi = esi + 0x00000001
	SCZO = cond(esi)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	ecx = esp + 0x00000044
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	eax = ebx
	Mem0[esp + 0x00000014:word32] = esi
	call fn00402150 (retsize: 4;)
	eax = Mem0[ebx:word32]
	esp = esp + 0x00000004
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	ecx = esi - 0x00000001
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	eax = 0x00000001
	edi = ebx
	call fn004020E0 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	goto l0040397D
	// succ:  l0040397D
l00403941:
	ecx = esi + esi
	edx = 0x0000007F
	edx = edx - ecx
	SCZO = cond(edx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call libmikmod.dll!Player_SetVolume (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	SCZO = cond(esi - 0x0000003F)
	branch Test(NE,Z) l00403962
	// succ:  l0040395A l00403962
l0040395A:
	Mem0[esp + 0x00000018:word32] = 0x00000001
	// succ:  l00403962
l00403962:
	eax = Mem0[esp + 0x0000002C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = esp + 0x00000034
	call fn00402B70 (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	goto l0040397D
	// succ:  l0040397D
l00403975:
	Mem0[esp + 0x00000018:word32] = 0x00000001
	// succ:  l0040397D
l0040397D:
	call libmikmod.dll!MikMod_Update (retsize: 4;)
	ecx = Mem0[0x0041CE90:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	call SDL.dll!SDL_Flip (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00402900 (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	call fn004028A0 (retsize: 4;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004039AD
	// succ:  l004039A4 l004039AD
l004039A4:
	SCZO = cond(Mem0[0x0047850C:word32] - 0x0000001B)
	branch Test(EQ,Z) l004039B8
	// succ:  l004039AD l004039B8
l004039AD:
	SCZO = cond(Mem0[esp + 0x00000018:word32] - 0x00000000)
	branch Test(EQ,Z) l00403750
	// succ:  l004039B8 l00403750
l004039B8:
	call libmikmod.dll!MikMod_Exit (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041A970
	call ebp (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041AAA4
	call ebp (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041AAC8
	call ebp (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041AAE4
	call ebp (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041A970
	call ebp (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041AB0C
	call ebp (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041AB34
	call ebp (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041AB64
	call ebp (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041A970
	call ebp (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004035B0_exit
fn004035B0_exit:


// fn00403A50
// Return size: 4
void fn00403A50()
fn00403A50_entry:
	// succ:  l00403A50
l00403A50:
	esp = fp
	esp = esp - 0x00000850
	SCZO = cond(esp)
	rLoc1 = Mem0[esp + 0x00000858:real32]
	eax = Mem0[0x0047847C:word32]
	rLoc1 = rLoc1 * Mem0[0x0041ACB8:real64]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	Mem0[esp + 0x0000004C:word32] = eax
	eax = Mem0[esp + 0x0000085C:word32]
	rLoc1 = rLoc1 + rLoc1
	ecx = Mem0[eax + 0x0000000C:word32]
	edx = Mem0[eax + 0x00000008:word32]
	rLoc1 = rLoc1 * Mem0[0x0041AC88:real64]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	Mem0[esp + 0x0000005C:word32] = ecx
	Mem0[esp + 0x00000048:real64] = rLoc1
	Mem0[esp + 0x00000058:word32] = edx
	rLoc2 = Mem0[esp + 0x0000086C:real32]
	Mem0[esp + 0x00000038:real64] = rLoc2
	call _CIcos (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[esp + 0x00000038:real64]
	Mem0[esp + 0x00000018:real32] = rLoc1
	rLoc1 = Mem0[esp + 0x00000018:real32]
	Mem0[esp + 0x00000034:real32] = rLoc1
	rLoc1 = Mem0[esp + 0x00000048:real64]
	call _CIsin (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[esp + 0x00000038:real64]
	rLoc2 = rLoc2
	rLoc2 = -rLoc2
	Mem0[esp + 0x00000014:real32] = rLoc2
	Mem0[esp + 0x00000030:real32] = rLoc1
	rLoc1 = Mem0[esp + 0x00000018:real32]
	Mem0[esp + 0x00000018:real32] = rLoc1
	rLoc1 = Mem0[esp + 0x00000034:real32]
	rLoc2 = rLoc2
	rLoc3 = Mem0[0x0041ACB0:real64]
	rLoc3 = rLoc3 * rLoc2
	v14 = rLoc3
	rLoc3 = rLoc2
	rLoc2 = v14
	call fn00412520 (retsize: 4; FPU: 3;)
	rLoc3 = Mem0[esp + 0x00000030:real32]
	rLoc4 = rLoc4
	esi = eax
	rLoc4 = rLoc4 * rLoc2
	Mem0[esp + 0x00000040:word32] = esi
	call fn00412520 (retsize: 4; FPU: 4;)
	rLoc4 = Mem0[esp + 0x00000014:real32]
	rLoc5 = rLoc5
	ebx = eax
	rLoc5 = rLoc5 * rLoc2
	Mem0[esp + 0x00000048:word32] = ebx
	call fn00412520 (retsize: 4; FPU: 5;)
	rLoc5 = Mem0[esp + 0x00000018:real32]
	rLoc6 = rLoc6
	edi = eax
	rLoc2 = rLoc2 * rLoc6
	Mem0[esp + 0x00000044:word32] = edi
	v18 = rLoc5
	rLoc5 = rLoc2
	rLoc2 = v18
	call fn00412520 (retsize: 4; FPU: 5;)
	rLoc5 = Mem0[0x0041ACA8:real64]
	rLoc5 = rLoc5 * rLoc1
	ebp = eax
	rLoc6 = Mem0[0x0041AC00:real64]
	Mem0[esp + 0x00000038:word32] = eax
	rLoc6 = rLoc6 * rLoc3
	esi = esi >> 0x00000003
	SCZO = cond(esi)
	v19 = rLoc6
	rLoc6 = rLoc1
	rLoc1 = v19
	edi = edi >> 0x00000003
	SCZO = cond(edi)
	ebx = ebx >> 0x00000003
	SCZO = cond(ebx)
	rLoc3 = rLoc6 - rLoc3
	ebp = ebp >> 0x00000003
	SCZO = cond(ebp)
	v20 = rLoc5
	rLoc5 = rLoc3
	rLoc3 = v20
	call fn00412520 (retsize: 4; FPU: 5;)
	rLoc3 = rLoc3 * rLoc4
	v21 = rLoc3
	rLoc3 = rLoc2
	rLoc2 = v21
	Mem0[esp + 0x00000030:word32] = eax
	rLoc1 = rLoc1 * rLoc3
	rLoc1 = rLoc2 - rLoc1
	call fn00412520 (retsize: 4; FPU: 1;)
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	Mem0[esp + 0x00000018:word32] = eax
	Mem0[esp + 0x00000024:word32] = ecx
	Mem0[esp + 0x00000010:word32] = ecx
	eax = edi + edi
	Mem0[esp + 0x0000001C:word32] = eax
	edx = esi + esi
	Mem0[esp + 0x00000020:word32] = edx
	eax = 0x00000000 + edi * 0x00000004
	Mem0[esp + 0x0000002C:word32] = eax
	edx = 0x00000000 + esi * 0x00000004
	Mem0[esp + 0x00000028:word32] = edx
	eax = edi + edi * 0x00000002
	eax = eax + eax
	SCZO = cond(eax)
	edx = esi + esi * 0x00000002
	Mem0[esp + 0x00000014:word32] = eax
	edx = edx + edx
	SCZO = cond(edx)
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l00403BA2
l00403BA2:
	ecx = Mem0[esp + 0x00000024:word32]
	Mem0[esp + 0x00000060 + eax:word32] = ecx
	ecx = Mem0[esp + 0x00000010:word32]
	Mem0[esp + 0x00000460 + eax:word32] = ecx
	ecx = Mem0[esp + 0x00000024:word32]
	ecx = ecx + esi
	SCZO = cond(ecx)
	Mem0[esp + 0x00000064 + eax:word32] = ecx
	ecx = Mem0[esp + 0x00000010:word32]
	ecx = ecx + edi
	SCZO = cond(ecx)
	Mem0[esp + 0x00000464 + eax:word32] = ecx
	ecx = Mem0[esp + 0x00000020:word32]
	Mem0[esp + 0x00000068 + eax:word32] = ecx
	ecx = Mem0[esp + 0x0000001C:word32]
	Mem0[esp + 0x00000468 + eax:word32] = ecx
	ecx = Mem0[esp + 0x00000020:word32]
	ecx = ecx + esi
	SCZO = cond(ecx)
	Mem0[esp + 0x0000006C + eax:word32] = ecx
	ecx = Mem0[esp + 0x0000001C:word32]
	ecx = ecx + edi
	SCZO = cond(ecx)
	Mem0[esp + 0x0000046C + eax:word32] = ecx
	ecx = Mem0[esp + 0x00000028:word32]
	Mem0[esp + 0x00000070 + eax:word32] = ecx
	ecx = Mem0[esp + 0x0000002C:word32]
	v24 = Mem0[esp + 0x00000024:word32] + ebx
	Mem0[esp + 0x00000024:word32] = v24
	SCZO = cond(v24)
	v25 = Mem0[esp + 0x00000020:word32] + ebx
	Mem0[esp + 0x00000020:word32] = v25
	SCZO = cond(v25)
	v26 = Mem0[esp + 0x00000010:word32] + ebp
	Mem0[esp + 0x00000010:word32] = v26
	SCZO = cond(v26)
	v27 = Mem0[esp + 0x0000001C:word32] + ebp
	Mem0[esp + 0x0000001C:word32] = v27
	SCZO = cond(v27)
	Mem0[esp + 0x00000470 + eax:word32] = ecx
	ecx = Mem0[esp + 0x00000028:word32]
	v28 = Mem0[esp + 0x00000028:word32] + ebx
	Mem0[esp + 0x00000028:word32] = v28
	SCZO = cond(v28)
	ecx = ecx + esi
	SCZO = cond(ecx)
	Mem0[esp + 0x00000074 + eax:word32] = ecx
	ecx = Mem0[esp + 0x0000002C:word32]
	v29 = Mem0[esp + 0x0000002C:word32] + ebp
	Mem0[esp + 0x0000002C:word32] = v29
	SCZO = cond(v29)
	ecx = ecx + edi
	SCZO = cond(ecx)
	Mem0[esp + 0x00000474 + eax:word32] = ecx
	ecx = Mem0[esp + 0x00000014:word32]
	Mem0[esp + 0x00000478 + eax:word32] = ecx
	ecx = edx + esi
	Mem0[esp + 0x0000007C + eax:word32] = ecx
	ecx = Mem0[esp + 0x00000014:word32]
	v30 = Mem0[esp + 0x00000014:word32] + ebp
	Mem0[esp + 0x00000014:word32] = v30
	SCZO = cond(v30)
	ecx = ecx + edi
	SCZO = cond(ecx)
	Mem0[esp + 0x00000078 + eax:word32] = edx
	Mem0[esp + 0x0000047C + eax:word32] = ecx
	eax = eax + 0x00000020
	SCZO = cond(eax)
	edx = edx + ebx
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000100)
	branch Test(LT,SO) l00403BA2
	// succ:  l00403C6F l00403BA2
l00403C6F:
	esi = Mem0[esp + 0x00000864:word32]
	eax = Mem0[esi + 0x00000004:word32]
	edx_eax = (int64) eax
	edx = edx & 0x00000007
	SZO = cond(edx)
	C = false
	eax = eax + edx
	SCZO = cond(eax)
	ecx = eax
	ecx = ecx >> 0x00000003
	SCZO = cond(ecx)
	SZO = cond(ecx & ecx)
	C = false
	branch Test(LE,SZO) l00403EE1
	// succ:  l00403C8C l00403EE1
l00403C8C:
	eax = Mem0[esi:word32]
	ebx = Mem0[esp + 0x00000018:word32]
	edx_eax = (int64) eax
	edx = edx & 0x00000007
	SZO = cond(edx)
	C = false
	eax = eax + edx
	SCZO = cond(eax)
	edx = Mem0[esp + 0x0000005C:word32]
	eax = eax >> 0x00000003
	SCZO = cond(eax)
	Mem0[esp + 0x00000050:word32] = eax
	Mem0[esp + 0x00000014:word32] = edx
	Mem0[esp + 0x00000034:word32] = ecx
	// succ:  l00403CAB
l00403CAB:
	SZO = cond(eax & eax)
	C = false
	esi = Mem0[esp + 0x00000030:word32]
	Mem0[esp + 0x0000001C:word32] = esi
	Mem0[esp + 0x00000028:word32] = ebx
	branch Test(LE,SZO) l00403EBE
	// succ:  l00403CBF l00403EBE
l00403CBF:
	ecx = Mem0[esp + 0x00000014:word32]
	Mem0[esp + 0x00000020:word32] = ecx
	Mem0[esp + 0x00000024:word32] = eax
	// succ:  l00403CCB
l00403CCB:
	edx = esi + 0x00005000
	SCZO = cond(edx - 0x0000C800)
	branch Test(UGT,CZ) l00403E7D
	// succ:  l00403CDD l00403E7D
l00403CDD:
	edx = ebx + 0x00008200
	SCZO = cond(edx - 0x0000AA00)
	branch Test(UGT,CZ) l00403E7D
	// succ:  l00403CEF l00403E7D
l00403CEF:
	edi = esi
	eax = ebx
	esi = esi >> 0x00000008
	SCZO = cond(esi)
	eax = eax & 0x000000FF
	SZO = cond(eax)
	C = false
	ebx = ebx & 0xFFFFFF00
	SZO = cond(ebx)
	C = false
	edi = edi & 0x000000FF
	SZO = cond(edi)
	C = false
	ebx = ebx + Mem0[esp + 0x00000054:word32]
	SCZO = cond(ebx)
	Mem0[esp + 0x00000010:word32] = eax
	ebp = esi + 0x00008080 + ebx
	esi = esp + 0x00000060
	edx = esp + 0x00000460
	Mem0[esp + 0x0000002C:word32] = 0x00000008
	goto l00403D34
	// succ:  l00403D34
l00403D30:
	eax = Mem0[esp + 0x00000010:word32]
	// succ:  l00403D34
l00403D34:
	ebx = Mem0[edx:word32]
	ebx = ebx + eax
	SCZO = cond(ebx)
	eax = Mem0[esi:word32]
	eax = eax + edi
	SCZO = cond(eax)
	eax = eax >> 0x00000008
	SCZO = cond(eax)
	ebx = ebx & 0xFFFFFF00
	SZO = cond(ebx)
	C = false
	ebx = ebx + ebp
	SCZO = cond(ebx)
	eax = (word32) Mem0[eax + ebx:byte]
	Mem0[ecx:byte] = al
	eax = Mem0[edx + 0x00000004:word32]
	eax = eax + Mem0[esp + 0x00000010:word32]
	SCZO = cond(eax)
	ebx = Mem0[esi + 0x00000004:word32]
	eax = eax & 0xFFFFFF00
	SZO = cond(eax)
	C = false
	eax = eax + ebp
	SCZO = cond(eax)
	ebx = ebx + edi
	SCZO = cond(ebx)
	ebx = ebx >> 0x00000008
	SCZO = cond(ebx)
	eax = (word32) Mem0[ebx + eax:byte]
	Mem0[ecx + 0x00000001:byte] = al
	edx = edx + 0x00000004
	SCZO = cond(edx)
	eax = Mem0[edx + 0x00000004:word32]
	eax = eax + Mem0[esp + 0x00000010:word32]
	SCZO = cond(eax)
	esi = esi + 0x00000004
	SCZO = cond(esi)
	ebx = Mem0[esi + 0x00000004:word32]
	eax = eax & 0xFFFFFF00
	SZO = cond(eax)
	C = false
	eax = eax + ebp
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	ebx = ebx + edi
	SCZO = cond(ebx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	ebx = ebx >> 0x00000008
	SCZO = cond(ebx)
	eax = (word32) Mem0[ebx + eax:byte]
	Mem0[ecx + 0x00000001:byte] = al
	eax = Mem0[edx + 0x00000004:word32]
	eax = eax + Mem0[esp + 0x00000010:word32]
	SCZO = cond(eax)
	esi = esi + 0x00000004
	SCZO = cond(esi)
	ebx = Mem0[esi + 0x00000004:word32]
	eax = eax & 0xFFFFFF00
	SZO = cond(eax)
	C = false
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	eax = eax + ebp
	SCZO = cond(eax)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	ebx = ebx + edi
	SCZO = cond(ebx)
	esi = esi + 0x00000004
	SCZO = cond(esi)
	ebx = ebx >> 0x00000008
	SCZO = cond(ebx)
	eax = (word32) Mem0[ebx + eax:byte]
	ebx = Mem0[esi + 0x00000004:word32]
	Mem0[ecx + 0x00000001:byte] = al
	eax = Mem0[edx + 0x00000004:word32]
	eax = eax + Mem0[esp + 0x00000010:word32]
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	eax = eax & 0xFFFFFF00
	SZO = cond(eax)
	C = false
	edx = edx + 0x00000004
	SCZO = cond(edx)
	eax = eax + ebp
	SCZO = cond(eax)
	esi = esi + 0x00000004
	SCZO = cond(esi)
	ebx = ebx + edi
	SCZO = cond(ebx)
	ebx = ebx >> 0x00000008
	SCZO = cond(ebx)
	eax = (word32) Mem0[ebx + eax:byte]
	ebx = Mem0[esi + 0x00000004:word32]
	Mem0[ecx + 0x00000001:byte] = al
	eax = Mem0[edx + 0x00000004:word32]
	eax = eax + Mem0[esp + 0x00000010:word32]
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	esi = esi + 0x00000004
	SCZO = cond(esi)
	eax = eax & 0xFFFFFF00
	SZO = cond(eax)
	C = false
	ebx = ebx + edi
	SCZO = cond(ebx)
	eax = eax + ebp
	SCZO = cond(eax)
	ebx = ebx >> 0x00000008
	SCZO = cond(ebx)
	eax = (word32) Mem0[ebx + eax:byte]
	ebx = Mem0[esi + 0x00000004:word32]
	Mem0[ecx + 0x00000001:byte] = al
	eax = Mem0[edx + 0x00000004:word32]
	eax = eax + Mem0[esp + 0x00000010:word32]
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	esi = esi + 0x00000004
	SCZO = cond(esi)
	ebx = ebx + edi
	SCZO = cond(ebx)
	eax = eax & 0xFFFFFF00
	SZO = cond(eax)
	C = false
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	ebx = ebx >> 0x00000008
	SCZO = cond(ebx)
	eax = eax + ebp
	SCZO = cond(eax)
	eax = (word32) Mem0[ebx + eax:byte]
	Mem0[ecx:byte] = al
	eax = Mem0[edx + 0x00000004:word32]
	eax = eax + Mem0[esp + 0x00000010:word32]
	SCZO = cond(eax)
	ebx = Mem0[esi + 0x00000004:word32]
	edx = edx + 0x00000004
	SCZO = cond(edx)
	esi = esi + 0x00000004
	SCZO = cond(esi)
	eax = eax & 0xFFFFFF00
	SZO = cond(eax)
	C = false
	ebx = ebx + edi
	SCZO = cond(ebx)
	eax = eax + ebp
	SCZO = cond(eax)
	ebx = ebx >> 0x00000008
	SCZO = cond(ebx)
	eax = (word32) Mem0[ebx + eax:byte]
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	Mem0[ecx:byte] = al
	eax = Mem0[esp + 0x00000058:word32]
	eax = eax + 0xFFFFFFF9
	SCZO = cond(eax)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	esi = esi + 0x00000004
	SCZO = cond(esi)
	ecx = ecx + eax
	SCZO = cond(ecx)
	v35 = Mem0[esp + 0x0000002C:word32] - 0x00000001
	Mem0[esp + 0x0000002C:word32] = v35
	SCZO = cond(v35)
	branch Test(NE,Z) l00403D30
	// succ:  l00403E6F l00403D30
l00403E6F:
	esi = Mem0[esp + 0x0000001C:word32]
	ebx = Mem0[esp + 0x00000028:word32]
	eax = Mem0[esp + 0x00000050:word32]
	goto l00403E94
	// succ:  l00403E94
l00403E7D:
	edi = 0x00000008
	// succ:  l00403E82
l00403E82:
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	Mem0[ecx:word32] = edx
	Mem0[ecx + 0x00000004:word32] = edx
	ecx = ecx + 0x00000140
	SCZO = cond(ecx)
	edi = edi - 0x00000001
	SCZO = cond(edi)
	branch Test(NE,Z) l00403E82
	// succ:  l00403E94 l00403E82
l00403E94:
	ecx = Mem0[esp + 0x00000020:word32]
	esi = esi + Mem0[esp + 0x00000040:word32]
	SCZO = cond(esi)
	ebx = ebx + Mem0[esp + 0x00000044:word32]
	SCZO = cond(ebx)
	ecx = ecx + 0x00000008
	SCZO = cond(ecx)
	v37 = Mem0[esp + 0x00000024:word32] - 0x00000001
	Mem0[esp + 0x00000024:word32] = v37
	SCZO = cond(v37)
	Mem0[esp + 0x0000001C:word32] = esi
	Mem0[esp + 0x00000028:word32] = ebx
	Mem0[esp + 0x00000020:word32] = ecx
	branch Test(NE,Z) l00403CCB
	// succ:  l00403EBA l00403CCB
l00403EBA:
	ebx = Mem0[esp + 0x00000018:word32]
	// succ:  l00403EBE
l00403EBE:
	ecx = Mem0[esp + 0x00000048:word32]
	ebx = ebx + Mem0[esp + 0x00000038:word32]
	SCZO = cond(ebx)
	v38 = Mem0[esp + 0x00000030:word32] + ecx
	Mem0[esp + 0x00000030:word32] = v38
	SCZO = cond(v38)
	v39 = Mem0[esp + 0x00000014:word32] + 0x00000A00
	Mem0[esp + 0x00000014:word32] = v39
	SCZO = cond(v39)
	v40 = Mem0[esp + 0x00000034:word32] - 0x00000001
	Mem0[esp + 0x00000034:word32] = v40
	SCZO = cond(v40)
	Mem0[esp + 0x00000018:word32] = ebx
	branch Test(NE,Z) l00403CAB
	// succ:  l00403EE1 l00403CAB
l00403EE1:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000850
	SCZO = cond(esp)
	return
	// succ:  fn00403A50_exit
fn00403A50_exit:


// fn00403EF0
// Return size: 4
void fn00403EF0()
fn00403EF0_entry:
	// succ:  l00403EF0
l00403EF0:
	esp = fp
	esp = esp - 0x00000014
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = malloc
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000004
	eax = malloc(Mem0[esp:size_t])
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041AB94
	ebp = eax
	eax = esp + 0x00000018
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00478480
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn004023D0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000010
	eax = malloc(Mem0[esp:size_t])
	esi = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00020000
	Mem0[esi:word32] = 0x00000100
	Mem0[esi + 0x00000004:word32] = 0x00000200
	Mem0[esi + 0x00000008:word32] = 0x00000100
	eax = malloc(Mem0[esp:size_t])
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	esp = esp + 0x00000018
	SCZO = cond(esp)
	Mem0[esi + 0x0000000C:word32] = eax
	SCZO = cond(Mem0[esi + 0x00000004:word32] - ebx)
	Mem0[0x00478460:word32] = esi
	edi = eax
	branch Test(LE,SZO) l00403F66
	// succ:  l00403F4D l00403F66
l00403F4D:
	ecx = Mem0[esi:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	eax = memset(Mem0[esp:(ptr void)], Mem0[esp + 4:int32], Mem0[esp + 8:size_t])
	edi = edi + Mem0[esi + 0x00000008:word32]
	SCZO = cond(edi)
	ebx = ebx + 0x00000001
	SCZO = cond(ebx)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	SCZO = cond(ebx - Mem0[esi + 0x00000004:word32])
	branch Test(LT,SO) l00403F4D
	// succ:  l00403F66 l00403F4D
l00403F66:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000080
	ecx = esp + 0x00000014
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	eax = esi
	call fn00402150 (retsize: 4;)
	edx = Mem0[esi + 0x00000008:word32]
	esp = esp + 0x00000004
	SCZO = cond(esp)
	edx = edx << 0x00000007
	SCZO = cond(edx)
	edx = edx + Mem0[esi + 0x0000000C:word32]
	SCZO = cond(edx)
	eax = 0x00000100
	Mem0[0x00478470:word32] = eax
	Mem0[0x00478474:word32] = eax
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[0x0047847C:word32] = edx
	eax = Mem0[esi + 0x00000008:word32]
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[0x00478478:word32] = eax
	eax = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000014
	SCZO = cond(esp)
	return
	// succ:  fn00403EF0_exit
fn00403EF0_exit:


// fn00403FB0
// Return size: 4
void fn00403FB0()
fn00403FB0_entry:
	// succ:  l00403FB0
l00403FB0:
	esp = fp
	esp = esp - 0x00000008
	SCZO = cond(esp)
	SCZO = cond(Mem0[0x0041C370:word32] - 0x00000000)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	branch Test(EQ,Z) l00403FFF
	// succ:  l00403FC0 l00403FFF
l00403FC0:
	eax = Mem0[esp + 0x0000001C:word32]
	edi = Mem0[eax + 0x00000004:word32]
	SZO = cond(edi & edi)
	C = false
	esi = Mem0[eax + 0x0000000C:word32]
	Mem0[0x0041C370:word32] = 0x00000000
	branch Test(LE,SZO) l00403FF0
	// succ:  l00403FD8 l00403FF0
l00403FD8:
	ebx = Mem0[eax:word32]
	ebp = Mem0[eax + 0x00000008:word32]
	// succ:  l00403FDD
l00403FDD:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	eax = memset(Mem0[esp:(ptr void)], Mem0[esp + 4:int32], Mem0[esp + 8:size_t])
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	esi = esi + ebp
	SCZO = cond(esi)
	edi = edi - 0x00000001
	SCZO = cond(edi)
	branch Test(NE,Z) l00403FDD
	// succ:  l00403FF0 l00403FDD
l00403FF0:
	edx = 0x00000080
	ecx = 0x00478480
	call fn00402230 (retsize: 4;)
	// succ:  l00403FFF
l00403FFF:
	rLoc1 = Mem0[0x0041CEB4:real32]
	rLoc1 = rLoc1 + Mem0[0x0041ACD0:real64]
	Mem0[0x0041CEB4:real32] = rLoc1
	rLoc1 = Mem0[0x0041CEB4:real32]
	rLoc1 = rLoc1 * Mem0[0x0041AD68:real64]
	call _CIcos (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[0x0041AD50:real64]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	rLoc1 = rLoc1 + Mem0[0x0041AD20:real64]
	Mem0[esp + 0x00000018:real32] = rLoc1
	rLoc1 = Mem0[esp + 0x00000018:real32]
	Mem0[esp:real32] = rLoc1
	rLoc1 = Mem0[0x0041CEB4:real32]
	rLoc1 = rLoc1 * Mem0[0x0041AE48:real64]
	call _CIsin (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[0x0041AE40:real64]
	eax = Mem0[esp + 0x00000020:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	Mem0[esp + 0x0000001C:real32] = rLoc1
	rLoc1 = Mem0[esp + 0x0000001C:real32]
	Mem0[esp:real32] = rLoc1
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn00403A50 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000008
	SCZO = cond(esp)
	return
	// succ:  fn00403FB0_exit
fn00403FB0_exit:


// fn00404080
// Return size: 4
void fn00404080()
fn00404080_entry:
	// succ:  l00404080
l00404080:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = malloc
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000004
	eax = malloc(Mem0[esp:size_t])
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0000FA00
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00468280
	ebp = eax
	eax = memset(Mem0[esp:(ptr void)], Mem0[esp + 4:int32], Mem0[esp + 8:size_t])
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000010
	eax = malloc(Mem0[esp:size_t])
	esi = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0003C000
	Mem0[esi:word32] = 0x00001000
	Mem0[esi + 0x00000004:word32] = 0x0000003C
	Mem0[esi + 0x00000008:word32] = 0x00001000
	eax = malloc(Mem0[esp:size_t])
	ecx = Mem0[0x0047883C:word32]
	Mem0[esi + 0x0000000C:word32] = eax
	eax = Mem0[esi:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	Mem0[0x00458080:word32] = esi
	call fn00402070 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000C00
	eax = malloc(Mem0[esp:size_t])
	esp = esp + 0x00000024
	SCZO = cond(esp)
	Mem0[ebp + 0x00000000:word32] = eax
	ecx = 0xFFFFFFFD
	esi = eax
	// succ:  l004040F0
l004040F0:
	edi = ecx - 0x00000002
	SCZO = cond(edi - 0x0000003F)
	branch Test(LE,SZO) l004040FF
	// succ:  l004040F8 l004040FF
l004040F8:
	edx = 0x0000003F
	goto l0040410B
	// succ:  l0040410B
l004040FF:
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	SZO = cond(edi & edi)
	C = false
	dl = Test(LT,SO)
	edx = edx - 0x00000001
	SCZO = cond(edx)
	edx = edx & edi
	SZO = cond(edx)
	C = false
	// succ:  l0040410B
l0040410B:
	SCZO = cond(ecx - 0x0000003F)
	Mem0[esi:word32] = edx
	branch Test(LE,SZO) l00404119
	// succ:  l00404112 l00404119
l00404112:
	edx = 0x0000003F
	goto l00404125
	// succ:  l00404125
l00404119:
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	SZO = cond(ecx & ecx)
	C = false
	dl = Test(LT,SO)
	edx = edx - 0x00000001
	SCZO = cond(edx)
	edx = edx & ecx
	SZO = cond(edx)
	C = false
	// succ:  l00404125
l00404125:
	Mem0[esi + 0x00000004:word32] = edx
	edx = ecx + 0x00000003
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	Mem0[esi + 0x00000008:word32] = edx
	edx = ecx + 0x00000003
	esi = esi + 0x0000000C
	SCZO = cond(esi)
	SCZO = cond(edx - 0x00000040)
	branch Test(LT,SO) l004040F0
	// succ:  l0040413C l004040F0
l0040413C:
	ecx = 0x0000000E
	Mem0[eax + 0x00000300:word32] = ecx
	Mem0[eax + 0x00000304:word32] = ecx
	Mem0[eax + 0x00000308:word32] = ecx
	edx = 0x0000001C
	Mem0[eax + 0x0000030C:word32] = edx
	Mem0[eax + 0x00000310:word32] = edx
	Mem0[eax + 0x00000314:word32] = edx
	Mem0[eax + 0x00000900:word32] = ecx
	ecx = 0x00000006
	Mem0[eax + 0x00000904:word32] = ecx
	Mem0[eax + 0x00000908:word32] = ecx
	Mem0[eax + 0x0000090C:word32] = 0x0000001B
	ecx = 0x00000012
	Mem0[eax + 0x00000910:word32] = ecx
	Mem0[eax + 0x00000914:word32] = ecx
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[0x00458060:word32] = eax
	Mem0[0x00458064:word32] = eax
	Mem0[0x00458068:word32] = eax
	Mem0[0x0045806C:word32] = eax
	Mem0[0x00468270:word32] = eax
	Mem0[0x00468274:word32] = eax
	Mem0[0x00468278:word32] = eax
	Mem0[0x0046827C:word32] = eax
	Mem0[0x00458070:word32] = eax
	Mem0[0x00458074:word32] = eax
	Mem0[0x00458078:word32] = eax
	Mem0[0x0045807C:word32] = eax
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00404080_exit
fn00404080_exit:


// fn004041E0
// Return size: 4
void fn004041E0()
fn004041E0_entry:
	// succ:  l004041E0
l004041E0:
	esp = fp
	esp = esp - 0x0000001C
	SCZO = cond(esp)
	edx = Mem0[esp + 0x00000020:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = Mem0[0x00458080:word32]
	eax = Mem0[ebx + 0x0000000C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	Mem0[esp + 0x00000020:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	eax = 0x00468280
	ecx = ecx + 0x00000000
	// succ:  l00404200
l00404200:
	esi = eax
	edi = edx
	eax = eax + 0x0000014A
	SCZO = cond(eax)
	ecx = 0x00000050
	edx = edx + 0x00000140
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00478450)
	// succ:  l00404219
l00404219:
	branch ecx == 0x00000000 l0040421B
	// succ:  l00404219_1 l0040421B
l00404219_1:
	v11 = Mem0[esi:word32]
	Mem0[edi:word32] = v11
	esi = esi + 0x00000004
	edi = edi + 0x00000004
	ecx = ecx - 0x00000001
	goto l00404219
	// succ:  l00404219
l0040421B:
	branch Test(LT,SO) l00404200
	// succ:  l0040421D l00404200
l0040421D:
	eax = 0x00000001
	SCZO = cond(Mem0[esp + 0x00000034:word32] - eax)
	branch Test(NE,Z) l004042DF
	// succ:  l0040422C l004042DF
l0040422C:
	v14 = Mem0[0x0041CEBC:word32] + eax
	Mem0[0x0041CEBC:word32] = v14
	SCZO = cond(v14)
	rLoc1 = (real64) Mem0[0x0041CEBC:int32]
	Mem0[esp + 0x00000018:real64] = rLoc1
	rLoc1 = rLoc1 / Mem0[0x0041ACA0:real64]
	call _CIsin (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[0x0041AC00:real64]
	rLoc2 = Mem0[esp + 0x00000018:real64]
	rLoc2 = rLoc2 * Mem0[0x0041AC98:real64]
	rLoc1 = rLoc1 + rLoc2
	call fn00412520 (retsize: 4; FPU: 1;)
	ebp = ebp ^ ebp
	SZO = cond(ebp)
	C = false
	SCZO = cond(Mem0[ebx + 0x00000004:word32] - ebp)
	Mem0[esp + 0x00000018:word32] = eax
	branch Test(LE,SZO) l004042DF
	// succ:  l00404269 l004042DF
l00404269:
	ecx = Mem0[esp + 0x00000030:word32]
	ecx = ecx + 0x00006400
	SCZO = cond(ecx)
	Mem0[esp + 0x00000014:word32] = 0x0045E7C0
	Mem0[esp + 0x00000034:word32] = ecx
	// succ:  l0040427F
l0040427F:
	ecx = Mem0[ebx + 0x00000008:word32]
	edi = Mem0[esp + 0x00000014:word32]
	ecx = ecx *s ebp
	SCZO = cond(ecx)
	ecx = ecx + Mem0[esp + 0x00000018:word32]
	SCZO = cond(ecx)
	esi = Mem0[esp + 0x00000034:word32]
	ecx = ecx + Mem0[esp + 0x00000024:word32]
	SCZO = cond(ecx)
	eax = 0x0000013F
	ebx = ebx + 0x00000000
	// succ:  l004042A0
l004042A0:
	dl = Mem0[edi:byte]
	edi = edi + 0x00000001
	SCZO = cond(edi)
	SZO = cond(dl & dl)
	C = false
	branch Test(NE,Z) l004042BC
	// succ:  l004042A9 l004042BC
l004042A9:
	dl = Mem0[ecx:byte]
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l004042BC
	// succ:  l004042AF l004042BC
l004042AF:
	bl = Mem0[edi + 0x00000009:byte]
	bl = bl | dl
	SZO = cond(bl)
	C = false
	Mem0[esi:byte] = bl
	ebx = Mem0[0x00458080:word32]
	// succ:  l004042BC
l004042BC:
	esi = esi + 0x00000001
	SCZO = cond(esi)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	branch Test(NE,Z) l004042A0
	// succ:  l004042C7 l004042A0
l004042C7:
	v21 = Mem0[esp + 0x00000034:word32] + 0x00000140
	Mem0[esp + 0x00000034:word32] = v21
	SCZO = cond(v21)
	v22 = Mem0[esp + 0x00000014:word32] + 0x0000014A
	Mem0[esp + 0x00000014:word32] = v22
	SCZO = cond(v22)
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	SCZO = cond(ebp - Mem0[ebx + 0x00000004:word32])
	branch Test(LT,SO) l0040427F
	// succ:  l004042DF l0040427F
l004042DF:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x0000001C
	SCZO = cond(esp)
	return
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x0000001C
	SCZO = cond(esp)
	return
	// succ:  fn004041E0_exit fn004041E0_exit
fn004041E0_exit:


// fn004042F0
// Return size: 4
void fn004042F0()
fn004042F0_entry:
	// succ:  l004042F0
l004042F0:
	esp = fp
	esp = esp - 0x00000370
	SCZO = cond(esp)
	eax = Mem0[0x0041C340:word32]
	eax = eax ^ esp
	SZO = cond(eax)
	C = false
	Mem0[esp + 0x0000036C:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = Mem0[esp + 0x0000037C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	SCZO = cond(Mem0[0x0041C36C:word32] - ebx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esi = edx
	branch Test(EQ,Z) l0040432B
	// succ:  l0040431B l0040432B
l0040431B:
	edx = 0x000000C2
	Mem0[0x0041C36C:word32] = ebx
	call fn00402230 (retsize: 4;)
	// succ:  l0040432B
l0040432B:
	SCZO = cond(Mem0[0x0041CEB8:word32] - ebx)
	branch Test(EQ,Z) l00404346
	// succ:  l00404333 l00404346
l00404333:
	Mem0[0x00478520:byte] = bl
	Mem0[0x00478521:byte] = bl
	Mem0[0x00478522:byte] = 0x3F
	// succ:  l00404346
l00404346:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000190
	eax = esp + 0x0000005C
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = memset(Mem0[esp:(ptr void)], Mem0[esp + 4:int32], Mem0[esp + 8:size_t])
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000190
	ecx = esp + 0x000001EC
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	eax = memset(Mem0[esp:(ptr void)], Mem0[esp + 4:int32], Mem0[esp + 8:size_t])
	rLoc1 = 1
	eax = Mem0[esp + 0x00000394:word32]
	rLoc2 = 1
	rLoc3 = 0
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	eax = eax - ebx
	SCZO = cond(eax)
	rLoc4 = 0
	branch Test(EQ,Z) l004046EA
	// succ:  l00404386 l004046EA
l00404386:
	eax = eax - 0x00000002
	SCZO = cond(eax)
	branch Test(NE,Z) l00404521
	// succ:  l0040438F l00404521
l0040438F:
	SCZO = cond(esi - 0x00000004)
	rLoc5 = Mem0[0x00458060:real32]
	rLoc5 = rLoc5 + rLoc1
	Mem0[0x00458060:real32] = rLoc5
	rLoc5 = Mem0[0x00458064:real32]
	rLoc5 = rLoc5 + rLoc1
	Mem0[0x00458064:real32] = rLoc5
	rLoc5 = Mem0[0x00458068:real32]
	rLoc5 = rLoc5 + rLoc1
	Mem0[0x00458068:real32] = rLoc5
	rLoc5 = Mem0[0x0045806C:real32]
	rLoc5 = rLoc5 + rLoc1
	Mem0[0x0045806C:real32] = rLoc5
	branch Test(LE,SZO) l004043D3
	// succ:  l004043CC l004043D3
l004043CC:
	eax = 0x00000004
	goto l004043DF
	// succ:  l004043DF
l004043D3:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SCZO = cond(esi - ebx)
	al = Test(LT,SO)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	eax = eax & esi
	SZO = cond(eax)
	C = false
	// succ:  l004043DF
l004043DF:
	rLoc5 = Mem0[0x0041AE28:real64]
	edx = 0x00000003
	edx = edx - eax
	SCZO = cond(edx)
	eax = edx + 0x00000001
	SCZO = cond(eax - 0x00000004)
	branch Test(LT,SO) l0040451B
	// succ:  l004043F8 l0040451B
l004043F8:
	eax = eax >>u 0x00000002
	SCZO = cond(eax)
	esi = eax
	eax = -eax
	SCZO = cond(eax)
	C = eax == 0x00000000
	ecx = 0x00458068 + edx * 0x00000004
	edx = edx + eax * 0x00000004
	// succ:  l00404409
l00404409:
	rLoc6 = Mem0[ecx + 0x00000008:real32]
	rLoc6 = rLoc6 - rLoc5
	Mem0[esp + 0x00000010:real32] = rLoc6
	rLoc6 = Mem0[esp + 0x00000010:real32]
	rLoc7 = rLoc7
	FPUF = cond(rLoc7 - rLoc7)
	SCZO = FPUF
	branch Test(GE,FPUF) l0040442D
	// succ:  l00404421 l0040442D
l00404421:
	rLoc7 = rLoc7
	rLoc6 = rLoc6
	v24 = rLoc5
	rLoc5 = rLoc2
	rLoc2 = v24
	Mem0[esp + 0x00000010:real32] = rLoc5
	goto l00404442
	// succ:  l00404442
l0040442D:
	FPUF = cond(rLoc7 - rLoc7)
	SCZO = FPUF
	branch Test(LE,FPUF) l0040446B
	// succ:  l00404436 l0040446B
l00404436:
	rLoc6 = rLoc6
	v28 = rLoc5
	rLoc5 = rLoc4
	rLoc4 = v28
	Mem0[esp + 0x00000010:real32] = rLoc5
	v29 = rLoc5
	rLoc5 = rLoc4
	rLoc4 = v29
	// succ:  l00404440
l00404440:
	v30 = rLoc5
	rLoc5 = rLoc2
	rLoc2 = v30
	// succ:  l00404442
l00404442:
	rLoc6 = Mem0[esp + 0x00000010:real32]
	Mem0[ecx + 0x00000008:real32] = rLoc6
	rLoc6 = Mem0[ecx + 0x00000004:real32]
	rLoc6 = rLoc6 - rLoc2
	Mem0[esp + 0x00000010:real32] = rLoc6
	rLoc6 = Mem0[esp + 0x00000010:real32]
	rLoc7 = rLoc7
	FPUF = cond(rLoc7 - rLoc7)
	SCZO = FPUF
	branch Test(GE,FPUF) l00404471
	// succ:  l00404461 l00404471
l00404461:
	rLoc7 = rLoc7
	rLoc6 = rLoc6
	Mem0[esp + 0x00000010:real32] = rLoc5
	goto l00404484
	// succ:  l00404484
l0040446B:
	Mem0[esp + 0x00000010:real32] = rLoc6
	goto l00404440
	// succ:  l00404440
l00404471:
	FPUF = cond(rLoc7 - rLoc7)
	SCZO = FPUF
	branch Test(LE,FPUF) l004044AC
	// succ:  l0040447A l004044AC
l0040447A:
	rLoc6 = rLoc6
	v45 = rLoc5
	rLoc5 = rLoc4
	rLoc4 = v45
	Mem0[esp + 0x00000010:real32] = rLoc5
	v46 = rLoc5
	rLoc5 = rLoc4
	rLoc4 = v46
	// succ:  l00404484
l00404484:
	rLoc6 = Mem0[esp + 0x00000010:real32]
	Mem0[ecx + 0x00000004:real32] = rLoc6
	rLoc6 = Mem0[ecx:real32]
	rLoc6 = rLoc6 - rLoc2
	Mem0[esp + 0x00000010:real32] = rLoc6
	rLoc6 = Mem0[esp + 0x00000010:real32]
	rLoc7 = rLoc7
	FPUF = cond(rLoc7 - rLoc7)
	SCZO = FPUF
	branch Test(GE,FPUF) l004044B2
	// succ:  l004044A2 l004044B2
l004044A2:
	rLoc7 = rLoc7
	rLoc6 = rLoc6
	Mem0[esp + 0x00000010:real32] = rLoc5
	goto l004044C5
	// succ:  l004044C5
l004044AC:
	Mem0[esp + 0x00000010:real32] = rLoc6
	goto l00404484
	// succ:  l00404484
l004044B2:
	FPUF = cond(rLoc7 - rLoc7)
	SCZO = FPUF
	branch Test(LE,FPUF) l004044ED
	// succ:  l004044BB l004044ED
l004044BB:
	rLoc6 = rLoc6
	v35 = rLoc5
	rLoc5 = rLoc4
	rLoc4 = v35
	Mem0[esp + 0x00000010:real32] = rLoc5
	v36 = rLoc5
	rLoc5 = rLoc4
	rLoc4 = v36
	// succ:  l004044C5
l004044C5:
	rLoc6 = Mem0[esp + 0x00000010:real32]
	Mem0[ecx:real32] = rLoc6
	rLoc6 = Mem0[ecx - 0x00000004:real32]
	rLoc6 = rLoc6 - rLoc2
	Mem0[esp + 0x00000010:real32] = rLoc6
	rLoc6 = Mem0[esp + 0x00000010:real32]
	rLoc7 = rLoc7
	FPUF = cond(rLoc7 - rLoc7)
	SCZO = FPUF
	branch Test(GE,FPUF) l004044F3
	// succ:  l004044E3 l004044F3
l004044E3:
	rLoc7 = rLoc7
	rLoc6 = rLoc6
	Mem0[esp + 0x00000010:real32] = rLoc5
	goto l00404506
	// succ:  l00404506
l004044ED:
	Mem0[esp + 0x00000010:real32] = rLoc6
	goto l004044C5
	// succ:  l004044C5
l004044F3:
	FPUF = cond(rLoc7 - rLoc7)
	SCZO = FPUF
	branch Test(LE,FPUF) l00404529
	// succ:  l004044FC l00404529
l004044FC:
	rLoc6 = rLoc6
	v32 = rLoc5
	rLoc5 = rLoc4
	rLoc4 = v32
	Mem0[esp + 0x00000010:real32] = rLoc5
	v33 = rLoc5
	rLoc5 = rLoc4
	rLoc4 = v33
	// succ:  l00404506
l00404506:
	rLoc6 = Mem0[esp + 0x00000010:real32]
	ecx = ecx - 0x00000010
	SCZO = cond(ecx)
	esi = esi - 0x00000001
	SCZO = cond(esi)
	Mem0[ecx + 0x0000000C:real32] = rLoc6
	v34 = rLoc5
	rLoc5 = rLoc2
	rLoc2 = v34
	branch Test(NE,Z) l00404409
	// succ:  l0040451B l00404409
l0040451B:
	SCZO = cond(edx - ebx)
	branch Test(GE,SO) l00404531
	// succ:  l0040451F l00404531
l0040451F:
	rLoc1 = rLoc5
	// succ:  l00404521
l00404521:
	rLoc1 = rLoc4
	rLoc3 = rLoc3
	rLoc2 = rLoc2
	goto l0040458A
	// succ:  l0040458A
l00404529:
	Mem0[esp + 0x00000010:real32] = rLoc6
	goto l00404506
	// succ:  l00404506
l0040452F:
	v47 = rLoc5
	rLoc5 = rLoc2
	rLoc2 = v47
	// succ:  l00404531
l00404531:
	rLoc6 = Mem0[0x00458070 + edx * 4F:real32]
	rLoc6 = rLoc6 - rLoc5
	Mem0[esp + 0x00000010:real32] = rLoc6
	rLoc6 = Mem0[esp + 0x00000010:real32]
	rLoc7 = rLoc7
	FPUF = cond(rLoc7 - rLoc7)
	SCZO = FPUF
	branch Test(GE,FPUF) l00404559
	// succ:  l0040454D l00404559
l0040454D:
	rLoc7 = rLoc7
	rLoc6 = rLoc6
	v37 = rLoc5
	rLoc5 = rLoc2
	rLoc2 = v37
	Mem0[esp + 0x00000010:real32] = rLoc5
	goto l00404572
	// succ:  l00404572
l00404559:
	FPUF = cond(rLoc7 - rLoc7)
	SCZO = FPUF
	branch Test(LE,FPUF) l004046E1
	// succ:  l00404566 l004046E1
l00404566:
	rLoc6 = rLoc6
	v39 = rLoc5
	rLoc5 = rLoc4
	rLoc4 = v39
	Mem0[esp + 0x00000010:real32] = rLoc5
	v40 = rLoc5
	rLoc5 = rLoc4
	rLoc4 = v40
	// succ:  l00404570
l00404570:
	v41 = rLoc5
	rLoc5 = rLoc2
	rLoc2 = v41
	// succ:  l00404572
l00404572:
	edx = edx - 0x00000001
	SCZO = cond(edx)
	rLoc6 = Mem0[esp + 0x00000010:real32]
	Mem0[0x00458074 + edx * 4F:real32] = rLoc6
	branch Test(NS,S) l0040452F
	// succ:  l00404582 l0040452F
l00404582:
	rLoc1 = rLoc5
	rLoc2 = rLoc4
	rLoc3 = rLoc3
	rLoc1 = rLoc2
	rLoc1 = rLoc5
	rLoc2 = rLoc4
	rLoc3 = rLoc3
	rLoc1 = rLoc2
	// succ:  l0040458A
l0040458A:
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	rLoc1 = rLoc1
	Mem0[esp + 0x0000001C:word32] = edi
	// succ:  l00404592
l00404592:
	rLoc1 = Mem0[0x00458060 + edi * 4F:real32]
	Mem0[esp + 0x00000010:real32] = rLoc1
	rLoc1 = (real64) Mem0[esp + 0x0000001C:int32]
	Mem0[esp + 0x00000020:real64] = rLoc1
	rLoc2 = Mem0[esp + 0x00000010:real32]
	Mem0[esp + 0x00000028:real64] = rLoc2
	rLoc3 = rLoc2
	rLoc3 = rLoc3 * Mem0[0x0041AE20:real64]
	v25 = rLoc3
	rLoc3 = rLoc1
	rLoc1 = v25
	rLoc3 = rLoc3 + Mem0[0x0041AD80:real64]
	rLoc4 = rLoc3
	rLoc4 = rLoc4 / Mem0[0x0041AE18:real64]
	rLoc3 = rLoc3 * rLoc4
	rLoc3 = rLoc3 / Mem0[0x0041AE10:real64]
	rLoc1 = rLoc1 - rLoc3
	v26 = rLoc2
	rLoc2 = rLoc1
	rLoc1 = v26
	Mem0[esp + 0x0000001C:real32] = rLoc2
	rLoc2 = Mem0[esp + 0x0000001C:real32]
	Mem0[esp + 0x00000030:real64] = rLoc2
	rLoc1 = rLoc1 / Mem0[0x0041AE08:real64]
	call _CIsin (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc2 = Mem0[0x0041AE38:real64]
	rLoc2 = rLoc2 - Mem0[esp + 0x00000020:real64]
	rLoc2 = rLoc2 * Mem0[0x0041AD18:real64]
	rLoc2 = rLoc2 / Mem0[0x0041AE00:real64]
	rLoc1 = rLoc1 * rLoc2
	Mem0[esp + 0x00000038:real64] = rLoc1
	rLoc1 = Mem0[esp + 0x00000030:real64]
	call _CIsin (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[0x0041ADF8:real64]
	rLoc1 = rLoc1 + Mem0[esp + 0x00000038:real64]
	Mem0[esp + 0x00000010:real32] = rLoc1
	rLoc1 = Mem0[esp + 0x00000028:real64]
	rLoc1 = rLoc1 / Mem0[0x0041ADF0:real64]
	call _CIcos (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc2 = Mem0[0x0041AD80:real64]
	rLoc2 = rLoc2 - Mem0[esp + 0x00000020:real64]
	rLoc2 = rLoc2 * Mem0[0x0041AD18:real64]
	rLoc2 = rLoc2 / Mem0[0x0041ADE8:real64]
	rLoc1 = rLoc1 * rLoc2
	Mem0[esp + 0x00000028:real64] = rLoc1
	rLoc1 = Mem0[esp + 0x00000030:real64]
	call _CIcos (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[0x0041ADF8:real64]
	SCZO = cond(Mem0[0x00468270 + edi * 0x00000004:word32] - ebx)
	rLoc1 = rLoc1 + Mem0[esp + 0x00000028:real64]
	Mem0[esp + 0x0000001C:real32] = rLoc1
	rLoc1 = Mem0[esp + 0x0000001C:real32]
	rLoc1 = rLoc1 * Mem0[0x0041ADE0:real64]
	rLoc1 = rLoc1 + Mem0[0x0041ADD8:real64]
	Mem0[esp + 0x0000001C:real32] = rLoc1
	rLoc1 = Mem0[esp + 0x0000001C:real32]
	branch Test(EQ,Z) l00404685
	// succ:  l0040467E l00404685
l0040467E:
	Mem0[0x00478450 + edi * 4F:real32] = rLoc1
	// succ:  l00404685
l00404685:
	Mem0[esp + 0x00000038:real64] = rLoc1
	v48 = Mem0[0x00478450 + edi * 4F:real32] - rLoc1
	Mem0[0x00478450 + edi * 4F:real32] = v48
	rLoc1 = rLoc1 * Mem0[0x0041ACD8:real64]
	Mem0[esp + 0x00000030:real32] = rLoc1
	rLoc1 = Mem0[esp + 0x00000010:real32]
	Mem0[esp + 0x00000028:real64] = rLoc1
	rLoc1 = rLoc1 + Mem0[0x0041AE38:real64]
	Mem0[esp + 0x00000040:real64] = rLoc1
	rLoc1 = rLoc1 * Mem0[0x0041ADE8:real64]
	Mem0[esp + 0x00000020:real32] = rLoc1
	rLoc1 = Mem0[0x00458070 + edi * 4F:real32]
	Mem0[esp + 0x00000010:real32] = rLoc1
	rLoc1 = Mem0[esp + 0x00000010:real32]
	rLoc2 = rLoc2
	rLoc3 = 1
	FPUF = cond(rLoc3 - rLoc3)
	SCZO = FPUF
	branch Test(LE,FPUF) l00404784
	// succ:  l004046D6 l00404784
l004046D6:
	rLoc2 = rLoc3
	rLoc1 = rLoc2
	rLoc2 = 1
	goto l0040479B
	// succ:  l0040479B
l004046E1:
	Mem0[esp + 0x00000010:real32] = rLoc6
	goto l00404570
	// succ:  l00404570
l004046EA:
	eax = 0x00000004
	ecx = esi
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	call fn004022A0 (retsize: 4; FPU: 4;)
	esi = eax
	SCZO = cond(esi - ebx)
	branch Test(LE,SZO) l00404521
	// succ:  l00404702 l00404521
l00404702:
	rLoc5 = Mem0[0x0041AE28:real64]
	ecx = esi
	eax = 0x00000001
	edi = 0x00468270
	// succ:  l00404714
l00404714:
	branch ecx == 0x00000000 l00404716
	// succ:  l00404714_1 l00404716
l00404714_1:
	Mem0[edi:word32] = eax
	edi = edi + 0x00000004
	ecx = ecx - 0x00000001
	goto l00404714
	// succ:  l00404714
l00404716:
	goto l0040471A
	// succ:  l0040471A
l00404718:
	v31 = rLoc5
	rLoc5 = rLoc2
	rLoc2 = v31
	// succ:  l0040471A
l0040471A:
	rLoc6 = Mem0[0x00458070 + edx * 4F:real32]
	rLoc6 = rLoc6 + rLoc5
	Mem0[esp + 0x0000001C:real32] = rLoc6
	rLoc6 = Mem0[esp + 0x0000001C:real32]
	rLoc7 = rLoc7
	FPUF = cond(rLoc7 - rLoc7)
	SCZO = FPUF
	branch Test(GE,FPUF) l00404742
	// succ:  l00404736 l00404742
l00404736:
	rLoc7 = rLoc7
	rLoc6 = rLoc6
	v27 = rLoc5
	rLoc5 = rLoc2
	rLoc2 = v27
	Mem0[esp + 0x00000010:real32] = rLoc5
	goto l00404757
	// succ:  l00404757
l00404742:
	FPUF = cond(rLoc7 - rLoc7)
	SCZO = FPUF
	branch Test(LE,FPUF) l0040477E
	// succ:  l0040474B l0040477E
l0040474B:
	rLoc6 = rLoc6
	v42 = rLoc5
	rLoc5 = rLoc4
	rLoc4 = v42
	Mem0[esp + 0x00000010:real32] = rLoc5
	v43 = rLoc5
	rLoc5 = rLoc4
	rLoc4 = v43
	// succ:  l00404755
l00404755:
	v44 = rLoc5
	rLoc5 = rLoc2
	rLoc2 = v44
	// succ:  l00404757
l00404757:
	rLoc6 = Mem0[esp + 0x00000010:real32]
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SCZO = cond(edx - esi)
	Mem0[0x0045806C + edx * 4F:real32] = rLoc6
	rLoc6 = Mem0[0x0045805C + edx * 4F:real32]
	rLoc6 = rLoc6 + rLoc1
	Mem0[0x0045805C + edx * 4F:real32] = rLoc6
	branch Test(LT,SO) l00404718
	// succ:  l00404779 l00404718
l00404779:
	goto l00404582
	// succ:  l00404582
l0040477E:
	Mem0[esp + 0x00000010:real32] = rLoc6
	goto l00404755
	// succ:  l00404755
l00404784:
	v49 = rLoc3
	rLoc3 = rLoc2
	rLoc2 = v49
	FPUF = cond(rLoc3 - Mem0[0x0041AE30:real64])
	SCZO = FPUF
	branch Test(LE,FPUF) l00404799
	// succ:  l00404793 l00404799
l00404793:
	rLoc1 = rLoc2
	rLoc2 = 0
	goto l0040479B
	// succ:  l0040479B
l00404799:
	v64 = rLoc2
	rLoc2 = rLoc1
	rLoc1 = v64
	// succ:  l0040479B
l0040479B:
	Mem0[esp + 0x00000010:real32] = rLoc2
	rLoc2 = Mem0[esp + 0x00000030:real32]
	rLoc2 = rLoc2 * rLoc2
	rLoc1 = rLoc1 + rLoc2
	call _CIsqrt (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc2 = Mem0[esp + 0x00000010:real32]
	rLoc2 = rLoc2 * Mem0[esp + 0x00000020:real32]
	Mem0[esp + 0x00000020:real32] = rLoc2
	rLoc1 = rLoc1 * Mem0[esp + 0x00000020:real32]
	Mem0[esp + 0x00000020:real32] = rLoc1
	rLoc1 = Mem0[esp + 0x00000020:real32]
	rLoc2 = rLoc2
	Mem0[esp + 0x00000050:real64] = rLoc2
	rLoc3 = Mem0[0x0041ADD0:real64]
	FPUF = cond(rLoc3 - rLoc3)
	SCZO = FPUF
	branch Test(LT,FPUF) l0040496F
	// succ:  l004047DD l0040496F
l004047DD:
	rLoc3 = Mem0[esp + 0x0000001C:real32]
	Mem0[0x00478450 + edi * 4F:real32] = rLoc3
	rLoc3 = Mem0[0x0041ADC8:real32]
	FPUF = cond(rLoc3 - rLoc3)
	ax = (word16) FPUF << 8
	rLoc1 = rLoc2
	SZO = cond(ah & 0x41)
	C = false
	branch Test(NE,Z) l00404971
	// succ:  l004047FD l00404971
l004047FD:
	rLoc2 = Mem0[esp + 0x00000038:real64]
	rLoc3 = rLoc3
	rLoc3 = rLoc3 - rLoc1
	call fn00412520 (retsize: 4; FPU: 3;)
	rLoc3 = rLoc2
	rLoc3 = rLoc3 + rLoc2
	esi = eax
	Mem0[esp + 0x00000010:word32] = esi
	Mem0[esp + 0x00000048:real64] = rLoc3
	rLoc4 = (real64) Mem0[esp + 0x00000010:int32]
	FPUF = cond(rLoc4 - rLoc4)
	ax = (word16) FPUF << 8
	rLoc3 = rLoc4
	SZO = cond(ah & 0x05)
	C = false
	branch Test(PE,P) l0040496D
	// succ:  l0040482B l0040496D
l0040482B:
	v53 = rLoc3
	rLoc3 = rLoc1
	rLoc1 = v53
	rLoc3 = rLoc3 + Mem0[0x0041ACD0:real64]
	rLoc3 = rLoc3 * rLoc3
	Mem0[esp + 0x00000030:real64] = rLoc3
	rLoc3 = Mem0[esp + 0x00000028:real64]
	rLoc3 = rLoc3 * Mem0[0x0041AD78:real64]
	rLoc3 = rLoc3 + Mem0[0x0041ADC0:real64]
	Mem0[esp + 0x00000028:real64] = rLoc3
	goto l00404853
	// succ:  l00404853
l0040484F:
	rLoc2 = Mem0[esp + 0x00000038:real64]
	// succ:  l00404853
l00404853:
	rLoc1 = rLoc1 - rLoc2
	Mem0[esp + 0x00000010:real64] = rLoc1
	rLoc1 = rLoc1 * rLoc1
	v54 = Mem0[esp + 0x00000030:real64] - rLoc1
	Mem0[esp + 0x00000030:real64] = v54
	call _CIsqrt (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[0x0041ACD8:real64]
	ecx = (word32) Mem0[esp + 0x000001E8 + esi:byte]
	Mem0[esp + 0x00000020:word32] = ecx
	rLoc1 = rLoc1 + Mem0[esp + 0x00000028:real64]
	Mem0[esp + 0x0000001C:real32] = rLoc1
	rLoc1 = (real64) Mem0[esp + 0x00000020:int32]
	rLoc2 = Mem0[esp + 0x0000001C:real32]
	FPUF = cond(rLoc2 - rLoc1)
	SCZO = FPUF
	branch Test(GE,FPUF) l0040494F
	// succ:  l00404893 l0040494F
l00404893:
	rLoc1 = Mem0[esp + 0x00000010:real64]
	rLoc1 = rLoc1 / Mem0[esp + 0x00000050:real64]
	rLoc1 = rLoc1 * Mem0[0x0041ADB8:real64]
	rLoc1 = rLoc1 * Mem0[0x0041AC88:real64]
	call _CIcos (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc2 = Mem0[0x0041AD38:real64]
	rLoc2 = rLoc2 * rLoc1
	v55 = rLoc2
	rLoc2 = rLoc1
	rLoc1 = v55
	rLoc2 = rLoc2 * Mem0[esp + 0x00000040:real64]
	rLoc2 = rLoc2 * Mem0[0x0041AD00:real64]
	Mem0[esp + 0x00000020:real32] = rLoc2
	rLoc2 = Mem0[esp + 0x00000020:real32]
	rLoc3 = rLoc3
	FPUF = cond(rLoc3 - rLoc3)
	ax = (word16) FPUF << 8
	rLoc1 = rLoc3
	SZO = cond(ah & 0x41)
	C = false
	branch Test(NE,Z) l004048E1
	// succ:  l004048D5 l004048E1
l004048D5:
	rLoc1 = rLoc2
	rLoc1 = rLoc1
	rLoc1 = Mem0[0x0041ADB0:real32]
	goto l004048F4
	// succ:  l004048F4
l004048E1:
	v58 = rLoc2
	rLoc2 = rLoc1
	rLoc1 = v58
	FPUF = cond(rLoc2 - Mem0[0x0041AE30:real64])
	SCZO = FPUF
	branch Test(LE,FPUF) l004048F4
	// succ:  l004048F0 l004048F4
l004048F0:
	rLoc1 = rLoc1
	rLoc1 = 0
	// succ:  l004048F4
l004048F4:
	Mem0[esp + 0x00000010:real32] = rLoc1
	rLoc1 = Mem0[esp + 0x00000010:real32]
	Mem0[esp + 0x00000010:word16] = __fstcw()
	eax = (word32) Mem0[esp + 0x00000010:word16]
	eax = eax | 0x00000C00
	SZO = cond(eax)
	C = false
	Mem0[esp + 0x00000020:word32] = eax
	__fldcw(Mem0[esp + 0x00000020:word16])
	Mem0[esp + 0x00000020:int32] = (int32) rLoc1
	dl = Mem0[esp + 0x00000020:byte]
	Mem0[esp + 0x00000058 + esi:byte] = dl
	__fldcw(Mem0[esp + 0x00000010:word16])
	rLoc1 = Mem0[esp + 0x0000001C:real32]
	Mem0[esp + 0x00000010:word16] = __fstcw()
	eax = (word32) Mem0[esp + 0x00000010:word16]
	eax = eax | 0x00000C00
	SZO = cond(eax)
	C = false
	Mem0[esp + 0x00000020:word32] = eax
	__fldcw(Mem0[esp + 0x00000020:word16])
	Mem0[esp + 0x00000020:int32] = (int32) rLoc1
	al = Mem0[esp + 0x00000020:byte]
	Mem0[esp + 0x000001E8 + esi:byte] = al
	__fldcw(Mem0[esp + 0x00000010:word16])
	// succ:  l0040494F
l0040494F:
	esi = esi + 0x00000001
	SCZO = cond(esi)
	Mem0[esp + 0x00000010:word32] = esi
	rLoc1 = (real64) Mem0[esp + 0x00000010:int32]
	rLoc2 = Mem0[esp + 0x00000048:real64]
	FPUF = cond(rLoc2 - rLoc2)
	SCZO = FPUF
	branch Test(LT,FPUF) l0040484F
	// succ:  l0040496B l0040484F
l0040496B:
	goto l00404971
	// succ:  l00404971
l0040496D:
	rLoc3 = rLoc3
	// succ:  l0040496F
l0040496F:
	rLoc1 = rLoc2
	// succ:  l00404971
l00404971:
	edi = edi + 0x00000001
	SCZO = cond(edi)
	rLoc1 = rLoc1
	SCZO = cond(edi - 0x00000004)
	Mem0[esp + 0x0000001C:word32] = edi
	branch Test(LT,SO) l00404592
	// succ:  l00404983 l00404592
l00404983:
	SCZO = cond(Mem0[0x0041CEB8:word32] - ebx)
	Mem0[0x0041C368:word32] = ebx
	branch Test(EQ,Z) l004049A5
	// succ:  l00404991 l004049A5
l00404991:
	Mem0[0x00478520:byte] = bl
	Mem0[0x00478521:byte] = 0x3F
	Mem0[0x00478522:byte] = 0x3F
	// succ:  l004049A5
l004049A5:
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	SCZO = cond(Mem0[ebp + 0x00000004:word32] - ebx)
	branch Test(LE,SZO) l00404A06
	// succ:  l004049AC l00404A06
l004049AC:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	edi = edi
	// succ:  l004049B0
l004049B0:
	edi = eax + 0x00468280
	esi = edi + 0x00000001
	ecx = 0x00000052
	// succ:  l004049BE
l004049BE:
	branch ecx == 0x00000000 l004049C0
	// succ:  l004049BE_1 l004049C0
l004049BE_1:
	v59 = Mem0[esi:word32]
	Mem0[edi:word32] = v59
	esi = esi + 0x00000004
	edi = edi + 0x00000004
	ecx = ecx - 0x00000001
	goto l004049BE
	// succ:  l004049BE
l004049C0:
	v60 = Mem0[esi:byte]
	Mem0[edi:byte] = v60
	esi = esi + 0x00000001
	edi = edi + 0x00000001
	esi = eax + 0x004580A1
	edi = eax + 0x004580A0
	ecx = 0x00000052
	// succ:  l004049D2
l004049D2:
	branch ecx == 0x00000000 l004049D4
	// succ:  l004049D2_1 l004049D4
l004049D2_1:
	v61 = Mem0[esi:word32]
	Mem0[edi:word32] = v61
	esi = esi + 0x00000004
	edi = edi + 0x00000004
	ecx = ecx - 0x00000001
	goto l004049D2
	// succ:  l004049D2
l004049D4:
	ecx = (word32) Mem0[esp + 0x00000059 + edx * 0x02:byte]
	v62 = Mem0[esi:byte]
	Mem0[edi:byte] = v62
	esi = esi + 0x00000001
	edi = edi + 0x00000001
	esi = (word32) Mem0[esp + 0x00000058 + edx * 0x02:byte]
	ecx = ecx + esi
	SCZO = cond(ecx)
	ecx = ecx >> 0x00000001
	SCZO = cond(ecx)
	Mem0[eax + 0x004683C9:byte] = cl
	cl = Mem0[esp + 0x000001E8 + edx * 0x02:byte]
	cl = cl & 0x80
	SZO = cond(cl)
	C = false
	Mem0[eax + 0x004581E9:byte] = cl
	edx = edx + 0x00000001
	SCZO = cond(edx)
	eax = eax + 0x0000014A
	SCZO = cond(eax)
	SCZO = cond(edx - Mem0[ebp + 0x00000004:word32])
	branch Test(LT,SO) l004049B0
	// succ:  l00404A06 l004049B0
l00404A06:
	SCZO = cond(Mem0[0x0041CEB8:word32] - ebx)
	branch Test(EQ,Z) l00404A21
	SCZO = cond(Mem0[0x0041CEB8:word32] - ebx)
	branch Test(EQ,Z) l00404A21
	// succ:  l00404A0E l00404A21
l00404A0E:
	Mem0[0x00478520:byte] = bl
	Mem0[0x00478521:byte] = 0x3F
	Mem0[0x00478522:byte] = bl
	Mem0[0x00478520:byte] = bl
	Mem0[0x00478521:byte] = 0x3F
	Mem0[0x00478522:byte] = bl
	// succ:  l00404A21
l00404A21:
	edx = Mem0[esp + 0x0000038C:word32]
	eax = Mem0[ebp + 0x0000000C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn004041E0 (retsize: 4;)
	ecx = Mem0[esp + 0x00000384:word32]
	esp = esp + 0x00000008
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[0x00478520:byte] = bl
	Mem0[0x00478521:byte] = bl
	Mem0[0x00478522:byte] = bl
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	Mem0[0x00478508:word32] = 0x00000001
	call fn00412237 (retsize: 4;)
	esp = esp + 0x00000370
	SCZO = cond(esp)
	return
	// succ:  fn004042F0_exit
fn004042F0_exit:


// fn00404A70
// Return size: 4
void fn00404A70()
fn00404A70_entry:
	// succ:  l00404A70
l00404A70:
	esp = fp
	esp = esp - 0x00000020
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	Mem0[esp + 0x00000008:word32] = esi
	// succ:  l00404A7A
l00404A7A:
	rLoc1 = (real64) Mem0[esp + 0x00000008:int32]
	Mem0[esp + 0x00000018:real64] = rLoc1
	rLoc1 = rLoc1 / Mem0[0x0041AC90:real64]
	rLoc1 = rLoc1 + rLoc1
	rLoc1 = rLoc1 * Mem0[0x0041AC88:real64]
	call _CIsin (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[0x0041AC80:real64]
	Mem0[esp + 0x00000010:real64] = rLoc1
	rLoc1 = Mem0[esp + 0x00000018:real64]
	rLoc1 = rLoc1 / Mem0[0x0041AC78:real64]
	call _CIcos (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[0x0041AC70:real64]
	rLoc1 = rLoc1 + Mem0[esp + 0x00000010:real64]
	Mem0[esp + 0x00000008:real64] = rLoc1
	rLoc1 = Mem0[esp + 0x00000018:real64]
	rLoc1 = rLoc1 / Mem0[0x0041AC68:real64]
	rLoc1 = rLoc1 + rLoc1
	rLoc1 = rLoc1 * Mem0[0x0041AC88:real64]
	call _CIsin (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[0x0041AC60:real64]
	Mem0[esp + 0x00000010:real64] = rLoc1
	rLoc1 = Mem0[esp + 0x00000018:real64]
	rLoc1 = rLoc1 / Mem0[0x0041AC58:real64]
	call _CIcos (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[esp + 0x00000010:real64]
	rLoc1 = rLoc1 + Mem0[esp + 0x00000008:real64]
	Mem0[esp + 0x00000008:word16] = __fstcw()
	eax = (word32) Mem0[esp + 0x00000008:word16]
	rLoc1 = rLoc1 + Mem0[0x0041AC50:real64]
	eax = eax | 0x00000C00
	SZO = cond(eax)
	C = false
	Mem0[esp + 0x00000010:word32] = eax
	__fldcw(Mem0[esp + 0x00000010:word16])
	Mem0[esp + 0x00000010:int32] = (int32) rLoc1
	al = Mem0[esp + 0x00000010:byte]
	Mem0[esi + 0x0042CF00:byte] = al
	__fldcw(Mem0[esp + 0x00000008:word16])
	rLoc1 = Mem0[esp + 0x00000018:real64]
	rLoc1 = rLoc1 / Mem0[0x0041AC48:real64]
	rLoc1 = rLoc1 + rLoc1
	rLoc1 = rLoc1 * Mem0[0x0041AC88:real64]
	call _CIsin (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[0x0041AC80:real64]
	Mem0[esp + 0x00000010:real64] = rLoc1
	rLoc1 = Mem0[esp + 0x00000018:real64]
	rLoc1 = rLoc1 / Mem0[0x0041AC40:real64]
	call _CIcos (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[0x0041AC70:real64]
	rLoc1 = rLoc1 + Mem0[esp + 0x00000010:real64]
	Mem0[esp + 0x00000008:real64] = rLoc1
	rLoc1 = Mem0[esp + 0x00000018:real64]
	rLoc1 = rLoc1 / Mem0[0x0041AC38:real64]
	rLoc1 = rLoc1 + rLoc1
	rLoc1 = rLoc1 * Mem0[0x0041AC88:real64]
	call _CIsin (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[0x0041AC60:real64]
	Mem0[esp + 0x00000010:real64] = rLoc1
	rLoc1 = Mem0[esp + 0x00000018:real64]
	rLoc1 = rLoc1 / Mem0[0x0041AC30:real64]
	call _CIcos (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[esp + 0x00000010:real64]
	rLoc1 = rLoc1 + Mem0[esp + 0x00000008:real64]
	Mem0[esp + 0x00000008:word16] = __fstcw()
	eax = (word32) Mem0[esp + 0x00000008:word16]
	rLoc1 = rLoc1 + Mem0[0x0041AC50:real64]
	eax = eax | 0x00000C00
	SZO = cond(eax)
	C = false
	Mem0[esp + 0x00000010:word32] = eax
	__fldcw(Mem0[esp + 0x00000010:word16])
	Mem0[esp + 0x00000010:int32] = (int32) rLoc1
	cl = Mem0[esp + 0x00000010:byte]
	Mem0[esi + 0x0041CF00:byte] = cl
	__fldcw(Mem0[esp + 0x00000008:word16])
	rLoc1 = Mem0[esp + 0x00000018:real64]
	rLoc1 = rLoc1 / Mem0[0x0041AC28:real64]
	rLoc1 = rLoc1 + rLoc1
	rLoc1 = rLoc1 * Mem0[0x0041AC88:real64]
	call _CIsin (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[0x0041AC80:real64]
	Mem0[esp + 0x00000010:real64] = rLoc1
	rLoc1 = Mem0[esp + 0x00000018:real64]
	rLoc1 = rLoc1 / Mem0[0x0041AC20:real64]
	call _CIcos (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[0x0041AC70:real64]
	rLoc1 = rLoc1 + Mem0[esp + 0x00000010:real64]
	Mem0[esp + 0x00000008:real64] = rLoc1
	rLoc1 = Mem0[esp + 0x00000018:real64]
	rLoc1 = rLoc1 / Mem0[0x0041AC18:real64]
	rLoc1 = rLoc1 + rLoc1
	rLoc1 = rLoc1 * Mem0[0x0041AC88:real64]
	call _CIsin (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[0x0041AC60:real64]
	Mem0[esp + 0x00000010:real64] = rLoc1
	rLoc1 = Mem0[esp + 0x00000018:real64]
	rLoc1 = rLoc1 / Mem0[0x0041AC10:real64]
	call _CIcos (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[esp + 0x00000010:real64]
	esi = esi + 0x00000001
	SCZO = cond(esi)
	rLoc1 = rLoc1 + Mem0[esp + 0x00000008:real64]
	Mem0[esp + 0x00000008:word16] = __fstcw()
	eax = (word32) Mem0[esp + 0x00000008:word16]
	rLoc1 = rLoc1 + Mem0[0x0041AC50:real64]
	eax = eax | 0x00000C00
	SZO = cond(eax)
	C = false
	SCZO = cond(esi - 0x00010000)
	Mem0[esp + 0x00000010:word32] = eax
	__fldcw(Mem0[esp + 0x00000010:word16])
	Mem0[esp + 0x00000010:int32] = (int32) rLoc1
	dl = Mem0[esp + 0x00000010:byte]
	Mem0[esi + 0x0044805F:byte] = dl
	__fldcw(Mem0[esp + 0x00000008:word16])
	Mem0[esp + 0x00000008:word32] = esi
	branch Test(LT,SO) l00404A7A
	// succ:  l00404C7D l00404A7A
l00404C7D:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000020
	SCZO = cond(esp)
	return
	// succ:  fn00404A70_exit
fn00404A70_exit:


// fn00404C90
// Return size: 4
void fn00404C90()
fn00404C90_entry:
	// succ:  l00404C90
l00404C90:
	esp = fp
	esp = esp - 0x00000030
	SCZO = cond(esp)
	rLoc1 = (real64) Mem0[0x0041CEC8:int32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	rLoc1 = rLoc1 / Mem0[0x0041AC08:real64]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	Mem0[esp + 0x00000010:word32] = 0x00000000
	call _CIsin (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc2 = Mem0[0x0041AC00:real64]
	rLoc2 = rLoc2 * rLoc1
	rLoc1 = rLoc1 + rLoc2
	rLoc1 = rLoc1 * Mem0[esp + 0x00000044:real32]
	call fn00412520 (retsize: 4; FPU: 1;)
	rLoc1 = (real64) Mem0[0x0041CEC0:int32]
	rLoc2 = Mem0[0x0041ABF8:real64]
	ecx = eax + 0x0042CF00
	edx = eax + 0x0042CF02
	rLoc2 = rLoc1 / rLoc2
	Mem0[esp + 0x00000020:word32] = ecx
	Mem0[esp + 0x0000001C:word32] = edx
	Mem0[esp + 0x00000014:word32] = 0x0043D064
	edi = 0xFFFF7748
	Mem0[esp + 0x00000030:real64] = rLoc2
	rLoc1 = rLoc1 / Mem0[0x0041ABF0:real64]
	Mem0[esp + 0x00000038:real64] = rLoc1
	// succ:  l00404D00
l00404D00:
	rLoc1 = (real64) Mem0[esp + 0x00000010:int32]
	Mem0[esp + 0x00000028:real64] = rLoc1
	rLoc1 = rLoc1 / Mem0[0x0041ABE8:real64]
	rLoc1 = rLoc1 + Mem0[esp + 0x00000030:real64]
	call _CIsin (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[0x0041ABE0:real64]
	rLoc1 = rLoc1 + Mem0[0x0041ABD8:real64]
	call fn00412520 (retsize: 4; FPU: 1;)
	rLoc1 = Mem0[esp + 0x00000028:real64]
	rLoc1 = rLoc1 / Mem0[0x0041ABD0:real64]
	ebx = eax + 0x0041CF00
	rLoc1 = rLoc1 + Mem0[esp + 0x00000038:real64]
	call _CIsin (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 * Mem0[0x0041ABC8:real64]
	rLoc1 = rLoc1 + Mem0[0x0041ABC0:real64]
	call fn00412520 (retsize: 4; FPU: 1;)
	esi = Mem0[esp + 0x0000001C:word32]
	ebp = eax + 0x00448060
	ebp = ebp - ebx
	SCZO = cond(ebp)
	Mem0[esp + 0x00000028:word32] = ebp
	ebp = Mem0[esp + 0x00000020:word32]
	ebp = ebp - ebx
	SCZO = cond(ebp)
	edx = eax + 0x00448062
	eax = Mem0[esp + 0x00000014:word32]
	ecx = ebx
	Mem0[esp + 0x00000024:word32] = ebp
	Mem0[esp + 0x00000018:word32] = 0x00000040
	goto l00404D86
	// succ:  l00404D86
l00404D82:
	ebp = Mem0[esp + 0x00000024:word32]
	// succ:  l00404D86
l00404D86:
	ebx = (word32) Mem0[ecx + ebp:byte]
	ebp = Mem0[esp + 0x00000028:word32]
	ebp = (word32) Mem0[ecx + ebp:byte]
	ebx = ebx + ebp
	SCZO = cond(ebx)
	ebp = (word32) Mem0[ecx:byte]
	ebx = ebx + ebp
	SCZO = cond(ebx)
	ebp = (word32) Mem0[esi - 0x00000001:byte]
	ebx = ebx << 0x00000007
	SCZO = cond(ebx)
	ebx = ebx + edi
	SCZO = cond(ebx)
	Mem0[eax - 0x00000004:word32] = ebx
	ebx = (word32) Mem0[edx - 0x00000001:byte]
	ebx = ebx + ebp
	SCZO = cond(ebx)
	ebp = (word32) Mem0[ecx + 0x00000001:byte]
	ebx = ebx + ebp
	SCZO = cond(ebx)
	ebp = (word32) Mem0[esi:byte]
	ebx = ebx << 0x00000007
	SCZO = cond(ebx)
	ebx = ebx + edi
	SCZO = cond(ebx)
	Mem0[eax:word32] = ebx
	ebx = (word32) Mem0[ecx + 0x00000002:byte]
	ebx = ebx + ebp
	SCZO = cond(ebx)
	ebp = (word32) Mem0[edx:byte]
	ebx = ebx + ebp
	SCZO = cond(ebx)
	ebp = (word32) Mem0[esi + 0x00000001:byte]
	ebx = ebx << 0x00000007
	SCZO = cond(ebx)
	ebx = ebx + edi
	SCZO = cond(ebx)
	Mem0[eax + 0x00000004:word32] = ebx
	ebx = (word32) Mem0[edx + 0x00000001:byte]
	ebx = ebx + ebp
	SCZO = cond(ebx)
	ebp = (word32) Mem0[ecx + 0x00000003:byte]
	ebx = ebx + ebp
	SCZO = cond(ebx)
	ebp = (word32) Mem0[esi + 0x00000002:byte]
	ebx = ebx << 0x00000007
	SCZO = cond(ebx)
	ebx = ebx + edi
	SCZO = cond(ebx)
	Mem0[eax + 0x00000008:word32] = ebx
	ebx = (word32) Mem0[edx + 0x00000002:byte]
	ebx = ebx + ebp
	SCZO = cond(ebx)
	ebp = (word32) Mem0[ecx + 0x00000004:byte]
	ebx = ebx + ebp
	SCZO = cond(ebx)
	ebx = ebx << 0x00000007
	SCZO = cond(ebx)
	ebx = ebx + edi
	SCZO = cond(ebx)
	Mem0[eax + 0x0000000C:word32] = ebx
	ebx = 0x00000001
	eax = eax + 0x00000014
	SCZO = cond(eax)
	edx = edx + 0x00000005
	SCZO = cond(edx)
	ecx = ecx + 0x00000005
	SCZO = cond(ecx)
	esi = esi + 0x00000005
	SCZO = cond(esi)
	v13 = Mem0[esp + 0x00000018:word32] - ebx
	Mem0[esp + 0x00000018:word32] = v13
	SCZO = cond(v13)
	branch Test(NE,Z) l00404D82
	// succ:  l00404E19 l00404D82
l00404E19:
	v15 = Mem0[esp + 0x00000010:word32] + ebx
	Mem0[esp + 0x00000010:word32] = v15
	SCZO = cond(v15)
	v16 = Mem0[esp + 0x00000014:word32] + 0x00001000
	Mem0[esp + 0x00000014:word32] = v16
	SCZO = cond(v16)
	edi = edi + 0x00000FA0
	SCZO = cond(edi)
	SCZO = cond(edi - 0x00001388)
	branch Test(LT,SO) l00404D00
	// succ:  l00404E37 l00404D00
l00404E37:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000030
	SCZO = cond(esp)
	return
	// succ:  fn00404C90_exit
fn00404C90_exit:


// fn00404E40
// Return size: 4
void fn00404E40()
fn00404E40_entry:
	// succ:  l00404E40
l00404E40:
	esp = fp
	esp = esp - 0x00000018
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	ebp = 0x0043E060
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	Mem0[esp + 0x00000014:word32] = 0x00000000
	Mem0[esp + 0x00000024:word32] = ebp
	// succ:  l00404E60
l00404E60:
	ecx = Mem0[ebp + 0xFFFFF000:word32]
	esi = 0x00000200
	Mem0[esp + 0x0000001C:word32] = 0x00000000
	Mem0[esp + 0x00000020:word32] = esi
	Mem0[esp + 0x00000010:word32] = ebp
	// succ:  l00404E80
l00404E80:
	eax = Mem0[esp + 0x00000010:word32]
	edi = Mem0[eax:word32]
	eax = edi
	eax = eax - ecx
	SCZO = cond(eax)
	edx_eax = (int64) eax
	edx = edx & 0x00000007
	SZO = cond(edx)
	C = false
	eax = eax + edx
	SCZO = cond(eax)
	ebx = eax
	ebx = ebx >> 0x00000003
	SCZO = cond(ebx)
	ebx = ebx - esi
	SCZO = cond(ebx)
	ebx = ebx + 0x00001500
	SCZO = cond(ebx)
	SCZO = cond(ecx - edi)
	Mem0[esp + 0x00000018:word32] = edi
	branch Test(GE,SO) l00404F38
	// succ:  l00404EA9 l00404F38
l00404EA9:
	eax = ecx
	edx_eax = (int64) eax
	edx = edx & 0x000000FF
	SZO = cond(edx)
	C = false
	eax = eax + edx
	SCZO = cond(eax)
	eax = eax >> 0x00000008
	SCZO = cond(eax)
	esi = 0x000000C8
	esi = esi - eax
	SCZO = cond(esi)
	eax = edi
	edx_eax = (int64) eax
	edx = edx & 0x000000FF
	SZO = cond(edx)
	C = false
	eax = eax + edx
	SCZO = cond(eax)
	ecx = eax
	ecx = ecx >> 0x00000008
	SCZO = cond(ecx)
	eax = 0x000000C8
	eax = eax - ecx
	SCZO = cond(eax)
	ecx = eax + eax * 0x00000004
	ecx = ecx << 0x00000006
	SCZO = cond(ecx)
	ecx = ecx + Mem0[0x0043D040:word32]
	SCZO = cond(ecx)
	ebp = ebx
	ecx = ecx + Mem0[esp + 0x00000014:word32]
	SCZO = cond(ecx)
	SCZO = cond(esi - eax)
	branch Test(LE,SZO) l00404F2E
	// succ:  l00404EEB l00404F2E
l00404EEB:
	SCZO = cond(eax - 0x000000B4)
	branch Test(GT,SZO) l00404F2E
	// succ:  l00404EF2 l00404F2E
l00404EF2:
	SCZO = cond(esi - 0x000000B4)
	edi = 0x000000B4
	branch Test(GT,SZO) l00404F01
	// succ:  l00404EFF l00404F01
l00404EFF:
	edi = esi
	// succ:  l00404F01
l00404F01:
	esi = esi - eax
	SCZO = cond(esi)
	edi = edi - eax
	SCZO = cond(edi)
	eax = Mem0[esp + 0x0000001C:word32]
	eax = eax - ebx
	SCZO = cond(eax)
	edx_eax = (int64) eax
	edx = edx_eax % esi
	eax = edx_eax / esi
	SCZO = cond(eax)
	SZO = cond(edi & edi)
	C = false
	esi = eax
	branch Test(EQ,Z) l00404F2A
	// succ:  l00404F14 l00404F2A
l00404F14:
	edx = ebp
	edx = edx >> 0x00000008
	SCZO = cond(edx)
	edi = edi - 0x00000001
	SCZO = cond(edi)
	Mem0[ecx:byte] = dl
	ebp = ebp + esi
	SCZO = cond(ebp)
	ecx = ecx + 0x00000140
	SCZO = cond(ecx)
	SZO = cond(edi & edi)
	C = false
	branch Test(NE,Z) l00404F14
	// succ:  l00404F2A l00404F14
l00404F2A:
	edi = Mem0[esp + 0x00000018:word32]
	// succ:  l00404F2E
l00404F2E:
	ebp = Mem0[esp + 0x00000024:word32]
	esi = Mem0[esp + 0x00000020:word32]
	ecx = edi
	// succ:  l00404F38
l00404F38:
	v15 = Mem0[esp + 0x00000010:word32] + 0x00001000
	Mem0[esp + 0x00000010:word32] = v15
	SCZO = cond(v15)
	esi = esi + 0x00000200
	SCZO = cond(esi)
	SCZO = cond(esi - 0x00001400)
	Mem0[esp + 0x0000001C:word32] = ebx
	Mem0[esp + 0x00000020:word32] = esi
	branch Test(LT,SO) l00404E80
	// succ:  l00404F5A l00404E80
l00404F5A:
	edi = Mem0[esp + 0x00000014:word32]
	esi = (word32) Mem0[edi + 0x0043CF00:byte]
	eax = ecx
	edx_eax = (int64) eax
	edx = edx & 0x000000FF
	SZO = cond(edx)
	C = false
	eax = eax + edx
	SCZO = cond(eax)
	eax = eax >> 0x00000008
	SCZO = cond(eax)
	ecx = 0x000000C8
	ecx = ecx - eax
	SCZO = cond(ecx)
	eax = ecx + ecx * 0x00000004
	eax = eax << 0x00000006
	SCZO = cond(eax)
	eax = eax + Mem0[0x0043D040:word32]
	SCZO = cond(eax)
	eax = eax + edi
	SCZO = cond(eax)
	SCZO = cond(ecx - esi)
	branch Test(LE,SZO) l00404F9D
	// succ:  l00404F8C l00404F9D
l00404F8C:
	edx = ecx
	edx = edx - esi
	SCZO = cond(edx)
	// succ:  l00404F90
l00404F90:
	eax = eax - 0x00000140
	SCZO = cond(eax)
	edx = edx - 0x00000001
	SCZO = cond(edx)
	Mem0[eax:byte] = 0x00
	branch Test(NE,Z) l00404F90
	// succ:  l00404F9D l00404F90
l00404F9D:
	ebp = ebp + 0x00000004
	SCZO = cond(ebp)
	Mem0[edi + 0x0043CF00:byte] = cl
	edi = edi + 0x00000001
	SCZO = cond(edi)
	SCZO = cond(ebp - 0x0043E560)
	Mem0[esp + 0x00000014:word32] = edi
	Mem0[esp + 0x00000024:word32] = ebp
	branch Test(LT,SO) l00404E60
	// succ:  l00404FBD l00404E60
l00404FBD:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000018
	SCZO = cond(esp)
	return
	// succ:  fn00404E40_exit
fn00404E40_exit:


// fn00404FD0
// Return size: 4
void fn00404FD0()
fn00404FD0_entry:
	// succ:  l00404FD0
l00404FD0:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000140
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0043CF00
	eax = memset(Mem0[esp:(ptr void)], Mem0[esp + 4:int32], Mem0[esp + 8:size_t])
	esi = malloc
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000004
	eax = malloc(Mem0[esp:size_t])
	esp = esp + 0x00000004
	SCZO = cond(esp)
	edi = eax
	call fn00404A70 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000C00
	eax = malloc(Mem0[esp:size_t])
	esp = esp + 0x00000004
	SCZO = cond(esp)
	Mem0[edi:word32] = eax
	ecx = 0x00000003
	edx = 0x00000040
	// succ:  l00405011
l00405011:
	esi = ecx - 0x00000002
	Mem0[eax:word32] = esi
	esi = ecx + 0x00000003
	Mem0[eax + 0x00000004:word32] = ecx
	Mem0[eax + 0x00000008:word32] = esi
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	eax = eax + 0x0000000C
	SCZO = cond(eax)
	edx = edx - 0x00000001
	SCZO = cond(edx)
	branch Test(NE,Z) l00405011
	// succ:  l0040502A l00405011
l0040502A:
	eax = edi
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00404FD0_exit
fn00404FD0_exit:


// fn00405030
// Return size: 4
void fn00405030()
fn00405030_entry:
	// succ:  l00405030
l00405030:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	SCZO = cond(Mem0[0x0041C364:word32] - 0x00000000)
	branch Test(EQ,Z) l0040504E
	// succ:  l0040503A l0040504E
l0040503A:
	edx = 0x00000080
	Mem0[0x0041C364:word32] = 0x00000000
	call fn00402230 (retsize: 4;)
	// succ:  l0040504E
l0040504E:
	eax = 0x00000001
	v8 = Mem0[0x0041CEC8:word32] + eax
	Mem0[0x0041CEC8:word32] = v8
	SCZO = cond(v8)
	SCZO = cond(Mem0[esp + 0x0000000C:word32] - 0x00000000)
	branch Test(EQ,Z) l00405072
	// succ:  l00405060 l00405072
l00405060:
	rLoc1 = 1
	Mem0[0x0041CEC8:word32] = 0x00000000
	Mem0[0x0041CEC4:real32] = rLoc1
	// succ:  l00405072
l00405072:
	rLoc1 = Mem0[0x0041CEC4:real32]
	v10 = Mem0[0x0041CEC0:word32] + eax
	Mem0[0x0041CEC0:word32] = v10
	SCZO = cond(v10)
	rLoc1 = rLoc1 * Mem0[0x0041AD58:real64]
	eax = Mem0[esp + 0x00000008:word32]
	ecx = Mem0[eax + 0x0000000C:word32]
	Mem0[0x0043D040:word32] = ecx
	Mem0[0x0041CEC4:real32] = rLoc1
	rLoc1 = Mem0[0x0041CEC4:real32]
	rLoc2 = 1
	rLoc1 = rLoc2 - rLoc1
	rLoc1 = rLoc1 * Mem0[0x0041ADA8:real64]
	rLoc1 = rLoc1 + Mem0[0x0041ADA0:real64]
	call _CIsin (retsize: 4; FPU: 1;)
	esp = esp + 0xFFFFFFFC
	rLoc1 = rLoc1 + Mem0[0x0041AD98:real64]
	rLoc2 = 1
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	rLoc1 = rLoc2 / rLoc1
	rLoc1 = rLoc1 - Mem0[0x0041AD90:real64]
	Mem0[esp + 0x00000010:real32] = rLoc1
	rLoc1 = Mem0[esp + 0x00000010:real32]
	Mem0[esp:real32] = rLoc1
	call fn00404C90 (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	call fn00404E40 (retsize: 4;)
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00405030_exit
fn00405030_exit:


// fn00405120
// Return size: 4
void fn00405120()
fn00405120_entry:
	// succ:  l00405120
l00405120:
	esp = fp
	SCZO = cond(Mem0[esp + 0x00000004:word32] - 0x00000000)
	branch Test(EQ,Z) l00405133
	// succ:  l00405127 l00405133
l00405127:
	eax = Mem0[esp + 0x00000008:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405133
	// succ:  l0040512F l00405133
l0040512F:
	eax = Mem0[eax + 0x0000000C:word32]
	return
	// succ:  fn00405120_exit
l00405133:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	return
	// succ:  fn00405120_exit
fn00405120_exit:


// fn00405140
// Return size: 4
void fn00405140()
fn00405140_entry:
	// succ:  l00405140
l00405140:
	esp = fp
	ecx = Mem0[esp + 0x00000004:word32]
	SZO = cond(ecx & ecx)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	branch Test(EQ,Z) l00405261
	// succ:  l00405150 l00405261
l00405150:
	esi = Mem0[esp + 0x00000018:word32]
	SZO = cond(esi & esi)
	C = false
	branch Test(EQ,Z) l00405261
	// succ:  l0040515C l00405261
l0040515C:
	ebx = Mem0[esp + 0x0000001C:word32]
	SZO = cond(ebx & ebx)
	C = false
	branch Test(EQ,Z) l00405261
	// succ:  l00405168 l00405261
l00405168:
	ebp = Mem0[esp + 0x00000020:word32]
	SZO = cond(ebp & ebp)
	C = false
	branch Test(EQ,Z) l00405261
	// succ:  l00405174 l00405261
l00405174:
	eax = Mem0[esp + 0x00000024:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405261
	// succ:  l00405180 l00405261
l00405180:
	edi = Mem0[esp + 0x00000028:word32]
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l00405261
	// succ:  l0040518C l00405261
l0040518C:
	edx = Mem0[esi:word32]
	Mem0[ebx:word32] = edx
	edx = Mem0[esi + 0x00000004:word32]
	Mem0[ebp + 0x00000000:word32] = edx
	edx = (word32) Mem0[esi + 0x00000018:byte]
	Mem0[eax:word32] = edx
	SCZO = cond(Mem0[esi + 0x00000018:byte] - 0x01)
	branch Test(ULT,C) l004051A8
	// succ:  l004051A2 l004051A8
l004051A2:
	SCZO = cond(Mem0[esi + 0x00000018:byte] - 0x10)
	branch Test(ULE,CZ) l004051BA
	// succ:  l004051A8 l004051BA
l004051A8:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416200
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	call fn00408740 (retsize: 4;)
	ecx = Mem0[esp + 0x0000001C:word32]
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l004051BA
l004051BA:
	eax = (word32) Mem0[esi + 0x00000019:byte]
	Mem0[edi:word32] = eax
	SCZO = cond(Mem0[esi + 0x00000019:byte] - 0x06)
	branch Test(ULE,CZ) l004051D8
	// succ:  l004051C6 l004051D8
l004051C6:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004161EC
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	call fn00408740 (retsize: 4;)
	ecx = Mem0[esp + 0x0000001C:word32]
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l004051D8
l004051D8:
	eax = Mem0[esp + 0x00000030:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004051E6
	// succ:  l004051E0 l004051E6
l004051E0:
	edx = (word32) Mem0[esi + 0x0000001A:byte]
	Mem0[eax:word32] = edx
	// succ:  l004051E6
l004051E6:
	eax = Mem0[esp + 0x00000034:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004051F4
	// succ:  l004051EE l004051F4
l004051EE:
	edx = (word32) Mem0[esi + 0x0000001B:byte]
	Mem0[eax:word32] = edx
	// succ:  l004051F4
l004051F4:
	eax = Mem0[esp + 0x0000002C:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405202
	// succ:  l004051FC l00405202
l004051FC:
	edx = (word32) Mem0[esi + 0x0000001C:byte]
	Mem0[eax:word32] = edx
	// succ:  l00405202
l00405202:
	eax = Mem0[ebx:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040520F
	// succ:  l00405208 l0040520F
l00405208:
	SCZO = cond(eax - 0x7FFFFFFF)
	branch Test(ULE,CZ) l00405221
	// succ:  l0040520F l00405221
l0040520F:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004161D8
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	call fn00408740 (retsize: 4;)
	ecx = Mem0[esp + 0x0000001C:word32]
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l00405221
l00405221:
	eax = Mem0[ebp + 0x00000000:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040522F
	// succ:  l00405228 l0040522F
l00405228:
	SCZO = cond(eax - 0x7FFFFFFF)
	branch Test(ULE,CZ) l00405241
	// succ:  l0040522F l00405241
l0040522F:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004161C0
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	call fn00408740 (retsize: 4;)
	ecx = Mem0[esp + 0x0000001C:word32]
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l00405241
l00405241:
	SCZO = cond(Mem0[esi:word32] - 0x1FFFFF7E)
	branch Test(ULE,CZ) l00405257
	// succ:  l00405249 l00405257
l00405249:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041618C
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l00405257
l00405257:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = 0x00000001
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00405140_exit
l00405261:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00405140_exit
fn00405140_exit:


// fn00405270
// Return size: 4
void fn00405270()
fn00405270_entry:
	// succ:  l00405270
l00405270:
	esp = fp
	SCZO = cond(Mem0[esp + 0x00000004:word32] - 0x00000000)
	branch Test(EQ,Z) l004052A2
	// succ:  l00405277 l004052A2
l00405277:
	eax = Mem0[esp + 0x00000008:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004052A2
	// succ:  l0040527F l004052A2
l0040527F:
	SZO = cond(Mem0[eax + 0x00000008:byte] & 0x08)
	C = false
	branch Test(EQ,Z) l004052A2
	// succ:  l00405285 l004052A2
l00405285:
	ecx = Mem0[esp + 0x0000000C:word32]
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l004052A2
	// succ:  l0040528D l004052A2
l0040528D:
	edx = Mem0[eax + 0x00000010:word32]
	Mem0[ecx:word32] = edx
	eax = (word32) Mem0[eax + 0x00000014:word16]
	ecx = Mem0[esp + 0x00000010:word32]
	Mem0[ecx:word32] = eax
	eax = 0x00000008
	return
	// succ:  fn00405270_exit
l004052A2:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	return
	// succ:  fn00405270_exit
fn00405270_exit:


// fn004052B0
// Return size: 4
void fn004052B0()
fn004052B0_entry:
	// succ:  l004052B0
l004052B0:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	esp = esp - 0x00000074
	SCZO = cond(esp)
	eax = Mem0[0x0041C340:word32]
	eax = eax ^ ebp
	SZO = cond(eax)
	C = false
	Mem0[ebp - 0x00000004:word32] = eax
	eax = Mem0[ebp + 0x00000008:word32]
	ecx = Mem0[ebp + 0x0000000C:word32]
	edx = Mem0[ebp + 0x00000010:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	Mem0[ebp - 0x0000006C:word32] = eax
	eax = Mem0[ebp + 0x00000014:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	Mem0[ebp - 0x00000064:word32] = eax
	eax = Mem0[ebp + 0x00000018:word32]
	Mem0[ebp - 0x00000068:word32] = ecx
	ecx = Mem0[ebp + 0x0000001C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	Mem0[ebp - 0x00000070:word32] = edx
	edx = Mem0[ebp + 0x00000020:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000001
	Mem0[ebp - 0x00000060:word32] = eax
	Mem0[ebp - 0x00000074:word32] = ecx
	Mem0[ebp - 0x0000005C:word32] = edx
	call fn00408980 (retsize: 4;)
	esi = eax
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	SZO = cond(esi & esi)
	C = false
	Mem0[ebp - 0x00000058:word32] = esi
	branch Test(EQ,Z) l00405353
	// succ:  l00405302 l00405353
l00405302:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408390 (retsize: 4;)
	eax = 0x000F4240
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	Mem0[esi + 0x00000264:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	Mem0[esi + 0x00000268:word32] = eax
	call _setjmp3 (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	esi = Mem0[ebp - 0x00000058:word32]
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405366
	// succ:  l0040532B l00405366
l0040532B:
	eax = Mem0[esi + 0x000000AC:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408BF0 (retsize: 4;)
	ecx = Mem0[ebp - 0x00000060:word32]
	edx = Mem0[ebp - 0x0000005C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	Mem0[esi + 0x000000AC:word32] = 0x00000000
	call fn00408A30 (retsize: 4;)
	esp = esp + 0x00000014
	SCZO = cond(esp)
	// succ:  l00405353
l00405353:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[ebp - 0x00000004:word32]
	ecx = ecx ^ ebp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004052B0_exit
l00405366:
	eax = Mem0[ebp - 0x0000005C:word32]
	ecx = Mem0[ebp - 0x00000074:word32]
	edx = Mem0[ebp - 0x00000060:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408B30 (retsize: 4;)
	eax = Mem0[ebp - 0x00000064:word32]
	ecx = Mem0[ebp - 0x00000070:word32]
	edx = Mem0[ebp - 0x00000068:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408720 (retsize: 4;)
	edi = Mem0[ebp - 0x0000006C:word32]
	eax = 0x004163F0
	ecx = edi
	esp = esp + 0x00000020
	SCZO = cond(esp)
	ecx = ecx - eax
	SCZO = cond(ecx)
	edx = 0x00020000
	edi = edi
	// succ:  l004053A0
l004053A0:
	bl = Mem0[ecx + eax:byte]
	SCZO = cond(bl - Mem0[eax:byte])
	branch Test(EQ,Z) l004053AA
	// succ:  l004053A7 l004053AA
l004053A7:
	v15 = Mem0[esi + 0x0000006C:word32] | edx
	Mem0[esi + 0x0000006C:word32] = v15
	SZO = cond(Mem0[esi + 0x0000006C:word32])
	C = false
	// succ:  l004053AA
l004053AA:
	bl = Mem0[eax:byte]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	SZO = cond(bl & bl)
	C = false
	branch Test(NE,Z) l004053A0
	// succ:  l004053B3 l004053A0
l004053B3:
	SZO = cond(Mem0[esi + 0x0000006C:word32] & edx)
	C = false
	branch Test(EQ,Z) l00405431
	// succ:  l004053B8 l00405431
l004053B8:
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l004053E1
	// succ:  l004053BC l004053E1
l004053BC:
	al = Mem0[edi:byte]
	SCZO = cond(al - Mem0[0x004163F0:byte])
	branch Test(NE,Z) l004053DF
	// succ:  l004053C6 l004053DF
l004053C6:
	SCZO = cond(al - 0x31)
	branch Test(NE,Z) l004053D5
	// succ:  l004053CA l004053D5
l004053CA:
	cl = Mem0[edi + 0x00000002:byte]
	SCZO = cond(cl - Mem0[0x004163F2:byte])
	branch Test(NE,Z) l004053DF
	// succ:  l004053D5 l004053DF
l004053D5:
	SCZO = cond(al - 0x30)
	branch Test(NE,Z) l00405431
	// succ:  l004053D9 l00405431
l004053D9:
	SCZO = cond(Mem0[edi + 0x00000002:byte] - 0x39)
	branch Test(GE,SO) l00405431
	// succ:  l004053DF l00405431
l004053DF:
	SZO = cond(edi & edi)
	C = false
	// succ:  l004053E1
l004053E1:
	ebx = MSVCR80.dll!sprintf
	branch Test(EQ,Z) l00405402
	// succ:  l004053E9 l00405402
l004053E9:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edx = ebp - 0x00000054
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004162C8
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call MSVCR80.dll!sprintf (retsize: 4;)
	eax = ebp - 0x00000054
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000014
	SCZO = cond(esp)
	// succ:  l00405402
l00405402:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004163F0
	ecx = ebp - 0x00000054
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416290
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	call ebx (retsize: 4;)
	edx = ebp - 0x00000054
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416258
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	Mem0[esi + 0x0000006C:word32] = 0x00000000
	call fn00408740 (retsize: 4;)
	esp = esp + 0x0000001C
	SCZO = cond(esp)
	// succ:  l00405431
l00405431:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00002000
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	Mem0[esi + 0x000000B0:word32] = 0x00002000
	call fn00408BA0 (retsize: 4;)
	Mem0[esi + 0x000000AC:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000038
	Mem0[esi + 0x00000094:word32] = 0x00407D70
	eax = esi + 0x00000074
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416250
	Mem0[esi + 0x00000098:word32] = 0x00407DC0
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	Mem0[esi + 0x0000009C:word32] = esi
	call fn00412C20 (retsize: 4;)
	eax = eax + 0x00000006
	SCZO = cond(eax)
	esp = esp + 0x00000014
	SCZO = cond(esp)
	SCZO = cond(eax - 0x00000006)
	branch Test(UGT,CZ) l00405496
	// succ:  l00405481 l00405496
l00405481:
	switch (eax) { l0040548F l00405496 l00405488 l00405496 l00405488 l00405496 l004054A4 }
	// succ:  l0040548F l00405496 l00405488 l00405496 l00405488 l00405496 l004054A4
l00405488:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041623C
	goto l0040549B
	// succ:  l0040549B
l0040548F:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416228
	goto l0040549B
	// succ:  l0040549B
l00405496:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416214
	// succ:  l0040549B
l0040549B:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l004054A4
l004054A4:
	ecx = Mem0[esi + 0x000000AC:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	Mem0[esi + 0x00000080:word32] = ecx
	edx = Mem0[esi + 0x000000B0:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	Mem0[esi + 0x00000084:word32] = edx
	call fn00408920 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call _setjmp3 (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	esp = esp + 0x00000014
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004054DB
	// succ:  l004054D5 l004054DB
l004054D5:
	abort()
	// succ:  l004054DB
l004054DB:
	ecx = Mem0[ebp - 0x00000004:word32]
	eax = Mem0[ebp - 0x00000058:word32]
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx ^ ebp
	SZO = cond(ecx)
	C = false
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	call fn00412237 (retsize: 4;)
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004052B0_exit
fn004052B0_exit:


// fn00405510
// Return size: 4
void fn00405510()
fn00405510_entry:
	// succ:  l00405510
l00405510:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = Mem0[esp + 0x0000000C:word32]
	al = Mem0[ebx + 0x0000012C:byte]
	SCZO = cond(al - 0x08)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = Mem0[esp + 0x00000014:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	branch Test(UGE,C) l0040558E
	// succ:  l00405527 l0040558E
l00405527:
	edi = (word32) al
	esi = 0x00000008
	esi = esi - edi
	SCZO = cond(esi)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	eax = edi + 0x00000020 + ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn004088C0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	ebp = ebp + 0x00000020
	SCZO = cond(ebp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	Mem0[ebx + 0x0000012C:byte] = 0x08
	call fn00407C40 (retsize: 4;)
	esp = esp + 0x00000018
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405582
	// succ:  l00405556 l00405582
l00405556:
	SCZO = cond(edi - 0x00000004)
	branch Test(UGE,C) l00405574
	// succ:  l0040555B l00405574
l0040555B:
	esi = esi + 0xFFFFFFFC
	SCZO = cond(esi)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	call fn00407C40 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405574
	// succ:  l0040556D l00405574
l0040556D:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416360
	goto l00405579
	// succ:  l00405579
l00405574:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416338
	// succ:  l00405579
l00405579:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l00405582
l00405582:
	SCZO = cond(edi - 0x00000003)
	branch Test(UGE,C) l0040558E
	// succ:  l00405587 l0040558E
l00405587:
	v18 = Mem0[ebx + 0x00000068:word32] | 0x00001000
	Mem0[ebx + 0x00000068:word32] = v18
	SZO = cond(Mem0[ebx + 0x00000068:word32])
	C = false
	// succ:  l0040558E
l0040558E:
	edi = ebx + 0x0000011C
	// succ:  l00405594
l00405594:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000004
	ecx = esp + 0x00000014
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn004088C0 (retsize: 4;)
	edx = esp + 0x0000001C
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00409D20 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebp = eax
	call fn00407DD0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00408CA0 (retsize: 4;)
	esp = esp + 0x00000024
	SCZO = cond(esp)
	eax = 0x00000004
	ecx = 0x0041640C
	edx = edi
	esp = esp + 0x00000000
	// succ:  l004055D0
l004055D0:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l004055E8
	// succ:  l004055D6 l004055E8
l004055D6:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l004055D0
	// succ:  l004055E4 l004055D0
l004055E4:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405645
	// succ:  l004055E8 l00405645
l004055E8:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00405637
	// succ:  l004055F2 l00405637
l004055F2:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405645
	// succ:  l004055FF l00405645
l004055FF:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00405637
	// succ:  l00405609 l00405637
l00405609:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405645
	// succ:  l00405616 l00405645
l00405616:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00405637
	// succ:  l00405620 l00405637
l00405620:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405645
	// succ:  l0040562D l00405645
l0040562D:
	eax = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - eax
	SCZO = cond(esi)
	branch Test(EQ,Z) l00405645
	// succ:  l00405637 l00405645
l00405637:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l00405647
	// succ:  l00405640 l00405647
l00405640:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l00405647
	// succ:  l00405647
l00405645:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l00405647
l00405647:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00405663
	// succ:  l0040564B l00405663
l0040564B:
	ecx = Mem0[esp + 0x0000001C:word32]
	ebx = Mem0[esp + 0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00409E10 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	goto l00405594
	// succ:  l00405594
l00405663:
	eax = 0x00000004
	ecx = 0x0041641C
	edx = edi
	// succ:  l00405670
l00405670:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l00405688
	// succ:  l00405676 l00405688
l00405676:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l00405670
	// succ:  l00405684 l00405670
l00405684:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004056E5
	// succ:  l00405688 l004056E5
l00405688:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l004056D7
	// succ:  l00405692 l004056D7
l00405692:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004056E5
	// succ:  l0040569F l004056E5
l0040569F:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l004056D7
	// succ:  l004056A9 l004056D7
l004056A9:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004056E5
	// succ:  l004056B6 l004056E5
l004056B6:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l004056D7
	// succ:  l004056C0 l004056D7
l004056C0:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004056E5
	// succ:  l004056CD l004056E5
l004056CD:
	esi = (word32) Mem0[edx:byte]
	edx = (word32) Mem0[ecx:byte]
	esi = esi - edx
	SCZO = cond(esi)
	branch Test(EQ,Z) l004056E5
	// succ:  l004056D7 l004056E5
l004056D7:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l004056E7
	// succ:  l004056E0 l004056E7
l004056E0:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l004056E7
	// succ:  l004056E7
l004056E5:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l004056E7
l004056E7:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00405703
	// succ:  l004056EB l00405703
l004056EB:
	eax = Mem0[esp + 0x0000001C:word32]
	ebx = Mem0[esp + 0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn0040A120 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	goto l00405594
	// succ:  l00405594
l00405703:
	ecx = Mem0[esp + 0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	call fn004082A0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	edx = edi
	eax = 0x00000004
	branch Test(EQ,Z) l004058F1
	// succ:  l00405720 l004058F1
l00405720:
	ecx = 0x00416414
	// succ:  l00405725
l00405725:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l0040573D
	// succ:  l0040572B l0040573D
l0040572B:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l00405725
	// succ:  l00405739 l00405725
l00405739:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040579A
	// succ:  l0040573D l0040579A
l0040573D:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l0040578C
	// succ:  l00405747 l0040578C
l00405747:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040579A
	// succ:  l00405754 l0040579A
l00405754:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l0040578C
	// succ:  l0040575E l0040578C
l0040575E:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040579A
	// succ:  l0040576B l0040579A
l0040576B:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l0040578C
	// succ:  l00405775 l0040578C
l00405775:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040579A
	// succ:  l00405782 l0040579A
l00405782:
	eax = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - eax
	SCZO = cond(esi)
	branch Test(EQ,Z) l0040579A
	// succ:  l0040578C l0040579A
l0040578C:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l0040579C
	// succ:  l00405795 l0040579C
l00405795:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l0040579C
	// succ:  l0040579C
l0040579A:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l0040579C
l0040579C:
	SZO = cond(eax & eax)
	C = false
	ebx = Mem0[esp + 0x00000018:word32]
	branch Test(NE,Z) l004057A8
	// succ:  l004057A4 l004057A8
l004057A4:
	v15 = Mem0[ebx + 0x00000068:word32] | 0x00000004
	Mem0[ebx + 0x00000068:word32] = v15
	SZO = cond(Mem0[ebx + 0x00000068:word32])
	C = false
	// succ:  l004057A8
l004057A8:
	ecx = Mem0[esp + 0x0000001C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn0040BF40 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	eax = 0x00000004
	ecx = 0x00416424
	edx = edi
	// succ:  l004057C3
l004057C3:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l004057DB
	// succ:  l004057C9 l004057DB
l004057C9:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l004057C3
	// succ:  l004057D7 l004057C3
l004057D7:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405838
	// succ:  l004057DB l00405838
l004057DB:
	esi = (word32) Mem0[edx:byte]
	ebp = (word32) Mem0[ecx:byte]
	esi = esi - ebp
	SCZO = cond(esi)
	branch Test(NE,Z) l0040582A
	// succ:  l004057E5 l0040582A
l004057E5:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405838
	// succ:  l004057F2 l00405838
l004057F2:
	esi = (word32) Mem0[edx:byte]
	ebp = (word32) Mem0[ecx:byte]
	esi = esi - ebp
	SCZO = cond(esi)
	branch Test(NE,Z) l0040582A
	// succ:  l004057FC l0040582A
l004057FC:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405838
	// succ:  l00405809 l00405838
l00405809:
	esi = (word32) Mem0[edx:byte]
	ebp = (word32) Mem0[ecx:byte]
	esi = esi - ebp
	SCZO = cond(esi)
	branch Test(NE,Z) l0040582A
	// succ:  l00405813 l0040582A
l00405813:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405838
	// succ:  l00405820 l00405838
l00405820:
	esi = (word32) Mem0[edx:byte]
	edx = (word32) Mem0[ecx:byte]
	esi = esi - edx
	SCZO = cond(esi)
	branch Test(EQ,Z) l00405838
	// succ:  l0040582A l00405838
l0040582A:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l0040583A
	// succ:  l00405833 l0040583A
l00405833:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l0040583A
	// succ:  l0040583A
l00405838:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l0040583A
l0040583A:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00405847
	// succ:  l0040583E l00405847
l0040583E:
	v16 = Mem0[ebx + 0x00000068:word32] | 0x00000002
	Mem0[ebx + 0x00000068:word32] = v16
	SZO = cond(Mem0[ebx + 0x00000068:word32])
	C = false
	goto l00405594
	// succ:  l00405594
l00405847:
	eax = 0x00000004
	ecx = 0x00416414
	edx = edi
	// succ:  l00405853
l00405853:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l0040586B
	// succ:  l00405859 l0040586B
l00405859:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l00405853
	// succ:  l00405867 l00405853
l00405867:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004058C8
	// succ:  l0040586B l004058C8
l0040586B:
	ebp = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebp
	SCZO = cond(esi)
	branch Test(NE,Z) l004058BA
	// succ:  l00405875 l004058BA
l00405875:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004058C8
	// succ:  l00405882 l004058C8
l00405882:
	ebp = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebp
	SCZO = cond(esi)
	branch Test(NE,Z) l004058BA
	// succ:  l0040588C l004058BA
l0040588C:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004058C8
	// succ:  l00405899 l004058C8
l00405899:
	ebp = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebp
	SCZO = cond(esi)
	branch Test(NE,Z) l004058BA
	// succ:  l004058A3 l004058BA
l004058A3:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004058C8
	// succ:  l004058B0 l004058C8
l004058B0:
	eax = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - eax
	SCZO = cond(esi)
	branch Test(EQ,Z) l004058C8
	// succ:  l004058BA l004058C8
l004058BA:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l004058CA
	// succ:  l004058C3 l004058CA
l004058C3:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l004058CA
	// succ:  l004058CA
l004058C8:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l004058CA
l004058CA:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00405594
	// succ:  l004058D2 l00405594
l004058D2:
	eax = Mem0[ebx + 0x00000068:word32]
	SZO = cond(al & 0x01)
	C = false
	branch Test(NE,Z) l0040644D
	// succ:  l004058DD l0040644D
l004058DD:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041631C
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00405510_exit
l004058F1:
	ecx = 0x00416424
	// succ:  l004058F6
l004058F6:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l0040590E
	// succ:  l004058FC l0040590E
l004058FC:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l004058F6
	// succ:  l0040590A l004058F6
l0040590A:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040596B
	// succ:  l0040590E l0040596B
l0040590E:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l0040595D
	// succ:  l00405918 l0040595D
l00405918:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040596B
	// succ:  l00405925 l0040596B
l00405925:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l0040595D
	// succ:  l0040592F l0040595D
l0040592F:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040596B
	// succ:  l0040593C l0040596B
l0040593C:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l0040595D
	// succ:  l00405946 l0040595D
l00405946:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040596B
	// succ:  l00405953 l0040596B
l00405953:
	esi = (word32) Mem0[edx:byte]
	ecx = (word32) Mem0[ecx:byte]
	esi = esi - ecx
	SCZO = cond(esi)
	branch Test(EQ,Z) l0040596B
	// succ:  l0040595D l0040596B
l0040595D:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l0040596D
	// succ:  l00405966 l0040596D
l00405966:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l0040596D
	// succ:  l0040596D
l0040596B:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l0040596D
l0040596D:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00405989
	// succ:  l00405971 l00405989
l00405971:
	edx = Mem0[esp + 0x0000001C:word32]
	ebx = Mem0[esp + 0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00409F90 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	goto l00405594
	// succ:  l00405594
l00405989:
	eax = 0x00000004
	ecx = 0x00416414
	edx = edi
	// succ:  l00405995
l00405995:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l004059AD
	// succ:  l0040599B l004059AD
l0040599B:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l00405995
	// succ:  l004059A9 l00405995
l004059A9:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405A0A
	// succ:  l004059AD l00405A0A
l004059AD:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l004059FC
	// succ:  l004059B7 l004059FC
l004059B7:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405A0A
	// succ:  l004059C4 l00405A0A
l004059C4:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l004059FC
	// succ:  l004059CE l004059FC
l004059CE:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405A0A
	// succ:  l004059DB l00405A0A
l004059DB:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l004059FC
	// succ:  l004059E5 l004059FC
l004059E5:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405A0A
	// succ:  l004059F2 l00405A0A
l004059F2:
	eax = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - eax
	SCZO = cond(esi)
	branch Test(EQ,Z) l00405A0A
	// succ:  l004059FC l00405A0A
l004059FC:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l00405A0C
	// succ:  l00405A05 l00405A0C
l00405A05:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l00405A0C
	// succ:  l00405A0C
l00405A0A:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l00405A0C
l00405A0C:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406472
	// succ:  l00405A14 l00406472
l00405A14:
	eax = 0x00000004
	ecx = 0x0041642C
	edx = edi
	// succ:  l00405A20
l00405A20:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l00405A38
	// succ:  l00405A26 l00405A38
l00405A26:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l00405A20
	// succ:  l00405A34 l00405A20
l00405A34:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405A95
	// succ:  l00405A38 l00405A95
l00405A38:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00405A87
	// succ:  l00405A42 l00405A87
l00405A42:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405A95
	// succ:  l00405A4F l00405A95
l00405A4F:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00405A87
	// succ:  l00405A59 l00405A87
l00405A59:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405A95
	// succ:  l00405A66 l00405A95
l00405A66:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00405A87
	// succ:  l00405A70 l00405A87
l00405A70:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405A95
	// succ:  l00405A7D l00405A95
l00405A7D:
	esi = (word32) Mem0[edx:byte]
	ecx = (word32) Mem0[ecx:byte]
	esi = esi - ecx
	SCZO = cond(esi)
	branch Test(EQ,Z) l00405A95
	// succ:  l00405A87 l00405A95
l00405A87:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l00405A97
	// succ:  l00405A90 l00405A97
l00405A90:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l00405A97
	// succ:  l00405A97
l00405A95:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l00405A97
l00405A97:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00405AB3
	// succ:  l00405A9B l00405AB3
l00405A9B:
	edx = Mem0[esp + 0x0000001C:word32]
	ebx = Mem0[esp + 0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn0040B150 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	goto l00405594
	// succ:  l00405594
l00405AB3:
	eax = 0x00000004
	ecx = 0x00416434
	edx = edi
	// succ:  l00405AC0
l00405AC0:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l00405AD8
	// succ:  l00405AC6 l00405AD8
l00405AC6:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l00405AC0
	// succ:  l00405AD4 l00405AC0
l00405AD4:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405B35
	// succ:  l00405AD8 l00405B35
l00405AD8:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00405B27
	// succ:  l00405AE2 l00405B27
l00405AE2:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405B35
	// succ:  l00405AEF l00405B35
l00405AEF:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00405B27
	// succ:  l00405AF9 l00405B27
l00405AF9:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405B35
	// succ:  l00405B06 l00405B35
l00405B06:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00405B27
	// succ:  l00405B10 l00405B27
l00405B10:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405B35
	// succ:  l00405B1D l00405B35
l00405B1D:
	eax = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - eax
	SCZO = cond(esi)
	branch Test(EQ,Z) l00405B35
	// succ:  l00405B27 l00405B35
l00405B27:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l00405B37
	// succ:  l00405B30 l00405B37
l00405B30:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l00405B37
	// succ:  l00405B37
l00405B35:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l00405B37
l00405B37:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00405B53
	// succ:  l00405B3B l00405B53
l00405B3B:
	ecx = Mem0[esp + 0x0000001C:word32]
	ebx = Mem0[esp + 0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn0040A450 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	goto l00405594
	// succ:  l00405594
l00405B53:
	eax = 0x00000004
	ecx = 0x0041643C
	edx = edi
	// succ:  l00405B60
l00405B60:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l00405B78
	// succ:  l00405B66 l00405B78
l00405B66:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l00405B60
	// succ:  l00405B74 l00405B60
l00405B74:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405BD5
	// succ:  l00405B78 l00405BD5
l00405B78:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00405BC7
	// succ:  l00405B82 l00405BC7
l00405B82:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405BD5
	// succ:  l00405B8F l00405BD5
l00405B8F:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00405BC7
	// succ:  l00405B99 l00405BC7
l00405B99:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405BD5
	// succ:  l00405BA6 l00405BD5
l00405BA6:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00405BC7
	// succ:  l00405BB0 l00405BC7
l00405BB0:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405BD5
	// succ:  l00405BBD l00405BD5
l00405BBD:
	esi = (word32) Mem0[edx:byte]
	edx = (word32) Mem0[ecx:byte]
	esi = esi - edx
	SCZO = cond(esi)
	branch Test(EQ,Z) l00405BD5
	// succ:  l00405BC7 l00405BD5
l00405BC7:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l00405BD7
	// succ:  l00405BD0 l00405BD7
l00405BD0:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l00405BD7
	// succ:  l00405BD7
l00405BD5:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l00405BD7
l00405BD7:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00405BF3
	// succ:  l00405BDB l00405BF3
l00405BDB:
	eax = Mem0[esp + 0x0000001C:word32]
	ebx = Mem0[esp + 0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn0040A170 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	goto l00405594
	// succ:  l00405594
l00405BF3:
	eax = 0x00000004
	ecx = 0x00416444
	edx = edi
	// succ:  l00405C00
l00405C00:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l00405C18
	// succ:  l00405C06 l00405C18
l00405C06:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l00405C00
	// succ:  l00405C14 l00405C00
l00405C14:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405C75
	// succ:  l00405C18 l00405C75
l00405C18:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00405C67
	// succ:  l00405C22 l00405C67
l00405C22:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405C75
	// succ:  l00405C2F l00405C75
l00405C2F:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00405C67
	// succ:  l00405C39 l00405C67
l00405C39:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405C75
	// succ:  l00405C46 l00405C75
l00405C46:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00405C67
	// succ:  l00405C50 l00405C67
l00405C50:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405C75
	// succ:  l00405C5D l00405C75
l00405C5D:
	ecx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ecx
	SCZO = cond(esi)
	branch Test(EQ,Z) l00405C75
	// succ:  l00405C67 l00405C75
l00405C67:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l00405C77
	// succ:  l00405C70 l00405C77
l00405C70:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l00405C77
	// succ:  l00405C77
l00405C75:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l00405C77
l00405C77:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00405C93
	// succ:  l00405C7B l00405C93
l00405C7B:
	edx = Mem0[esp + 0x0000001C:word32]
	ebx = Mem0[esp + 0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn0040B390 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	goto l00405594
	// succ:  l00405594
l00405C93:
	eax = 0x00000004
	ecx = 0x0041645C
	edx = edi
	// succ:  l00405CA0
l00405CA0:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l00405CB8
	// succ:  l00405CA6 l00405CB8
l00405CA6:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l00405CA0
	// succ:  l00405CB4 l00405CA0
l00405CB4:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405D15
	// succ:  l00405CB8 l00405D15
l00405CB8:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00405D07
	// succ:  l00405CC2 l00405D07
l00405CC2:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405D15
	// succ:  l00405CCF l00405D15
l00405CCF:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00405D07
	// succ:  l00405CD9 l00405D07
l00405CD9:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405D15
	// succ:  l00405CE6 l00405D15
l00405CE6:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00405D07
	// succ:  l00405CF0 l00405D07
l00405CF0:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405D15
	// succ:  l00405CFD l00405D15
l00405CFD:
	esi = (word32) Mem0[edx:byte]
	eax = (word32) Mem0[ecx:byte]
	esi = esi - eax
	SCZO = cond(esi)
	branch Test(EQ,Z) l00405D15
	// succ:  l00405D07 l00405D15
l00405D07:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l00405D17
	// succ:  l00405D10 l00405D17
l00405D10:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l00405D17
	// succ:  l00405D17
l00405D15:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l00405D17
l00405D17:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00405D33
	// succ:  l00405D1B l00405D33
l00405D1B:
	ecx = Mem0[esp + 0x0000001C:word32]
	ebx = Mem0[esp + 0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn0040B650 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	goto l00405594
	// succ:  l00405594
l00405D33:
	eax = 0x00000004
	ecx = 0x00416464
	edx = edi
	// succ:  l00405D40
l00405D40:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l00405D58
	// succ:  l00405D46 l00405D58
l00405D46:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l00405D40
	// succ:  l00405D54 l00405D40
l00405D54:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405DB5
	// succ:  l00405D58 l00405DB5
l00405D58:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00405DA7
	// succ:  l00405D62 l00405DA7
l00405D62:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405DB5
	// succ:  l00405D6F l00405DB5
l00405D6F:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00405DA7
	// succ:  l00405D79 l00405DA7
l00405D79:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405DB5
	// succ:  l00405D86 l00405DB5
l00405D86:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00405DA7
	// succ:  l00405D90 l00405DA7
l00405D90:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405DB5
	// succ:  l00405D9D l00405DB5
l00405D9D:
	eax = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - eax
	SCZO = cond(esi)
	branch Test(EQ,Z) l00405DB5
	// succ:  l00405DA7 l00405DB5
l00405DA7:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l00405DB7
	// succ:  l00405DB0 l00405DB7
l00405DB0:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l00405DB7
	// succ:  l00405DB7
l00405DB5:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l00405DB7
l00405DB7:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00405DD3
	// succ:  l00405DBB l00405DD3
l00405DBB:
	ecx = Mem0[esp + 0x0000001C:word32]
	ebx = Mem0[esp + 0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn0040B780 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	goto l00405594
	// succ:  l00405594
l00405DD3:
	eax = 0x00000004
	ecx = 0x0041646C
	edx = edi
	// succ:  l00405DE0
l00405DE0:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l00405DF8
	// succ:  l00405DE6 l00405DF8
l00405DE6:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l00405DE0
	// succ:  l00405DF4 l00405DE0
l00405DF4:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405E55
	// succ:  l00405DF8 l00405E55
l00405DF8:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00405E47
	// succ:  l00405E02 l00405E47
l00405E02:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405E55
	// succ:  l00405E0F l00405E55
l00405E0F:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00405E47
	// succ:  l00405E19 l00405E47
l00405E19:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405E55
	// succ:  l00405E26 l00405E55
l00405E26:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00405E47
	// succ:  l00405E30 l00405E47
l00405E30:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405E55
	// succ:  l00405E3D l00405E55
l00405E3D:
	esi = (word32) Mem0[edx:byte]
	edx = (word32) Mem0[ecx:byte]
	esi = esi - edx
	SCZO = cond(esi)
	branch Test(EQ,Z) l00405E55
	// succ:  l00405E47 l00405E55
l00405E47:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l00405E57
	// succ:  l00405E50 l00405E57
l00405E50:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l00405E57
	// succ:  l00405E57
l00405E55:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l00405E57
l00405E57:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00405E73
	// succ:  l00405E5B l00405E73
l00405E5B:
	eax = Mem0[esp + 0x0000001C:word32]
	ebx = Mem0[esp + 0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn0040B9E0 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	goto l00405594
	// succ:  l00405594
l00405E73:
	eax = 0x00000004
	ecx = 0x00416474
	edx = edi
	// succ:  l00405E80
l00405E80:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l00405E98
	// succ:  l00405E86 l00405E98
l00405E86:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l00405E80
	// succ:  l00405E94 l00405E80
l00405E94:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405EF5
	// succ:  l00405E98 l00405EF5
l00405E98:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00405EE7
	// succ:  l00405EA2 l00405EE7
l00405EA2:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405EF5
	// succ:  l00405EAF l00405EF5
l00405EAF:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00405EE7
	// succ:  l00405EB9 l00405EE7
l00405EB9:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405EF5
	// succ:  l00405EC6 l00405EF5
l00405EC6:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00405EE7
	// succ:  l00405ED0 l00405EE7
l00405ED0:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405EF5
	// succ:  l00405EDD l00405EF5
l00405EDD:
	ecx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ecx
	SCZO = cond(esi)
	branch Test(EQ,Z) l00405EF5
	// succ:  l00405EE7 l00405EF5
l00405EE7:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l00405EF7
	// succ:  l00405EF0 l00405EF7
l00405EF0:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l00405EF7
	// succ:  l00405EF7
l00405EF5:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l00405EF7
l00405EF7:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00405F13
	// succ:  l00405EFB l00405F13
l00405EFB:
	edx = Mem0[esp + 0x0000001C:word32]
	ebx = Mem0[esp + 0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn0040B530 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	goto l00405594
	// succ:  l00405594
l00405F13:
	eax = 0x00000004
	ecx = 0x0041647C
	edx = edi
	// succ:  l00405F20
l00405F20:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l00405F3C
	// succ:  l00405F26 l00405F3C
l00405F26:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l00405F20
	// succ:  l00405F34 l00405F20
l00405F34:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405F99
	// succ:  l00405F3C l00405F99
l00405F3C:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00405F8B
	// succ:  l00405F46 l00405F8B
l00405F46:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405F99
	// succ:  l00405F53 l00405F99
l00405F53:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00405F8B
	// succ:  l00405F5D l00405F8B
l00405F5D:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405F99
	// succ:  l00405F6A l00405F99
l00405F6A:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00405F8B
	// succ:  l00405F74 l00405F8B
l00405F74:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00405F99
	// succ:  l00405F81 l00405F99
l00405F81:
	esi = (word32) Mem0[edx:byte]
	eax = (word32) Mem0[ecx:byte]
	esi = esi - eax
	SCZO = cond(esi)
	branch Test(EQ,Z) l00405F99
	// succ:  l00405F8B l00405F99
l00405F8B:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l00405F9B
	// succ:  l00405F94 l00405F9B
l00405F94:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l00405F9B
	// succ:  l00405F9B
l00405F99:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l00405F9B
l00405F9B:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00405FB7
	// succ:  l00405F9F l00405FB7
l00405F9F:
	ecx = Mem0[esp + 0x0000001C:word32]
	ebx = Mem0[esp + 0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn0040A2E0 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	goto l00405594
	// succ:  l00405594
l00405FB7:
	eax = 0x00000004
	ecx = 0x0041648C
	edx = edi
	// succ:  l00405FC3
l00405FC3:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l00405FDF
	// succ:  l00405FC9 l00405FDF
l00405FC9:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l00405FC3
	// succ:  l00405FD7 l00405FC3
l00405FD7:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040603C
	// succ:  l00405FDF l0040603C
l00405FDF:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l0040602E
	// succ:  l00405FE9 l0040602E
l00405FE9:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040603C
	// succ:  l00405FF6 l0040603C
l00405FF6:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l0040602E
	// succ:  l00406000 l0040602E
l00406000:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040603C
	// succ:  l0040600D l0040603C
l0040600D:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l0040602E
	// succ:  l00406017 l0040602E
l00406017:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040603C
	// succ:  l00406024 l0040603C
l00406024:
	eax = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - eax
	SCZO = cond(esi)
	branch Test(EQ,Z) l0040603C
	// succ:  l0040602E l0040603C
l0040602E:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l0040603E
	// succ:  l00406037 l0040603E
l00406037:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l0040603E
	// succ:  l0040603E
l0040603C:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l0040603E
l0040603E:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0040605A
	// succ:  l00406042 l0040605A
l00406042:
	ecx = Mem0[esp + 0x0000001C:word32]
	ebx = Mem0[esp + 0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn0040A940 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	goto l00405594
	// succ:  l00405594
l0040605A:
	eax = 0x00000004
	ecx = 0x0041644C
	edx = edi
	// succ:  l00406066
l00406066:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l00406082
	// succ:  l0040606C l00406082
l0040606C:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l00406066
	// succ:  l0040607A l00406066
l0040607A:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004060DF
	// succ:  l00406082 l004060DF
l00406082:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l004060D1
	// succ:  l0040608C l004060D1
l0040608C:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004060DF
	// succ:  l00406099 l004060DF
l00406099:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l004060D1
	// succ:  l004060A3 l004060D1
l004060A3:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004060DF
	// succ:  l004060B0 l004060DF
l004060B0:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l004060D1
	// succ:  l004060BA l004060D1
l004060BA:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004060DF
	// succ:  l004060C7 l004060DF
l004060C7:
	esi = (word32) Mem0[edx:byte]
	edx = (word32) Mem0[ecx:byte]
	esi = esi - edx
	SCZO = cond(esi)
	branch Test(EQ,Z) l004060DF
	// succ:  l004060D1 l004060DF
l004060D1:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l004060E1
	// succ:  l004060DA l004060E1
l004060DA:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l004060E1
	// succ:  l004060E1
l004060DF:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l004060E1
l004060E1:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l004060FD
	// succ:  l004060E5 l004060FD
l004060E5:
	eax = Mem0[esp + 0x0000001C:word32]
	ebx = Mem0[esp + 0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn0040AB30 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	goto l00405594
	// succ:  l00405594
l004060FD:
	eax = 0x00000004
	ecx = 0x00416484
	edx = edi
	esp = esp + 0x00000000
	// succ:  l00406110
l00406110:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l0040612C
	// succ:  l00406116 l0040612C
l00406116:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l00406110
	// succ:  l00406124 l00406110
l00406124:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406189
	// succ:  l0040612C l00406189
l0040612C:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l0040617B
	// succ:  l00406136 l0040617B
l00406136:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406189
	// succ:  l00406143 l00406189
l00406143:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l0040617B
	// succ:  l0040614D l0040617B
l0040614D:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406189
	// succ:  l0040615A l00406189
l0040615A:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l0040617B
	// succ:  l00406164 l0040617B
l00406164:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406189
	// succ:  l00406171 l00406189
l00406171:
	ecx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ecx
	SCZO = cond(esi)
	branch Test(EQ,Z) l00406189
	// succ:  l0040617B l00406189
l0040617B:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l0040618B
	// succ:  l00406184 l0040618B
l00406184:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l0040618B
	// succ:  l0040618B
l00406189:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l0040618B
l0040618B:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l004061A7
	// succ:  l0040618F l004061A7
l0040618F:
	edx = Mem0[esp + 0x0000001C:word32]
	ebx = Mem0[esp + 0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn0040ACE0 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	goto l00405594
	// succ:  l00405594
l004061A7:
	eax = 0x00000004
	ecx = 0x00416494
	edx = edi
	// succ:  l004061B3
l004061B3:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l004061CF
	// succ:  l004061B9 l004061CF
l004061B9:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l004061B3
	// succ:  l004061C7 l004061B3
l004061C7:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040622C
	// succ:  l004061CF l0040622C
l004061CF:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l0040621E
	// succ:  l004061D9 l0040621E
l004061D9:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040622C
	// succ:  l004061E6 l0040622C
l004061E6:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l0040621E
	// succ:  l004061F0 l0040621E
l004061F0:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040622C
	// succ:  l004061FD l0040622C
l004061FD:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l0040621E
	// succ:  l00406207 l0040621E
l00406207:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040622C
	// succ:  l00406214 l0040622C
l00406214:
	esi = (word32) Mem0[edx:byte]
	eax = (word32) Mem0[ecx:byte]
	esi = esi - eax
	SCZO = cond(esi)
	branch Test(EQ,Z) l0040622C
	// succ:  l0040621E l0040622C
l0040621E:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l0040622E
	// succ:  l00406227 l0040622E
l00406227:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l0040622E
	// succ:  l0040622E
l0040622C:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l0040622E
l0040622E:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0040624A
	// succ:  l00406232 l0040624A
l00406232:
	ecx = Mem0[esp + 0x0000001C:word32]
	ebx = Mem0[esp + 0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn0040BCC0 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	goto l00405594
	// succ:  l00405594
l0040624A:
	eax = 0x00000004
	ecx = 0x0041649C
	edx = edi
	// succ:  l00406256
l00406256:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l00406272
	// succ:  l0040625C l00406272
l0040625C:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l00406256
	// succ:  l0040626A l00406256
l0040626A:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004062CF
	// succ:  l00406272 l004062CF
l00406272:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l004062C1
	// succ:  l0040627C l004062C1
l0040627C:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004062CF
	// succ:  l00406289 l004062CF
l00406289:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l004062C1
	// succ:  l00406293 l004062C1
l00406293:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004062CF
	// succ:  l004062A0 l004062CF
l004062A0:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l004062C1
	// succ:  l004062AA l004062C1
l004062AA:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004062CF
	// succ:  l004062B7 l004062CF
l004062B7:
	eax = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - eax
	SCZO = cond(esi)
	branch Test(EQ,Z) l004062CF
	// succ:  l004062C1 l004062CF
l004062C1:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l004062D1
	// succ:  l004062CA l004062D1
l004062CA:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l004062D1
	// succ:  l004062D1
l004062CF:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l004062D1
l004062D1:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l004062ED
	// succ:  l004062D5 l004062ED
l004062D5:
	ecx = Mem0[esp + 0x0000001C:word32]
	ebx = Mem0[esp + 0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn0040BBA0 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	goto l00405594
	// succ:  l00405594
l004062ED:
	eax = 0x00000004
	ecx = 0x004164A4
	edx = edi
	esp = esp + 0x00000000
	// succ:  l00406300
l00406300:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l0040631C
	// succ:  l00406306 l0040631C
l00406306:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l00406300
	// succ:  l00406314 l00406300
l00406314:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406379
	// succ:  l0040631C l00406379
l0040631C:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l0040636B
	// succ:  l00406326 l0040636B
l00406326:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406379
	// succ:  l00406333 l00406379
l00406333:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l0040636B
	// succ:  l0040633D l0040636B
l0040633D:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406379
	// succ:  l0040634A l00406379
l0040634A:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l0040636B
	// succ:  l00406354 l0040636B
l00406354:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406379
	// succ:  l00406361 l00406379
l00406361:
	esi = (word32) Mem0[edx:byte]
	edx = (word32) Mem0[ecx:byte]
	esi = esi - edx
	SCZO = cond(esi)
	branch Test(EQ,Z) l00406379
	// succ:  l0040636B l00406379
l0040636B:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l0040637B
	// succ:  l00406374 l0040637B
l00406374:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l0040637B
	// succ:  l0040637B
l00406379:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l0040637B
l0040637B:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00406397
	// succ:  l0040637F l00406397
l0040637F:
	eax = Mem0[esp + 0x0000001C:word32]
	ebx = Mem0[esp + 0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn0040AF00 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	goto l00405594
	// succ:  l00405594
l00406397:
	eax = 0x00000004
	ecx = 0x004164AC
	edx = edi
	// succ:  l004063A3
l004063A3:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l004063BF
	// succ:  l004063A9 l004063BF
l004063A9:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l004063A3
	// succ:  l004063B7 l004063A3
l004063B7:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040641C
	// succ:  l004063BF l0040641C
l004063BF:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l0040640E
	// succ:  l004063C9 l0040640E
l004063C9:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040641C
	// succ:  l004063D6 l0040641C
l004063D6:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l0040640E
	// succ:  l004063E0 l0040640E
l004063E0:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040641C
	// succ:  l004063ED l0040641C
l004063ED:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l0040640E
	// succ:  l004063F7 l0040640E
l004063F7:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040641C
	// succ:  l00406404 l0040641C
l00406404:
	ecx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ecx
	SCZO = cond(esi)
	branch Test(EQ,Z) l0040641C
	// succ:  l0040640E l0040641C
l0040640E:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l0040641E
	// succ:  l00406417 l0040641E
l00406417:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l0040641E
	// succ:  l0040641E
l0040641C:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l0040641E
l0040641E:
	SZO = cond(eax & eax)
	C = false
	ebx = Mem0[esp + 0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	branch Test(NE,Z) l0040643A
	// succ:  l00406427 l0040643A
l00406427:
	edx = Mem0[esp + 0x00000020:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn0040BDE0 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	goto l00405594
	// succ:  l00405594
l0040643A:
	eax = Mem0[esp + 0x00000020:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn0040BF40 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	goto l00405594
	// succ:  l00405594
l0040644D:
	SCZO = cond(Mem0[ebx + 0x00000126:byte] - 0x03)
	branch Test(NE,Z) l004064A9
	// succ:  l0040645A l004064A9
l0040645A:
	SZO = cond(al & 0x02)
	C = false
	branch Test(NE,Z) l004064A9
	// succ:  l0040645E l004064A9
l0040645E:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416300
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00405510_exit
l00406472:
	esi = Mem0[esp + 0x00000018:word32]
	eax = Mem0[esi + 0x00000068:word32]
	SZO = cond(al & 0x01)
	C = false
	branch Test(NE,Z) l00406484
	// succ:  l0040647D l00406484
l0040647D:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041631C
	goto l00406496
	// succ:  l00406496
l00406484:
	SCZO = cond(Mem0[esi + 0x00000126:byte] - 0x03)
	branch Test(NE,Z) l0040649F
	// succ:  l0040648D l0040649F
l0040648D:
	SZO = cond(al & 0x02)
	C = false
	branch Test(NE,Z) l0040649F
	// succ:  l00406491 l0040649F
l00406491:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416300
	// succ:  l00406496
l00406496:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l0040649F
l0040649F:
	v17 = Mem0[esi + 0x00000068:word32] | 0x00000004
	Mem0[esi + 0x00000068:word32] = v17
	SZO = cond(Mem0[esi + 0x00000068:word32])
	C = false
	Mem0[esi + 0x0000010C:word32] = ebp
	// succ:  l004064A9
l004064A9:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00405510_exit
fn00405510_exit:


// fn004064B0
// Return size: 4
void fn004064B0()
fn004064B0_entry:
	// succ:  l004064B0
l004064B0:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000008:word32]
	SZO = cond(Mem0[esi + 0x0000006C:byte] & 0x40)
	C = false
	branch Test(NE,Z) l004064C4
	// succ:  l004064BB l004064C4
l004064BB:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409A60 (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	// succ:  l004064C4
l004064C4:
	SCZO = cond(Mem0[esi + 0x00000123:byte] - 0x00)
	cl = 0x07
	edx = 0x00000002
	branch Test(EQ,Z) l0040662C
	// succ:  l004064D8 l0040662C
l004064D8:
	SZO = cond(Mem0[esi + 0x00000070:byte] & dl)
	C = false
	branch Test(EQ,Z) l0040662C
	// succ:  l004064E1 l0040662C
l004064E1:
	eax = (word32) Mem0[esi + 0x00000124:byte]
	SCZO = cond(eax - 0x00000006)
	branch Test(UGT,CZ) l0040662C
	// succ:  l004064F1 l0040662C
l004064F1:
	switch (eax) { l004064F8 l00406528 l0040654E l00406588 l004065B8 l004065F7 l0040661F }
	// succ:  l004064F8 l00406528 l0040654E l00406588 l004065B8 l004065F7 l0040661F
l004064F8:
	SZO = cond(Mem0[esi + 0x000000E4:byte] & cl)
	C = false
	branch Test(EQ,Z) l0040662C
	// succ:  l00406504 l0040662C
l00406504:
	eax = Mem0[esp + 0x00000010:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040651D
	// succ:  l0040650C l0040651D
l0040650C:
	ecx = Mem0[0x00416540:word32]
	// succ:  l00406512
l00406512:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	// succ:  l00406513
l00406513:
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409130 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	// succ:  l0040651D
l0040651D:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn0040C120 (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004064B0_exit
l00406528:
	SZO = cond(Mem0[esi + 0x000000E4:byte] & cl)
	C = false
	branch Test(NE,Z) l0040653D
	// succ:  l00406530 l0040653D
l00406530:
	SCZO = cond(Mem0[esi + 0x000000C8:word32] - 0x00000005)
	branch Test(UGE,C) l0040662C
	// succ:  l0040653D l0040662C
l0040653D:
	eax = Mem0[esp + 0x00000010:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040651D
	// succ:  l00406545 l0040651D
l00406545:
	edx = Mem0[0x00416544:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	goto l00406513
	// succ:  l00406513
l0040654E:
	eax = Mem0[esi + 0x000000E4:word32]
	edx = eax
	dl = dl & cl
	SZO = cond(dl)
	C = false
	SCZO = cond(dl - 0x04)
	branch Test(EQ,Z) l0040662C
	// succ:  l00406561 l0040662C
l00406561:
	ecx = Mem0[esp + 0x00000010:word32]
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l0040651D
	// succ:  l00406569 l0040651D
l00406569:
	SZO = cond(al & 0x04)
	C = false
	branch Test(EQ,Z) l0040651D
	// succ:  l0040656D l0040651D
l0040656D:
	eax = Mem0[0x00416548:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409130 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn0040C120 (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004064B0_exit
l00406588:
	eax = 0x00000003
	SZO = cond(Mem0[esi + 0x000000E4:byte] & al)
	C = false
	branch Test(NE,Z) l004065A1
	// succ:  l00406595 l004065A1
l00406595:
	SCZO = cond(Mem0[esi + 0x000000C8:word32] - eax)
	branch Test(UGE,C) l0040662C
	// succ:  l004065A1 l0040662C
l004065A1:
	eax = Mem0[esp + 0x00000010:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040651D
	// succ:  l004065AD l0040651D
l004065AD:
	ecx = Mem0[0x0041654C:word32]
	goto l00406512
	// succ:  l00406512
l004065B8:
	eax = Mem0[esi + 0x000000E4:word32]
	ecx = eax
	cl = cl & 0x03
	SZO = cond(cl)
	C = false
	SCZO = cond(cl - dl)
	branch Test(EQ,Z) l0040662C
	// succ:  l004065C7 l0040662C
l004065C7:
	ecx = Mem0[esp + 0x00000010:word32]
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l0040651D
	// succ:  l004065D3 l0040651D
l004065D3:
	SZO = cond(dl & al)
	C = false
	branch Test(EQ,Z) l0040651D
	// succ:  l004065DB l0040651D
l004065DB:
	edx = Mem0[0x00416550:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409130 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn0040C120 (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004064B0_exit
l004065F7:
	SZO = cond(Mem0[esi + 0x000000E4:byte] & 0x01)
	C = false
	branch Test(NE,Z) l00406608
	// succ:  l00406600 l00406608
l00406600:
	SCZO = cond(Mem0[esi + 0x000000C8:word32] - edx)
	branch Test(UGE,C) l0040662C
	// succ:  l00406608 l0040662C
l00406608:
	eax = Mem0[esp + 0x00000010:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040651D
	// succ:  l00406614 l0040651D
l00406614:
	ecx = Mem0[0x00416554:word32]
	goto l00406512
	// succ:  l00406512
l0040661F:
	SZO = cond(Mem0[esi + 0x000000E4:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l0040651D
	// succ:  l0040662C l0040651D
l0040662C:
	SZO = cond(Mem0[esi + 0x00000068:byte] & 0x04)
	C = false
	branch Test(NE,Z) l00406640
	SZO = cond(Mem0[esi + 0x00000068:byte] & 0x04)
	C = false
	branch Test(NE,Z) l00406640
	// succ:  l00406632 l00406640
l00406632:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004163B4
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004163B4
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l00406640
l00406640:
	edx = Mem0[esi + 0x000000EC:word32]
	eax = Mem0[esi + 0x000000DC:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	Mem0[esi + 0x00000080:word32] = edx
	Mem0[esi + 0x00000084:word32] = eax
	edi = esi + 0x00000074
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	edi = edi
	// succ:  l00406660
l00406660:
	SCZO = cond(Mem0[esi + 0x00000078:word32] - 0x00000000)
	branch Test(NE,Z) l00406792
	// succ:  l0040666A l00406792
l0040666A:
	SCZO = cond(Mem0[esi + 0x0000010C:word32] - 0x00000000)
	branch Test(NE,Z) l0040675A
	// succ:  l00406677 l0040675A
l00406677:
	ebp = esi + 0x0000011C
	ecx = ecx + 0x00000000
	// succ:  l00406680
l00406680:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000004
	ecx = esp + 0x00000020
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004088C0 (retsize: 4;)
	edx = esp + 0x00000028
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D20 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	Mem0[esi + 0x0000010C:word32] = eax
	call fn00407DD0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408CA0 (retsize: 4;)
	esp = esp + 0x0000002C
	SCZO = cond(esp)
	eax = 0x00000004
	ecx = 0x00416414
	edx = ebp
	// succ:  l004066C4
l004066C4:
	edi = Mem0[edx:word32]
	SCZO = cond(edi - Mem0[ecx:word32])
	branch Test(NE,Z) l004066DC
	// succ:  l004066CA l004066DC
l004066CA:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l004066C4
	// succ:  l004066D8 l004066C4
l004066D8:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406739
	// succ:  l004066DC l00406739
l004066DC:
	edi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	edi = edi - ebx
	SCZO = cond(edi)
	branch Test(NE,Z) l0040672B
	// succ:  l004066E6 l0040672B
l004066E6:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406739
	// succ:  l004066F3 l00406739
l004066F3:
	edi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	edi = edi - ebx
	SCZO = cond(edi)
	branch Test(NE,Z) l0040672B
	// succ:  l004066FD l0040672B
l004066FD:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406739
	// succ:  l0040670A l00406739
l0040670A:
	edi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	edi = edi - ebx
	SCZO = cond(edi)
	branch Test(NE,Z) l0040672B
	// succ:  l00406714 l0040672B
l00406714:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406739
	// succ:  l00406721 l00406739
l00406721:
	edi = (word32) Mem0[edx:byte]
	eax = (word32) Mem0[ecx:byte]
	edi = edi - eax
	SCZO = cond(edi)
	branch Test(EQ,Z) l00406739
	// succ:  l0040672B l00406739
l0040672B:
	SZO = cond(edi & edi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l0040673B
	// succ:  l00406734 l0040673B
l00406734:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l0040673B
	// succ:  l0040673B
l00406739:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l0040673B
l0040673B:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040674D
	// succ:  l0040673F l0040674D
l0040673F:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041639C
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l0040674D
l0040674D:
	SCZO = cond(Mem0[esi + 0x0000010C:word32] - 0x00000000)
	branch Test(EQ,Z) l00406680
	// succ:  l0040675A l00406680
l0040675A:
	eax = Mem0[esi + 0x000000B0:word32]
	ecx = Mem0[esi + 0x0000010C:word32]
	SCZO = cond(eax - ecx)
	edx = Mem0[esi + 0x000000AC:word32]
	edi = esi + 0x00000074
	Mem0[esi + 0x00000078:word32] = eax
	Mem0[edi:word32] = edx
	branch Test(ULE,CZ) l0040677B
	// succ:  l00406778 l0040677B
l00406778:
	Mem0[esi + 0x00000078:word32] = ecx
	// succ:  l0040677B
l0040677B:
	ecx = Mem0[esi + 0x00000078:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408CA0 (retsize: 4;)
	edx = Mem0[esi + 0x00000078:word32]
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	v18 = Mem0[esi + 0x0000010C:word32] - edx
	Mem0[esi + 0x0000010C:word32] = v18
	SCZO = cond(v18)
	// succ:  l00406792
l00406792:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000001
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00412D50 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SCZO = cond(eax - 0x00000001)
	branch Test(EQ,Z) l004067CE
	// succ:  l004067A2 l004067CE
l004067A2:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004067BF
	// succ:  l004067A6 l004067BF
l004067A6:
	eax = Mem0[esi + 0x0000008C:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l004067B5
	// succ:  l004067B0 l004067B5
l004067B0:
	eax = 0x00416388
	// succ:  l004067B5
l004067B5:
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l004067BF
l004067BF:
	SCZO = cond(Mem0[esi + 0x00000084:word32] - 0x00000000)
	branch Test(NE,Z) l00406660
	// succ:  l004067CC l00406660
l004067CC:
	goto l004067FC
	// succ:  l004067FC
l004067CE:
	SCZO = cond(Mem0[esi + 0x00000084:word32] - 0x00000000)
	branch Test(NE,Z) l004067E6
	// succ:  l004067D7 l004067E6
l004067D7:
	SCZO = cond(Mem0[esi + 0x00000078:word32] - 0x00000000)
	branch Test(NE,Z) l004067E6
	// succ:  l004067DD l004067E6
l004067DD:
	SCZO = cond(Mem0[esi + 0x0000010C:word32] - 0x00000000)
	branch Test(EQ,Z) l004067F4
	// succ:  l004067E6 l004067F4
l004067E6:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416370
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l004067F4
l004067F4:
	v19 = Mem0[esi + 0x00000068:word32] | 0x00000008
	Mem0[esi + 0x00000068:word32] = v19
	SZO = cond(Mem0[esi + 0x00000068:word32])
	C = false
	v20 = Mem0[esi + 0x0000006C:word32] | 0x00000020
	Mem0[esi + 0x0000006C:word32] = v20
	SZO = cond(Mem0[esi + 0x0000006C:word32])
	C = false
	// succ:  l004067FC
l004067FC:
	eax = (word32) Mem0[esi + 0x00000126:byte]
	ecx = Mem0[esi + 0x000000E0:word32]
	dl = Mem0[esi + 0x0000012A:byte]
	Mem0[esi + 0x00000108:byte] = al
	eax = (word32) Mem0[esi + 0x00000127:byte]
	Mem0[esi + 0x00000109:byte] = al
	al = Mem0[esi + 0x00000129:byte]
	edi = esi + 0x00000100
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[esi + 0x0000010B:byte] = al
	SCZO = cond(al - 0x08)
	Mem0[edi:word32] = ecx
	Mem0[esi + 0x0000010A:byte] = dl
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = (word32) al
	branch Test(ULT,C) l0040684D
	// succ:  l00406845 l0040684D
l00406845:
	eax = eax >>u 0x00000003
	SCZO = cond(eax)
	eax = eax *s ecx
	SCZO = cond(eax)
	goto l00406856
	// succ:  l00406856
l0040684D:
	eax = eax *s ecx
	SCZO = cond(eax)
	eax = eax + 0x00000007
	SCZO = cond(eax)
	eax = eax >>u 0x00000003
	SCZO = cond(eax)
	// succ:  l00406856
l00406856:
	Mem0[esi + 0x00000104:word32] = eax
	eax = Mem0[esi + 0x000000EC:word32]
	cl = Mem0[eax:byte]
	SZO = cond(cl & cl)
	C = false
	branch Test(EQ,Z) l00406884
	// succ:  l00406868 l00406884
l00406868:
	edx = Mem0[esi + 0x000000E8:word32]
	ecx = (word32) cl
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	edx = edx + 0x00000001
	SCZO = cond(edx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	eax = eax + 0x00000001
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409860 (retsize: 4;)
	esp = esp + 0x00000014
	SCZO = cond(esp)
	// succ:  l00406884
l00406884:
	eax = Mem0[esi + 0x000000D8:word32]
	ecx = Mem0[esi + 0x000000EC:word32]
	edx = Mem0[esi + 0x000000E8:word32]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408AF0 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	SZO = cond(Mem0[esi + 0x00000230:byte] & 0x04)
	C = false
	branch Test(EQ,Z) l004068CA
	// succ:  l004068AE l004068CA
l004068AE:
	SCZO = cond(Mem0[esi + 0x00000238:byte] - 0x40)
	branch Test(NE,Z) l004068CA
	// succ:  l004068B7 l004068CA
l004068B7:
	eax = Mem0[esi + 0x000000EC:word32]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn0040F880 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l004068CA
l004068CA:
	SCZO = cond(Mem0[esi + 0x00000070:word32] - 0x00000000)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	branch Test(NE,Z) l004068DA
	// succ:  l004068D1 l004068DA
l004068D1:
	SZO = cond(Mem0[esi + 0x0000006C:word32] & 0x00400000)
	C = false
	branch Test(EQ,Z) l004068E3
	// succ:  l004068DA l004068E3
l004068DA:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00410530 (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	// succ:  l004068E3
l004068E3:
	SCZO = cond(Mem0[esi + 0x00000123:byte] - 0x00)
	branch Test(EQ,Z) l0040693E
	// succ:  l004068EC l0040693E
l004068EC:
	SZO = cond(Mem0[esi + 0x00000070:byte] & 0x02)
	C = false
	branch Test(EQ,Z) l0040693E
	// succ:  l004068F2 l0040693E
l004068F2:
	SCZO = cond(Mem0[esi + 0x00000124:byte] - 0x06)
	branch Test(UGE,C) l00406904
	// succ:  l004068FB l00406904
l004068FB:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409430 (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	// succ:  l00406904
l00406904:
	eax = Mem0[esp + 0x00000010:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406925
	// succ:  l0040690C l00406925
l0040690C:
	ecx = (word32) Mem0[esi + 0x00000124:byte]
	edx = Mem0[0x00416540 + ecx * 0x00000004:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409130 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	// succ:  l00406925
l00406925:
	eax = Mem0[esp + 0x0000000C:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040696C
	// succ:  l0040692D l0040696C
l0040692D:
	ecx = (word32) Mem0[esi + 0x00000124:byte]
	edx = Mem0[0x00416524 + ecx * 0x00000004:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	goto l00406962
	// succ:  l00406962
l0040693E:
	eax = Mem0[esp + 0x0000000C:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406955
	// succ:  l00406946 l00406955
l00406946:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x000000FF
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409130 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	// succ:  l00406955
l00406955:
	eax = Mem0[esp + 0x00000010:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040696C
	// succ:  l0040695D l0040696C
l0040695D:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x000000FF
	// succ:  l00406962
l00406962:
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409130 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	// succ:  l0040696C
l0040696C:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn0040C120 (retsize: 4;)
	eax = Mem0[esi + 0x00000198:word32]
	esp = esp + 0x00000004
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406994
	// succ:  l0040697F l00406994
l0040697F:
	ecx = (word32) Mem0[esi + 0x00000124:byte]
	edx = Mem0[esi + 0x000000E4:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call eax (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	// succ:  l00406994
l00406994:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004064B0_exit
fn004064B0_exit:


// fn004069C0
// Return size: 4
void fn004069C0()
fn004069C0_entry:
	// succ:  l004069C0
l004069C0:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = Mem0[esp + 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn004109D0 (retsize: 4;)
	ebp = Mem0[ebx + 0x000000CC:word32]
	esp = esp + 0x00000004
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	Mem0[ebx + 0x000000D0:word32] = ebp
	branch Test(LE,SZO) l00406A0F
	// succ:  l004069DF l00406A0F
l004069DF:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	Mem0[esp + 0x00000010:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	// succ:  l004069E5
l004069E5:
	SZO = cond(ebp & ebp)
	C = false
	esi = Mem0[esp + 0x00000018:word32]
	branch Test(ULE,CZ) l00406A06
	// succ:  l004069ED l00406A06
l004069ED:
	edi = ebp
	// succ:  l004069F0
l004069F0:
	eax = Mem0[esi:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn004064B0 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	esi = esi + 0x00000004
	SCZO = cond(esi)
	edi = edi - 0x00000001
	SCZO = cond(edi)
	branch Test(NE,Z) l004069F0
	// succ:  l00406A06 l004069F0
l00406A06:
	v13 = Mem0[esp + 0x00000014:word32] - 0x00000001
	Mem0[esp + 0x00000014:word32] = v13
	SCZO = cond(v13)
	branch Test(NE,Z) l004069E5
	// succ:  l00406A0D l004069E5
l00406A0D:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00406A0F
l00406A0F:
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004069C0_exit
fn004069C0_exit:


// fn00406A20
// Return size: 4
void fn00406A20()
fn00406A20_entry:
	// succ:  l00406A20
l00406A20:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = Mem0[esp + 0x00000010:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	edi = ebp + 0x0000011C
	ebx = ebx + 0x00000000
	// succ:  l00406A40
l00406A40:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000004
	eax = esp + 0x00000014
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	call fn004088C0 (retsize: 4;)
	ecx = esp + 0x0000001C
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	call fn00409D20 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	Mem0[esp + 0x00000030:word32] = eax
	call fn00407DD0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	call fn00408CA0 (retsize: 4;)
	esp = esp + 0x00000024
	SCZO = cond(esp)
	eax = 0x00000004
	ecx = 0x0041640C
	edx = edi
	ebx = ebx + 0x00000000
	// succ:  l00406A80
l00406A80:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l00406A98
	// succ:  l00406A86 l00406A98
l00406A86:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l00406A80
	// succ:  l00406A94 l00406A80
l00406A94:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406AF5
	// succ:  l00406A98 l00406AF5
l00406A98:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00406AE7
	// succ:  l00406AA2 l00406AE7
l00406AA2:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406AF5
	// succ:  l00406AAF l00406AF5
l00406AAF:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00406AE7
	// succ:  l00406AB9 l00406AE7
l00406AB9:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406AF5
	// succ:  l00406AC6 l00406AF5
l00406AC6:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00406AE7
	// succ:  l00406AD0 l00406AE7
l00406AD0:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406AF5
	// succ:  l00406ADD l00406AF5
l00406ADD:
	eax = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - eax
	SCZO = cond(esi)
	branch Test(EQ,Z) l00406AF5
	// succ:  l00406AE7 l00406AF5
l00406AE7:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l00406AF7
	// succ:  l00406AF0 l00406AF7
l00406AF0:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l00406AF7
	// succ:  l00406AF7
l00406AF5:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l00406AF7
l00406AF7:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00406B10
	// succ:  l00406AFB l00406B10
l00406AFB:
	ecx = Mem0[esp + 0x00000018:word32]
	edx = Mem0[esp + 0x0000001C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	call fn00409E10 (retsize: 4;)
	goto l00407871
	// succ:  l00407871
l00406B10:
	eax = 0x00000004
	ecx = 0x0041641C
	edx = edi
	esp = esp + 0x00000000
	// succ:  l00406B20
l00406B20:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l00406B38
	// succ:  l00406B26 l00406B38
l00406B26:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l00406B20
	// succ:  l00406B34 l00406B20
l00406B34:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406B95
	// succ:  l00406B38 l00406B95
l00406B38:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00406B87
	// succ:  l00406B42 l00406B87
l00406B42:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406B95
	// succ:  l00406B4F l00406B95
l00406B4F:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00406B87
	// succ:  l00406B59 l00406B87
l00406B59:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406B95
	// succ:  l00406B66 l00406B95
l00406B66:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00406B87
	// succ:  l00406B70 l00406B87
l00406B70:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406B95
	// succ:  l00406B7D l00406B95
l00406B7D:
	esi = (word32) Mem0[edx:byte]
	eax = (word32) Mem0[ecx:byte]
	esi = esi - eax
	SCZO = cond(esi)
	branch Test(EQ,Z) l00406B95
	// succ:  l00406B87 l00406B95
l00406B87:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l00406B97
	// succ:  l00406B90 l00406B97
l00406B90:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l00406B97
	// succ:  l00406B97
l00406B95:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l00406B97
l00406B97:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00406BB0
	// succ:  l00406B9B l00406BB0
l00406B9B:
	ecx = Mem0[esp + 0x00000018:word32]
	edx = Mem0[esp + 0x0000001C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	call fn0040A120 (retsize: 4;)
	goto l00407871
	// succ:  l00407871
l00406BB0:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	call fn004082A0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	ecx = 0x00416414
	edx = edi
	eax = 0x00000004
	branch Test(EQ,Z) l00406D18
	// succ:  l00406BCE l00406D18
l00406BCE:
	edi = edi
	// succ:  l00406BD0
l00406BD0:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l00406BE8
	// succ:  l00406BD6 l00406BE8
l00406BD6:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l00406BD0
	// succ:  l00406BE4 l00406BD0
l00406BE4:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406C45
	// succ:  l00406BE8 l00406C45
l00406BE8:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00406C37
	// succ:  l00406BF2 l00406C37
l00406BF2:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406C45
	// succ:  l00406BFF l00406C45
l00406BFF:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00406C37
	// succ:  l00406C09 l00406C37
l00406C09:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406C45
	// succ:  l00406C16 l00406C45
l00406C16:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00406C37
	// succ:  l00406C20 l00406C37
l00406C20:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406C45
	// succ:  l00406C2D l00406C45
l00406C2D:
	eax = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - eax
	SCZO = cond(esi)
	branch Test(EQ,Z) l00406C45
	// succ:  l00406C37 l00406C45
l00406C37:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l00406C47
	// succ:  l00406C40 l00406C47
l00406C40:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l00406C47
	// succ:  l00406C47
l00406C45:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l00406C47
l00406C47:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00406C67
	// succ:  l00406C4B l00406C67
l00406C4B:
	SCZO = cond(Mem0[esp + 0x00000018:word32] - eax)
	branch Test(UGT,CZ) l00406C57
	// succ:  l00406C51 l00406C57
l00406C51:
	SZO = cond(Mem0[ebp + 0x00000068:byte] & 0x08)
	C = false
	branch Test(EQ,Z) l00406C6B
	// succ:  l00406C57 l00406C6B
l00406C57:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004163D8
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	goto l00406C6B
	// succ:  l00406C6B
l00406C67:
	v15 = Mem0[ebp + 0x00000068:word32] | 0x00000008
	Mem0[ebp + 0x00000068:word32] = v15
	SZO = cond(Mem0[ebp + 0x00000068:word32])
	C = false
	// succ:  l00406C6B
l00406C6B:
	ecx = Mem0[esp + 0x00000018:word32]
	edx = Mem0[esp + 0x0000001C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	call fn0040BF40 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	eax = 0x00000004
	ecx = 0x00416424
	edx = edi
	ebx = ebx + 0x00000000
	// succ:  l00406C90
l00406C90:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l00406CA8
	// succ:  l00406C96 l00406CA8
l00406C96:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l00406C90
	// succ:  l00406CA4 l00406C90
l00406CA4:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406D05
	// succ:  l00406CA8 l00406D05
l00406CA8:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00406CF7
	// succ:  l00406CB2 l00406CF7
l00406CB2:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406D05
	// succ:  l00406CBF l00406D05
l00406CBF:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00406CF7
	// succ:  l00406CC9 l00406CF7
l00406CC9:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406D05
	// succ:  l00406CD6 l00406D05
l00406CD6:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00406CF7
	// succ:  l00406CE0 l00406CF7
l00406CE0:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406D05
	// succ:  l00406CED l00406D05
l00406CED:
	esi = (word32) Mem0[edx:byte]
	eax = (word32) Mem0[ecx:byte]
	esi = esi - eax
	SCZO = cond(esi)
	branch Test(EQ,Z) l00406D05
	// succ:  l00406CF7 l00406D05
l00406CF7:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l00406D07
	// succ:  l00406D00 l00406D07
l00406D00:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l00406D07
	// succ:  l00406D07
l00406D05:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l00406D07
l00406D07:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00407874
	// succ:  l00406D0F l00407874
l00406D0F:
	v16 = Mem0[ebp + 0x00000068:word32] | 0x00000002
	Mem0[ebp + 0x00000068:word32] = v16
	SZO = cond(Mem0[ebp + 0x00000068:word32])
	C = false
	goto l00407874
	// succ:  l00407874
l00406D18:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l00406D30
	// succ:  l00406D1E l00406D30
l00406D1E:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l00406D18
	// succ:  l00406D2C l00406D18
l00406D2C:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406D8D
	// succ:  l00406D30 l00406D8D
l00406D30:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00406D7F
	// succ:  l00406D3A l00406D7F
l00406D3A:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406D8D
	// succ:  l00406D47 l00406D8D
l00406D47:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00406D7F
	// succ:  l00406D51 l00406D7F
l00406D51:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406D8D
	// succ:  l00406D5E l00406D8D
l00406D5E:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00406D7F
	// succ:  l00406D68 l00406D7F
l00406D68:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406D8D
	// succ:  l00406D75 l00406D8D
l00406D75:
	ecx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ecx
	SCZO = cond(esi)
	branch Test(EQ,Z) l00406D8D
	// succ:  l00406D7F l00406D8D
l00406D7F:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l00406D8F
	// succ:  l00406D88 l00406D8F
l00406D88:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l00406D8F
	// succ:  l00406D8F
l00406D8D:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l00406D8F
l00406D8F:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00406DBE
	// succ:  l00406D93 l00406DBE
l00406D93:
	esi = Mem0[esp + 0x00000018:word32]
	SZO = cond(esi & esi)
	C = false
	branch Test(UGT,CZ) l00406DA1
	// succ:  l00406D9B l00406DA1
l00406D9B:
	SZO = cond(Mem0[ebp + 0x00000068:byte] & 0x08)
	C = false
	branch Test(EQ,Z) l00406DAF
	// succ:  l00406DA1 l00406DAF
l00406DA1:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004163D8
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l00406DAF
l00406DAF:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	goto l00407874
	// succ:  l00407874
l00406DBE:
	eax = 0x00000004
	ecx = 0x00416424
	edx = edi
	ebx = ebx + 0x00000000
	// succ:  l00406DD0
l00406DD0:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l00406DE8
	// succ:  l00406DD6 l00406DE8
l00406DD6:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l00406DD0
	// succ:  l00406DE4 l00406DD0
l00406DE4:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406E45
	// succ:  l00406DE8 l00406E45
l00406DE8:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00406E37
	// succ:  l00406DF2 l00406E37
l00406DF2:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406E45
	// succ:  l00406DFF l00406E45
l00406DFF:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00406E37
	// succ:  l00406E09 l00406E37
l00406E09:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406E45
	// succ:  l00406E16 l00406E45
l00406E16:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00406E37
	// succ:  l00406E20 l00406E37
l00406E20:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406E45
	// succ:  l00406E2D l00406E45
l00406E2D:
	esi = (word32) Mem0[edx:byte]
	edx = (word32) Mem0[ecx:byte]
	esi = esi - edx
	SCZO = cond(esi)
	branch Test(EQ,Z) l00406E45
	// succ:  l00406E37 l00406E45
l00406E37:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l00406E47
	// succ:  l00406E40 l00406E47
l00406E40:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l00406E47
	// succ:  l00406E47
l00406E45:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l00406E47
l00406E47:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00406E60
	// succ:  l00406E4B l00406E60
l00406E4B:
	eax = Mem0[esp + 0x00000018:word32]
	ecx = Mem0[esp + 0x0000001C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	call fn00409F90 (retsize: 4;)
	goto l00407871
	// succ:  l00407871
l00406E60:
	eax = 0x00000004
	ecx = 0x0041642C
	edx = edi
	esp = esp + 0x00000000
	// succ:  l00406E70
l00406E70:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l00406E88
	// succ:  l00406E76 l00406E88
l00406E76:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l00406E70
	// succ:  l00406E84 l00406E70
l00406E84:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406EE5
	// succ:  l00406E88 l00406EE5
l00406E88:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00406ED7
	// succ:  l00406E92 l00406ED7
l00406E92:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406EE5
	// succ:  l00406E9F l00406EE5
l00406E9F:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00406ED7
	// succ:  l00406EA9 l00406ED7
l00406EA9:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406EE5
	// succ:  l00406EB6 l00406EE5
l00406EB6:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00406ED7
	// succ:  l00406EC0 l00406ED7
l00406EC0:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406EE5
	// succ:  l00406ECD l00406EE5
l00406ECD:
	eax = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - eax
	SCZO = cond(esi)
	branch Test(EQ,Z) l00406EE5
	// succ:  l00406ED7 l00406EE5
l00406ED7:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l00406EE7
	// succ:  l00406EE0 l00406EE7
l00406EE0:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l00406EE7
	// succ:  l00406EE7
l00406EE5:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l00406EE7
l00406EE7:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00406F00
	// succ:  l00406EEB l00406F00
l00406EEB:
	ecx = Mem0[esp + 0x00000018:word32]
	edx = Mem0[esp + 0x0000001C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	call fn0040B150 (retsize: 4;)
	goto l00407871
	// succ:  l00407871
l00406F00:
	eax = 0x00000004
	ecx = 0x00416434
	edx = edi
	esp = esp + 0x00000000
	// succ:  l00406F10
l00406F10:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l00406F28
	// succ:  l00406F16 l00406F28
l00406F16:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l00406F10
	// succ:  l00406F24 l00406F10
l00406F24:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406F85
	// succ:  l00406F28 l00406F85
l00406F28:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00406F77
	// succ:  l00406F32 l00406F77
l00406F32:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406F85
	// succ:  l00406F3F l00406F85
l00406F3F:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00406F77
	// succ:  l00406F49 l00406F77
l00406F49:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406F85
	// succ:  l00406F56 l00406F85
l00406F56:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00406F77
	// succ:  l00406F60 l00406F77
l00406F60:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00406F85
	// succ:  l00406F6D l00406F85
l00406F6D:
	esi = (word32) Mem0[edx:byte]
	eax = (word32) Mem0[ecx:byte]
	esi = esi - eax
	SCZO = cond(esi)
	branch Test(EQ,Z) l00406F85
	// succ:  l00406F77 l00406F85
l00406F77:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l00406F87
	// succ:  l00406F80 l00406F87
l00406F80:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l00406F87
	// succ:  l00406F87
l00406F85:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l00406F87
l00406F87:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00406FA0
	// succ:  l00406F8B l00406FA0
l00406F8B:
	ecx = Mem0[esp + 0x00000018:word32]
	edx = Mem0[esp + 0x0000001C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	call fn0040A450 (retsize: 4;)
	goto l00407871
	// succ:  l00407871
l00406FA0:
	eax = 0x00000004
	ecx = 0x0041643C
	edx = edi
	esp = esp + 0x00000000
	// succ:  l00406FB0
l00406FB0:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l00406FC8
	// succ:  l00406FB6 l00406FC8
l00406FB6:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l00406FB0
	// succ:  l00406FC4 l00406FB0
l00406FC4:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407025
	// succ:  l00406FC8 l00407025
l00406FC8:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00407017
	// succ:  l00406FD2 l00407017
l00406FD2:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407025
	// succ:  l00406FDF l00407025
l00406FDF:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00407017
	// succ:  l00406FE9 l00407017
l00406FE9:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407025
	// succ:  l00406FF6 l00407025
l00406FF6:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00407017
	// succ:  l00407000 l00407017
l00407000:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407025
	// succ:  l0040700D l00407025
l0040700D:
	eax = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - eax
	SCZO = cond(esi)
	branch Test(EQ,Z) l00407025
	// succ:  l00407017 l00407025
l00407017:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l00407027
	// succ:  l00407020 l00407027
l00407020:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l00407027
	// succ:  l00407027
l00407025:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l00407027
l00407027:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00407040
	// succ:  l0040702B l00407040
l0040702B:
	ecx = Mem0[esp + 0x00000018:word32]
	edx = Mem0[esp + 0x0000001C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	call fn0040A170 (retsize: 4;)
	goto l00407871
	// succ:  l00407871
l00407040:
	eax = 0x00000004
	ecx = 0x00416444
	edx = edi
	esp = esp + 0x00000000
	// succ:  l00407050
l00407050:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l00407068
	// succ:  l00407056 l00407068
l00407056:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l00407050
	// succ:  l00407064 l00407050
l00407064:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004070C5
	// succ:  l00407068 l004070C5
l00407068:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l004070B7
	// succ:  l00407072 l004070B7
l00407072:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004070C5
	// succ:  l0040707F l004070C5
l0040707F:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l004070B7
	// succ:  l00407089 l004070B7
l00407089:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004070C5
	// succ:  l00407096 l004070C5
l00407096:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l004070B7
	// succ:  l004070A0 l004070B7
l004070A0:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004070C5
	// succ:  l004070AD l004070C5
l004070AD:
	esi = (word32) Mem0[edx:byte]
	eax = (word32) Mem0[ecx:byte]
	esi = esi - eax
	SCZO = cond(esi)
	branch Test(EQ,Z) l004070C5
	// succ:  l004070B7 l004070C5
l004070B7:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l004070C7
	// succ:  l004070C0 l004070C7
l004070C0:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l004070C7
	// succ:  l004070C7
l004070C5:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l004070C7
l004070C7:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l004070E0
	// succ:  l004070CB l004070E0
l004070CB:
	ecx = Mem0[esp + 0x00000018:word32]
	edx = Mem0[esp + 0x0000001C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	call fn0040B390 (retsize: 4;)
	goto l00407871
	// succ:  l00407871
l004070E0:
	eax = 0x00000004
	ecx = 0x0041645C
	edx = edi
	esp = esp + 0x00000000
	// succ:  l004070F0
l004070F0:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l00407108
	// succ:  l004070F6 l00407108
l004070F6:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l004070F0
	// succ:  l00407104 l004070F0
l00407104:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407165
	// succ:  l00407108 l00407165
l00407108:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00407157
	// succ:  l00407112 l00407157
l00407112:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407165
	// succ:  l0040711F l00407165
l0040711F:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00407157
	// succ:  l00407129 l00407157
l00407129:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407165
	// succ:  l00407136 l00407165
l00407136:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00407157
	// succ:  l00407140 l00407157
l00407140:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407165
	// succ:  l0040714D l00407165
l0040714D:
	eax = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - eax
	SCZO = cond(esi)
	branch Test(EQ,Z) l00407165
	// succ:  l00407157 l00407165
l00407157:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l00407167
	// succ:  l00407160 l00407167
l00407160:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l00407167
	// succ:  l00407167
l00407165:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l00407167
l00407167:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00407180
	// succ:  l0040716B l00407180
l0040716B:
	ecx = Mem0[esp + 0x00000018:word32]
	edx = Mem0[esp + 0x0000001C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	call fn0040B650 (retsize: 4;)
	goto l00407871
	// succ:  l00407871
l00407180:
	eax = 0x00000004
	ecx = 0x00416464
	edx = edi
	esp = esp + 0x00000000
	// succ:  l00407190
l00407190:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l004071A8
	// succ:  l00407196 l004071A8
l00407196:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l00407190
	// succ:  l004071A4 l00407190
l004071A4:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407205
	// succ:  l004071A8 l00407205
l004071A8:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l004071F7
	// succ:  l004071B2 l004071F7
l004071B2:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407205
	// succ:  l004071BF l00407205
l004071BF:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l004071F7
	// succ:  l004071C9 l004071F7
l004071C9:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407205
	// succ:  l004071D6 l00407205
l004071D6:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l004071F7
	// succ:  l004071E0 l004071F7
l004071E0:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407205
	// succ:  l004071ED l00407205
l004071ED:
	esi = (word32) Mem0[edx:byte]
	eax = (word32) Mem0[ecx:byte]
	esi = esi - eax
	SCZO = cond(esi)
	branch Test(EQ,Z) l00407205
	// succ:  l004071F7 l00407205
l004071F7:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l00407207
	// succ:  l00407200 l00407207
l00407200:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l00407207
	// succ:  l00407207
l00407205:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l00407207
l00407207:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00407220
	// succ:  l0040720B l00407220
l0040720B:
	ecx = Mem0[esp + 0x00000018:word32]
	edx = Mem0[esp + 0x0000001C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	call fn0040B780 (retsize: 4;)
	goto l00407871
	// succ:  l00407871
l00407220:
	eax = 0x00000004
	ecx = 0x0041646C
	edx = edi
	esp = esp + 0x00000000
	// succ:  l00407230
l00407230:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l00407248
	// succ:  l00407236 l00407248
l00407236:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l00407230
	// succ:  l00407244 l00407230
l00407244:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004072A5
	// succ:  l00407248 l004072A5
l00407248:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00407297
	// succ:  l00407252 l00407297
l00407252:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004072A5
	// succ:  l0040725F l004072A5
l0040725F:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00407297
	// succ:  l00407269 l00407297
l00407269:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004072A5
	// succ:  l00407276 l004072A5
l00407276:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00407297
	// succ:  l00407280 l00407297
l00407280:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004072A5
	// succ:  l0040728D l004072A5
l0040728D:
	eax = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - eax
	SCZO = cond(esi)
	branch Test(EQ,Z) l004072A5
	// succ:  l00407297 l004072A5
l00407297:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l004072A7
	// succ:  l004072A0 l004072A7
l004072A0:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l004072A7
	// succ:  l004072A7
l004072A5:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l004072A7
l004072A7:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l004072C0
	// succ:  l004072AB l004072C0
l004072AB:
	ecx = Mem0[esp + 0x00000018:word32]
	edx = Mem0[esp + 0x0000001C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	call fn0040B9E0 (retsize: 4;)
	goto l00407871
	// succ:  l00407871
l004072C0:
	eax = 0x00000004
	ecx = 0x00416474
	edx = edi
	esp = esp + 0x00000000
	// succ:  l004072D0
l004072D0:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l004072E8
	// succ:  l004072D6 l004072E8
l004072D6:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l004072D0
	// succ:  l004072E4 l004072D0
l004072E4:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407345
	// succ:  l004072E8 l00407345
l004072E8:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00407337
	// succ:  l004072F2 l00407337
l004072F2:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407345
	// succ:  l004072FF l00407345
l004072FF:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00407337
	// succ:  l00407309 l00407337
l00407309:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407345
	// succ:  l00407316 l00407345
l00407316:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00407337
	// succ:  l00407320 l00407337
l00407320:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407345
	// succ:  l0040732D l00407345
l0040732D:
	esi = (word32) Mem0[edx:byte]
	eax = (word32) Mem0[ecx:byte]
	esi = esi - eax
	SCZO = cond(esi)
	branch Test(EQ,Z) l00407345
	// succ:  l00407337 l00407345
l00407337:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l00407347
	// succ:  l00407340 l00407347
l00407340:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l00407347
	// succ:  l00407347
l00407345:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l00407347
l00407347:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00407360
	// succ:  l0040734B l00407360
l0040734B:
	ecx = Mem0[esp + 0x00000018:word32]
	edx = Mem0[esp + 0x0000001C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	call fn0040B530 (retsize: 4;)
	goto l00407871
	// succ:  l00407871
l00407360:
	eax = 0x00000004
	ecx = 0x0041647C
	edx = edi
	esp = esp + 0x00000000
	// succ:  l00407370
l00407370:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l00407388
	// succ:  l00407376 l00407388
l00407376:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l00407370
	// succ:  l00407384 l00407370
l00407384:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004073E5
	// succ:  l00407388 l004073E5
l00407388:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l004073D7
	// succ:  l00407392 l004073D7
l00407392:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004073E5
	// succ:  l0040739F l004073E5
l0040739F:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l004073D7
	// succ:  l004073A9 l004073D7
l004073A9:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004073E5
	// succ:  l004073B6 l004073E5
l004073B6:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l004073D7
	// succ:  l004073C0 l004073D7
l004073C0:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004073E5
	// succ:  l004073CD l004073E5
l004073CD:
	eax = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - eax
	SCZO = cond(esi)
	branch Test(EQ,Z) l004073E5
	// succ:  l004073D7 l004073E5
l004073D7:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l004073E7
	// succ:  l004073E0 l004073E7
l004073E0:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l004073E7
	// succ:  l004073E7
l004073E5:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l004073E7
l004073E7:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00407400
	// succ:  l004073EB l00407400
l004073EB:
	ecx = Mem0[esp + 0x00000018:word32]
	edx = Mem0[esp + 0x0000001C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	call fn0040A2E0 (retsize: 4;)
	goto l00407871
	// succ:  l00407871
l00407400:
	eax = 0x00000004
	ecx = 0x0041648C
	edx = edi
	esp = esp + 0x00000000
	// succ:  l00407410
l00407410:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l00407428
	// succ:  l00407416 l00407428
l00407416:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l00407410
	// succ:  l00407424 l00407410
l00407424:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407485
	// succ:  l00407428 l00407485
l00407428:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00407477
	// succ:  l00407432 l00407477
l00407432:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407485
	// succ:  l0040743F l00407485
l0040743F:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00407477
	// succ:  l00407449 l00407477
l00407449:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407485
	// succ:  l00407456 l00407485
l00407456:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00407477
	// succ:  l00407460 l00407477
l00407460:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407485
	// succ:  l0040746D l00407485
l0040746D:
	esi = (word32) Mem0[edx:byte]
	eax = (word32) Mem0[ecx:byte]
	esi = esi - eax
	SCZO = cond(esi)
	branch Test(EQ,Z) l00407485
	// succ:  l00407477 l00407485
l00407477:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l00407487
	// succ:  l00407480 l00407487
l00407480:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l00407487
	// succ:  l00407487
l00407485:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l00407487
l00407487:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l004074A0
	// succ:  l0040748B l004074A0
l0040748B:
	ecx = Mem0[esp + 0x00000018:word32]
	edx = Mem0[esp + 0x0000001C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	call fn0040A940 (retsize: 4;)
	goto l00407871
	// succ:  l00407871
l004074A0:
	eax = 0x00000004
	ecx = 0x0041644C
	edx = edi
	esp = esp + 0x00000000
	// succ:  l004074B0
l004074B0:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l004074C8
	// succ:  l004074B6 l004074C8
l004074B6:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l004074B0
	// succ:  l004074C4 l004074B0
l004074C4:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407525
	// succ:  l004074C8 l00407525
l004074C8:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00407517
	// succ:  l004074D2 l00407517
l004074D2:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407525
	// succ:  l004074DF l00407525
l004074DF:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00407517
	// succ:  l004074E9 l00407517
l004074E9:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407525
	// succ:  l004074F6 l00407525
l004074F6:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00407517
	// succ:  l00407500 l00407517
l00407500:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407525
	// succ:  l0040750D l00407525
l0040750D:
	eax = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - eax
	SCZO = cond(esi)
	branch Test(EQ,Z) l00407525
	// succ:  l00407517 l00407525
l00407517:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l00407527
	// succ:  l00407520 l00407527
l00407520:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l00407527
	// succ:  l00407527
l00407525:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l00407527
l00407527:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00407540
	// succ:  l0040752B l00407540
l0040752B:
	ecx = Mem0[esp + 0x00000018:word32]
	edx = Mem0[esp + 0x0000001C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	call fn0040AB30 (retsize: 4;)
	goto l00407871
	// succ:  l00407871
l00407540:
	eax = 0x00000004
	ecx = 0x00416484
	edx = edi
	esp = esp + 0x00000000
	// succ:  l00407550
l00407550:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l00407568
	// succ:  l00407556 l00407568
l00407556:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l00407550
	// succ:  l00407564 l00407550
l00407564:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004075C5
	// succ:  l00407568 l004075C5
l00407568:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l004075B7
	// succ:  l00407572 l004075B7
l00407572:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004075C5
	// succ:  l0040757F l004075C5
l0040757F:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l004075B7
	// succ:  l00407589 l004075B7
l00407589:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004075C5
	// succ:  l00407596 l004075C5
l00407596:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l004075B7
	// succ:  l004075A0 l004075B7
l004075A0:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004075C5
	// succ:  l004075AD l004075C5
l004075AD:
	esi = (word32) Mem0[edx:byte]
	eax = (word32) Mem0[ecx:byte]
	esi = esi - eax
	SCZO = cond(esi)
	branch Test(EQ,Z) l004075C5
	// succ:  l004075B7 l004075C5
l004075B7:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l004075C7
	// succ:  l004075C0 l004075C7
l004075C0:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l004075C7
	// succ:  l004075C7
l004075C5:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l004075C7
l004075C7:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l004075E0
	// succ:  l004075CB l004075E0
l004075CB:
	ecx = Mem0[esp + 0x00000018:word32]
	edx = Mem0[esp + 0x0000001C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	call fn0040ACE0 (retsize: 4;)
	goto l00407871
	// succ:  l00407871
l004075E0:
	eax = 0x00000004
	ecx = 0x00416494
	edx = edi
	esp = esp + 0x00000000
	// succ:  l004075F0
l004075F0:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l00407608
	// succ:  l004075F6 l00407608
l004075F6:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l004075F0
	// succ:  l00407604 l004075F0
l00407604:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407665
	// succ:  l00407608 l00407665
l00407608:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00407657
	// succ:  l00407612 l00407657
l00407612:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407665
	// succ:  l0040761F l00407665
l0040761F:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00407657
	// succ:  l00407629 l00407657
l00407629:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407665
	// succ:  l00407636 l00407665
l00407636:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00407657
	// succ:  l00407640 l00407657
l00407640:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407665
	// succ:  l0040764D l00407665
l0040764D:
	eax = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - eax
	SCZO = cond(esi)
	branch Test(EQ,Z) l00407665
	// succ:  l00407657 l00407665
l00407657:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l00407667
	// succ:  l00407660 l00407667
l00407660:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l00407667
	// succ:  l00407667
l00407665:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l00407667
l00407667:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00407680
	// succ:  l0040766B l00407680
l0040766B:
	ecx = Mem0[esp + 0x00000018:word32]
	edx = Mem0[esp + 0x0000001C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	call fn0040BCC0 (retsize: 4;)
	goto l00407871
	// succ:  l00407871
l00407680:
	eax = 0x00000004
	ecx = 0x0041649C
	edx = edi
	esp = esp + 0x00000000
	// succ:  l00407690
l00407690:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l004076A8
	// succ:  l00407696 l004076A8
l00407696:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l00407690
	// succ:  l004076A4 l00407690
l004076A4:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407705
	// succ:  l004076A8 l00407705
l004076A8:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l004076F7
	// succ:  l004076B2 l004076F7
l004076B2:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407705
	// succ:  l004076BF l00407705
l004076BF:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l004076F7
	// succ:  l004076C9 l004076F7
l004076C9:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407705
	// succ:  l004076D6 l00407705
l004076D6:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l004076F7
	// succ:  l004076E0 l004076F7
l004076E0:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407705
	// succ:  l004076ED l00407705
l004076ED:
	esi = (word32) Mem0[edx:byte]
	eax = (word32) Mem0[ecx:byte]
	esi = esi - eax
	SCZO = cond(esi)
	branch Test(EQ,Z) l00407705
	// succ:  l004076F7 l00407705
l004076F7:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l00407707
	// succ:  l00407700 l00407707
l00407700:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l00407707
	// succ:  l00407707
l00407705:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l00407707
l00407707:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00407720
	// succ:  l0040770B l00407720
l0040770B:
	ecx = Mem0[esp + 0x00000018:word32]
	edx = Mem0[esp + 0x0000001C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	call fn0040BBA0 (retsize: 4;)
	goto l00407871
	// succ:  l00407871
l00407720:
	eax = 0x00000004
	ecx = 0x004164A4
	edx = edi
	esp = esp + 0x00000000
	// succ:  l00407730
l00407730:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l00407748
	// succ:  l00407736 l00407748
l00407736:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l00407730
	// succ:  l00407744 l00407730
l00407744:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004077A5
	// succ:  l00407748 l004077A5
l00407748:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00407797
	// succ:  l00407752 l00407797
l00407752:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004077A5
	// succ:  l0040775F l004077A5
l0040775F:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00407797
	// succ:  l00407769 l00407797
l00407769:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004077A5
	// succ:  l00407776 l004077A5
l00407776:
	ebx = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l00407797
	// succ:  l00407780 l00407797
l00407780:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004077A5
	// succ:  l0040778D l004077A5
l0040778D:
	eax = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[edx:byte]
	esi = esi - eax
	SCZO = cond(esi)
	branch Test(EQ,Z) l004077A5
	// succ:  l00407797 l004077A5
l00407797:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l004077A7
	// succ:  l004077A0 l004077A7
l004077A0:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l004077A7
	// succ:  l004077A7
l004077A5:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l004077A7
l004077A7:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l004077C0
	// succ:  l004077AB l004077C0
l004077AB:
	ecx = Mem0[esp + 0x00000018:word32]
	edx = Mem0[esp + 0x0000001C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	call fn0040AF00 (retsize: 4;)
	goto l00407871
	// succ:  l00407871
l004077C0:
	eax = 0x00000004
	ecx = 0x004164AC
	edx = edi
	esp = esp + 0x00000000
	// succ:  l004077D0
l004077D0:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l004077EC
	// succ:  l004077D6 l004077EC
l004077D6:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l004077D0
	// succ:  l004077E4 l004077D0
l004077E4:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407849
	// succ:  l004077EC l00407849
l004077EC:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l0040783B
	// succ:  l004077F6 l0040783B
l004077F6:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407849
	// succ:  l00407803 l00407849
l00407803:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l0040783B
	// succ:  l0040780D l0040783B
l0040780D:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407849
	// succ:  l0040781A l00407849
l0040781A:
	esi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[ecx:byte]
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(NE,Z) l0040783B
	// succ:  l00407824 l0040783B
l00407824:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407849
	// succ:  l00407831 l00407849
l00407831:
	esi = (word32) Mem0[edx:byte]
	eax = (word32) Mem0[ecx:byte]
	esi = esi - eax
	SCZO = cond(esi)
	branch Test(EQ,Z) l00407849
	// succ:  l0040783B l00407849
l0040783B:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l0040784B
	// succ:  l00407844 l0040784B
l00407844:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l0040784B
	// succ:  l0040784B
l00407849:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l0040784B
l0040784B:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00407861
	// succ:  l0040784F l00407861
l0040784F:
	ecx = Mem0[esp + 0x00000018:word32]
	edx = Mem0[esp + 0x0000001C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	call fn0040BDE0 (retsize: 4;)
	goto l00407871
	// succ:  l00407871
l00407861:
	eax = Mem0[esp + 0x00000018:word32]
	ecx = Mem0[esp + 0x0000001C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	call fn0040BF40 (retsize: 4;)
	// succ:  l00407871
l00407871:
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	// succ:  l00407874
l00407874:
	SZO = cond(Mem0[ebp + 0x00000068:byte] & 0x10)
	C = false
	branch Test(EQ,Z) l00406A40
	// succ:  l0040787E l00406A40
l0040787E:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00406A20_exit
fn00406A20_exit:


// fn00407890
// Return size: 4
void fn00407890()
fn00407890_entry:
	// succ:  l00407890
l00407890:
	esp = fp
	eax = Mem0[esp + 0x00000008:word32]
	esp = esp - 0x00000040
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = Mem0[esp + 0x00000048:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	branch Test(EQ,Z) l004078AD
	// succ:  l004078A3 l004078AD
l004078A3:
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00408230 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l004078AD
l004078AD:
	eax = Mem0[esp + 0x0000005C:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004078BF
	// succ:  l004078B5 l004078BF
l004078B5:
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00408230 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l004078BF
l004078BF:
	eax = Mem0[ebx + 0x000000AC:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00408BF0 (retsize: 4;)
	ecx = Mem0[ebx + 0x00000250:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00408BF0 (retsize: 4;)
	edx = Mem0[ebx + 0x000000E8:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00408BF0 (retsize: 4;)
	eax = Mem0[ebx + 0x000001EC:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00408BF0 (retsize: 4;)
	ecx = Mem0[ebx + 0x000001F0:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00408BF0 (retsize: 4;)
	edx = Mem0[ebx + 0x00000164:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00408BF0 (retsize: 4;)
	eax = Mem0[ebx + 0x00000168:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00408BF0 (retsize: 4;)
	ecx = Mem0[ebx + 0x0000016C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00408BF0 (retsize: 4;)
	esp = esp + 0x00000040
	SCZO = cond(esp)
	SZO = cond(Mem0[ebx + 0x00000214:word32] & 0x00001000)
	C = false
	branch Test(EQ,Z) l00407946
	// succ:  l00407936 l00407946
l00407936:
	edx = Mem0[ebx + 0x00000114:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00407DC0 (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l00407946
l00407946:
	v14 = Mem0[ebx + 0x00000214:word32] & 0xFFFFEFFF
	Mem0[ebx + 0x00000214:word32] = v14
	SZO = cond(Mem0[ebx + 0x00000214:word32])
	C = false
	SZO = cond(Mem0[ebx + 0x00000214:word32] & 0x00002000)
	C = false
	branch Test(EQ,Z) l0040796C
	// succ:  l0040795C l0040796C
l0040795C:
	eax = Mem0[ebx + 0x00000188:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00408BF0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l0040796C
l0040796C:
	v15 = Mem0[ebx + 0x00000214:word32] & 0xFFFFDFFF
	Mem0[ebx + 0x00000214:word32] = v15
	SZO = cond(Mem0[ebx + 0x00000214:word32])
	C = false
	eax = Mem0[ebx + 0x00000214:word32]
	SZO = cond(al & 0x08)
	C = false
	branch Test(EQ,Z) l00407990
	// succ:  l00407980 l00407990
l00407980:
	ecx = Mem0[ebx + 0x000001F4:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00408BF0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l00407990
l00407990:
	v17 = Mem0[ebx + 0x00000214:word32] & 0xFFFFFFF7
	Mem0[ebx + 0x00000214:word32] = v17
	SZO = cond(Mem0[ebx + 0x00000214:word32])
	C = false
	SCZO = cond(Mem0[ebx + 0x00000170:word32] - 0x00000000)
	branch Test(EQ,Z) l004079EA
	// succ:  l004079A0 l004079EA
l004079A0:
	ecx = 0x00000008
	ecx = ecx - Mem0[ebx + 0x00000158:word32]
	SCZO = cond(ecx)
	esi = 0x00000001
	esi = esi << cl
	SCZO = cond(esi)
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	SZO = cond(esi & esi)
	C = false
	branch Test(LE,SZO) l004079DA
	// succ:  l004079B8 l004079DA
l004079B8:
	// succ:  l004079C0
l004079C0:
	edx = Mem0[ebx + 0x00000170:word32]
	eax = Mem0[edx + edi * 0x00000004:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00408BF0 (retsize: 4;)
	edi = edi + 0x00000001
	SCZO = cond(edi)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SCZO = cond(edi - esi)
	branch Test(LT,SO) l004079C0
	// succ:  l004079DA l004079C0
l004079DA:
	ecx = Mem0[ebx + 0x00000170:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00408BF0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	ecx = Mem0[ebx + 0x00000170:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00408BF0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l004079EA
l004079EA:
	SCZO = cond(Mem0[ebx + 0x00000174:word32] - 0x00000000)
	branch Test(EQ,Z) l00407A3A
	// succ:  l004079F3 l00407A3A
l004079F3:
	ecx = 0x00000008
	ecx = ecx - Mem0[ebx + 0x00000158:word32]
	SCZO = cond(ecx)
	esi = 0x00000001
	esi = esi << cl
	SCZO = cond(esi)
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	SZO = cond(esi & esi)
	C = false
	branch Test(LE,SZO) l00407A2A
	// succ:  l00407A0B l00407A2A
l00407A0B:
	// succ:  l00407A10
l00407A10:
	edx = Mem0[ebx + 0x00000174:word32]
	eax = Mem0[edx + edi * 0x00000004:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00408BF0 (retsize: 4;)
	edi = edi + 0x00000001
	SCZO = cond(edi)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SCZO = cond(edi - esi)
	branch Test(LT,SO) l00407A10
	// succ:  l00407A2A l00407A10
l00407A2A:
	ecx = Mem0[ebx + 0x00000174:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00408BF0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l00407A3A
l00407A3A:
	SCZO = cond(Mem0[ebx + 0x00000178:word32] - 0x00000000)
	branch Test(EQ,Z) l00407A8A
	// succ:  l00407A43 l00407A8A
l00407A43:
	ecx = 0x00000008
	ecx = ecx - Mem0[ebx + 0x00000158:word32]
	SCZO = cond(ecx)
	esi = 0x00000001
	esi = esi << cl
	SCZO = cond(esi)
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	SZO = cond(esi & esi)
	C = false
	branch Test(LE,SZO) l00407A7A
	// succ:  l00407A5B l00407A7A
l00407A5B:
	// succ:  l00407A60
l00407A60:
	edx = Mem0[ebx + 0x00000178:word32]
	eax = Mem0[edx + edi * 0x00000004:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00408BF0 (retsize: 4;)
	edi = edi + 0x00000001
	SCZO = cond(edi)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SCZO = cond(edi - esi)
	branch Test(LT,SO) l00407A60
	// succ:  l00407A7A l00407A60
l00407A7A:
	ecx = Mem0[ebx + 0x00000178:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00408BF0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	ecx = Mem0[ebx + 0x00000178:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00408BF0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l00407A8A
l00407A8A:
	edx = Mem0[ebx + 0x00000210:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00408BF0 (retsize: 4;)
	eax = ebx + 0x00000074
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn00414340 (retsize: 4;)
	ecx = Mem0[ebx + 0x000001B0:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00408BF0 (retsize: 4;)
	edx = Mem0[ebx + 0x000001E4:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00408BF0 (retsize: 4;)
	eax = Mem0[ebx + 0x0000024C:word32]
	ebp = Mem0[ebx + 0x00000048:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0000026C
	ecx = 0x00000010
	esi = ebx
	edi = esp + 0x00000030
	// succ:  l00407AD3
l00407AD3:
	branch ecx == 0x00000000 l00407AD5
	// succ:  l00407AD3_1 l00407AD5
l00407AD3_1:
	v20 = Mem0[esi:word32]
	Mem0[edi:word32] = v20
	esi = esi + 0x00000004
	edi = edi + 0x00000004
	ecx = ecx - 0x00000001
	goto l00407AD3
	// succ:  l00407AD3
l00407AD5:
	esi = Mem0[ebx + 0x00000040:word32]
	edi = Mem0[ebx + 0x00000044:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	Mem0[esp + 0x00000080:word32] = eax
	eax = memset(Mem0[esp:(ptr void)], Mem0[esp + 4:int32], Mem0[esp + 8:size_t])
	ecx = Mem0[esp + 0x00000080:word32]
	Mem0[ebx + 0x00000040:word32] = esi
	Mem0[ebx + 0x00000044:word32] = edi
	Mem0[ebx + 0x0000024C:word32] = ecx
	esp = esp + 0x00000028
	SCZO = cond(esp)
	edi = ebx
	ecx = 0x00000010
	esi = esp + 0x00000010
	// succ:  l00407B0B
l00407B0B:
	branch ecx == 0x00000000 l00407B0D
	// succ:  l00407B0B_1 l00407B0D
l00407B0B_1:
	v21 = Mem0[esi:word32]
	Mem0[edi:word32] = v21
	esi = esi + 0x00000004
	edi = edi + 0x00000004
	ecx = ecx - 0x00000001
	goto l00407B0B
	// succ:  l00407B0B
l00407B0D:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[ebx + 0x00000048:word32] = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000040
	SCZO = cond(esp)
	return
	// succ:  fn00407890_exit
fn00407890_exit:


// fn00407B20
// Return size: 4
void fn00407B20()
fn00407B20_entry:
	// succ:  l00407B20
l00407B20:
	esp = fp
	eax = Mem0[esp + 0x00000010:word32]
	ecx = Mem0[esp + 0x0000000C:word32]
	edx = Mem0[esp + 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = Mem0[esp + 0x00000014:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn004052B0 (retsize: 4;)
	esp = esp + 0x0000001C
	SCZO = cond(esp)
	return
	// succ:  fn00407B20_exit
fn00407B20_exit:


// fn00407B50
// Return size: 4
void fn00407B50()
fn00407B50_entry:
	// succ:  l00407B50
l00407B50:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	eax = Mem0[esp + 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	SZO = cond(eax & eax)
	C = false
	Mem0[esp + 0x00000010:word32] = esi
	branch Test(EQ,Z) l00407B67
	// succ:  l00407B65 l00407B67
l00407B65:
	esi = Mem0[eax:word32]
	// succ:  l00407B67
l00407B67:
	eax = Mem0[esp + 0x0000001C:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407B71
	// succ:  l00407B6F l00407B71
l00407B6F:
	edi = Mem0[eax:word32]
	// succ:  l00407B71
l00407B71:
	eax = Mem0[esp + 0x00000020:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407B7F
	// succ:  l00407B79 l00407B7F
l00407B79:
	eax = Mem0[eax:word32]
	Mem0[esp + 0x00000010:word32] = eax
	// succ:  l00407B7F
l00407B7F:
	ecx = Mem0[esp + 0x00000010:word32]
	ebx = Mem0[esi + 0x0000024C:word32]
	ebp = Mem0[esi + 0x00000244:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00407890 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l00407BC1
	// succ:  l00407B9E l00407BC1
l00407B9E:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0xFFFFFFFF
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00004000
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00407E80 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408A30 (retsize: 4;)
	edx = Mem0[esp + 0x00000038:word32]
	esp = esp + 0x0000001C
	SCZO = cond(esp)
	Mem0[edx:word32] = 0x00000000
	// succ:  l00407BC1
l00407BC1:
	edi = Mem0[esp + 0x00000010:word32]
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l00407BEC
	// succ:  l00407BC9 l00407BEC
l00407BC9:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0xFFFFFFFF
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00004000
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00407E80 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408A30 (retsize: 4;)
	eax = Mem0[esp + 0x0000003C:word32]
	esp = esp + 0x0000001C
	SCZO = cond(esp)
	Mem0[eax:word32] = 0x00000000
	// succ:  l00407BEC
l00407BEC:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408A30 (retsize: 4;)
	ecx = Mem0[esp + 0x00000024:word32]
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[ecx:word32] = 0x00000000
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00407B50_exit
fn00407B50_exit:


// fn00407C10
// Return size: 4
void fn00407C10()
fn00407C10_entry:
	// succ:  l00407C10
l00407C10:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x0000000C:word32]
	SCZO = cond(esi - 0x00000008)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp + 0x0000000C:word32]
	branch Test(LE,SZO) l00407C2D
	// succ:  l00407C1F l00407C2D
l00407C1F:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041658C
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l00407C2D
l00407C2D:
	SZO = cond(esi & esi)
	C = false
	al = Test(LT,SO)
	al = al - 0x01
	SCZO = cond(al)
	eax = eax & esi
	SZO = cond(eax)
	C = false
	Mem0[edi + 0x0000012C:byte] = al
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00407C10_exit
fn00407C10_exit:


// fn00407C40
// Return size: 4
void fn00407C40()
fn00407C40_entry:
	// succ:  l00407C40
l00407C40:
	esp = fp
	esp = esp - 0x0000000C
	SCZO = cond(esp)
	eax = Mem0[0x0041C340:word32]
	eax = eax ^ esp
	SZO = cond(eax)
	C = false
	Mem0[esp + 0x00000008:word32] = eax
	al = 0x0A
	Mem0[esp + 0x00000005:byte] = al
	Mem0[esp + 0x00000007:byte] = al
	eax = Mem0[esp + 0x00000018:word32]
	SCZO = cond(eax - 0x00000008)
	Mem0[esp:byte] = 0x89
	Mem0[esp + 0x00000001:byte] = 0x50
	Mem0[esp + 0x00000002:byte] = 0x4E
	Mem0[esp + 0x00000003:byte] = 0x47
	Mem0[esp + 0x00000004:byte] = 0x0D
	Mem0[esp + 0x00000006:byte] = 0x1A
	branch Test(ULE,CZ) l00407D3C
	// succ:  l00407C82 l00407D3C
l00407C82:
	eax = 0x00000008
	// succ:  l00407C87
l00407C87:
	edx = Mem0[esp + 0x00000014:word32]
	SCZO = cond(edx - 0x00000007)
	branch Test(UGT,CZ) l00407D45
	// succ:  l00407C94 l00407D45
l00407C94:
	ecx = edx + eax
	SCZO = cond(ecx - 0x00000008)
	branch Test(ULE,CZ) l00407CA3
	// succ:  l00407C9C l00407CA3
l00407C9C:
	eax = 0x00000008
	eax = eax - edx
	SCZO = cond(eax)
	// succ:  l00407CA3
l00407CA3:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000014:word32]
	ecx = esp + 0x00000004 + edx
	edx = edx + esi
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	branch Test(ULT,C) l00407CC8
	// succ:  l00407CB4 l00407CC8
l00407CB4:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l00407CD0
	// succ:  l00407CBA l00407CD0
l00407CBA:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l00407CB4
	// succ:  l00407CC8 l00407CB4
l00407CC8:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407D56
	// succ:  l00407CD0 l00407D56
l00407CD0:
	esi = (word32) Mem0[edx:byte]
	edi = (word32) Mem0[ecx:byte]
	esi = esi - edi
	SCZO = cond(esi)
	branch Test(NE,Z) l00407D1F
	// succ:  l00407CDA l00407D1F
l00407CDA:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407D56
	// succ:  l00407CE7 l00407D56
l00407CE7:
	esi = (word32) Mem0[edx:byte]
	edi = (word32) Mem0[ecx:byte]
	esi = esi - edi
	SCZO = cond(esi)
	branch Test(NE,Z) l00407D1F
	// succ:  l00407CF1 l00407D1F
l00407CF1:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407D56
	// succ:  l00407CFE l00407D56
l00407CFE:
	esi = (word32) Mem0[edx:byte]
	edi = (word32) Mem0[ecx:byte]
	esi = esi - edi
	SCZO = cond(esi)
	branch Test(NE,Z) l00407D1F
	// succ:  l00407D08 l00407D1F
l00407D08:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00407D56
	// succ:  l00407D15 l00407D56
l00407D15:
	esi = (word32) Mem0[edx:byte]
	edx = (word32) Mem0[ecx:byte]
	esi = esi - edx
	SCZO = cond(esi)
	branch Test(EQ,Z) l00407D56
	// succ:  l00407D1F l00407D56
l00407D1F:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l00407D58
	// succ:  l00407D28 l00407D58
l00407D28:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp + 0x00000008:word32]
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	return
	// succ:  fn00407C40_exit
l00407D3C:
	SCZO = cond(eax - 0x00000001)
	branch Test(UGE,C) l00407C87
	// succ:  l00407D45 l00407C87
l00407D45:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	ecx = Mem0[esp + 0x00000008:word32]
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	return
	// succ:  fn00407C40_exit
l00407D56:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l00407D58
l00407D58:
	ecx = Mem0[esp + 0x00000010:word32]
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	return
	// succ:  fn00407C40_exit
fn00407C40_exit:


// fn00407DC0
// Return size: 4
void fn00407DC0()
fn00407DC0_entry:
	// succ:  l00407DC0
l00407DC0:
	esp = fp
	// succ:  l00407DC0_thunk_fn00408BF0
l00407DC0_thunk_fn00408BF0:
	call fn00408BF0 (retsize: 4;)
	return
	// succ:  fn00407DC0_exit
fn00407DC0_exit:


// fn00407DD0
// Return size: 4
void fn00407DD0()
fn00407DD0_entry:
	// succ:  l00407DD0
l00407DD0:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	call fn00414630 (retsize: 4;)
	ecx = Mem0[esp + 0x00000010:word32]
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	Mem0[ecx + 0x00000110:word32] = eax
	return
	// succ:  fn00407DD0_exit
fn00407DD0_exit:


// fn00407DF0
// Return size: 4
void fn00407DF0()
fn00407DF0_entry:
	// succ:  l00407DF0
l00407DF0:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000008:word32]
	SZO = cond(Mem0[esi + 0x0000011C:byte] & 0x20)
	C = false
	branch Test(EQ,Z) l00407E0F
	// succ:  l00407DFE l00407E0F
l00407DFE:
	eax = Mem0[esi + 0x0000006C:word32]
	eax = eax & 0x00000300
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 0x00000300)
	branch Test(NE,Z) l00407E18
	// succ:  l00407E0D l00407E18
l00407E0D:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00407DF0_exit
l00407E0F:
	SZO = cond(Mem0[esi + 0x0000006C:word32] & 0x00000800)
	C = false
	branch Test(NE,Z) l00407E37
	// succ:  l00407E18 l00407E37
l00407E18:
	ecx = Mem0[esp + 0x00000010:word32]
	edx = Mem0[esp + 0x0000000C:word32]
	eax = Mem0[esi + 0x00000110:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn00414630 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	Mem0[esi + 0x00000110:word32] = eax
	// succ:  l00407E37
l00407E37:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00407DF0_exit
fn00407DF0_exit:


// fn00407E40
// Return size: 4
void fn00407E40()
fn00407E40_entry:
	// succ:  l00407E40
l00407E40:
	esp = fp
	SCZO = cond(Mem0[esp + 0x00000008:word32] - 0x00000120)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000008:word32]
	eax = Mem0[esi:word32]
	branch Test(UGE,C) l00407E63
	// succ:  l00407E51 l00407E63
l00407E51:
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn00408B80 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000002
	call fn00408B60 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	Mem0[esi:word32] = eax
	// succ:  l00407E63
l00407E63:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000120
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = memset(Mem0[esp:(ptr void)], Mem0[esp + 4:int32], Mem0[esp + 8:size_t])
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00407E40_exit
fn00407E40_exit:


// fn00407E80
// Return size: 4
void fn00407E80()
fn00407E80_entry:
	// succ:  l00407E80
l00407E80:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp + 0x0000000C:word32]
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	SCZO = cond(edi - ebx)
	branch Test(EQ,Z) l0040821F
	// succ:  l00407E90 l0040821F
l00407E90:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000014:word32]
	SCZO = cond(esi - ebx)
	branch Test(EQ,Z) l0040821E
	// succ:  l00407E9D l0040821E
l00407E9D:
	eax = Mem0[esi + 0x000000B8:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = Mem0[esp + 0x0000001C:word32]
	eax = eax & ebp
	SZO = cond(eax)
	C = false
	SZO = cond(eax & 0x00004000)
	C = false
	branch Test(EQ,Z) l00407F14
	// succ:  l00407EB1 l00407F14
l00407EB1:
	ecx = Mem0[esp + 0x00000020:word32]
	SCZO = cond(ecx - 0xFFFFFFFF)
	branch Test(EQ,Z) l00407EDE
	// succ:  l00407EBA l00407EDE
l00407EBA:
	eax = Mem0[esi + 0x00000038:word32]
	SCZO = cond(eax - ebx)
	branch Test(EQ,Z) l00407F14
	// succ:  l00407EC1 l00407F14
l00407EC1:
	ebp = ecx
	ebp = ebp << 0x00000004
	SCZO = cond(ebp)
	eax = Mem0[eax + 0x00000004 + ebp:word32]
	SCZO = cond(eax - ebx)
	branch Test(EQ,Z) l00407F10
	// succ:  l00407ECE l00407F10
l00407ECE:
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4;)
	ecx = Mem0[esi + 0x00000038:word32]
	Mem0[ecx + 0x00000004 + ebp:word32] = ebx
	goto l00407F0D
	// succ:  l00407F0D
l00407EDE:
	ebp = ebp ^ ebp
	SZO = cond(ebp)
	C = false
	SCZO = cond(Mem0[esi + 0x00000030:word32] - ebx)
	branch Test(LE,SZO) l00407EFD
	// succ:  l00407EE5 l00407EFD
l00407EE5:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00004000
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00407E80 (retsize: 4;)
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	SCZO = cond(ebp - Mem0[esi + 0x00000030:word32])
	branch Test(LT,SO) l00407EE5
	// succ:  l00407EFD l00407EE5
l00407EFD:
	edx = Mem0[esi + 0x00000038:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4;)
	Mem0[esi + 0x00000038:word32] = ebx
	Mem0[esi + 0x00000030:word32] = ebx
	// succ:  l00407F0D
l00407F0D:
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l00407F10
l00407F10:
	ebp = Mem0[esp + 0x0000001C:word32]
	// succ:  l00407F14
l00407F14:
	eax = Mem0[esi + 0x000000B8:word32]
	eax = eax & ebp
	SZO = cond(eax)
	C = false
	SZO = cond(eax & 0x00002000)
	C = false
	branch Test(EQ,Z) l00407F37
	// succ:  l00407F23 l00407F37
l00407F23:
	ecx = Mem0[esi + 0x0000004C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	v15 = Mem0[esi + 0x00000008:word32] & 0xFFFFFFEF
	Mem0[esi + 0x00000008:word32] = v15
	SZO = cond(Mem0[esi + 0x00000008:word32])
	C = false
	Mem0[esi + 0x0000004C:word32] = ebx
	// succ:  l00407F37
l00407F37:
	eax = Mem0[esi + 0x000000B8:word32]
	eax = eax & ebp
	SZO = cond(eax)
	C = false
	SZO = cond(eax & 0x00000100)
	C = false
	branch Test(EQ,Z) l00407F4D
	// succ:  l00407F46 l00407F4D
l00407F46:
	v16 = Mem0[esi + 0x00000008:word32] & 0xFFFFBFFF
	Mem0[esi + 0x00000008:word32] = v16
	SZO = cond(Mem0[esi + 0x00000008:word32])
	C = false
	// succ:  l00407F4D
l00407F4D:
	SZO = cond(al & al)
	C = false
	branch Test(NS,S) l00407FDB
	// succ:  l00407F55 l00407FDB
l00407F55:
	edx = Mem0[esi + 0x000000A0:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4;)
	eax = Mem0[esi + 0x000000AC:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	SCZO = cond(Mem0[esi + 0x000000B0:word32] - ebx)
	Mem0[esi + 0x000000A0:word32] = ebx
	Mem0[esi + 0x000000AC:word32] = ebx
	branch Test(EQ,Z) l00407FD4
	// succ:  l00407F86 l00407FD4
l00407F86:
	ebp = ebp ^ ebp
	SZO = cond(ebp)
	C = false
	SCZO = cond(Mem0[esi + 0x000000B5:byte] - bl)
	branch Test(ULE,CZ) l00407FBA
	// succ:  l00407F90 l00407FBA
l00407F90:
	ecx = Mem0[esi + 0x000000B0:word32]
	edx = Mem0[ecx + ebp * 0x00000004:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4;)
	eax = Mem0[esi + 0x000000B0:word32]
	Mem0[eax + ebp * 0x00000004:word32] = ebx
	ecx = (word32) Mem0[esi + 0x000000B5:byte]
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SCZO = cond(ebp - ecx)
	branch Test(LT,SO) l00407F90
	// succ:  l00407FBA l00407F90
l00407FBA:
	edx = Mem0[esi + 0x000000B0:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4;)
	ebp = Mem0[esp + 0x00000024:word32]
	esp = esp + 0x00000008
	SCZO = cond(esp)
	Mem0[esi + 0x000000B0:word32] = ebx
	// succ:  l00407FD4
l00407FD4:
	v22 = Mem0[esi + 0x00000008:word32] & 0xFFFFFBFF
	Mem0[esi + 0x00000008:word32] = v22
	SZO = cond(Mem0[esi + 0x00000008:word32])
	C = false
	// succ:  l00407FDB
l00407FDB:
	eax = Mem0[esi + 0x000000B8:word32]
	eax = eax & ebp
	SZO = cond(eax)
	C = false
	SZO = cond(al & 0x10)
	C = false
	branch Test(EQ,Z) l00408017
	// succ:  l00407FE7 l00408017
l00407FE7:
	ecx = Mem0[esi + 0x000000C4:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4;)
	edx = Mem0[esi + 0x000000C8:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	v21 = Mem0[esi + 0x00000008:word32] & 0xFFFFEFFF
	Mem0[esi + 0x00000008:word32] = v21
	SZO = cond(Mem0[esi + 0x00000008:word32])
	C = false
	Mem0[esi + 0x000000C4:word32] = ebx
	Mem0[esi + 0x000000C8:word32] = ebx
	// succ:  l00408017
l00408017:
	eax = Mem0[esi + 0x000000B8:word32]
	eax = eax & ebp
	SZO = cond(eax)
	C = false
	SZO = cond(al & 0x20)
	C = false
	branch Test(EQ,Z) l004080CF
	// succ:  l00408027 l004080CF
l00408027:
	ecx = Mem0[esp + 0x00000020:word32]
	SCZO = cond(ecx - 0xFFFFFFFF)
	branch Test(EQ,Z) l0040807A
	// succ:  l00408030 l0040807A
l00408030:
	eax = Mem0[esi + 0x000000D4:word32]
	SCZO = cond(eax - ebx)
	branch Test(EQ,Z) l004080CF
	// succ:  l0040803E l004080CF
l0040803E:
	ebp = ecx
	ebp = ebp << 0x00000004
	SCZO = cond(ebp)
	ecx = Mem0[eax + ebp:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4;)
	edx = Mem0[esi + 0x000000D4:word32]
	eax = Mem0[edx + 0x00000008 + ebp:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4;)
	ecx = Mem0[esi + 0x000000D4:word32]
	Mem0[ecx + ebp:word32] = ebx
	edx = Mem0[esi + 0x000000D4:word32]
	Mem0[edx + 0x00000008 + ebp:word32] = ebx
	ebp = Mem0[esp + 0x0000002C:word32]
	esp = esp + 0x00000010
	SCZO = cond(esp)
	goto l004080CF
	// succ:  l004080CF
l0040807A:
	eax = Mem0[esi + 0x000000D8:word32]
	SCZO = cond(eax - ebx)
	branch Test(EQ,Z) l004080C8
	// succ:  l00408084 l004080C8
l00408084:
	ebp = ebp ^ ebp
	SZO = cond(ebp)
	C = false
	SCZO = cond(eax - ebx)
	branch Test(LE,SZO) l004080A8
	// succ:  l0040808A l004080A8
l0040808A:
	ebx = ebx + 0x00000000
	// succ:  l00408090
l00408090:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000020
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00407E80 (retsize: 4;)
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	SCZO = cond(ebp - Mem0[esi + 0x000000D8:word32])
	branch Test(LT,SO) l00408090
	// succ:  l004080A8 l00408090
l004080A8:
	eax = Mem0[esi + 0x000000D4:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4;)
	ebp = Mem0[esp + 0x00000024:word32]
	esp = esp + 0x00000008
	SCZO = cond(esp)
	Mem0[esi + 0x000000D4:word32] = ebx
	Mem0[esi + 0x000000D8:word32] = ebx
	// succ:  l004080C8
l004080C8:
	v23 = Mem0[esi + 0x00000008:word32] & 0xFFFFDFFF
	Mem0[esi + 0x00000008:word32] = v23
	SZO = cond(Mem0[esi + 0x00000008:word32])
	C = false
	// succ:  l004080CF
l004080CF:
	ecx = Mem0[esi + 0x000000B8:word32]
	ecx = ecx & ebp
	SZO = cond(ecx)
	C = false
	SZO = cond(ecx & 0x00000200)
	C = false
	branch Test(EQ,Z) l0040815F
	// succ:  l004080E3 l0040815F
l004080E3:
	ecx = Mem0[esp + 0x00000020:word32]
	SCZO = cond(ecx - 0xFFFFFFFF)
	branch Test(EQ,Z) l00408114
	// succ:  l004080EC l00408114
l004080EC:
	eax = Mem0[esi + 0x000000BC:word32]
	SCZO = cond(eax - ebx)
	branch Test(EQ,Z) l0040815F
	// succ:  l004080F6 l0040815F
l004080F6:
	ebp = ecx + ecx * 0x00000004
	ebp = ebp + ebp
	SCZO = cond(ebp)
	ebp = ebp + ebp
	SCZO = cond(ebp)
	edx = Mem0[eax + 0x00000008 + ebp:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4;)
	eax = Mem0[esi + 0x000000BC:word32]
	Mem0[eax + 0x00000008 + ebp:word32] = ebx
	goto l00408158
	// succ:  l00408158
l00408114:
	eax = Mem0[esi + 0x000000C0:word32]
	SCZO = cond(eax - ebx)
	branch Test(EQ,Z) l0040815F
	// succ:  l0040811E l0040815F
l0040811E:
	ebp = ebp ^ ebp
	SZO = cond(ebp)
	C = false
	SCZO = cond(eax - ebx)
	branch Test(LE,SZO) l0040813F
	// succ:  l00408124 l0040813F
l00408124:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000200
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00407E80 (retsize: 4;)
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	SCZO = cond(ebp - Mem0[esi + 0x000000C0:word32])
	branch Test(LT,SO) l00408124
	// succ:  l0040813F l00408124
l0040813F:
	ecx = Mem0[esi + 0x000000BC:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4;)
	Mem0[esi + 0x000000BC:word32] = ebx
	Mem0[esi + 0x000000C0:word32] = ebx
	// succ:  l00408158
l00408158:
	ebp = Mem0[esp + 0x00000024:word32]
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l0040815F
l0040815F:
	edx = Mem0[esi + 0x000000B8:word32]
	edx = edx & ebp
	SZO = cond(edx)
	C = false
	SZO = cond(dl & 0x08)
	C = false
	branch Test(EQ,Z) l00408180
	// succ:  l0040816C l00408180
l0040816C:
	eax = Mem0[esi + 0x0000007C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	v25 = Mem0[esi + 0x00000008:word32] & 0xFFFFFFBF
	Mem0[esi + 0x00000008:word32] = v25
	SZO = cond(Mem0[esi + 0x00000008:word32])
	C = false
	Mem0[esi + 0x0000007C:word32] = ebx
	// succ:  l00408180
l00408180:
	ecx = Mem0[esi + 0x000000B8:word32]
	ecx = ecx & ebp
	SZO = cond(ecx)
	C = false
	SZO = cond(ecx & 0x00001000)
	C = false
	branch Test(EQ,Z) l004081A8
	// succ:  l00408190 l004081A8
l00408190:
	edx = Mem0[esi + 0x00000010:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00407DC0 (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	esp = esp + 0x00000008
	SCZO = cond(esp)
	v26 = Mem0[esi + 0x00000008:word32] & 0xFFFFFFF7
	Mem0[esi + 0x00000008:word32] = v26
	SZO = cond(Mem0[esi + 0x00000008:word32])
	C = false
	Mem0[esi + 0x00000010:word32] = ebx
	Mem0[esi + 0x00000014:word16] = bx
	// succ:  l004081A8
l004081A8:
	eax = Mem0[esi + 0x000000B8:word32]
	eax = eax & ebp
	SZO = cond(eax)
	C = false
	SZO = cond(al & 0x40)
	C = false
	branch Test(EQ,Z) l00408208
	// succ:  l004081B4 l00408208
l004081B4:
	SCZO = cond(Mem0[esi + 0x000000F8:word32] - ebx)
	branch Test(EQ,Z) l00408201
	// succ:  l004081BC l00408201
l004081BC:
	ebp = ebp ^ ebp
	SZO = cond(ebp)
	C = false
	SCZO = cond(Mem0[esi + 0x00000004:word32] - ebx)
	branch Test(LE,SZO) l004081E7
	// succ:  l004081C3 l004081E7
l004081C3:
	ecx = Mem0[esi + 0x000000F8:word32]
	edx = Mem0[ecx + ebp * 0x00000004:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4;)
	eax = Mem0[esi + 0x000000F8:word32]
	Mem0[eax + ebp * 0x00000004:word32] = ebx
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SCZO = cond(ebp - Mem0[esi + 0x00000004:word32])
	branch Test(LT,SO) l004081C3
	// succ:  l004081E7 l004081C3
l004081E7:
	ecx = Mem0[esi + 0x000000F8:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4;)
	ebp = Mem0[esp + 0x00000024:word32]
	esp = esp + 0x00000008
	SCZO = cond(esp)
	Mem0[esi + 0x000000F8:word32] = ebx
	// succ:  l00408201
l00408201:
	v28 = Mem0[esi + 0x00000008:word32] & 0xFFFF7FFF
	Mem0[esi + 0x00000008:word32] = v28
	SZO = cond(Mem0[esi + 0x00000008:word32])
	C = false
	// succ:  l00408208
l00408208:
	SCZO = cond(Mem0[esp + 0x00000020:word32] - 0xFFFFFFFF)
	branch Test(EQ,Z) l00408215
	// succ:  l0040820F l00408215
l0040820F:
	ebp = ebp & 0xFFFFBDDF
	SZO = cond(ebp)
	C = false
	// succ:  l00408215
l00408215:
	ebp = ~ebp
	v29 = Mem0[esi + 0x000000B8:word32] & ebp
	Mem0[esi + 0x000000B8:word32] = v29
	SZO = cond(Mem0[esi + 0x000000B8:word32])
	C = false
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l0040821E
l0040821E:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l0040821F
l0040821F:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00407E80_exit
fn00407E80_exit:


// fn00408230
// Return size: 4
void fn00408230()
fn00408230_entry:
	// succ:  l00408230
l00408230:
	esp = fp
	eax = Mem0[esp + 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0xFFFFFFFF
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00007FFF
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00407E80 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	SCZO = cond(Mem0[esi + 0x00000220:word32] - 0x00000000)
	branch Test(EQ,Z) l00408277
	// succ:  l00408253 l00408277
l00408253:
	ecx = Mem0[esi + 0x00000224:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408BF0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	Mem0[esi + 0x00000224:word32] = 0x00000000
	Mem0[esi + 0x00000220:word32] = 0x00000000
	// succ:  l00408277
l00408277:
	edx = esp + 0x0000000C
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000120
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call fn00407E40 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00408230_exit
fn00408230_exit:


// fn00408290
// Return size: 4
void fn00408290()
fn00408290_entry:
	// succ:  l00408290
l00408290:
	esp = fp
	eax = Mem0[esp + 0x00000008:word32]
	ecx = Mem0[esp + 0x00000004:word32]
	Mem0[ecx + 0x00000054:word32] = eax
	return
	// succ:  fn00408290_exit
fn00408290_exit:


// fn004082A0
// Return size: 4
void fn004082A0()
fn004082A0_entry:
	// succ:  l004082A0
l004082A0:
	esp = fp
	ecx = Mem0[esp + 0x00000004:word32]
	SZO = cond(ecx & ecx)
	C = false
	branch Test(NE,Z) l004082AE
	// succ:  l004082A8 l004082AE
l004082A8:
	SCZO = cond(Mem0[esp + 0x00000008:word32] - ecx)
	branch Test(EQ,Z) l004082B7
	// succ:  l004082AE l004082B7
l004082AE:
	SCZO = cond(Mem0[ecx + 0x00000220:word32] - 0x00000000)
	branch Test(GT,SZO) l004082BA
	// succ:  l004082B7 l004082BA
l004082B7:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	return
	// succ:  fn004082A0_exit
l004082BA:
	eax = Mem0[ecx + 0x00000220:word32]
	ecx = Mem0[ecx + 0x00000224:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	ebx = eax
	SZO = cond(ebx & ebx)
	C = false
	edx = eax + eax * 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = edx - 0x00000005 + ecx
	branch Test(EQ,Z) l00408379
	// succ:  l004082DB l00408379
l004082DB:
	// succ:  l004082E0
l004082E0:
	edx = Mem0[esp + 0x00000018:word32]
	eax = 0x00000004
	ecx = edi
	// succ:  l004082F0
l004082F0:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l00408308
	// succ:  l004082F6 l00408308
l004082F6:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l004082F0
	// succ:  l00408304 l004082F0
l00408304:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00408365
	// succ:  l00408308 l00408365
l00408308:
	esi = (word32) Mem0[edx:byte]
	ebp = (word32) Mem0[ecx:byte]
	esi = esi - ebp
	SCZO = cond(esi)
	branch Test(NE,Z) l00408357
	// succ:  l00408312 l00408357
l00408312:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00408365
	// succ:  l0040831F l00408365
l0040831F:
	esi = (word32) Mem0[edx:byte]
	ebp = (word32) Mem0[ecx:byte]
	esi = esi - ebp
	SCZO = cond(esi)
	branch Test(NE,Z) l00408357
	// succ:  l00408329 l00408357
l00408329:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00408365
	// succ:  l00408336 l00408365
l00408336:
	esi = (word32) Mem0[edx:byte]
	ebp = (word32) Mem0[ecx:byte]
	esi = esi - ebp
	SCZO = cond(esi)
	branch Test(NE,Z) l00408357
	// succ:  l00408340 l00408357
l00408340:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00408365
	// succ:  l0040834D l00408365
l0040834D:
	esi = (word32) Mem0[edx:byte]
	edx = (word32) Mem0[ecx:byte]
	esi = esi - edx
	SCZO = cond(esi)
	branch Test(EQ,Z) l00408365
	// succ:  l00408357 l00408365
l00408357:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l00408367
	// succ:  l00408360 l00408367
l00408360:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l00408367
	// succ:  l00408367
l00408365:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l00408367
l00408367:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00408380
	// succ:  l0040836B l00408380
l0040836B:
	ebx = ebx - 0x00000001
	SCZO = cond(ebx)
	edi = edi - 0x00000005
	SCZO = cond(edi)
	SZO = cond(ebx & ebx)
	C = false
	branch Test(NE,Z) l004082E0
	// succ:  l00408379 l004082E0
l00408379:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004082A0_exit fn004082A0_exit
l00408380:
	eax = (word32) Mem0[edi + 0x00000004:byte]
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004082A0_exit
fn004082A0_exit:


// fn00408390
// Return size: 4
void fn00408390()
fn00408390_entry:
	// succ:  l00408390
l00408390:
	esp = fp
	eax = Mem0[esp + 0x00000004:word32]
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	Mem0[eax + 0x0000023C:word32] = ecx
	Mem0[eax + 0x00000239:byte] = cl
	Mem0[eax + 0x00000240:byte] = cl
	return
	// succ:  fn00408390_exit
fn00408390_exit:


// fn004083B0
// Return size: 4
void fn004083B0()
fn004083B0_entry:
	// succ:  l004083B0
l004083B0:
	esp = fp
	eax = Mem0[esp + 0x00000004:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l004083B9
	// succ:  l004083B8 l004083B9
l004083B8:
	return
	// succ:  fn004083B0_exit
l004083B9:
	ecx = Mem0[eax + 0x00000244:word32]
	edx = Mem0[eax + 0x00000248:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000002
	call fn00408980 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	Mem0[esp + 0x00000004:word32] = eax
	branch Test(EQ,Z) l004083EF
	// succ:  l004083D9 l004083EF
l004083D9:
	eax = esp + 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000120
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn00407E40 (retsize: 4;)
	eax = Mem0[esp + 0x0000000C:word32]
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l004083EF
l004083EF:
	return
	// succ:  fn004083B0_exit
fn004083B0_exit:


// fn004083F0
// Return size: 4
void fn004083F0()
fn004083F0_entry:
	// succ:  l004083F0
l004083F0:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = Mem0[esp + 0x0000000C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	edi = edi
	// succ:  l00408400
l00408400:
	ecx = (word32) Mem0[edi + 0x0000011C + ebp:byte]
	ebx = ecx - 0x00000041
	edi = edi + 0x00000001
	SCZO = cond(edi)
	SCZO = cond(ebx - 0x00000039)
	branch Test(UGT,CZ) l00408422
	// succ:  l00408413 l00408422
l00408413:
	SCZO = cond(ecx - 0x0000005A)
	branch Test(LE,SZO) l0040841D
	// succ:  l00408418 l0040841D
l00408418:
	SCZO = cond(ecx - 0x00000061)
	branch Test(LT,SO) l00408422
	// succ:  l0040841D l00408422
l0040841D:
	Mem0[eax + esi:byte] = cl
	goto l00408450
	// succ:  l00408450
l00408422:
	Mem0[eax + esi:byte] = 0x5B
	ebx = ecx
	ebx = ebx >> 0x00000004
	SCZO = cond(ebx)
	ebx = ebx & 0x0000000F
	SZO = cond(ebx)
	C = false
	bl = Mem0[ebx + 0x004165D4:byte]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	Mem0[eax + esi:byte] = bl
	ecx = ecx & 0x0000000F
	SZO = cond(ecx)
	C = false
	cl = Mem0[ecx + 0x004165D4:byte]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	Mem0[eax + esi:byte] = cl
	eax = eax + 0x00000001
	SCZO = cond(eax)
	Mem0[eax + esi:byte] = 0x5D
	// succ:  l00408450
l00408450:
	eax = eax + 0x00000001
	SCZO = cond(eax)
	SCZO = cond(edi - 0x00000004)
	branch Test(LT,SO) l00408400
	// succ:  l00408458 l00408400
l00408458:
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l00408464
	// succ:  l0040845C l00408464
l0040845C:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[eax + esi:byte] = dl
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004083F0_exit
l00408464:
	Mem0[eax + esi:byte] = 0x3A
	eax = eax + 0x00000001
	SCZO = cond(eax)
	Mem0[eax + esi:byte] = 0x20
	eax = eax + 0x00000001
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0000003F
	esi = esi + eax
	SCZO = cond(esi)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	eax = strncpy(Mem0[esp:(ptr char)], Mem0[esp + 4:(ptr char)], Mem0[esp + 8:size_t])
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[esi + 0x0000003F:byte] = 0x00
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004083F0_exit
fn004083F0_exit:


// fn00408490
// Return size: 4
void fn00408490()
fn00408490_entry:
	// succ:  l00408490
l00408490:
	esp = fp
	esp = esp - 0x00000028
	SCZO = cond(esp)
	eax = Mem0[0x0041C340:word32]
	eax = eax ^ esp
	SZO = cond(eax)
	C = false
	Mem0[esp + 0x00000024:word32] = eax
	eax = Mem0[esp + 0x0000002C:word32]
	Mem0[esp + 0x0000000C:word32] = eax
	eax = Mem0[esp + 0x00000030:word32]
	SCZO = cond(Mem0[eax:byte] - 0x23)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	branch Test(NE,Z) l00408597
	// succ:  l004084B4 l00408597
l004084B4:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ecx = esp + 0x00000023
	ecx = ecx - eax
	SCZO = cond(ecx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	Mem0[esp + 0x00000010:word32] = ecx
	ebx = esp + 0x00000024
	edi = esp + 0x00000025
	ebp = esp + 0x00000026
	ebx = ebx - eax
	SCZO = cond(ebx)
	ebp = ebp - eax
	SCZO = cond(ebp)
	ecx = esp + 0x00000028
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	edi = edi - eax
	SCZO = cond(edi)
	ecx = ecx - eax
	SCZO = cond(ecx)
	Mem0[esp + 0x00000018:word32] = ebx
	Mem0[esp + 0x00000020:word32] = ebp
	Mem0[esp + 0x00000014:word32] = ecx
	goto l004084F8
	// succ:  l004084F8
l004084F0:
	ebp = Mem0[esp + 0x00000020:word32]
	ebx = Mem0[esp + 0x00000018:word32]
	// succ:  l004084F8
l004084F8:
	SCZO = cond(Mem0[eax + esi:byte] - 0x20)
	dl = Mem0[eax + 0x00000001 + esi:byte]
	ecx = eax + esi
	Mem0[ebx + ecx:byte] = dl
	branch Test(EQ,Z) l0040855C
	// succ:  l00408508 l0040855C
l00408508:
	SCZO = cond(dl - 0x20)
	bl = Mem0[eax + 0x00000002 + esi:byte]
	Mem0[edi + ecx:byte] = bl
	branch Test(EQ,Z) l0040854A
	// succ:  l00408514 l0040854A
l00408514:
	SCZO = cond(bl - 0x20)
	dl = Mem0[eax + 0x00000003 + esi:byte]
	Mem0[ecx + ebp:byte] = dl
	branch Test(EQ,Z) l0040854F
	// succ:  l00408520 l0040854F
l00408520:
	SCZO = cond(dl - 0x20)
	bl = Mem0[eax + 0x00000004 + esi:byte]
	ebp = Mem0[esp + 0x00000010:word32]
	Mem0[ecx + ebp:byte] = bl
	branch Test(EQ,Z) l00408554
	// succ:  l00408530 l00408554
l00408530:
	SCZO = cond(bl - 0x20)
	dl = Mem0[eax + 0x00000005 + esi:byte]
	ebp = Mem0[esp + 0x00000014:word32]
	Mem0[ecx + ebp:byte] = dl
	branch Test(EQ,Z) l00408559
	// succ:  l00408540 l00408559
l00408540:
	esi = esi + 0x00000005
	SCZO = cond(esi)
	SCZO = cond(esi - 0x0000000F)
	branch Test(LT,SO) l004084F0
	// succ:  l00408548 l004084F0
l00408548:
	goto l0040855C
	// succ:  l0040855C
l0040854A:
	esi = esi + 0x00000001
	SCZO = cond(esi)
	goto l0040855C
	// succ:  l0040855C
l0040854F:
	esi = esi + 0x00000002
	SCZO = cond(esi)
	goto l0040855C
	// succ:  l0040855C
l00408554:
	esi = esi + 0x00000003
	SCZO = cond(esi)
	goto l0040855C
	// succ:  l0040855C
l00408559:
	esi = esi + 0x00000004
	SCZO = cond(esi)
	// succ:  l0040855C
l0040855C:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = esi - 0x00000002
	SCZO = cond(ecx - 0x0000000C)
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	branch Test(UGT,CZ) l0040857B
	// succ:  l00408567 l0040857B
l00408567:
	eax = eax + esi
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	edx = esp + 0x0000001C
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	Mem0[esp + 0x0000001F + esi:byte] = 0x00
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416618
	goto l00408582
	// succ:  l00408582
l0040857B:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004165F8
	// succ:  l00408582
l00408582:
	call __iob_func (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	eax = eax + 0x00000040
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call MSVCR80.dll!fprintf (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	goto l004085B0
	// succ:  l004085B0
l00408597:
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004165E4
	call __iob_func (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	eax = eax + 0x00000040
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call MSVCR80.dll!fprintf (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	// succ:  l004085B0
l004085B0:
	eax = Mem0[esp + 0x00000010:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000001
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call MSVCR80.dll!longjmp (retsize: 4;)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	int3()
	int3()
	esp = esp - 0x00000024
	SCZO = cond(esp)
	eax = Mem0[0x0041C340:word32]
	eax = eax ^ esp
	SZO = cond(eax)
	C = false
	Mem0[esp + 0x00000020:word32] = eax
	eax = Mem0[esp + 0x00000028:word32]
	SCZO = cond(Mem0[eax:byte] - 0x23)
	branch Test(NE,Z) l004086E9
	// succ:  l004085D5_thunk_fn004085DB l004086E9
l004085D5_thunk_fn004085DB:
	call fn004085DB (retsize: 0;)
	return
	// succ:  fn00408490_exit
l004086E9:
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416634
	call __iob_func (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	eax = eax + 0x00000040
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call MSVCR80.dll!fprintf (retsize: 4;)
	ecx = Mem0[esp + 0x0000002C:word32]
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x00000024
	SCZO = cond(esp)
	return
	// succ:  fn00408490_exit
fn00408490_exit:


// fn004085C0
// Return size: 0
void fn004085C0()
fn004085C0_entry:
	// succ:  l004085C0
l004085C0:
	esp = fp
	esp = esp - 0x00000024
	SCZO = cond(esp)
	eax = Mem0[0x0041C340:word32]
	eax = eax ^ esp
	SZO = cond(eax)
	C = false
	Mem0[esp + 0x00000020:word32] = eax
	eax = Mem0[esp + 0x00000028:word32]
	SCZO = cond(Mem0[eax:byte] - 0x23)
	branch Test(NE,Z) l004086E9_in_fn004085C0
	// succ:  l004085D5_thunk_fn004085DB l004086E9_in_fn004085C0
l004085D5_thunk_fn004085DB:
	call fn004085DB (retsize: 0;)
	return
	// succ:  fn004085C0_exit l004085D5_thunk_fn004085DB
l004085D5_thunk_fn004085DB:
	call fn004085DB (retsize: 0;)
	return
	// succ:  fn004085C0_exit
l004086E9_in_fn004085C0:
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416634
	call __iob_func (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	eax = eax + 0x00000040
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call MSVCR80.dll!fprintf (retsize: 4;)
	ecx = Mem0[esp + 0x0000002C:word32]
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x00000024
	SCZO = cond(esp)
	return
	// succ:  fn004085C0_exit
fn004085C0_exit:


// fn004085DB
// Return size: 0
void fn004085DB()
fn004085DB_entry:
	// succ:  l004085DB
l004085DB:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	ecx = esp + 0x0000001F
	ecx = ecx - eax
	SCZO = cond(ecx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	Mem0[esp + 0x00000010:word32] = ecx
	ebx = esp + 0x00000020
	edi = esp + 0x00000021
	ebp = esp + 0x00000022
	ebx = ebx - eax
	SCZO = cond(ebx)
	ebp = ebp - eax
	SCZO = cond(ebp)
	ecx = esp + 0x00000024
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	edi = edi - eax
	SCZO = cond(edi)
	ecx = ecx - eax
	SCZO = cond(ecx)
	Mem0[esp + 0x0000001C:word32] = ebx
	Mem0[esp + 0x00000014:word32] = ebp
	Mem0[esp + 0x00000018:word32] = ecx
	goto l00408619
	// succ:  l00408619
l00408611:
	ebp = Mem0[esp + 0x00000014:word32]
	ebx = Mem0[esp + 0x0000001C:word32]
	// succ:  l00408619
l00408619:
	SCZO = cond(Mem0[eax + esi:byte] - 0x20)
	dl = Mem0[eax + 0x00000001 + esi:byte]
	ecx = eax + esi
	Mem0[ebx + ecx:byte] = dl
	branch Test(EQ,Z) l0040867D
	// succ:  l00408629 l0040867D
l00408629:
	SCZO = cond(dl - 0x20)
	bl = Mem0[eax + 0x00000002 + esi:byte]
	Mem0[edi + ecx:byte] = bl
	branch Test(EQ,Z) l0040866B
	// succ:  l00408635 l0040866B
l00408635:
	SCZO = cond(bl - 0x20)
	dl = Mem0[eax + 0x00000003 + esi:byte]
	Mem0[ecx + ebp:byte] = dl
	branch Test(EQ,Z) l00408670
	// succ:  l00408641 l00408670
l00408641:
	SCZO = cond(dl - 0x20)
	bl = Mem0[eax + 0x00000004 + esi:byte]
	ebp = Mem0[esp + 0x00000010:word32]
	Mem0[ecx + ebp:byte] = bl
	branch Test(EQ,Z) l00408675
	// succ:  l00408651 l00408675
l00408651:
	SCZO = cond(bl - 0x20)
	dl = Mem0[eax + 0x00000005 + esi:byte]
	ebp = Mem0[esp + 0x00000018:word32]
	Mem0[ecx + ebp:byte] = dl
	branch Test(EQ,Z) l0040867A
	// succ:  l00408661 l0040867A
l00408661:
	esi = esi + 0x00000005
	SCZO = cond(esi)
	SCZO = cond(esi - 0x0000000F)
	branch Test(LT,SO) l00408611
	// succ:  l00408669 l00408611
l00408669:
	goto l0040867D
	// succ:  l0040867D
l0040866B:
	esi = esi + 0x00000001
	SCZO = cond(esi)
	goto l0040867D
	// succ:  l0040867D
l00408670:
	esi = esi + 0x00000002
	SCZO = cond(esi)
	goto l0040867D
	// succ:  l0040867D
l00408675:
	esi = esi + 0x00000003
	SCZO = cond(esi)
	goto l0040867D
	// succ:  l0040867D
l0040867A:
	esi = esi + 0x00000004
	SCZO = cond(esi)
	// succ:  l0040867D
l0040867D:
	ecx = esi - 0x00000002
	SCZO = cond(ecx - 0x0000000C)
	branch Test(UGT,CZ) l004086BD
	// succ:  l00408685 l004086BD
l00408685:
	eax = eax + esi
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	edx = esp + 0x00000024
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416648
	Mem0[esp + 0x0000002B + esi:byte] = 0x00
	call __iob_func (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	eax = eax + 0x00000040
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call MSVCR80.dll!fprintf (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp + 0x00000020:word32]
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x00000024
	SCZO = cond(esp)
	return
	// succ:  fn004085DB_exit
l004086BD:
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416634
	call __iob_func (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	eax = eax + 0x00000040
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call MSVCR80.dll!fprintf (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp + 0x00000020:word32]
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x00000024
	SCZO = cond(esp)
	return
	// succ:  fn004085DB_exit
fn004085DB_exit:


// fn00408720
// Return size: 4
void fn00408720()
fn00408720_entry:
	// succ:  l00408720
l00408720:
	esp = fp
	eax = Mem0[esp + 0x00000004:word32]
	ecx = Mem0[esp + 0x00000008:word32]
	edx = Mem0[esp + 0x0000000C:word32]
	Mem0[eax + 0x00000048:word32] = ecx
	ecx = Mem0[esp + 0x00000010:word32]
	Mem0[eax + 0x00000040:word32] = edx
	Mem0[eax + 0x00000044:word32] = ecx
	return
	// succ:  fn00408720_exit
fn00408720_exit:


// fn00408740
// Return size: 4
void fn00408740()
fn00408740_entry:
	// succ:  l00408740
l00408740:
	esp = fp
	esp = esp - 0x00000014
	SCZO = cond(esp)
	eax = Mem0[0x0041C340:word32]
	eax = eax ^ esp
	SZO = cond(eax)
	C = false
	Mem0[esp + 0x00000010:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = Mem0[esp + 0x0000001C:word32]
	edx = Mem0[ebp + 0x0000006C:word32]
	SZO = cond(edx & 0x000C0000)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000024:word32]
	branch Test(EQ,Z) l004087D0
	// succ:  l00408763 l004087D0
l00408763:
	SCZO = cond(Mem0[esi:byte] - 0x23)
	branch Test(NE,Z) l004087BA
	// succ:  l00408768 l004087BA
l00408768:
	eax = 0x00000001
	cl = 0x20
	// succ:  l00408770
l00408770:
	SCZO = cond(Mem0[esi + eax:byte] - cl)
	branch Test(EQ,Z) l00408788
	// succ:  l00408775 l00408788
l00408775:
	SCZO = cond(Mem0[esi + 0x00000001 + eax:byte] - cl)
	branch Test(EQ,Z) l00408785
	// succ:  l0040877B l00408785
l0040877B:
	eax = eax + 0x00000002
	SCZO = cond(eax)
	SCZO = cond(eax - 0x0000000F)
	branch Test(LT,SO) l00408770
	// succ:  l00408783 l00408770
l00408783:
	goto l00408788
	// succ:  l00408788
l00408785:
	eax = eax + 0x00000001
	SCZO = cond(eax)
	// succ:  l00408788
l00408788:
	SZO = cond(edx & 0x00080000)
	C = false
	branch Test(EQ,Z) l004087B6
	// succ:  l00408790 l004087B6
l00408790:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = eax - 0x00000001
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	SZO = cond(edi & edi)
	C = false
	branch Test(LE,SZO) l004087AE
	// succ:  l0040879A l004087AE
l0040879A:
	eax = esi + 0x00000001
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = esp + 0x00000014
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = memcpy(Mem0[esp:(ptr void)], Mem0[esp + 4:(ptr void)], Mem0[esp + 8:size_t])
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	ecx = edi
	// succ:  l004087AE
l004087AE:
	Mem0[esp + 0x0000000C + ecx:byte] = 0x00
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	goto l004087CC
	// succ:  l004087CC
l004087B6:
	esi = esi + eax
	SCZO = cond(esi)
	goto l004087D0
	// succ:  l004087D0
l004087BA:
	SZO = cond(edx & 0x00080000)
	C = false
	branch Test(EQ,Z) l004087D0
	// succ:  l004087C2 l004087D0
l004087C2:
	Mem0[esp + 0x00000008:byte] = 0x30
	Mem0[esp + 0x00000009:byte] = 0x00
	// succ:  l004087CC
l004087CC:
	esi = esp + 0x00000008
	// succ:  l004087D0
l004087D0:
	eax = Mem0[ebp + 0x00000040:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004087DE
	// succ:  l004087D7 l004087DE
l004087D7:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	call eax (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l004087DE
l004087DE:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	call fn00408490 (retsize: 4;)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	int3()
	int3()
	int3()
	int3()
	int3()
	int3()
	int3()
	int3()
	int3()
	ecx = Mem0[esp + 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000008:word32]
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SZO = cond(Mem0[esi + 0x0000006C:word32] & 0x000C0000)
	C = false
	branch Test(EQ,Z) l00408828
	// succ:  l00408802_thunk_fn00408804 l00408802_thunk_fn00408828
l00408802_thunk_fn00408804:
	call fn00408804 (retsize: 0;)
	return
	// succ:  fn00408740_exit
l00408802_thunk_fn00408828:
	call fn00408828 (retsize: 0;)
	return
	// succ:  fn00408740_exit
fn00408740_exit:


// fn004087F0
// Return size: 0
void fn004087F0()
fn004087F0_entry:
	// succ:  l004087F0
l004087F0:
	esp = fp
	ecx = Mem0[esp + 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000008:word32]
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SZO = cond(Mem0[esi + 0x0000006C:word32] & 0x000C0000)
	C = false
	branch Test(EQ,Z) l00408802_thunk_fn00408828
	// succ:  l00408802_thunk_fn00408804 l00408802_thunk_fn00408828
l00408802_thunk_fn00408804:
	call fn00408804 (retsize: 0;)
	return
	// succ:  fn004087F0_exit l00408802_thunk_fn00408804
l00408802_thunk_fn00408804:
	call fn00408804 (retsize: 0;)
	return
	// succ:  fn004087F0_exit
l00408802_thunk_fn00408828:
	call fn00408828 (retsize: 0;)
	return
	// succ:  fn004087F0_exit
fn004087F0_exit:


// fn00408804
// Return size: 0
void fn00408804()
fn00408804_entry:
	// succ:  l00408804
l00408804:
	SCZO = cond(Mem0[ecx:byte] - 0x23)
	branch Test(NE,Z) l00408828
	goto l00408809
	// succ:  l00408809 l00408807_thunk_fn00408828
l00408807_thunk_fn00408828:
	call fn00408828 (retsize: 0;)
	return
	// succ:  fn00408804_exit
l00408809:
	eax = 0x00000001
	dl = 0x20
	// succ:  l00408810
l00408810:
	SCZO = cond(Mem0[eax + ecx:byte] - dl)
	branch Test(EQ,Z) l00408828
	goto l00408815
	// succ:  l00408815 l00408813_thunk_fn00408828
l00408813_thunk_fn00408828:
	call fn00408828 (retsize: 0;)
	return
	// succ:  fn00408804_exit
l00408815:
	SCZO = cond(Mem0[eax + 0x00000001 + ecx:byte] - dl)
	branch Test(EQ,Z) l00408825
	// succ:  l0040881B l00408825
l0040881B:
	eax = eax + 0x00000002
	SCZO = cond(eax)
	SCZO = cond(eax - 0x0000000F)
	branch Test(LT,SO) l00408810
	// succ:  l00408823 l00408810
l00408823:
	call fn00408828 (retsize: 0;)
	return
	// succ:  l00408823_thunk_fn00408828 fn00408804_exit
l00408823_thunk_fn00408828:
	call fn00408828 (retsize: 0;)
	return
	// succ:  fn00408804_exit
l00408825:
	eax = eax + 0x00000001
	SCZO = cond(eax)
	// succ:  l00408825_thunk_fn00408828
l00408825_thunk_fn00408828:
	call fn00408828 (retsize: 0;)
	return
	// succ:  fn00408804_exit
fn00408804_exit:


// fn00408828
// Return size: 0
void fn00408828()
fn00408828_entry:
	// succ:  l00408828
l00408828:
	edx = Mem0[esi + 0x00000044:word32]
	eax = eax + ecx
	SCZO = cond(eax)
	SZO = cond(edx & edx)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	branch Test(EQ,Z) l0040883A
	// succ:  l00408832 l0040883A
l00408832:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call edx (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00408828_exit
l0040883A:
	call fn004085C0 (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00408828_exit
fn00408828_exit:


// fn00408850
// Return size: 4
void fn00408850()
fn00408850_entry:
	// succ:  l00408850
l00408850:
	esp = fp
	esp = esp - 0x00000058
	SCZO = cond(esp)
	eax = Mem0[0x0041C340:word32]
	eax = eax ^ esp
	SZO = cond(eax)
	C = false
	Mem0[esp + 0x00000054:word32] = eax
	edx = Mem0[esp + 0x00000060:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000060:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	eax = esp + 0x00000008
	call fn004083F0 (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	eax = esp + 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408740 (retsize: 4;)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l0040887F_thunk_fn00408880
l0040887F_thunk_fn00408880:
	call fn00408880 (retsize: 4;)
	return
	// succ:  fn00408850_exit
fn00408850_exit:


// fn00408880
// Return size: 4
void fn00408880()
fn00408880_entry:
	// succ:  l00408880
l00408880:
	esp = fp
	esp = esp - 0x00000058
	SCZO = cond(esp)
	eax = Mem0[0x0041C340:word32]
	eax = eax ^ esp
	SZO = cond(eax)
	C = false
	Mem0[esp + 0x00000054:word32] = eax
	edx = Mem0[esp + 0x00000060:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000060:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	eax = esp + 0x00000008
	call fn004083F0 (retsize: 4;)
	eax = esp + 0x00000008
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	ecx = Mem0[esp + 0x00000064:word32]
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x00000058
	SCZO = cond(esp)
	return
	// succ:  fn00408880_exit
fn00408880_exit:


// fn004088C0
// Return size: 4
void fn004088C0()
fn004088C0_entry:
	// succ:  l004088C0
l004088C0:
	esp = fp
	ecx = Mem0[esp + 0x00000004:word32]
	eax = Mem0[ecx + 0x00000050:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004088D1
	// succ:  l004088CB l004088D1
l004088CB:
	Mem0[esp + 0x00000004:word32] = ecx
l004088D1:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416664
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	return
	// succ:  fn004088C0_exit
fn004088C0_exit:


// fn00408920
// Return size: 4
void fn00408920()
fn00408920_entry:
	// succ:  l00408920
l00408920:
	esp = fp
	eax = Mem0[esp + 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000008:word32]
	Mem0[esi + 0x00000054:word32] = eax
	eax = Mem0[esp + 0x00000010:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00408939
	// succ:  l00408934 l00408939
l00408934:
	Mem0[esi + 0x00000050:word32] = eax
	goto l00408940
	// succ:  l00408940
l00408939:
	Mem0[esi + 0x00000050:word32] = 0x004088E0
	// succ:  l00408940
l00408940:
	SCZO = cond(Mem0[esi + 0x0000004C:word32] - 0x00000000)
	branch Test(EQ,Z) l00408966
	// succ:  l00408946 l00408966
l00408946:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004166C0
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	Mem0[esi + 0x0000004C:word32] = 0x00000000
	call fn004087F0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041668C
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	// succ:  l00408966
l00408966:
	Mem0[esi + 0x0000014C:word32] = 0x00000000
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00408920_exit
fn00408920_exit:


// fn00408980
// Return size: 4
void fn00408980()
fn00408980_entry:
	// succ:  l00408980
l00408980:
	esp = fp
	esp = esp - 0x00000270
	SCZO = cond(esp)
	eax = Mem0[0x0041C340:word32]
	eax = eax ^ esp
	SZO = cond(eax)
	C = false
	Mem0[esp + 0x0000026C:word32] = eax
	ecx = Mem0[esp + 0x00000274:word32]
	SCZO = cond(ecx - 0x00000002)
	eax = Mem0[esp + 0x00000278:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	branch Test(NE,Z) l004089AF
	// succ:  l004089A8 l004089AF
l004089A8:
	esi = 0x00000120
	goto l004089B9
	// succ:  l004089B9
l004089AF:
	SCZO = cond(ecx - 0x00000001)
	branch Test(NE,Z) l00408A0D
	// succ:  l004089B4 l00408A0D
l004089B4:
	esi = 0x0000026C
	// succ:  l004089B9
l004089B9:
	SZO = cond(eax & eax)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	branch Test(EQ,Z) l004089D9
	// succ:  l004089BF l004089D9
l004089BF:
	ecx = Mem0[esp + 0x00000288:word32]
	edx = esp + 0x0000000C
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	Mem0[esp + 0x00000254:word32] = ecx
	call eax (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	goto l004089E2
	// succ:  l004089E2
l004089D9:
	eax = malloc(Mem0[esp:size_t])
	esp = esp + 0x00000004
	SCZO = cond(esp)
	// succ:  l004089E2
l004089E2:
	edi = eax
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l004089F4
	// succ:  l004089E8 l004089F4
l004089E8:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	eax = memset(Mem0[esp:(ptr void)], Mem0[esp + 4:int32], Mem0[esp + 8:size_t])
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	// succ:  l004089F4
l004089F4:
	eax = edi
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp + 0x0000026C:word32]
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x00000270
	SCZO = cond(esp)
	return
	// succ:  fn00408980_exit
l00408A0D:
	ecx = Mem0[esp + 0x00000270:word32]
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x00000270
	SCZO = cond(esp)
	return
	// succ:  fn00408980_exit
fn00408980_exit:


// fn00408A30
// Return size: 4
void fn00408A30()
fn00408A30_entry:
	// succ:  l00408A30
l00408A30:
	esp = fp
	esp = esp - 0x00000270
	SCZO = cond(esp)
	eax = Mem0[0x0041C340:word32]
	eax = eax ^ esp
	SZO = cond(eax)
	C = false
	Mem0[esp + 0x0000026C:word32] = eax
	eax = Mem0[esp + 0x00000274:word32]
	SZO = cond(eax & eax)
	C = false
	ecx = Mem0[esp + 0x00000278:word32]
	branch Test(EQ,Z) l00408A91
	// succ:  l00408A56 l00408A91
l00408A56:
	SZO = cond(ecx & ecx)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	branch Test(EQ,Z) l00408A88
	// succ:  l00408A5B l00408A88
l00408A5B:
	edx = Mem0[esp + 0x00000280:word32]
	eax = esp + 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	Mem0[esp + 0x0000024C:word32] = edx
	call ecx (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	ecx = Mem0[esp + 0x0000026C:word32]
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x00000270
	SCZO = cond(esp)
	return
	// succ:  fn00408A30_exit
l00408A88:
	free(Mem0[esp:(ptr void)])
	esp = esp + 0x00000004
	SCZO = cond(esp)
	// succ:  l00408A91
l00408A91:
	ecx = Mem0[esp + 0x0000026C:word32]
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x00000270
	SCZO = cond(esp)
	return
	// succ:  fn00408A30_exit
fn00408A30_exit:


// fn00408AB0
// Return size: 4
void fn00408AB0()
fn00408AB0_entry:
	// succ:  l00408AB0
l00408AB0:
	esp = fp
	SCZO = cond(Mem0[esp + 0x00000004:word32] - 0x00000000)
	branch Test(EQ,Z) l00408ACA
	// succ:  l00408AB7 l00408ACA
l00408AB7:
	eax = Mem0[esp + 0x00000008:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00408ACA
	// succ:  l00408ABF l00408ACA
l00408ABF:
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = malloc(Mem0[esp:size_t])
	esp = esp + 0x00000004
	SCZO = cond(esp)
	return
	// succ:  fn00408AB0_exit
l00408ACA:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	return
	// succ:  fn00408AB0_exit
fn00408AB0_exit:


// fn00408AF0
// Return size: 4
void fn00408AF0()
fn00408AF0_entry:
	// succ:  l00408AF0
l00408AF0:
	esp = fp
	eax = Mem0[esp + 0x00000010:word32]
	ecx = Mem0[esp + 0x0000000C:word32]
	edx = Mem0[esp + 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	eax = memcpy(Mem0[esp:(ptr void)], Mem0[esp + 4:(ptr void)], Mem0[esp + 8:size_t])
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	return
	// succ:  fn00408AF0_exit
fn00408AF0_exit:


// fn00408B10
// Return size: 4
void fn00408B10()
fn00408B10_entry:
	// succ:  l00408B10
l00408B10:
	esp = fp
	eax = Mem0[esp + 0x00000010:word32]
	ecx = Mem0[esp + 0x0000000C:word32]
	edx = Mem0[esp + 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	eax = memset(Mem0[esp:(ptr void)], Mem0[esp + 4:int32], Mem0[esp + 8:size_t])
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	return
	// succ:  fn00408B10_exit
fn00408B10_exit:


// fn00408B30
// Return size: 4
void fn00408B30()
fn00408B30_entry:
	// succ:  l00408B30
l00408B30:
	esp = fp
	eax = Mem0[esp + 0x00000004:word32]
	ecx = Mem0[esp + 0x00000008:word32]
	edx = Mem0[esp + 0x0000000C:word32]
	Mem0[eax + 0x00000244:word32] = ecx
	ecx = Mem0[esp + 0x00000010:word32]
	Mem0[eax + 0x00000248:word32] = edx
	Mem0[eax + 0x0000024C:word32] = ecx
	return
	// succ:  fn00408B30_exit
fn00408B30_exit:


// fn00408B60
// Return size: 4
void fn00408B60()
fn00408B60_entry:
	// succ:  l00408B60
l00408B60:
	esp = fp
	eax = Mem0[esp + 0x00000004:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn00408980 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	return
	// succ:  fn00408B60_exit
fn00408B60_exit:


// fn00408B80
// Return size: 4
void fn00408B80()
fn00408B80_entry:
	// succ:  l00408B80
l00408B80:
	esp = fp
	eax = Mem0[esp + 0x00000004:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn00408A30 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	return
	// succ:  fn00408B80_exit
fn00408B80_exit:


// fn00408BA0
// Return size: 4
void fn00408BA0()
fn00408BA0_entry:
	// succ:  l00408BA0
l00408BA0:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000008:word32]
	SZO = cond(esi & esi)
	C = false
	branch Test(EQ,Z) l00408BEC
	// succ:  l00408BA9 l00408BEC
l00408BA9:
	ecx = Mem0[esp + 0x0000000C:word32]
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l00408BEC
	// succ:  l00408BB1 l00408BEC
l00408BB1:
	eax = Mem0[esi + 0x00000248:word32]
	SZO = cond(eax & eax)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	branch Test(EQ,Z) l00408BC2
	// succ:  l00408BBE l00408BC2
l00408BBE:
	call eax (retsize: 4;)
	goto l00408BC7
	// succ:  l00408BC7
l00408BC2:
	call fn00408AB0 (retsize: 4;)
	// succ:  l00408BC7
l00408BC7:
	edi = eax
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SZO = cond(edi & edi)
	C = false
	branch Test(NE,Z) l00408BE7
	// succ:  l00408BD0 l00408BE7
l00408BD0:
	SZO = cond(Mem0[esi + 0x0000006C:word32] & 0x00100000)
	C = false
	branch Test(NE,Z) l00408BE7
	// succ:  l00408BD9 l00408BE7
l00408BD9:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416704
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l00408BE7
l00408BE7:
	eax = edi
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00408BA0_exit
l00408BEC:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00408BA0_exit
fn00408BA0_exit:


// fn00408BF0
// Return size: 4
void fn00408BF0()
fn00408BF0_entry:
	goto l00408BF0
	// succ:  l00408BF0
l00408AD0:
	SCZO = cond(Mem0[esp + 0x00000004:word32] - 0x00000000)
	branch Test(EQ,Z) l00408AE7
	// succ:  l00408AD7 l00408AE7
l00408AD7:
	eax = Mem0[esp + 0x00000008:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00408AE7
	// succ:  l00408ADF l00408AE7
l00408ADF:
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	free(Mem0[esp:(ptr void)])
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00408AE7
l00408AE7:
	return
	// succ:  fn00408BF0_exit
l00408BF0:
	esp = fp
	ecx = Mem0[esp + 0x00000004:word32]
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l00408C19
	// succ:  l00408BF8 l00408C19
l00408BF8:
	edx = Mem0[esp + 0x00000008:word32]
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l00408C19
	// succ:  l00408C00 l00408C19
l00408C00:
	eax = Mem0[ecx + 0x0000024C:word32]
	SZO = cond(eax & eax)
	C = false
	Mem0[esp + 0x00000008:word32] = edx
	Mem0[esp + 0x00000004:word32] = ecx
	branch Test(EQ,Z) l00408C14
	// succ:  l00408C12 l00408C14
l00408C12:
l00408C14:
	goto l00408AD0
	// succ:  l00408AD0
l00408C19:
	return
	// succ:  fn00408BF0_exit
fn00408BF0_exit:


// fn00408C20
// Return size: 4
void fn00408C20()
fn00408C20_entry:
	// succ:  l00408C20
l00408C20:
	esp = fp
	ecx = Mem0[esp + 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esi + 0x0000006C:word32]
	eax = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	eax = eax | 0x00100000
	SZO = cond(eax)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	Mem0[esi + 0x0000006C:word32] = eax
	call fn00408BA0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	Mem0[esi + 0x0000006C:word32] = edi
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00408C20_exit
fn00408C20_exit:


// fn00408C50
// Return size: 4
void fn00408C50()
fn00408C50_entry:
	// succ:  l00408C50
l00408C50:
	esp = fp
	ecx = Mem0[esp + 0x00000004:word32]
	eax = (word32) Mem0[ecx:byte]
	edx = (word32) Mem0[ecx + 0x00000001:byte]
	eax = eax << 0x00000008
	SCZO = cond(eax)
	eax = eax + edx
	SCZO = cond(eax)
	edx = (word32) Mem0[ecx + 0x00000002:byte]
	ecx = (word32) Mem0[ecx + 0x00000003:byte]
	eax = eax << 0x00000008
	SCZO = cond(eax)
	eax = eax + edx
	SCZO = cond(eax)
	eax = eax << 0x00000008
	SCZO = cond(eax)
	eax = eax + ecx
	SCZO = cond(eax)
	return
	// succ:  fn00408C50_exit
fn00408C50_exit:


// fn00408C80
// Return size: 4
void fn00408C80()
fn00408C80_entry:
	// succ:  l00408C80
l00408C80:
	esp = fp
	ecx = Mem0[esp + 0x00000004:word32]
	ax = (word16) Mem0[ecx:byte]
	cx = (word16) Mem0[ecx + 0x00000001:byte]
	ax = ax << 0x0008
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	return
	// succ:  fn00408C80_exit
fn00408C80_exit:


// fn00408CA0
// Return size: 4
void fn00408CA0()
fn00408CA0_entry:
	// succ:  l00408CA0
l00408CA0:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = Mem0[esp + 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000014:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp + 0x00000014:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn004088C0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00407DF0 (retsize: 4;)
	esp = esp + 0x00000018
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00408CA0_exit
fn00408CA0_exit:


// fn00408CD0
// Return size: 4
void fn00408CD0()
fn00408CD0_entry:
	// succ:  l00408CD0
l00408CD0:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp + 0x0000000C:word32]
	SZO = cond(Mem0[edi + 0x0000011C:byte] & 0x20)
	C = false
	esi = 0x00000001
	branch Test(EQ,Z) l00408CF5
	// succ:  l00408CE4 l00408CF5
l00408CE4:
	eax = Mem0[edi + 0x0000006C:word32]
	eax = eax & 0x00000300
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 0x00000300)
	branch Test(NE,Z) l00408D00
	// succ:  l00408CF3 l00408D00
l00408CF3:
	goto l00408CFE
	// succ:  l00408CFE
l00408CF5:
	SZO = cond(Mem0[edi + 0x0000006C:word32] & 0x00000800)
	C = false
	branch Test(EQ,Z) l00408D00
	// succ:  l00408CFE l00408D00
l00408CFE:
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	// succ:  l00408D00
l00408D00:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000004
	ecx = esp + 0x00000010
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004088C0 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	SZO = cond(esi & esi)
	C = false
	branch Test(EQ,Z) l00408D31
	// succ:  l00408D14 l00408D31
l00408D14:
	edx = esp + 0x0000000C
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call fn00408C50 (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	SCZO = cond(eax - Mem0[edi + 0x00000110:word32])
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	cl = Test(NE,Z)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = ecx
	return
	// succ:  fn00408CD0_exit
l00408D31:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00408CD0_exit
fn00408CD0_exit:


// fn00408D40
// Return size: 4
void fn00408D40()
fn00408D40_entry:
	// succ:  l00408D40
l00408D40:
	esp = fp
	esp = esp - 0x00000048
	SCZO = cond(esp)
	eax = Mem0[0x0041C340:word32]
	eax = eax ^ esp
	SZO = cond(eax)
	C = false
	Mem0[esp + 0x00000044:word32] = eax
	ecx = Mem0[esp + 0x00000060:word32]
	eax = Mem0[esp + 0x00000054:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = Mem0[esp + 0x00000060:word32]
	Mem0[esp + 0x00000010:word32] = ecx
	ecx = Mem0[esp + 0x00000054:word32]
	SZO = cond(ecx & ecx)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000054:word32]
	Mem0[esp + 0x00000008:word32] = eax
	branch Test(NE,Z) l0040908C
	// succ:  l00408D74 l0040908C
l00408D74:
	ecx = Mem0[esi + 0x000000B0:word32]
	edx = ebx + eax
	eax = Mem0[esp + 0x00000060:word32]
	eax = eax - ebx
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	Mem0[esi + 0x00000078:word32] = eax
	eax = Mem0[esi + 0x000000AC:word32]
	ebp = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	Mem0[esi + 0x00000074:word32] = edx
	Mem0[esi + 0x00000080:word32] = eax
	Mem0[esi + 0x00000084:word32] = ecx
	edi = ebp
	branch Test(EQ,Z) l00408FE6
	// succ:  l00408DAA l00408FE6
l00408DAA:
	ebx = ebx + 0x00000000
	// succ:  l00408DB0
l00408DB0:
	eax = esi + 0x00000074
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000001
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn00412D50 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	Mem0[esp + 0x00000014:word32] = eax
	branch Test(EQ,Z) l00408DCF
	// succ:  l00408DC6 l00408DCF
l00408DC6:
	SCZO = cond(eax - 0x00000001)
	branch Test(NE,Z) l00408F0A
	// succ:  l00408DCF l00408F0A
l00408DCF:
	ecx = Mem0[esi + 0x00000084:word32]
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l00408DE2
	// succ:  l00408DD9 l00408DE2
l00408DD9:
	SCZO = cond(eax - 0x00000001)
	branch Test(NE,Z) l00408EFB
	// succ:  l00408DE2 l00408EFB
l00408DE2:
	SZO = cond(edi & edi)
	C = false
	branch Test(NE,Z) l00408E45
	// succ:  l00408DE6 l00408E45
l00408DE6:
	ebp = ebx
	ebp = ebp - ecx
	SCZO = cond(ebp)
	ebp = ebp + Mem0[esi + 0x000000B0:word32]
	SCZO = cond(ebp)
	edx = ebp + 0x00000001
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408C20 (retsize: 4;)
	edi = eax
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SZO = cond(edi & edi)
	C = false
	branch Test(NE,Z) l00408E1C
	// succ:  l00408E03 l00408E1C
l00408E03:
	eax = Mem0[esp + 0x00000010:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408BF0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416838
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	// succ:  l00408E1C
l00408E1C:
	edx = Mem0[esi + 0x000000AC:word32]
	ecx = ebp
	ecx = ecx - ebx
	SCZO = cond(ecx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	eax = ebx + edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = memcpy(Mem0[esp:(ptr void)], Mem0[esp + 4:(ptr void)], Mem0[esp + 8:size_t])
	ecx = Mem0[esp + 0x0000001C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	eax = memcpy(Mem0[esp:(ptr void)], Mem0[esp + 4:(ptr void)], Mem0[esp + 8:size_t])
	esp = esp + 0x00000018
	SCZO = cond(esp)
	goto l00408ED0
	// succ:  l00408ED0
l00408E45:
	eax = Mem0[esi + 0x000000B0:word32]
	edx = ebp
	edx = edx - ecx
	SCZO = cond(edx)
	ecx = edx + 0x00000001 + eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	Mem0[esp + 0x00000020:word32] = edi
	call fn00408C20 (retsize: 4;)
	edi = eax
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SZO = cond(edi & edi)
	C = false
	branch Test(NE,Z) l00408E8B
	// succ:  l00408E67 l00408E8B
l00408E67:
	edx = Mem0[esp + 0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408BF0 (retsize: 4;)
	eax = Mem0[esp + 0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408BF0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416810
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000018
	SCZO = cond(esp)
	// succ:  l00408E8B
l00408E8B:
	ecx = Mem0[esp + 0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	eax = memcpy(Mem0[esp:(ptr void)], Mem0[esp + 4:(ptr void)], Mem0[esp + 8:size_t])
	edx = Mem0[esp + 0x00000024:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408BF0 (retsize: 4;)
	eax = Mem0[esi + 0x000000B0:word32]
	eax = eax - Mem0[esi + 0x00000084:word32]
	SCZO = cond(eax)
	ecx = Mem0[esi + 0x000000AC:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	edx = edi + ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	eax = memcpy(Mem0[esp:(ptr void)], Mem0[esp + 4:(ptr void)], Mem0[esp + 8:size_t])
	eax = Mem0[esi + 0x000000B0:word32]
	eax = eax - Mem0[esi + 0x00000084:word32]
	SCZO = cond(eax)
	esp = esp + 0x00000020
	SCZO = cond(esp)
	ebp = ebp + eax
	SCZO = cond(ebp)
	// succ:  l00408ED0
l00408ED0:
	SCZO = cond(Mem0[esp + 0x00000014:word32] - 0x00000001)
	Mem0[edi + ebp:byte] = 0x00
	branch Test(EQ,Z) l00409053
	// succ:  l00408EDF l00409053
l00408EDF:
	ecx = Mem0[esi + 0x000000AC:word32]
	edx = Mem0[esi + 0x000000B0:word32]
	eax = Mem0[esp + 0x00000014:word32]
	Mem0[esi + 0x00000080:word32] = ecx
	Mem0[esi + 0x00000084:word32] = edx
	// succ:  l00408EFB
l00408EFB:
	SCZO = cond(Mem0[esi + 0x00000078:word32] - 0x00000000)
	branch Test(NE,Z) l00408DB0
	// succ:  l00408F05 l00408DB0
l00408F05:
	goto l00408FAD
	// succ:  l00408FAD
l00408F0A:
	eax = Mem0[esi + 0x0000008C:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00408F17
	// succ:  l00408F14 l00408F17
l00408F14:
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	goto l00408F1C
	// succ:  l00408F1C
l00408F17:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041C000
	// succ:  l00408F1C
l00408F1C:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	eax = esi + 0x00000074
	esp = esp + 0x00000008
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn00412AF0 (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	SZO = cond(edi & edi)
	C = false
	Mem0[esi + 0x00000078:word32] = 0x00000000
	branch Test(NE,Z) l00408F77
	// succ:  l00408F3C l00408F77
l00408F3C:
	ebp = ebx + 0x00000020
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408C20 (retsize: 4;)
	edi = eax
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SZO = cond(edi & edi)
	C = false
	branch Test(NE,Z) l00408F68
	// succ:  l00408F4F l00408F68
l00408F4F:
	eax = Mem0[esp + 0x00000010:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408BF0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004167E8
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	// succ:  l00408F68
l00408F68:
	ecx = Mem0[esp + 0x00000010:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	eax = memcpy(Mem0[esp:(ptr void)], Mem0[esp + 4:(ptr void)], Mem0[esp + 8:size_t])
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	// succ:  l00408F77
l00408F77:
	edx = Mem0[esp + 0x00000010:word32]
	eax = Mem0[esp + 0x00000068:word32]
	edx = edx - edi
	SCZO = cond(edx)
	Mem0[edi - 0x00000001 + ebp:byte] = 0x00
	ebp = edx - 0x00000001 + eax
	SCZO = cond(ebp - 0x0000001F)
	branch Test(ULT,C) l00408F94
	// succ:  l00408F8F l00408F94
l00408F8F:
	ebp = 0x0000001F
	// succ:  l00408F94
l00408F94:
	ecx = ebp + 0x00000001
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	edx = ebx + edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041C000
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	eax = memcpy(Mem0[esp:(ptr void)], Mem0[esp + 4:(ptr void)], Mem0[esp + 8:size_t])
	eax = Mem0[esp + 0x00000020:word32]
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	// succ:  l00408FAD
l00408FAD:
	SCZO = cond(eax - 0x00000001)
	branch Test(EQ,Z) l00409053
	// succ:  l00408FB6 l00409053
l00408FB6:
	SCZO = cond(eax - 0xFFFFFFFB)
	branch Test(NE,Z) l00408FCE
	// succ:  l00408FBB l00408FCE
l00408FBB:
	eax = esi + 0x0000011C
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004167B4
	ecx = esp + 0x00000028
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	goto l00408FF7
	// succ:  l00408FF7
l00408FCE:
	SCZO = cond(eax - 0xFFFFFFFD)
	branch Test(NE,Z) l00408FE6
	// succ:  l00408FD3 l00408FE6
l00408FD3:
	edx = esi + 0x0000011C
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416784
	eax = esp + 0x00000028
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	goto l00408FF7
	// succ:  l00408FF7
l00408FE6:
	ecx = esi + 0x0000011C
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416754
	edx = esp + 0x00000028
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	// succ:  l00408FF7
l00408FF7:
	call MSVCR80.dll!sprintf (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	eax = esp + 0x00000020
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SZO = cond(edi & edi)
	C = false
	ebp = ebx
	branch Test(NE,Z) l0040904F
	// succ:  l00409014 l0040904F
l00409014:
	ecx = ebx + 0x00000001
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408C20 (retsize: 4;)
	edi = eax
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SZO = cond(edi & edi)
	C = false
	branch Test(NE,Z) l00409040
	// succ:  l00409027 l00409040
l00409027:
	edx = Mem0[esp + 0x00000010:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408BF0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416738
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	// succ:  l00409040
l00409040:
	eax = Mem0[esp + 0x00000010:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	eax = memcpy(Mem0[esp:(ptr void)], Mem0[esp + 4:(ptr void)], Mem0[esp + 8:size_t])
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	// succ:  l0040904F
l0040904F:
	Mem0[ebx + edi:byte] = 0x00
	// succ:  l00409053
l00409053:
	eax = esi + 0x00000074
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn00412AF0 (retsize: 4;)
	ecx = Mem0[esp + 0x00000014:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	Mem0[esi + 0x00000078:word32] = 0x00000000
	call fn00408BF0 (retsize: 4;)
	edx = Mem0[esp + 0x00000028:word32]
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	eax = edi
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[edx:word32] = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp + 0x00000044:word32]
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x00000048
	SCZO = cond(esp)
	return
	// succ:  fn00408D40_exit
l0040908C:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	eax = esp + 0x0000001C
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416714
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call MSVCR80.dll!sprintf (retsize: 4;)
	ecx = esp + 0x00000024
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	eax = Mem0[esp + 0x0000001C:word32]
	edx = Mem0[esp + 0x00000028:word32]
	ecx = Mem0[esp + 0x00000060:word32]
	esp = esp + 0x00000014
	SCZO = cond(esp)
	Mem0[ebx + eax:byte] = 0x00
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[edx:word32] = ebx
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x00000048
	SCZO = cond(esp)
	return
	// succ:  fn00408D40_exit
fn00408D40_exit:


// fn004090D0
// Return size: 4
void fn004090D0()
fn004090D0_entry:
	// succ:  l004090D0
l004090D0:
	esp = fp
	ecx = Mem0[esp + 0x00000008:word32]
	al = Mem0[ecx:byte]
	SCZO = cond(al - 0x41)
	branch Test(ULT,C) l0040911F
	// succ:  l004090DA l0040911F
l004090DA:
	SCZO = cond(al - 0x7A)
	branch Test(UGT,CZ) l0040911F
	// succ:  l004090DE l0040911F
l004090DE:
	SCZO = cond(al - 0x5A)
	branch Test(ULE,CZ) l004090E6
	// succ:  l004090E2 l004090E6
l004090E2:
	SCZO = cond(al - 0x61)
	branch Test(ULT,C) l0040911F
	// succ:  l004090E6 l0040911F
l004090E6:
	al = Mem0[ecx + 0x00000001:byte]
	SCZO = cond(al - 0x41)
	branch Test(ULT,C) l0040911F
	// succ:  l004090ED l0040911F
l004090ED:
	SCZO = cond(al - 0x7A)
	branch Test(UGT,CZ) l0040911F
	// succ:  l004090F1 l0040911F
l004090F1:
	SCZO = cond(al - 0x5A)
	branch Test(ULE,CZ) l004090F9
	// succ:  l004090F5 l004090F9
l004090F5:
	SCZO = cond(al - 0x61)
	branch Test(ULT,C) l0040911F
	// succ:  l004090F9 l0040911F
l004090F9:
	al = Mem0[ecx + 0x00000002:byte]
	SCZO = cond(al - 0x41)
	branch Test(ULT,C) l0040911F
	// succ:  l00409100 l0040911F
l00409100:
	SCZO = cond(al - 0x7A)
	branch Test(UGT,CZ) l0040911F
	// succ:  l00409104 l0040911F
l00409104:
	SCZO = cond(al - 0x5A)
	branch Test(ULE,CZ) l0040910C
	// succ:  l00409108 l0040910C
l00409108:
	SCZO = cond(al - 0x61)
	branch Test(ULT,C) l0040911F
	// succ:  l0040910C l0040911F
l0040910C:
	al = Mem0[ecx + 0x00000003:byte]
	SCZO = cond(al - 0x41)
	branch Test(ULT,C) l0040911F
	// succ:  l00409113 l0040911F
l00409113:
	SCZO = cond(al - 0x7A)
	branch Test(UGT,CZ) l0040911F
	// succ:  l00409117 l0040911F
l00409117:
	SCZO = cond(al - 0x5A)
	branch Test(ULE,CZ) l0040912C
	// succ:  l0040911B l0040912C
l0040911B:
	SCZO = cond(al - 0x61)
	branch Test(UGE,C) l0040912C
	// succ:  l0040911F l0040912C
l0040911F:
	Mem0[esp + 0x00000008:word32] = 0x00416860
	// succ:  l00409127_thunk_fn00408850
l00409127_thunk_fn00408850:
	call fn00408850 (retsize: 4;)
	return
	// succ:  fn004090D0_exit
l0040912C:
	return
	// succ:  fn004090D0_exit
fn004090D0_exit:


// fn00409130
// Return size: 4
void fn00409130()
fn00409130_entry:
	// succ:  l00409130
l00409130:
	esp = fp
	esp = esp - 0x00000010
	SCZO = cond(esp)
	SCZO = cond(Mem0[esp + 0x0000001C:word32] - 0x000000FF)
	branch Test(NE,Z) l00409183
	// succ:  l0040913D l00409183
l0040913D:
	ecx = Mem0[esp + 0x00000014:word32]
	al = Mem0[ecx + 0x0000010B:byte]
	SCZO = cond(al - 0x08)
	eax = (word32) al
	branch Test(ULT,C) l0040915A
	// succ:  l0040914E l0040915A
l0040914E:
	eax = eax >>u 0x00000003
	SCZO = cond(eax)
	eax = eax *s Mem0[ecx + 0x000000C8:word32]
	SCZO = cond(eax)
	goto l00409167
	// succ:  l00409167
l0040915A:
	eax = eax *s Mem0[ecx + 0x000000C8:word32]
	SCZO = cond(eax)
	eax = eax + 0x00000007
	SCZO = cond(eax)
	eax = eax >>u 0x00000003
	SCZO = cond(eax)
	// succ:  l00409167
l00409167:
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = Mem0[ecx + 0x000000EC:word32]
	ecx = Mem0[esp + 0x0000001C:word32]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	eax = memcpy(Mem0[esp:(ptr void)], Mem0[esp + 4:(ptr void)], Mem0[esp + 8:size_t])
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	return
	// succ:  fn00409130_exit
l00409183:
	eax = Mem0[esp + 0x00000014:word32]
	ecx = (word32) Mem0[eax + 0x0000010B:byte]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[eax + 0x000000EC:word32]
	edx = ecx
	esi = esi + 0x00000001
	SCZO = cond(esi)
	edx = edx - 0x00000001
	SCZO = cond(edx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	branch Test(EQ,Z) l00409377
	// succ:  l004091A6 l00409377
l004091A6:
	edx = edx - 0x00000001
	SCZO = cond(edx)
	branch Test(EQ,Z) l004092B8
	// succ:  l004091AF l004092B8
l004091AF:
	edx = edx - 0x00000002
	SCZO = cond(edx)
	branch Test(EQ,Z) l00409202
	// succ:  l004091B4 l00409202
l004091B4:
	eax = Mem0[eax + 0x000000C8:word32]
	ebp = Mem0[esp + 0x00000028:word32]
	ecx = ecx >>u 0x00000003
	SCZO = cond(ecx)
	SZO = cond(eax & eax)
	C = false
	edi = ecx
	bl = 0x80
	branch Test(ULE,CZ) l00409424
	// succ:  l004091CD l00409424
l004091CD:
	Mem0[esp + 0x00000010:word32] = eax
	// succ:  l004091D1
l004091D1:
	dl = Mem0[esp + 0x0000002C:byte]
	SZO = cond(dl & bl)
	C = false
	branch Test(EQ,Z) l004091E4
	// succ:  l004091D9 l004091E4
l004091D9:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	eax = memcpy(Mem0[esp:(ptr void)], Mem0[esp + 4:(ptr void)], Mem0[esp + 8:size_t])
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	// succ:  l004091E4
l004091E4:
	esi = esi + edi
	SCZO = cond(esi)
	ebp = ebp + edi
	SCZO = cond(ebp)
	SCZO = cond(bl - 0x01)
	branch Test(NE,Z) l004091F1
	// succ:  l004091ED l004091F1
l004091ED:
	bl = 0x80
	goto l004091F3
	// succ:  l004091F3
l004091F1:
	bl = bl >>u 0x01
	SCZO = cond(bl)
	// succ:  l004091F3
l004091F3:
	v18 = Mem0[esp + 0x00000010:word32] - 0x00000001
	Mem0[esp + 0x00000010:word32] = v18
	SCZO = cond(v18)
	branch Test(NE,Z) l004091D1
	// succ:  l004091FA l004091D1
l004091FA:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000010
	SCZO = cond(esp)
	return
	// succ:  fn00409130_exit
l00409202:
	SZO = cond(Mem0[eax + 0x00000070:word32] & 0x00010000)
	C = false
	edi = Mem0[esp + 0x00000028:word32]
	ecx = Mem0[eax + 0x000000C8:word32]
	Mem0[esp + 0x00000010:word32] = 0x00000080
	branch Test(EQ,Z) l0040922E
	// succ:  l0040921D l0040922E
l0040921D:
	eax = 0x00000004
	ebp = ebp ^ ebp
	SZO = cond(ebp)
	C = false
	Mem0[esp + 0x00000014:word32] = eax
	Mem0[esp + 0x00000018:word32] = eax
	goto l00409243
	// succ:  l00409243
l0040922E:
	ebp = 0x00000004
	Mem0[esp + 0x00000014:word32] = 0x00000000
	Mem0[esp + 0x00000018:word32] = 0xFFFFFFFC
	// succ:  l00409243
l00409243:
	SZO = cond(ecx & ecx)
	C = false
	edx = ebp
	branch Test(ULE,CZ) l00409424
	// succ:  l0040924D l00409424
l0040924D:
	Mem0[esp + 0x0000001C:word32] = ecx
	// succ:  l00409251
l00409251:
	eax = Mem0[esp + 0x0000002C:word32]
	SZO = cond(Mem0[esp + 0x00000010:word32] & eax)
	C = false
	branch Test(EQ,Z) l0040927D
	// succ:  l0040925B l0040927D
l0040925B:
	eax = (word32) Mem0[esi:byte]
	cl = dl
	eax = eax >>u cl
	SCZO = cond(eax)
	ecx = 0x00000004
	ecx = ecx - edx
	SCZO = cond(ecx)
	ebx = 0x00000F0F
	ebx = ebx >> cl
	SCZO = cond(ebx)
	eax = eax & 0x0000000F
	SZO = cond(eax)
	C = false
	ecx = edx
	al = al << cl
	SCZO = cond(al)
	bl = bl & Mem0[edi:byte]
	SZO = cond(bl)
	C = false
	bl = bl | al
	SZO = cond(bl)
	C = false
	Mem0[edi:byte] = bl
	// succ:  l0040927D
l0040927D:
	SCZO = cond(edx - Mem0[esp + 0x00000014:word32])
	branch Test(NE,Z) l0040928D
	// succ:  l00409283 l0040928D
l00409283:
	esi = esi + 0x00000001
	SCZO = cond(esi)
	edx = ebp
	edi = edi + 0x00000001
	SCZO = cond(edi)
	goto l00409291
	// succ:  l00409291
l0040928D:
	edx = edx + Mem0[esp + 0x00000018:word32]
	SCZO = cond(edx)
	// succ:  l00409291
l00409291:
	eax = 0x00000001
	SCZO = cond(Mem0[esp + 0x00000010:word32] - eax)
	branch Test(NE,Z) l004092A6
	// succ:  l0040929C l004092A6
l0040929C:
	Mem0[esp + 0x00000010:word32] = 0x00000080
	goto l004092AA
	// succ:  l004092AA
l004092A6:
	v25 = Mem0[esp + 0x00000010:word32] >> 0x00000001
	Mem0[esp + 0x00000010:word32] = v25
	SCZO = cond(v25)
	// succ:  l004092AA
l004092AA:
	v20 = Mem0[esp + 0x0000001C:word32] - eax
	Mem0[esp + 0x0000001C:word32] = v20
	SCZO = cond(v20)
	branch Test(NE,Z) l00409251
	// succ:  l004092B0 l00409251
l004092B0:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000010
	SCZO = cond(esp)
	return
	// succ:  fn00409130_exit
l004092B8:
	SZO = cond(Mem0[eax + 0x00000070:word32] & 0x00010000)
	C = false
	edi = Mem0[esp + 0x00000028:word32]
	ecx = Mem0[eax + 0x000000C8:word32]
	Mem0[esp + 0x00000010:word32] = 0x00000080
	branch Test(EQ,Z) l004092E7
	// succ:  l004092D3 l004092E7
l004092D3:
	ebp = ebp ^ ebp
	SZO = cond(ebp)
	C = false
	Mem0[esp + 0x0000001C:word32] = 0x00000006
	Mem0[esp + 0x00000018:word32] = 0x00000002
	goto l004092FC
	// succ:  l004092FC
l004092E7:
	ebp = 0x00000006
	Mem0[esp + 0x0000001C:word32] = 0x00000000
	Mem0[esp + 0x00000018:word32] = 0xFFFFFFFE
	// succ:  l004092FC
l004092FC:
	SZO = cond(ecx & ecx)
	C = false
	edx = ebp
	branch Test(ULE,CZ) l00409424
	// succ:  l00409306 l00409424
l00409306:
	Mem0[esp + 0x00000014:word32] = ecx
	ebx = ebx + 0x00000000
	// succ:  l00409310
l00409310:
	ecx = Mem0[esp + 0x0000002C:word32]
	SZO = cond(Mem0[esp + 0x00000010:word32] & ecx)
	C = false
	branch Test(EQ,Z) l0040933C
	// succ:  l0040931A l0040933C
l0040931A:
	eax = (word32) Mem0[esi:byte]
	cl = dl
	eax = eax >>u cl
	SCZO = cond(eax)
	ecx = 0x00000006
	ecx = ecx - edx
	SCZO = cond(ecx)
	ebx = 0x00003F3F
	ebx = ebx >> cl
	SCZO = cond(ebx)
	eax = eax & 0x00000003
	SZO = cond(eax)
	C = false
	ecx = edx
	al = al << cl
	SCZO = cond(al)
	bl = bl & Mem0[edi:byte]
	SZO = cond(bl)
	C = false
	bl = bl | al
	SZO = cond(bl)
	C = false
	Mem0[edi:byte] = bl
	// succ:  l0040933C
l0040933C:
	SCZO = cond(edx - Mem0[esp + 0x0000001C:word32])
	branch Test(NE,Z) l0040934C
	// succ:  l00409342 l0040934C
l00409342:
	esi = esi + 0x00000001
	SCZO = cond(esi)
	edx = ebp
	edi = edi + 0x00000001
	SCZO = cond(edi)
	goto l00409350
	// succ:  l00409350
l0040934C:
	edx = edx + Mem0[esp + 0x00000018:word32]
	SCZO = cond(edx)
	// succ:  l00409350
l00409350:
	eax = 0x00000001
	SCZO = cond(Mem0[esp + 0x00000010:word32] - eax)
	branch Test(NE,Z) l00409365
	// succ:  l0040935B l00409365
l0040935B:
	Mem0[esp + 0x00000010:word32] = 0x00000080
	goto l00409369
	// succ:  l00409369
l00409365:
	v22 = Mem0[esp + 0x00000010:word32] >> 0x00000001
	Mem0[esp + 0x00000010:word32] = v22
	SCZO = cond(v22)
	// succ:  l00409369
l00409369:
	v21 = Mem0[esp + 0x00000014:word32] - eax
	Mem0[esp + 0x00000014:word32] = v21
	SCZO = cond(v21)
	branch Test(NE,Z) l00409310
	// succ:  l0040936F l00409310
l0040936F:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000010
	SCZO = cond(esp)
	return
	// succ:  fn00409130_exit
l00409377:
	SZO = cond(Mem0[eax + 0x00000070:word32] & 0x00010000)
	C = false
	edi = Mem0[esp + 0x00000028:word32]
	ecx = Mem0[eax + 0x000000C8:word32]
	Mem0[esp + 0x00000010:word32] = 0x00000080
	branch Test(EQ,Z) l004093A6
	// succ:  l00409392 l004093A6
l00409392:
	ebp = ebp ^ ebp
	SZO = cond(ebp)
	C = false
	Mem0[esp + 0x0000001C:word32] = 0x00000007
	Mem0[esp + 0x00000018:word32] = 0x00000001
	goto l004093BB
	// succ:  l004093BB
l004093A6:
	ebp = 0x00000007
	Mem0[esp + 0x0000001C:word32] = 0x00000000
	Mem0[esp + 0x00000018:word32] = 0xFFFFFFFF
	// succ:  l004093BB
l004093BB:
	SZO = cond(ecx & ecx)
	C = false
	edx = ebp
	branch Test(ULE,CZ) l00409424
	// succ:  l004093C1 l00409424
l004093C1:
	Mem0[esp + 0x00000014:word32] = ecx
	// succ:  l004093C5
l004093C5:
	eax = Mem0[esp + 0x0000002C:word32]
	SZO = cond(Mem0[esp + 0x00000010:word32] & eax)
	C = false
	branch Test(EQ,Z) l004093F1
	// succ:  l004093CF l004093F1
l004093CF:
	eax = (word32) Mem0[esi:byte]
	cl = dl
	eax = eax >>u cl
	SCZO = cond(eax)
	ecx = 0x00000007
	ecx = ecx - edx
	SCZO = cond(ecx)
	ebx = 0x00007F7F
	ebx = ebx >> cl
	SCZO = cond(ebx)
	eax = eax & 0x00000001
	SZO = cond(eax)
	C = false
	ecx = edx
	al = al << cl
	SCZO = cond(al)
	bl = bl & Mem0[edi:byte]
	SZO = cond(bl)
	C = false
	bl = bl | al
	SZO = cond(bl)
	C = false
	Mem0[edi:byte] = bl
	// succ:  l004093F1
l004093F1:
	SCZO = cond(edx - Mem0[esp + 0x0000001C:word32])
	branch Test(NE,Z) l00409401
	// succ:  l004093F7 l00409401
l004093F7:
	esi = esi + 0x00000001
	SCZO = cond(esi)
	edx = ebp
	edi = edi + 0x00000001
	SCZO = cond(edi)
	goto l00409405
	// succ:  l00409405
l00409401:
	edx = edx + Mem0[esp + 0x00000018:word32]
	SCZO = cond(edx)
	// succ:  l00409405
l00409405:
	eax = 0x00000001
	SCZO = cond(Mem0[esp + 0x00000010:word32] - eax)
	branch Test(NE,Z) l0040941A
	// succ:  l00409410 l0040941A
l00409410:
	Mem0[esp + 0x00000010:word32] = 0x00000080
	goto l0040941E
	// succ:  l0040941E
l0040941A:
	v24 = Mem0[esp + 0x00000010:word32] >> 0x00000001
	Mem0[esp + 0x00000010:word32] = v24
	SCZO = cond(v24)
	// succ:  l0040941E
l0040941E:
	v23 = Mem0[esp + 0x00000014:word32] - eax
	Mem0[esp + 0x00000014:word32] = v23
	SCZO = cond(v23)
	branch Test(NE,Z) l004093C5
	// succ:  l00409424 l004093C5
l00409424:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000010
	SCZO = cond(esp)
	return
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000010
	SCZO = cond(esp)
	return
	// succ:  fn00409130_exit fn00409130_exit
fn00409130_exit:


// fn00409430
// Return size: 4
void fn00409430()
fn00409430_entry:
	// succ:  l00409430
l00409430:
	esp = fp
	esp = esp - 0x00000030
	SCZO = cond(esp)
	eax = Mem0[0x0041C340:word32]
	eax = eax ^ esp
	SZO = cond(eax)
	C = false
	Mem0[esp + 0x0000002C:word32] = eax
	eax = Mem0[esp + 0x00000034:word32]
	ecx = Mem0[eax + 0x000000EC:word32]
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = (word32) Mem0[eax + 0x00000124:byte]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = Mem0[eax + 0x00000070:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = eax + 0x00000100
	Mem0[esp + 0x00000024:word32] = esi
	branch Test(EQ,Z) l0040984A
	// succ:  l00409467 l0040984A
l00409467:
	SZO = cond(esi & esi)
	C = false
	branch Test(EQ,Z) l0040984A
	// succ:  l0040946F l0040984A
l0040946F:
	edx = Mem0[0x004164D0 + edx * 0x00000004:word32]
	eax = Mem0[esi:word32]
	esi = (word32) Mem0[esi + 0x0000000B:byte]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = eax
	ebp = ebp *s edx
	SCZO = cond(ebp)
	Mem0[esp + 0x0000002C:word32] = edx
	edx = esi
	edx = edx - 0x00000001
	SCZO = cond(edx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	Mem0[esp + 0x00000024:word32] = ebp
	edi = ebp - 0x00000001
	branch Test(EQ,Z) l00409727
	// succ:  l00409499 l00409727
l00409499:
	edx = edx - 0x00000001
	SCZO = cond(edx)
	branch Test(EQ,Z) l0040961F
	// succ:  l004094A2 l0040961F
l004094A2:
	edx = edx - 0x00000002
	SCZO = cond(edx)
	branch Test(EQ,Z) l00409514
	// succ:  l004094A7 l00409514
l004094A7:
	esi = esi >>u 0x00000003
	SCZO = cond(esi)
	ebx = eax - 0x00000001
	edi = edi *s esi
	SCZO = cond(edi)
	ebx = ebx *s esi
	SCZO = cond(ebx)
	ebx = ebx + ecx
	SCZO = cond(ebx)
	edi = edi + ecx
	SCZO = cond(edi)
	SZO = cond(eax & eax)
	C = false
	Mem0[esp + 0x00000018:word32] = 0x00000000
	branch Test(ULE,CZ) l00409824
	// succ:  l004094C7 l00409824
l004094C7:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	eax = esp + 0x00000038
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = memcpy(Mem0[esp:(ptr void)], Mem0[esp + 4:(ptr void)], Mem0[esp + 8:size_t])
	eax = Mem0[esp + 0x0000003C:word32]
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l004094FA
	// succ:  l004094DE l004094FA
l004094DE:
	ebp = eax
	// succ:  l004094E0
l004094E0:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	ecx = esp + 0x00000038
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	eax = memcpy(Mem0[esp:(ptr void)], Mem0[esp + 4:(ptr void)], Mem0[esp + 8:size_t])
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	edi = edi - esi
	SCZO = cond(edi)
	ebp = ebp - 0x00000001
	SCZO = cond(ebp)
	branch Test(NE,Z) l004094E0
	// succ:  l004094F6 l004094E0
l004094F6:
	ebp = Mem0[esp + 0x00000024:word32]
	// succ:  l004094FA
l004094FA:
	eax = Mem0[esp + 0x00000018:word32]
	edx = Mem0[esp + 0x0000002C:word32]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	ebx = ebx - esi
	SCZO = cond(ebx)
	SCZO = cond(eax - Mem0[edx:word32])
	Mem0[esp + 0x00000018:word32] = eax
	branch Test(ULT,C) l004094C7
	// succ:  l0040950F l004094C7
l0040950F:
	goto l00409824
	// succ:  l00409824
l00409514:
	edx = eax - 0x00000001
	edx = edx >>u 0x00000001
	SCZO = cond(edx)
	edi = edi >>u 0x00000001
	SCZO = cond(edi)
	edx = edx + ecx
	SCZO = cond(edx)
	edi = edi + ecx
	SCZO = cond(edi)
	SZO = cond(ebx & 0x00010000)
	C = false
	Mem0[esp + 0x0000001C:word32] = edx
	branch Test(EQ,Z) l0040955D
	// succ:  l0040952B l0040955D
l0040952B:
	edx = edx | 0xFFFFFFFF
	SZO = cond(edx)
	C = false
	ecx = 0x00000000 + eax * 0x00000004
	edx = edx - ecx
	SCZO = cond(edx)
	esi = esi | 0xFFFFFFFF
	SZO = cond(esi)
	C = false
	ecx = 0x00000000 + ebp * 0x00000004
	esi = esi - ecx
	SCZO = cond(esi)
	edx = edx & 0x00000004
	SZO = cond(edx)
	C = false
	esi = esi & 0x00000004
	SZO = cond(esi)
	C = false
	Mem0[esp + 0x00000014:word32] = 0x00000004
	ebp = ebp ^ ebp
	SZO = cond(ebp)
	C = false
	Mem0[esp + 0x00000020:word32] = 0xFFFFFFFC
	goto l00409592
	// succ:  l00409592
l0040955D:
	edx = eax - 0x00000001
	edx = edx & 0x00000001
	SZO = cond(edx)
	C = false
	ebp = ebp + 0xFFFFFFFF
	SCZO = cond(ebp)
	edx = edx + edx
	SCZO = cond(edx)
	edx = edx + edx
	SCZO = cond(edx)
	ebp = ebp & 0x00000001
	SZO = cond(ebp)
	C = false
	ebp = ebp + ebp
	SCZO = cond(ebp)
	ecx = edx
	edx = 0x00000004
	ebp = ebp + ebp
	SCZO = cond(ebp)
	esi = 0x00000004
	edx = edx - ecx
	SCZO = cond(edx)
	esi = esi - ebp
	SCZO = cond(esi)
	ebp = 0x00000004
	Mem0[esp + 0x00000014:word32] = 0x00000000
	Mem0[esp + 0x00000020:word32] = ebp
	// succ:  l00409592
l00409592:
	SZO = cond(eax & eax)
	C = false
	Mem0[esp + 0x00000028:word32] = 0x00000000
	branch Test(ULE,CZ) l00409820
	// succ:  l004095A2 l00409820
l004095A2:
	eax = Mem0[esp + 0x0000001C:word32]
	al = Mem0[eax:byte]
	cl = dl
	al = al >>u cl
	SCZO = cond(al)
	ecx = Mem0[esp + 0x00000030:word32]
	al = al & 0x0F
	SZO = cond(al)
	C = false
	SZO = cond(ecx & ecx)
	C = false
	Mem0[esp + 0x00000013:byte] = al
	branch Test(LE,SZO) l004095F4
	// succ:  l004095BA l004095F4
l004095BA:
	Mem0[esp + 0x00000018:word32] = ecx
	goto l004095C4
	// succ:  l004095C4
l004095C0:
	al = Mem0[esp + 0x00000013:byte]
	// succ:  l004095C4
l004095C4:
	ecx = 0x00000004
	ecx = ecx - esi
	SCZO = cond(ecx)
	ebx = 0x00000F0F
	ebx = ebx >> cl
	SCZO = cond(ebx)
	ecx = esi
	al = al << cl
	SCZO = cond(al)
	bl = bl & Mem0[edi:byte]
	SZO = cond(bl)
	C = false
	bl = bl | al
	SZO = cond(bl)
	C = false
	SCZO = cond(esi - ebp)
	Mem0[edi:byte] = bl
	branch Test(NE,Z) l004095E9
	// succ:  l004095E0 l004095E9
l004095E0:
	esi = Mem0[esp + 0x00000014:word32]
	edi = edi - 0x00000001
	SCZO = cond(edi)
	goto l004095ED
	// succ:  l004095ED
l004095E9:
	esi = esi + Mem0[esp + 0x00000020:word32]
	SCZO = cond(esi)
	// succ:  l004095ED
l004095ED:
	v22 = Mem0[esp + 0x00000018:word32] - 0x00000001
	Mem0[esp + 0x00000018:word32] = v22
	SCZO = cond(v22)
	branch Test(NE,Z) l004095C0
	// succ:  l004095F4 l004095C0
l004095F4:
	SCZO = cond(edx - ebp)
	branch Test(NE,Z) l00409603
	SCZO = cond(edx - ebp)
	branch Test(NE,Z) l00409603
	// succ:  l004095F8 l00409603
l004095F8:
	edx = Mem0[esp + 0x00000014:word32]
	v20 = Mem0[esp + 0x0000001C:word32] - 0x00000001
	Mem0[esp + 0x0000001C:word32] = v20
	SCZO = cond(v20)
	edx = Mem0[esp + 0x00000014:word32]
	v23 = Mem0[esp + 0x0000001C:word32] - 0x00000001
	Mem0[esp + 0x0000001C:word32] = v23
	SCZO = cond(v23)
	goto l00409607
	// succ:  l00409607
l00409603:
	edx = edx + Mem0[esp + 0x00000020:word32]
	SCZO = cond(edx)
	// succ:  l00409607
l00409607:
	eax = Mem0[esp + 0x00000028:word32]
	ecx = Mem0[esp + 0x0000002C:word32]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	SCZO = cond(eax - Mem0[ecx:word32])
	Mem0[esp + 0x00000028:word32] = eax
	branch Test(ULT,C) l004095A2
	// succ:  l0040961A l004095A2
l0040961A:
	goto l00409820
	// succ:  l00409820
l0040961F:
	edx = eax - 0x00000001
	edx = edx >>u 0x00000002
	SCZO = cond(edx)
	edi = edi >>u 0x00000002
	SCZO = cond(edi)
	edx = edx + ecx
	SCZO = cond(edx)
	edi = edi + ecx
	SCZO = cond(edi)
	SZO = cond(ebx & 0x00010000)
	C = false
	Mem0[esp + 0x00000014:word32] = edx
	branch Test(EQ,Z) l00409660
	// succ:  l00409638 l00409660
l00409638:
	edx = eax - 0x00000001 + eax
	esi = ebp - 0x00000001 + ebp
	edx = edx & 0x00000006
	SZO = cond(edx)
	C = false
	esi = esi & 0x00000006
	SZO = cond(esi)
	C = false
	Mem0[esp + 0x0000001C:word32] = 0x00000006
	Mem0[esp + 0x00000020:word32] = 0x00000000
	Mem0[esp + 0x00000024:word32] = 0xFFFFFFFE
	goto l00409696
	// succ:  l00409696
l00409660:
	ecx = eax - 0x00000001
	ecx = ecx & 0x00000003
	SZO = cond(ecx)
	C = false
	edx = 0x00000003
	edx = edx - ecx
	SCZO = cond(edx)
	ecx = ebp - 0x00000001
	ecx = ecx & 0x00000003
	SZO = cond(ecx)
	C = false
	esi = 0x00000003
	esi = esi - ecx
	SCZO = cond(esi)
	edx = edx + edx
	SCZO = cond(edx)
	esi = esi + esi
	SCZO = cond(esi)
	Mem0[esp + 0x0000001C:word32] = 0x00000000
	Mem0[esp + 0x00000020:word32] = 0x00000006
	Mem0[esp + 0x00000024:word32] = 0x00000002
	// succ:  l00409696
l00409696:
	SZO = cond(eax & eax)
	C = false
	Mem0[esp + 0x00000018:word32] = 0x00000000
	branch Test(ULE,CZ) l00409824
	// succ:  l004096A6 l00409824
l004096A6:
	eax = Mem0[esp + 0x00000014:word32]
	al = Mem0[eax:byte]
	cl = dl
	al = al >>u cl
	SCZO = cond(al)
	ecx = Mem0[esp + 0x00000030:word32]
	al = al & 0x03
	SZO = cond(al)
	C = false
	SZO = cond(ecx & ecx)
	C = false
	Mem0[esp + 0x00000013:byte] = al
	branch Test(LE,SZO) l004096FA
	// succ:  l004096BE l004096FA
l004096BE:
	Mem0[esp + 0x00000028:word32] = ecx
	goto l004096C8
	// succ:  l004096C8
l004096C4:
	al = Mem0[esp + 0x00000013:byte]
	// succ:  l004096C8
l004096C8:
	ecx = 0x00000006
	ecx = ecx - esi
	SCZO = cond(ecx)
	ebx = 0x00003F3F
	ebx = ebx >> cl
	SCZO = cond(ebx)
	ecx = esi
	al = al << cl
	SCZO = cond(al)
	bl = bl & Mem0[edi:byte]
	SZO = cond(bl)
	C = false
	bl = bl | al
	SZO = cond(bl)
	C = false
	SCZO = cond(esi - Mem0[esp + 0x00000020:word32])
	Mem0[edi:byte] = bl
	branch Test(NE,Z) l004096EF
	// succ:  l004096E6 l004096EF
l004096E6:
	esi = Mem0[esp + 0x0000001C:word32]
	edi = edi - 0x00000001
	SCZO = cond(edi)
	goto l004096F3
	// succ:  l004096F3
l004096EF:
	esi = esi + Mem0[esp + 0x00000024:word32]
	SCZO = cond(esi)
	// succ:  l004096F3
l004096F3:
	v25 = Mem0[esp + 0x00000028:word32] - 0x00000001
	Mem0[esp + 0x00000028:word32] = v25
	SCZO = cond(v25)
	branch Test(NE,Z) l004096C4
	// succ:  l004096FA l004096C4
l004096FA:
	SCZO = cond(edx - Mem0[esp + 0x00000020:word32])
	branch Test(NE,Z) l0040970B
	SCZO = cond(edx - Mem0[esp + 0x00000020:word32])
	branch Test(NE,Z) l0040970B
	// succ:  l00409700 l0040970B
l00409700:
	edx = Mem0[esp + 0x0000001C:word32]
	v24 = Mem0[esp + 0x00000014:word32] - 0x00000001
	Mem0[esp + 0x00000014:word32] = v24
	SCZO = cond(v24)
	edx = Mem0[esp + 0x0000001C:word32]
	v26 = Mem0[esp + 0x00000014:word32] - 0x00000001
	Mem0[esp + 0x00000014:word32] = v26
	SCZO = cond(v26)
	goto l0040970F
	// succ:  l0040970F
l0040970B:
	edx = edx + Mem0[esp + 0x00000024:word32]
	SCZO = cond(edx)
	// succ:  l0040970F
l0040970F:
	eax = Mem0[esp + 0x00000018:word32]
	ecx = Mem0[esp + 0x0000002C:word32]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	SCZO = cond(eax - Mem0[ecx:word32])
	Mem0[esp + 0x00000018:word32] = eax
	branch Test(ULT,C) l004096A6
	// succ:  l00409722 l004096A6
l00409722:
	goto l00409824
	// succ:  l00409824
l00409727:
	edx = eax - 0x00000001
	edx = edx >>u 0x00000003
	SCZO = cond(edx)
	edi = edi >>u 0x00000003
	SCZO = cond(edi)
	edx = edx + ecx
	SCZO = cond(edx)
	edi = edi + ecx
	SCZO = cond(edi)
	SZO = cond(ebx & 0x00010000)
	C = false
	Mem0[esp + 0x0000001C:word32] = edx
	branch Test(EQ,Z) l00409760
	// succ:  l00409740 l00409760
l00409740:
	esi = ebp - 0x00000001
	edx = eax - 0x00000001
	edx = edx & 0x00000007
	SZO = cond(edx)
	C = false
	esi = esi & 0x00000007
	SZO = cond(esi)
	C = false
	Mem0[esp + 0x00000020:word32] = 0x00000007
	ebp = ebp ^ ebp
	SZO = cond(ebp)
	C = false
	Mem0[esp + 0x00000018:word32] = 0xFFFFFFFF
	goto l0040978F
	// succ:  l0040978F
l00409760:
	ebp = ebp + 0xFFFFFFFF
	SCZO = cond(ebp)
	ecx = eax - 0x00000001
	ecx = ecx & 0x00000007
	SZO = cond(ecx)
	C = false
	edx = 0x00000007
	ebp = ebp & 0x00000007
	SZO = cond(ebp)
	C = false
	esi = 0x00000007
	edx = edx - ecx
	SCZO = cond(edx)
	esi = esi - ebp
	SCZO = cond(esi)
	Mem0[esp + 0x00000020:word32] = 0x00000000
	ebp = 0x00000007
	Mem0[esp + 0x00000018:word32] = 0x00000001
	// succ:  l0040978F
l0040978F:
	SZO = cond(eax & eax)
	C = false
	Mem0[esp + 0x00000014:word32] = edx
	Mem0[esp + 0x00000034:word32] = 0x00000000
	branch Test(ULE,CZ) l00409820
	// succ:  l004097A3 l00409820
l004097A3:
	eax = Mem0[esp + 0x0000001C:word32]
	al = Mem0[eax:byte]
	cl = dl
	al = al >>u cl
	SCZO = cond(al)
	ecx = Mem0[esp + 0x00000030:word32]
	al = al & 0x01
	SZO = cond(al)
	C = false
	SZO = cond(ecx & ecx)
	C = false
	branch Test(LE,SZO) l004097F6
	// succ:  l004097B7 l004097F6
l004097B7:
	Mem0[esp + 0x00000028:word32] = ecx
	// succ:  l004097C0
l004097C0:
	ecx = 0x00000007
	ecx = ecx - esi
	SCZO = cond(ecx)
	edx = 0x00007F7F
	edx = edx >> cl
	SCZO = cond(edx)
	bl = al
	ecx = esi
	bl = bl << cl
	SCZO = cond(bl)
	dl = dl & Mem0[edi:byte]
	SZO = cond(dl)
	C = false
	dl = dl | bl
	SZO = cond(dl)
	C = false
	SCZO = cond(esi - ebp)
	Mem0[edi:byte] = dl
	branch Test(NE,Z) l004097E7
	// succ:  l004097DE l004097E7
l004097DE:
	esi = Mem0[esp + 0x00000020:word32]
	edi = edi - 0x00000001
	SCZO = cond(edi)
	goto l004097EB
	// succ:  l004097EB
l004097E7:
	esi = esi + Mem0[esp + 0x00000018:word32]
	SCZO = cond(esi)
	// succ:  l004097EB
l004097EB:
	v21 = Mem0[esp + 0x00000028:word32] - 0x00000001
	Mem0[esp + 0x00000028:word32] = v21
	SCZO = cond(v21)
	branch Test(NE,Z) l004097C0
	// succ:  l004097F2 l004097C0
l004097F2:
	edx = Mem0[esp + 0x00000014:word32]
	// succ:  l004097F6
l004097F6:
	SCZO = cond(edx - ebp)
	branch Test(NE,Z) l00409805
	// succ:  l004097FA l00409805
l004097FA:
	edx = Mem0[esp + 0x00000020:word32]
	v18 = Mem0[esp + 0x0000001C:word32] - 0x00000001
	Mem0[esp + 0x0000001C:word32] = v18
	SCZO = cond(v18)
	goto l00409809
	// succ:  l00409809
l00409805:
	edx = edx + Mem0[esp + 0x00000018:word32]
	SCZO = cond(edx)
	// succ:  l00409809
l00409809:
	eax = Mem0[esp + 0x00000034:word32]
	ecx = Mem0[esp + 0x0000002C:word32]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	SCZO = cond(eax - Mem0[ecx:word32])
	Mem0[esp + 0x00000014:word32] = edx
	Mem0[esp + 0x00000034:word32] = eax
	branch Test(ULT,C) l004097A3
	// succ:  l00409820 l004097A3
l00409820:
	ebp = Mem0[esp + 0x00000024:word32]
	// succ:  l00409824
l00409824:
	ecx = Mem0[esp + 0x0000002C:word32]
	al = Mem0[ecx + 0x0000000B:byte]
	SCZO = cond(al - 0x08)
	Mem0[ecx:word32] = ebp
	eax = (word32) al
	branch Test(ULT,C) l0040983C
	// succ:  l00409834 l0040983C
l00409834:
	eax = eax >>u 0x00000003
	SCZO = cond(eax)
	eax = eax *s ebp
	SCZO = cond(eax)
	goto l00409845
	// succ:  l00409845
l0040983C:
	eax = eax *s ebp
	SCZO = cond(eax)
	eax = eax + 0x00000007
	SCZO = cond(eax)
	eax = eax >>u 0x00000003
	SCZO = cond(eax)
	// succ:  l00409845
l00409845:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[ecx + 0x00000004:word32] = eax
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l0040984A
l0040984A:
	ecx = Mem0[esp + 0x00000034:word32]
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x00000030
	SCZO = cond(esp)
	return
	// succ:  fn00409430_exit
fn00409430_exit:


// fn00409860
// Return size: 4
void fn00409860()
fn00409860_entry:
	// succ:  l00409860
l00409860:
	esp = fp
	eax = Mem0[esp + 0x00000014:word32]
	esp = esp - 0x00000010
	SCZO = cond(esp)
	SCZO = cond(eax - 0x00000004)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	branch Test(UGT,CZ) l00409A1E
	// succ:  l00409874 l00409A1E
l00409874:
	switch (eax) { l00409A37 l0040987B l004098B7 l004098E7 l00409955 }
	// succ:  l00409A37 l0040987B l004098B7 l004098E7 l00409955
l0040987B:
	eax = Mem0[esp + 0x00000028:word32]
	esi = Mem0[eax + 0x00000004:word32]
	eax = (word32) Mem0[eax + 0x0000000B:byte]
	ecx = Mem0[esp + 0x0000002C:word32]
	eax = eax + 0x00000007
	SCZO = cond(eax)
	eax = eax >> 0x00000003
	SCZO = cond(eax)
	ecx = ecx + eax
	SCZO = cond(ecx)
	SCZO = cond(eax - esi)
	branch Test(UGE,C) l00409A37
	// succ:  l0040989A l00409A37
l0040989A:
	edx = ecx
	edx = edx - eax
	SCZO = cond(edx)
	esi = esi - eax
	SCZO = cond(esi)
	// succ:  l004098A0
l004098A0:
	al = Mem0[edx:byte]
	v14 = Mem0[ecx:byte] + al
	Mem0[ecx:byte] = v14
	SCZO = cond(v14)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	esi = esi - 0x00000001
	SCZO = cond(esi)
	branch Test(NE,Z) l004098A0
	// succ:  l004098AF l004098A0
l004098AF:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000010
	SCZO = cond(esp)
	return
	// succ:  fn00409860_exit
l004098B7:
	ecx = Mem0[esp + 0x00000028:word32]
	esi = Mem0[ecx + 0x00000004:word32]
	eax = Mem0[esp + 0x0000002C:word32]
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	SZO = cond(esi & esi)
	C = false
	branch Test(ULE,CZ) l00409A37
	// succ:  l004098CC l00409A37
l004098CC:
	edi = Mem0[esp + 0x00000030:word32]
	// succ:  l004098D0
l004098D0:
	dl = Mem0[ecx + edi:byte]
	v21 = Mem0[eax:byte] + dl
	Mem0[eax:byte] = v21
	SCZO = cond(v21)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	eax = eax + 0x00000001
	SCZO = cond(eax)
	SCZO = cond(ecx - esi)
	branch Test(ULT,C) l004098D0
	// succ:  l004098DF l004098D0
l004098DF:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000010
	SCZO = cond(esp)
	return
	// succ:  fn00409860_exit
l004098E7:
	edx = Mem0[esp + 0x00000028:word32]
	eax = (word32) Mem0[edx + 0x0000000B:byte]
	edx = Mem0[edx + 0x00000004:word32]
	ecx = Mem0[esp + 0x0000002C:word32]
	esi = Mem0[esp + 0x00000030:word32]
	eax = eax + 0x00000007
	SCZO = cond(eax)
	eax = eax >> 0x00000003
	SCZO = cond(eax)
	edx = edx - eax
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	edi = ecx
	branch Test(ULE,CZ) l00409921
	// succ:  l00409908 l00409921
l00409908:
	ebp = eax
	ebx = ebx + 0x00000000
	// succ:  l00409910
l00409910:
	al = Mem0[esi:byte]
	al = al >>u 0x01
	SCZO = cond(al)
	v19 = Mem0[ecx:byte] + al
	Mem0[ecx:byte] = v19
	SCZO = cond(v19)
	esi = esi + 0x00000001
	SCZO = cond(esi)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	ebp = ebp - 0x00000001
	SCZO = cond(ebp)
	branch Test(NE,Z) l00409910
	// succ:  l00409921 l00409910
l00409921:
	SZO = cond(edx & edx)
	C = false
	branch Test(ULE,CZ) l00409A37
	// succ:  l00409929 l00409A37
l00409929:
	ebx = edx
	// succ:  l00409930
l00409930:
	edx = (word32) Mem0[esi:byte]
	eax = (word32) Mem0[edi:byte]
	eax = eax + edx
	SCZO = cond(eax)
	edx_eax = (int64) eax
	eax = eax - edx
	SCZO = cond(eax)
	eax = eax >> 0x00000001
	SCZO = cond(eax)
	v23 = Mem0[ecx:byte] + al
	Mem0[ecx:byte] = v23
	SCZO = cond(v23)
	edi = edi + 0x00000001
	SCZO = cond(edi)
	esi = esi + 0x00000001
	SCZO = cond(esi)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	ebx = ebx - 0x00000001
	SCZO = cond(ebx)
	branch Test(NE,Z) l00409930
	// succ:  l0040994D l00409930
l0040994D:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000010
	SCZO = cond(esp)
	return
	// succ:  fn00409860_exit
l00409955:
	eax = Mem0[esp + 0x0000002C:word32]
	ecx = Mem0[esp + 0x00000028:word32]
	esi = Mem0[esp + 0x00000030:word32]
	edi = eax
	Mem0[esp + 0x00000034:word32] = eax
	edx = eax
	eax = (word32) Mem0[ecx + 0x0000000B:byte]
	ecx = Mem0[ecx + 0x00000004:word32]
	eax = eax + 0x00000007
	SCZO = cond(eax)
	eax = eax >> 0x00000003
	SCZO = cond(eax)
	ecx = ecx - eax
	SCZO = cond(ecx)
	SZO = cond(eax & eax)
	C = false
	ebp = esi
	branch Test(ULE,CZ) l00409993
	// succ:  l0040997E l00409993
l0040997E:
	edi = edi
	// succ:  l00409980
l00409980:
	bl = Mem0[esi:byte]
	v18 = Mem0[edi:byte] + bl
	Mem0[edi:byte] = v18
	SCZO = cond(v18)
	esi = esi + 0x00000001
	SCZO = cond(esi)
	edi = edi + 0x00000001
	SCZO = cond(edi)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	branch Test(NE,Z) l00409980
	// succ:  l0040998F l00409980
l0040998F:
	Mem0[esp + 0x00000034:word32] = edi
	// succ:  l00409993
l00409993:
	SZO = cond(ecx & ecx)
	C = false
	branch Test(ULE,CZ) l00409A37
	// succ:  l0040999B l00409A37
l0040999B:
	Mem0[esp + 0x00000014:word32] = ecx
	goto l004099A9
	// succ:  l004099A9
l004099A1:
	edx = Mem0[esp + 0x00000018:word32]
	ebp = Mem0[esp + 0x0000001C:word32]
	// succ:  l004099A9
l004099A9:
	edi = (word32) Mem0[edx:byte]
	ebx = (word32) Mem0[esi:byte]
	edx = edx + 0x00000001
	SCZO = cond(edx)
	Mem0[esp + 0x00000018:word32] = edx
	edx = (word32) Mem0[ebp + 0x00000000:byte]
	eax = ebx
	ecx = edi
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	eax = eax - edx
	SCZO = cond(eax)
	esi = esi + 0x00000001
	SCZO = cond(esi)
	ecx = ecx - edx
	SCZO = cond(ecx)
	SZO = cond(eax & eax)
	C = false
	Mem0[esp + 0x0000001C:word32] = ebp
	branch Test(GE,SO) l004099DA
	// succ:  l004099D0 l004099DA
l004099D0:
	ebp = eax
	ebp = -ebp
	SCZO = cond(ebp)
	C = ebp == 0x00000000
	Mem0[esp + 0x00000010:word32] = ebp
	goto l004099DE
	// succ:  l004099DE
l004099DA:
	Mem0[esp + 0x00000010:word32] = eax
	// succ:  l004099DE
l004099DE:
	SZO = cond(ecx & ecx)
	C = false
	ebp = ecx
	branch Test(GE,SO) l004099E6
	// succ:  l004099E4 l004099E6
l004099E4:
	ebp = -ebp
	SCZO = cond(ebp)
	C = ebp == 0x00000000
	// succ:  l004099E6
l004099E6:
	eax = eax + ecx
	SCZO = cond(eax)
	branch Test(NS,S) l004099EC
	// succ:  l004099EA l004099EC
l004099EA:
	eax = -eax
	SCZO = cond(eax)
	C = eax == 0x00000000
	// succ:  l004099EC
l004099EC:
	ecx = Mem0[esp + 0x00000010:word32]
	SCZO = cond(ecx - ebp)
	branch Test(GT,SZO) l004099FC
	// succ:  l004099F4 l004099FC
l004099F4:
	SCZO = cond(ecx - eax)
	branch Test(GT,SZO) l004099FC
	// succ:  l004099F8 l004099FC
l004099F8:
	edx = edi
	goto l00409A02
	// succ:  l00409A02
l004099FC:
	SCZO = cond(ebp - eax)
	branch Test(GT,SZO) l00409A02
	// succ:  l00409A00 l00409A02
l00409A00:
	edx = ebx
	// succ:  l00409A02
l00409A02:
	eax = Mem0[esp + 0x00000034:word32]
	v26 = Mem0[eax:byte] + dl
	Mem0[eax:byte] = v26
	SCZO = cond(v26)
	eax = eax + 0x00000001
	SCZO = cond(eax)
	v27 = Mem0[esp + 0x00000014:word32] - 0x00000001
	Mem0[esp + 0x00000014:word32] = v27
	SCZO = cond(v27)
	Mem0[esp + 0x00000034:word32] = eax
	branch Test(NE,Z) l004099A1
	// succ:  l00409A16 l004099A1
l00409A16:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000010
	SCZO = cond(esp)
	return
	// succ:  fn00409860_exit
l00409A1E:
	eax = Mem0[esp + 0x00000024:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416874
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn004087F0 (retsize: 4;)
	ecx = Mem0[esp + 0x00000034:word32]
	esp = esp + 0x00000008
	SCZO = cond(esp)
	Mem0[ecx:byte] = 0x00
	// succ:  l00409A37
l00409A37:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000010
	SCZO = cond(esp)
	return
	// succ:  fn00409860_exit
fn00409860_exit:


// fn00409A60
// Return size: 4
void fn00409A60()
fn00409A60_entry:
	// succ:  l00409A60
l00409A60:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x0000000C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	Mem0[esi + 0x00000078:word32] = 0x00000000
	call fn0040F950 (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	SCZO = cond(Mem0[esi + 0x00000123:byte] - 0x00)
	branch Test(EQ,Z) l00409B18
	// succ:  l00409A83 l00409B18
l00409A83:
	SZO = cond(Mem0[esi + 0x00000070:byte] & 0x02)
	C = false
	branch Test(NE,Z) l00409AAB
	// succ:  l00409A89 l00409AAB
l00409A89:
	eax = Mem0[esi + 0x000000CC:word32]
	eax = eax - Mem0[0x004164EC:word32]
	SCZO = cond(eax)
	ecx = Mem0[0x00416508:word32]
	eax = eax - 0x00000001 + ecx
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	edx = edx_eax % ecx
	eax = edx_eax /u ecx
	SCZO = cond(eax)
	Mem0[esi + 0x000000D0:word32] = eax
	goto l00409AB7
	// succ:  l00409AB7
l00409AAB:
	ecx = Mem0[esi + 0x000000CC:word32]
	Mem0[esi + 0x000000D0:word32] = ecx
	// succ:  l00409AB7
l00409AB7:
	eax = (word32) Mem0[esi + 0x00000124:byte]
	ebp = Mem0[esi + 0x000000C8:word32]
	eax = eax + eax
	SCZO = cond(eax)
	ecx = Mem0[eax + 0x004164D0 + eax:word32]
	eax = eax + eax
	SCZO = cond(eax)
	edx = ebp
	edx = edx - Mem0[eax + 0x004164B4:word32]
	SCZO = cond(edx)
	eax = edx - 0x00000001 + ecx
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	edx = edx_eax % ecx
	eax = edx_eax /u ecx
	SCZO = cond(eax)
	cl = Mem0[esi + 0x00000129:byte]
	SCZO = cond(cl - 0x08)
	ecx = (word32) cl
	Mem0[esi + 0x000000E0:word32] = eax
	branch Test(ULT,C) l00409B04
	// succ:  l00409AF3 l00409B04
l00409AF3:
	ecx = ecx >>u 0x00000003
	SCZO = cond(ecx)
	ecx = ecx *s eax
	SCZO = cond(ecx)
	eax = ecx + 0x00000001
	Mem0[esi + 0x000000DC:word32] = eax
	goto l00409B3F
	// succ:  l00409B3F
l00409B04:
	ecx = ecx *s eax
	SCZO = cond(ecx)
	ecx = ecx + 0x00000007
	SCZO = cond(ecx)
	ecx = ecx >>u 0x00000003
	SCZO = cond(ecx)
	eax = ecx + 0x00000001
	Mem0[esi + 0x000000DC:word32] = eax
	goto l00409B3F
	// succ:  l00409B3F
l00409B18:
	ecx = Mem0[esi + 0x000000D8:word32]
	eax = Mem0[esi + 0x000000CC:word32]
	ebp = Mem0[esi + 0x000000C8:word32]
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	Mem0[esi + 0x000000D0:word32] = eax
	Mem0[esi + 0x000000E0:word32] = ebp
	Mem0[esi + 0x000000DC:word32] = ecx
	// succ:  l00409B3F
l00409B3F:
	eax = (word32) Mem0[esi + 0x00000129:byte]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = Mem0[esi + 0x00000070:word32]
	SZO = cond(bl & 0x04)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	branch Test(EQ,Z) l00409B5E
	// succ:  l00409B50 l00409B5E
l00409B50:
	SCZO = cond(Mem0[esi + 0x00000127:byte] - 0x08)
	branch Test(UGE,C) l00409B5E
	// succ:  l00409B59 l00409B5E
l00409B59:
	eax = 0x00000008
	// succ:  l00409B5E
l00409B5E:
	edi = ebx
	edi = edi & 0x00001000
	SZO = cond(edi)
	C = false
	branch Test(EQ,Z) l00409BC8
	// succ:  l00409B68 l00409BC8
l00409B68:
	cl = Mem0[esi + 0x00000126:byte]
	SCZO = cond(cl - 0x03)
	branch Test(NE,Z) l00409B88
	// succ:  l00409B73 l00409B88
l00409B73:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[esi + 0x0000011A:word16] - ax)
	al = Test(NE,Z)
	eax = 0x00000018 + eax * 0x00000008
	goto l00409BC8
	// succ:  l00409BC8
l00409B88:
	SZO = cond(cl & cl)
	C = false
	branch Test(NE,Z) l00409BA4
	// succ:  l00409B8C l00409BA4
l00409B8C:
	SCZO = cond(eax - 0x00000008)
	branch Test(GE,SO) l00409B96
	// succ:  l00409B91 l00409B96
l00409B91:
	eax = 0x00000008
	// succ:  l00409B96
l00409B96:
	SCZO = cond(Mem0[esi + 0x0000011A:word16] - 0x0000)
	branch Test(EQ,Z) l00409BC8
	// succ:  l00409BA0 l00409BC8
l00409BA0:
	eax = eax + eax
	SCZO = cond(eax)
	goto l00409BC8
	// succ:  l00409BC8
l00409BA4:
	SCZO = cond(cl - 0x02)
	branch Test(NE,Z) l00409BC8
	// succ:  l00409BA9 l00409BC8
l00409BA9:
	SCZO = cond(Mem0[esi + 0x0000011A:word16] - 0x0000)
	branch Test(EQ,Z) l00409BC8
	// succ:  l00409BB3 l00409BC8
l00409BB3:
	ecx = 0x00000000 + eax * 0x00000004
	eax = 0x55555556
	edx_eax = ecx *s eax
	SCZO = cond(edx_eax)
	eax = edx
	eax = eax >>u 0x0000001F
	SCZO = cond(eax)
	eax = eax + edx
	SCZO = cond(eax)
	// succ:  l00409BC8
l00409BC8:
	edx = ebx
	edx = edx & 0x00008000
	SZO = cond(edx)
	C = false
	branch Test(EQ,Z) l00409C13
	// succ:  l00409BD2 l00409C13
l00409BD2:
	cl = Mem0[esi + 0x00000126:byte]
	SCZO = cond(cl - 0x03)
	branch Test(NE,Z) l00409BE4
	// succ:  l00409BDD l00409BE4
l00409BDD:
	eax = 0x00000020
	goto l00409C13
	// succ:  l00409C13
l00409BE4:
	SZO = cond(cl & cl)
	C = false
	branch Test(NE,Z) l00409BFB
	// succ:  l00409BE8 l00409BFB
l00409BE8:
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	SCZO = cond(eax - 0x00000008)
	cl = Test(GT,SZO)
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	ecx = ecx & 0xFFFFFFF0
	SZO = cond(ecx)
	C = false
	ecx = ecx + 0x00000020
	SCZO = cond(ecx)
	goto l00409C11
	// succ:  l00409C11
l00409BFB:
	SCZO = cond(cl - 0x02)
	branch Test(NE,Z) l00409C13
	// succ:  l00409C00 l00409C13
l00409C00:
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	SCZO = cond(eax - 0x00000020)
	cl = Test(GT,SZO)
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	ecx = ecx & 0xFFFFFFE0
	SZO = cond(ecx)
	C = false
	ecx = ecx + 0x00000040
	SCZO = cond(ecx)
	// succ:  l00409C11
l00409C11:
	eax = ecx
	// succ:  l00409C13
l00409C13:
	SZO = cond(ebx & 0x00004000)
	C = false
	branch Test(EQ,Z) l00409C72
	// succ:  l00409C1B l00409C72
l00409C1B:
	SCZO = cond(Mem0[esi + 0x0000011A:word16] - 0x0000)
	branch Test(EQ,Z) l00409C29
	// succ:  l00409C25 l00409C29
l00409C25:
	SZO = cond(edi & edi)
	C = false
	branch Test(NE,Z) l00409C5F
	// succ:  l00409C29 l00409C5F
l00409C29:
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l00409C5F
	// succ:  l00409C2D l00409C5F
l00409C2D:
	cl = Mem0[esi + 0x00000126:byte]
	SCZO = cond(cl - 0x04)
	branch Test(EQ,Z) l00409C5F
	// succ:  l00409C38 l00409C5F
l00409C38:
	SCZO = cond(eax - 0x00000008)
	branch Test(GT,SZO) l00409C4E
	// succ:  l00409C3D l00409C4E
l00409C3D:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SCZO = cond(cl - 0x06)
	al = Test(EQ,Z)
	eax = 0x00000018 + eax * 0x00000008
	goto l00409C72
	// succ:  l00409C72
l00409C4E:
	cl = cl - 0x06
	SCZO = cond(cl)
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	ecx = ecx - ecx - C
	SCZO = cond(ecx)
	ecx = ecx & 0xFFFFFFF0
	SZO = cond(ecx)
	C = false
	ecx = ecx + 0x00000040
	SCZO = cond(ecx)
	eax = ecx
	goto l00409C72
	// succ:  l00409C72
l00409C5F:
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	SCZO = cond(eax - 0x00000010)
	dl = Test(GT,SZO)
	edx = edx - 0x00000001
	SCZO = cond(edx)
	edx = edx & 0xFFFFFFE0
	SZO = cond(edx)
	C = false
	edx = edx + 0x00000040
	SCZO = cond(edx)
	eax = edx
	// succ:  l00409C72
l00409C72:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	SZO = cond(ebx & 0x00100000)
	C = false
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	branch Test(EQ,Z) l00409C8D
	// succ:  l00409C7C l00409C8D
l00409C7C:
	ecx = (word32) Mem0[esi + 0x00000065:byte]
	edx = (word32) Mem0[esi + 0x00000064:byte]
	ecx = ecx *s edx
	SCZO = cond(ecx)
	SCZO = cond(ecx - eax)
	branch Test(LE,SZO) l00409C8D
	// succ:  l00409C8B l00409C8D
l00409C8B:
	eax = ecx
	// succ:  l00409C8D
l00409C8D:
	edx = ebp + 0x00000007
	edx = edx & 0xFFFFFFF8
	SZO = cond(edx)
	C = false
	SCZO = cond(eax - 0x00000008)
	ecx = eax
	branch Test(LT,SO) l00409CA2
	// succ:  l00409C9A l00409CA2
l00409C9A:
	ecx = ecx >>u 0x00000003
	SCZO = cond(ecx)
	ecx = ecx *s edx
	SCZO = cond(ecx)
	goto l00409CAB
	// succ:  l00409CAB
l00409CA2:
	ecx = ecx *s edx
	SCZO = cond(ecx)
	ecx = ecx + 0x00000007
	SCZO = cond(ecx)
	ecx = ecx >>u 0x00000003
	SCZO = cond(ecx)
	// succ:  l00409CAB
l00409CAB:
	eax = eax + 0x00000007
	SCZO = cond(eax)
	eax = eax >> 0x00000003
	SCZO = cond(eax)
	eax = eax + 0x00000041 + ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408BA0 (retsize: 4; FPU: 2;)
	Mem0[esi + 0x00000250:word32] = eax
	eax = eax + 0x00000020
	SCZO = cond(eax)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SCZO = cond(Mem0[esi + 0x000000D8:word32] - 0xFFFFFFFE)
	Mem0[esi + 0x000000EC:word32] = eax
	branch Test(ULE,CZ) l00409CE5
	// succ:  l00409CD7 l00409CE5
l00409CD7:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416898
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408740 (retsize: 4; FPU: 2;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l00409CE5
l00409CE5:
	ecx = Mem0[esi + 0x000000D8:word32]
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408BA0 (retsize: 4; FPU: 2;)
	edx = Mem0[esi + 0x000000D8:word32]
	edx = edx + 0x00000001
	SCZO = cond(edx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	Mem0[esi + 0x000000E8:word32] = eax
	call fn00408B10 (retsize: 4; FPU: 2;)
	v22 = Mem0[esi + 0x0000006C:word32] | 0x00000040
	Mem0[esi + 0x0000006C:word32] = v22
	SZO = cond(Mem0[esi + 0x0000006C:word32])
	C = false
	esp = esp + 0x00000018
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00409A60_exit
fn00409A60_exit:


// fn00409D20
// Return size: 4
void fn00409D20()
fn00409D20_entry:
	// succ:  l00409D20
l00409D20:
	esp = fp
	eax = Mem0[esp + 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn00408C50 (retsize: 4;)
	esi = eax
	esp = esp + 0x00000004
	SCZO = cond(esp)
	SCZO = cond(esi - 0x7FFFFFFF)
	branch Test(ULE,CZ) l00409D4C
	// succ:  l00409D38 l00409D4C
l00409D38:
	ecx = Mem0[esp + 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004168C8
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	eax = esi
	// succ:  l00409D4C
l00409D4C:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00409D20_exit
fn00409D20_exit:


// fn00409D50
// Return size: 4
void fn00409D50()
fn00409D50_entry:
	// succ:  l00409D50
l00409D50:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x0000000C:word32]
	ebx = Mem0[esi + 0x000000B0:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp + 0x00000014:word32]
	SCZO = cond(edi - ebx)
	branch Test(ULE,CZ) l00409D8D
	// succ:  l00409D65 l00409D8D
l00409D65:
	// succ:  l00409D70
l00409D70:
	eax = Mem0[esi + 0x000000B0:word32]
	ecx = Mem0[esi + 0x000000AC:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408CA0 (retsize: 4;)
	edi = edi - ebx
	SCZO = cond(edi)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	SCZO = cond(edi - ebx)
	branch Test(UGT,CZ) l00409D70
	// succ:  l00409D8D l00409D70
l00409D8D:
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l00409DA2
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l00409DA2
	// succ:  l00409D91 l00409DA2
l00409D91:
	edx = Mem0[esi + 0x000000AC:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408CA0 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	edx = Mem0[esi + 0x000000AC:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408CA0 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	// succ:  l00409DA2
l00409DA2:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408CD0 (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00409DFD
	// succ:  l00409DAF l00409DFD
l00409DAF:
	al = Mem0[esi + 0x0000011C:byte]
	al = al & 0x20
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l00409DC2
	// succ:  l00409DB9 l00409DC2
l00409DB9:
	SZO = cond(Mem0[esi + 0x0000006C:word32] & 0x00000200)
	C = false
	branch Test(EQ,Z) l00409DCF
	// succ:  l00409DC2 l00409DCF
l00409DC2:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l00409DE6
	// succ:  l00409DC6 l00409DE6
l00409DC6:
	SZO = cond(Mem0[esi + 0x0000006C:word32] & 0x00000400)
	C = false
	branch Test(EQ,Z) l00409DE6
	// succ:  l00409DCF l00409DE6
l00409DCF:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004168EC
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408880 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = 0x00000001
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00409D50_exit
l00409DE6:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004168EC
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408850 (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	esp = esp + 0x00000008
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = 0x00000001
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00409D50_exit
l00409DFD:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00409D50_exit
fn00409D50_exit:


// fn00409E10
// Return size: 4
void fn00409E10()
fn00409E10_entry:
	// succ:  l00409E10
l00409E10:
	esp = fp
	esp = esp - 0x00000020
	SCZO = cond(esp)
	eax = Mem0[0x0041C340:word32]
	eax = eax ^ esp
	SZO = cond(eax)
	C = false
	Mem0[esp + 0x0000001C:word32] = eax
	eax = Mem0[esp + 0x00000028:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000030:word32]
	SZO = cond(Mem0[esi + 0x00000068:byte] & 0x01)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	Mem0[esp + 0x00000018:word32] = eax
	branch Test(EQ,Z) l00409E42
	// succ:  l00409E34 l00409E42
l00409E34:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041690C
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l00409E42
l00409E42:
	SCZO = cond(Mem0[esp + 0x0000003C:word32] - 0x0000000D)
	branch Test(EQ,Z) l00409E57
	// succ:  l00409E49 l00409E57
l00409E49:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004168F8
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l00409E57
l00409E57:
	v12 = Mem0[esi + 0x00000068:word32] | 0x00000001
	Mem0[esi + 0x00000068:word32] = v12
	SZO = cond(Mem0[esi + 0x00000068:word32])
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0000000D
	ecx = esp + 0x00000020
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408CA0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	edx = esp + 0x00000030
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D20 (retsize: 4;)
	edi = eax
	eax = esp + 0x0000003C
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D20 (retsize: 4;)
	ecx = (word32) Mem0[esp + 0x00000049:byte]
	edx = (word32) Mem0[esp + 0x00000048:byte]
	ebx = (word32) Mem0[esp + 0x0000004A:byte]
	ebp = eax
	eax = (word32) Mem0[esp + 0x0000004B:byte]
	Mem0[esp + 0x00000034:word32] = eax
	eax = (word32) Mem0[esp + 0x0000004C:byte]
	Mem0[esp + 0x00000038:word32] = eax
	Mem0[esi + 0x00000123:byte] = al
	al = Mem0[esp + 0x00000034:byte]
	Mem0[esi + 0x00000238:byte] = al
	eax = (word32) cl
	esp = esp + 0x00000024
	SCZO = cond(esp)
	SCZO = cond(eax - 0x00000006)
	Mem0[esi + 0x000000C8:word32] = edi
	Mem0[esi + 0x000000CC:word32] = ebp
	Mem0[esi + 0x00000127:byte] = dl
	Mem0[esi + 0x00000126:byte] = cl
	Mem0[esi + 0x00000260:byte] = bl
	branch Test(UGT,CZ) l00409F0D
	// succ:  l00409EE4 l00409F0D
l00409EE4:
	switch (eax) { l00409EEB l00409F0D l00409EF4 l00409EEB l00409EFD l00409F0D l00409F06 }
	// succ:  l00409EEB l00409F0D l00409EF4 l00409EEB l00409EFD l00409F0D l00409F06
l00409EEB:
	Mem0[esi + 0x0000012A:byte] = 0x01
	goto l00409F0D
	// succ:  l00409F0D
l00409EF4:
	Mem0[esi + 0x0000012A:byte] = 0x03
	goto l00409F0D
	// succ:  l00409F0D
l00409EFD:
	Mem0[esi + 0x0000012A:byte] = 0x02
	goto l00409F0D
	// succ:  l00409F0D
l00409F06:
	Mem0[esi + 0x0000012A:byte] = 0x04
	// succ:  l00409F0D
l00409F0D:
	al = Mem0[esi + 0x0000012A:byte]
	ax = dl *s al
	SCZO = cond(ax)
	Mem0[esi + 0x00000129:byte] = al
	SCZO = cond(al - 0x08)
	eax = (word32) al
	branch Test(ULT,C) l00409F2A
	// succ:  l00409F22 l00409F2A
l00409F22:
	eax = eax >>u 0x00000003
	SCZO = cond(eax)
	eax = eax *s edi
	SCZO = cond(eax)
	goto l00409F33
	// succ:  l00409F33
l00409F2A:
	eax = eax *s edi
	SCZO = cond(eax)
	eax = eax + 0x00000007
	SCZO = cond(eax)
	eax = eax >>u 0x00000003
	SCZO = cond(eax)
	// succ:  l00409F33
l00409F33:
	Mem0[esi + 0x000000D8:word32] = eax
	eax = Mem0[esp + 0x00000010:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = Mem0[esp + 0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	ecx = Mem0[esp + 0x00000028:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004115E0 (retsize: 4;)
	ecx = Mem0[esp + 0x00000050:word32]
	esp = esp + 0x00000024
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x00000020
	SCZO = cond(esp)
	return
	// succ:  fn00409E10_exit
fn00409E10_exit:


// fn00409F90
// Return size: 4
void fn00409F90()
fn00409F90_entry:
	// succ:  l00409F90
l00409F90:
	esp = fp
	esp = esp - 0x00000304
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x0000030C:word32]
	eax = Mem0[esi + 0x00000068:word32]
	SZO = cond(al & 0x01)
	C = false
	branch Test(NE,Z) l00409FAC
	// succ:  l00409FA5 l00409FAC
l00409FA5:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004169E4
	goto l00409FDD
	// succ:  l00409FDD
l00409FAC:
	SZO = cond(al & 0x04)
	C = false
	branch Test(EQ,Z) l00409FD4
	// succ:  l00409FB0 l00409FD4
l00409FB0:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004169CC
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	eax = Mem0[esp + 0x0000031C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000304
	SCZO = cond(esp)
	return
	// succ:  fn00409F90_exit
l00409FD4:
	SZO = cond(al & 0x02)
	C = false
	branch Test(EQ,Z) l00409FE6
	// succ:  l00409FD8 l00409FE6
l00409FD8:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004169B4
	// succ:  l00409FDD
l00409FDD:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l00409FE6
l00409FE6:
	cl = Mem0[esi + 0x00000126:byte]
	v11 = Mem0[esi + 0x00000068:word32] | 0x00000002
	Mem0[esi + 0x00000068:word32] = v11
	SZO = cond(Mem0[esi + 0x00000068:word32])
	C = false
	SZO = cond(cl & 0x02)
	C = false
	branch Test(NE,Z) l0040A019
	// succ:  l00409FF5 l0040A019
l00409FF5:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041698C
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	ecx = Mem0[esp + 0x0000031C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000304
	SCZO = cond(esp)
	return
	// succ:  fn00409F90_exit
l0040A019:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp + 0x00000318:word32]
	SCZO = cond(edi - 0x00000300)
	branch Test(UGT,CZ) l0040A03B
	// succ:  l0040A029 l0040A03B
l0040A029:
	eax = 0xAAAAAAAB
	edx_eax = edi *u eax
	SCZO = cond(edx_eax)
	edx = edx >>u 0x00000001
	SCZO = cond(edx)
	edx = edx + edx * 0x00000002
	eax = edi
	eax = eax - edx
	SCZO = cond(eax)
	branch Test(EQ,Z) l0040A066
	// succ:  l0040A03B l0040A066
l0040A03B:
	SCZO = cond(cl - 0x03)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416974
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	branch Test(EQ,Z) l0040A05E
	// succ:  l0040A046 l0040A05E
l0040A046:
	call fn004087F0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000304
	SCZO = cond(esp)
	return
	// succ:  fn00409F90_exit
l0040A05E:
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l0040A066
l0040A066:
	eax = 0x55555556
	edx_eax = edi *s eax
	SCZO = cond(edx_eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = edx
	ebx = ebx >>u 0x0000001F
	SCZO = cond(ebx)
	ebx = ebx + edx
	SCZO = cond(ebx)
	SZO = cond(ebx & ebx)
	C = false
	branch Test(LE,SZO) l0040A0AD
	// succ:  l0040A079 l0040A0AD
l0040A079:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	edi = esp + 0x00000016
	ebp = ebx
	// succ:  l0040A080
l0040A080:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000003
	ecx = esp + 0x00000014
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408CA0 (retsize: 4;)
	dl = Mem0[esp + 0x0000001C:byte]
	al = Mem0[esp + 0x0000001D:byte]
	cl = Mem0[esp + 0x0000001E:byte]
	Mem0[edi - 0x00000002:byte] = dl
	Mem0[edi - 0x00000001:byte] = al
	Mem0[edi:byte] = cl
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	edi = edi + 0x00000003
	SCZO = cond(edi)
	ebp = ebp - 0x00000001
	SCZO = cond(ebp)
	branch Test(NE,Z) l0040A080
	// succ:  l0040A0AC l0040A080
l0040A0AC:
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l0040A0AD
l0040A0AD:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	edi = Mem0[esp + 0x00000320:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	edx = esp + 0x0000001C
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00411A50 (retsize: 4;)
	esp = esp + 0x00000018
	SCZO = cond(esp)
	SCZO = cond(Mem0[esi + 0x00000126:byte] - 0x03)
	branch Test(NE,Z) l0040A115
	// succ:  l0040A0D5 l0040A115
l0040A0D5:
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l0040A115
	// succ:  l0040A0D9 l0040A115
l0040A0D9:
	SZO = cond(Mem0[edi + 0x00000008:byte] & 0x10)
	C = false
	branch Test(EQ,Z) l0040A115
	// succ:  l0040A0DF l0040A115
l0040A0DF:
	SCZO = cond(Mem0[esi + 0x0000011A:word16] - bx)
	branch Test(ULE,CZ) l0040A0FD
	// succ:  l0040A0E8 l0040A0FD
l0040A0E8:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041694C
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	Mem0[esi + 0x0000011A:word16] = bx
	// succ:  l0040A0FD
l0040A0FD:
	SCZO = cond(Mem0[edi + 0x00000016:word16] - bx)
	branch Test(ULE,CZ) l0040A115
	// succ:  l0040A103 l0040A115
l0040A103:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416920
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	Mem0[edi + 0x00000016:word16] = bx
	// succ:  l0040A115
l0040A115:
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000304
	SCZO = cond(esp)
	return
	// succ:  fn00409F90_exit
fn00409F90_exit:


// fn0040A120
// Return size: 4
void fn0040A120()
fn0040A120_entry:
	// succ:  l0040A120
l0040A120:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000008:word32]
	eax = Mem0[esi + 0x00000068:word32]
	SZO = cond(al & 0x01)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	branch Test(EQ,Z) l0040A131
	// succ:  l0040A12D l0040A131
l0040A12D:
	SZO = cond(al & 0x04)
	C = false
	branch Test(NE,Z) l0040A13F
	// succ:  l0040A131 l0040A13F
l0040A131:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416A1C
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l0040A13F
l0040A13F:
	edi = Mem0[esp + 0x00000014:word32]
	v11 = Mem0[esi + 0x00000068:word32] | 0x00000018
	Mem0[esi + 0x00000068:word32] = v11
	SZO = cond(Mem0[esi + 0x00000068:word32])
	C = false
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l0040A159
	// succ:  l0040A14B l0040A159
l0040A14B:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416A00
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l0040A159
l0040A159:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040A120_exit
fn0040A120_exit:


// fn0040A170
// Return size: 4
void fn0040A170()
fn0040A170_entry:
	// succ:  l0040A170
l0040A170:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x0000000C:word32]
	eax = Mem0[esi + 0x00000068:word32]
	SZO = cond(al & 0x01)
	C = false
	branch Test(NE,Z) l0040A18A
	// succ:  l0040A17D l0040A18A
l0040A17D:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416B10
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408740 (retsize: 4;)
	goto l0040A1B9
	// succ:  l0040A1B9
l0040A18A:
	SZO = cond(al & 0x04)
	C = false
	branch Test(EQ,Z) l0040A1AA
	// succ:  l0040A18E l0040A1AA
l0040A18E:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416AF8
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	eax = Mem0[esp + 0x0000001C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040A170_exit
l0040A1AA:
	SZO = cond(al & 0x02)
	C = false
	branch Test(EQ,Z) l0040A1BC
	// succ:  l0040A1AE l0040A1BC
l0040A1AE:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416AE0
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	// succ:  l0040A1B9
l0040A1B9:
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l0040A1BC
l0040A1BC:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = Mem0[esp + 0x00000014:word32]
	SZO = cond(ebx & ebx)
	C = false
	branch Test(EQ,Z) l0040A1F0
	// succ:  l0040A1C5 l0040A1F0
l0040A1C5:
	eax = Mem0[ebx + 0x00000008:word32]
	SZO = cond(al & 0x01)
	C = false
	branch Test(EQ,Z) l0040A1F0
	// succ:  l0040A1CC l0040A1F0
l0040A1CC:
	SZO = cond(eax & 0x00000800)
	C = false
	branch Test(NE,Z) l0040A1F0
	// succ:  l0040A1D3 l0040A1F0
l0040A1D3:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416AC8
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	ecx = Mem0[esp + 0x00000020:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040A170_exit
l0040A1F0:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp + 0x0000001C:word32]
	SCZO = cond(edi - 0x00000004)
	branch Test(EQ,Z) l0040A214
	// succ:  l0040A1FA l0040A214
l0040A1FA:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416AAC
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040A170_exit
l0040A214:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000004
	edx = esp + 0x00000018
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408CA0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000014
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0040A2D3
	// succ:  l0040A234 l0040A2D3
l0040A234:
	eax = esp + 0x00000014
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn00408C50 (retsize: 4;)
	edi = eax
	esp = esp + 0x00000004
	SCZO = cond(esp)
	SZO = cond(edi & edi)
	C = false
	Mem0[esp + 0x0000000C:word32] = edi
	branch Test(NE,Z) l0040A25E
	// succ:  l0040A24B l0040A25E
l0040A24B:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416A88
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040A170_exit
l0040A25E:
	SZO = cond(Mem0[ebx + 0x00000008:word32] & 0x00000800)
	C = false
	branch Test(EQ,Z) l0040A2A3
	// succ:  l0040A267 l0040A2A3
l0040A267:
	SCZO = cond(edi - 0x0000AFC8)
	branch Test(LT,SO) l0040A277
	// succ:  l0040A26F l0040A277
l0040A26F:
	SCZO = cond(edi - 0x0000B3B0)
	branch Test(LE,SZO) l0040A2A3
	// succ:  l0040A277 l0040A2A3
l0040A277:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416A50
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416A38
	call __iob_func (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	eax = eax + 0x00000040
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call MSVCR80.dll!fprintf (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040A170_exit
l0040A2A3:
	rLoc1 = (real64) Mem0[esp + 0x0000000C:int32]
	esp = esp - 0x00000008
	SCZO = cond(esp)
	rLoc1 = rLoc1 / Mem0[0x00416A30:real64]
	Mem0[esp + 0x00000014:real32] = rLoc1
	rLoc1 = Mem0[esp + 0x00000014:real32]
	Mem0[esi + 0x0000015C:real32] = rLoc1
	Mem0[esp:real64] = rLoc1
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00411420 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004114A0 (retsize: 4;)
	esp = esp + 0x0000001C
	SCZO = cond(esp)
	// succ:  l0040A2D3
l0040A2D3:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040A170_exit
fn0040A170_exit:


// fn0040A2E0
// Return size: 4
void fn0040A2E0()
fn0040A2E0_entry:
	// succ:  l0040A2E0
l0040A2E0:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000010:word32]
	eax = Mem0[esi + 0x00000068:word32]
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	SZO = cond(al & 0x01)
	C = false
	Mem0[esp + 0x0000000B:byte] = bl
	Mem0[esp + 0x0000000A:byte] = bl
	Mem0[esp + 0x00000009:byte] = bl
	Mem0[esp + 0x00000008:byte] = bl
	branch Test(NE,Z) l0040A30D
	// succ:  l0040A300 l0040A30D
l0040A300:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416B90
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408740 (retsize: 4;)
	goto l0040A33D
	// succ:  l0040A33D
l0040A30D:
	SZO = cond(al & 0x04)
	C = false
	branch Test(EQ,Z) l0040A32E
	// succ:  l0040A311 l0040A32E
l0040A311:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416B78
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	eax = Mem0[esp + 0x00000020:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040A2E0_exit
l0040A32E:
	SZO = cond(al & 0x02)
	C = false
	branch Test(EQ,Z) l0040A340
	// succ:  l0040A332 l0040A340
l0040A332:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416B60
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	// succ:  l0040A33D
l0040A33D:
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l0040A340
l0040A340:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = Mem0[esp + 0x00000018:word32]
	SCZO = cond(ebp - ebx)
	branch Test(EQ,Z) l0040A36D
	// succ:  l0040A349 l0040A36D
l0040A349:
	SZO = cond(Mem0[ebp + 0x00000008:byte] & 0x02)
	C = false
	branch Test(EQ,Z) l0040A36D
	// succ:  l0040A34F l0040A36D
l0040A34F:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416B48
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	ecx = Mem0[esp + 0x00000024:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040A2E0_exit
l0040A36D:
	eax = 0x00000003
	SCZO = cond(Mem0[esi + 0x00000126:byte] - al)
	branch Test(EQ,Z) l0040A381
	// succ:  l0040A37A l0040A381
l0040A37A:
	eax = (word32) Mem0[esi + 0x0000012A:byte]
	// succ:  l0040A381
l0040A381:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp + 0x00000020:word32]
	SCZO = cond(edi - eax)
	branch Test(NE,Z) l0040A431
	// succ:  l0040A38E l0040A431
l0040A38E:
	SCZO = cond(edi - 0x00000004)
	branch Test(UGT,CZ) l0040A431
	// succ:  l0040A397 l0040A431
l0040A397:
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	edx = esp + 0x00000014
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408CA0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000014
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0040A446
	// succ:  l0040A3B5 l0040A446
l0040A3B5:
	SZO = cond(Mem0[esi + 0x00000126:byte] & 0x02)
	C = false
	eax = esi + 0x0000017C
	branch Test(EQ,Z) l0040A3FD
	// succ:  l0040A3C4 l0040A3FD
l0040A3C4:
	ecx = (word32) Mem0[esp + 0x00000010:byte]
	edx = (word32) Mem0[esp + 0x00000011:byte]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	Mem0[eax:byte] = cl
	ecx = (word32) Mem0[esp + 0x00000016:byte]
	Mem0[esi + 0x0000017D:byte] = dl
	edx = (word32) Mem0[esp + 0x00000017:byte]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	Mem0[esi + 0x0000017E:byte] = cl
	Mem0[esi + 0x00000180:byte] = dl
	call fn00411AE0 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040A2E0_exit
l0040A3FD:
	cl = Mem0[esp + 0x00000010:byte]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	Mem0[esi + 0x0000017F:byte] = cl
	Mem0[eax:byte] = cl
	Mem0[esi + 0x0000017D:byte] = cl
	Mem0[esi + 0x0000017E:byte] = cl
	ecx = (word32) Mem0[esp + 0x00000015:byte]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	Mem0[esi + 0x00000180:byte] = cl
	call fn00411AE0 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040A2E0_exit
l0040A431:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416B2C
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	// succ:  l0040A446
l0040A446:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040A2E0_exit
fn0040A2E0_exit:


// fn0040A450
// Return size: 4
void fn0040A450()
fn0040A450_entry:
	// succ:  l0040A450
l0040A450:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	__align(esp)
	esp = esp - 0x00000074
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[ebp + 0x00000008:word32]
	eax = Mem0[esi + 0x00000068:word32]
	SZO = cond(al & 0x01)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	branch Test(NE,Z) l0040A473
	// succ:  l0040A466 l0040A473
l0040A466:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416CEC
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408740 (retsize: 4;)
	goto l0040A4A5
	// succ:  l0040A4A5
l0040A473:
	SZO = cond(al & 0x04)
	C = false
	branch Test(EQ,Z) l0040A496
	// succ:  l0040A477 l0040A496
l0040A477:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416CD4
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	eax = Mem0[ebp + 0x00000010:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040A450_exit
l0040A496:
	SZO = cond(al & 0x02)
	C = false
	branch Test(EQ,Z) l0040A4A8
	// succ:  l0040A49A l0040A4A8
l0040A49A:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416CB8
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	// succ:  l0040A4A5
l0040A4A5:
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l0040A4A8
l0040A4A8:
	eax = Mem0[ebp + 0x0000000C:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040A4DC
	// succ:  l0040A4AF l0040A4DC
l0040A4AF:
	eax = Mem0[eax + 0x00000008:word32]
	SZO = cond(al & 0x04)
	C = false
	branch Test(EQ,Z) l0040A4DC
	// succ:  l0040A4B6 l0040A4DC
l0040A4B6:
	SZO = cond(eax & 0x00000800)
	C = false
	branch Test(NE,Z) l0040A4DC
	// succ:  l0040A4BD l0040A4DC
l0040A4BD:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416CA0
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	ecx = Mem0[ebp + 0x00000010:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040A450_exit
l0040A4DC:
	edi = Mem0[ebp + 0x00000010:word32]
	SCZO = cond(edi - 0x00000020)
	branch Test(EQ,Z) l0040A500
	// succ:  l0040A4E4 l0040A500
l0040A4E4:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416C84
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040A450_exit
l0040A500:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000004
	edx = esp + 0x00000048
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408CA0 (retsize: 4;)
	eax = esp + 0x00000050
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn00408C50 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000004
	ecx = esp + 0x00000058
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	edi = eax
	call fn00408CA0 (retsize: 4;)
	edx = esp + 0x00000060
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call fn00408C50 (retsize: 4;)
	esp = esp + 0x00000020
	SCZO = cond(esp)
	SCZO = cond(edi - 0x00013880)
	branch Test(UGT,CZ) l0040A91C
	// succ:  l0040A53F l0040A91C
l0040A53F:
	SCZO = cond(eax - 0x00013880)
	branch Test(UGT,CZ) l0040A91C
	// succ:  l0040A54A l0040A91C
l0040A54A:
	ecx = eax + edi
	SCZO = cond(ecx - 0x000186A0)
	branch Test(UGT,CZ) l0040A91C
	// succ:  l0040A559 l0040A91C
l0040A559:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000004
	edx = esp + 0x00000048
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	Mem0[esp + 0x00000068:word32] = edi
	Mem0[esp + 0x00000064:word32] = eax
	call fn00408CA0 (retsize: 4;)
	eax = esp + 0x00000050
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn00408C50 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000004
	ecx = esp + 0x00000058
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	edi = eax
	call fn00408CA0 (retsize: 4;)
	edx = esp + 0x00000060
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call fn00408C50 (retsize: 4;)
	esp = esp + 0x00000020
	SCZO = cond(esp)
	SCZO = cond(edi - 0x00013880)
	branch Test(UGT,CZ) l0040A8FF
	// succ:  l0040A5A0 l0040A8FF
l0040A5A0:
	SCZO = cond(eax - 0x00013880)
	branch Test(UGT,CZ) l0040A8FF
	// succ:  l0040A5AB l0040A8FF
l0040A5AB:
	ecx = eax + edi
	SCZO = cond(ecx - 0x000186A0)
	branch Test(UGT,CZ) l0040A8FF
	// succ:  l0040A5BA l0040A8FF
l0040A5BA:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000004
	edx = esp + 0x00000048
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	Mem0[esp + 0x00000060:word32] = edi
	Mem0[esp + 0x0000005C:word32] = eax
	call fn00408CA0 (retsize: 4;)
	eax = esp + 0x00000050
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn00408C50 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000004
	ecx = esp + 0x00000058
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	edi = eax
	call fn00408CA0 (retsize: 4;)
	edx = esp + 0x00000060
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call fn00408C50 (retsize: 4;)
	esp = esp + 0x00000020
	SCZO = cond(esp)
	SCZO = cond(edi - 0x00013880)
	branch Test(UGT,CZ) l0040A8E2
	// succ:  l0040A601 l0040A8E2
l0040A601:
	SCZO = cond(eax - 0x00013880)
	branch Test(UGT,CZ) l0040A8E2
	// succ:  l0040A60C l0040A8E2
l0040A60C:
	ecx = eax + edi
	SCZO = cond(ecx - 0x000186A0)
	branch Test(UGT,CZ) l0040A8E2
	// succ:  l0040A61B l0040A8E2
l0040A61B:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000004
	edx = esp + 0x00000048
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	Mem0[esp + 0x00000058:word32] = edi
	Mem0[esp + 0x00000054:word32] = eax
	call fn00408CA0 (retsize: 4;)
	eax = esp + 0x00000050
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn00408C50 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000004
	ecx = esp + 0x00000058
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	edi = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	Mem0[esp + 0x00000080:word32] = edi
	call fn00408CA0 (retsize: 4;)
	edx = esp + 0x00000060
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call fn00408C50 (retsize: 4;)
	esp = esp + 0x00000020
	SCZO = cond(esp)
	SCZO = cond(edi - 0x00013880)
	ebx = eax
	Mem0[esp + 0x00000060:word32] = ebx
	branch Test(UGT,CZ) l0040A8C5
	// succ:  l0040A66F l0040A8C5
l0040A66F:
	SCZO = cond(ebx - 0x00013880)
	branch Test(UGT,CZ) l0040A8C5
	// succ:  l0040A67B l0040A8C5
l0040A67B:
	eax = ebx + edi
	SCZO = cond(eax - 0x000186A0)
	branch Test(UGT,CZ) l0040A8C5
	// succ:  l0040A689 l0040A8C5
l0040A689:
	rLoc1 = (real64) Mem0[esp + 0x0000005C:int32]
	eax = Mem0[ebp + 0x0000000C:word32]
	SZO = cond(Mem0[eax + 0x00000008:word32] & 0x00000800)
	C = false
	rLoc2 = Mem0[0x00416A30:real64]
	rLoc2 = rLoc1 / rLoc2
	v18 = rLoc2
	rLoc2 = rLoc1
	rLoc1 = v18
	Mem0[esp + 0x0000007C:real32] = rLoc2
	rLoc2 = (real64) Mem0[esp + 0x00000058:int32]
	rLoc2 = rLoc2 / rLoc1
	Mem0[esp + 0x00000078:real32] = rLoc2
	rLoc2 = (real64) Mem0[esp + 0x00000054:int32]
	rLoc2 = rLoc2 / rLoc1
	Mem0[esp + 0x00000074:real32] = rLoc2
	rLoc2 = (real64) Mem0[esp + 0x00000050:int32]
	rLoc2 = rLoc2 / rLoc1
	Mem0[esp + 0x00000070:real32] = rLoc2
	rLoc2 = (real64) Mem0[esp + 0x0000004C:int32]
	rLoc2 = rLoc2 / rLoc1
	Mem0[esp + 0x0000006C:real32] = rLoc2
	rLoc2 = (real64) Mem0[esp + 0x00000048:int32]
	rLoc2 = rLoc2 / rLoc1
	Mem0[esp + 0x00000068:real32] = rLoc2
	rLoc2 = (real64) Mem0[esp + 0x00000064:int32]
	rLoc2 = rLoc2 / rLoc1
	Mem0[esp + 0x00000064:real32] = rLoc2
l0040A8C5:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416BFC
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040A450_exit
l0040A8E2:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416BE0
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000008
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040A450_exit
l0040A8FF:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416BC8
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000010
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040A450_exit
l0040A91C:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416BAC
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000018
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040A450_exit
fn0040A450_exit:


// fn0040A940
// Return size: 4
void fn0040A940()
fn0040A940_entry:
	// succ:  l0040A940
l0040A940:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp + 0x00000008:word32]
	eax = Mem0[edi + 0x00000068:word32]
	SZO = cond(al & 0x01)
	C = false
	branch Test(NE,Z) l0040A959
	// succ:  l0040A94C l0040A959
l0040A94C:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416DA0
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408740 (retsize: 4;)
	goto l0040A987
	// succ:  l0040A987
l0040A959:
	SZO = cond(al & 0x04)
	C = false
	branch Test(EQ,Z) l0040A978
	// succ:  l0040A95D l0040A978
l0040A95D:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416D88
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	eax = Mem0[esp + 0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040A940_exit
l0040A978:
	SZO = cond(al & 0x02)
	C = false
	branch Test(EQ,Z) l0040A98A
	// succ:  l0040A97C l0040A98A
l0040A97C:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416D70
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	// succ:  l0040A987
l0040A987:
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l0040A98A
l0040A98A:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000010:word32]
	SZO = cond(esi & esi)
	C = false
	branch Test(EQ,Z) l0040A9B8
	// succ:  l0040A993 l0040A9B8
l0040A993:
	SZO = cond(Mem0[esi + 0x00000008:word32] & 0x00000800)
	C = false
	branch Test(EQ,Z) l0040A9B8
	// succ:  l0040A99C l0040A9B8
l0040A99C:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416D58
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	ecx = Mem0[esp + 0x0000001C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040A940_exit
l0040A9B8:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = Mem0[esp + 0x00000018:word32]
	SCZO = cond(ebx - 0x00000001)
	branch Test(EQ,Z) l0040A9DB
	// succ:  l0040A9C2 l0040A9DB
l0040A9C2:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416D3C
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040A940_exit
l0040A9DB:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000001
	edx = esp + 0x00000014
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408CA0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000014
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0040AB29
	// succ:  l0040A9FB l0040AB29
l0040A9FB:
	ebx = (word32) Mem0[esp + 0x00000010:byte]
	SCZO = cond(ebx - 0x00000004)
	branch Test(LT,SO) l0040AA17
	// succ:  l0040AA05 l0040AA17
l0040AA05:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416D28
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040A940_exit
l0040AA17:
	SZO = cond(Mem0[esi + 0x00000008:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l0040AA5E
	// succ:  l0040AA1D l0040AA5E
l0040AA1D:
	eax = Mem0[esi + 0x000000FC:word32]
	SCZO = cond(eax - 0x0000AFC8)
	branch Test(LT,SO) l0040AA31
	// succ:  l0040AA2A l0040AA31
l0040AA2A:
	SCZO = cond(eax - 0x0000B3B0)
	branch Test(LE,SZO) l0040AA5E
	// succ:  l0040AA31 l0040AA5E
l0040AA31:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416A50
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	eax = Mem0[edi + 0x00000234:word32]
	esp = esp + 0x00000008
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416D08
	call __iob_func (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	eax = eax + 0x00000040
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call MSVCR80.dll!fprintf (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	// succ:  l0040AA5E
l0040AA5E:
	SZO = cond(Mem0[esi + 0x00000008:byte] & 0x04)
	C = false
	branch Test(EQ,Z) l0040AB1E
	// succ:  l0040AA68 l0040AB1E
l0040AA68:
	eax = Mem0[esi + 0x00000100:word32]
	SCZO = cond(eax - 0x0000763E)
	branch Test(LT,SO) l0040AB10
	// succ:  l0040AA79 l0040AB10
l0040AA79:
	SCZO = cond(eax - 0x00007E0E)
	branch Test(GT,SZO) l0040AB10
	// succ:  l0040AA84 l0040AB10
l0040AA84:
	eax = Mem0[esi + 0x00000104:word32]
	SCZO = cond(eax - 0x00007C9C)
	branch Test(LT,SO) l0040AB10
	// succ:  l0040AA91 l0040AB10
l0040AA91:
	SCZO = cond(eax - 0x0000846C)
	branch Test(GT,SZO) l0040AB10
	// succ:  l0040AA98 l0040AB10
l0040AA98:
	eax = Mem0[esi + 0x00000108:word32]
	SCZO = cond(eax - 0x0000F618)
	branch Test(LT,SO) l0040AB10
	// succ:  l0040AAA5 l0040AB10
l0040AAA5:
	SCZO = cond(eax - 0x0000FDE8)
	branch Test(GT,SZO) l0040AB10
	// succ:  l0040AAAC l0040AB10
l0040AAAC:
	eax = Mem0[esi + 0x0000010C:word32]
	SCZO = cond(eax - 0x00007D00)
	branch Test(LT,SO) l0040AB10
	// succ:  l0040AAB9 l0040AB10
l0040AAB9:
	SCZO = cond(eax - 0x000084D0)
	branch Test(GT,SZO) l0040AB10
	// succ:  l0040AAC0 l0040AB10
l0040AAC0:
	eax = Mem0[esi + 0x00000110:word32]
	SCZO = cond(eax - 0x00007148)
	branch Test(LT,SO) l0040AB10
	// succ:  l0040AACD l0040AB10
l0040AACD:
	SCZO = cond(eax - 0x00007918)
	branch Test(GT,SZO) l0040AB10
	// succ:  l0040AAD4 l0040AB10
l0040AAD4:
	eax = Mem0[esi + 0x00000114:word32]
	SCZO = cond(eax - 0x0000E678)
	branch Test(LT,SO) l0040AB10
	// succ:  l0040AAE1 l0040AB10
l0040AAE1:
	SCZO = cond(eax - 0x0000EE48)
	branch Test(GT,SZO) l0040AB10
	// succ:  l0040AAE8 l0040AB10
l0040AAE8:
	eax = Mem0[esi + 0x00000118:word32]
	SCZO = cond(eax - 0x000036B0)
	branch Test(LT,SO) l0040AB10
	// succ:  l0040AAF5 l0040AB10
l0040AAF5:
	SCZO = cond(eax - 0x00003E80)
	branch Test(GT,SZO) l0040AB10
	// succ:  l0040AAFC l0040AB10
l0040AAFC:
	eax = Mem0[esi + 0x0000011C:word32]
	SCZO = cond(eax - 0x00001388)
	branch Test(LT,SO) l0040AB10
	// succ:  l0040AB09 l0040AB10
l0040AB09:
	SCZO = cond(eax - 0x00001B58)
	branch Test(LE,SZO) l0040AB1E
	// succ:  l0040AB10 l0040AB1E
l0040AB10:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416C4C
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l0040AB1E
l0040AB1E:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00411B30 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	// succ:  l0040AB29
l0040AB29:
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040A940_exit
fn0040A940_exit:


// fn0040AB30
// Return size: 4
void fn0040AB30()
fn0040AB30_entry:
	// succ:  l0040AB30
l0040AB30:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp + 0x0000000C:word32]
	eax = Mem0[edi + 0x00000068:word32]
	SZO = cond(al & 0x01)
	C = false
	branch Test(NE,Z) l0040AB4A
	// succ:  l0040AB3D l0040AB4A
l0040AB3D:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416E9C
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408740 (retsize: 4;)
	goto l0040AB79
	// succ:  l0040AB79
l0040AB4A:
	SZO = cond(al & 0x04)
	C = false
	branch Test(EQ,Z) l0040AB6A
	// succ:  l0040AB4E l0040AB6A
l0040AB4E:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416E84
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	eax = Mem0[esp + 0x0000001C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040AB30_exit
l0040AB6A:
	SZO = cond(al & 0x02)
	C = false
	branch Test(EQ,Z) l0040AB7C
	// succ:  l0040AB6E l0040AB7C
l0040AB6E:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416E6C
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	// succ:  l0040AB79
l0040AB79:
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l0040AB7C
l0040AB7C:
	eax = Mem0[esp + 0x00000010:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040ABA9
	// succ:  l0040AB84 l0040ABA9
l0040AB84:
	SZO = cond(Mem0[eax + 0x00000008:word32] & 0x00001000)
	C = false
	branch Test(EQ,Z) l0040ABA9
	// succ:  l0040AB8D l0040ABA9
l0040AB8D:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416E54
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	ecx = Mem0[esp + 0x0000001C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040AB30_exit
l0040ABA9:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = Mem0[esp + 0x0000001C:word32]
	edx = ebp + 0x00000001
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BA0 (retsize: 4;)
	ebx = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408CA0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x0000001C
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040ABE1
	// succ:  l0040ABD2 l0040ABE1
l0040ABD2:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040AB30_exit
l0040ABE1:
	eax = ebx + ebp
	Mem0[eax:byte] = 0x00
	SCZO = cond(Mem0[ebx:byte] - 0x00)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = ebx
	branch Test(EQ,Z) l0040ABF8
	// succ:  l0040ABEF l0040ABF8
l0040ABEF:
	// succ:  l0040ABF0
l0040ABF0:
	esi = esi + 0x00000001
	SCZO = cond(esi)
	SCZO = cond(Mem0[esi:byte] - 0x00)
	branch Test(NE,Z) l0040ABF0
	// succ:  l0040ABF8 l0040ABF0
l0040ABF8:
	esi = esi + 0x00000001
	SCZO = cond(esi)
	SCZO = cond(esi - eax)
	branch Test(ULT,C) l0040AC1A
	// succ:  l0040ABFF l0040AC1A
l0040ABFF:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416E3C
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040AB30_exit
l0040AC1A:
	al = Mem0[esi:byte]
	esi = esi + 0x00000001
	SCZO = cond(esi)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0040AC33
	// succ:  l0040AC23 l0040AC33
l0040AC23:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416E0C
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	al = al ^ al
	SZO = cond(al)
	C = false
	// succ:  l0040AC33
l0040AC33:
	ecx = esp + 0x00000018
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esi = esi - ebx
	SCZO = cond(esi)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	eax = (word32) al
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	Mem0[esp + 0x00000028:word32] = eax
	call fn00408D40 (retsize: 4;)
	ecx = Mem0[esp + 0x00000030:word32]
	ebp = eax
	eax = ecx
	esp = esp + 0x00000018
	SCZO = cond(esp)
	eax = eax - esi
	SCZO = cond(eax)
	SCZO = cond(esi - ecx)
	branch Test(UGT,CZ) l0040ACC4
	// succ:  l0040AC5C l0040ACC4
l0040AC5C:
	SCZO = cond(eax - 0x00000004)
	branch Test(ULT,C) l0040ACC4
	// succ:  l0040AC61 l0040ACC4
l0040AC61:
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	dh = Mem0[esi + ebp:byte]
	ecx = esi + ebp
	esi = (word32) Mem0[ecx + 0x00000002:byte]
	dl = Mem0[ecx + 0x00000001:byte]
	edx = edx << 0x00000008
	SCZO = cond(edx)
	edx = edx | esi
	SZO = cond(edx)
	C = false
	esi = (word32) Mem0[ecx + 0x00000003:byte]
	edx = edx << 0x00000008
	SCZO = cond(edx)
	edx = edx | esi
	SZO = cond(edx)
	C = false
	SCZO = cond(edx - eax)
	branch Test(UGE,C) l0040ACA7
	// succ:  l0040AC82 l0040ACA7
l0040AC82:
	eax = edx
	// succ:  l0040AC84
l0040AC84:
	edx = Mem0[esp + 0x00000010:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = Mem0[esp + 0x00000020:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00411C10 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4;)
	esp = esp + 0x00000020
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040AB30_exit
l0040ACA7:
	branch Test(ULE,CZ) l0040AC84
	// succ:  l0040ACA9 l0040AC84
l0040ACA9:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416DE8
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040AB30_exit
l0040ACC4:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416DBC
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040AB30_exit
fn0040AB30_exit:


// fn0040ACE0
// Return size: 4
void fn0040ACE0()
fn0040ACE0_entry:
	// succ:  l0040ACE0
l0040ACE0:
	esp = fp
	esp = esp - 0x00000010
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = Mem0[esp + 0x00000018:word32]
	eax = Mem0[ebx + 0x00000068:word32]
	SZO = cond(al & 0x01)
	C = false
	branch Test(NE,Z) l0040AD37
	// succ:  l0040ACEF l0040AD37
l0040ACEF:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416F3C
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l0040ACFD
l0040ACFD:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp + 0x00000028:word32]
	ecx = edi + 0x00000001
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00408BA0 (retsize: 4;)
	ebp = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00408CA0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x0000001C
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040AD59
	// succ:  l0040AD26 l0040AD59
l0040AD26:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00408BF0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000010
	SCZO = cond(esp)
	return
	// succ:  fn0040ACE0_exit
l0040AD37:
	SZO = cond(al & 0x04)
	C = false
	branch Test(EQ,Z) l0040ACFD
	// succ:  l0040AD3B l0040ACFD
l0040AD3B:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416F24
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn004087F0 (retsize: 4;)
	eax = Mem0[esp + 0x00000028:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000010
	SCZO = cond(esp)
	return
	// succ:  fn0040ACE0_exit
l0040AD59:
	eax = edi + ebp
	Mem0[eax:byte] = 0x00
	SCZO = cond(Mem0[ebp + 0x00000000:byte] - 0x00)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = ebp
	branch Test(EQ,Z) l0040AD70
	// succ:  l0040AD68 l0040AD70
l0040AD68:
	esi = esi + 0x00000001
	SCZO = cond(esi)
	SCZO = cond(Mem0[esi:byte] - 0x00)
	branch Test(NE,Z) l0040AD68
	// succ:  l0040AD70 l0040AD68
l0040AD70:
	esi = esi + 0x00000001
	SCZO = cond(esi)
	SCZO = cond(esi - eax)
	branch Test(ULE,CZ) l0040AD94
	// succ:  l0040AD77 l0040AD94
l0040AD77:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00408BF0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416F0C
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000010
	SCZO = cond(esp)
	return
	// succ:  fn0040ACE0_exit
l0040AD94:
	al = Mem0[esi:byte]
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	esi = esi + 0x00000001
	SCZO = cond(esi)
	SCZO = cond(al - 0x08)
	Mem0[esp + 0x00000014:byte] = al
	cl = Test(NE,Z)
	eax = ebp
	eax = eax - esi
	SCZO = cond(eax)
	eax = eax + edi
	SCZO = cond(eax)
	edx_eax = (int64) eax
	ecx = 0x00000006 + ecx * 0x00000004
	edx = edx_eax % ecx
	eax = edx_eax / ecx
	SCZO = cond(eax)
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0040ADD5
	// succ:  l0040ADB8 l0040ADD5
l0040ADB8:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00408BF0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416EF0
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000010
	SCZO = cond(esp)
	return
	// succ:  fn0040ACE0_exit
l0040ADD5:
	SCZO = cond(eax - 0x19999999)
	Mem0[esp + 0x0000001C:word32] = eax
	branch Test(ULE,CZ) l0040ADF6
	// succ:  l0040ADE0 l0040ADF6
l0040ADE0:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416EDC
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000010
	SCZO = cond(esp)
	return
	// succ:  fn0040ACE0_exit
l0040ADF6:
	edx = eax + eax * 0x00000004
	edx = edx + edx
	SCZO = cond(edx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00408C20 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	Mem0[esp + 0x00000018:word32] = eax
	branch Test(NE,Z) l0040AE23
	// succ:  l0040AE0D l0040AE23
l0040AE0D:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416EB8
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000010
	SCZO = cond(esp)
	return
	// succ:  fn0040ACE0_exit
l0040AE23:
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	SCZO = cond(Mem0[esp + 0x0000001C:word32] - edi)
	branch Test(LE,SZO) l0040AEC4
	// succ:  l0040AE2F l0040AEC4
l0040AE2F:
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	goto l0040AE37
	// succ:  l0040AE37
l0040AE33:
	eax = Mem0[esp + 0x00000018:word32]
	// succ:  l0040AE37
l0040AE37:
	SCZO = cond(Mem0[esp + 0x00000014:byte] - 0x08)
	edx = ebx + eax
	branch Test(NE,Z) l0040AE6A
	// succ:  l0040AE41 l0040AE6A
l0040AE41:
	eax = (word32) Mem0[esi:byte]
	esi = esi + 0x00000001
	SCZO = cond(esi)
	Mem0[edx:word16] = ax
	ecx = (word32) Mem0[esi:byte]
	esi = esi + 0x00000001
	SCZO = cond(esi)
	Mem0[edx + 0x00000002:word16] = cx
	eax = (word32) Mem0[esi:byte]
	esi = esi + 0x00000001
	SCZO = cond(esi)
	Mem0[edx + 0x00000004:word16] = ax
	ecx = (word32) Mem0[esi:byte]
	Mem0[edx + 0x00000006:word16] = cx
	esi = esi + 0x00000001
	SCZO = cond(esi)
	goto l0040AEA0
	// succ:  l0040AEA0
l0040AE6A:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408C80 (retsize: 4;)
	esi = esi + 0x00000002
	SCZO = cond(esi)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	Mem0[edx:word16] = ax
	call fn00408C80 (retsize: 4;)
	esi = esi + 0x00000002
	SCZO = cond(esi)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	Mem0[edx + 0x00000002:word16] = ax
	call fn00408C80 (retsize: 4;)
	esi = esi + 0x00000002
	SCZO = cond(esi)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	Mem0[edx + 0x00000004:word16] = ax
	call fn00408C80 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	Mem0[edx + 0x00000006:word16] = ax
	esi = esi + 0x00000002
	SCZO = cond(esi)
	// succ:  l0040AEA0
l0040AEA0:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408C80 (retsize: 4;)
	edi = edi + 0x00000001
	SCZO = cond(edi)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	Mem0[edx + 0x00000008:word16] = ax
	esi = esi + 0x00000002
	SCZO = cond(esi)
	ebx = ebx + 0x0000000A
	SCZO = cond(ebx)
	SCZO = cond(edi - Mem0[esp + 0x0000001C:word32])
	branch Test(LT,SO) l0040AE33
	// succ:  l0040AEC0 l0040AE33
l0040AEC0:
	ebx = Mem0[esp + 0x00000024:word32]
	// succ:  l0040AEC4
l0040AEC4:
	eax = Mem0[esp + 0x00000028:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000001
	edx = esp + 0x00000014
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	Mem0[esp + 0x00000020:word32] = ebp
	call fn00411FC0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00408BF0 (retsize: 4;)
	ecx = Mem0[esp + 0x00000030:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00408BF0 (retsize: 4;)
	esp = esp + 0x00000020
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000010
	SCZO = cond(esp)
	return
	// succ:  fn0040ACE0_exit
fn0040ACE0_exit:


// fn0040AF00
// Return size: 4
void fn0040AF00()
fn0040AF00_entry:
	// succ:  l0040AF00
l0040AF00:
	esp = fp
	esp = esp - 0x00000110
	SCZO = cond(esp)
	eax = Mem0[0x0041C340:word32]
	eax = eax ^ esp
	SZO = cond(eax)
	C = false
	Mem0[esp + 0x0000010C:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = Mem0[esp + 0x0000011C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x0000011C:word32]
	eax = Mem0[esi + 0x00000068:word32]
	SZO = cond(al & 0x01)
	C = false
	branch Test(NE,Z) l0040AF69
	// succ:  l0040AF2B l0040AF69
l0040AF2B:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417004
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l0040AF39
l0040AF39:
	al = Mem0[esi + 0x00000126:byte]
	SZO = cond(al & al)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	branch Test(NE,Z) l0040B00C
	// succ:  l0040AF48 l0040B00C
l0040AF48:
	edi = Mem0[esp + 0x00000128:word32]
	SCZO = cond(edi - 0x00000002)
	branch Test(EQ,Z) l0040AFDD
	// succ:  l0040AF58 l0040AFDD
l0040AF58:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416FE8
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	goto l0040B12B
	// succ:  l0040B12B
l0040AF69:
	SZO = cond(al & 0x04)
	C = false
	branch Test(EQ,Z) l0040AFA0
	// succ:  l0040AF6D l0040AFA0
l0040AF6D:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416FD0
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	eax = Mem0[esp + 0x0000012C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp + 0x0000010C:word32]
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x00000110
	SCZO = cond(esp)
	return
	// succ:  fn0040AF00_exit
l0040AFA0:
	SZO = cond(ebp & ebp)
	C = false
	branch Test(EQ,Z) l0040AF39
	// succ:  l0040AFA4 l0040AF39
l0040AFA4:
	SZO = cond(Mem0[ebp + 0x00000008:byte] & 0x10)
	C = false
	branch Test(EQ,Z) l0040AF39
	// succ:  l0040AFAA l0040AF39
l0040AFAA:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416FB8
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	ecx = Mem0[esp + 0x0000012C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp + 0x0000010C:word32]
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x00000110
	SCZO = cond(esp)
	return
	// succ:  fn0040AF00_exit
l0040AFDD:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000002
	edx = esp + 0x00000010
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408CA0 (retsize: 4;)
	eax = esp + 0x00000018
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	Mem0[esi + 0x0000011A:word16] = 0x0001
	call fn00408C80 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	Mem0[esi + 0x00000194:word16] = ax
	goto l0040B0D3
	// succ:  l0040B0D3
l0040B00C:
	SCZO = cond(al - 0x02)
	branch Test(NE,Z) l0040B06D
	// succ:  l0040B010 l0040B06D
l0040B010:
	edi = Mem0[esp + 0x00000128:word32]
	SCZO = cond(edi - 0x00000006)
	branch Test(NE,Z) l0040AF58
	// succ:  l0040B020 l0040AF58
l0040B020:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	ecx = esp + 0x00000014
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408CA0 (retsize: 4;)
	edx = esp + 0x0000001C
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	Mem0[esi + 0x0000011A:word16] = 0x0001
	call fn00408C80 (retsize: 4;)
	Mem0[esi + 0x0000018E:word16] = ax
	eax = esp + 0x00000022
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn00408C80 (retsize: 4;)
	ecx = esp + 0x00000028
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	Mem0[esi + 0x00000190:word16] = ax
	call fn00408C80 (retsize: 4;)
	esp = esp + 0x00000018
	SCZO = cond(esp)
	Mem0[esi + 0x00000192:word16] = ax
	goto l0040B0D3
	// succ:  l0040B0D3
l0040B06D:
	SCZO = cond(al - 0x03)
	branch Test(NE,Z) l0040B118
	// succ:  l0040B075 l0040B118
l0040B075:
	SZO = cond(Mem0[esi + 0x00000068:byte] & 0x02)
	C = false
	branch Test(NE,Z) l0040B089
	// succ:  l0040B07B l0040B089
l0040B07B:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416F9C
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l0040B089
l0040B089:
	edx = (word32) Mem0[esi + 0x00000118:word16]
	edi = Mem0[esp + 0x00000128:word32]
	SCZO = cond(edi - edx)
	branch Test(UGT,CZ) l0040AF58
	// succ:  l0040B09F l0040AF58
l0040B09F:
	SCZO = cond(edi - 0x00000100)
	branch Test(UGT,CZ) l0040AF58
	// succ:  l0040B0AB l0040AF58
l0040B0AB:
	SZO = cond(edi & edi)
	C = false
	branch Test(NE,Z) l0040B0BD
	// succ:  l0040B0AF l0040B0BD
l0040B0AF:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416F84
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	goto l0040B12B
	// succ:  l0040B12B
l0040B0BD:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	eax = esp + 0x0000001C
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408CA0 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	Mem0[esi + 0x0000011A:word16] = di
	// succ:  l0040B0D3
l0040B0D3:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0040B134
	// succ:  l0040B0E2 l0040B134
l0040B0E2:
	edx = (word32) Mem0[esi + 0x0000011A:word16]
	ecx = esi + 0x0000018C
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	eax = esp + 0x00000020
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00411F30 (retsize: 4;)
	esp = esp + 0x00000014
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp + 0x0000010C:word32]
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x00000110
	SCZO = cond(esp)
	return
	// succ:  fn0040AF00_exit
l0040B118:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416F58
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	ecx = Mem0[esp + 0x00000130:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	// succ:  l0040B12B
l0040B12B:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	// succ:  l0040B134
l0040B134:
	ecx = Mem0[esp + 0x00000118:word32]
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x00000110
	SCZO = cond(esp)
	return
	// succ:  fn0040AF00_exit
fn0040AF00_exit:


// fn0040B150
// Return size: 4
void fn0040B150()
fn0040B150_entry:
	// succ:  l0040B150
l0040B150:
	esp = fp
	esp = esp - 0x0000000C
	SCZO = cond(esp)
	eax = Mem0[0x0041C340:word32]
	eax = eax ^ esp
	SZO = cond(eax)
	C = false
	Mem0[esp + 0x00000008:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = Mem0[esp + 0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000018:word32]
	eax = Mem0[esi + 0x00000068:word32]
	SZO = cond(al & 0x01)
	C = false
	branch Test(NE,Z) l0040B195
	// succ:  l0040B16F l0040B195
l0040B16F:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004170AC
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l0040B17D
l0040B17D:
	al = Mem0[esi + 0x00000126:byte]
	SCZO = cond(al - 0x03)
	branch Test(NE,Z) l0040B236
	// succ:  l0040B18B l0040B236
l0040B18B:
	eax = 0x00000001
	goto l0040B241
	// succ:  l0040B241
l0040B195:
	SZO = cond(al & 0x04)
	C = false
	branch Test(EQ,Z) l0040B1C3
	// succ:  l0040B199 l0040B1C3
l0040B199:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417094
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	eax = Mem0[esp + 0x00000028:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp + 0x00000008:word32]
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	return
	// succ:  fn0040B150_exit
l0040B1C3:
	SCZO = cond(Mem0[esi + 0x00000126:byte] - 0x03)
	branch Test(NE,Z) l0040B1FA
	// succ:  l0040B1CC l0040B1FA
l0040B1CC:
	SZO = cond(al & 0x02)
	C = false
	branch Test(NE,Z) l0040B1FA
	// succ:  l0040B1D0 l0040B1FA
l0040B1D0:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417078
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	ecx = Mem0[esp + 0x00000028:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp + 0x00000008:word32]
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	return
	// succ:  fn0040B150_exit
l0040B1FA:
	SZO = cond(ebx & ebx)
	C = false
	branch Test(EQ,Z) l0040B17D
	// succ:  l0040B202 l0040B17D
l0040B202:
	SZO = cond(Mem0[ebx + 0x00000008:byte] & 0x20)
	C = false
	branch Test(EQ,Z) l0040B17D
	// succ:  l0040B20C l0040B17D
l0040B20C:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417060
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	edx = Mem0[esp + 0x00000028:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp + 0x00000008:word32]
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	return
	// succ:  fn0040B150_exit
l0040B236:
	eax = (word32) al
	eax = eax & 0x00000002
	SZO = cond(eax)
	C = false
	eax = eax | 0x00000001
	SZO = cond(eax)
	C = false
	eax = eax + eax
	SCZO = cond(eax)
	// succ:  l0040B241
l0040B241:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp + 0x00000024:word32]
	SCZO = cond(edi - eax)
	branch Test(EQ,Z) l0040B271
	// succ:  l0040B24A l0040B271
l0040B24A:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417044
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp + 0x00000008:word32]
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	return
	// succ:  fn0040B150_exit
l0040B271:
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = esp + 0x00000010
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408CA0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000014
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0040B37B
	// succ:  l0040B290 l0040B37B
l0040B290:
	al = Mem0[esi + 0x00000126:byte]
	SCZO = cond(al - 0x03)
	branch Test(NE,Z) l0040B30C
	// succ:  l0040B29A l0040B30C
l0040B29A:
	cl = Mem0[esp + 0x0000000C:byte]
	Mem0[esi + 0x00000138:byte] = cl
	eax = (word32) Mem0[ebx + 0x00000014:word16]
	SZO = cond(ax & ax)
	C = false
	branch Test(EQ,Z) l0040B36A
	// succ:  l0040B2B1 l0040B36A
l0040B2B1:
	dx = (word16) cl
	SCZO = cond(dx - ax)
	branch Test(ULE,CZ) l0040B2DA
	// succ:  l0040B2BA l0040B2DA
l0040B2BA:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417020
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp + 0x00000008:word32]
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	return
	// succ:  fn0040B150_exit
l0040B2DA:
	eax = (word32) cl
	ecx = Mem0[esi + 0x00000114:word32]
	eax = eax + eax * 0x00000002
	edx = (word32) Mem0[eax + ecx:byte]
	eax = eax + ecx
	SCZO = cond(eax)
	Mem0[esi + 0x0000013A:word16] = dx
	cx = (word16) Mem0[eax + 0x00000001:byte]
	Mem0[esi + 0x0000013C:word16] = cx
	edx = (word32) Mem0[eax + 0x00000002:byte]
	Mem0[esi + 0x0000013E:word16] = dx
	goto l0040B36A
	// succ:  l0040B36A
l0040B30C:
	SZO = cond(al & 0x02)
	C = false
	branch Test(NE,Z) l0040B334
	// succ:  l0040B310 l0040B334
l0040B310:
	eax = esp + 0x0000000C
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn00408C80 (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	Mem0[esi + 0x00000140:word16] = ax
	Mem0[esi + 0x0000013C:word16] = ax
	Mem0[esi + 0x0000013A:word16] = ax
	goto l0040B363
	// succ:  l0040B363
l0040B334:
	ecx = esp + 0x0000000C
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	call fn00408C80 (retsize: 4;)
	edx = esp + 0x00000012
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	Mem0[esi + 0x0000013A:word16] = ax
	call fn00408C80 (retsize: 4;)
	Mem0[esi + 0x0000013C:word16] = ax
	eax = esp + 0x00000018
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn00408C80 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	// succ:  l0040B363
l0040B363:
	Mem0[esi + 0x0000013E:word16] = ax
	// succ:  l0040B36A
l0040B36A:
	ecx = esi + 0x00000138
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00410EC0 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	// succ:  l0040B37B
l0040B37B:
	ecx = Mem0[esp + 0x00000014:word32]
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	return
	// succ:  fn0040B150_exit
fn0040B150_exit:


// fn0040B390
// Return size: 4
void fn0040B390()
fn0040B390_entry:
	// succ:  l0040B390
l0040B390:
	esp = fp
	esp = esp - 0x00000208
	SCZO = cond(esp)
	eax = Mem0[0x0041C340:word32]
	eax = eax ^ esp
	SZO = cond(eax)
	C = false
	Mem0[esp + 0x00000204:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = Mem0[esp + 0x00000214:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000214:word32]
	eax = Mem0[esi + 0x00000068:word32]
	SZO = cond(al & 0x01)
	C = false
	branch Test(NE,Z) l0040B44D
	// succ:  l0040B3BF l0040B44D
l0040B3BF:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417130
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l0040B3CD
l0040B3CD:
	eax = (word32) Mem0[esi + 0x00000118:word16]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp + 0x00000224:word32]
	ebx = edi
	ebx = ebx >>u 0x00000001
	SCZO = cond(ebx)
	SCZO = cond(ebx - eax)
	branch Test(NE,Z) l0040B500
	// succ:  l0040B3E9 l0040B500
l0040B3E9:
	SCZO = cond(ebx - 0x00000100)
	branch Test(UGT,CZ) l0040B500
	// succ:  l0040B3F5 l0040B500
l0040B3F5:
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	SZO = cond(ebx & ebx)
	C = false
	branch Test(ULE,CZ) l0040B426
	// succ:  l0040B3FB l0040B426
l0040B3FB:
	// succ:  l0040B400
l0040B400:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000002
	ecx = esp + 0x00000014
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408CA0 (retsize: 4;)
	edx = esp + 0x0000001C
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call fn00408C80 (retsize: 4;)
	Mem0[esp + 0x00000024 + edi * 0x0002:word16] = ax
	edi = edi + 0x00000001
	SCZO = cond(edi)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	SCZO = cond(edi - ebx)
	branch Test(ULT,C) l0040B400
	// succ:  l0040B426 l0040B400
l0040B426:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0040B515
	// succ:  l0040B439 l0040B515
l0040B439:
	eax = esp + 0x00000014
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00411520 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	goto l0040B515
	// succ:  l0040B515
l0040B44D:
	SZO = cond(al & 0x04)
	C = false
	branch Test(EQ,Z) l0040B484
	// succ:  l0040B451 l0040B484
l0040B451:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417118
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	eax = Mem0[esp + 0x00000224:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp + 0x00000204:word32]
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x00000208
	SCZO = cond(esp)
	return
	// succ:  fn0040B390_exit
l0040B484:
	SZO = cond(al & 0x02)
	C = false
	branch Test(NE,Z) l0040B4BB
	// succ:  l0040B488 l0040B4BB
l0040B488:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004170FC
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	ecx = Mem0[esp + 0x00000224:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp + 0x00000204:word32]
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x00000208
	SCZO = cond(esp)
	return
	// succ:  fn0040B390_exit
l0040B4BB:
	SZO = cond(ebp & ebp)
	C = false
	branch Test(EQ,Z) l0040B3CD
	// succ:  l0040B4C3 l0040B3CD
l0040B4C3:
	SZO = cond(Mem0[ebp + 0x00000008:byte] & 0x40)
	C = false
	branch Test(EQ,Z) l0040B3CD
	// succ:  l0040B4CD l0040B3CD
l0040B4CD:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004170E4
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	edx = Mem0[esp + 0x00000224:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp + 0x00000204:word32]
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x00000208
	SCZO = cond(esp)
	return
	// succ:  fn0040B390_exit
l0040B500:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004170C8
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	// succ:  l0040B515
l0040B515:
	ecx = Mem0[esp + 0x00000214:word32]
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x00000208
	SCZO = cond(esp)
	return
	// succ:  fn0040B390_exit
fn0040B390_exit:


// fn0040B530
// Return size: 4
void fn0040B530()
fn0040B530_entry:
	// succ:  l0040B530
l0040B530:
	esp = fp
	esp = esp - 0x00000010
	SCZO = cond(esp)
	eax = Mem0[0x0041C340:word32]
	eax = eax ^ esp
	SZO = cond(eax)
	C = false
	Mem0[esp + 0x0000000C:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000018:word32]
	eax = Mem0[esi + 0x00000068:word32]
	SZO = cond(al & 0x01)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp + 0x00000020:word32]
	branch Test(NE,Z) l0040B592
	// succ:  l0040B54F l0040B592
l0040B54F:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417198
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l0040B55D
l0040B55D:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = Mem0[esp + 0x00000028:word32]
	SCZO = cond(ebx - 0x00000009)
	branch Test(EQ,Z) l0040B5F4
	// succ:  l0040B56B l0040B5F4
l0040B56B:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041717C
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp + 0x0000000C:word32]
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	return
	// succ:  fn0040B530_exit
l0040B592:
	SZO = cond(al & 0x04)
	C = false
	branch Test(EQ,Z) l0040B5C0
	// succ:  l0040B596 l0040B5C0
l0040B596:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417164
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	eax = Mem0[esp + 0x0000002C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp + 0x0000000C:word32]
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	return
	// succ:  fn0040B530_exit
l0040B5C0:
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l0040B55D
	// succ:  l0040B5C4 l0040B55D
l0040B5C4:
	SZO = cond(Mem0[edi + 0x00000008:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l0040B55D
	// succ:  l0040B5CA l0040B55D
l0040B5CA:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041714C
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	ecx = Mem0[esp + 0x0000002C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp + 0x0000000C:word32]
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	return
	// succ:  fn0040B530_exit
l0040B5F4:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000009
	edx = esp + 0x00000010
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408CA0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000014
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0040B63C
	// succ:  l0040B610 l0040B63C
l0040B610:
	eax = (word32) Mem0[esp + 0x00000014:byte]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	ecx = esp + 0x00000014
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	call fn00408C50 (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	edx = esp + 0x00000014
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call fn00408C50 (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00411A20 (retsize: 4;)
	esp = esp + 0x00000014
	SCZO = cond(esp)
	// succ:  l0040B63C
l0040B63C:
	ecx = Mem0[esp + 0x00000018:word32]
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	return
	// succ:  fn0040B530_exit
fn0040B530_exit:


// fn0040B650
// Return size: 4
void fn0040B650()
fn0040B650_entry:
	// succ:  l0040B650
l0040B650:
	esp = fp
	esp = esp - 0x00000010
	SCZO = cond(esp)
	eax = Mem0[0x0041C340:word32]
	eax = eax ^ esp
	SZO = cond(eax)
	C = false
	Mem0[esp + 0x0000000C:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000018:word32]
	eax = Mem0[esi + 0x00000068:word32]
	SZO = cond(al & 0x01)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp + 0x00000020:word32]
	branch Test(NE,Z) l0040B6B2
	// succ:  l0040B66F l0040B6B2
l0040B66F:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417200
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l0040B67D
l0040B67D:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = Mem0[esp + 0x00000028:word32]
	SCZO = cond(ebx - 0x00000009)
	branch Test(EQ,Z) l0040B717
	// succ:  l0040B68B l0040B717
l0040B68B:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004171E4
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp + 0x0000000C:word32]
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	return
	// succ:  fn0040B650_exit
l0040B6B2:
	SZO = cond(al & 0x04)
	C = false
	branch Test(EQ,Z) l0040B6E0
	// succ:  l0040B6B6 l0040B6E0
l0040B6B6:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004171CC
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	eax = Mem0[esp + 0x0000002C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp + 0x0000000C:word32]
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	return
	// succ:  fn0040B650_exit
l0040B6E0:
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l0040B67D
	// succ:  l0040B6E4 l0040B67D
l0040B6E4:
	SZO = cond(Mem0[edi + 0x00000008:word32] & 0x00000100)
	C = false
	branch Test(EQ,Z) l0040B67D
	// succ:  l0040B6ED l0040B67D
l0040B6ED:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004171B4
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	ecx = Mem0[esp + 0x0000002C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp + 0x0000000C:word32]
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	return
	// succ:  fn0040B650_exit
l0040B717:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000009
	edx = esp + 0x00000010
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408CA0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000014
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0040B75F
	// succ:  l0040B733 l0040B75F
l0040B733:
	eax = (word32) Mem0[esp + 0x00000014:byte]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	ecx = esp + 0x00000014
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	call fn00408C50 (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	edx = esp + 0x00000014
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call fn00408C50 (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00411810 (retsize: 4;)
	esp = esp + 0x00000014
	SCZO = cond(esp)
	// succ:  l0040B75F
l0040B75F:
	ecx = Mem0[esp + 0x00000018:word32]
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	return
	// succ:  fn0040B650_exit
fn0040B650_exit:


// fn0040B780
// Return size: 4
void fn0040B780()
fn0040B780_entry:
	// succ:  l0040B780
l0040B780:
	esp = fp
	esp = esp - 0x00000014
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp + 0x0000001C:word32]
	eax = Mem0[edi + 0x00000068:word32]
	SZO = cond(al & 0x01)
	C = false
	branch Test(NE,Z) l0040B7CB
	// succ:  l0040B78F l0040B7CB
l0040B78F:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004172F0
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l0040B79D
l0040B79D:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x0000002C:word32]
	edx = esi + 0x00000001
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408C20 (retsize: 4;)
	ebx = eax
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SZO = cond(ebx & ebx)
	C = false
	branch Test(NE,Z) l0040B81C
	// succ:  l0040B7B6 l0040B81C
l0040B7B6:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004172D4
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000014
	SCZO = cond(esp)
	return
	// succ:  fn0040B780_exit
l0040B7CB:
	SZO = cond(al & 0x04)
	C = false
	branch Test(EQ,Z) l0040B7ED
	// succ:  l0040B7CF l0040B7ED
l0040B7CF:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004172BC
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	eax = Mem0[esp + 0x0000002C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000014
	SCZO = cond(esp)
	return
	// succ:  fn0040B780_exit
l0040B7ED:
	eax = Mem0[esp + 0x00000020:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040B79D
	// succ:  l0040B7F5 l0040B79D
l0040B7F5:
	SZO = cond(Mem0[eax + 0x00000008:word32] & 0x00000400)
	C = false
	branch Test(EQ,Z) l0040B79D
	// succ:  l0040B7FE l0040B79D
l0040B7FE:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004172A4
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	ecx = Mem0[esp + 0x0000002C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000014
	SCZO = cond(esp)
	return
	// succ:  fn0040B780_exit
l0040B81C:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408CA0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000014
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040B844
	// succ:  l0040B833 l0040B844
l0040B833:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000014
	SCZO = cond(esp)
	return
	// succ:  fn0040B780_exit
l0040B844:
	eax = ebx + esi
	Mem0[eax:byte] = 0x00
	SCZO = cond(Mem0[ebx:byte] - 0x00)
	Mem0[esp + 0x00000010:word32] = eax
	esi = ebx
	branch Test(EQ,Z) l0040B85D
	// succ:  l0040B855 l0040B85D
l0040B855:
	esi = esi + 0x00000001
	SCZO = cond(esi)
	SCZO = cond(Mem0[esi:byte] - 0x00)
	branch Test(NE,Z) l0040B855
	// succ:  l0040B85D l0040B855
l0040B85D:
	ecx = esi + 0x0000000C
	SCZO = cond(eax - ecx)
	branch Test(UGT,CZ) l0040B86B
	// succ:  l0040B864 l0040B86B
l0040B864:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417290
	goto l0040B8CC
	// succ:  l0040B8CC
l0040B86B:
	edx = esi + 0x00000001
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call fn00408C50 (retsize: 4;)
	Mem0[esp + 0x00000020:word32] = eax
	eax = esi + 0x00000005
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn00408C50 (retsize: 4;)
	cl = Mem0[esi + 0x0000000A:byte]
	Mem0[esp + 0x00000020:word32] = eax
	al = Mem0[esi + 0x00000009:byte]
	esi = esi + 0x0000000B
	SCZO = cond(esi)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SZO = cond(al & al)
	C = false
	Mem0[esp + 0x0000000F:byte] = al
	Mem0[esp + 0x00000024:byte] = cl
	Mem0[esp + 0x00000014:word32] = esi
	branch Test(NE,Z) l0040B8A8
	// succ:  l0040B8A1 l0040B8A8
l0040B8A1:
	SCZO = cond(cl - 0x02)
	branch Test(NE,Z) l0040B8C7
	// succ:  l0040B8A6 l0040B8C7
l0040B8A6:
	goto l0040B8F9
	// succ:  l0040B8F9
l0040B8A8:
	SCZO = cond(al - 0x01)
	branch Test(NE,Z) l0040B8B3
	// succ:  l0040B8AC l0040B8B3
l0040B8AC:
	SCZO = cond(cl - 0x03)
	branch Test(NE,Z) l0040B8C7
	// succ:  l0040B8B1 l0040B8C7
l0040B8B1:
	goto l0040B8F9
	// succ:  l0040B8F9
l0040B8B3:
	SCZO = cond(al - 0x02)
	branch Test(NE,Z) l0040B8BE
	// succ:  l0040B8B7 l0040B8BE
l0040B8B7:
	SCZO = cond(cl - 0x03)
	branch Test(NE,Z) l0040B8C7
	// succ:  l0040B8BC l0040B8C7
l0040B8BC:
	goto l0040B8F9
	// succ:  l0040B8F9
l0040B8BE:
	SCZO = cond(al - 0x03)
	branch Test(NE,Z) l0040B8E3
	// succ:  l0040B8C2 l0040B8E3
l0040B8C2:
	SCZO = cond(cl - 0x04)
	branch Test(EQ,Z) l0040B8F9
	// succ:  l0040B8C7 l0040B8F9
l0040B8C7:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417264
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417264
	// succ:  l0040B8CC
l0040B8CC:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000014
	SCZO = cond(esp)
	return
	// succ:  fn0040B780_exit
l0040B8E3:
	SCZO = cond(al - 0x04)
	branch Test(ULT,C) l0040B8F9
	// succ:  l0040B8E7 l0040B8F9
l0040B8E7:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417238
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	cl = Mem0[esp + 0x0000002C:byte]
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l0040B8F9
l0040B8F9:
	SCZO = cond(Mem0[esi:byte] - 0x00)
	branch Test(EQ,Z) l0040B908
	// succ:  l0040B8FE l0040B908
l0040B8FE:
	edi = edi
	// succ:  l0040B900
l0040B900:
	esi = esi + 0x00000001
	SCZO = cond(esi)
	SCZO = cond(Mem0[esi:byte] - 0x00)
	branch Test(NE,Z) l0040B900
	// succ:  l0040B908 l0040B900
l0040B908:
	eax = (word32) cl
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ecx = 0x00000000 + eax * 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	Mem0[esp + 0x00000030:word32] = eax
	call fn00408C20 (retsize: 4;)
	ebp = eax
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SZO = cond(ebp & ebp)
	C = false
	branch Test(NE,Z) l0040B944
	// succ:  l0040B927 l0040B944
l0040B927:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041721C
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000014
	SCZO = cond(esp)
	return
	// succ:  fn0040B780_exit
l0040B944:
	ecx = Mem0[esp + 0x00000028:word32]
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SZO = cond(ecx & ecx)
	C = false
	branch Test(LE,SZO) l0040B97B
	// succ:  l0040B94E l0040B97B
l0040B94E:
	edi = edi
	// succ:  l0040B950
l0040B950:
	esi = esi + 0x00000001
	SCZO = cond(esi)
	Mem0[ebp + 0x00000000 + eax * 0x00000004:word32] = esi
	SCZO = cond(Mem0[esi:byte] - 0x00)
	branch Test(EQ,Z) l0040B96E
	// succ:  l0040B95C l0040B96E
l0040B95C:
	esp = esp + 0x00000000
	// succ:  l0040B960
l0040B960:
	SCZO = cond(esi - Mem0[esp + 0x00000014:word32])
	branch Test(UGT,CZ) l0040B9B7
	// succ:  l0040B966 l0040B9B7
l0040B966:
	esi = esi + 0x00000001
	SCZO = cond(esi)
	SCZO = cond(Mem0[esi:byte] - 0x00)
	branch Test(NE,Z) l0040B960
	// succ:  l0040B96E l0040B960
l0040B96E:
	SCZO = cond(esi - Mem0[esp + 0x00000014:word32])
	branch Test(UGT,CZ) l0040B9B7
	// succ:  l0040B974 l0040B9B7
l0040B974:
	eax = eax + 0x00000001
	SCZO = cond(eax)
	SCZO = cond(eax - ecx)
	branch Test(LT,SO) l0040B950
	// succ:  l0040B97B l0040B950
l0040B97B:
	edx = Mem0[esp + 0x00000018:word32]
	eax = (word32) Mem0[esp + 0x00000013:byte]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	edx = Mem0[esp + 0x00000028:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	ecx = Mem0[esp + 0x00000028:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = Mem0[esp + 0x0000003C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00411840 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4;)
	esp = esp + 0x00000034
	SCZO = cond(esp)
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000014
	SCZO = cond(esp)
	return
	// succ:  fn0040B780_exit
l0040B9B7:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417290
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4;)
	esp = esp + 0x00000018
	SCZO = cond(esp)
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000014
	SCZO = cond(esp)
	return
	// succ:  fn0040B780_exit
fn0040B780_exit:


// fn0040B9E0
// Return size: 4
void fn0040B9E0()
fn0040B9E0_entry:
	// succ:  l0040B9E0
l0040B9E0:
	esp = fp
	esp = esp - 0x00000008
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp + 0x00000010:word32]
	eax = Mem0[edi + 0x00000068:word32]
	SZO = cond(al & 0x01)
	C = false
	branch Test(NE,Z) l0040BA2B
	// succ:  l0040B9EF l0040BA2B
l0040B9EF:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004173CC
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l0040B9FD
l0040B9FD:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = Mem0[esp + 0x0000001C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	edx = ebx + 0x00000001
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408C20 (retsize: 4;)
	esi = eax
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SZO = cond(esi & esi)
	C = false
	branch Test(NE,Z) l0040BA7C
	// succ:  l0040BA16 l0040BA7C
l0040BA16:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004173A0
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000008
	SCZO = cond(esp)
	return
	// succ:  fn0040B9E0_exit
l0040BA2B:
	SZO = cond(al & 0x04)
	C = false
	branch Test(EQ,Z) l0040BA4D
	// succ:  l0040BA2F l0040BA4D
l0040BA2F:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417388
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	eax = Mem0[esp + 0x00000020:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000008
	SCZO = cond(esp)
	return
	// succ:  fn0040B9E0_exit
l0040BA4D:
	eax = Mem0[esp + 0x00000014:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040B9FD
	// succ:  l0040BA55 l0040B9FD
l0040BA55:
	SZO = cond(Mem0[eax + 0x00000008:word32] & 0x00004000)
	C = false
	branch Test(EQ,Z) l0040B9FD
	// succ:  l0040BA5E l0040B9FD
l0040BA5E:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417370
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	ecx = Mem0[esp + 0x00000020:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000008
	SCZO = cond(esp)
	return
	// succ:  fn0040B9E0_exit
l0040BA7C:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408CA0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000014
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040BAA4
	// succ:  l0040BA93 l0040BAA4
l0040BA93:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000008
	SCZO = cond(esp)
	return
	// succ:  fn0040B9E0_exit
l0040BAA4:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	eax = esp + 0x0000001C
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	ecx = esi + 0x00000001
	ebp = esi + ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	Mem0[ebp + 0x00000000:byte] = 0x00
	eax = strtod(Mem0[esp:(ptr char)], Mem0[esp + 4:(ptr (ptr char))])
	Mem0[esp + 0x00000018:real64] = rArg0
	edx = Mem0[esp + 0x00000024:word32]
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SCZO = cond(Mem0[edx:byte] - 0x00)
	branch Test(EQ,Z) l0040BAE1
	// succ:  l0040BACB l0040BAE1
l0040BACB:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417348
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4; FPU: -1;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000008
	SCZO = cond(esp)
	return
	// succ:  fn0040B9E0_exit
l0040BAE1:
	SCZO = cond(Mem0[esi:byte] - 0x00)
	ebx = esi
	branch Test(EQ,Z) l0040BAF0
	// succ:  l0040BAE8 l0040BAF0
l0040BAE8:
	ebx = ebx + 0x00000001
	SCZO = cond(ebx)
	SCZO = cond(Mem0[ebx:byte] - 0x00)
	branch Test(NE,Z) l0040BAE8
	// succ:  l0040BAF0 l0040BAE8
l0040BAF0:
	eax = esp + 0x0000001C
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	ebx = ebx + 0x00000001
	SCZO = cond(ebx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	eax = strtod(Mem0[esp:(ptr char)], Mem0[esp + 4:(ptr (ptr char))])
	ecx = Mem0[esp + 0x00000024:word32]
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SCZO = cond(Mem0[ecx:byte] - 0x00)
	branch Test(EQ,Z) l0040BB23
	// succ:  l0040BB0B l0040BB23
l0040BB0B:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417320
	rArg1 = rArg1
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4; FPU: -2;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000008
	SCZO = cond(esp)
	return
	// succ:  fn0040B9E0_exit
l0040BB23:
	SCZO = cond(ebp - ebx)
	branch Test(ULT,C) l0040BB72
	// succ:  l0040BB27 l0040BB72
l0040BB27:
	rArg0 = 0
	rLoc1 = Mem0[esp + 0x00000010:real64]
	FPUF = cond(rLoc1 - rLoc1)
	SCZO = FPUF
	branch Test(GE,FPUF) l0040BB6E
	// succ:  l0040BB36 l0040BB6E
l0040BB36:
	v19 = rLoc1
	rLoc1 = rArg0
	rArg0 = v19
	FPUF = cond(rLoc1 - rLoc1)
	SCZO = FPUF
	ax = (word16) FPUF << 8
	edx = (int32) Mem0[esi:byte]
	v21 = rArg0
	rArg0 = rArg1
	rArg1 = v21
	eax = Mem0[esp + 0x00000020:word32]
	esp = esp - 0x00000010
	SCZO = cond(esp)
	Mem0[esp + 0x00000008:real64] = rArg0
	Mem0[esp:real64] = rArg1
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004119E0 (retsize: 4; FPU: -2;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4; FPU: -2;)
	esp = esp + 0x00000024
	SCZO = cond(esp)
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000008
	SCZO = cond(esp)
	return
	// succ:  fn0040B9E0_exit
l0040BB6E:
	rArg0 = rLoc1
	rArg1 = rArg0
	// succ:  l0040BB72
l0040BB72:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041730C
	rArg1 = rArg1
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4; FPU: -2;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4; FPU: -2;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000008
	SCZO = cond(esp)
	return
	// succ:  fn0040B9E0_exit
fn0040B9E0_exit:


// fn0040BBA0
// Return size: 4
void fn0040BBA0()
fn0040BBA0_entry:
	// succ:  l0040BBA0
l0040BBA0:
	esp = fp
	esp = esp - 0x00000014
	SCZO = cond(esp)
	eax = Mem0[0x0041C340:word32]
	eax = eax ^ esp
	SZO = cond(eax)
	C = false
	Mem0[esp + 0x00000010:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = Mem0[esp + 0x00000020:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000020:word32]
	SZO = cond(Mem0[esi + 0x00000068:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0040BC0A
	// succ:  l0040BBBE l0040BC0A
l0040BBBE:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041741C
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l0040BBCC
l0040BBCC:
	eax = Mem0[esi + 0x00000068:word32]
	SZO = cond(al & 0x04)
	C = false
	branch Test(EQ,Z) l0040BBD9
	// succ:  l0040BBD3 l0040BBD9
l0040BBD3:
	eax = eax | 0x00000008
	SZO = cond(eax)
	C = false
	Mem0[esi + 0x00000068:word32] = eax
	// succ:  l0040BBD9
l0040BBD9:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp + 0x0000002C:word32]
	SCZO = cond(edi - 0x00000007)
	branch Test(EQ,Z) l0040BC41
	// succ:  l0040BBE3 l0040BC41
l0040BBE3:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417400
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp + 0x00000010:word32]
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x00000014
	SCZO = cond(esp)
	return
	// succ:  fn0040BBA0_exit
l0040BC0A:
	SZO = cond(ebx & ebx)
	C = false
	branch Test(EQ,Z) l0040BBCC
	// succ:  l0040BC0E l0040BBCC
l0040BC0E:
	SZO = cond(Mem0[ebx + 0x00000008:word32] & 0x00000200)
	C = false
	branch Test(EQ,Z) l0040BBCC
	// succ:  l0040BC17 l0040BBCC
l0040BC17:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004173E8
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	eax = Mem0[esp + 0x00000030:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp + 0x00000010:word32]
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x00000014
	SCZO = cond(esp)
	return
	// succ:  fn0040BBA0_exit
l0040BC41:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000007
	ecx = esp + 0x00000018
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408CA0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000014
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0040BCA7
	// succ:  l0040BC5D l0040BCA7
l0040BC5D:
	edx = (word32) Mem0[esp + 0x0000001A:byte]
	eax = (word32) Mem0[esp + 0x00000019:byte]
	cl = Mem0[esp + 0x00000018:byte]
	Mem0[esp + 0x00000011:byte] = al
	eax = (word32) Mem0[esp + 0x00000016:byte]
	Mem0[esp + 0x00000012:byte] = dl
	edx = (word32) Mem0[esp + 0x00000017:byte]
	Mem0[esp + 0x00000010:byte] = cl
	ecx = esp + 0x00000014
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	Mem0[esp + 0x00000013:byte] = dl
	Mem0[esp + 0x00000012:byte] = al
	call fn00408C80 (retsize: 4;)
	edx = esp + 0x00000010
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	Mem0[esp + 0x0000001C:word16] = ax
	call fn00411F00 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	// succ:  l0040BCA7
l0040BCA7:
	ecx = Mem0[esp + 0x0000001C:word32]
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x00000014
	SCZO = cond(esp)
	return
	// succ:  fn0040BBA0_exit
fn0040BBA0_exit:


// fn0040BCC0
// Return size: 4
void fn0040BCC0()
fn0040BCC0_entry:
	// succ:  l0040BCC0
l0040BCC0:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp + 0x00000010:word32]
	SZO = cond(Mem0[edi + 0x00000068:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0040BCDB
	// succ:  l0040BCCD l0040BCDB
l0040BCCD:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004174B0
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l0040BCDB
l0040BCDB:
	eax = Mem0[edi + 0x00000068:word32]
	SZO = cond(al & 0x04)
	C = false
	branch Test(EQ,Z) l0040BCE8
	// succ:  l0040BCE2 l0040BCE8
l0040BCE2:
	eax = eax | 0x00000008
	SZO = cond(eax)
	C = false
	Mem0[edi + 0x00000068:word32] = eax
	// succ:  l0040BCE8
l0040BCE8:
	esi = Mem0[esp + 0x00000018:word32]
	eax = esi + 0x00000001
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408C20 (retsize: 4;)
	ebx = eax
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SZO = cond(ebx & ebx)
	C = false
	branch Test(NE,Z) l0040BD11
	// succ:  l0040BCFF l0040BD11
l0040BCFF:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041748C
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040BCC0_exit
l0040BD11:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408CA0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000014
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040BD36
	// succ:  l0040BD28 l0040BD36
l0040BD28:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040BCC0_exit
l0040BD36:
	eax = ebx + esi
	Mem0[eax:byte] = 0x00
	SCZO = cond(Mem0[ebx:byte] - 0x00)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = ebx
	branch Test(EQ,Z) l0040BD4D
	// succ:  l0040BD44 l0040BD4D
l0040BD44:
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	SCZO = cond(Mem0[ebp + 0x00000000:byte] - 0x00)
	branch Test(NE,Z) l0040BD44
	// succ:  l0040BD4D l0040BD44
l0040BD4D:
	SCZO = cond(ebp - eax)
	branch Test(EQ,Z) l0040BD54
	// succ:  l0040BD51 l0040BD54
l0040BD51:
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	// succ:  l0040BD54
l0040BD54:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000010
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408C20 (retsize: 4;)
	esi = eax
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SZO = cond(esi & esi)
	C = false
	branch Test(NE,Z) l0040BD7F
	// succ:  l0040BD65 l0040BD7F
l0040BD65:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417460
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040BCC0_exit
l0040BD7F:
	eax = ebp
	Mem0[esi:word32] = 0xFFFFFFFF
	Mem0[esi + 0x00000004:word32] = ebx
	Mem0[esi + 0x00000008:word32] = ebp
	edx = eax + 0x00000001
	// succ:  l0040BD90
l0040BD90:
	cl = Mem0[eax:byte]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	SZO = cond(cl & cl)
	C = false
	branch Test(NE,Z) l0040BD90
	// succ:  l0040BD99 l0040BD90
l0040BD99:
	ecx = Mem0[esp + 0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000001
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	eax = eax - edx
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	Mem0[esi + 0x0000000C:word32] = eax
	call fn00411D10 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	ebp = eax
	call fn00408BF0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4;)
	esp = esp + 0x00000020
	SCZO = cond(esp)
	SZO = cond(ebp & ebp)
	C = false
	branch Test(EQ,Z) l0040BDD1
	// succ:  l0040BDC3 l0040BDD1
l0040BDC3:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417434
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l0040BDD1
l0040BDD1:
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040BCC0_exit
fn0040BCC0_exit:


// fn0040BDE0
// Return size: 4
void fn0040BDE0()
fn0040BDE0_entry:
	// succ:  l0040BDE0
l0040BDE0:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp + 0x00000010:word32]
	SZO = cond(Mem0[edi + 0x00000068:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0040BDFB
	// succ:  l0040BDED l0040BDFB
l0040BDED:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041758C
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l0040BDFB
l0040BDFB:
	eax = Mem0[edi + 0x00000068:word32]
	SZO = cond(al & 0x04)
	C = false
	branch Test(EQ,Z) l0040BE08
	// succ:  l0040BE02 l0040BE08
l0040BE02:
	eax = eax | 0x00000008
	SZO = cond(eax)
	C = false
	Mem0[edi + 0x00000068:word32] = eax
	// succ:  l0040BE08
l0040BE08:
	esi = Mem0[esp + 0x00000018:word32]
	eax = esi + 0x00000001
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408C20 (retsize: 4;)
	ebx = eax
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SZO = cond(ebx & ebx)
	C = false
	branch Test(NE,Z) l0040BE31
	// succ:  l0040BE1F l0040BE31
l0040BE1F:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417564
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040BDE0_exit
l0040BE31:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408CA0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00409D50 (retsize: 4;)
	esp = esp + 0x00000014
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040BE56
	// succ:  l0040BE48 l0040BE56
l0040BE48:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040BDE0_exit
l0040BE56:
	eax = ebx + esi
	Mem0[eax:byte] = 0x00
	SCZO = cond(Mem0[ebx:byte] - 0x00)
	esi = ebx
	branch Test(EQ,Z) l0040BE6B
	// succ:  l0040BE63 l0040BE6B
l0040BE63:
	esi = esi + 0x00000001
	SCZO = cond(esi)
	SCZO = cond(Mem0[esi:byte] - 0x00)
	branch Test(NE,Z) l0040BE63
	// succ:  l0040BE6B l0040BE63
l0040BE6B:
	SCZO = cond(esi - eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	branch Test(NE,Z) l0040BE83
	// succ:  l0040BE70 l0040BE83
l0040BE70:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041754C
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	ebp = ebp | 0xFFFFFFFF
	SZO = cond(ebp)
	C = false
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	goto l0040BEA1
	// succ:  l0040BEA1
l0040BE83:
	ebp = (int32) Mem0[esi + 0x00000001:byte]
	esi = esi + 0x00000001
	SCZO = cond(esi)
	SZO = cond(ebp & ebp)
	C = false
	branch Test(EQ,Z) l0040BE9E
	// succ:  l0040BE8E l0040BE9E
l0040BE8E:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417524
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	ebp = ebp ^ ebp
	SZO = cond(ebp)
	C = false
	// succ:  l0040BE9E
l0040BE9E:
	esi = esi + 0x00000001
	SCZO = cond(esi)
	// succ:  l0040BEA1
l0040BEA1:
	edx = Mem0[esp + 0x0000001C:word32]
	ecx = esp + 0x0000001C
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esi = esi - ebx
	SCZO = cond(esi)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	Mem0[esp + 0x0000002C:word32] = esi
	call fn00408D40 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000010
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	ebx = eax
	call fn00408C20 (retsize: 4;)
	esi = eax
	esp = esp + 0x00000020
	SCZO = cond(esp)
	SZO = cond(esi & esi)
	C = false
	branch Test(NE,Z) l0040BEE7
	// succ:  l0040BECD l0040BEE7
l0040BECD:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004174F8
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040BDE0_exit
l0040BEE7:
	edx = Mem0[esp + 0x00000018:word32]
	eax = Mem0[esp + 0x00000014:word32]
	ecx = Mem0[esp + 0x0000001C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000001
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	eax = eax + ebx
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	Mem0[esi:word32] = ebp
	Mem0[esi + 0x00000004:word32] = ebx
	Mem0[esi + 0x00000008:word32] = eax
	Mem0[esi + 0x0000000C:word32] = ecx
	call fn00411D10 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	ebp = eax
	call fn00408BF0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4;)
	esp = esp + 0x00000020
	SCZO = cond(esp)
	SZO = cond(ebp & ebp)
	C = false
	branch Test(EQ,Z) l0040BF2F
	// succ:  l0040BF21 l0040BF2F
l0040BF21:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004174CC
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l0040BF2F
l0040BF2F:
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040BDE0_exit
fn0040BDE0_exit:


// fn0040BF40
// Return size: 4
void fn0040BF40()
fn0040BF40_entry:
	// succ:  l0040BF40
l0040BF40:
	esp = fp
	esp = esp - 0x00000020
	SCZO = cond(esp)
	eax = Mem0[0x0041C340:word32]
	eax = eax ^ esp
	SZO = cond(eax)
	C = false
	Mem0[esp + 0x0000001C:word32] = eax
	eax = Mem0[esp + 0x00000028:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp + 0x00000030:word32]
	ebx = Mem0[edi + 0x00000068:word32]
	SZO = cond(bl & 0x04)
	C = false
	Mem0[esp + 0x0000000C:word32] = eax
	Mem0[esp + 0x00000010:word32] = 0x00000000
	branch Test(EQ,Z) l0040C004
	// succ:  l0040BF71 l0040C004
l0040BF71:
	eax = 0x00000004
	ecx = 0x00416414
	edx = edi + 0x0000011C
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	// succ:  l0040BF82
l0040BF82:
	esi = Mem0[edx:word32]
	SCZO = cond(esi - Mem0[ecx:word32])
	branch Test(NE,Z) l0040BF9A
	// succ:  l0040BF88 l0040BF9A
l0040BF88:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l0040BF82
	// succ:  l0040BF96 l0040BF82
l0040BF96:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040BFF7
	// succ:  l0040BF9A l0040BFF7
l0040BF9A:
	esi = (word32) Mem0[edx:byte]
	ebp = (word32) Mem0[ecx:byte]
	esi = esi - ebp
	SCZO = cond(esi)
	branch Test(NE,Z) l0040BFE9
	// succ:  l0040BFA4 l0040BFE9
l0040BFA4:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040BFF7
	// succ:  l0040BFB1 l0040BFF7
l0040BFB1:
	esi = (word32) Mem0[edx:byte]
	ebp = (word32) Mem0[ecx:byte]
	esi = esi - ebp
	SCZO = cond(esi)
	branch Test(NE,Z) l0040BFE9
	// succ:  l0040BFBB l0040BFE9
l0040BFBB:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040BFF7
	// succ:  l0040BFC8 l0040BFF7
l0040BFC8:
	esi = (word32) Mem0[edx:byte]
	ebp = (word32) Mem0[ecx:byte]
	esi = esi - ebp
	SCZO = cond(esi)
	branch Test(NE,Z) l0040BFE9
	// succ:  l0040BFD2 l0040BFE9
l0040BFD2:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040BFF7
	// succ:  l0040BFDF l0040BFF7
l0040BFDF:
	esi = (word32) Mem0[edx:byte]
	ecx = (word32) Mem0[ecx:byte]
	esi = esi - ecx
	SCZO = cond(esi)
	branch Test(EQ,Z) l0040BFF7
	// succ:  l0040BFE9 l0040BFF7
l0040BFE9:
	SZO = cond(esi & esi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l0040BFF9
	// succ:  l0040BFF2 l0040BFF9
l0040BFF2:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l0040BFF9
	// succ:  l0040BFF9
l0040BFF7:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l0040BFF9
l0040BFF9:
	SZO = cond(eax & eax)
	C = false
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	branch Test(EQ,Z) l0040C004
	// succ:  l0040BFFE l0040C004
l0040BFFE:
	ebx = ebx | 0x00000008
	SZO = cond(ebx)
	C = false
	Mem0[edi + 0x00000068:word32] = ebx
	// succ:  l0040C004
l0040C004:
	esi = edi + 0x0000011C
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004090D0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SZO = cond(Mem0[esi:byte] & 0x20)
	C = false
	branch Test(NE,Z) l0040C03F
	// succ:  l0040C019 l0040C03F
l0040C019:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004082A0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SCZO = cond(eax - 0x00000003)
	branch Test(EQ,Z) l0040C03F
	// succ:  l0040C028 l0040C03F
l0040C028:
	SCZO = cond(Mem0[edi + 0x0000021C:word32] - 0x00000000)
	branch Test(NE,Z) l0040C03F
	// succ:  l0040C031 l0040C03F
l0040C031:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004175A8
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408850 (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l0040C03F
l0040C03F:
	SZO = cond(Mem0[edi + 0x0000006C:word32] & 0x00008000)
	C = false
	branch Test(EQ,Z) l0040C0FB
	// succ:  l0040C04C l0040C0FB
l0040C04C:
	edx = esp + 0x00000014
	eax = esi
	edx = edx - esi
	SCZO = cond(edx)
	// succ:  l0040C054
l0040C054:
	cl = Mem0[eax:byte]
	Mem0[edx + eax:byte] = cl
	eax = eax + 0x00000001
	SCZO = cond(eax)
	SZO = cond(cl & cl)
	C = false
	branch Test(NE,Z) l0040C054
	// succ:  l0040C060 l0040C054
l0040C060:
	ebx = Mem0[esp + 0x00000038:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BA0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	Mem0[esp + 0x00000030:word32] = eax
	Mem0[esp + 0x00000034:word32] = ebx
	call fn00408CA0 (retsize: 4;)
	eax = Mem0[edi + 0x0000021C:word32]
	esp = esp + 0x00000014
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040C0D2
	// succ:  l0040C088 l0040C0D2
l0040C088:
	edx = esp + 0x00000014
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call eax (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l0040C0E7
	// succ:  l0040C097 l0040C0E7
l0040C097:
	SZO = cond(Mem0[esi:byte] & 0x20)
	C = false
	branch Test(NE,Z) l0040C0C4
	// succ:  l0040C09C l0040C0C4
l0040C09C:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004082A0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SCZO = cond(eax - 0x00000003)
	branch Test(EQ,Z) l0040C0C4
	// succ:  l0040C0AB l0040C0C4
l0040C0AB:
	eax = Mem0[esp + 0x0000001C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004175A8
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408850 (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	esp = esp + 0x00000010
	SCZO = cond(esp)
	// succ:  l0040C0C4
l0040C0C4:
	edx = Mem0[esp + 0x0000000C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000001
	ecx = esp + 0x00000018
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	goto l0040C0DE
	// succ:  l0040C0DE
l0040C0D2:
	ecx = Mem0[esp + 0x0000000C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000001
	eax = esp + 0x00000018
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	// succ:  l0040C0DE
l0040C0DE:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00412100 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	// succ:  l0040C0E7
l0040C0E7:
	edx = Mem0[esp + 0x0000001C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4;)
	eax = Mem0[esp + 0x00000018:word32]
	esp = esp + 0x00000008
	SCZO = cond(esp)
	goto l0040C0FF
	// succ:  l0040C0FF
l0040C0FB:
	eax = Mem0[esp + 0x00000038:word32]
	// succ:  l0040C0FF
l0040C0FF:
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00409D50 (retsize: 4;)
	ecx = Mem0[esp + 0x00000030:word32]
	esp = esp + 0x00000008
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x00000020
	SCZO = cond(esp)
	return
	// succ:  fn0040BF40_exit
fn0040BF40_exit:


// fn0040C120
// Return size: 4
void fn0040C120()
fn0040C120_entry:
	// succ:  l0040C120
l0040C120:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000010:word32]
	ebp = 0x00000001
	v6 = Mem0[esi + 0x000000E4:word32] + ebp
	Mem0[esi + 0x000000E4:word32] = v6
	SCZO = cond(v6)
	eax = Mem0[esi + 0x000000E4:word32]
	SCZO = cond(eax - Mem0[esi + 0x000000D0:word32])
	branch Test(ULT,C) l0040C3FF
	// succ:  l0040C144 l0040C3FF
l0040C144:
	SCZO = cond(Mem0[esi + 0x00000123:byte] - 0x00)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	branch Test(EQ,Z) l0040C222
	// succ:  l0040C153 l0040C222
l0040C153:
	eax = Mem0[esi + 0x000000D8:word32]
	ecx = Mem0[esi + 0x000000E8:word32]
	eax = eax + ebp
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	Mem0[esi + 0x000000E4:word32] = 0x00000000
	call fn00408B10 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	// succ:  l0040C180
l0040C180:
	v13 = Mem0[esi + 0x00000124:byte] + 0x01
	Mem0[esi + 0x00000124:byte] = v13
	SCZO = cond(v13)
	bl = Mem0[esi + 0x00000124:byte]
	SCZO = cond(bl - 0x07)
	branch Test(UGE,C) l0040C222
	// succ:  l0040C196 l0040C222
l0040C196:
	edx = Mem0[esi + 0x000000C8:word32]
	edi = (word32) bl
	edi = edi + edi
	SCZO = cond(edi)
	edx = edx - Mem0[(edi + 0x004164B4) + edi:word32]
	SCZO = cond(edx)
	ecx = Mem0[edi + 0x004164D0 + edi:word32]
	edi = edi + edi
	SCZO = cond(edi)
	eax = edx - 0x00000001 + ecx
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	edx = edx_eax % ecx
	eax = edx_eax /u ecx
	SCZO = cond(eax)
	cl = Mem0[esi + 0x00000129:byte]
	SCZO = cond(cl - 0x08)
	ecx = (word32) cl
	Mem0[esi + 0x000000E0:word32] = eax
	branch Test(ULT,C) l0040C1D5
	// succ:  l0040C1CD l0040C1D5
l0040C1CD:
	ecx = ecx >>u 0x00000003
	SCZO = cond(ecx)
	ecx = ecx *s eax
	SCZO = cond(ecx)
	goto l0040C1DE
	// succ:  l0040C1DE
l0040C1D5:
	ecx = ecx *s eax
	SCZO = cond(ecx)
	ecx = ecx + 0x00000007
	SCZO = cond(ecx)
	ecx = ecx >>u 0x00000003
	SCZO = cond(ecx)
	// succ:  l0040C1DE
l0040C1DE:
	ecx = ecx + ebp
	SCZO = cond(ecx)
	SZO = cond(Mem0[esi + 0x00000070:byte] & 0x02)
	C = false
	Mem0[esi + 0x000000DC:word32] = ecx
	branch Test(NE,Z) l0040C219
	// succ:  l0040C1EC l0040C219
l0040C1EC:
	eax = Mem0[esi + 0x000000CC:word32]
	eax = eax - Mem0[edi + 0x004164EC:word32]
	SCZO = cond(eax)
	ecx = Mem0[edi + 0x00416508:word32]
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	eax = eax - 0x00000001 + ecx
	edx = edx_eax % ecx
	eax = edx_eax /u ecx
	SCZO = cond(eax)
	SCZO = cond(Mem0[esi + 0x000000E0:word32] - 0x00000000)
	Mem0[esi + 0x000000D0:word32] = eax
	branch Test(EQ,Z) l0040C180
	// succ:  l0040C219 l0040C180
l0040C219:
	SCZO = cond(bl - 0x07)
	branch Test(ULT,C) l0040C3FD
	// succ:  l0040C222 l0040C3FD
l0040C222:
	SZO = cond(Mem0[esi + 0x0000006C:byte] & 0x20)
	C = false
	branch Test(NE,Z) l0040C3D0
	SZO = cond(Mem0[esi + 0x0000006C:byte] & 0x20)
	C = false
	branch Test(NE,Z) l0040C3D0
	// succ:  l0040C22C l0040C3D0
l0040C22C:
	ecx = esp + 0x00000018
	Mem0[esi + 0x00000080:word32] = ecx
	Mem0[esi + 0x00000084:word32] = ebp
	edi = esi + 0x00000074
	ecx = esp + 0x00000018
	Mem0[esi + 0x00000080:word32] = ecx
	Mem0[esi + 0x00000084:word32] = ebp
	edi = esi + 0x00000074
	// succ:  l0040C240
l0040C240:
	SCZO = cond(Mem0[esi + 0x00000078:word32] - 0x00000000)
	branch Test(NE,Z) l0040C372
	SCZO = cond(Mem0[esi + 0x00000078:word32] - 0x00000000)
	branch Test(NE,Z) l0040C372
	// succ:  l0040C24A l0040C372
l0040C24A:
	SCZO = cond(Mem0[esi + 0x0000010C:word32] - 0x00000000)
	branch Test(NE,Z) l0040C33A
	SCZO = cond(Mem0[esi + 0x0000010C:word32] - 0x00000000)
	branch Test(NE,Z) l0040C33A
	// succ:  l0040C257 l0040C33A
l0040C257:
	ebp = esi + 0x0000011C
	ecx = ecx + 0x00000000
	ebp = esi + 0x0000011C
	ecx = ecx + 0x00000000
	// succ:  l0040C260
l0040C260:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000004
	edx = esp + 0x0000001C
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004088C0 (retsize: 4;)
	eax = esp + 0x00000024
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D20 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	Mem0[esi + 0x0000010C:word32] = eax
	call fn00407DD0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408CA0 (retsize: 4;)
	esp = esp + 0x0000002C
	SCZO = cond(esp)
	eax = 0x00000004
	ecx = 0x00416414
	edx = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D50 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000004
	edx = esp + 0x0000001C
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004088C0 (retsize: 4;)
	eax = esp + 0x00000024
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00409D20 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	Mem0[esi + 0x0000010C:word32] = eax
	call fn00407DD0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408CA0 (retsize: 4;)
	esp = esp + 0x0000002C
	SCZO = cond(esp)
	eax = 0x00000004
	ecx = 0x00416414
	edx = ebp
	// succ:  l0040C2A4
l0040C2A4:
	edi = Mem0[edx:word32]
	SCZO = cond(edi - Mem0[ecx:word32])
	branch Test(NE,Z) l0040C2BC
	// succ:  l0040C2AA l0040C2BC
l0040C2AA:
	eax = eax - 0x00000004
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000004
	SCZO = cond(edx)
	SCZO = cond(eax - 0x00000004)
	branch Test(UGE,C) l0040C2A4
	// succ:  l0040C2B8 l0040C2A4
l0040C2B8:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040C319
	// succ:  l0040C2BC l0040C319
l0040C2BC:
	ebx = (word32) Mem0[ecx:byte]
	edi = (word32) Mem0[edx:byte]
	edi = edi - ebx
	SCZO = cond(edi)
	branch Test(NE,Z) l0040C30B
	// succ:  l0040C2C6 l0040C30B
l0040C2C6:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040C319
	// succ:  l0040C2D3 l0040C319
l0040C2D3:
	ebx = (word32) Mem0[ecx:byte]
	edi = (word32) Mem0[edx:byte]
	edi = edi - ebx
	SCZO = cond(edi)
	branch Test(NE,Z) l0040C30B
	// succ:  l0040C2DD l0040C30B
l0040C2DD:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040C319
	// succ:  l0040C2EA l0040C319
l0040C2EA:
	ebx = (word32) Mem0[ecx:byte]
	edi = (word32) Mem0[edx:byte]
	edi = edi - ebx
	SCZO = cond(edi)
	branch Test(NE,Z) l0040C30B
	// succ:  l0040C2F4 l0040C30B
l0040C2F4:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040C319
	// succ:  l0040C301 l0040C319
l0040C301:
	ecx = (word32) Mem0[ecx:byte]
	edi = (word32) Mem0[edx:byte]
	edi = edi - ecx
	SCZO = cond(edi)
	branch Test(EQ,Z) l0040C319
	// succ:  l0040C30B l0040C319
l0040C30B:
	SZO = cond(edi & edi)
	C = false
	eax = 0x00000001
	branch Test(GT,SZO) l0040C31B
	// succ:  l0040C314 l0040C31B
l0040C314:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l0040C31B
	// succ:  l0040C31B
l0040C319:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l0040C31B
l0040C31B:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040C32D
	// succ:  l0040C31F l0040C32D
l0040C31F:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041639C
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l0040C32D
l0040C32D:
	SCZO = cond(Mem0[esi + 0x0000010C:word32] - 0x00000000)
	branch Test(EQ,Z) l0040C260
	// succ:  l0040C33A l0040C260
l0040C33A:
	eax = Mem0[esi + 0x000000B0:word32]
	ecx = Mem0[esi + 0x0000010C:word32]
	SCZO = cond(eax - ecx)
	edx = Mem0[esi + 0x000000AC:word32]
	edi = esi + 0x00000074
	Mem0[esi + 0x00000078:word32] = eax
	Mem0[edi:word32] = edx
	branch Test(ULE,CZ) l0040C35B
	// succ:  l0040C358 l0040C35B
l0040C358:
	Mem0[esi + 0x00000078:word32] = ecx
	// succ:  l0040C35B
l0040C35B:
	eax = Mem0[esi + 0x00000078:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408CA0 (retsize: 4;)
	ecx = Mem0[esi + 0x00000078:word32]
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	v20 = Mem0[esi + 0x0000010C:word32] - ecx
	Mem0[esi + 0x0000010C:word32] = v20
	SCZO = cond(v20)
	// succ:  l0040C372
l0040C372:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000001
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00412D50 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SCZO = cond(eax - 0x00000001)
	branch Test(EQ,Z) l0040C403
	// succ:  l0040C386 l0040C403
l0040C386:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040C3A3
	// succ:  l0040C38A l0040C3A3
l0040C38A:
	eax = Mem0[esi + 0x0000008C:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0040C399
	// succ:  l0040C394 l0040C399
l0040C394:
	eax = 0x004175F0
	// succ:  l0040C399
l0040C399:
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l0040C3A3
l0040C3A3:
	SCZO = cond(Mem0[esi + 0x00000084:word32] - 0x00000000)
	branch Test(NE,Z) l0040C240
	// succ:  l0040C3B0 l0040C240
l0040C3B0:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004175D8
	// succ:  l0040C3B5
l0040C3B5:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l0040C3BE
l0040C3BE:
	v22 = Mem0[esi + 0x00000068:word32] | 0x00000008
	Mem0[esi + 0x00000068:word32] = v22
	SZO = cond(Mem0[esi + 0x00000068:word32])
	C = false
	v23 = Mem0[esi + 0x0000006C:word32] | 0x00000020
	Mem0[esi + 0x0000006C:word32] = v23
	SZO = cond(Mem0[esi + 0x0000006C:word32])
	C = false
	Mem0[esi + 0x00000084:word32] = 0x00000000
	// succ:  l0040C3D0
l0040C3D0:
	SCZO = cond(Mem0[esi + 0x0000010C:word32] - 0x00000000)
	branch Test(NE,Z) l0040C3DF
	// succ:  l0040C3D9 l0040C3DF
l0040C3D9:
	SCZO = cond(Mem0[esi + 0x00000078:word32] - 0x00000000)
	branch Test(EQ,Z) l0040C3ED
	// succ:  l0040C3DF l0040C3ED
l0040C3DF:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004175C0
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l0040C3ED
l0040C3ED:
	edx = esi + 0x00000074
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call fn00412AF0 (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	v21 = Mem0[esi + 0x00000068:word32] | 0x00000008
	Mem0[esi + 0x00000068:word32] = v21
	SZO = cond(Mem0[esi + 0x00000068:word32])
	C = false
	// succ:  l0040C3FD
l0040C3FD:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l0040C3FF
l0040C3FF:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040C120_exit
l0040C403:
	SCZO = cond(Mem0[esi + 0x00000084:word32] - 0x00000000)
	branch Test(EQ,Z) l0040C41B
	// succ:  l0040C40C l0040C41B
l0040C40C:
	SCZO = cond(Mem0[esi + 0x00000078:word32] - 0x00000000)
	branch Test(NE,Z) l0040C41B
	// succ:  l0040C412 l0040C41B
l0040C412:
	SCZO = cond(Mem0[esi + 0x0000010C:word32] - 0x00000000)
	branch Test(EQ,Z) l0040C3BE
	// succ:  l0040C41B l0040C3BE
l0040C41B:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416370
	goto l0040C3B5
	// succ:  l0040C3B5
fn0040C120_exit:


// fn0040C430
// Return size: 4
void fn0040C430()
fn0040C430_entry:
	// succ:  l0040C430
l0040C430:
	esp = fp
	edx = Mem0[esp + 0x00000004:word32]
	al = Mem0[edx + 0x00000009:byte]
	SCZO = cond(al - 0x08)
	branch Test(UGE,C) l0040C56D
	// succ:  l0040C43F l0040C56D
l0040C43F:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	eax = (word32) al
	eax = eax - 0x00000001
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[edx:word32]
	branch Test(EQ,Z) l0040C505
	// succ:  l0040C451 l0040C505
l0040C451:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	branch Test(EQ,Z) l0040C4BC
	// succ:  l0040C456 l0040C4BC
l0040C456:
	eax = eax - 0x00000002
	SCZO = cond(eax)
	branch Test(NE,Z) l0040C54E
	// succ:  l0040C45F l0040C54E
l0040C45F:
	eax = Mem0[esp + 0x00000018:word32]
	ecx = edi - 0x00000001
	esi = ecx
	esi = esi >>u 0x00000001
	SCZO = cond(esi)
	esi = esi + eax
	SCZO = cond(esi)
	ebp = edi - 0x00000001 + eax
	ecx = ecx & 0x00000001
	SZO = cond(ecx)
	C = false
	eax = 0x00000001
	eax = eax - ecx
	SCZO = cond(eax)
	eax = eax + eax
	SCZO = cond(eax)
	eax = eax + eax
	SCZO = cond(eax)
	SZO = cond(edi & edi)
	C = false
	branch Test(ULE,CZ) l0040C54E
	// succ:  l0040C486 l0040C54E
l0040C486:
	Mem0[esp + 0x00000014:word32] = edi
	ebx = ebx + 0x00000000
	// succ:  l0040C490
l0040C490:
	bl = Mem0[esi:byte]
	cl = al
	bl = bl >>u cl
	SCZO = cond(bl)
	bl = bl & 0x0F
	SZO = cond(bl)
	C = false
	SCZO = cond(eax - 0x00000004)
	Mem0[ebp + 0x00000000:byte] = bl
	branch Test(NE,Z) l0040C4A8
	// succ:  l0040C4A1 l0040C4A8
l0040C4A1:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	esi = esi - 0x00000001
	SCZO = cond(esi)
	goto l0040C4AD
	// succ:  l0040C4AD
l0040C4A8:
	eax = 0x00000004
	// succ:  l0040C4AD
l0040C4AD:
	ebp = ebp - 0x00000001
	SCZO = cond(ebp)
	v18 = Mem0[esp + 0x00000014:word32] - 0x00000001
	Mem0[esp + 0x00000014:word32] = v18
	SCZO = cond(v18)
	branch Test(NE,Z) l0040C490
	// succ:  l0040C4B7 l0040C490
l0040C4B7:
	goto l0040C54E
	// succ:  l0040C54E
l0040C4BC:
	eax = Mem0[esp + 0x00000018:word32]
	ecx = edi - 0x00000001
	esi = ecx
	esi = esi >>u 0x00000002
	SCZO = cond(esi)
	esi = esi + eax
	SCZO = cond(esi)
	ebp = edi - 0x00000001 + eax
	ecx = ecx & 0x00000003
	SZO = cond(ecx)
	C = false
	eax = 0x00000003
	eax = eax - ecx
	SCZO = cond(eax)
	eax = eax + eax
	SCZO = cond(eax)
	SZO = cond(edi & edi)
	C = false
	branch Test(ULE,CZ) l0040C54E
	// succ:  l0040C4DE l0040C54E
l0040C4DE:
	edx = edi
	// succ:  l0040C4E0
l0040C4E0:
	bl = Mem0[esi:byte]
	cl = al
	bl = bl >>u cl
	SCZO = cond(bl)
	bl = bl & 0x03
	SZO = cond(bl)
	C = false
	SCZO = cond(eax - 0x00000006)
	Mem0[ebp + 0x00000000:byte] = bl
	branch Test(NE,Z) l0040C4F8
	// succ:  l0040C4F1 l0040C4F8
l0040C4F1:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	esi = esi - 0x00000001
	SCZO = cond(esi)
	goto l0040C4FB
	// succ:  l0040C4FB
l0040C4F8:
	eax = eax + 0x00000002
	SCZO = cond(eax)
	// succ:  l0040C4FB
l0040C4FB:
	ebp = ebp - 0x00000001
	SCZO = cond(ebp)
	edx = edx - 0x00000001
	SCZO = cond(edx)
	branch Test(NE,Z) l0040C4E0
	// succ:  l0040C503 l0040C4E0
l0040C503:
	goto l0040C54A
	// succ:  l0040C54A
l0040C505:
	eax = Mem0[esp + 0x00000018:word32]
	ecx = edi - 0x00000001
	esi = ecx
	esi = esi >>u 0x00000003
	SCZO = cond(esi)
	esi = esi + eax
	SCZO = cond(esi)
	ebp = edi - 0x00000001 + eax
	ecx = ecx & 0x00000007
	SZO = cond(ecx)
	C = false
	eax = 0x00000007
	eax = eax - ecx
	SCZO = cond(eax)
	SZO = cond(edi & edi)
	C = false
	branch Test(ULE,CZ) l0040C54E
	// succ:  l0040C525 l0040C54E
l0040C525:
	edx = edi
	// succ:  l0040C527
l0040C527:
	bl = Mem0[esi:byte]
	cl = al
	bl = bl >>u cl
	SCZO = cond(bl)
	bl = bl & 0x01
	SZO = cond(bl)
	C = false
	SCZO = cond(eax - 0x00000007)
	Mem0[ebp + 0x00000000:byte] = bl
	branch Test(NE,Z) l0040C53F
	// succ:  l0040C538 l0040C53F
l0040C538:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	esi = esi - 0x00000001
	SCZO = cond(esi)
	goto l0040C542
	// succ:  l0040C542
l0040C53F:
	eax = eax + 0x00000001
	SCZO = cond(eax)
	// succ:  l0040C542
l0040C542:
	ebp = ebp - 0x00000001
	SCZO = cond(ebp)
	edx = edx - 0x00000001
	SCZO = cond(edx)
	branch Test(NE,Z) l0040C527
	// succ:  l0040C54A l0040C527
l0040C54A:
	edx = Mem0[esp + 0x00000014:word32]
	// succ:  l0040C54E
l0040C54E:
	al = Mem0[edx + 0x0000000A:byte]
	cl = al
	cl = cl + cl
	SCZO = cond(cl)
	cl = cl + cl
	SCZO = cond(cl)
	eax = (word32) al
	cl = cl + cl
	SCZO = cond(cl)
	eax = eax *s edi
	SCZO = cond(eax)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[edx + 0x00000009:byte] = 0x08
	Mem0[edx + 0x0000000B:byte] = cl
	Mem0[edx + 0x00000004:word32] = eax
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l0040C56D
l0040C56D:
	return
	// succ:  fn0040C430_exit
fn0040C430_exit:


// fn0040C570
// Return size: 4
void fn0040C570()
fn0040C570_entry:
	// succ:  l0040C570
l0040C570:
	esp = fp
	edx = Mem0[esp + 0x00000004:word32]
	esp = esp - 0x00000010
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	bl = Mem0[edx + 0x00000008:byte]
	SCZO = cond(bl - 0x03)
	branch Test(EQ,Z) l0040C71A
	// succ:  l0040C584 l0040C71A
l0040C584:
	ecx = Mem0[esp + 0x00000020:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = Mem0[edx:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	SZO = cond(bl & 0x02)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	Mem0[esp + 0x00000024:word32] = esi
	branch Test(EQ,Z) l0040C5C8
	// succ:  l0040C598 l0040C5C8
l0040C598:
	eax = (word32) Mem0[edx + 0x00000009:byte]
	esi = (word32) Mem0[ecx:byte]
	edi = eax
	edi = edi - esi
	SCZO = cond(edi)
	esi = (word32) Mem0[ecx + 0x00000001:byte]
	Mem0[esp + 0x00000010:word32] = edi
	edi = eax
	edi = edi - esi
	SCZO = cond(edi)
	esi = (word32) Mem0[ecx + 0x00000002:byte]
	eax = eax - esi
	SCZO = cond(eax)
	esi = Mem0[esp + 0x00000024:word32]
	Mem0[esp + 0x00000014:word32] = edi
	Mem0[esp + 0x00000018:word32] = eax
	edi = 0x00000003
	goto l0040C5DB
	// succ:  l0040C5DB
l0040C5C8:
	eax = (word32) Mem0[ecx + 0x00000003:byte]
	edi = (word32) Mem0[edx + 0x00000009:byte]
	edi = edi - eax
	SCZO = cond(edi)
	Mem0[esp + 0x00000010:word32] = edi
	edi = 0x00000001
	// succ:  l0040C5DB
l0040C5DB:
	SZO = cond(bl & 0x04)
	C = false
	branch Test(EQ,Z) l0040C5F1
	// succ:  l0040C5E0 l0040C5F1
l0040C5E0:
	ecx = (word32) Mem0[ecx + 0x00000004:byte]
	eax = (word32) Mem0[edx + 0x00000009:byte]
	eax = eax - ecx
	SCZO = cond(eax)
	Mem0[esp + 0x00000010 + edi * 0x00000004:word32] = eax
	edi = edi + 0x00000001
	SCZO = cond(edi)
	// succ:  l0040C5F1
l0040C5F1:
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SCZO = cond(edi - ecx)
	branch Test(LE,SZO) l0040C717
	// succ:  l0040C5FD l0040C717
l0040C5FD:
	ecx = ecx + 0x00000000
	// succ:  l0040C600
l0040C600:
	SCZO = cond(Mem0[esp + 0x00000010 + eax * 0x00000004:word32] - ecx)
	branch Test(GT,SZO) l0040C60C
	// succ:  l0040C606 l0040C60C
l0040C606:
	Mem0[esp + 0x00000010 + eax * 0x00000004:word32] = ecx
	goto l0040C611
	// succ:  l0040C611
l0040C60C:
	esi = 0x00000001
	// succ:  l0040C611
l0040C611:
	eax = eax + 0x00000001
	SCZO = cond(eax)
	SCZO = cond(eax - edi)
	branch Test(LT,SO) l0040C600
	// succ:  l0040C618 l0040C600
l0040C618:
	SCZO = cond(si - cx)
	branch Test(EQ,Z) l0040C717
	// succ:  l0040C621 l0040C717
l0040C621:
	eax = (word32) Mem0[edx + 0x00000009:byte]
	eax = eax + 0xFFFFFFFE
	SCZO = cond(eax)
	SCZO = cond(eax - 0x0000000E)
	branch Test(UGT,CZ) l0040C717
	// succ:  l0040C631 l0040C717
l0040C631:
	eax = (word32) Mem0[eax + 0x0040C734:byte]
	switch (eax) { l0040C63F l0040C717 l0040C669 l0040C717 l0040C717 l0040C717 l0040C6AB l0040C717 l0040C717 l0040C717 l0040C717 l0040C717 l0040C717 l0040C717 l0040C6D7 }
	// succ:  l0040C63F l0040C717 l0040C669 l0040C717 l0040C717 l0040C717 l0040C6AB l0040C717 l0040C717 l0040C717 l0040C717 l0040C717 l0040C717 l0040C717 l0040C6D7
l0040C63F:
	edx = Mem0[edx + 0x00000004:word32]
	SCZO = cond(edx - ecx)
	eax = Mem0[esp + 0x00000028:word32]
	branch Test(ULE,CZ) l0040C717
	// succ:  l0040C64E l0040C717
l0040C64E:
	edi = edi
	// succ:  l0040C650
l0040C650:
	cl = Mem0[eax:byte]
	cl = cl >>u 0x01
	SCZO = cond(cl)
	cl = cl & 0x55
	SZO = cond(cl)
	C = false
	Mem0[eax:byte] = cl
	eax = eax + 0x00000001
	SCZO = cond(eax)
	edx = edx - 0x00000001
	SCZO = cond(edx)
	branch Test(NE,Z) l0040C650
	// succ:  l0040C661 l0040C650
l0040C661:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000010
	SCZO = cond(esp)
	return
	// succ:  fn0040C570_exit
l0040C669:
	edi = Mem0[edx + 0x00000004:word32]
	edx = Mem0[esp + 0x00000010:word32]
	esi = Mem0[esp + 0x00000028:word32]
	ecx = edx
	eax = 0x000000F0
	eax = eax >> cl
	SCZO = cond(eax)
	ebx = 0x0000000F
	ebx = ebx >> cl
	SCZO = cond(ebx)
	al = al & 0xF0
	SZO = cond(al)
	C = false
	al = al | bl
	SZO = cond(al)
	C = false
	SZO = cond(edi & edi)
	C = false
	branch Test(ULE,CZ) l0040C717
	// succ:  l0040C690 l0040C717
l0040C690:
	bl = Mem0[esi:byte]
	cl = dl
	bl = bl >>u cl
	SCZO = cond(bl)
	esi = esi + 0x00000001
	SCZO = cond(esi)
	bl = bl & al
	SZO = cond(bl)
	C = false
	edi = edi - 0x00000001
	SCZO = cond(edi)
	Mem0[esi - 0x00000001:byte] = bl
	branch Test(NE,Z) l0040C690
	// succ:  l0040C6A3 l0040C690
l0040C6A3:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000010
	SCZO = cond(esp)
	return
	// succ:  fn0040C570_exit
l0040C6AB:
	esi = Mem0[esp + 0x00000028:word32]
	ebp = ebp *s edi
	SCZO = cond(ebp)
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	SZO = cond(ebp & ebp)
	C = false
	branch Test(ULE,CZ) l0040C717
	// succ:  l0040C6B8 l0040C717
l0040C6B8:
	eax = ebx
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	edx = edx_eax % edi
	eax = edx_eax /u edi
	SCZO = cond(eax)
	ebx = ebx + 0x00000001
	SCZO = cond(ebx)
	esi = esi + 0x00000001
	SCZO = cond(esi)
	cl = Mem0[esp + 0x00000010 + edx * 0x04:byte]
	v25 = Mem0[esi - 0x00000001:byte] >>u cl
	Mem0[esi - 0x00000001:byte] = v25
	SCZO = cond(v25)
	SCZO = cond(ebx - ebp)
	branch Test(ULT,C) l0040C6B8
	// succ:  l0040C6CF l0040C6B8
l0040C6CF:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000010
	SCZO = cond(esp)
	return
	// succ:  fn0040C570_exit
l0040C6D7:
	esi = Mem0[esp + 0x00000028:word32]
	ebp = ebp *s edi
	SCZO = cond(ebp)
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	SZO = cond(ebp & ebp)
	C = false
	branch Test(ULE,CZ) l0040C717
	// succ:  l0040C6E4 l0040C717
l0040C6E4:
	eax = ebx
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	edx = edx_eax % edi
	eax = edx_eax /u edi
	SCZO = cond(eax)
	ax = (word16) Mem0[esi:byte]
	ecx = (word32) Mem0[esi + 0x00000001:byte]
	ax = ax << 0x0008
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	esi = esi + 0x00000001
	SCZO = cond(esi)
	ebx = ebx + 0x00000001
	SCZO = cond(ebx)
	esi = esi + 0x00000001
	SCZO = cond(esi)
	ecx = (word32) Mem0[esp + 0x00000010 + edx * 0x0004:word16]
	ax = ax >>u cl
	SCZO = cond(ax)
	SCZO = cond(ebx - ebp)
	eax = (word32) ax
	Mem0[esi - 0x00000002:byte] = ah
	Mem0[esi - 0x00000001:byte] = al
	branch Test(ULT,C) l0040C6E4
	// succ:  l0040C717 l0040C6E4
l0040C717:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l0040C71A
l0040C71A:
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000010
	SCZO = cond(esp)
	return
	// succ:  fn0040C570_exit
fn0040C570_exit:


// fn0040C750
// Return size: 4
void fn0040C750()
fn0040C750_entry:
	// succ:  l0040C750
l0040C750:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000008:word32]
	SCZO = cond(Mem0[esi + 0x00000009:byte] - 0x10)
	branch Test(NE,Z) l0040C79B
	// succ:  l0040C75B l0040C79B
l0040C75B:
	edx = (word32) Mem0[esi + 0x0000000A:byte]
	edx = edx *s Mem0[esi:word32]
	SCZO = cond(edx)
	SZO = cond(edx & edx)
	C = false
	eax = Mem0[esp + 0x0000000C:word32]
	ecx = eax
	branch Test(ULE,CZ) l0040C780
	// succ:  l0040C76C l0040C780
l0040C76C:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = edx
	// succ:  l0040C770
l0040C770:
	dl = Mem0[eax:byte]
	Mem0[ecx:byte] = dl
	eax = eax + 0x00000002
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edi = edi - 0x00000001
	SCZO = cond(edi)
	branch Test(NE,Z) l0040C770
	// succ:  l0040C77F l0040C770
l0040C77F:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l0040C780
l0040C780:
	al = Mem0[esi + 0x0000000A:byte]
	cl = al
	cl = cl + cl
	SCZO = cond(cl)
	cl = cl + cl
	SCZO = cond(cl)
	edx = (word32) al
	cl = cl + cl
	SCZO = cond(cl)
	edx = edx *s Mem0[esi:word32]
	SCZO = cond(edx)
	Mem0[esi + 0x00000009:byte] = 0x08
	Mem0[esi + 0x0000000B:byte] = cl
	Mem0[esi + 0x00000004:word32] = edx
	// succ:  l0040C79B
l0040C79B:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040C750_exit
fn0040C750_exit:


// fn0040C7A0
// Return size: 4
void fn0040C7A0()
fn0040C7A0_entry:
	// succ:  l0040C7A0
l0040C7A0:
	esp = fp
	eax = Mem0[esp + 0x00000004:word32]
	cl = Mem0[eax + 0x00000008:byte]
	SCZO = cond(cl - 0x06)
	edx = Mem0[eax:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	branch Test(NE,Z) l0040C893
	// succ:  l0040C7B4 l0040C893
l0040C7B4:
	SCZO = cond(Mem0[eax + 0x00000009:byte] - 0x08)
	eax = Mem0[eax + 0x00000004:word32]
	branch Test(NE,Z) l0040C808
	// succ:  l0040C7BD l0040C808
l0040C7BD:
	eax = eax + Mem0[esp + 0x00000010:word32]
	SCZO = cond(eax)
	SZO = cond(edx & edx)
	C = false
	ecx = eax
	branch Test(ULE,CZ) l0040C91C
	// succ:  l0040C7CB l0040C91C
l0040C7CB:
	esi = edx
	ecx = ecx + 0x00000000
	// succ:  l0040C7D0
l0040C7D0:
	dl = Mem0[eax - 0x00000001:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ebx = (word32) Mem0[eax - 0x00000001:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[ecx - 0x00000001:byte] = bl
	ebx = (word32) Mem0[eax - 0x00000001:byte]
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	Mem0[ecx:byte] = bl
	ebx = (word32) Mem0[eax - 0x00000001:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	Mem0[ecx:byte] = bl
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	esi = esi - 0x00000001
	SCZO = cond(esi)
	Mem0[ecx:byte] = dl
	branch Test(NE,Z) l0040C7D0
	// succ:  l0040C805 l0040C7D0
l0040C805:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040C7A0_exit
l0040C808:
	eax = eax + Mem0[esp + 0x00000010:word32]
	SCZO = cond(eax)
	SZO = cond(edx & edx)
	C = false
	ecx = eax
	branch Test(ULE,CZ) l0040C91C
	// succ:  l0040C816 l0040C91C
l0040C816:
	esi = edx
	// succ:  l0040C820
l0040C820:
	dl = Mem0[eax - 0x00000001:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ebx = (word32) Mem0[eax - 0x00000001:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[esp + 0x0000000D:byte] = bl
	ebx = (word32) Mem0[eax:byte]
	Mem0[ecx - 0x00000001:byte] = bl
	ebx = (word32) Mem0[eax - 0x00000001:byte]
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	Mem0[ecx - 0x00000001:byte] = bl
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ebx = (word32) Mem0[eax - 0x00000001:byte]
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	Mem0[ecx - 0x00000001:byte] = bl
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ebx = (word32) Mem0[eax - 0x00000001:byte]
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[ecx - 0x00000001:byte] = bl
	ebx = (word32) Mem0[eax - 0x00000001:byte]
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	Mem0[ecx:byte] = bl
	ebx = (word32) Mem0[eax - 0x00000001:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	Mem0[ecx:byte] = bl
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	Mem0[ecx:byte] = dl
	edx = (word32) Mem0[esp + 0x0000000D:byte]
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	esi = esi - 0x00000001
	SCZO = cond(esi)
	Mem0[ecx:byte] = dl
	branch Test(NE,Z) l0040C820
	// succ:  l0040C890 l0040C820
l0040C890:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040C7A0_exit
l0040C893:
	SCZO = cond(cl - 0x04)
	branch Test(NE,Z) l0040C91C
	// succ:  l0040C89C l0040C91C
l0040C89C:
	SCZO = cond(Mem0[eax + 0x00000009:byte] - 0x08)
	eax = Mem0[eax + 0x00000004:word32]
	branch Test(NE,Z) l0040C8CF
	// succ:  l0040C8A5 l0040C8CF
l0040C8A5:
	eax = eax + Mem0[esp + 0x00000010:word32]
	SCZO = cond(eax)
	SZO = cond(edx & edx)
	C = false
	ecx = eax
	branch Test(ULE,CZ) l0040C91C
	// succ:  l0040C8AF l0040C91C
l0040C8AF:
	esi = edx
	// succ:  l0040C8B1
l0040C8B1:
	dl = Mem0[eax - 0x00000001:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	bl = Mem0[eax - 0x00000001:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	Mem0[ecx:byte] = bl
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	esi = esi - 0x00000001
	SCZO = cond(esi)
	Mem0[ecx:byte] = dl
	branch Test(NE,Z) l0040C8B1
	// succ:  l0040C8CC l0040C8B1
l0040C8CC:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040C7A0_exit
l0040C8CF:
	eax = eax + Mem0[esp + 0x00000010:word32]
	SCZO = cond(eax)
	SZO = cond(edx & edx)
	C = false
	ecx = eax
	branch Test(ULE,CZ) l0040C91C
	// succ:  l0040C8D9 l0040C91C
l0040C8D9:
	esi = edx
	// succ:  l0040C8E0
l0040C8E0:
	dl = Mem0[eax - 0x00000001:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ebx = (word32) Mem0[eax - 0x00000001:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[esp + 0x0000000D:byte] = bl
	ebx = (word32) Mem0[eax:byte]
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	Mem0[ecx:byte] = bl
	ebx = (word32) Mem0[eax - 0x00000001:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	Mem0[ecx:byte] = bl
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	Mem0[ecx:byte] = dl
	edx = (word32) Mem0[esp + 0x0000000D:byte]
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	esi = esi - 0x00000001
	SCZO = cond(esi)
	Mem0[ecx:byte] = dl
	branch Test(NE,Z) l0040C8E0
	// succ:  l0040C91C l0040C8E0
l0040C91C:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040C7A0_exit fn0040C7A0_exit
fn0040C7A0_exit:


// fn0040C920
// Return size: 4
void fn0040C920()
fn0040C920_entry:
	// succ:  l0040C920
l0040C920:
	esp = fp
	eax = Mem0[esp + 0x00000004:word32]
	cl = Mem0[eax + 0x00000008:byte]
	SCZO = cond(cl - 0x06)
	edx = Mem0[eax:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	branch Test(NE,Z) l0040C988
	// succ:  l0040C92F l0040C988
l0040C92F:
	SCZO = cond(Mem0[eax + 0x00000009:byte] - 0x08)
	eax = Mem0[eax + 0x00000004:word32]
	branch Test(NE,Z) l0040C959
	// succ:  l0040C938 l0040C959
l0040C938:
	eax = eax + Mem0[esp + 0x0000000C:word32]
	SCZO = cond(eax)
	SZO = cond(edx & edx)
	C = false
	branch Test(ULE,CZ) l0040C9EF
	// succ:  l0040C944 l0040C9EF
l0040C944:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	cl = cl | 0xFF
	SZO = cond(cl)
	C = false
	cl = cl - Mem0[eax:byte]
	SCZO = cond(cl)
	eax = eax - 0x00000003
	SCZO = cond(eax)
	edx = edx - 0x00000001
	SCZO = cond(edx)
	Mem0[eax + 0x00000003:byte] = cl
	branch Test(NE,Z) l0040C944
	// succ:  l0040C957 l0040C944
l0040C957:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040C920_exit
l0040C959:
	eax = eax + Mem0[esp + 0x0000000C:word32]
	SCZO = cond(eax)
	SZO = cond(edx & edx)
	C = false
	branch Test(ULE,CZ) l0040C9EF
	// succ:  l0040C965 l0040C9EF
l0040C965:
	esi = edx
	// succ:  l0040C967
l0040C967:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	dl = dl | 0xFF
	SZO = cond(dl)
	C = false
	dl = dl - Mem0[eax:byte]
	SCZO = cond(dl)
	ecx = eax
	Mem0[ecx:byte] = dl
	eax = eax - 0x00000001
	SCZO = cond(eax)
	dl = dl | 0xFF
	SZO = cond(dl)
	C = false
	dl = dl - Mem0[eax:byte]
	SCZO = cond(dl)
	eax = eax - 0x00000006
	SCZO = cond(eax)
	esi = esi - 0x00000001
	SCZO = cond(esi)
	Mem0[ecx - 0x00000001:byte] = dl
	branch Test(NE,Z) l0040C967
	// succ:  l0040C986 l0040C967
l0040C986:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040C920_exit
l0040C988:
	SCZO = cond(cl - 0x04)
	branch Test(NE,Z) l0040C9EF
	// succ:  l0040C98D l0040C9EF
l0040C98D:
	SCZO = cond(Mem0[eax + 0x00000009:byte] - 0x08)
	eax = Mem0[eax + 0x00000004:word32]
	branch Test(NE,Z) l0040C9C1
	// succ:  l0040C996 l0040C9C1
l0040C996:
	eax = eax + Mem0[esp + 0x0000000C:word32]
	SCZO = cond(eax)
	SZO = cond(edx & edx)
	C = false
	ecx = eax
	branch Test(ULE,CZ) l0040C9EF
	// succ:  l0040C9A0 l0040C9EF
l0040C9A0:
	esi = edx
	// succ:  l0040C9A2
l0040C9A2:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	dl = dl | 0xFF
	SZO = cond(dl)
	C = false
	dl = dl - Mem0[eax:byte]
	SCZO = cond(dl)
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	Mem0[ecx:byte] = dl
	dl = Mem0[eax - 0x00000001:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	esi = esi - 0x00000001
	SCZO = cond(esi)
	Mem0[ecx:byte] = dl
	branch Test(NE,Z) l0040C9A2
	// succ:  l0040C9BF l0040C9A2
l0040C9BF:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040C920_exit
l0040C9C1:
	eax = eax + Mem0[esp + 0x0000000C:word32]
	SCZO = cond(eax)
	SZO = cond(edx & edx)
	C = false
	branch Test(ULE,CZ) l0040C9EF
	// succ:  l0040C9C9 l0040C9EF
l0040C9C9:
	esi = edx
	// succ:  l0040C9D0
l0040C9D0:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	dl = dl | 0xFF
	SZO = cond(dl)
	C = false
	dl = dl - Mem0[eax:byte]
	SCZO = cond(dl)
	ecx = eax
	Mem0[ecx:byte] = dl
	eax = eax - 0x00000001
	SCZO = cond(eax)
	dl = dl | 0xFF
	SZO = cond(dl)
	C = false
	dl = dl - Mem0[eax:byte]
	SCZO = cond(dl)
	eax = eax - 0x00000002
	SCZO = cond(eax)
	esi = esi - 0x00000001
	SCZO = cond(esi)
	Mem0[ecx - 0x00000001:byte] = dl
	branch Test(NE,Z) l0040C9D0
	// succ:  l0040C9EF l0040C9D0
l0040C9EF:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040C920_exit
fn0040C920_exit:


// fn0040CA00
// Return size: 4
void fn0040CA00()
fn0040CA00_entry:
	// succ:  l0040CA00
l0040CA00:
	esp = fp
	edx = Mem0[esp + 0x0000000C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = Mem0[esp + 0x0000000C:word32]
	al = Mem0[ebp + 0x00000008:byte]
	ebx = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[ebp + 0x00000000:word32]
	ebx = ebx >>u 0x00000008
	SCZO = cond(ebx)
	SZO = cond(al & al)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	Mem0[esp + 0x00000014:byte] = bl
	branch Test(NE,Z) l0040CB53
	// succ:  l0040CA23 l0040CB53
l0040CA23:
	al = Mem0[ebp + 0x00000009:byte]
	SCZO = cond(al - 0x08)
	branch Test(NE,Z) l0040CA9C
	// succ:  l0040CA2A l0040CA9C
l0040CA2A:
	SZO = cond(Mem0[esp + 0x00000020:byte] & 0x80)
	C = false
	eax = Mem0[esp + 0x00000018:word32]
	edi = esi + eax
	eax = edi + esi
	branch Test(EQ,Z) l0040CA6E
	// succ:  l0040CA3B l0040CA6E
l0040CA3B:
	SCZO = cond(esi - 0x00000001)
	branch Test(ULE,CZ) l0040CA58
	// succ:  l0040CA40 l0040CA58
l0040CA40:
	ecx = esi - 0x00000001
	// succ:  l0040CA43
l0040CA43:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = dl
	bl = Mem0[edi - 0x00000001:byte]
	edi = edi - 0x00000001
	SCZO = cond(edi)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	Mem0[eax:byte] = bl
	branch Test(NE,Z) l0040CA43
	// succ:  l0040CA58 l0040CA43
l0040CA58:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[eax - 0x00000001:byte] = dl
	ecx = esi + esi
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[ebp + 0x0000000A:byte] = 0x02
	Mem0[ebp + 0x0000000B:byte] = 0x10
	Mem0[ebp + 0x00000004:word32] = ecx
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040CA00_exit
l0040CA6E:
	SZO = cond(esi & esi)
	C = false
	branch Test(ULE,CZ) l0040CA89
	// succ:  l0040CA72 l0040CA89
l0040CA72:
	ecx = esi
	// succ:  l0040CA74
l0040CA74:
	bl = Mem0[edi - 0x00000001:byte]
	edi = edi - 0x00000001
	SCZO = cond(edi)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = bl
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	Mem0[eax:byte] = dl
	branch Test(NE,Z) l0040CA74
	// succ:  l0040CA89 l0040CA74
l0040CA89:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = esi + esi
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[ebp + 0x0000000A:byte] = 0x02
	Mem0[ebp + 0x0000000B:byte] = 0x10
	Mem0[ebp + 0x00000004:word32] = ecx
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040CA00_exit
l0040CA9C:
	SCZO = cond(al - 0x10)
	branch Test(NE,Z) l0040CD14
	// succ:  l0040CAA4 l0040CD14
l0040CAA4:
	SZO = cond(Mem0[esp + 0x00000020:byte] & 0x80)
	C = false
	eax = Mem0[esp + 0x00000018:word32]
	edi = eax + esi * 0x00000002
	eax = edi + esi * 0x00000002
	branch Test(EQ,Z) l0040CB0B
	// succ:  l0040CAB5 l0040CB0B
l0040CAB5:
	SCZO = cond(esi - 0x00000001)
	branch Test(ULE,CZ) l0040CAEB
	// succ:  l0040CABA l0040CAEB
l0040CABA:
	ecx = esi - 0x00000001
	Mem0[esp + 0x00000014:word32] = ecx
	// succ:  l0040CAC1
l0040CAC1:
	Mem0[eax - 0x00000001:byte] = bl
	eax = eax - 0x00000001
	SCZO = cond(eax)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = dl
	ecx = (word32) Mem0[edi - 0x00000001:byte]
	edi = edi - 0x00000001
	SCZO = cond(edi)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = cl
	ecx = (word32) Mem0[edi - 0x00000001:byte]
	edi = edi - 0x00000001
	SCZO = cond(edi)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	v19 = Mem0[esp + 0x00000014:word32] - 0x00000001
	Mem0[esp + 0x00000014:word32] = v19
	SCZO = cond(v19)
	Mem0[eax:byte] = cl
	branch Test(NE,Z) l0040CAC1
	// succ:  l0040CAEB l0040CAC1
l0040CAEB:
	Mem0[eax - 0x00000001:byte] = bl
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax - 0x00000001:byte] = dl
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = 0x00000000 + esi * 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[ebp + 0x0000000A:byte] = 0x02
	Mem0[ebp + 0x0000000B:byte] = 0x20
	Mem0[ebp + 0x00000004:word32] = edx
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040CA00_exit
l0040CB0B:
	SZO = cond(esi & esi)
	C = false
	branch Test(ULE,CZ) l0040CB3C
	// succ:  l0040CB0F l0040CB3C
l0040CB0F:
	Mem0[esp + 0x00000014:word32] = esi
	// succ:  l0040CB13
l0040CB13:
	ecx = (word32) Mem0[edi - 0x00000001:byte]
	edi = edi - 0x00000001
	SCZO = cond(edi)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = cl
	ecx = (word32) Mem0[edi - 0x00000001:byte]
	edi = edi - 0x00000001
	SCZO = cond(edi)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = cl
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = bl
	eax = eax - 0x00000001
	SCZO = cond(eax)
	v20 = Mem0[esp + 0x00000014:word32] - 0x00000001
	Mem0[esp + 0x00000014:word32] = v20
	SCZO = cond(v20)
	Mem0[eax:byte] = dl
	branch Test(NE,Z) l0040CB13
	// succ:  l0040CB3C l0040CB13
l0040CB3C:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = 0x00000000 + esi * 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[ebp + 0x0000000A:byte] = 0x02
	Mem0[ebp + 0x0000000B:byte] = 0x20
	Mem0[ebp + 0x00000004:word32] = edx
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040CA00_exit
l0040CB53:
	SCZO = cond(al - 0x02)
	branch Test(NE,Z) l0040CD14
	// succ:  l0040CB5B l0040CD14
l0040CB5B:
	al = Mem0[ebp + 0x00000009:byte]
	SCZO = cond(al - 0x08)
	branch Test(NE,Z) l0040CC06
	// succ:  l0040CB66 l0040CC06
l0040CB66:
	eax = Mem0[esp + 0x00000018:word32]
	edi = eax + esi * 0x00000002
	edi = edi + esi
	SCZO = cond(edi)
	SZO = cond(Mem0[esp + 0x00000020:byte] & 0x80)
	C = false
	eax = edi + esi
	branch Test(EQ,Z) l0040CBB5
	// succ:  l0040CB79 l0040CBB5
l0040CB79:
	SCZO = cond(esi - 0x00000001)
	branch Test(ULE,CZ) l0040CBB0
	// succ:  l0040CB7E l0040CBB0
l0040CB7E:
	ecx = esi - 0x00000001
	// succ:  l0040CB81
l0040CB81:
	Mem0[eax - 0x00000001:byte] = dl
	ebx = (word32) Mem0[edi - 0x00000001:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	edi = edi - 0x00000001
	SCZO = cond(edi)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = bl
	ebx = (word32) Mem0[edi - 0x00000001:byte]
	edi = edi - 0x00000001
	SCZO = cond(edi)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = bl
	ebx = (word32) Mem0[edi - 0x00000001:byte]
	edi = edi - 0x00000001
	SCZO = cond(edi)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	Mem0[eax:byte] = bl
	branch Test(NE,Z) l0040CB81
	// succ:  l0040CBB0 l0040CB81
l0040CBB0:
	Mem0[eax - 0x00000001:byte] = dl
	goto l0040CBEF
	// succ:  l0040CBEF
l0040CBB5:
	SZO = cond(esi & esi)
	C = false
	branch Test(ULE,CZ) l0040CBEF
	// succ:  l0040CBB9 l0040CBEF
l0040CBB9:
	ecx = esi
	// succ:  l0040CBC0
l0040CBC0:
	ebx = (word32) Mem0[edi - 0x00000001:byte]
	edi = edi - 0x00000001
	SCZO = cond(edi)
	Mem0[eax - 0x00000001:byte] = bl
	ebx = (word32) Mem0[edi - 0x00000001:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	edi = edi - 0x00000001
	SCZO = cond(edi)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = bl
	ebx = (word32) Mem0[edi - 0x00000001:byte]
	edi = edi - 0x00000001
	SCZO = cond(edi)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = bl
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	Mem0[eax:byte] = dl
	branch Test(NE,Z) l0040CBC0
	// succ:  l0040CBEF l0040CBC0
l0040CBEF:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = 0x00000000 + esi * 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[ebp + 0x0000000A:byte] = 0x04
	Mem0[ebp + 0x0000000B:byte] = 0x20
	Mem0[ebp + 0x00000004:word32] = ecx
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = 0x00000000 + esi * 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[ebp + 0x0000000A:byte] = 0x04
	Mem0[ebp + 0x0000000B:byte] = 0x20
	Mem0[ebp + 0x00000004:word32] = ecx
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040CA00_exit fn0040CA00_exit
l0040CC06:
	SCZO = cond(al - 0x10)
	branch Test(NE,Z) l0040CD14
	// succ:  l0040CC0E l0040CD14
l0040CC0E:
	SZO = cond(Mem0[esp + 0x00000020:byte] & 0x80)
	C = false
	ecx = Mem0[esp + 0x00000018:word32]
	eax = esi + esi * 0x00000002
	ecx = ecx + eax * 0x00000002
	eax = ecx + esi * 0x00000002
	branch Test(EQ,Z) l0040CC9B
	// succ:  l0040CC26 l0040CC9B
l0040CC26:
	SCZO = cond(esi - 0x00000001)
	branch Test(ULE,CZ) l0040CC91
	// succ:  l0040CC2B l0040CC91
l0040CC2B:
	edi = esi - 0x00000001
	edi = edi
	// succ:  l0040CC30
l0040CC30:
	Mem0[eax - 0x00000001:byte] = bl
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax - 0x00000001:byte] = dl
	ebx = (word32) Mem0[ecx - 0x00000001:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax - 0x00000001:byte] = bl
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	ebx = (word32) Mem0[ecx - 0x00000001:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax - 0x00000001:byte] = bl
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	ebx = (word32) Mem0[ecx - 0x00000001:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	Mem0[eax - 0x00000001:byte] = bl
	ebx = (word32) Mem0[ecx - 0x00000001:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	Mem0[eax - 0x00000001:byte] = bl
	ebx = (word32) Mem0[ecx - 0x00000001:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = bl
	ebx = (word32) Mem0[ecx - 0x00000001:byte]
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	edi = edi - 0x00000001
	SCZO = cond(edi)
	Mem0[eax:byte] = bl
	bl = Mem0[esp + 0x00000014:byte]
	branch Test(NE,Z) l0040CC30
	// succ:  l0040CC91 l0040CC30
l0040CC91:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = bl
	Mem0[eax - 0x00000001:byte] = dl
	goto l0040CD02
	// succ:  l0040CD02
l0040CC9B:
	SZO = cond(esi & esi)
	C = false
	branch Test(ULE,CZ) l0040CD02
	// succ:  l0040CC9F l0040CD02
l0040CC9F:
	edi = esi
	// succ:  l0040CCA1
l0040CCA1:
	ebx = (word32) Mem0[ecx - 0x00000001:byte]
	Mem0[eax - 0x00000001:byte] = bl
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	ebx = (word32) Mem0[ecx - 0x00000001:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax - 0x00000001:byte] = bl
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	ebx = (word32) Mem0[ecx - 0x00000001:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax - 0x00000001:byte] = bl
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	ebx = (word32) Mem0[ecx - 0x00000001:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax - 0x00000001:byte] = bl
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	ebx = (word32) Mem0[ecx - 0x00000001:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	Mem0[eax - 0x00000001:byte] = bl
	ebx = (word32) Mem0[ecx - 0x00000001:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = bl
	ebx = (word32) Mem0[esp + 0x00000014:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = bl
	eax = eax - 0x00000001
	SCZO = cond(eax)
	edi = edi - 0x00000001
	SCZO = cond(edi)
	Mem0[eax:byte] = dl
	branch Test(NE,Z) l0040CCA1
	// succ:  l0040CD02 l0040CCA1
l0040CD02:
	edx = 0x00000000 + esi * 0x00000008
	Mem0[ebp + 0x0000000B:byte] = 0x40
	Mem0[ebp + 0x0000000A:byte] = 0x04
	Mem0[ebp + 0x00000004:word32] = edx
	edx = 0x00000000 + esi * 0x00000008
	Mem0[ebp + 0x0000000B:byte] = 0x40
	Mem0[ebp + 0x0000000A:byte] = 0x04
	Mem0[ebp + 0x00000004:word32] = edx
	// succ:  l0040CD14
l0040CD14:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040CA00_exit
fn0040CA00_exit:


// fn0040CD20
// Return size: 4
void fn0040CD20()
fn0040CD20_entry:
	// succ:  l0040CD20
l0040CD20:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = Mem0[esp + 0x00000008:word32]
	cl = Mem0[ebp + 0x00000009:byte]
	SCZO = cond(cl - 0x08)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[ebp + 0x00000000:word32]
	branch Test(ULT,C) l0040CED2
	// succ:  l0040CD35 l0040CED2
l0040CD35:
	al = Mem0[ebp + 0x00000008:byte]
	dl = 0x02
	SZO = cond(dl & al)
	C = false
	branch Test(NE,Z) l0040CED2
	// succ:  l0040CD42 l0040CED2
l0040CD42:
	SZO = cond(al & al)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	branch Test(NE,Z) l0040CDE5
	// succ:  l0040CD4C l0040CDE5
l0040CD4C:
	SCZO = cond(cl - 0x08)
	branch Test(NE,Z) l0040CD8B
	// succ:  l0040CD51 l0040CD8B
l0040CD51:
	SZO = cond(esi & esi)
	C = false
	eax = Mem0[esp + 0x00000018:word32]
	ecx = esi - 0x00000001 + eax
	eax = ecx + esi * 0x00000002
	branch Test(ULE,CZ) l0040CEA0
	// succ:  l0040CD64 l0040CEA0
l0040CD64:
	edi = esi
	// succ:  l0040CD66
l0040CD66:
	ebx = (word32) Mem0[ecx:byte]
	Mem0[eax:byte] = bl
	ebx = (word32) Mem0[ecx:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = bl
	ebx = (word32) Mem0[ecx:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = bl
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	edi = edi - 0x00000001
	SCZO = cond(edi)
	branch Test(NE,Z) l0040CD66
	// succ:  l0040CD86 l0040CD66
l0040CD86:
	goto l0040CEA0
	// succ:  l0040CEA0
l0040CD8B:
	SZO = cond(esi & esi)
	C = false
	ecx = Mem0[esp + 0x00000018:word32]
	ecx = ecx - 0x00000001 + esi * 0x00000002
	eax = ecx + esi * 0x00000004
	branch Test(ULE,CZ) l0040CEA0
	// succ:  l0040CD9E l0040CEA0
l0040CD9E:
	edi = esi
	// succ:  l0040CDA0
l0040CDA0:
	ebx = (word32) Mem0[ecx:byte]
	Mem0[eax:byte] = bl
	ebx = (word32) Mem0[ecx - 0x00000001:byte]
	Mem0[eax - 0x00000001:byte] = bl
	ebx = (word32) Mem0[ecx:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax - 0x00000001:byte] = bl
	ebx = (word32) Mem0[ecx - 0x00000001:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = bl
	ebx = (word32) Mem0[ecx:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = bl
	ebx = (word32) Mem0[ecx - 0x00000001:byte]
	ecx = ecx + 0xFFFFFFFF
	SCZO = cond(ecx)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = bl
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	edi = edi - 0x00000001
	SCZO = cond(edi)
	branch Test(NE,Z) l0040CDA0
	// succ:  l0040CDE0 l0040CDA0
l0040CDE0:
	goto l0040CEA0
	// succ:  l0040CEA0
l0040CDE5:
	SCZO = cond(al - 0x04)
	branch Test(NE,Z) l0040CEA0
	// succ:  l0040CDED l0040CEA0
l0040CDED:
	SCZO = cond(cl - 0x08)
	branch Test(NE,Z) l0040CE35
	// succ:  l0040CDF2 l0040CE35
l0040CDF2:
	SZO = cond(esi & esi)
	C = false
	eax = Mem0[esp + 0x00000018:word32]
	ecx = eax - 0x00000001 + esi * 0x00000002
	eax = ecx + esi * 0x00000002
	branch Test(ULE,CZ) l0040CEA0
	// succ:  l0040CE05 l0040CEA0
l0040CE05:
	edi = esi
	// succ:  l0040CE07
l0040CE07:
	ebx = (word32) Mem0[ecx:byte]
	Mem0[eax:byte] = bl
	ebx = (word32) Mem0[ecx - 0x00000001:byte]
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = bl
	ebx = (word32) Mem0[ecx:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = bl
	ebx = (word32) Mem0[ecx:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = bl
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	edi = edi - 0x00000001
	SCZO = cond(edi)
	branch Test(NE,Z) l0040CE07
	// succ:  l0040CE33 l0040CE07
l0040CE33:
	goto l0040CEA0
	// succ:  l0040CEA0
l0040CE35:
	SZO = cond(esi & esi)
	C = false
	ecx = Mem0[esp + 0x00000018:word32]
	ecx = ecx - 0x00000001 + esi * 0x00000004
	eax = ecx + esi * 0x00000004
	branch Test(ULE,CZ) l0040CEA0
	// succ:  l0040CE44 l0040CEA0
l0040CE44:
	edi = esi
	// succ:  l0040CE46
l0040CE46:
	ebx = (word32) Mem0[ecx:byte]
	Mem0[eax:byte] = bl
	ebx = (word32) Mem0[ecx - 0x00000001:byte]
	Mem0[eax - 0x00000001:byte] = bl
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	ebx = (word32) Mem0[ecx - 0x00000001:byte]
	Mem0[eax - 0x00000001:byte] = bl
	ebx = (word32) Mem0[ecx - 0x00000002:byte]
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax - 0x00000001:byte] = bl
	ebx = (word32) Mem0[ecx:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax - 0x00000001:byte] = bl
	ebx = (word32) Mem0[ecx - 0x00000001:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = bl
	ebx = (word32) Mem0[ecx:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = bl
	ebx = (word32) Mem0[ecx - 0x00000001:byte]
	ecx = ecx + 0xFFFFFFFF
	SCZO = cond(ecx)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = bl
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	edi = edi - 0x00000001
	SCZO = cond(edi)
	branch Test(NE,Z) l0040CE46
	// succ:  l0040CEA0 l0040CE46
l0040CEA0:
	v18 = Mem0[ebp + 0x0000000A:byte] + dl
	Mem0[ebp + 0x0000000A:byte] = v18
	SCZO = cond(v18)
	al = Mem0[ebp + 0x00000009:byte]
	cl = Mem0[ebp + 0x0000000A:byte]
	v19 = Mem0[ebp + 0x00000008:byte] | dl
	Mem0[ebp + 0x00000008:byte] = v19
	SZO = cond(Mem0[ebp + 0x00000008:byte])
	C = false
	ax = cl *s al
	SCZO = cond(ax)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[ebp + 0x0000000B:byte] = al
	SCZO = cond(al - 0x08)
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = (word32) al
	branch Test(ULT,C) l0040CEC6
	v21 = Mem0[ebp + 0x0000000A:byte] + dl
	Mem0[ebp + 0x0000000A:byte] = v21
	SCZO = cond(v21)
	al = Mem0[ebp + 0x00000009:byte]
	cl = Mem0[ebp + 0x0000000A:byte]
	v22 = Mem0[ebp + 0x00000008:byte] | dl
	Mem0[ebp + 0x00000008:byte] = v22
	SZO = cond(Mem0[ebp + 0x00000008:byte])
	C = false
	ax = cl *s al
	SCZO = cond(ax)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[ebp + 0x0000000B:byte] = al
	SCZO = cond(al - 0x08)
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = (word32) al
	branch Test(ULT,C) l0040CEC6
	// succ:  l0040CEBA l0040CEC6
l0040CEBA:
	eax = eax >>u 0x00000003
	SCZO = cond(eax)
	eax = eax *s esi
	SCZO = cond(eax)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[ebp + 0x00000004:word32] = eax
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	eax = eax >>u 0x00000003
	SCZO = cond(eax)
	eax = eax *s esi
	SCZO = cond(eax)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[ebp + 0x00000004:word32] = eax
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040CD20_exit fn0040CD20_exit
l0040CEC6:
	eax = eax *s esi
	SCZO = cond(eax)
	eax = eax + 0x00000007
	SCZO = cond(eax)
	eax = eax >>u 0x00000003
	SCZO = cond(eax)
	Mem0[ebp + 0x00000004:word32] = eax
	// succ:  l0040CED2
l0040CED2:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040CD20_exit
fn0040CD20_exit:


// fn0040CEE0
// Return size: 4
void fn0040CEE0()
fn0040CEE0_entry:
	// succ:  l0040CEE0
l0040CEE0:
	esp = fp
	esp = esp - 0x00000028
	SCZO = cond(esp)
	edx = Mem0[esp + 0x00000030:word32]
	ecx = Mem0[edx:word32]
	dl = Mem0[edx + 0x00000008:byte]
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SZO = cond(dl & 0x02)
	C = false
	Mem0[esp + 0x00000008:word32] = ecx
	Mem0[esp + 0x00000004:word32] = eax
	branch Test(EQ,Z) l0040D5D0
	// succ:  l0040CEFF l0040D5D0
l0040CEFF:
	SCZO = cond(dl - 0x02)
	eax = Mem0[esp + 0x0000002C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = (word32) Mem0[eax + 0x0000022E:word16]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = (word32) Mem0[eax + 0x0000022C:word16]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = (word32) Mem0[eax + 0x0000022A:word16]
	Mem0[esp + 0x00000030:word32] = edi
	Mem0[esp + 0x0000001C:word32] = esi
	Mem0[esp + 0x0000002C:word32] = ebx
	branch Test(NE,Z) l0040D24F
	// succ:  l0040CF31 l0040D24F
l0040CF31:
	edx = Mem0[esp + 0x00000040:word32]
	SCZO = cond(Mem0[edx + 0x00000009:byte] - 0x08)
	branch Test(NE,Z) l0040D08E
	// succ:  l0040CF3F l0040D08E
l0040CF3F:
	SCZO = cond(Mem0[eax + 0x00000168:word32] - 0x00000000)
	branch Test(EQ,Z) l0040D009
	// succ:  l0040CF4C l0040D009
l0040CF4C:
	SCZO = cond(Mem0[eax + 0x0000016C:word32] - 0x00000000)
	branch Test(EQ,Z) l0040D009
	// succ:  l0040CF59 l0040D009
l0040CF59:
	SZO = cond(ecx & ecx)
	C = false
	esi = Mem0[esp + 0x00000044:word32]
	Mem0[esp + 0x00000020:word32] = esi
	branch Test(ULE,CZ) l0040D253
	// succ:  l0040CF69 l0040D253
l0040CF69:
	Mem0[esp + 0x00000024:word32] = ecx
	ecx = ecx + 0x00000000
	// succ:  l0040CF70
l0040CF70:
	ecx = (word32) Mem0[esi:byte]
	ebp = Mem0[eax + 0x0000016C:word32]
	edx = (word32) Mem0[ecx + ebp:byte]
	ecx = (word32) Mem0[esi + 0x00000001:byte]
	cl = Mem0[ecx + ebp:byte]
	esi = esi + 0x00000001
	SCZO = cond(esi)
	esi = esi + 0x00000001
	SCZO = cond(esi)
	Mem0[esp + 0x00000012:byte] = dl
	edx = (word32) Mem0[esi:byte]
	edx = (word32) Mem0[edx + ebp:byte]
	Mem0[esp + 0x00000011:byte] = dl
	dl = Mem0[esp + 0x00000012:byte]
	esi = esi + 0x00000001
	SCZO = cond(esi)
	SCZO = cond(dl - cl)
	Mem0[esp + 0x00000013:byte] = cl
	branch Test(NE,Z) l0040CFBE
	// succ:  l0040CFA8 l0040CFBE
l0040CFA8:
	SCZO = cond(dl - Mem0[esp + 0x00000011:byte])
	branch Test(NE,Z) l0040CFBA
	// succ:  l0040CFAE l0040CFBA
l0040CFAE:
	cl = Mem0[esi - 0x00000001:byte]
	ebp = Mem0[esp + 0x00000020:word32]
	Mem0[ebp + 0x00000000:byte] = cl
	goto l0040CFF2
	// succ:  l0040CFF2
l0040CFBA:
	cl = Mem0[esp + 0x00000013:byte]
	// succ:  l0040CFBE
l0040CFBE:
	edx = (word32) Mem0[esp + 0x00000011:byte]
	ecx = (word32) cl
	edx = edx *s ebx
	SCZO = cond(edx)
	ecx = ecx *s Mem0[esp + 0x0000001C:word32]
	SCZO = cond(ecx)
	v18 = Mem0[esp + 0x00000014:word32] | 0x00000001
	Mem0[esp + 0x00000014:word32] = v18
	SZO = cond(Mem0[esp + 0x00000014:word32])
	C = false
	ebp = Mem0[esp + 0x00000020:word32]
	edx = edx + ecx
	SCZO = cond(edx)
	ecx = (word32) Mem0[esp + 0x00000012:byte]
	ecx = ecx *s edi
	SCZO = cond(ecx)
	edx = edx + ecx
	SCZO = cond(edx)
	ecx = Mem0[eax + 0x00000168:word32]
	edx = edx >>u 0x0000000F
	SCZO = cond(edx)
	dl = Mem0[edx + ecx:byte]
	Mem0[ebp + 0x00000000:byte] = dl
	// succ:  l0040CFF2
l0040CFF2:
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	v17 = Mem0[esp + 0x00000024:word32] - 0x00000001
	Mem0[esp + 0x00000024:word32] = v17
	SCZO = cond(v17)
	Mem0[esp + 0x00000020:word32] = ebp
	branch Test(NE,Z) l0040CF70
	// succ:  l0040D004 l0040CF70
l0040D004:
	goto l0040D24B
	// succ:  l0040D24B
l0040D009:
	SZO = cond(ecx & ecx)
	C = false
	esi = Mem0[esp + 0x00000044:word32]
	ebp = esi
	branch Test(ULE,CZ) l0040D24F
	// succ:  l0040D017 l0040D24F
l0040D017:
	Mem0[esp + 0x00000024:word32] = ecx
	// succ:  l0040D020
l0040D020:
	ecx = (word32) Mem0[esi:byte]
	esi = esi + 0x00000001
	SCZO = cond(esi)
	edx = (word32) Mem0[esi + 0x00000001:byte]
	Mem0[esp + 0x00000011:byte] = cl
	cl = Mem0[esi:byte]
	esi = esi + 0x00000001
	SCZO = cond(esi)
	Mem0[esp + 0x00000012:byte] = dl
	dl = Mem0[esp + 0x00000011:byte]
	esi = esi + 0x00000001
	SCZO = cond(esi)
	SCZO = cond(dl - cl)
	Mem0[esp + 0x00000013:byte] = cl
	branch Test(NE,Z) l0040D058
	// succ:  l0040D046 l0040D058
l0040D046:
	SCZO = cond(dl - Mem0[esp + 0x00000012:byte])
	branch Test(NE,Z) l0040D054
	// succ:  l0040D04C l0040D054
l0040D04C:
	cl = Mem0[esi - 0x00000001:byte]
	Mem0[ebp + 0x00000000:byte] = cl
	goto l0040D07F
	// succ:  l0040D07F
l0040D054:
	cl = Mem0[esp + 0x00000013:byte]
	// succ:  l0040D058
l0040D058:
	edx = (word32) Mem0[esp + 0x00000012:byte]
	ecx = (word32) cl
	edx = edx *s ebx
	SCZO = cond(edx)
	ecx = ecx *s Mem0[esp + 0x0000001C:word32]
	SCZO = cond(ecx)
	v30 = Mem0[esp + 0x00000014:word32] | 0x00000001
	Mem0[esp + 0x00000014:word32] = v30
	SZO = cond(Mem0[esp + 0x00000014:word32])
	C = false
	edx = edx + ecx
	SCZO = cond(edx)
	ecx = (word32) Mem0[esp + 0x00000011:byte]
	ecx = ecx *s edi
	SCZO = cond(ecx)
	edx = edx + ecx
	SCZO = cond(edx)
	edx = edx >>u 0x0000000F
	SCZO = cond(edx)
	Mem0[ebp + 0x00000000:byte] = dl
	// succ:  l0040D07F
l0040D07F:
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	v28 = Mem0[esp + 0x00000024:word32] - 0x00000001
	Mem0[esp + 0x00000024:word32] = v28
	SCZO = cond(v28)
	branch Test(NE,Z) l0040D020
	// succ:  l0040D089 l0040D020
l0040D089:
	goto l0040D24B
	// succ:  l0040D24B
l0040D08E:
	SCZO = cond(Mem0[eax + 0x00000178:word32] - 0x00000000)
	branch Test(EQ,Z) l0040D1BA
	// succ:  l0040D09B l0040D1BA
l0040D09B:
	SCZO = cond(Mem0[eax + 0x00000174:word32] - 0x00000000)
	branch Test(EQ,Z) l0040D1BA
	// succ:  l0040D0A8 l0040D1BA
l0040D0A8:
	SZO = cond(ecx & ecx)
	C = false
	edx = Mem0[esp + 0x00000044:word32]
	Mem0[esp + 0x00000020:word32] = edx
	branch Test(ULE,CZ) l0040D24F
	// succ:  l0040D0B8 l0040D24F
l0040D0B8:
	Mem0[esp + 0x00000028:word32] = ecx
	esp = esp + 0x00000000
	// succ:  l0040D0C0
l0040D0C0:
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	ch = Mem0[edx:byte]
	edx = edx + 0x00000002
	SCZO = cond(edx)
	edx = edx + 0x00000002
	SCZO = cond(edx)
	edx = edx + 0x00000002
	SCZO = cond(edx)
	Mem0[esp + 0x00000034:word32] = edx
	cl = Mem0[edx - 0x00000005:byte]
	ebp = (word32) cx
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	ch = Mem0[edx - 0x00000004:byte]
	cl = Mem0[edx - 0x00000003:byte]
	ecx = (word32) cx
	Mem0[esp + 0x00000024:word32] = ecx
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	SCZO = cond(bp - Mem0[esp + 0x00000024:word16])
	ch = Mem0[edx - 0x00000002:byte]
	cl = Mem0[edx - 0x00000001:byte]
	esi = (word32) cx
	branch Test(NE,Z) l0040D105
	// succ:  l0040D0F8 l0040D105
l0040D0F8:
	SCZO = cond(bp - si)
	branch Test(NE,Z) l0040D105
	// succ:  l0040D0FD l0040D105
l0040D0FD:
	ecx = (word32) bp
	goto l0040D191
	// succ:  l0040D191
l0040D105:
	ebx = (word32) Mem0[esp + 0x00000024:word16]
	ecx = (word32) Mem0[eax + 0x00000158:word16]
	Mem0[esp + 0x00000024:word32] = ebx
	ebx = (word32) bp
	ebp = (word32) bl
	ebp = ebp >>u cl
	SCZO = cond(ebp)
	edx = (word32) si
	esi = Mem0[eax + 0x00000178:word32]
	ebp = Mem0[esi + ebp * 0x00000004:word32]
	ebx = ebx >>u 0x00000008
	SCZO = cond(ebx)
	ebp = (word32) Mem0[ebp + 0x00000000 + ebx * 0x0002:word16]
	ebx = Mem0[esp + 0x00000024:word32]
	ebp = ebp *s edi
	SCZO = cond(ebp)
	edi = (word32) bl
	edi = edi >>u cl
	SCZO = cond(edi)
	ebx = ebx >>u 0x00000008
	SCZO = cond(ebx)
	edi = Mem0[esi + edi * 0x00000004:word32]
	edi = (word32) Mem0[edi + ebx * 0x0002:word16]
	edi = edi *s Mem0[esp + 0x0000001C:word32]
	SCZO = cond(edi)
	ebx = Mem0[esp + 0x0000002C:word32]
	ebp = ebp + edi
	SCZO = cond(ebp)
	edi = (word32) dl
	edi = edi >>u cl
	SCZO = cond(edi)
	edx = edx >>u 0x00000008
	SCZO = cond(edx)
	esi = Mem0[esi + edi * 0x00000004:word32]
	edx = (word32) Mem0[esi + edx * 0x0002:word16]
	edx = edx *s ebx
	SCZO = cond(edx)
	edi = Mem0[esp + 0x00000030:word32]
	ebp = ebp + edx
	SCZO = cond(ebp)
	ebp = ebp >>u 0x0000000F
	SCZO = cond(ebp)
	edx = (word32) bp
	edx = (word32) dx
	esi = (word32) dl
	esi = esi >>u cl
	SCZO = cond(esi)
	ecx = Mem0[eax + 0x00000174:word32]
	edx = edx >>u 0x00000008
	SCZO = cond(edx)
	v46 = Mem0[esp + 0x00000014:word32] | 0x00000001
	Mem0[esp + 0x00000014:word32] = v46
	SZO = cond(Mem0[esp + 0x00000014:word32])
	C = false
	ecx = Mem0[ecx + esi * 0x00000004:word32]
	ecx = (word32) Mem0[ecx + edx * 0x0002:word16]
	edx = Mem0[esp + 0x00000034:word32]
	// succ:  l0040D191
l0040D191:
	esi = Mem0[esp + 0x00000020:word32]
	v42 = Mem0[esp + 0x00000020:word32] + 0x00000001
	Mem0[esp + 0x00000020:word32] = v42
	SCZO = cond(v42)
	Mem0[esi:byte] = ch
	esi = Mem0[esp + 0x00000020:word32]
	Mem0[esi:byte] = cl
	ecx = 0x00000001
	v43 = Mem0[esp + 0x00000020:word32] + ecx
	Mem0[esp + 0x00000020:word32] = v43
	SCZO = cond(v43)
	v44 = Mem0[esp + 0x00000028:word32] - ecx
	Mem0[esp + 0x00000028:word32] = v44
	SCZO = cond(v44)
	branch Test(NE,Z) l0040D0C0
	// succ:  l0040D1B5 l0040D0C0
l0040D1B5:
	goto l0040D24B
	// succ:  l0040D24B
l0040D1BA:
	SZO = cond(ecx & ecx)
	C = false
	edx = Mem0[esp + 0x00000044:word32]
	esi = edx
	branch Test(ULE,CZ) l0040D24F
	// succ:  l0040D1C8 l0040D24F
l0040D1C8:
	Mem0[esp + 0x00000020:word32] = ecx
	esp = esp + 0x00000000
	// succ:  l0040D1D0
l0040D1D0:
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	ch = Mem0[edx:byte]
	edx = edx + 0x00000002
	SCZO = cond(edx)
	edx = edx + 0x00000002
	SCZO = cond(edx)
	edx = edx + 0x00000002
	SCZO = cond(edx)
	cl = Mem0[edx - 0x00000005:byte]
	ebp = (word32) cx
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	ch = Mem0[edx - 0x00000004:byte]
	Mem0[esp + 0x00000034:word32] = ebp
	cl = Mem0[edx - 0x00000003:byte]
	ecx = (word32) cx
	Mem0[esp + 0x00000024:word32] = ecx
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	SCZO = cond(bp - Mem0[esp + 0x00000024:word16])
	ch = Mem0[edx - 0x00000002:byte]
	cl = Mem0[edx - 0x00000001:byte]
	ecx = (word32) cx
	Mem0[esp + 0x00000028:word32] = ecx
	branch Test(NE,Z) l0040D211
	// succ:  l0040D20C l0040D211
l0040D20C:
	SCZO = cond(bp - cx)
	branch Test(EQ,Z) l0040D216
	// succ:  l0040D211 l0040D216
l0040D211:
	v41 = Mem0[esp + 0x00000014:word32] | 0x00000001
	Mem0[esp + 0x00000014:word32] = v41
	SZO = cond(Mem0[esp + 0x00000014:word32])
	C = false
	// succ:  l0040D216
l0040D216:
	ecx = (word32) Mem0[esp + 0x00000028:word16]
	ebp = (word32) Mem0[esp + 0x00000024:word16]
	ecx = ecx *s ebx
	SCZO = cond(ecx)
	ebp = ebp *s Mem0[esp + 0x0000001C:word32]
	SCZO = cond(ebp)
	ecx = ecx + ebp
	SCZO = cond(ecx)
	ebp = (word32) Mem0[esp + 0x00000034:word16]
	ebp = ebp *s edi
	SCZO = cond(ebp)
	ecx = ecx + ebp
	SCZO = cond(ecx)
	ecx = ecx >>u 0x0000000F
	SCZO = cond(ecx)
	ecx = (word32) cx
	Mem0[esi:byte] = ch
	esi = esi + 0x00000001
	SCZO = cond(esi)
	Mem0[esi:byte] = cl
	esi = esi + 0x00000001
	SCZO = cond(esi)
	v45 = Mem0[esp + 0x00000020:word32] - 0x00000001
	Mem0[esp + 0x00000020:word32] = v45
	SCZO = cond(v45)
	branch Test(NE,Z) l0040D1D0
	// succ:  l0040D24B l0040D1D0
l0040D24B:
	ecx = Mem0[esp + 0x00000018:word32]
	ecx = Mem0[esp + 0x00000018:word32]
	// succ:  l0040D24F
l0040D24F:
	esi = Mem0[esp + 0x00000044:word32]
	// succ:  l0040D253
l0040D253:
	edx = Mem0[esp + 0x00000040:word32]
	SCZO = cond(Mem0[edx + 0x00000008:byte] - 0x06)
	branch Test(NE,Z) l0040D589
	// succ:  l0040D261 l0040D589
l0040D261:
	SCZO = cond(Mem0[edx + 0x00000009:byte] - 0x08)
	branch Test(NE,Z) l0040D3A9
	// succ:  l0040D26B l0040D3A9
l0040D26B:
	SCZO = cond(Mem0[eax + 0x00000168:word32] - 0x00000000)
	branch Test(EQ,Z) l0040D330
	// succ:  l0040D278 l0040D330
l0040D278:
	SCZO = cond(Mem0[eax + 0x0000016C:word32] - 0x00000000)
	branch Test(EQ,Z) l0040D330
	// succ:  l0040D285 l0040D330
l0040D285:
	SCZO = cond(Mem0[esp + 0x00000018:word32] - 0x00000000)
	ebp = esi
	branch Test(ULE,CZ) l0040D585
	// succ:  l0040D292 l0040D585
l0040D292:
	edx = Mem0[esp + 0x00000018:word32]
	Mem0[esp + 0x00000028:word32] = edx
	ebx = ebx + 0x00000000
	// succ:  l0040D2A0
l0040D2A0:
	edx = (word32) Mem0[esi:byte]
	ecx = Mem0[eax + 0x0000016C:word32]
	edx = (word32) Mem0[edx + ecx:byte]
	esi = esi + 0x00000001
	SCZO = cond(esi)
	Mem0[esp + 0x00000013:byte] = dl
	edx = (word32) Mem0[esi:byte]
	edx = (word32) Mem0[edx + ecx:byte]
	esi = esi + 0x00000001
	SCZO = cond(esi)
	Mem0[esp + 0x00000011:byte] = dl
	edx = (word32) Mem0[esi:byte]
	ecx = (word32) Mem0[edx + ecx:byte]
	Mem0[esp + 0x00000012:byte] = cl
	cl = Mem0[esp + 0x00000013:byte]
	esi = esi + 0x00000001
	SCZO = cond(esi)
	SCZO = cond(cl - Mem0[esp + 0x00000011:byte])
	branch Test(NE,Z) l0040D2E0
	// succ:  l0040D2DA l0040D2E0
l0040D2DA:
	SCZO = cond(cl - Mem0[esp + 0x00000012:byte])
	branch Test(EQ,Z) l0040D2E5
	// succ:  l0040D2E0 l0040D2E5
l0040D2E0:
	v19 = Mem0[esp + 0x00000014:word32] | 0x00000001
	Mem0[esp + 0x00000014:word32] = v19
	SZO = cond(Mem0[esp + 0x00000014:word32])
	C = false
	// succ:  l0040D2E5
l0040D2E5:
	edx = (word32) Mem0[esp + 0x00000012:byte]
	ecx = (word32) Mem0[esp + 0x00000011:byte]
	edx = edx *s ebx
	SCZO = cond(edx)
	ecx = ecx *s Mem0[esp + 0x0000001C:word32]
	SCZO = cond(ecx)
	edx = edx + ecx
	SCZO = cond(edx)
	ecx = (word32) Mem0[esp + 0x00000013:byte]
	ecx = ecx *s edi
	SCZO = cond(ecx)
	edx = edx + ecx
	SCZO = cond(edx)
	ecx = Mem0[eax + 0x00000168:word32]
	edx = edx >>u 0x0000000F
	SCZO = cond(edx)
	dl = Mem0[edx + ecx:byte]
	Mem0[ebp + 0x00000000:byte] = dl
	cl = Mem0[esi:byte]
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	Mem0[ebp + 0x00000000:byte] = cl
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	esi = esi + 0x00000001
	SCZO = cond(esi)
	v24 = Mem0[esp + 0x00000028:word32] - 0x00000001
	Mem0[esp + 0x00000028:word32] = v24
	SCZO = cond(v24)
	branch Test(NE,Z) l0040D2A0
	// succ:  l0040D32B l0040D2A0
l0040D32B:
	goto l0040D585
	// succ:  l0040D585
l0040D330:
	SZO = cond(ecx & ecx)
	C = false
	eax = esi
	branch Test(ULE,CZ) l0040D589
	// succ:  l0040D33A l0040D589
l0040D33A:
	Mem0[esp + 0x00000028:word32] = ecx
	edi = edi
	// succ:  l0040D340
l0040D340:
	cl = Mem0[eax:byte]
	edx = (word32) Mem0[eax + 0x00000001:byte]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	eax = eax + 0x00000001
	SCZO = cond(eax)
	Mem0[esp + 0x00000012:byte] = dl
	edx = (word32) Mem0[eax:byte]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	SCZO = cond(cl - Mem0[esp + 0x00000012:byte])
	Mem0[esp + 0x00000011:byte] = cl
	Mem0[esp + 0x00000013:byte] = dl
	branch Test(NE,Z) l0040D368
	// succ:  l0040D364 l0040D368
l0040D364:
	SCZO = cond(cl - dl)
	branch Test(EQ,Z) l0040D36D
	// succ:  l0040D368 l0040D36D
l0040D368:
	v33 = Mem0[esp + 0x00000014:word32] | 0x00000001
	Mem0[esp + 0x00000014:word32] = v33
	SZO = cond(Mem0[esp + 0x00000014:word32])
	C = false
	// succ:  l0040D36D
l0040D36D:
	ecx = (word32) Mem0[esp + 0x00000013:byte]
	edx = (word32) Mem0[esp + 0x00000012:byte]
	ecx = ecx *s ebx
	SCZO = cond(ecx)
	edx = edx *s Mem0[esp + 0x0000001C:word32]
	SCZO = cond(edx)
	ecx = ecx + edx
	SCZO = cond(ecx)
	edx = (word32) Mem0[esp + 0x00000011:byte]
	edx = edx *s edi
	SCZO = cond(edx)
	ecx = ecx + edx
	SCZO = cond(ecx)
	ecx = ecx >>u 0x0000000F
	SCZO = cond(ecx)
	Mem0[esi:byte] = cl
	cl = Mem0[eax:byte]
	esi = esi + 0x00000001
	SCZO = cond(esi)
	Mem0[esi:byte] = cl
	esi = esi + 0x00000001
	SCZO = cond(esi)
	eax = eax + 0x00000001
	SCZO = cond(eax)
	v38 = Mem0[esp + 0x00000028:word32] - 0x00000001
	Mem0[esp + 0x00000028:word32] = v38
	SCZO = cond(v38)
	branch Test(NE,Z) l0040D340
	// succ:  l0040D3A4 l0040D340
l0040D3A4:
	goto l0040D585
	// succ:  l0040D585
l0040D3A9:
	SCZO = cond(Mem0[eax + 0x00000178:word32] - 0x00000000)
	branch Test(EQ,Z) l0040D4E6
	// succ:  l0040D3B6 l0040D4E6
l0040D3B6:
	SCZO = cond(Mem0[eax + 0x00000174:word32] - 0x00000000)
	branch Test(EQ,Z) l0040D4E6
	// succ:  l0040D3C3 l0040D4E6
l0040D3C3:
	SCZO = cond(Mem0[esp + 0x00000018:word32] - 0x00000000)
	ecx = esi
	Mem0[esp + 0x00000028:word32] = esi
	branch Test(ULE,CZ) l0040D585
	// succ:  l0040D3D4 l0040D585
l0040D3D4:
	edx = Mem0[esp + 0x00000018:word32]
	Mem0[esp + 0x00000024:word32] = edx
	esp = esp + 0x00000000
	// succ:  l0040D3E0
l0040D3E0:
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	dh = Mem0[ecx:byte]
	ecx = ecx + 0x00000002
	SCZO = cond(ecx)
	ecx = ecx + 0x00000002
	SCZO = cond(ecx)
	ecx = ecx + 0x00000002
	SCZO = cond(ecx)
	Mem0[esp + 0x00000020:word32] = ecx
	dl = Mem0[ecx - 0x00000005:byte]
	ebp = (word32) dx
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	dh = Mem0[ecx - 0x00000004:byte]
	dl = Mem0[ecx - 0x00000003:byte]
	ebx = (word32) dx
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	SCZO = cond(bp - bx)
	dh = Mem0[ecx - 0x00000002:byte]
	Mem0[esp + 0x00000034:word32] = ebx
	dl = Mem0[ecx - 0x00000001:byte]
	edx = (word32) dx
	branch Test(NE,Z) l0040D423
	// succ:  l0040D416 l0040D423
l0040D416:
	SCZO = cond(bp - dx)
	branch Test(NE,Z) l0040D423
	// succ:  l0040D41B l0040D423
l0040D41B:
	edx = (word32) bp
	goto l0040D4B1
	// succ:  l0040D4B1
l0040D423:
	ebx = (word32) Mem0[esp + 0x00000034:word16]
	ecx = (word32) Mem0[eax + 0x00000158:word16]
	esi = Mem0[eax + 0x00000178:word32]
	Mem0[esp + 0x00000034:word32] = ebx
	ebx = (word32) bp
	ebp = (word32) bl
	ebp = ebp >>u cl
	SCZO = cond(ebp)
	ebx = ebx >>u 0x00000008
	SCZO = cond(ebx)
	edx = (word32) dx
	ebp = Mem0[esi + ebp * 0x00000004:word32]
	ebp = (word32) Mem0[ebp + 0x00000000 + ebx * 0x0002:word16]
	ebx = Mem0[esp + 0x00000034:word32]
	ebp = ebp *s edi
	SCZO = cond(ebp)
	edi = (word32) bl
	edi = edi >>u cl
	SCZO = cond(edi)
	ebx = ebx >>u 0x00000008
	SCZO = cond(ebx)
	edi = Mem0[esi + edi * 0x00000004:word32]
	edi = (word32) Mem0[edi + ebx * 0x0002:word16]
	edi = edi *s Mem0[esp + 0x0000001C:word32]
	SCZO = cond(edi)
	ebp = ebp + edi
	SCZO = cond(ebp)
	edi = (word32) dl
	edi = edi >>u cl
	SCZO = cond(edi)
	edx = edx >>u 0x00000008
	SCZO = cond(edx)
	esi = Mem0[esi + edi * 0x00000004:word32]
	edx = (word32) Mem0[esi + edx * 0x0002:word16]
	edx = edx *s Mem0[esp + 0x0000002C:word32]
	SCZO = cond(edx)
	edi = Mem0[esp + 0x00000030:word32]
	ebp = ebp + edx
	SCZO = cond(ebp)
	ebp = ebp >>u 0x0000000F
	SCZO = cond(ebp)
	edx = (word32) bp
	edx = (word32) dx
	esi = (word32) dl
	esi = esi >>u cl
	SCZO = cond(esi)
	ecx = Mem0[eax + 0x00000174:word32]
	edx = edx >>u 0x00000008
	SCZO = cond(edx)
	v32 = Mem0[esp + 0x00000014:word32] | 0x00000001
	Mem0[esp + 0x00000014:word32] = v32
	SZO = cond(Mem0[esp + 0x00000014:word32])
	C = false
	ecx = Mem0[ecx + esi * 0x00000004:word32]
	edx = (word32) Mem0[ecx + edx * 0x0002:word16]
	esi = Mem0[esp + 0x00000028:word32]
	ecx = Mem0[esp + 0x00000020:word32]
	// succ:  l0040D4B1
l0040D4B1:
	Mem0[esi:byte] = dh
	esi = esi + 0x00000001
	SCZO = cond(esi)
	Mem0[esi:byte] = dl
	edx = (word32) Mem0[ecx:byte]
	esi = esi + 0x00000001
	SCZO = cond(esi)
	Mem0[esi:byte] = dl
	edx = (word32) Mem0[ecx + 0x00000001:byte]
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	esi = esi + 0x00000001
	SCZO = cond(esi)
	Mem0[esi:byte] = dl
	esi = esi + 0x00000001
	SCZO = cond(esi)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	v27 = Mem0[esp + 0x00000024:word32] - 0x00000001
	Mem0[esp + 0x00000024:word32] = v27
	SCZO = cond(v27)
	Mem0[esp + 0x00000028:word32] = esi
	branch Test(NE,Z) l0040D3E0
	// succ:  l0040D4E1 l0040D3E0
l0040D4E1:
	goto l0040D585
	// succ:  l0040D585
l0040D4E6:
	SCZO = cond(Mem0[esp + 0x00000018:word32] - 0x00000000)
	eax = esi
	ecx = esi
	branch Test(ULE,CZ) l0040D585
	// succ:  l0040D4F5 l0040D585
l0040D4F5:
	edx = Mem0[esp + 0x00000018:word32]
	Mem0[esp + 0x00000030:word32] = edx
	ecx = ecx + 0x00000000
	// succ:  l0040D500
l0040D500:
	edx = (word32) Mem0[eax + 0x00000001:byte]
	dh = Mem0[eax:byte]
	eax = eax + 0x00000002
	SCZO = cond(eax)
	eax = eax + 0x00000002
	SCZO = cond(eax)
	eax = eax + 0x00000002
	SCZO = cond(eax)
	ebp = (word32) dx
	edx = (word32) Mem0[eax - 0x00000003:byte]
	dh = Mem0[eax - 0x00000004:byte]
	Mem0[esp + 0x00000034:word32] = ebp
	esi = (word32) dx
	SCZO = cond(bp - si)
	edx = (word32) Mem0[eax - 0x00000001:byte]
	dh = Mem0[eax - 0x00000002:byte]
	edx = (word32) dx
	branch Test(NE,Z) l0040D534
	// succ:  l0040D52F l0040D534
l0040D52F:
	SCZO = cond(bp - dx)
	branch Test(EQ,Z) l0040D539
	// succ:  l0040D534 l0040D539
l0040D534:
	v26 = Mem0[esp + 0x00000014:word32] | 0x00000001
	Mem0[esp + 0x00000014:word32] = v26
	SZO = cond(Mem0[esp + 0x00000014:word32])
	C = false
	// succ:  l0040D539
l0040D539:
	edx = (word32) dx
	edx = edx *s ebx
	SCZO = cond(edx)
	esi = (word32) si
	esi = esi *s Mem0[esp + 0x0000001C:word32]
	SCZO = cond(esi)
	edx = edx + esi
	SCZO = cond(edx)
	esi = (word32) Mem0[esp + 0x00000034:word16]
	esi = esi *s edi
	SCZO = cond(esi)
	edx = edx + esi
	SCZO = cond(edx)
	edx = edx >>u 0x0000000F
	SCZO = cond(edx)
	edx = (word32) dx
	Mem0[ecx:byte] = dh
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	Mem0[ecx:byte] = dl
	edx = (word32) Mem0[eax:byte]
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	Mem0[ecx:byte] = dl
	edx = (word32) Mem0[eax + 0x00000001:byte]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	Mem0[ecx:byte] = dl
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	eax = eax + 0x00000001
	SCZO = cond(eax)
	v29 = Mem0[esp + 0x00000030:word32] - 0x00000001
	Mem0[esp + 0x00000030:word32] = v29
	SCZO = cond(v29)
	branch Test(NE,Z) l0040D500
	// succ:  l0040D585 l0040D500
l0040D585:
	ecx = Mem0[esp + 0x00000018:word32]
	// succ:  l0040D589
l0040D589:
	esi = Mem0[esp + 0x00000040:word32]
	v34 = Mem0[esi + 0x0000000A:byte] + 0xFE
	Mem0[esi + 0x0000000A:byte] = v34
	SCZO = cond(v34)
	al = Mem0[esi + 0x00000009:byte]
	dl = Mem0[esi + 0x0000000A:byte]
	v36 = Mem0[esi + 0x00000008:byte] & 0xFD
	Mem0[esi + 0x00000008:byte] = v36
	SZO = cond(Mem0[esi + 0x00000008:byte])
	C = false
	ax = dl *s al
	SCZO = cond(ax)
	Mem0[esi + 0x0000000B:byte] = al
	SCZO = cond(al - 0x08)
	eax = (word32) al
	branch Test(ULT,C) l0040D5BC
	// succ:  l0040D5A7 l0040D5BC
l0040D5A7:
	eax = eax >>u 0x00000003
	SCZO = cond(eax)
	eax = eax *s ecx
	SCZO = cond(eax)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[esi + 0x00000004:word32] = eax
	eax = Mem0[esp + 0x00000010:word32]
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000028
	SCZO = cond(esp)
	return
	// succ:  fn0040CEE0_exit
l0040D5BC:
	eax = eax *s ecx
	SCZO = cond(eax)
	eax = eax + 0x00000007
	SCZO = cond(eax)
	eax = eax >>u 0x00000003
	SCZO = cond(eax)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[esi + 0x00000004:word32] = eax
	eax = Mem0[esp + 0x00000010:word32]
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l0040D5D0
l0040D5D0:
	esp = esp + 0x00000028
	SCZO = cond(esp)
	return
	// succ:  fn0040CEE0_exit
fn0040CEE0_exit:


// fn0040D5E0
// Return size: 4
void fn0040D5E0()
fn0040D5E0_entry:
	// succ:  l0040D5E0
l0040D5E0:
	esp = fp
	esp = esp - 0x00000010
	SCZO = cond(esp)
	SCZO = cond(Mem0[esp + 0x00000020:word32] - 0x00000000)
	eax = Mem0[esp + 0x00000014:word32]
	ecx = Mem0[eax:word32]
	Mem0[esp:word32] = ecx
	branch Test(EQ,Z) l0040E592
	// succ:  l0040D5F7 l0040E592
l0040D5F7:
	al = Mem0[eax + 0x00000008:byte]
	SZO = cond(al & 0x04)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	branch Test(EQ,Z) l0040D615
	// succ:  l0040D5FF l0040D615
l0040D5FF:
	SCZO = cond(al - 0x03)
	branch Test(EQ,Z) l0040E591
	// succ:  l0040D607 l0040E591
l0040D607:
	ebp = Mem0[esp + 0x00000020:word32]
	SZO = cond(ebp & ebp)
	C = false
	branch Test(EQ,Z) l0040E591
	// succ:  l0040D613 l0040E591
l0040D613:
	goto l0040D619
	// succ:  l0040D619
l0040D615:
	ebp = Mem0[esp + 0x00000020:word32]
	// succ:  l0040D619
l0040D619:
	eax = (word32) al
	SCZO = cond(eax - 0x00000006)
	branch Test(UGT,CZ) l0040E54D
	// succ:  l0040D625 l0040E54D
l0040D625:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	switch (eax) { l0040D62F l0040E54A l0040D9F0 l0040E54A l0040DC6B l0040E54A l0040DF5B }
	// succ:  l0040D62F l0040E54A l0040D9F0 l0040E54A l0040DC6B l0040E54A l0040DF5B
l0040D62F:
	edx = Mem0[esp + 0x00000024:word32]
	eax = (word32) Mem0[edx + 0x00000009:byte]
	eax = eax + 0xFFFFFFFF
	SCZO = cond(eax)
	SCZO = cond(eax - 0x0000000F)
	branch Test(UGT,CZ) l0040E54A
	// succ:  l0040D643 l0040E54A
l0040D643:
	eax = (word32) Mem0[eax + 0x0040E5CC:byte]
	switch (eax) { l0040D651 l0040D6B8 l0040E54A l0040D7D0 l0040E54A l0040E54A l0040E54A l0040D8D0 l0040E54A l0040E54A l0040E54A l0040E54A l0040E54A l0040E54A l0040E54A l0040D93E }
	// succ:  l0040D651 l0040D6B8 l0040E54A l0040D7D0 l0040E54A l0040E54A l0040E54A l0040D8D0 l0040E54A l0040E54A l0040E54A l0040E54A l0040E54A l0040E54A l0040E54A l0040D93E
l0040D651:
	SZO = cond(ecx & ecx)
	C = false
	esi = Mem0[esp + 0x00000028:word32]
	edx = 0x00000007
	branch Test(ULE,CZ) l0040E54A
	// succ:  l0040D662 l0040E54A
l0040D662:
	edi = Mem0[esp + 0x00000030:word32]
	ebp = ecx
	// succ:  l0040D668
l0040D668:
	bl = Mem0[esi:byte]
	al = bl
	cl = dl
	al = al >>u cl
	SCZO = cond(al)
	al = al & 0x01
	SZO = cond(al)
	C = false
	cx = (word16) al
	eax = Mem0[esp + 0x0000002C:word32]
	SCZO = cond(cx - Mem0[eax + 0x00000008:word16])
	branch Test(NE,Z) l0040D69D
	// succ:  l0040D680 l0040D69D
l0040D680:
	ecx = 0x00000007
	ecx = ecx - edx
	SCZO = cond(ecx)
	eax = 0x00007F7F
	eax = eax >> cl
	SCZO = cond(eax)
	ecx = edx
	al = al & bl
	SZO = cond(al)
	C = false
	Mem0[esi:byte] = al
	bl = Mem0[edi + 0x00000008:byte]
	bl = bl << cl
	SCZO = cond(bl)
	bl = bl | al
	SZO = cond(bl)
	C = false
	Mem0[esi:byte] = bl
	// succ:  l0040D69D
l0040D69D:
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l0040D6AB
	// succ:  l0040D6A1 l0040D6AB
l0040D6A1:
	edx = 0x00000007
	esi = esi + 0x00000001
	SCZO = cond(esi)
	goto l0040D6AE
	// succ:  l0040D6AE
l0040D6AB:
	edx = edx - 0x00000001
	SCZO = cond(edx)
	// succ:  l0040D6AE
l0040D6AE:
	ebp = ebp - 0x00000001
	SCZO = cond(ebp)
	branch Test(NE,Z) l0040D668
	// succ:  l0040D6B3 l0040D668
l0040D6B3:
	goto l0040E54A
	// succ:  l0040E54A
l0040D6B8:
	edi = Mem0[esp + 0x00000038:word32]
	SZO = cond(edi & edi)
	C = false
	esi = Mem0[esp + 0x00000028:word32]
	edx = 0x00000006
	branch Test(EQ,Z) l0040D76E
	// succ:  l0040D6CD l0040D76E
l0040D6CD:
	SZO = cond(ecx & ecx)
	C = false
	branch Test(ULE,CZ) l0040E54A
	// succ:  l0040D6D5 l0040E54A
l0040D6D5:
	Mem0[esp + 0x00000014:word32] = ecx
	esp = esp + 0x00000000
	// succ:  l0040D6E0
l0040D6E0:
	bl = Mem0[esi:byte]
	ebp = Mem0[esp + 0x0000002C:word32]
	cl = dl
	al = bl
	al = al >>u cl
	SCZO = cond(al)
	al = al & 0x03
	SZO = cond(al)
	C = false
	cx = (word16) al
	SCZO = cond(cx - Mem0[ebp + 0x00000008:word16])
	branch Test(NE,Z) l0040D717
	// succ:  l0040D6F8 l0040D717
l0040D6F8:
	ecx = 0x00000006
	ecx = ecx - edx
	SCZO = cond(ecx)
	eax = 0x00003F3F
	eax = eax >> cl
	SCZO = cond(eax)
	ecx = Mem0[esp + 0x00000030:word32]
	al = al & bl
	SZO = cond(al)
	C = false
	Mem0[esi:byte] = al
	bl = Mem0[ecx + 0x00000008:byte]
	ecx = edx
	bl = bl << cl
	SCZO = cond(bl)
	goto l0040D749
	// succ:  l0040D749
l0040D717:
	eax = (word32) al
	ecx = 0x00000000 + eax * 0x00000004
	ecx = ecx | eax
	SZO = cond(ecx)
	C = false
	ecx = ecx + ecx
	SCZO = cond(ecx)
	ecx = ecx + ecx
	SCZO = cond(ecx)
	ecx = ecx | eax
	SZO = cond(ecx)
	C = false
	ecx = ecx + ecx
	SCZO = cond(ecx)
	ecx = ecx + ecx
	SCZO = cond(ecx)
	ecx = ecx | eax
	SZO = cond(ecx)
	C = false
	al = Mem0[ecx + edi:byte]
	ecx = 0x00000006
	ecx = ecx - edx
	SCZO = cond(ecx)
	ebx = 0x00003F3F
	ebx = ebx >> cl
	SCZO = cond(ebx)
	al = al >>u 0x06
	SCZO = cond(al)
	ecx = edx
	bl = bl & Mem0[esi:byte]
	SZO = cond(bl)
	C = false
	al = al << cl
	SCZO = cond(al)
	// succ:  l0040D749
l0040D749:
	bl = bl | al
	SZO = cond(bl)
	C = false
	SZO = cond(edx & edx)
	C = false
	Mem0[esi:byte] = bl
	branch Test(NE,Z) l0040D75B
	// succ:  l0040D751 l0040D75B
l0040D751:
	edx = 0x00000006
	esi = esi + 0x00000001
	SCZO = cond(esi)
	goto l0040D75E
	// succ:  l0040D75E
l0040D75B:
	edx = edx - 0x00000002
	SCZO = cond(edx)
	// succ:  l0040D75E
l0040D75E:
	v33 = Mem0[esp + 0x00000014:word32] - 0x00000001
	Mem0[esp + 0x00000014:word32] = v33
	SCZO = cond(v33)
	branch Test(NE,Z) l0040D6E0
	// succ:  l0040D769 l0040D6E0
l0040D769:
	goto l0040E54A
	// succ:  l0040E54A
l0040D76E:
	SZO = cond(ecx & ecx)
	C = false
	branch Test(ULE,CZ) l0040E54A
	// succ:  l0040D776 l0040E54A
l0040D776:
	edi = Mem0[esp + 0x00000030:word32]
	ebp = ecx
	esp = esp + 0x00000000
	// succ:  l0040D780
l0040D780:
	bl = Mem0[esi:byte]
	al = bl
	cl = dl
	al = al >>u cl
	SCZO = cond(al)
	al = al & 0x03
	SZO = cond(al)
	C = false
	cx = (word16) al
	eax = Mem0[esp + 0x0000002C:word32]
	SCZO = cond(cx - Mem0[eax + 0x00000008:word16])
	branch Test(NE,Z) l0040D7B5
	// succ:  l0040D798 l0040D7B5
l0040D798:
	ecx = 0x00000006
	ecx = ecx - edx
	SCZO = cond(ecx)
	eax = 0x00003F3F
	eax = eax >> cl
	SCZO = cond(eax)
	ecx = edx
	al = al & bl
	SZO = cond(al)
	C = false
	Mem0[esi:byte] = al
	bl = Mem0[edi + 0x00000008:byte]
	bl = bl << cl
	SCZO = cond(bl)
	bl = bl | al
	SZO = cond(bl)
	C = false
	Mem0[esi:byte] = bl
	// succ:  l0040D7B5
l0040D7B5:
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l0040D7C3
	// succ:  l0040D7B9 l0040D7C3
l0040D7B9:
	edx = 0x00000006
	esi = esi + 0x00000001
	SCZO = cond(esi)
	goto l0040D7C6
	// succ:  l0040D7C6
l0040D7C3:
	edx = edx - 0x00000002
	SCZO = cond(edx)
	// succ:  l0040D7C6
l0040D7C6:
	ebp = ebp - 0x00000001
	SCZO = cond(ebp)
	branch Test(NE,Z) l0040D780
	// succ:  l0040D7CB l0040D780
l0040D7CB:
	goto l0040E54A
	// succ:  l0040E54A
l0040D7D0:
	edi = Mem0[esp + 0x00000038:word32]
	SZO = cond(edi & edi)
	C = false
	esi = Mem0[esp + 0x00000028:word32]
	edx = 0x00000004
	branch Test(EQ,Z) l0040D86D
	// succ:  l0040D7E5 l0040D86D
l0040D7E5:
	SZO = cond(ecx & ecx)
	C = false
	branch Test(ULE,CZ) l0040E54A
	// succ:  l0040D7ED l0040E54A
l0040D7ED:
	Mem0[esp + 0x00000014:word32] = ecx
	// succ:  l0040D7F1
l0040D7F1:
	bl = Mem0[esi:byte]
	ebp = Mem0[esp + 0x0000002C:word32]
	cl = dl
	al = bl
	al = al >>u cl
	SCZO = cond(al)
	al = al & 0x0F
	SZO = cond(al)
	C = false
	cx = (word16) al
	SCZO = cond(cx - Mem0[ebp + 0x00000008:word16])
	branch Test(NE,Z) l0040D828
	// succ:  l0040D809 l0040D828
l0040D809:
	ecx = 0x00000004
	ecx = ecx - edx
	SCZO = cond(ecx)
	eax = 0x00000F0F
	eax = eax >> cl
	SCZO = cond(eax)
	ecx = Mem0[esp + 0x00000030:word32]
	al = al & bl
	SZO = cond(al)
	C = false
	Mem0[esi:byte] = al
	bl = Mem0[ecx + 0x00000008:byte]
	ecx = edx
	bl = bl << cl
	SCZO = cond(bl)
	goto l0040D84C
	// succ:  l0040D84C
l0040D828:
	eax = (word32) al
	ecx = eax
	ecx = ecx << 0x00000004
	SCZO = cond(ecx)
	ecx = ecx | eax
	SZO = cond(ecx)
	C = false
	al = Mem0[ecx + edi:byte]
	ecx = 0x00000004
	ecx = ecx - edx
	SCZO = cond(ecx)
	ebx = 0x00000F0F
	ebx = ebx >> cl
	SCZO = cond(ebx)
	al = al >>u 0x04
	SCZO = cond(al)
	ecx = edx
	bl = bl & Mem0[esi:byte]
	SZO = cond(bl)
	C = false
	al = al << cl
	SCZO = cond(al)
	// succ:  l0040D84C
l0040D84C:
	bl = bl | al
	SZO = cond(bl)
	C = false
	SZO = cond(edx & edx)
	C = false
	Mem0[esi:byte] = bl
	branch Test(NE,Z) l0040D85E
	// succ:  l0040D854 l0040D85E
l0040D854:
	edx = 0x00000004
	esi = esi + 0x00000001
	SCZO = cond(esi)
	goto l0040D861
	// succ:  l0040D861
l0040D85E:
	edx = edx - 0x00000004
	SCZO = cond(edx)
	// succ:  l0040D861
l0040D861:
	v32 = Mem0[esp + 0x00000014:word32] - 0x00000001
	Mem0[esp + 0x00000014:word32] = v32
	SCZO = cond(v32)
	branch Test(NE,Z) l0040D7F1
	// succ:  l0040D868 l0040D7F1
l0040D868:
	goto l0040E54A
	// succ:  l0040E54A
l0040D86D:
	SZO = cond(ecx & ecx)
	C = false
	branch Test(ULE,CZ) l0040E54A
	// succ:  l0040D875 l0040E54A
l0040D875:
	edi = Mem0[esp + 0x00000030:word32]
	ebp = ecx
	// succ:  l0040D880
l0040D880:
	bl = Mem0[esi:byte]
	al = bl
	cl = dl
	al = al >>u cl
	SCZO = cond(al)
	al = al & 0x0F
	SZO = cond(al)
	C = false
	cx = (word16) al
	eax = Mem0[esp + 0x0000002C:word32]
	SCZO = cond(cx - Mem0[eax + 0x00000008:word16])
	branch Test(NE,Z) l0040D8B5
	// succ:  l0040D898 l0040D8B5
l0040D898:
	ecx = 0x00000004
	ecx = ecx - edx
	SCZO = cond(ecx)
	eax = 0x00000F0F
	eax = eax >> cl
	SCZO = cond(eax)
	ecx = edx
	al = al & bl
	SZO = cond(al)
	C = false
	Mem0[esi:byte] = al
	bl = Mem0[edi + 0x00000008:byte]
	bl = bl << cl
	SCZO = cond(bl)
	bl = bl | al
	SZO = cond(bl)
	C = false
	Mem0[esi:byte] = bl
	// succ:  l0040D8B5
l0040D8B5:
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l0040D8C3
	// succ:  l0040D8B9 l0040D8C3
l0040D8B9:
	edx = 0x00000004
	esi = esi + 0x00000001
	SCZO = cond(esi)
	goto l0040D8C6
	// succ:  l0040D8C6
l0040D8C3:
	edx = edx - 0x00000004
	SCZO = cond(edx)
	// succ:  l0040D8C6
l0040D8C6:
	ebp = ebp - 0x00000001
	SCZO = cond(ebp)
	branch Test(NE,Z) l0040D880
	// succ:  l0040D8CB l0040D880
l0040D8CB:
	goto l0040E54A
	// succ:  l0040E54A
l0040D8D0:
	esi = Mem0[esp + 0x00000038:word32]
	SZO = cond(esi & esi)
	C = false
	eax = Mem0[esp + 0x00000028:word32]
	branch Test(EQ,Z) l0040D916
	// succ:  l0040D8DC l0040D916
l0040D8DC:
	SZO = cond(ecx & ecx)
	C = false
	branch Test(ULE,CZ) l0040E54A
	// succ:  l0040D8E4 l0040E54A
l0040D8E4:
	edi = Mem0[esp + 0x00000030:word32]
	edx = ecx
	ebx = ebx + 0x00000000
	// succ:  l0040D8F0
l0040D8F0:
	cl = Mem0[eax:byte]
	bx = (word16) cl
	SCZO = cond(bx - Mem0[ebp + 0x00000008:word16])
	branch Test(NE,Z) l0040D901
	// succ:  l0040D8FC l0040D901
l0040D8FC:
	cl = Mem0[edi + 0x00000008:byte]
	goto l0040D907
	// succ:  l0040D907
l0040D901:
	ecx = (word32) cl
	cl = Mem0[ecx + esi:byte]
	// succ:  l0040D907
l0040D907:
	Mem0[eax:byte] = cl
	eax = eax + 0x00000001
	SCZO = cond(eax)
	edx = edx - 0x00000001
	SCZO = cond(edx)
	branch Test(NE,Z) l0040D8F0
	// succ:  l0040D911 l0040D8F0
l0040D911:
	goto l0040E54A
	// succ:  l0040E54A
l0040D916:
	SZO = cond(ecx & ecx)
	C = false
	branch Test(ULE,CZ) l0040E54A
	// succ:  l0040D91E l0040E54A
l0040D91E:
	esi = Mem0[esp + 0x00000030:word32]
	// succ:  l0040D922
l0040D922:
	dx = (word16) Mem0[eax:byte]
	SCZO = cond(dx - Mem0[ebp + 0x00000008:word16])
	branch Test(NE,Z) l0040D931
	// succ:  l0040D92C l0040D931
l0040D92C:
	dl = Mem0[esi + 0x00000008:byte]
	Mem0[eax:byte] = dl
	// succ:  l0040D931
l0040D931:
	eax = eax + 0x00000001
	SCZO = cond(eax)
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	branch Test(NE,Z) l0040D922
	// succ:  l0040D939 l0040D922
l0040D939:
	goto l0040E54A
	// succ:  l0040E54A
l0040D93E:
	esi = Mem0[esp + 0x00000044:word32]
	SZO = cond(esi & esi)
	C = false
	eax = Mem0[esp + 0x00000028:word32]
	branch Test(EQ,Z) l0040D9B1
	// succ:  l0040D94A l0040D9B1
l0040D94A:
	SZO = cond(ecx & ecx)
	C = false
	branch Test(ULE,CZ) l0040E54A
	// succ:  l0040D952 l0040E54A
l0040D952:
	bl = Mem0[esp + 0x00000050:byte]
	Mem0[esp + 0x00000014:word32] = ecx
	ebx = ebx + 0x00000000
	// succ:  l0040D960
l0040D960:
	dl = Mem0[eax:byte]
	cl = Mem0[eax + 0x00000001:byte]
	di = (word16) dl
	bp = (word16) cl
	di = di << 0x0008
	SCZO = cond(di)
	di = di + bp
	SCZO = cond(di)
	ebp = Mem0[esp + 0x0000002C:word32]
	SCZO = cond(di - Mem0[ebp + 0x00000008:word16])
	branch Test(NE,Z) l0040D98C
	// succ:  l0040D97E l0040D98C
l0040D97E:
	edi = Mem0[esp + 0x00000030:word32]
	dl = Mem0[edi + 0x00000009:byte]
	Mem0[eax:byte] = dl
	cl = Mem0[edi + 0x00000008:byte]
	goto l0040D99F
	// succ:  l0040D99F
l0040D98C:
	edi = (word32) cl
	cl = bl
	edi = edi >>u cl
	SCZO = cond(edi)
	edx = (word32) dl
	ecx = Mem0[esi + edi * 0x00000004:word32]
	ecx = (word32) Mem0[ecx + edx * 0x0002:word16]
	Mem0[eax:byte] = ch
	// succ:  l0040D99F
l0040D99F:
	Mem0[eax + 0x00000001:byte] = cl
	eax = eax + 0x00000002
	SCZO = cond(eax)
	v28 = Mem0[esp + 0x00000014:word32] - 0x00000001
	Mem0[esp + 0x00000014:word32] = v28
	SCZO = cond(v28)
	branch Test(NE,Z) l0040D960
	// succ:  l0040D9AC l0040D960
l0040D9AC:
	goto l0040E54A
	// succ:  l0040E54A
l0040D9B1:
	SZO = cond(ecx & ecx)
	C = false
	branch Test(ULE,CZ) l0040E54A
	// succ:  l0040D9B9 l0040E54A
l0040D9B9:
	esi = Mem0[esp + 0x00000030:word32]
	ecx = ecx + 0x00000000
	// succ:  l0040D9C0
l0040D9C0:
	dx = (word16) Mem0[eax:byte]
	di = (word16) Mem0[eax + 0x00000001:byte]
	dx = dx << 0x0008
	SCZO = cond(dx)
	dx = dx + di
	SCZO = cond(dx)
	SCZO = cond(dx - Mem0[ebp + 0x00000008:word16])
	branch Test(NE,Z) l0040D9E3
	// succ:  l0040D9D6 l0040D9E3
l0040D9D6:
	edx = (word32) Mem0[esi + 0x00000009:byte]
	Mem0[eax:byte] = dl
	edx = (word32) Mem0[esi + 0x00000008:byte]
	Mem0[eax + 0x00000001:byte] = dl
	// succ:  l0040D9E3
l0040D9E3:
	eax = eax + 0x00000002
	SCZO = cond(eax)
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	branch Test(NE,Z) l0040D9C0
	// succ:  l0040D9EB l0040D9C0
l0040D9EB:
	goto l0040E54A
	// succ:  l0040E54A
l0040D9F0:
	eax = Mem0[esp + 0x00000024:word32]
	SCZO = cond(Mem0[eax + 0x00000009:byte] - 0x08)
	branch Test(NE,Z) l0040DAD5
	// succ:  l0040D9FE l0040DAD5
l0040D9FE:
	edx = Mem0[esp + 0x00000038:word32]
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0040DA81
	// succ:  l0040DA06 l0040DA81
l0040DA06:
	SZO = cond(ecx & ecx)
	C = false
	branch Test(ULE,CZ) l0040E54A
	// succ:  l0040DA0E l0040E54A
l0040DA0E:
	eax = Mem0[esp + 0x00000028:word32]
	esi = Mem0[esp + 0x00000030:word32]
	eax = eax + 0x00000002
	SCZO = cond(eax)
	edi = ecx
	// succ:  l0040DA20
l0040DA20:
	cl = Mem0[eax - 0x00000002:byte]
	bx = (word16) cl
	SCZO = cond(bx - Mem0[ebp + 0x00000002:word16])
	branch Test(NE,Z) l0040DA56
	// succ:  l0040DA2D l0040DA56
l0040DA2D:
	bx = (word16) Mem0[eax - 0x00000001:byte]
	SCZO = cond(bx - Mem0[ebp + 0x00000004:word16])
	branch Test(NE,Z) l0040DA56
	// succ:  l0040DA38 l0040DA56
l0040DA38:
	bx = (word16) Mem0[eax:byte]
	SCZO = cond(bx - Mem0[ebp + 0x00000006:word16])
	branch Test(NE,Z) l0040DA56
	// succ:  l0040DA42 l0040DA56
l0040DA42:
	ecx = (word32) Mem0[esi + 0x00000002:byte]
	Mem0[eax - 0x00000002:byte] = cl
	ecx = (word32) Mem0[esi + 0x00000004:byte]
	Mem0[eax - 0x00000001:byte] = cl
	ecx = (word32) Mem0[esi + 0x00000006:byte]
	goto l0040DA72
	// succ:  l0040DA72
l0040DA56:
	ecx = (word32) cl
	ecx = (word32) Mem0[ecx + edx:byte]
	Mem0[eax - 0x00000002:byte] = cl
	ecx = (word32) Mem0[eax - 0x00000001:byte]
	ecx = (word32) Mem0[ecx + edx:byte]
	Mem0[eax - 0x00000001:byte] = cl
	ecx = (word32) Mem0[eax:byte]
	ecx = (word32) Mem0[ecx + edx:byte]
	// succ:  l0040DA72
l0040DA72:
	Mem0[eax:byte] = cl
	eax = eax + 0x00000003
	SCZO = cond(eax)
	edi = edi - 0x00000001
	SCZO = cond(edi)
	branch Test(NE,Z) l0040DA20
	// succ:  l0040DA7C l0040DA20
l0040DA7C:
	goto l0040E54A
	// succ:  l0040E54A
l0040DA81:
	SZO = cond(ecx & ecx)
	C = false
	branch Test(ULE,CZ) l0040E54A
	// succ:  l0040DA89 l0040E54A
l0040DA89:
	eax = Mem0[esp + 0x00000028:word32]
	esi = Mem0[esp + 0x00000030:word32]
	eax = eax + 0x00000002
	SCZO = cond(eax)
	// succ:  l0040DA94
l0040DA94:
	dx = (word16) Mem0[eax - 0x00000002:byte]
	SCZO = cond(dx - Mem0[ebp + 0x00000002:word16])
	branch Test(NE,Z) l0040DAC8
	// succ:  l0040DA9F l0040DAC8
l0040DA9F:
	dx = (word16) Mem0[eax - 0x00000001:byte]
	SCZO = cond(dx - Mem0[ebp + 0x00000004:word16])
	branch Test(NE,Z) l0040DAC8
	// succ:  l0040DAAA l0040DAC8
l0040DAAA:
	dx = (word16) Mem0[eax:byte]
	SCZO = cond(dx - Mem0[ebp + 0x00000006:word16])
	branch Test(NE,Z) l0040DAC8
	// succ:  l0040DAB4 l0040DAC8
l0040DAB4:
	edx = (word32) Mem0[esi + 0x00000002:byte]
	Mem0[eax - 0x00000002:byte] = dl
	edx = (word32) Mem0[esi + 0x00000004:byte]
	Mem0[eax - 0x00000001:byte] = dl
	edx = (word32) Mem0[esi + 0x00000006:byte]
	Mem0[eax:byte] = dl
	// succ:  l0040DAC8
l0040DAC8:
	eax = eax + 0x00000003
	SCZO = cond(eax)
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	branch Test(NE,Z) l0040DA94
	// succ:  l0040DAD0 l0040DA94
l0040DAD0:
	goto l0040E54A
	// succ:  l0040E54A
l0040DAD5:
	esi = Mem0[esp + 0x00000044:word32]
	SZO = cond(esi & esi)
	C = false
	branch Test(EQ,Z) l0040DBDE
	// succ:  l0040DAE1 l0040DBDE
l0040DAE1:
	SZO = cond(ecx & ecx)
	C = false
	branch Test(ULE,CZ) l0040E54A
	// succ:  l0040DAE9 l0040E54A
l0040DAE9:
	eax = Mem0[esp + 0x00000028:word32]
	edi = Mem0[esp + 0x00000030:word32]
	eax = eax + 0x00000002
	SCZO = cond(eax)
	Mem0[esp + 0x00000014:word32] = ecx
	// succ:  l0040DB00
l0040DB00:
	bl = Mem0[eax - 0x00000002:byte]
	cl = Mem0[eax - 0x00000001:byte]
	dx = (word16) bl
	bp = (word16) cl
	dx = dx << 0x0008
	SCZO = cond(dx)
	dx = dx + bp
	SCZO = cond(dx)
	ebp = Mem0[esp + 0x0000002C:word32]
	SCZO = cond(dx - Mem0[ebp + 0x00000002:word16])
	branch Test(NE,Z) l0040DB7F
	// succ:  l0040DB1F l0040DB7F
l0040DB1F:
	dx = (word16) Mem0[eax:byte]
	bp = (word16) Mem0[eax + 0x00000001:byte]
	dx = dx << 0x0008
	SCZO = cond(dx)
	dx = dx + bp
	SCZO = cond(dx)
	ebp = Mem0[esp + 0x0000002C:word32]
	SCZO = cond(dx - Mem0[ebp + 0x00000004:word16])
	branch Test(NE,Z) l0040DB7F
	// succ:  l0040DB39 l0040DB7F
l0040DB39:
	dx = (word16) Mem0[eax + 0x00000002:byte]
	bp = (word16) Mem0[eax + 0x00000003:byte]
	dx = dx << 0x0008
	SCZO = cond(dx)
	dx = dx + bp
	SCZO = cond(dx)
	ebp = Mem0[esp + 0x0000002C:word32]
	SCZO = cond(dx - Mem0[ebp + 0x00000006:word16])
	branch Test(NE,Z) l0040DB7F
	// succ:  l0040DB54 l0040DB7F
l0040DB54:
	ecx = (word32) Mem0[edi + 0x00000003:byte]
	Mem0[eax - 0x00000002:byte] = cl
	edx = (word32) Mem0[edi + 0x00000002:byte]
	Mem0[eax - 0x00000001:byte] = dl
	ecx = (word32) Mem0[edi + 0x00000005:byte]
	Mem0[eax:byte] = cl
	edx = (word32) Mem0[edi + 0x00000004:byte]
	Mem0[eax + 0x00000001:byte] = dl
	ecx = (word32) Mem0[edi + 0x00000007:byte]
	Mem0[eax + 0x00000002:byte] = cl
	edx = (word32) Mem0[edi + 0x00000006:byte]
	Mem0[eax + 0x00000003:byte] = dl
	goto l0040DBCB
	// succ:  l0040DBCB
l0040DB7F:
	edx = (word32) Mem0[esp + 0x00000050:byte]
	ebp = (word32) cl
	cl = dl
	ebp = ebp >>u cl
	SCZO = cond(ebp)
	ecx = (word32) bl
	ebx = Mem0[esi + ebp * 0x00000004:word32]
	ecx = (word32) Mem0[ebx + ecx * 0x0002:word16]
	ebx = (word32) Mem0[eax + 0x00000001:byte]
	Mem0[eax - 0x00000001:byte] = cl
	cl = dl
	ebx = ebx >>u cl
	SCZO = cond(ebx)
	Mem0[eax - 0x00000002:byte] = ch
	ecx = (word32) Mem0[eax:byte]
	ebx = Mem0[esi + ebx * 0x00000004:word32]
	ecx = (word32) Mem0[ebx + ecx * 0x0002:word16]
	ebx = (word32) Mem0[eax + 0x00000003:byte]
	Mem0[eax + 0x00000001:byte] = cl
	cl = dl
	edx = (word32) Mem0[eax + 0x00000002:byte]
	ebx = ebx >>u cl
	SCZO = cond(ebx)
	Mem0[eax:byte] = ch
	ecx = Mem0[esi + ebx * 0x00000004:word32]
	ecx = (word32) Mem0[ecx + edx * 0x0002:word16]
	Mem0[eax + 0x00000002:byte] = ch
	Mem0[eax + 0x00000003:byte] = cl
	// succ:  l0040DBCB
l0040DBCB:
	eax = eax + 0x00000006
	SCZO = cond(eax)
	v35 = Mem0[esp + 0x00000014:word32] - 0x00000001
	Mem0[esp + 0x00000014:word32] = v35
	SCZO = cond(v35)
	branch Test(NE,Z) l0040DB00
	// succ:  l0040DBD9 l0040DB00
l0040DBD9:
	goto l0040E54A
	// succ:  l0040E54A
l0040DBDE:
	SZO = cond(ecx & ecx)
	C = false
	branch Test(ULE,CZ) l0040E54A
	// succ:  l0040DBE6 l0040E54A
l0040DBE6:
	eax = Mem0[esp + 0x00000028:word32]
	esi = Mem0[esp + 0x00000030:word32]
	eax = eax + 0x00000002
	SCZO = cond(eax)
	// succ:  l0040DBF1
l0040DBF1:
	dx = (word16) Mem0[eax - 0x00000002:byte]
	di = (word16) Mem0[eax - 0x00000001:byte]
	dx = dx << 0x0008
	SCZO = cond(dx)
	dx = dx + di
	SCZO = cond(dx)
	SCZO = cond(dx - Mem0[ebp + 0x00000002:word16])
	branch Test(NE,Z) l0040DC5E
	// succ:  l0040DC08 l0040DC5E
l0040DC08:
	dx = (word16) Mem0[eax:byte]
	di = (word16) Mem0[eax + 0x00000001:byte]
	dx = dx << 0x0008
	SCZO = cond(dx)
	dx = dx + di
	SCZO = cond(dx)
	SCZO = cond(dx - Mem0[ebp + 0x00000004:word16])
	branch Test(NE,Z) l0040DC5E
	// succ:  l0040DC1E l0040DC5E
l0040DC1E:
	dx = (word16) Mem0[eax + 0x00000002:byte]
	di = (word16) Mem0[eax + 0x00000003:byte]
	dx = dx << 0x0008
	SCZO = cond(dx)
	dx = dx + di
	SCZO = cond(dx)
	SCZO = cond(dx - Mem0[ebp + 0x00000006:word16])
	branch Test(NE,Z) l0040DC5E
	// succ:  l0040DC35 l0040DC5E
l0040DC35:
	edx = (word32) Mem0[esi + 0x00000003:byte]
	Mem0[eax - 0x00000002:byte] = dl
	edx = (word32) Mem0[esi + 0x00000002:byte]
	Mem0[eax - 0x00000001:byte] = dl
	edx = (word32) Mem0[esi + 0x00000005:byte]
	Mem0[eax:byte] = dl
	edx = (word32) Mem0[esi + 0x00000004:byte]
	Mem0[eax + 0x00000001:byte] = dl
	edx = (word32) Mem0[esi + 0x00000007:byte]
	Mem0[eax + 0x00000002:byte] = dl
	edx = (word32) Mem0[esi + 0x00000006:byte]
	Mem0[eax + 0x00000003:byte] = dl
	// succ:  l0040DC5E
l0040DC5E:
	eax = eax + 0x00000006
	SCZO = cond(eax)
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	branch Test(NE,Z) l0040DBF1
	// succ:  l0040DC66 l0040DBF1
l0040DC66:
	goto l0040E54A
	// succ:  l0040E54A
l0040DC6B:
	eax = Mem0[esp + 0x00000024:word32]
	SCZO = cond(Mem0[eax + 0x00000009:byte] - 0x08)
	branch Test(NE,Z) l0040DDAD
	// succ:  l0040DC79 l0040DDAD
l0040DC79:
	edi = Mem0[esp + 0x00000040:word32]
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l0040DD3A
	// succ:  l0040DC85 l0040DD3A
l0040DC85:
	SCZO = cond(Mem0[esp + 0x0000003C:word32] - 0x00000000)
	branch Test(EQ,Z) l0040DD3A
	// succ:  l0040DC90 l0040DD3A
l0040DC90:
	SCZO = cond(Mem0[esp + 0x00000038:word32] - 0x00000000)
	branch Test(EQ,Z) l0040DD3A
	// succ:  l0040DC9B l0040DD3A
l0040DC9B:
	SCZO = cond(Mem0[esp + 0x00000010:word32] - 0x00000000)
	ecx = Mem0[esp + 0x00000028:word32]
	esi = ecx
	branch Test(ULE,CZ) l0040E54A
	// succ:  l0040DCAC l0040E54A
l0040DCAC:
	edx = Mem0[esp + 0x00000010:word32]
	ebp = Mem0[esp + 0x00000034:word32]
	Mem0[esp + 0x00000014:word32] = edx
	// succ:  l0040DCC0
l0040DCC0:
	ax = (word16) Mem0[ecx + 0x00000001:byte]
	eax = (word32) ax
	SCZO = cond(ax - 0x00FF)
	branch Test(NE,Z) l0040DCDC
	// succ:  l0040DCCE l0040DCDC
l0040DCCE:
	edx = (word32) Mem0[ecx:byte]
	eax = Mem0[esp + 0x00000038:word32]
	dl = Mem0[edx + eax:byte]
	Mem0[esi:byte] = dl
	goto l0040DD28
	// succ:  l0040DD28
l0040DCDC:
	SZO = cond(ax & ax)
	C = false
	branch Test(NE,Z) l0040DCEC
	// succ:  l0040DCE1 l0040DCEC
l0040DCE1:
	eax = Mem0[esp + 0x00000030:word32]
	dl = Mem0[eax + 0x00000008:byte]
	Mem0[esi:byte] = dl
	goto l0040DD28
	// succ:  l0040DD28
l0040DCEC:
	ebx = (word32) Mem0[ecx:byte]
	bx = (word16) Mem0[ebx + edi:byte]
	bx = bx *s ax
	SCZO = cond(bx)
	edx = 0x000000FF
	edx = edx - eax
	SCZO = cond(edx)
	dx = dx *s Mem0[ebp + 0x00000008:word16]
	SCZO = cond(dx)
	dx = dx + bx
	SCZO = cond(dx)
	dx = dx + 0x0080
	SCZO = cond(dx)
	eax = (word32) dx
	eax = (word32) ax
	edx = eax
	edx = edx >>u 0x00000008
	SCZO = cond(edx)
	edx = edx + eax
	SCZO = cond(edx)
	edx = edx >> 0x00000008
	SCZO = cond(edx)
	eax = (word32) dl
	edx = Mem0[esp + 0x0000003C:word32]
	al = Mem0[eax + edx:byte]
	Mem0[esi:byte] = al
	// succ:  l0040DD28
l0040DD28:
	ecx = ecx + 0x00000002
	SCZO = cond(ecx)
	esi = esi + 0x00000001
	SCZO = cond(esi)
	v27 = Mem0[esp + 0x00000014:word32] - 0x00000001
	Mem0[esp + 0x00000014:word32] = v27
	SCZO = cond(v27)
	branch Test(NE,Z) l0040DCC0
	// succ:  l0040DD35 l0040DCC0
l0040DD35:
	goto l0040E54A
	// succ:  l0040E54A
l0040DD3A:
	SCZO = cond(Mem0[esp + 0x00000010:word32] - 0x00000000)
	ecx = Mem0[esp + 0x00000028:word32]
	esi = ecx
	branch Test(ULE,CZ) l0040E54A
	// succ:  l0040DD4B l0040E54A
l0040DD4B:
	edi = Mem0[esp + 0x00000010:word32]
	ebp = Mem0[esp + 0x00000034:word32]
	// succ:  l0040DD53
l0040DD53:
	al = Mem0[ecx + 0x00000001:byte]
	SCZO = cond(al - 0xFF)
	branch Test(NE,Z) l0040DD5E
	// succ:  l0040DD5A l0040DD5E
l0040DD5A:
	dl = Mem0[ecx:byte]
	goto l0040DD9B
	// succ:  l0040DD9B
l0040DD5E:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0040DD6B
	// succ:  l0040DD62 l0040DD6B
l0040DD62:
	eax = Mem0[esp + 0x00000030:word32]
	dl = Mem0[eax + 0x00000008:byte]
	goto l0040DD9B
	// succ:  l0040DD9B
l0040DD6B:
	bx = (word16) Mem0[ecx:byte]
	ax = (word16) al
	edx = 0x000000FF
	bx = bx *s ax
	SCZO = cond(bx)
	edx = edx - eax
	SCZO = cond(edx)
	dx = dx *s Mem0[ebp + 0x00000008:word16]
	SCZO = cond(dx)
	dx = dx + bx
	SCZO = cond(dx)
	dx = dx + 0x0080
	SCZO = cond(dx)
	eax = (word32) dx
	eax = (word32) ax
	edx = eax
	edx = edx >>u 0x00000008
	SCZO = cond(edx)
	edx = edx + eax
	SCZO = cond(edx)
	edx = edx >> 0x00000008
	SCZO = cond(edx)
	// succ:  l0040DD9B
l0040DD9B:
	Mem0[esi:byte] = dl
	ecx = ecx + 0x00000002
	SCZO = cond(ecx)
	esi = esi + 0x00000001
	SCZO = cond(esi)
	edi = edi - 0x00000001
	SCZO = cond(edi)
	branch Test(NE,Z) l0040DD53
	// succ:  l0040DDA8 l0040DD53
l0040DDA8:
	goto l0040E54A
	// succ:  l0040E54A
l0040DDAD:
	SCZO = cond(Mem0[esp + 0x00000044:word32] - 0x00000000)
	branch Test(EQ,Z) l0040DEA9
	// succ:  l0040DDB8 l0040DEA9
l0040DDB8:
	SCZO = cond(Mem0[esp + 0x00000048:word32] - 0x00000000)
	branch Test(EQ,Z) l0040DEA9
	// succ:  l0040DDC3 l0040DEA9
l0040DDC3:
	SCZO = cond(Mem0[esp + 0x0000004C:word32] - 0x00000000)
	branch Test(EQ,Z) l0040DEA9
	// succ:  l0040DDCE l0040DEA9
l0040DDCE:
	SZO = cond(ecx & ecx)
	C = false
	edx = Mem0[esp + 0x00000028:word32]
	esi = edx
	branch Test(ULE,CZ) l0040E54A
	// succ:  l0040DDDC l0040E54A
l0040DDDC:
	bl = Mem0[esp + 0x00000050:byte]
	edi = Mem0[esp + 0x00000030:word32]
	eax = ecx
	edx = edx + 0x00000001
	SCZO = cond(edx)
	Mem0[esp + 0x00000014:word32] = eax
	ecx = ecx + 0x00000000
	// succ:  l0040DDF0
l0040DDF0:
	cx = (word16) Mem0[edx + 0x00000001:byte]
	ax = (word16) Mem0[edx + 0x00000002:byte]
	cx = cx << 0x0008
	SCZO = cond(cx)
	cx = cx + ax
	SCZO = cond(cx)
	eax = (word32) cx
	SCZO = cond(ax - 0xFFFF)
	branch Test(NE,Z) l0040DE23
	// succ:  l0040DE0A l0040DE23
l0040DE0A:
	eax = (word32) Mem0[edx:byte]
	ebp = Mem0[esp + 0x00000044:word32]
	cl = bl
	eax = eax >>u cl
	SCZO = cond(eax)
	ecx = (word32) Mem0[edx - 0x00000001:byte]
	eax = Mem0[ebp + 0x00000000 + eax * 0x00000004:word32]
	eax = (word32) Mem0[eax + ecx * 0x0002:word16]
	goto l0040DE8E
	// succ:  l0040DE8E
l0040DE23:
	SZO = cond(ax & ax)
	C = false
	branch Test(NE,Z) l0040DE32
	// succ:  l0040DE28 l0040DE32
l0040DE28:
	cl = Mem0[edi + 0x00000009:byte]
	Mem0[esi:byte] = cl
	al = Mem0[edi + 0x00000008:byte]
	goto l0040DE90
	// succ:  l0040DE90
l0040DE32:
	edi = (word32) Mem0[edx:byte]
	ebp = Mem0[esp + 0x0000004C:word32]
	cl = bl
	edi = edi >>u cl
	SCZO = cond(edi)
	ecx = (word32) Mem0[edx - 0x00000001:byte]
	edi = Mem0[ebp + 0x00000000 + edi * 0x00000004:word32]
	ecx = (word32) Mem0[edi + ecx * 0x0002:word16]
	edi = Mem0[esp + 0x00000034:word32]
	edi = (word32) Mem0[edi + 0x00000008:word16]
	eax = (word32) ax
	ecx = ecx *s eax
	SCZO = cond(ecx)
	ebp = 0x0000FFFF
	ebp = ebp - eax
	SCZO = cond(ebp)
	edi = edi *s ebp
	SCZO = cond(edi)
	ecx = ecx + 0x00008000 + edi
	eax = ecx
	eax = eax >>u 0x00000010
	SCZO = cond(eax)
	eax = eax + ecx
	SCZO = cond(eax)
	eax = eax >>u 0x00000010
	SCZO = cond(eax)
	eax = (word32) ax
	edi = (word32) al
	cl = bl
	edi = edi >>u cl
	SCZO = cond(edi)
	ecx = Mem0[esp + 0x00000048:word32]
	eax = eax >>u 0x00000008
	SCZO = cond(eax)
	ecx = Mem0[ecx + edi * 0x00000004:word32]
	eax = (word32) Mem0[ecx + eax * 0x0002:word16]
	edi = Mem0[esp + 0x00000030:word32]
	// succ:  l0040DE8E
l0040DE8E:
	Mem0[esi:byte] = ah
	// succ:  l0040DE90
l0040DE90:
	Mem0[esi + 0x00000001:byte] = al
	edx = edx + 0x00000004
	SCZO = cond(edx)
	esi = esi + 0x00000002
	SCZO = cond(esi)
	v26 = Mem0[esp + 0x00000014:word32] - 0x00000001
	Mem0[esp + 0x00000014:word32] = v26
	SCZO = cond(v26)
	branch Test(NE,Z) l0040DDF0
	// succ:  l0040DEA4 l0040DDF0
l0040DEA4:
	goto l0040E54A
	// succ:  l0040E54A
l0040DEA9:
	SCZO = cond(Mem0[esp + 0x00000010:word32] - 0x00000000)
	ecx = Mem0[esp + 0x00000028:word32]
	edx = ecx
	branch Test(ULE,CZ) l0040E54A
	// succ:  l0040DEBA l0040E54A
l0040DEBA:
	eax = Mem0[esp + 0x00000010:word32]
	ebp = Mem0[esp + 0x00000034:word32]
	esi = Mem0[esp + 0x00000030:word32]
	ecx = ecx + 0x00000003
	SCZO = cond(ecx)
	Mem0[esp + 0x00000014:word32] = eax
	ecx = ecx + 0x00000000
	// succ:  l0040DED0
l0040DED0:
	ax = (word16) Mem0[ecx - 0x00000001:byte]
	di = (word16) Mem0[ecx:byte]
	ax = ax << 0x0008
	SCZO = cond(ax)
	ax = ax + di
	SCZO = cond(ax)
	eax = (word32) ax
	SCZO = cond(ax - 0xFFFF)
	branch Test(NE,Z) l0040DEF2
	// succ:  l0040DEE9 l0040DEF2
l0040DEE9:
	ax = Mem0[ecx - 0x00000003:word16]
	Mem0[edx:word16] = ax
	goto l0040DF45
	// succ:  l0040DF45
l0040DEF2:
	SZO = cond(ax & ax)
	C = false
	branch Test(NE,Z) l0040DF03
	// succ:  l0040DEF7 l0040DF03
l0040DEF7:
	eax = (word32) Mem0[esi + 0x00000009:byte]
	Mem0[edx:byte] = al
	eax = (word32) Mem0[esi + 0x00000008:byte]
	goto l0040DF42
	// succ:  l0040DF42
l0040DF03:
	si = (word16) Mem0[ecx - 0x00000003:byte]
	di = (word16) Mem0[ecx - 0x00000002:byte]
	si = si << 0x0008
	SCZO = cond(si)
	si = si + di
	SCZO = cond(si)
	edi = (word32) Mem0[ebp + 0x00000008:word16]
	eax = (word32) ax
	esi = (word32) si
	esi = esi *s eax
	SCZO = cond(esi)
	ebx = 0x0000FFFF
	ebx = ebx - eax
	SCZO = cond(ebx)
	edi = edi *s ebx
	SCZO = cond(edi)
	esi = esi + 0x00008000 + edi
	eax = esi
	eax = eax >>u 0x00000010
	SCZO = cond(eax)
	eax = eax + esi
	SCZO = cond(eax)
	esi = Mem0[esp + 0x00000030:word32]
	eax = eax >>u 0x00000010
	SCZO = cond(eax)
	Mem0[edx:byte] = ah
	// succ:  l0040DF42
l0040DF42:
	Mem0[edx + 0x00000001:byte] = al
	// succ:  l0040DF45
l0040DF45:
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx + 0x00000002
	SCZO = cond(edx)
	v31 = Mem0[esp + 0x00000014:word32] - 0x00000001
	Mem0[esp + 0x00000014:word32] = v31
	SCZO = cond(v31)
	branch Test(NE,Z) l0040DED0
	// succ:  l0040DF56 l0040DED0
l0040DF56:
	goto l0040E54A
	// succ:  l0040E54A
l0040DF5B:
	ecx = Mem0[esp + 0x00000024:word32]
	SCZO = cond(Mem0[ecx + 0x00000009:byte] - 0x08)
	branch Test(NE,Z) l0040E1CB
	// succ:  l0040DF69 l0040E1CB
l0040DF69:
	ebp = Mem0[esp + 0x00000040:word32]
	SZO = cond(ebp & ebp)
	C = false
	branch Test(EQ,Z) l0040E0D1
	// succ:  l0040DF75 l0040E0D1
l0040DF75:
	SCZO = cond(Mem0[esp + 0x0000003C:word32] - 0x00000000)
	branch Test(EQ,Z) l0040E0D1
	// succ:  l0040DF80 l0040E0D1
l0040DF80:
	ecx = Mem0[esp + 0x00000038:word32]
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l0040E0D1
	// succ:  l0040DF8C l0040E0D1
l0040DF8C:
	SCZO = cond(Mem0[esp + 0x00000010:word32] - 0x00000000)
	branch Test(ULE,CZ) l0040E54A
	// succ:  l0040DF97 l0040E54A
l0040DF97:
	edi = Mem0[esp + 0x00000028:word32]
	edx = Mem0[esp + 0x00000010:word32]
	ebx = Mem0[esp + 0x00000030:word32]
	esi = edi + 0x00000002
	Mem0[esp + 0x00000014:word32] = edx
	edx = Mem0[esp + 0x00000034:word32]
	edi = edi + 0x00000001
	SCZO = cond(edi)
	// succ:  l0040DFB1
l0040DFB1:
	al = Mem0[edi + 0x00000002:byte]
	SCZO = cond(al - 0xFF)
	branch Test(NE,Z) l0040DFDA
	// succ:  l0040DFB8 l0040DFDA
l0040DFB8:
	eax = (word32) Mem0[edi - 0x00000001:byte]
	eax = (word32) Mem0[eax + ecx:byte]
	Mem0[esi - 0x00000002:byte] = al
	eax = (word32) Mem0[edi:byte]
	eax = (word32) Mem0[eax + ecx:byte]
	Mem0[esi - 0x00000001:byte] = al
	eax = (word32) Mem0[edi + 0x00000001:byte]
	eax = (word32) Mem0[eax + ecx:byte]
	goto l0040E0B9
	// succ:  l0040E0B9
l0040DFDA:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0040DFF5
	// succ:  l0040DFDE l0040DFF5
l0040DFDE:
	eax = (word32) Mem0[ebx + 0x00000002:byte]
	Mem0[esi - 0x00000002:byte] = al
	eax = (word32) Mem0[ebx + 0x00000004:byte]
	Mem0[esi - 0x00000001:byte] = al
	eax = (word32) Mem0[ebx + 0x00000006:byte]
	goto l0040E0B9
	// succ:  l0040E0B9
l0040DFF5:
	ebx = (word32) Mem0[edi - 0x00000001:byte]
	ebx = (word32) Mem0[ebx + ebp:byte]
	bp = Mem0[edx + 0x00000002:word16]
	ax = (word16) al
	bx = bx *s ax
	SCZO = cond(bx)
	ecx = 0x000000FF
	ecx = ecx - eax
	SCZO = cond(ecx)
	bp = bp *s cx
	SCZO = cond(bp)
	bx = bx + bp
	SCZO = cond(bx)
	bx = bx + 0x0080
	SCZO = cond(bx)
	ebx = (word32) bx
	ebp = (word32) bx
	ebx = ebp
	ebx = ebx >>u 0x00000008
	SCZO = cond(ebx)
	ebx = ebx + ebp
	SCZO = cond(ebx)
	ebp = Mem0[esp + 0x0000003C:word32]
	ebx = ebx >> 0x00000008
	SCZO = cond(ebx)
	ebx = (word32) bl
	ebx = (word32) Mem0[ebx + ebp:byte]
	ebp = Mem0[esp + 0x00000040:word32]
	Mem0[esi - 0x00000002:byte] = bl
	ebx = (word32) Mem0[edi:byte]
	ebx = (word32) Mem0[ebx + ebp:byte]
	bp = Mem0[edx + 0x00000004:word16]
	bx = bx *s ax
	SCZO = cond(bx)
	bp = bp *s cx
	SCZO = cond(bp)
	bx = bx + bp
	SCZO = cond(bx)
	bx = bx + 0x0080
	SCZO = cond(bx)
	ebx = (word32) bx
	ebp = (word32) bx
	ebx = ebp
	ebx = ebx >>u 0x00000008
	SCZO = cond(ebx)
	ebx = ebx + ebp
	SCZO = cond(ebx)
	ebp = Mem0[esp + 0x0000003C:word32]
	ebx = ebx >> 0x00000008
	SCZO = cond(ebx)
	ebx = (word32) bl
	ebx = (word32) Mem0[ebx + ebp:byte]
	ebp = Mem0[esp + 0x00000040:word32]
	Mem0[esi - 0x00000001:byte] = bl
	ebx = (word32) Mem0[edi + 0x00000001:byte]
	ebx = (word32) Mem0[ebx + ebp:byte]
	bx = bx *s ax
	SCZO = cond(bx)
	ax = Mem0[edx + 0x00000006:word16]
	ax = ax *s cx
	SCZO = cond(ax)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx + 0x0080
	SCZO = cond(bx)
	eax = (word32) bx
	ebx = Mem0[esp + 0x00000030:word32]
	eax = (word32) ax
	ecx = eax
	ecx = ecx >>u 0x00000008
	SCZO = cond(ecx)
	ecx = ecx + eax
	SCZO = cond(ecx)
	ecx = ecx >> 0x00000008
	SCZO = cond(ecx)
	eax = (word32) cl
	ecx = Mem0[esp + 0x0000003C:word32]
	al = Mem0[eax + ecx:byte]
	ecx = Mem0[esp + 0x00000038:word32]
	// succ:  l0040E0B9
l0040E0B9:
	Mem0[esi:byte] = al
	edi = edi + 0x00000004
	SCZO = cond(edi)
	esi = esi + 0x00000003
	SCZO = cond(esi)
	v16 = Mem0[esp + 0x00000014:word32] - 0x00000001
	Mem0[esp + 0x00000014:word32] = v16
	SCZO = cond(v16)
	branch Test(NE,Z) l0040DFB1
	// succ:  l0040E0CC l0040DFB1
l0040E0CC:
	goto l0040E54A
	// succ:  l0040E54A
l0040E0D1:
	SCZO = cond(Mem0[esp + 0x00000010:word32] - 0x00000000)
	branch Test(ULE,CZ) l0040E54A
	// succ:  l0040E0DC l0040E54A
l0040E0DC:
	edi = Mem0[esp + 0x00000028:word32]
	ecx = Mem0[esp + 0x00000010:word32]
	edx = Mem0[esp + 0x00000030:word32]
	esi = edi + 0x00000002
	edi = edi + 0x00000001
	SCZO = cond(edi)
	Mem0[esp + 0x00000014:word32] = ecx
	// succ:  l0040E0F2
l0040E0F2:
	al = Mem0[edi + 0x00000002:byte]
	SCZO = cond(al - 0xFF)
	branch Test(NE,Z) l0040E110
	// succ:  l0040E0F9 l0040E110
l0040E0F9:
	eax = (word32) Mem0[edi - 0x00000001:byte]
	Mem0[esi - 0x00000002:byte] = al
	cl = Mem0[edi:byte]
	Mem0[esi - 0x00000001:byte] = cl
	eax = (word32) Mem0[edi + 0x00000001:byte]
	Mem0[esi:byte] = al
	goto l0040E1B5
	// succ:  l0040E1B5
l0040E110:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0040E12A
	// succ:  l0040E114 l0040E12A
l0040E114:
	ecx = (word32) Mem0[edx + 0x00000002:byte]
	Mem0[esi - 0x00000002:byte] = cl
	al = Mem0[edx + 0x00000004:byte]
	Mem0[esi - 0x00000001:byte] = al
	ecx = (word32) Mem0[edx + 0x00000006:byte]
	goto l0040E1B3
	// succ:  l0040E1B3
l0040E12A:
	ebx = (word32) Mem0[edi - 0x00000001:byte]
	bp = Mem0[edx + 0x00000002:word16]
	ax = (word16) al
	bx = bx *s ax
	SCZO = cond(bx)
	ecx = 0x000000FF
	ecx = ecx - eax
	SCZO = cond(ecx)
	bp = bp *s cx
	SCZO = cond(bp)
	bx = bx + bp
	SCZO = cond(bx)
	bx = bx + 0x0080
	SCZO = cond(bx)
	ebx = (word32) bx
	ebp = (word32) bx
	ebx = ebp
	ebx = ebx >>u 0x00000008
	SCZO = cond(ebx)
	ebx = ebx + ebp
	SCZO = cond(ebx)
	ebx = ebx >> 0x00000008
	SCZO = cond(ebx)
	Mem0[esi - 0x00000002:byte] = bl
	ebx = (word32) Mem0[edx + 0x00000004:word16]
	bp = (word16) Mem0[edi:byte]
	bx = bx *s cx
	SCZO = cond(bx)
	bp = bp *s ax
	SCZO = cond(bp)
	bx = bx + bp
	SCZO = cond(bx)
	bx = bx + 0x0080
	SCZO = cond(bx)
	ebx = (word32) bx
	ebp = (word32) bx
	ebx = ebp
	ebx = ebx >>u 0x00000008
	SCZO = cond(ebx)
	ebx = ebx + ebp
	SCZO = cond(ebx)
	ebx = ebx >> 0x00000008
	SCZO = cond(ebx)
	Mem0[esi - 0x00000001:byte] = bl
	ebx = (word32) Mem0[edi + 0x00000001:byte]
	bx = bx *s ax
	SCZO = cond(bx)
	ax = Mem0[edx + 0x00000006:word16]
	ax = ax *s cx
	SCZO = cond(ax)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx + 0x0080
	SCZO = cond(bx)
	eax = (word32) bx
	eax = (word32) ax
	ecx = eax
	ecx = ecx >>u 0x00000008
	SCZO = cond(ecx)
	ecx = ecx + eax
	SCZO = cond(ecx)
	ecx = ecx >> 0x00000008
	SCZO = cond(ecx)
	// succ:  l0040E1B3
l0040E1B3:
	Mem0[esi:byte] = cl
	// succ:  l0040E1B5
l0040E1B5:
	edi = edi + 0x00000004
	SCZO = cond(edi)
	esi = esi + 0x00000003
	SCZO = cond(esi)
	v37 = Mem0[esp + 0x00000014:word32] - 0x00000001
	Mem0[esp + 0x00000014:word32] = v37
	SCZO = cond(v37)
	branch Test(NE,Z) l0040E0F2
	// succ:  l0040E1C6 l0040E0F2
l0040E1C6:
	goto l0040E54A
	// succ:  l0040E54A
l0040E1CB:
	ebp = Mem0[esp + 0x00000044:word32]
	SZO = cond(ebp & ebp)
	C = false
	branch Test(EQ,Z) l0040E401
	// succ:  l0040E1D7 l0040E401
l0040E1D7:
	SCZO = cond(Mem0[esp + 0x00000048:word32] - 0x00000000)
	branch Test(EQ,Z) l0040E401
	// succ:  l0040E1E2 l0040E401
l0040E1E2:
	SCZO = cond(Mem0[esp + 0x0000004C:word32] - 0x00000000)
	branch Test(EQ,Z) l0040E401
	// succ:  l0040E1ED l0040E401
l0040E1ED:
	ecx = Mem0[esp + 0x00000010:word32]
	SZO = cond(ecx & ecx)
	C = false
	branch Test(ULE,CZ) l0040E54A
	// succ:  l0040E1F9 l0040E54A
l0040E1F9:
	edx = Mem0[esp + 0x00000028:word32]
	bl = Mem0[esp + 0x00000050:byte]
	eax = edx + 0x00000002
	edx = edx + 0x00000001
	SCZO = cond(edx)
	Mem0[esp + 0x0000001C:word32] = ecx
	// succ:  l0040E210
l0040E210:
	cx = (word16) Mem0[edx + 0x00000005:byte]
	si = (word16) Mem0[edx + 0x00000006:byte]
	cx = cx << 0x0008
	SCZO = cond(cx)
	cx = cx + si
	SCZO = cond(cx)
	esi = (word32) cx
	SCZO = cond(si - 0xFFFF)
	branch Test(NE,Z) l0040E281
	// succ:  l0040E22B l0040E281
l0040E22B:
	esi = (word32) Mem0[edx:byte]
	ecx = (word32) bl
	esi = esi >>u cl
	SCZO = cond(esi)
	Mem0[esp + 0x00000014:word32] = ecx
	ecx = (word32) Mem0[edx - 0x00000001:byte]
	esi = Mem0[ebp + 0x00000000 + esi * 0x00000004:word32]
	ecx = (word32) Mem0[esi + ecx * 0x0002:word16]
	Mem0[eax - 0x00000002:byte] = ch
	Mem0[eax - 0x00000001:byte] = cl
	esi = (word32) Mem0[edx + 0x00000002:byte]
	ecx = (word32) Mem0[esp + 0x00000014:byte]
	esi = esi >>u cl
	SCZO = cond(esi)
	ecx = (word32) Mem0[edx + 0x00000001:byte]
	esi = Mem0[ebp + 0x00000000 + esi * 0x00000004:word32]
	ecx = (word32) Mem0[esi + ecx * 0x0002:word16]
	Mem0[eax:byte] = ch
	Mem0[eax + 0x00000001:byte] = cl
	ecx = (word32) Mem0[esp + 0x00000014:byte]
	esi = (word32) Mem0[edx + 0x00000004:byte]
	esi = esi >>u cl
	SCZO = cond(esi)
	ecx = (word32) Mem0[edx + 0x00000003:byte]
	esi = Mem0[ebp + 0x00000000 + esi * 0x00000004:word32]
	ecx = (word32) Mem0[esi + ecx * 0x0002:word16]
	goto l0040E3E5
	// succ:  l0040E3E5
l0040E281:
	SZO = cond(si & si)
	C = false
	branch Test(NE,Z) l0040E2C9
	// succ:  l0040E286 l0040E2C9
l0040E286:
	ecx = Mem0[esp + 0x00000030:word32]
	ecx = (word32) Mem0[ecx + 0x00000003:byte]
	Mem0[eax - 0x00000002:byte] = cl
	ecx = Mem0[esp + 0x00000030:word32]
	ecx = (word32) Mem0[ecx + 0x00000002:byte]
	Mem0[eax - 0x00000001:byte] = cl
	ecx = Mem0[esp + 0x00000030:word32]
	ecx = (word32) Mem0[ecx + 0x00000005:byte]
	Mem0[eax:byte] = cl
	ecx = Mem0[esp + 0x00000030:word32]
	ecx = (word32) Mem0[ecx + 0x00000004:byte]
	Mem0[eax + 0x00000001:byte] = cl
	ecx = Mem0[esp + 0x00000030:word32]
	ecx = (word32) Mem0[ecx + 0x00000007:byte]
	Mem0[eax + 0x00000002:byte] = cl
	ecx = Mem0[esp + 0x00000030:word32]
	ecx = (word32) Mem0[ecx + 0x00000006:byte]
	goto l0040E3E8
	// succ:  l0040E3E8
l0040E2C9:
	edi = (word32) si
	esi = (word32) Mem0[edx:byte]
	ecx = (word32) bl
	esi = esi >>u cl
	SCZO = cond(esi)
	ebx = Mem0[esp + 0x0000004C:word32]
	Mem0[esp + 0x00000014:word32] = ecx
	ecx = (word32) Mem0[edx - 0x00000001:byte]
	esi = Mem0[ebx + esi * 0x00000004:word32]
	ecx = (word32) Mem0[esi + ecx * 0x0002:word16]
	esi = Mem0[esp + 0x00000034:word32]
	ecx = ecx *s edi
	SCZO = cond(ecx)
	esi = (word32) Mem0[esi + 0x00000002:word16]
	ebp = 0x0000FFFF
	ebp = ebp - edi
	SCZO = cond(ebp)
	esi = esi *s ebp
	SCZO = cond(esi)
	ecx = ecx + 0x00008000 + esi
	esi = ecx
	esi = esi >>u 0x00000010
	SCZO = cond(esi)
	esi = esi + ecx
	SCZO = cond(esi)
	ecx = (word32) Mem0[esp + 0x00000050:word16]
	esi = esi >>u 0x00000010
	SCZO = cond(esi)
	ebx = (word32) si
	Mem0[esp + 0x00000018:word32] = ecx
	esi = (word32) bl
	esi = esi >>u cl
	SCZO = cond(esi)
	ecx = Mem0[esp + 0x00000048:word32]
	ebx = ebx >>u 0x00000008
	SCZO = cond(ebx)
	ecx = Mem0[ecx + esi * 0x00000004:word32]
	ecx = (word32) Mem0[ecx + ebx * 0x0002:word16]
	ebx = Mem0[esp + 0x0000004C:word32]
	Mem0[eax - 0x00000002:byte] = ch
	Mem0[eax - 0x00000001:byte] = cl
	esi = (word32) Mem0[edx + 0x00000002:byte]
	ecx = (word32) Mem0[esp + 0x00000014:byte]
	esi = esi >>u cl
	SCZO = cond(esi)
	ecx = (word32) Mem0[edx + 0x00000001:byte]
	esi = Mem0[ebx + esi * 0x00000004:word32]
	ecx = (word32) Mem0[esi + ecx * 0x0002:word16]
	esi = Mem0[esp + 0x00000034:word32]
	ecx = ecx *s edi
	SCZO = cond(ecx)
	esi = (word32) Mem0[esi + 0x00000004:word16]
	esi = esi *s ebp
	SCZO = cond(esi)
	ecx = ecx + 0x00008000 + esi
	esi = ecx
	esi = esi >>u 0x00000010
	SCZO = cond(esi)
	esi = esi + ecx
	SCZO = cond(esi)
	ecx = Mem0[esp + 0x00000018:word32]
	esi = esi >>u 0x00000010
	SCZO = cond(esi)
	ebx = (word32) si
	esi = (word32) bl
	esi = esi >>u cl
	SCZO = cond(esi)
	ecx = Mem0[esp + 0x00000048:word32]
	ebx = ebx >>u 0x00000008
	SCZO = cond(ebx)
	ecx = Mem0[ecx + esi * 0x00000004:word32]
	ecx = (word32) Mem0[ecx + ebx * 0x0002:word16]
	ebx = Mem0[esp + 0x0000004C:word32]
	Mem0[eax:byte] = ch
	Mem0[eax + 0x00000001:byte] = cl
	ecx = (word32) Mem0[esp + 0x00000014:byte]
	esi = (word32) Mem0[edx + 0x00000004:byte]
	esi = esi >>u cl
	SCZO = cond(esi)
	ecx = (word32) Mem0[edx + 0x00000003:byte]
	esi = Mem0[ebx + esi * 0x00000004:word32]
	ecx = (word32) Mem0[esi + ecx * 0x0002:word16]
	esi = Mem0[esp + 0x00000034:word32]
	ecx = ecx *s edi
	SCZO = cond(ecx)
	esi = (word32) Mem0[esi + 0x00000006:word16]
	esi = esi *s ebp
	SCZO = cond(esi)
	ecx = ecx + 0x00008000 + esi
	esi = ecx
	esi = esi >>u 0x00000010
	SCZO = cond(esi)
	esi = esi + ecx
	SCZO = cond(esi)
	ecx = Mem0[esp + 0x00000018:word32]
	esi = esi >>u 0x00000010
	SCZO = cond(esi)
	ebx = (word32) si
	esi = (word32) bl
	esi = esi >>u cl
	SCZO = cond(esi)
	ecx = Mem0[esp + 0x00000048:word32]
	ebx = ebx >>u 0x00000008
	SCZO = cond(ebx)
	ecx = Mem0[ecx + esi * 0x00000004:word32]
	ecx = (word32) Mem0[ecx + ebx * 0x0002:word16]
	ebp = Mem0[esp + 0x00000044:word32]
	bl = Mem0[esp + 0x00000050:byte]
	// succ:  l0040E3E5
l0040E3E5:
	Mem0[eax + 0x00000002:byte] = ch
	// succ:  l0040E3E8
l0040E3E8:
	Mem0[eax + 0x00000003:byte] = cl
	edx = edx + 0x00000008
	SCZO = cond(edx)
	eax = eax + 0x00000006
	SCZO = cond(eax)
	v39 = Mem0[esp + 0x0000001C:word32] - 0x00000001
	Mem0[esp + 0x0000001C:word32] = v39
	SCZO = cond(v39)
	branch Test(NE,Z) l0040E210
	// succ:  l0040E3FC l0040E210
l0040E3FC:
	goto l0040E54A
	// succ:  l0040E54A
l0040E401:
	edx = Mem0[esp + 0x00000010:word32]
	SZO = cond(edx & edx)
	C = false
	branch Test(ULE,CZ) l0040E54A
	// succ:  l0040E40D l0040E54A
l0040E40D:
	ecx = Mem0[esp + 0x00000028:word32]
	esi = Mem0[esp + 0x00000030:word32]
	eax = ecx + 0x00000002
	ecx = ecx + 0x00000007
	SCZO = cond(ecx)
	Mem0[esp + 0x0000001C:word32] = edx
	// succ:  l0040E420
l0040E420:
	dx = (word16) Mem0[ecx - 0x00000001:byte]
	di = (word16) Mem0[ecx:byte]
	dx = dx << 0x0008
	SCZO = cond(dx)
	dx = dx + di
	SCZO = cond(dx)
	edx = (word32) dx
	SCZO = cond(dx - 0xFFFF)
	branch Test(NE,Z) l0040E44D
	// succ:  l0040E43A l0040E44D
l0040E43A:
	edx = Mem0[ecx - 0x00000007:word32]
	Mem0[eax - 0x00000002:word32] = edx
	dx = Mem0[ecx - 0x00000003:word16]
	Mem0[eax + 0x00000002:word16] = dx
	goto l0040E539
	// succ:  l0040E539
l0040E44D:
	SZO = cond(dx & dx)
	C = false
	branch Test(NE,Z) l0040E47D
	// succ:  l0040E452 l0040E47D
l0040E452:
	edx = (word32) Mem0[esi + 0x00000003:byte]
	Mem0[eax - 0x00000002:byte] = dl
	edx = (word32) Mem0[esi + 0x00000002:byte]
	Mem0[eax - 0x00000001:byte] = dl
	edx = (word32) Mem0[esi + 0x00000005:byte]
	Mem0[eax:byte] = dl
	edx = (word32) Mem0[esi + 0x00000004:byte]
	Mem0[eax + 0x00000001:byte] = dl
	edx = (word32) Mem0[esi + 0x00000007:byte]
	Mem0[eax + 0x00000002:byte] = dl
	edx = (word32) Mem0[esi + 0x00000006:byte]
	goto l0040E536
	// succ:  l0040E536
l0040E47D:
	esi = (word32) Mem0[ecx - 0x00000005:byte]
	edi = (word32) Mem0[ecx - 0x00000004:byte]
	bx = (word16) Mem0[ecx - 0x00000006:byte]
	si = si << 0x0008
	SCZO = cond(si)
	si = si + di
	SCZO = cond(si)
	edi = (word32) Mem0[ecx - 0x00000002:byte]
	esi = (word32) si
	Mem0[esp + 0x00000018:word32] = esi
	esi = (word32) Mem0[ecx - 0x00000003:byte]
	si = si << 0x0008
	SCZO = cond(si)
	si = si + di
	SCZO = cond(si)
	esi = (word32) si
	Mem0[esp + 0x00000014:word32] = esi
	esi = (word32) dx
	dx = (word16) Mem0[ecx - 0x00000007:byte]
	dx = dx << 0x0008
	SCZO = cond(dx)
	dx = dx + bx
	SCZO = cond(dx)
	ebx = Mem0[esp + 0x00000030:word32]
	ebp = (word32) Mem0[ebx + 0x00000002:word16]
	edx = (word32) dx
	edx = edx *s esi
	SCZO = cond(edx)
	edi = 0x0000FFFF
	edi = edi - esi
	SCZO = cond(edi)
	ebp = ebp *s edi
	SCZO = cond(ebp)
	ebp = edx + 0x00008000 + ebp
	edx = ebp
	edx = edx >>u 0x00000010
	SCZO = cond(edx)
	edx = edx + ebp
	SCZO = cond(edx)
	ebp = (word32) Mem0[esp + 0x00000018:word16]
	edx = edx >>u 0x00000010
	SCZO = cond(edx)
	ebp = ebp *s esi
	SCZO = cond(ebp)
	Mem0[eax - 0x00000002:byte] = dh
	Mem0[eax - 0x00000001:byte] = dl
	edx = (word32) Mem0[ebx + 0x00000004:word16]
	edx = edx *s edi
	SCZO = cond(edx)
	ebp = edx + 0x00008000 + ebp
	edx = ebp
	edx = edx >>u 0x00000010
	SCZO = cond(edx)
	edx = edx + ebp
	SCZO = cond(edx)
	edx = edx >>u 0x00000010
	SCZO = cond(edx)
	Mem0[eax:byte] = dh
	Mem0[eax + 0x00000001:byte] = dl
	edx = (word32) Mem0[ebx + 0x00000006:word16]
	edx = edx *s edi
	SCZO = cond(edx)
	edi = (word32) Mem0[esp + 0x00000014:word16]
	edi = edi *s esi
	SCZO = cond(edi)
	esi = edx + 0x00008000 + edi
	edx = esi
	edx = edx >>u 0x00000010
	SCZO = cond(edx)
	edx = edx + esi
	SCZO = cond(edx)
	edx = edx >>u 0x00000010
	SCZO = cond(edx)
	Mem0[eax + 0x00000002:byte] = dh
	esi = ebx
	// succ:  l0040E536
l0040E536:
	Mem0[eax + 0x00000003:byte] = dl
	// succ:  l0040E539
l0040E539:
	ecx = ecx + 0x00000008
	SCZO = cond(ecx)
	eax = eax + 0x00000006
	SCZO = cond(eax)
	v38 = Mem0[esp + 0x0000001C:word32] - 0x00000001
	Mem0[esp + 0x0000001C:word32] = v38
	SCZO = cond(v38)
	branch Test(NE,Z) l0040E420
	// succ:  l0040E54A l0040E420
l0040E54A:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l0040E54D
l0040E54D:
	edx = Mem0[esp + 0x00000018:word32]
	al = Mem0[edx + 0x00000008:byte]
	SZO = cond(al & 0x04)
	C = false
	branch Test(EQ,Z) l0040E591
	// succ:  l0040E558 l0040E591
l0040E558:
	v36 = Mem0[edx + 0x0000000A:byte] + 0xFF
	Mem0[edx + 0x0000000A:byte] = v36
	SCZO = cond(v36)
	cl = Mem0[edx + 0x0000000A:byte]
	al = al & 0xFB
	SZO = cond(al)
	C = false
	Mem0[edx + 0x00000008:byte] = al
	al = Mem0[edx + 0x00000009:byte]
	ax = cl *s al
	SCZO = cond(ax)
	Mem0[edx + 0x0000000B:byte] = al
	SCZO = cond(al - 0x08)
	eax = (word32) al
	branch Test(ULT,C) l0040E583
	// succ:  l0040E573 l0040E583
l0040E573:
	eax = eax >>u 0x00000003
	SCZO = cond(eax)
	eax = eax *s Mem0[esp + 0x00000004:word32]
	SCZO = cond(eax)
	Mem0[edx + 0x00000004:word32] = eax
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000010
	SCZO = cond(esp)
	return
	// succ:  fn0040D5E0_exit
l0040E583:
	eax = eax *s Mem0[esp + 0x00000004:word32]
	SCZO = cond(eax)
	eax = eax + 0x00000007
	SCZO = cond(eax)
	eax = eax >>u 0x00000003
	SCZO = cond(eax)
	Mem0[edx + 0x00000004:word32] = eax
	// succ:  l0040E591
l0040E591:
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l0040E592
l0040E592:
	esp = esp + 0x00000010
	SCZO = cond(esp)
	return
	// succ:  fn0040D5E0_exit
fn0040D5E0_exit:


// fn0040E5E0
// Return size: 4
void fn0040E5E0()
fn0040E5E0_entry:
	// succ:  l0040E5E0
l0040E5E0:
	esp = fp
	esp = esp - 0x0000000C
	SCZO = cond(esp)
	edx = Mem0[esp + 0x0000001C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = Mem0[esp + 0x00000014:word32]
	al = Mem0[ebp + 0x00000009:byte]
	SCZO = cond(al - 0x08)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[ebp + 0x00000000:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp + 0x00000024:word32]
	Mem0[esp + 0x00000014:word32] = esi
	branch Test(UGT,CZ) l0040E604
	// succ:  l0040E600 l0040E604
l0040E600:
	SZO = cond(edi & edi)
	C = false
	branch Test(NE,Z) l0040E614
	// succ:  l0040E604 l0040E614
l0040E604:
	SCZO = cond(al - 0x10)
	branch Test(NE,Z) l0040E970
	// succ:  l0040E60C l0040E970
l0040E60C:
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0040E970
	// succ:  l0040E614 l0040E970
l0040E614:
	ecx = (word32) Mem0[ebp + 0x00000008:byte]
	SCZO = cond(ecx - 0x00000006)
	branch Test(UGT,CZ) l0040E970
	// succ:  l0040E621 l0040E970
l0040E621:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	switch (ecx) { l0040E7EC l0040E96F l0040E629 l0040E96F l0040E78B l0040E96F l0040E6DB }
	// succ:  l0040E7EC l0040E96F l0040E629 l0040E96F l0040E78B l0040E96F l0040E6DB
l0040E629:
	SCZO = cond(al - 0x08)
	eax = Mem0[esp + 0x00000024:word32]
	branch Test(NE,Z) l0040E673
	// succ:  l0040E631 l0040E673
l0040E631:
	SZO = cond(esi & esi)
	C = false
	branch Test(ULE,CZ) l0040E96F
	// succ:  l0040E639 l0040E96F
l0040E639:
	esp = esp + 0x00000000
	// succ:  l0040E640
l0040E640:
	ecx = (word32) Mem0[eax:byte]
	edx = (word32) Mem0[ecx + edi:byte]
	Mem0[eax:byte] = dl
	ecx = (word32) Mem0[eax + 0x00000001:byte]
	edx = (word32) Mem0[ecx + edi:byte]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = dl
	ecx = (word32) Mem0[eax + 0x00000001:byte]
	edx = (word32) Mem0[ecx + edi:byte]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = dl
	eax = eax + 0x00000001
	SCZO = cond(eax)
	esi = esi - 0x00000001
	SCZO = cond(esi)
	branch Test(NE,Z) l0040E640
	// succ:  l0040E66B l0040E640
l0040E66B:
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	return
	// succ:  fn0040E5E0_exit
l0040E673:
	SZO = cond(esi & esi)
	C = false
	branch Test(ULE,CZ) l0040E96F
	// succ:  l0040E67B l0040E96F
l0040E67B:
	ebx = (word32) Mem0[esp + 0x00000030:byte]
	// succ:  l0040E680
l0040E680:
	edi = (word32) Mem0[eax + 0x00000001:byte]
	cl = bl
	edi = edi >>u cl
	SCZO = cond(edi)
	ecx = (word32) Mem0[eax:byte]
	edi = Mem0[edx + edi * 0x00000004:word32]
	ecx = (word32) Mem0[edi + ecx * 0x0002:word16]
	Mem0[eax + 0x00000001:byte] = cl
	Mem0[eax:byte] = ch
	edi = (word32) Mem0[eax + 0x00000003:byte]
	eax = eax + 0x00000002
	SCZO = cond(eax)
	cl = bl
	edi = edi >>u cl
	SCZO = cond(edi)
	ecx = (word32) Mem0[eax:byte]
	edi = Mem0[edx + edi * 0x00000004:word32]
	ecx = (word32) Mem0[edi + ecx * 0x0002:word16]
	Mem0[eax + 0x00000001:byte] = cl
	Mem0[eax:byte] = ch
	edi = (word32) Mem0[eax + 0x00000003:byte]
	eax = eax + 0x00000002
	SCZO = cond(eax)
	cl = bl
	edi = edi >>u cl
	SCZO = cond(edi)
	ecx = (word32) Mem0[eax:byte]
	edi = Mem0[edx + edi * 0x00000004:word32]
	ecx = (word32) Mem0[edi + ecx * 0x0002:word16]
	Mem0[eax:byte] = ch
	Mem0[eax + 0x00000001:byte] = cl
	eax = eax + 0x00000002
	SCZO = cond(eax)
	esi = esi - 0x00000001
	SCZO = cond(esi)
	branch Test(NE,Z) l0040E680
	// succ:  l0040E6D3 l0040E680
l0040E6D3:
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	return
	// succ:  fn0040E5E0_exit
l0040E6DB:
	SCZO = cond(al - 0x08)
	eax = Mem0[esp + 0x00000024:word32]
	branch Test(NE,Z) l0040E723
	// succ:  l0040E6E3 l0040E723
l0040E6E3:
	SZO = cond(esi & esi)
	C = false
	branch Test(ULE,CZ) l0040E96F
	// succ:  l0040E6EB l0040E96F
l0040E6EB:
	// succ:  l0040E6F0
l0040E6F0:
	edx = (word32) Mem0[eax:byte]
	ecx = (word32) Mem0[edx + edi:byte]
	Mem0[eax:byte] = cl
	edx = (word32) Mem0[eax + 0x00000001:byte]
	ecx = (word32) Mem0[edx + edi:byte]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = cl
	edx = (word32) Mem0[eax + 0x00000001:byte]
	ecx = (word32) Mem0[edx + edi:byte]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = cl
	eax = eax + 0x00000002
	SCZO = cond(eax)
	esi = esi - 0x00000001
	SCZO = cond(esi)
	branch Test(NE,Z) l0040E6F0
	// succ:  l0040E71B l0040E6F0
l0040E71B:
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	return
	// succ:  fn0040E5E0_exit
l0040E723:
	SZO = cond(esi & esi)
	C = false
	branch Test(ULE,CZ) l0040E96F
	// succ:  l0040E72B l0040E96F
l0040E72B:
	ebx = (word32) Mem0[esp + 0x00000030:byte]
	// succ:  l0040E730
l0040E730:
	edi = (word32) Mem0[eax + 0x00000001:byte]
	cl = bl
	edi = edi >>u cl
	SCZO = cond(edi)
	ecx = (word32) Mem0[eax:byte]
	edi = Mem0[edx + edi * 0x00000004:word32]
	ecx = (word32) Mem0[edi + ecx * 0x0002:word16]
	Mem0[eax + 0x00000001:byte] = cl
	Mem0[eax:byte] = ch
	edi = (word32) Mem0[eax + 0x00000003:byte]
	eax = eax + 0x00000002
	SCZO = cond(eax)
	cl = bl
	edi = edi >>u cl
	SCZO = cond(edi)
	ecx = (word32) Mem0[eax:byte]
	edi = Mem0[edx + edi * 0x00000004:word32]
	ecx = (word32) Mem0[edi + ecx * 0x0002:word16]
	Mem0[eax + 0x00000001:byte] = cl
	Mem0[eax:byte] = ch
	edi = (word32) Mem0[eax + 0x00000003:byte]
	eax = eax + 0x00000002
	SCZO = cond(eax)
	cl = bl
	edi = edi >>u cl
	SCZO = cond(edi)
	ecx = (word32) Mem0[eax:byte]
	edi = Mem0[edx + edi * 0x00000004:word32]
	ecx = (word32) Mem0[edi + ecx * 0x0002:word16]
	Mem0[eax:byte] = ch
	Mem0[eax + 0x00000001:byte] = cl
	eax = eax + 0x00000004
	SCZO = cond(eax)
	esi = esi - 0x00000001
	SCZO = cond(esi)
	branch Test(NE,Z) l0040E730
	// succ:  l0040E783 l0040E730
l0040E783:
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	return
	// succ:  fn0040E5E0_exit
l0040E78B:
	SCZO = cond(al - 0x08)
	eax = Mem0[esp + 0x00000024:word32]
	branch Test(NE,Z) l0040E7B8
	// succ:  l0040E793 l0040E7B8
l0040E793:
	SZO = cond(esi & esi)
	C = false
	branch Test(ULE,CZ) l0040E96F
	// succ:  l0040E79B l0040E96F
l0040E79B:
	// succ:  l0040E7A0
l0040E7A0:
	edx = (word32) Mem0[eax:byte]
	cl = Mem0[edx + edi:byte]
	Mem0[eax:byte] = cl
	eax = eax + 0x00000002
	SCZO = cond(eax)
	esi = esi - 0x00000001
	SCZO = cond(esi)
	branch Test(NE,Z) l0040E7A0
	// succ:  l0040E7B0 l0040E7A0
l0040E7B0:
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	return
	// succ:  fn0040E5E0_exit
l0040E7B8:
	SZO = cond(esi & esi)
	C = false
	branch Test(ULE,CZ) l0040E96F
	// succ:  l0040E7C0 l0040E96F
l0040E7C0:
	ebx = (word32) Mem0[esp + 0x00000030:byte]
	// succ:  l0040E7C5
l0040E7C5:
	edi = (word32) Mem0[eax + 0x00000001:byte]
	cl = bl
	edi = edi >>u cl
	SCZO = cond(edi)
	ecx = (word32) Mem0[eax:byte]
	edi = Mem0[edx + edi * 0x00000004:word32]
	ecx = (word32) Mem0[edi + ecx * 0x0002:word16]
	Mem0[eax:byte] = ch
	Mem0[eax + 0x00000001:byte] = cl
	eax = eax + 0x00000004
	SCZO = cond(eax)
	esi = esi - 0x00000001
	SCZO = cond(esi)
	branch Test(NE,Z) l0040E7C5
	// succ:  l0040E7E4 l0040E7C5
l0040E7E4:
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	return
	// succ:  fn0040E5E0_exit
l0040E7EC:
	SCZO = cond(al - 0x02)
	eax = Mem0[esp + 0x00000024:word32]
	branch Test(NE,Z) l0040E8C7
	// succ:  l0040E7F8 l0040E8C7
l0040E7F8:
	SZO = cond(esi & esi)
	C = false
	Mem0[esp + 0x00000010:word32] = eax
	branch Test(ULE,CZ) l0040E8C7
	// succ:  l0040E804 l0040E8C7
l0040E804:
	ecx = esi - 0x00000001
	ecx = ecx >>u 0x00000002
	SCZO = cond(ecx)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	Mem0[esp + 0x00000014:word32] = ecx
	// succ:  l0040E811
l0040E811:
	eax = (word32) Mem0[eax:byte]
	edx = eax
	edx = edx & 0x0000000C
	SZO = cond(edx)
	C = false
	ecx = eax
	esi = eax
	eax = eax & 0x00000003
	SZO = cond(eax)
	C = false
	ebx = 0x00000000 + edx * 0x00000004
	ebx = ebx | edx
	SZO = cond(ebx)
	C = false
	ebx = ebx + ebx
	SCZO = cond(ebx)
	ebx = ebx + ebx
	SCZO = cond(ebx)
	ebp = edx
	ebp = ebp >> 0x00000002
	SCZO = cond(ebp)
	ebx = ebx | ebp
	SZO = cond(ebx)
	C = false
	ebx = ebx | edx
	SZO = cond(ebx)
	C = false
	dl = Mem0[ebx + edi:byte]
	ebx = 0x00000000 + eax * 0x00000004
	ebx = ebx | eax
	SZO = cond(ebx)
	C = false
	ebx = ebx + ebx
	SCZO = cond(ebx)
	ebx = ebx + ebx
	SCZO = cond(ebx)
	ebx = ebx | eax
	SZO = cond(ebx)
	C = false
	ebx = ebx + ebx
	SCZO = cond(ebx)
	ebx = ebx + ebx
	SCZO = cond(ebx)
	ebx = ebx | eax
	SZO = cond(ebx)
	C = false
	eax = (word32) Mem0[ebx + edi:byte]
	al = al >>u 0x02
	SCZO = cond(al)
	dl = dl & 0xCF
	SZO = cond(dl)
	C = false
	dl = dl | al
	SZO = cond(dl)
	C = false
	esi = esi & 0x00000030
	SZO = cond(esi)
	C = false
	eax = esi
	eax = eax >> 0x00000002
	SCZO = cond(eax)
	eax = eax | esi
	SZO = cond(eax)
	C = false
	eax = eax >> 0x00000002
	SCZO = cond(eax)
	ebx = 0x00000000 + esi * 0x00000004
	eax = eax | ebx
	SZO = cond(eax)
	C = false
	eax = eax | esi
	SZO = cond(eax)
	C = false
	eax = (word32) Mem0[eax + edi:byte]
	al = al & 0xC3
	SZO = cond(al)
	C = false
	ecx = ecx & 0x000000C0
	SZO = cond(ecx)
	C = false
	dl = dl >>u 0x02
	SCZO = cond(dl)
	dl = dl | al
	SZO = cond(dl)
	C = false
	eax = ecx
	eax = eax >> 0x00000002
	SCZO = cond(eax)
	eax = eax | ecx
	SZO = cond(eax)
	C = false
	eax = eax >> 0x00000002
	SCZO = cond(eax)
	eax = eax | ecx
	SZO = cond(eax)
	C = false
	eax = eax >> 0x00000002
	SCZO = cond(eax)
	eax = eax | ecx
	SZO = cond(eax)
	C = false
	cl = Mem0[eax + edi:byte]
	eax = Mem0[esp + 0x00000010:word32]
	dl = dl >>u 0x02
	SCZO = cond(dl)
	cl = cl & 0xC0
	SZO = cond(cl)
	C = false
	dl = dl | cl
	SZO = cond(dl)
	C = false
	Mem0[eax:byte] = dl
	eax = eax + 0x00000001
	SCZO = cond(eax)
	v18 = Mem0[esp + 0x00000014:word32] - 0x00000001
	Mem0[esp + 0x00000014:word32] = v18
	SCZO = cond(v18)
	Mem0[esp + 0x00000010:word32] = eax
	branch Test(NE,Z) l0040E811
	// succ:  l0040E8B7 l0040E811
l0040E8B7:
	edx = Mem0[esp + 0x0000002C:word32]
	eax = Mem0[esp + 0x00000024:word32]
	ebp = Mem0[esp + 0x00000020:word32]
	esi = Mem0[esp + 0x00000018:word32]
	// succ:  l0040E8C7
l0040E8C7:
	cl = Mem0[ebp + 0x00000009:byte]
	SCZO = cond(cl - 0x04)
	branch Test(NE,Z) l0040E91D
	// succ:  l0040E8CF l0040E91D
l0040E8CF:
	SZO = cond(esi & esi)
	C = false
	edx = eax
	branch Test(ULE,CZ) l0040E96F
	// succ:  l0040E8D9 l0040E96F
l0040E8D9:
	esi = esi + 0xFFFFFFFF
	SCZO = cond(esi)
	esi = esi >>u 0x00000001
	SCZO = cond(esi)
	esi = esi + 0x00000001
	SCZO = cond(esi)
	// succ:  l0040E8E1
l0040E8E1:
	eax = (word32) Mem0[edx:byte]
	ecx = eax
	ecx = ecx & 0x000000F0
	SZO = cond(ecx)
	C = false
	ebx = ecx
	ebx = ebx >> 0x00000004
	SCZO = cond(ebx)
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
	cl = Mem0[ebx + edi:byte]
	eax = eax & 0x0000000F
	SZO = cond(eax)
	C = false
	ebx = eax
	ebx = ebx << 0x00000004
	SCZO = cond(ebx)
	ebx = ebx | eax
	SZO = cond(ebx)
	C = false
	al = Mem0[ebx + edi:byte]
	cl = cl & 0xF0
	SZO = cond(cl)
	C = false
	al = al >>u 0x04
	SCZO = cond(al)
	cl = cl | al
	SZO = cond(cl)
	C = false
	Mem0[edx:byte] = cl
	edx = edx + 0x00000001
	SCZO = cond(edx)
	esi = esi - 0x00000001
	SCZO = cond(esi)
	branch Test(NE,Z) l0040E8E1
	// succ:  l0040E915 l0040E8E1
l0040E915:
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	return
	// succ:  fn0040E5E0_exit
l0040E91D:
	SCZO = cond(cl - 0x08)
	branch Test(NE,Z) l0040E93E
	// succ:  l0040E922 l0040E93E
l0040E922:
	SZO = cond(esi & esi)
	C = false
	branch Test(ULE,CZ) l0040E96F
	// succ:  l0040E926 l0040E96F
l0040E926:
	ecx = (word32) Mem0[eax:byte]
	dl = Mem0[ecx + edi:byte]
	Mem0[eax:byte] = dl
	eax = eax + 0x00000001
	SCZO = cond(eax)
	esi = esi - 0x00000001
	SCZO = cond(esi)
	branch Test(NE,Z) l0040E926
	// succ:  l0040E936 l0040E926
l0040E936:
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	return
	// succ:  fn0040E5E0_exit
l0040E93E:
	SCZO = cond(cl - 0x10)
	branch Test(NE,Z) l0040E96F
	// succ:  l0040E943 l0040E96F
l0040E943:
	SZO = cond(esi & esi)
	C = false
	branch Test(ULE,CZ) l0040E96F
	// succ:  l0040E947 l0040E96F
l0040E947:
	ebx = (word32) Mem0[esp + 0x00000030:byte]
	esp = esp + 0x00000000
	// succ:  l0040E950
l0040E950:
	edi = (word32) Mem0[eax + 0x00000001:byte]
	cl = bl
	edi = edi >>u cl
	SCZO = cond(edi)
	ecx = (word32) Mem0[eax:byte]
	edi = Mem0[edx + edi * 0x00000004:word32]
	ecx = (word32) Mem0[edi + ecx * 0x0002:word16]
	Mem0[eax:byte] = ch
	Mem0[eax + 0x00000001:byte] = cl
	eax = eax + 0x00000002
	SCZO = cond(eax)
	esi = esi - 0x00000001
	SCZO = cond(esi)
	branch Test(NE,Z) l0040E950
	// succ:  l0040E96F l0040E950
l0040E96F:
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l0040E970
l0040E970:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	return
	// succ:  fn0040E5E0_exit
fn0040E5E0_exit:


// fn0040E9A0
// Return size: 4
void fn0040E9A0()
fn0040E9A0_entry:
	// succ:  l0040E9A0
l0040E9A0:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = Mem0[esp + 0x0000000C:word32]
	SCZO = cond(Mem0[ebx + 0x00000008:byte] - 0x03)
	edx = Mem0[ebx:word32]
	branch Test(NE,Z) l0040EBE5
	// succ:  l0040E9B2 l0040EBE5
l0040E9B2:
	al = Mem0[ebx + 0x00000009:byte]
	SCZO = cond(al - 0x08)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = Mem0[esp + 0x00000014:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	branch Test(UGE,C) l0040EACA
	// succ:  l0040E9C4 l0040EACA
l0040E9C4:
	eax = (word32) al
	eax = eax - 0x00000001
	SCZO = cond(eax)
	branch Test(EQ,Z) l0040EA76
	// succ:  l0040E9D0 l0040EA76
l0040E9D0:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	branch Test(EQ,Z) l0040EA29
	// succ:  l0040E9D5 l0040EA29
l0040E9D5:
	eax = eax - 0x00000002
	SCZO = cond(eax)
	branch Test(NE,Z) l0040EABF
	// succ:  l0040E9DE l0040EABF
l0040E9DE:
	eax = edx
	eax = eax & 0x00000001
	SZO = cond(eax)
	C = false
	esi = edx - 0x00000001
	esi = esi >>u 0x00000001
	SCZO = cond(esi)
	eax = eax + eax
	SCZO = cond(eax)
	esi = esi + ebp
	SCZO = cond(esi)
	eax = eax + eax
	SCZO = cond(eax)
	SZO = cond(edx & edx)
	C = false
	edi = edx - 0x00000001 + ebp
	branch Test(ULE,CZ) l0040EABF
	// succ:  l0040E9FA l0040EABF
l0040E9FA:
	Mem0[esp + 0x00000010:word32] = edx
	edi = edi
	// succ:  l0040EA00
l0040EA00:
	bl = Mem0[esi:byte]
	cl = al
	bl = bl >>u cl
	SCZO = cond(bl)
	bl = bl & 0x0F
	SZO = cond(bl)
	C = false
	SCZO = cond(eax - 0x00000004)
	Mem0[edi:byte] = bl
	branch Test(NE,Z) l0040EA17
	// succ:  l0040EA10 l0040EA17
l0040EA10:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	esi = esi - 0x00000001
	SCZO = cond(esi)
	goto l0040EA1A
	// succ:  l0040EA1A
l0040EA17:
	eax = eax + 0x00000004
	SCZO = cond(eax)
	// succ:  l0040EA1A
l0040EA1A:
	edi = edi - 0x00000001
	SCZO = cond(edi)
	v18 = Mem0[esp + 0x00000010:word32] - 0x00000001
	Mem0[esp + 0x00000010:word32] = v18
	SCZO = cond(v18)
	branch Test(NE,Z) l0040EA00
	// succ:  l0040EA24 l0040EA00
l0040EA24:
	goto l0040EABB
	// succ:  l0040EABB
l0040EA29:
	ecx = edx - 0x00000001
	ecx = ecx & 0x00000003
	SZO = cond(ecx)
	C = false
	esi = edx - 0x00000001
	eax = 0x00000003
	esi = esi >>u 0x00000002
	SCZO = cond(esi)
	eax = eax - ecx
	SCZO = cond(eax)
	esi = esi + ebp
	SCZO = cond(esi)
	eax = eax + eax
	SCZO = cond(eax)
	SZO = cond(edx & edx)
	C = false
	edi = edx - 0x00000001 + ebp
	branch Test(ULE,CZ) l0040EABF
	// succ:  l0040EA48 l0040EABF
l0040EA48:
	Mem0[esp + 0x00000010:word32] = edx
	esp = esp + 0x00000000
	// succ:  l0040EA50
l0040EA50:
	bl = Mem0[esi:byte]
	cl = al
	bl = bl >>u cl
	SCZO = cond(bl)
	bl = bl & 0x03
	SZO = cond(bl)
	C = false
	SCZO = cond(eax - 0x00000006)
	Mem0[edi:byte] = bl
	branch Test(NE,Z) l0040EA67
	// succ:  l0040EA60 l0040EA67
l0040EA60:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	esi = esi - 0x00000001
	SCZO = cond(esi)
	goto l0040EA6A
	// succ:  l0040EA6A
l0040EA67:
	eax = eax + 0x00000002
	SCZO = cond(eax)
	// succ:  l0040EA6A
l0040EA6A:
	edi = edi - 0x00000001
	SCZO = cond(edi)
	v19 = Mem0[esp + 0x00000010:word32] - 0x00000001
	Mem0[esp + 0x00000010:word32] = v19
	SCZO = cond(v19)
	branch Test(NE,Z) l0040EA50
	// succ:  l0040EA74 l0040EA50
l0040EA74:
	goto l0040EABB
	// succ:  l0040EABB
l0040EA76:
	esi = edx - 0x00000001
	ecx = edx - 0x00000001
	esi = esi >>u 0x00000003
	SCZO = cond(esi)
	ecx = ecx & 0x00000007
	SZO = cond(ecx)
	C = false
	eax = 0x00000007
	esi = esi + ebp
	SCZO = cond(esi)
	eax = eax - ecx
	SCZO = cond(eax)
	SZO = cond(edx & edx)
	C = false
	edi = edx - 0x00000001 + ebp
	branch Test(ULE,CZ) l0040EABF
	// succ:  l0040EA93 l0040EABF
l0040EA93:
	Mem0[esp + 0x00000010:word32] = edx
	// succ:  l0040EA97
l0040EA97:
	bl = Mem0[esi:byte]
	cl = al
	bl = bl >>u cl
	SCZO = cond(bl)
	bl = bl & 0x01
	SZO = cond(bl)
	C = false
	SCZO = cond(eax - 0x00000007)
	Mem0[edi:byte] = bl
	branch Test(NE,Z) l0040EAAE
	// succ:  l0040EAA7 l0040EAAE
l0040EAA7:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	esi = esi - 0x00000001
	SCZO = cond(esi)
	goto l0040EAB1
	// succ:  l0040EAB1
l0040EAAE:
	eax = eax + 0x00000001
	SCZO = cond(eax)
	// succ:  l0040EAB1
l0040EAB1:
	edi = edi - 0x00000001
	SCZO = cond(edi)
	v20 = Mem0[esp + 0x00000010:word32] - 0x00000001
	Mem0[esp + 0x00000010:word32] = v20
	SCZO = cond(v20)
	branch Test(NE,Z) l0040EA97
	// succ:  l0040EABB l0040EA97
l0040EABB:
	ebx = Mem0[esp + 0x00000018:word32]
	ebx = Mem0[esp + 0x00000018:word32]
	// succ:  l0040EABF
l0040EABF:
	Mem0[ebx + 0x00000009:byte] = 0x08
	Mem0[ebx + 0x0000000B:byte] = 0x08
	Mem0[ebx + 0x00000004:word32] = edx
	// succ:  l0040EACA
l0040EACA:
	SCZO = cond(Mem0[ebx + 0x00000009:byte] - 0x08)
	branch Test(NE,Z) l0040EBE2
	// succ:  l0040EAD4 l0040EBE2
l0040EAD4:
	SCZO = cond(Mem0[esp + 0x00000024:word32] - 0x00000000)
	ecx = edx - 0x00000001 + ebp
	branch Test(EQ,Z) l0040EB71
	// succ:  l0040EAE3 l0040EB71
l0040EAE3:
	SZO = cond(edx & edx)
	C = false
	esi = 0x00000000 + edx * 0x00000004
	Mem0[esp + 0x00000010:word32] = esi
	eax = esi - 0x00000001 + ebp
	branch Test(ULE,CZ) l0040EB58
	// succ:  l0040EAF6 l0040EB58
l0040EAF6:
	edi = Mem0[esp + 0x00000020:word32]
	ebp = edx
	edx = Mem0[esp + 0x00000028:word32]
	// succ:  l0040EB00
l0040EB00:
	esi = (word32) Mem0[ecx:byte]
	SCZO = cond(esi - edx)
	branch Test(LT,SO) l0040EB0C
	// succ:  l0040EB07 l0040EB0C
l0040EB07:
	Mem0[eax:byte] = 0xFF
	goto l0040EB15
	// succ:  l0040EB15
l0040EB0C:
	ebx = Mem0[esp + 0x00000024:word32]
	bl = Mem0[esi + ebx:byte]
	Mem0[eax:byte] = bl
	// succ:  l0040EB15
l0040EB15:
	esi = (word32) Mem0[ecx:byte]
	ebx = edi + esi * 0x00000002
	ebx = (word32) Mem0[esi + 0x00000002 + ebx:byte]
	Mem0[eax - 0x00000001:byte] = bl
	esi = (word32) Mem0[ecx:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ebx = edi + esi * 0x00000002
	ebx = (word32) Mem0[esi + 0x00000001 + ebx:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = bl
	esi = (word32) Mem0[ecx:byte]
	ebx = edi + esi * 0x00000002
	ebx = (word32) Mem0[esi + ebx:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = bl
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	ebp = ebp - 0x00000001
	SCZO = cond(ebp)
	branch Test(NE,Z) l0040EB00
	// succ:  l0040EB50 l0040EB00
l0040EB50:
	ebx = Mem0[esp + 0x00000018:word32]
	esi = Mem0[esp + 0x00000010:word32]
	// succ:  l0040EB58
l0040EB58:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[ebx + 0x00000004:word32] = esi
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[ebx + 0x0000000B:byte] = 0x20
	Mem0[ebx + 0x00000008:byte] = 0x06
	Mem0[ebx + 0x0000000A:byte] = 0x04
	Mem0[ebx + 0x00000009:byte] = 0x08
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040E9A0_exit
l0040EB71:
	SZO = cond(edx & edx)
	C = false
	esi = edx + edx * 0x00000002
	Mem0[esp + 0x00000010:word32] = esi
	eax = esi - 0x00000001 + ebp
	branch Test(ULE,CZ) l0040EBCF
	// succ:  l0040EB80 l0040EBCF
l0040EB80:
	edi = Mem0[esp + 0x00000020:word32]
	ebp = edx
	// succ:  l0040EB90
l0040EB90:
	esi = (word32) Mem0[ecx:byte]
	edx = edi + esi * 0x00000002
	edx = (word32) Mem0[esi + 0x00000002 + edx:byte]
	Mem0[eax:byte] = dl
	esi = (word32) Mem0[ecx:byte]
	edx = edi + esi * 0x00000002
	edx = (word32) Mem0[esi + 0x00000001 + edx:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = dl
	esi = (word32) Mem0[ecx:byte]
	edx = edi + esi * 0x00000002
	edx = (word32) Mem0[esi + edx:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = dl
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	ebp = ebp - 0x00000001
	SCZO = cond(ebp)
	branch Test(NE,Z) l0040EB90
	// succ:  l0040EBC7 l0040EB90
l0040EBC7:
	ebx = Mem0[esp + 0x00000018:word32]
	esi = Mem0[esp + 0x00000010:word32]
	// succ:  l0040EBCF
l0040EBCF:
	Mem0[ebx + 0x0000000B:byte] = 0x18
	Mem0[ebx + 0x00000008:byte] = 0x02
	Mem0[ebx + 0x0000000A:byte] = 0x03
	Mem0[ebx + 0x00000004:word32] = esi
	Mem0[ebx + 0x00000009:byte] = 0x08
	// succ:  l0040EBE2
l0040EBE2:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l0040EBE5
l0040EBE5:
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040E9A0_exit
fn0040E9A0_exit:


// fn0040EBF0
// Return size: 4
void fn0040EBF0()
fn0040EBF0_entry:
	// succ:  l0040EBF0
l0040EBF0:
	esp = fp
	edx = Mem0[esp + 0x00000004:word32]
	al = Mem0[edx + 0x00000008:byte]
	esp = esp - 0x00000008
	SCZO = cond(esp)
	SZO = cond(al & al)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[edx:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	branch Test(NE,Z) l0040EE5E
	// succ:  l0040EC08 l0040EE5E
l0040EC08:
	ecx = Mem0[esp + 0x00000024:word32]
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l0040EC16
	// succ:  l0040EC10 l0040EC16
l0040EC10:
	edi = (word32) Mem0[ecx + 0x00000008:word16]
	goto l0040EC22
	// succ:  l0040EC22
l0040EC16:
	Mem0[esp + 0x00000010:word32] = 0x00000000
	edi = Mem0[esp + 0x00000010:word32]
	// succ:  l0040EC22
l0040EC22:
	al = Mem0[edx + 0x00000009:byte]
	SCZO = cond(al - 0x08)
	ebx = Mem0[esp + 0x00000020:word32]
	branch Test(UGE,C) l0040ED98
	// succ:  l0040EC31 l0040ED98
l0040EC31:
	eax = (word32) al
	eax = eax - 0x00000001
	SCZO = cond(eax)
	branch Test(EQ,Z) l0040ED24
	// succ:  l0040EC3D l0040ED24
l0040EC3D:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	branch Test(EQ,Z) l0040ECB7
	// succ:  l0040EC42 l0040ECB7
l0040EC42:
	eax = eax - 0x00000002
	SCZO = cond(eax)
	branch Test(NE,Z) l0040ED89
	// succ:  l0040EC4B l0040ED89
l0040EC4B:
	eax = edi
	edx = esi - 0x00000001
	edx = edx & 0x00000001
	SZO = cond(edx)
	C = false
	eax = eax << 0x00000004
	SCZO = cond(eax)
	eax = eax + edi
	SCZO = cond(eax)
	edx = edx + edx
	SCZO = cond(edx)
	edx = edx + edx
	SCZO = cond(edx)
	ecx = (word32) ax
	edi = esi - 0x00000001
	eax = edx
	edi = edi >>u 0x00000001
	SCZO = cond(edi)
	edx = 0x00000004
	edi = edi + ebx
	SCZO = cond(edi)
	edx = edx - eax
	SCZO = cond(edx)
	SZO = cond(esi & esi)
	C = false
	Mem0[esp + 0x00000010:word32] = ecx
	ebp = esi - 0x00000001 + ebx
	branch Test(ULE,CZ) l0040ED81
	// succ:  l0040EC7F l0040ED81
l0040EC7F:
	Mem0[esp + 0x00000014:word32] = esi
	// succ:  l0040EC83
l0040EC83:
	eax = (word32) Mem0[edi:byte]
	cl = dl
	eax = eax >>u cl
	SCZO = cond(eax)
	eax = eax & 0x0000000F
	SZO = cond(eax)
	C = false
	cl = al
	cl = cl << 0x04
	SCZO = cond(cl)
	cl = cl | al
	SZO = cond(cl)
	C = false
	SCZO = cond(edx - 0x00000004)
	Mem0[ebp + 0x00000000:byte] = cl
	branch Test(NE,Z) l0040ECA3
	// succ:  l0040EC9C l0040ECA3
l0040EC9C:
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	edi = edi - 0x00000001
	SCZO = cond(edi)
	goto l0040ECA8
	// succ:  l0040ECA8
l0040ECA3:
	edx = 0x00000004
	// succ:  l0040ECA8
l0040ECA8:
	ebp = ebp - 0x00000001
	SCZO = cond(ebp)
	v22 = Mem0[esp + 0x00000014:word32] - 0x00000001
	Mem0[esp + 0x00000014:word32] = v22
	SCZO = cond(v22)
	branch Test(NE,Z) l0040EC83
	// succ:  l0040ECB2 l0040EC83
l0040ECB2:
	goto l0040ED81
	// succ:  l0040ED81
l0040ECB7:
	edi = edi *s 0x00000055
	SCZO = cond(edi)
	edx = (word32) di
	Mem0[esp + 0x00000010:word32] = edx
	eax = esi - 0x00000001
	eax = eax & 0x00000003
	SZO = cond(eax)
	C = false
	edi = esi - 0x00000001
	edx = 0x00000003
	edi = edi >>u 0x00000002
	SCZO = cond(edi)
	edx = edx - eax
	SCZO = cond(edx)
	edi = edi + ebx
	SCZO = cond(edi)
	edx = edx + edx
	SCZO = cond(edx)
	SZO = cond(esi & esi)
	C = false
	ebp = esi - 0x00000001 + ebx
	branch Test(ULE,CZ) l0040ED81
	// succ:  l0040ECE4 l0040ED81
l0040ECE4:
	Mem0[esp + 0x00000014:word32] = esi
	// succ:  l0040ECE8
l0040ECE8:
	eax = (word32) Mem0[edi:byte]
	cl = dl
	eax = eax >>u cl
	SCZO = cond(eax)
	eax = eax & 0x00000003
	SZO = cond(eax)
	C = false
	cl = al
	cl = cl + cl
	SCZO = cond(cl)
	cl = cl + cl
	SCZO = cond(cl)
	cl = cl | al
	SZO = cond(cl)
	C = false
	cl = cl + cl
	SCZO = cond(cl)
	cl = cl + cl
	SCZO = cond(cl)
	cl = cl | al
	SZO = cond(cl)
	C = false
	cl = cl + cl
	SCZO = cond(cl)
	cl = cl + cl
	SCZO = cond(cl)
	cl = cl | al
	SZO = cond(cl)
	C = false
	SCZO = cond(edx - 0x00000006)
	Mem0[ebp + 0x00000000:byte] = cl
	branch Test(NE,Z) l0040ED15
	// succ:  l0040ED0E l0040ED15
l0040ED0E:
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	edi = edi - 0x00000001
	SCZO = cond(edi)
	goto l0040ED18
	// succ:  l0040ED18
l0040ED15:
	edx = edx + 0x00000002
	SCZO = cond(edx)
	// succ:  l0040ED18
l0040ED18:
	ebp = ebp - 0x00000001
	SCZO = cond(ebp)
	v25 = Mem0[esp + 0x00000014:word32] - 0x00000001
	Mem0[esp + 0x00000014:word32] = v25
	SCZO = cond(v25)
	branch Test(NE,Z) l0040ECE8
	// succ:  l0040ED22 l0040ECE8
l0040ED22:
	goto l0040ED81
	// succ:  l0040ED81
l0040ED24:
	edi = edi *s 0x000000FF
	SCZO = cond(edi)
	eax = (word32) di
	Mem0[esp + 0x00000010:word32] = eax
	edi = esi - 0x00000001
	ecx = esi - 0x00000001
	edi = edi >>u 0x00000003
	SCZO = cond(edi)
	ecx = ecx & 0x00000007
	SZO = cond(ecx)
	C = false
	eax = 0x00000007
	edi = edi + ebx
	SCZO = cond(edi)
	eax = eax - ecx
	SCZO = cond(eax)
	SZO = cond(esi & esi)
	C = false
	ebp = esi - 0x00000001 + ebx
	branch Test(ULE,CZ) l0040ED85
	// succ:  l0040ED4E l0040ED85
l0040ED4E:
	Mem0[esp + 0x00000014:word32] = esi
	// succ:  l0040ED52
l0040ED52:
	dl = Mem0[edi:byte]
	cl = al
	dl = dl >>u cl
	SCZO = cond(dl)
	dl = dl & 0x01
	SZO = cond(dl)
	C = false
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	dl = dl - dl - C
	SCZO = cond(dl)
	edx = edx & 0x000000FF
	SZO = cond(edx)
	C = false
	SCZO = cond(eax - 0x00000007)
	Mem0[ebp + 0x00000000:byte] = dl
	branch Test(NE,Z) l0040ED74
	// succ:  l0040ED6D l0040ED74
l0040ED6D:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	edi = edi - 0x00000001
	SCZO = cond(edi)
	goto l0040ED77
	// succ:  l0040ED77
l0040ED74:
	eax = eax + 0x00000001
	SCZO = cond(eax)
	// succ:  l0040ED77
l0040ED77:
	ebp = ebp - 0x00000001
	SCZO = cond(ebp)
	v24 = Mem0[esp + 0x00000014:word32] - 0x00000001
	Mem0[esp + 0x00000014:word32] = v24
	SCZO = cond(v24)
	branch Test(NE,Z) l0040ED52
	// succ:  l0040ED81 l0040ED52
l0040ED81:
	edx = Mem0[esp + 0x0000001C:word32]
	// succ:  l0040ED85
l0040ED85:
	edi = Mem0[esp + 0x00000010:word32]
	// succ:  l0040ED89
l0040ED89:
	ecx = Mem0[esp + 0x00000024:word32]
	Mem0[edx + 0x00000009:byte] = 0x08
	Mem0[edx + 0x0000000B:byte] = 0x08
	Mem0[edx + 0x00000004:word32] = esi
	// succ:  l0040ED98
l0040ED98:
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l0040EFE3
	// succ:  l0040EDA0 l0040EFE3
l0040EDA0:
	al = Mem0[edx + 0x00000009:byte]
	SCZO = cond(al - 0x08)
	branch Test(NE,Z) l0040EDF3
	// succ:  l0040EDA7 l0040EDF3
l0040EDA7:
	SZO = cond(esi & esi)
	C = false
	ecx = esi - 0x00000001 + ebx
	eax = ebx - 0x00000001 + esi * 0x00000002
	branch Test(ULE,CZ) l0040EE4E
	// succ:  l0040EDB7 l0040EE4E
l0040EDB7:
	ebp = esi
	esp = esp + 0x00000000
	// succ:  l0040EDC0
l0040EDC0:
	bx = (word16) Mem0[ecx:byte]
	SCZO = cond(bx - di)
	branch Test(NE,Z) l0040EDCE
	// succ:  l0040EDC9 l0040EDCE
l0040EDC9:
	Mem0[eax:byte] = 0x00
	goto l0040EDD1
	// succ:  l0040EDD1
l0040EDCE:
	Mem0[eax:byte] = 0xFF
	// succ:  l0040EDD1
l0040EDD1:
	bl = Mem0[ecx:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = bl
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	ebp = ebp - 0x00000001
	SCZO = cond(ebp)
	branch Test(NE,Z) l0040EDC0
	// succ:  l0040EDE3 l0040EDC0
l0040EDE3:
	al = Mem0[edx + 0x00000009:byte]
	Mem0[edx + 0x00000008:byte] = 0x04
	Mem0[edx + 0x0000000A:byte] = 0x02
	goto l0040EFBA
	// succ:  l0040EFBA
l0040EDF3:
	SCZO = cond(al - 0x10)
	branch Test(NE,Z) l0040EE4E
	// succ:  l0040EDF7 l0040EE4E
l0040EDF7:
	SZO = cond(esi & esi)
	C = false
	eax = Mem0[edx + 0x00000004:word32]
	ecx = eax - 0x00000001 + ebx
	eax = ebx - 0x00000001 + eax * 0x00000002
	branch Test(ULE,CZ) l0040EE4E
	// succ:  l0040EE06 l0040EE4E
l0040EE06:
	ebp = (word32) di
	edi = esi
	// succ:  l0040EE10
l0040EE10:
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	bh = Mem0[ecx - 0x00000001:byte]
	bl = Mem0[ecx:byte]
	SCZO = cond(ebx - ebp)
	branch Test(NE,Z) l0040EE26
	// succ:  l0040EE1B l0040EE26
l0040EE1B:
	Mem0[eax:byte] = 0x00
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = 0x00
	goto l0040EE2F
	// succ:  l0040EE2F
l0040EE26:
	Mem0[eax:byte] = 0xFF
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = 0xFF
	// succ:  l0040EE2F
l0040EE2F:
	ebx = (word32) Mem0[ecx:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = bl
	ebx = (word32) Mem0[ecx - 0x00000001:byte]
	ecx = ecx + 0xFFFFFFFF
	SCZO = cond(ecx)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = bl
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	edi = edi - 0x00000001
	SCZO = cond(edi)
	branch Test(NE,Z) l0040EE10
	// succ:  l0040EE4E l0040EE10
l0040EE4E:
	al = Mem0[edx + 0x00000009:byte]
	Mem0[edx + 0x00000008:byte] = 0x04
	Mem0[edx + 0x0000000A:byte] = 0x02
	al = Mem0[edx + 0x00000009:byte]
	Mem0[edx + 0x00000008:byte] = 0x04
	Mem0[edx + 0x0000000A:byte] = 0x02
	goto l0040EFBA
	// succ:  l0040EFBA
l0040EE5E:
	SCZO = cond(al - 0x02)
	branch Test(NE,Z) l0040EFE3
	// succ:  l0040EE66 l0040EFE3
l0040EE66:
	ebp = Mem0[esp + 0x00000024:word32]
	SZO = cond(ebp & ebp)
	C = false
	branch Test(EQ,Z) l0040EFE3
	// succ:  l0040EE72 l0040EFE3
l0040EE72:
	al = Mem0[edx + 0x00000009:byte]
	SCZO = cond(al - 0x08)
	branch Test(NE,Z) l0040EEEA
	// succ:  l0040EE79 l0040EEEA
l0040EE79:
	SZO = cond(esi & esi)
	C = false
	eax = Mem0[esp + 0x00000020:word32]
	ecx = Mem0[edx + 0x00000004:word32]
	ecx = ecx - 0x00000001 + eax
	eax = eax - 0x00000001 + esi * 0x00000004
	branch Test(ULE,CZ) l0040EFAD
	// succ:  l0040EE90 l0040EFAD
l0040EE90:
	edi = esi
	// succ:  l0040EE92
l0040EE92:
	bx = (word16) Mem0[ecx - 0x00000002:byte]
	SCZO = cond(bx - Mem0[ebp + 0x00000002:word16])
	branch Test(NE,Z) l0040EEB7
	// succ:  l0040EE9D l0040EEB7
l0040EE9D:
	bx = (word16) Mem0[ecx - 0x00000001:byte]
	SCZO = cond(bx - Mem0[ebp + 0x00000004:word16])
	branch Test(NE,Z) l0040EEB7
	// succ:  l0040EEA8 l0040EEB7
l0040EEA8:
	bx = (word16) Mem0[ecx:byte]
	SCZO = cond(bx - Mem0[ebp + 0x00000006:word16])
	branch Test(NE,Z) l0040EEB7
	// succ:  l0040EEB2 l0040EEB7
l0040EEB2:
	Mem0[eax:byte] = 0x00
	goto l0040EEBA
	// succ:  l0040EEBA
l0040EEB7:
	Mem0[eax:byte] = 0xFF
	// succ:  l0040EEBA
l0040EEBA:
	ebx = (word32) Mem0[ecx:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = bl
	ebx = (word32) Mem0[ecx - 0x00000001:byte]
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = bl
	ebx = (word32) Mem0[ecx - 0x00000001:byte]
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = bl
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	edi = edi - 0x00000001
	SCZO = cond(edi)
	branch Test(NE,Z) l0040EE92
	// succ:  l0040EEE5 l0040EE92
l0040EEE5:
	goto l0040EFAD
	// succ:  l0040EFAD
l0040EEEA:
	SCZO = cond(al - 0x10)
	branch Test(NE,Z) l0040EFAD
	// succ:  l0040EEF2 l0040EFAD
l0040EEF2:
	SZO = cond(esi & esi)
	C = false
	eax = Mem0[esp + 0x00000020:word32]
	ecx = Mem0[edx + 0x00000004:word32]
	ecx = ecx - 0x00000001 + eax
	eax = eax - 0x00000001 + esi * 0x00000008
	branch Test(ULE,CZ) l0040EFAD
	// succ:  l0040EF09 l0040EFAD
l0040EF09:
	edi = esi
	// succ:  l0040EF10
l0040EF10:
	ebx = (word32) Mem0[ebp + 0x00000002:word16]
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	dh = Mem0[ecx - 0x00000005:byte]
	dl = Mem0[ecx - 0x00000004:byte]
	SCZO = cond(edx - ebx)
	branch Test(NE,Z) l0040EF4A
	// succ:  l0040EF20 l0040EF4A
l0040EF20:
	ebx = (word32) Mem0[ebp + 0x00000004:word16]
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	dh = Mem0[ecx - 0x00000003:byte]
	dl = Mem0[ecx - 0x00000002:byte]
	SCZO = cond(edx - ebx)
	branch Test(NE,Z) l0040EF4A
	// succ:  l0040EF30 l0040EF4A
l0040EF30:
	ebx = (word32) Mem0[ebp + 0x00000006:word16]
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	dh = Mem0[ecx - 0x00000001:byte]
	dl = Mem0[ecx:byte]
	SCZO = cond(edx - ebx)
	branch Test(NE,Z) l0040EF4A
	// succ:  l0040EF3F l0040EF4A
l0040EF3F:
	Mem0[eax:byte] = 0x00
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = 0x00
	goto l0040EF53
	// succ:  l0040EF53
l0040EF4A:
	Mem0[eax:byte] = 0xFF
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = 0xFF
	// succ:  l0040EF53
l0040EF53:
	edx = (word32) Mem0[ecx:byte]
	Mem0[eax - 0x00000001:byte] = dl
	edx = (word32) Mem0[ecx - 0x00000001:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	Mem0[eax - 0x00000001:byte] = dl
	edx = (word32) Mem0[ecx - 0x00000001:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	Mem0[eax - 0x00000001:byte] = dl
	edx = (word32) Mem0[ecx - 0x00000001:byte]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = dl
	edx = (word32) Mem0[ecx - 0x00000001:byte]
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = dl
	edx = (word32) Mem0[ecx - 0x00000001:byte]
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = dl
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	edi = edi - 0x00000001
	SCZO = cond(edi)
	branch Test(NE,Z) l0040EF10
	// succ:  l0040EFA9 l0040EF10
l0040EFA9:
	edx = Mem0[esp + 0x0000001C:word32]
	// succ:  l0040EFAD
l0040EFAD:
	al = Mem0[edx + 0x00000009:byte]
	Mem0[edx + 0x00000008:byte] = 0x06
	Mem0[edx + 0x0000000A:byte] = 0x04
	al = al + al
	SCZO = cond(al)
	// succ:  l0040EFBA
l0040EFBA:
	al = al + al
	SCZO = cond(al)
	Mem0[edx + 0x0000000B:byte] = al
	SCZO = cond(al - 0x08)
	eax = (word32) al
	branch Test(ULT,C) l0040EFD7
	// succ:  l0040EFC6 l0040EFD7
l0040EFC6:
	eax = eax >>u 0x00000003
	SCZO = cond(eax)
	eax = eax *s esi
	SCZO = cond(eax)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[edx + 0x00000004:word32] = eax
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000008
	SCZO = cond(esp)
	return
	// succ:  fn0040EBF0_exit
l0040EFD7:
	eax = eax *s esi
	SCZO = cond(eax)
	eax = eax + 0x00000007
	SCZO = cond(eax)
	eax = eax >>u 0x00000003
	SCZO = cond(eax)
	Mem0[edx + 0x00000004:word32] = eax
	// succ:  l0040EFE3
l0040EFE3:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000008
	SCZO = cond(esp)
	return
	// succ:  fn0040EBF0_exit
fn0040EBF0_exit:


// fn0040EFF0
// Return size: 4
void fn0040EFF0()
fn0040EFF0_entry:
	// succ:  l0040EFF0
l0040EFF0:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	edx = Mem0[esp + 0x00000008:word32]
	al = Mem0[edx + 0x00000008:byte]
	SCZO = cond(al - 0x02)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = Mem0[edx:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = Mem0[esp + 0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	Mem0[esp + 0x00000010:word32] = ebx
	branch Test(NE,Z) l0040F08F
	// succ:  l0040F00E l0040F08F
l0040F00E:
	SZO = cond(ebp & ebp)
	C = false
	branch Test(EQ,Z) l0040F08F
	// succ:  l0040F012 l0040F08F
l0040F012:
	SCZO = cond(Mem0[edx + 0x00000009:byte] - 0x08)
	branch Test(NE,Z) l0040F08F
	// succ:  l0040F018 l0040F08F
l0040F018:
	SZO = cond(ebx & ebx)
	C = false
	ecx = Mem0[esp + 0x0000001C:word32]
	edi = ecx
	branch Test(ULE,CZ) l0040F067
	// succ:  l0040F022 l0040F067
l0040F022:
	eax = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[ecx + 0x00000001:byte]
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = (word32) Mem0[ecx + 0x00000001:byte]
	eax = eax & 0x000000F8
	SZO = cond(eax)
	C = false
	eax = eax << 0x00000005
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	esi = esi & 0x000000F8
	SZO = cond(esi)
	C = false
	eax = eax | esi
	SZO = cond(eax)
	C = false
	eax = eax + eax
	SCZO = cond(eax)
	edx = edx >> 0x00000003
	SCZO = cond(edx)
	eax = eax + eax
	SCZO = cond(eax)
	edx = edx & 0x0000001F
	SZO = cond(edx)
	C = false
	eax = eax | edx
	SZO = cond(eax)
	C = false
	al = Mem0[eax + ebp:byte]
	Mem0[edi:byte] = al
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edi = edi + 0x00000001
	SCZO = cond(edi)
	ebx = ebx - 0x00000001
	SCZO = cond(ebx)
	branch Test(NE,Z) l0040F022
	// succ:  l0040F05F l0040F022
l0040F05F:
	ebx = Mem0[esp + 0x00000010:word32]
	edx = Mem0[esp + 0x00000018:word32]
	// succ:  l0040F067
l0040F067:
	al = Mem0[edx + 0x00000009:byte]
	Mem0[edx + 0x0000000B:byte] = al
	SCZO = cond(al - 0x08)
	Mem0[edx + 0x00000008:byte] = 0x03
	Mem0[edx + 0x0000000A:byte] = 0x01
	eax = (word32) al
	branch Test(ULT,C) l0040F11C
	// succ:  l0040F080 l0040F11C
l0040F080:
	eax = eax >>u 0x00000003
	SCZO = cond(eax)
	eax = eax *s ebx
	SCZO = cond(eax)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[edx + 0x00000004:word32] = eax
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040EFF0_exit
l0040F08F:
	SCZO = cond(al - 0x06)
	branch Test(NE,Z) l0040F12E
	// succ:  l0040F097 l0040F12E
l0040F097:
	SZO = cond(ebp & ebp)
	C = false
	branch Test(EQ,Z) l0040F12E
	// succ:  l0040F09F l0040F12E
l0040F09F:
	SCZO = cond(Mem0[edx + 0x00000009:byte] - 0x08)
	branch Test(NE,Z) l0040F12E
	// succ:  l0040F0A9 l0040F12E
l0040F0A9:
	SZO = cond(ebx & ebx)
	C = false
	ecx = Mem0[esp + 0x0000001C:word32]
	edi = ecx
	branch Test(ULE,CZ) l0040F0F8
	// succ:  l0040F0B3 l0040F0F8
l0040F0B3:
	eax = (word32) Mem0[ecx:byte]
	esi = (word32) Mem0[ecx + 0x00000001:byte]
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = (word32) Mem0[ecx + 0x00000001:byte]
	eax = eax & 0x000000F8
	SZO = cond(eax)
	C = false
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	eax = eax << 0x00000005
	SCZO = cond(eax)
	esi = esi & 0x000000F8
	SZO = cond(esi)
	C = false
	eax = eax | esi
	SZO = cond(eax)
	C = false
	eax = eax + eax
	SCZO = cond(eax)
	edx = edx >> 0x00000003
	SCZO = cond(edx)
	edx = edx & 0x0000001F
	SZO = cond(edx)
	C = false
	eax = eax + eax
	SCZO = cond(eax)
	eax = eax | edx
	SZO = cond(eax)
	C = false
	dl = Mem0[eax + ebp:byte]
	Mem0[edi:byte] = dl
	ecx = ecx + 0x00000002
	SCZO = cond(ecx)
	edi = edi + 0x00000001
	SCZO = cond(edi)
	ebx = ebx - 0x00000001
	SCZO = cond(ebx)
	branch Test(NE,Z) l0040F0B3
	// succ:  l0040F0F0 l0040F0B3
l0040F0F0:
	ebx = Mem0[esp + 0x00000010:word32]
	edx = Mem0[esp + 0x00000018:word32]
	// succ:  l0040F0F8
l0040F0F8:
	al = Mem0[edx + 0x00000009:byte]
	Mem0[edx + 0x0000000B:byte] = al
	SCZO = cond(al - 0x08)
	Mem0[edx + 0x00000008:byte] = 0x03
	Mem0[edx + 0x0000000A:byte] = 0x01
	eax = (word32) al
	branch Test(ULT,C) l0040F11C
	// succ:  l0040F10D l0040F11C
l0040F10D:
	eax = eax >>u 0x00000003
	SCZO = cond(eax)
	eax = eax *s ebx
	SCZO = cond(eax)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[edx + 0x00000004:word32] = eax
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040EFF0_exit
l0040F11C:
	eax = eax *s ebx
	SCZO = cond(eax)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax + 0x00000007
	SCZO = cond(eax)
	eax = eax >>u 0x00000003
	SCZO = cond(eax)
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[edx + 0x00000004:word32] = eax
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040EFF0_exit
l0040F12E:
	SCZO = cond(al - 0x03)
	branch Test(NE,Z) l0040F158
	// succ:  l0040F132 l0040F158
l0040F132:
	esi = Mem0[esp + 0x00000024:word32]
	SZO = cond(esi & esi)
	C = false
	branch Test(EQ,Z) l0040F158
	// succ:  l0040F13A l0040F158
l0040F13A:
	SCZO = cond(Mem0[edx + 0x00000009:byte] - 0x08)
	branch Test(NE,Z) l0040F158
	// succ:  l0040F140 l0040F158
l0040F140:
	SZO = cond(ebx & ebx)
	C = false
	eax = Mem0[esp + 0x0000001C:word32]
	branch Test(ULE,CZ) l0040F158
	// succ:  l0040F148 l0040F158
l0040F148:
	ecx = (word32) Mem0[eax:byte]
	dl = Mem0[ecx + esi:byte]
	Mem0[eax:byte] = dl
	eax = eax + 0x00000001
	SCZO = cond(eax)
	ebx = ebx - 0x00000001
	SCZO = cond(ebx)
	branch Test(NE,Z) l0040F148
	// succ:  l0040F158 l0040F148
l0040F158:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040EFF0_exit
fn0040EFF0_exit:


// fn0040F160
// Return size: 4
void fn0040F160()
fn0040F160_entry:
	// succ:  l0040F160
l0040F160:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	__align(esp)
	rLoc1 = 0
	esp = esp - 0x00000034
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[ebp + 0x00000008:word32]
	FPUF = cond(rLoc1 - Mem0[esi + 0x0000015C:real32])
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	SCZO = FPUF
	branch Test(EQ,FPUF) l0040F870
	// succ:  l0040F182 l0040F870
l0040F182:
	edx = 0x00000008
	SCZO = cond(Mem0[esi + 0x00000127:byte] - dl)
	branch Test(UGT,CZ) l0040F373
	// succ:  l0040F193 l0040F373
l0040F193:
	rLoc1 = Mem0[esi + 0x00000160:real32]
	rLoc2 = Mem0[0x00417628:real64]
	FPUF = cond(rLoc2 - rLoc2)
	SCZO = FPUF
	branch Test(LE,FPUF) l0040F1B4
	// succ:  l0040F1A8 l0040F1B4
l0040F1A8:
	rLoc1 = rLoc1 * Mem0[esi + 0x0000015C:real32]
	rLoc2 = 1
	rLoc1 = rLoc2 / rLoc1
	goto l0040F1B8
	// succ:  l0040F1B8
l0040F1B4:
	rLoc1 = rLoc1
	rLoc1 = 1
	// succ:  l0040F1B8
l0040F1B8:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000100
	Mem0[esp + 0x00000034:real64] = rLoc1
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408BA0 (retsize: 4;)
	rLoc1 = Mem0[0x00417620:real64]
	esp = esp + 0x00000008
	SCZO = cond(esp)
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	Mem0[esi + 0x00000164:word32] = eax
	Mem0[esp + 0x00000018:word32] = edi
l0040F373:
	SZO = cond(Mem0[esi + 0x00000126:byte] & 0x02)
	C = false
	branch Test(EQ,Z) l0040F39F
	// succ:  l0040F37C l0040F39F
l0040F37C:
	ecx = (word32) Mem0[esi + 0x0000017C:byte]
	eax = (word32) Mem0[esi + 0x0000017D:byte]
	SCZO = cond(eax - ecx)
	branch Test(LE,SZO) l0040F390
	// succ:  l0040F38E l0040F390
l0040F38E:
	ecx = eax
	// succ:  l0040F390
l0040F390:
	eax = (word32) Mem0[esi + 0x0000017E:byte]
	SCZO = cond(eax - ecx)
	branch Test(LE,SZO) l0040F3A6
	// succ:  l0040F39B l0040F3A6
l0040F39B:
	ecx = eax
	goto l0040F3A6
	// succ:  l0040F3A6
l0040F39F:
	ecx = (word32) Mem0[esi + 0x0000017F:byte]
	// succ:  l0040F3A6
l0040F3A6:
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	SCZO = cond(ecx - edi)
	branch Test(LE,SZO) l0040F3B9
	// succ:  l0040F3AC l0040F3B9
l0040F3AC:
	eax = 0x00000010
	eax = eax - ecx
	SCZO = cond(eax)
	Mem0[esp + 0x00000010:word32] = eax
	goto l0040F3BF
	// succ:  l0040F3BF
l0040F3B9:
	Mem0[esp + 0x00000010:word32] = edi
	eax = edi
	// succ:  l0040F3BF
l0040F3BF:
	SZO = cond(Mem0[esi + 0x00000070:word32] & 0x00000400)
	C = false
	branch Test(EQ,Z) l0040F3D7
	// succ:  l0040F3C8 l0040F3D7
l0040F3C8:
	SCZO = cond(eax - 0x00000005)
	branch Test(GE,SO) l0040F3D7
	// succ:  l0040F3CD l0040F3D7
l0040F3CD:
	Mem0[esp + 0x00000010:word32] = 0x00000005
	goto l0040F3E9
	// succ:  l0040F3E9
l0040F3D7:
	SCZO = cond(eax - edx)
	branch Test(LE,SZO) l0040F3E1
	// succ:  l0040F3DB l0040F3E1
l0040F3DB:
	Mem0[esp + 0x00000010:word32] = edx
	goto l0040F3E9
	// succ:  l0040F3E9
l0040F3E1:
	SCZO = cond(eax - edi)
	branch Test(GE,SO) l0040F3ED
	// succ:  l0040F3E5 l0040F3ED
l0040F3E5:
	Mem0[esp + 0x00000010:word32] = edi
	// succ:  l0040F3E9
l0040F3E9:
	eax = Mem0[esp + 0x00000010:word32]
	// succ:  l0040F3ED
l0040F3ED:
	rLoc1 = Mem0[esi + 0x00000160:real32]
	ecx = (word32) al
	rLoc2 = Mem0[0x00417628:real64]
	Mem0[esi + 0x00000158:word32] = ecx
	ecx = edx
	FPUF = cond(rLoc2 - rLoc2)
	ecx = ecx - eax
	SCZO = cond(ecx)
	ebx = 0x00000001
	ebx = ebx << cl
	SCZO = cond(ebx)
	SCZO = FPUF
	ax = (word16) FPUF << 8
	Mem0[esp + 0x00000018:word32] = ebx
	branch Test(PE,P) l0040F42A
	// succ:  l0040F41E l0040F42A
l0040F41E:
	rLoc1 = rLoc1 * Mem0[esi + 0x0000015C:real32]
	rLoc2 = 1
	rLoc1 = rLoc2 / rLoc1
	goto l0040F42E
	// succ:  l0040F42E
l0040F42A:
	rLoc1 = rLoc1
	rLoc1 = 1
	// succ:  l0040F42E
l0040F42E:
	eax = 0x00000000 + ebx * 0x00000004
	Mem0[esp + 0x00000030:real64] = rLoc1
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408BA0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SZO = cond(Mem0[esi + 0x00000070:word32] & 0x00000480)
	C = false
	Mem0[esi + 0x00000170:word32] = eax
	branch Test(EQ,Z) l0040F5AB
	// succ:  l0040F456 l0040F5AB
l0040F456:
	SZO = cond(ebx & ebx)
	C = false
	branch Test(LE,SZO) l0040F47E
	// succ:  l0040F45A l0040F47E
l0040F45A:
	ebx = ebx + 0x00000000
	// succ:  l0040F460
l0040F460:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000200
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408BA0 (retsize: 4;)
	edx = Mem0[esi + 0x00000170:word32]
	Mem0[edx + edi * 0x00000004:word32] = eax
	edi = edi + 0x00000001
	SCZO = cond(edi)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SCZO = cond(edi - ebx)
	branch Test(LT,SO) l0040F460
	// succ:  l0040F47E l0040F460
l0040F47E:
	rLoc1 = 1
	eax = ebx
	rLoc1 = rLoc1 / Mem0[esp + 0x00000030:real64]
	eax = eax << 0x00000008
	SCZO = cond(eax)
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	SZO = cond(eax & eax)
	C = false
	Mem0[esp + 0x00000028:word32] = eax
	Mem0[esp + 0x00000014:word32] = edi
	Mem0[esp + 0x00000020:word32] = eax
	Mem0[esp + 0x00000030:real64] = rLoc1
	rLoc1 = (real64) Mem0[esp + 0x00000028:int32]
	branch Test(GE,SO) l0040F4A9
	// succ:  l0040F4A3 l0040F4A9
l0040F4A3:
	rLoc1 = rLoc1 + Mem0[0x00417618:real64]
	// succ:  l0040F4A9
l0040F4A9:
	Mem0[esp + 0x00000038:real64] = rLoc1
	// succ:  l0040F4AD
l0040F4AD:
	rLoc1 = (real64) Mem0[esp + 0x00000014:int32]
	rLoc1 = rLoc1 + Mem0[0x0041ACD8:real64]
	rLoc1 = rLoc1 * Mem0[0x00417610:real64]
	rLoc2 = Mem0[esp + 0x00000030:real64]
	call _CIpow (retsize: 4; FPU: 2;)
	esp = esp + 0xFFFFFFFC
	rLoc2 = rLoc2 * Mem0[esp + 0x00000038:real64]
	Mem0[esp + 0x0000000C:word16] = __fstcw()
	eax = (word32) Mem0[esp + 0x0000000C:word16]
	eax = eax | 0x00000C00
	SZO = cond(eax)
	C = false
	Mem0[esp + 0x00000024:word32] = eax
	__fldcw(Mem0[esp + 0x00000024:word16])
	Mem0[esp + 0x00000028:int64] = (int64) rLoc2
	eax = Mem0[esp + 0x00000028:word32]
	SCZO = cond(edi - eax)
	Mem0[esp + 0x00000028:word32] = eax
	__fldcw(Mem0[esp + 0x0000000C:word16])
	branch Test(UGT,CZ) l0040F54D
	// succ:  l0040F4F4 l0040F54D
l0040F4F4:
	eax = (word32) Mem0[esp + 0x00000014:word16]
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	ch = al
	ecx = ecx | eax
	SZO = cond(ecx)
	C = false
	Mem0[esp + 0x00000024:word32] = ecx
	ecx = Mem0[esp + 0x00000010:word32]
	eax = 0x000000FF
	eax = eax >> cl
	SCZO = cond(eax)
	Mem0[esp + 0x0000000C:word32] = eax
	goto l0040F524
	// succ:  l0040F524
l0040F520:
	eax = Mem0[esp + 0x0000000C:word32]
	// succ:  l0040F524
l0040F524:
	ecx = Mem0[esp + 0x0000001C:word32]
	edx = Mem0[esi + 0x00000170:word32]
	ebx = edi
	ebx = ebx >>u cl
	SCZO = cond(ebx)
	cx = Mem0[esp + 0x00000024:word16]
	eax = eax & edi
	SZO = cond(eax)
	C = false
	eax = Mem0[edx + eax * 0x00000004:word32]
	edi = edi + 0x00000001
	SCZO = cond(edi)
	SCZO = cond(edi - Mem0[esp + 0x00000028:word32])
	Mem0[eax + ebx * 0x0002:word16] = cx
	branch Test(ULE,CZ) l0040F520
	// succ:  l0040F549 l0040F520
l0040F549:
	ebx = Mem0[esp + 0x00000018:word32]
	// succ:  l0040F54D
l0040F54D:
	eax = Mem0[esp + 0x00000014:word32]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	SCZO = cond(eax - 0x00000100)
	Mem0[esp + 0x00000014:word32] = eax
	branch Test(LT,SO) l0040F4AD
	// succ:  l0040F563 l0040F4AD
l0040F563:
	SCZO = cond(edi - Mem0[esp + 0x00000020:word32])
	branch Test(UGE,C) l0040F682
	// succ:  l0040F56D l0040F682
l0040F56D:
	ecx = Mem0[esp + 0x00000010:word32]
	eax = 0x000000FF
	eax = eax >> cl
	SCZO = cond(eax)
	Mem0[esp + 0x0000000C:word32] = eax
	goto l0040F584
	// succ:  l0040F584
l0040F580:
	eax = Mem0[esp + 0x0000000C:word32]
	// succ:  l0040F584
l0040F584:
	ecx = Mem0[esp + 0x0000001C:word32]
	edx = Mem0[esi + 0x00000170:word32]
	ebx = edi
	eax = eax & edi
	SZO = cond(eax)
	C = false
	eax = Mem0[edx + eax * 0x00000004:word32]
	ebx = ebx >>u cl
	SCZO = cond(ebx)
	edi = edi + 0x00000001
	SCZO = cond(edi)
	SCZO = cond(edi - Mem0[esp + 0x00000020:word32])
	Mem0[eax + ebx * 0x0002:word16] = 0xFFFF
	branch Test(ULT,C) l0040F580
	// succ:  l0040F5A6 l0040F580
l0040F5A6:
	goto l0040F67E
	// succ:  l0040F67E
l0040F5AB:
	SZO = cond(ebx & ebx)
	C = false
	Mem0[esp + 0x00000014:word32] = edi
	branch Test(LE,SZO) l0040F682
	// succ:  l0040F5B7 l0040F682
l0040F5B7:
	goto l0040F5C4
	// succ:  l0040F5C4
l0040F5C0:
	edi = Mem0[esp + 0x00000014:word32]
	// succ:  l0040F5C4
l0040F5C4:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000200
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408BA0 (retsize: 4;)
	rLoc1 = Mem0[0x0041AE40:real64]
	ecx = Mem0[esi + 0x00000170:word32]
	edx = Mem0[esp + 0x00000018:word32]
	Mem0[ecx + edi * 0x00000004:word32] = eax
	eax = Mem0[0x0041C020 + edx * 0x00000004:word32]
	eax = eax *s edi
	SCZO = cond(eax)
	eax = eax >>u 0x00000004
	SCZO = cond(eax)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	ebx = eax
	// succ:  l0040F5F6
l0040F5F6:
	eax = ebx
	SZO = cond(eax & eax)
	C = false
	Mem0[esp + 0x00000028:word32] = eax
	rLoc2 = (real64) Mem0[esp + 0x00000028:int32]
	branch Test(GE,SO) l0040F60A
	// succ:  l0040F604 l0040F60A
l0040F604:
	rLoc2 = rLoc2 + Mem0[0x00417618:real64]
	// succ:  l0040F60A
l0040F60A:
	rLoc1 = rLoc2 / rLoc1
	rLoc2 = Mem0[esp + 0x00000030:real64]
	call _CIpow (retsize: 4; FPU: 2;)
	esp = esp + 0xFFFFFFFC
	rLoc3 = Mem0[0x0041AE40:real64]
	edx = Mem0[esi + 0x00000170:word32]
	Mem0[esp + 0x0000000C:word16] = __fstcw()
	eax = (word32) Mem0[esp + 0x0000000C:word16]
	rLoc3 = rLoc3 * rLoc2
	eax = eax | 0x00000C00
	SZO = cond(eax)
	C = false
	v27 = rLoc3
	rLoc3 = rLoc2
	rLoc2 = v27
	Mem0[esp + 0x00000028:word32] = eax
	eax = Mem0[esp + 0x00000014:word32]
	rLoc3 = rLoc3 + Mem0[0x0041ACD8:real64]
	edx = Mem0[edx + eax * 0x00000004:word32]
	__fldcw(Mem0[esp + 0x00000028:word16])
	edi = edi + 0x00000002
	SCZO = cond(edi)
	ebx = ebx + 0x00000100
	SCZO = cond(ebx)
	SCZO = cond(edi - 0x00000200)
	Mem0[esp + 0x00000028:int32] = (int32) rLoc3
	cx = Mem0[esp + 0x00000028:word16]
	Mem0[edi - 0x00000002 + edx:word16] = cx
	__fldcw(Mem0[esp + 0x0000000C:word16])
	branch Test(LT,SO) l0040F5F6
	// succ:  l0040F66B l0040F5F6
l0040F66B:
	eax = eax + 0x00000001
	SCZO = cond(eax)
	rLoc2 = rLoc2
	SCZO = cond(eax - Mem0[esp + 0x00000018:word32])
	Mem0[esp + 0x00000014:word32] = eax
	branch Test(LT,SO) l0040F5C0
	// succ:  l0040F67E l0040F5C0
l0040F67E:
	ebx = Mem0[esp + 0x00000018:word32]
	// succ:  l0040F682
l0040F682:
	SZO = cond(Mem0[esi + 0x00000070:word32] & 0x00600080)
	C = false
	branch Test(EQ,Z) l0040F870
	// succ:  l0040F68F l0040F870
l0040F68F:
	rLoc1 = Mem0[esi + 0x0000015C:real32]
	ebx = ebx + ebx
	SCZO = cond(ebx)
	rLoc2 = 1
	ebx = ebx + ebx
	SCZO = cond(ebx)
	rLoc1 = rLoc2 / rLoc1
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	Mem0[esp + 0x00000038:real64] = rLoc1
	call fn00408BA0 (retsize: 4;)
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SCZO = cond(Mem0[esp + 0x00000018:word32] - ebx)
	Mem0[esi + 0x00000178:word32] = eax
	branch Test(LE,SZO) l0040F771
	// succ:  l0040F6BD l0040F771
l0040F6BD:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000200
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408BA0 (retsize: 4;)
	rLoc1 = Mem0[0x0041AE40:real64]
	ecx = Mem0[esi + 0x00000178:word32]
	edx = Mem0[esp + 0x00000018:word32]
	Mem0[ecx + ebx * 0x00000004:word32] = eax
	eax = Mem0[0x0041C020 + edx * 0x00000004:word32]
	eax = eax *s ebx
	SCZO = cond(eax)
	eax = eax >>u 0x00000004
	SCZO = cond(eax)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	Mem0[esp + 0x00000014:word32] = eax
	// succ:  l0040F6F1
l0040F6F1:
	eax = Mem0[esp + 0x00000014:word32]
	rLoc2 = (real64) Mem0[esp + 0x00000014:int32]
	SZO = cond(eax & eax)
	C = false
	branch Test(GE,SO) l0040F703
	// succ:  l0040F6FD l0040F703
l0040F6FD:
	rLoc2 = rLoc2 + Mem0[0x00417618:real64]
	// succ:  l0040F703
l0040F703:
	rLoc1 = rLoc2 / rLoc1
	rLoc2 = Mem0[esp + 0x00000030:real64]
	call _CIpow (retsize: 4; FPU: 2;)
	esp = esp + 0xFFFFFFFC
	rLoc3 = Mem0[0x0041AE40:real64]
	edx = Mem0[esi + 0x00000178:word32]
	Mem0[esp + 0x0000000C:word16] = __fstcw()
	eax = (word32) Mem0[esp + 0x0000000C:word16]
	rLoc3 = rLoc3 * rLoc2
	v28 = Mem0[esp + 0x00000014:word32] + 0x00000100
	Mem0[esp + 0x00000014:word32] = v28
	SCZO = cond(v28)
	v29 = rLoc3
	rLoc3 = rLoc2
	rLoc2 = v29
	eax = eax | 0x00000C00
	SZO = cond(eax)
	C = false
	Mem0[esp + 0x00000028:word32] = eax
	rLoc3 = rLoc3 + Mem0[0x0041ACD8:real64]
	eax = Mem0[edx + ebx * 0x00000004:word32]
	edi = edi + 0x00000002
	SCZO = cond(edi)
	SCZO = cond(edi - 0x00000200)
	__fldcw(Mem0[esp + 0x00000028:word16])
	Mem0[esp + 0x00000028:int32] = (int32) rLoc3
	cx = Mem0[esp + 0x00000028:word16]
	Mem0[edi - 0x00000002 + eax:word16] = cx
	__fldcw(Mem0[esp + 0x0000000C:word16])
	branch Test(LT,SO) l0040F6F1
	// succ:  l0040F762 l0040F6F1
l0040F762:
	ebx = ebx + 0x00000001
	SCZO = cond(ebx)
	rLoc2 = rLoc2
	SCZO = cond(ebx - Mem0[esp + 0x00000018:word32])
	branch Test(LT,SO) l0040F6BD
	// succ:  l0040F771 l0040F6BD
l0040F771:
	rLoc2 = Mem0[esi + 0x00000160:real32]
	rLoc3 = Mem0[0x00417628:real64]
	FPUF = cond(rLoc3 - rLoc3)
	SCZO = FPUF
	branch Test(LE,FPUF) l0040F78C
	// succ:  l0040F786 l0040F78C
l0040F786:
	rLoc3 = 1
	rLoc2 = rLoc3 / rLoc2
	goto l0040F794
	// succ:  l0040F794
l0040F78C:
	rLoc2 = rLoc2
	rLoc2 = Mem0[esi + 0x0000015C:real32]
	// succ:  l0040F794
l0040F794:
	eax = Mem0[esp + 0x00000018:word32]
	Mem0[esp + 0x00000030:real64] = rLoc2
	eax = eax + eax
	SCZO = cond(eax)
	eax = eax + eax
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408BA0 (retsize: 4; FPU: 1;)
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SCZO = cond(Mem0[esp + 0x00000018:word32] - ebx)
	Mem0[esi + 0x00000174:word32] = eax
	branch Test(LE,SZO) l0040F870
	// succ:  l0040F7BC l0040F870
l0040F7BC:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000200
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408BA0 (retsize: 4; FPU: 1;)
	rLoc2 = Mem0[0x0041AE40:real64]
	ecx = Mem0[esi + 0x00000174:word32]
	edx = Mem0[esp + 0x00000018:word32]
	Mem0[ecx + ebx * 0x00000004:word32] = eax
	eax = Mem0[0x0041C020 + edx * 0x00000004:word32]
	eax = eax *s ebx
	SCZO = cond(eax)
	eax = eax >>u 0x00000004
	SCZO = cond(eax)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	Mem0[esp + 0x00000014:word32] = eax
	// succ:  l0040F7F0
l0040F7F0:
	eax = Mem0[esp + 0x00000014:word32]
	rLoc3 = (real64) Mem0[esp + 0x00000014:int32]
	SZO = cond(eax & eax)
	C = false
	branch Test(GE,SO) l0040F802
	// succ:  l0040F7FC l0040F802
l0040F7FC:
	rLoc3 = rLoc3 + Mem0[0x00417618:real64]
	// succ:  l0040F802
l0040F802:
	rLoc2 = rLoc3 / rLoc2
	rLoc3 = Mem0[esp + 0x00000030:real64]
	call _CIpow (retsize: 4; FPU: 3;)
	esp = esp + 0xFFFFFFFC
	rLoc4 = Mem0[0x0041AE40:real64]
	edx = Mem0[esi + 0x00000174:word32]
	Mem0[esp + 0x0000000C:word16] = __fstcw()
	eax = (word32) Mem0[esp + 0x0000000C:word16]
	rLoc4 = rLoc4 * rLoc3
	v31 = Mem0[esp + 0x00000014:word32] + 0x00000100
	Mem0[esp + 0x00000014:word32] = v31
	SCZO = cond(v31)
	v32 = rLoc4
	rLoc4 = rLoc3
	rLoc3 = v32
	eax = eax | 0x00000C00
	SZO = cond(eax)
	C = false
	Mem0[esp + 0x00000028:word32] = eax
	rLoc4 = rLoc4 + Mem0[0x0041ACD8:real64]
	eax = Mem0[edx + ebx * 0x00000004:word32]
	edi = edi + 0x00000002
	SCZO = cond(edi)
	SCZO = cond(edi - 0x00000200)
	__fldcw(Mem0[esp + 0x00000028:word16])
	Mem0[esp + 0x00000028:int32] = (int32) rLoc4
	cx = Mem0[esp + 0x00000028:word16]
	Mem0[edi - 0x00000002 + eax:word16] = cx
	__fldcw(Mem0[esp + 0x0000000C:word16])
	branch Test(LT,SO) l0040F7F0
	// succ:  l0040F861 l0040F7F0
l0040F861:
	ebx = ebx + 0x00000001
	SCZO = cond(ebx)
	rLoc3 = rLoc3
	SCZO = cond(ebx - Mem0[esp + 0x00000018:word32])
	branch Test(LT,SO) l0040F7BC
	// succ:  l0040F870 l0040F7BC
l0040F870:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040F160_exit fn0040F160_exit
fn0040F160_exit:


// fn0040F880
// Return size: 4
void fn0040F880()
fn0040F880_entry:
	// succ:  l0040F880
l0040F880:
	esp = fp
	eax = Mem0[esp + 0x00000004:word32]
	cl = Mem0[eax + 0x00000008:byte]
	SZO = cond(cl & 0x02)
	C = false
	branch Test(EQ,Z) l0040F948
	// succ:  l0040F890 l0040F948
l0040F890:
	edx = Mem0[eax:word32]
	al = Mem0[eax + 0x00000009:byte]
	SCZO = cond(al - 0x08)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	branch Test(NE,Z) l0040F8D4
	// succ:  l0040F89A l0040F8D4
l0040F89A:
	SCZO = cond(cl - 0x02)
	branch Test(NE,Z) l0040F8A6
	// succ:  l0040F89F l0040F8A6
l0040F89F:
	edi = 0x00000003
	goto l0040F8B4
	// succ:  l0040F8B4
l0040F8A6:
	SCZO = cond(cl - 0x06)
	branch Test(NE,Z) l0040F947
	// succ:  l0040F8AF l0040F947
l0040F8AF:
	edi = 0x00000004
	// succ:  l0040F8B4
l0040F8B4:
	SZO = cond(edx & edx)
	C = false
	branch Test(ULE,CZ) l0040F947
	// succ:  l0040F8BC l0040F947
l0040F8BC:
	eax = Mem0[esp + 0x0000000C:word32]
	eax = eax + 0x00000002
	SCZO = cond(eax)
	// succ:  l0040F8C3
l0040F8C3:
	cl = Mem0[eax - 0x00000001:byte]
	v13 = Mem0[eax - 0x00000002:byte] + cl
	Mem0[eax - 0x00000002:byte] = v13
	SCZO = cond(v13)
	v14 = Mem0[eax:byte] + cl
	Mem0[eax:byte] = v14
	SCZO = cond(v14)
	eax = eax + edi
	SCZO = cond(eax)
	edx = edx - 0x00000001
	SCZO = cond(edx)
	branch Test(NE,Z) l0040F8C3
	// succ:  l0040F8D2 l0040F8C3
l0040F8D2:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040F880_exit
l0040F8D4:
	SCZO = cond(al - 0x10)
	branch Test(NE,Z) l0040F947
	// succ:  l0040F8D8 l0040F947
l0040F8D8:
	SCZO = cond(cl - 0x02)
	branch Test(NE,Z) l0040F8E4
	// succ:  l0040F8DD l0040F8E4
l0040F8DD:
	edi = 0x00000006
	goto l0040F8EE
	// succ:  l0040F8EE
l0040F8E4:
	SCZO = cond(cl - 0x06)
	branch Test(NE,Z) l0040F947
	// succ:  l0040F8E9 l0040F947
l0040F8E9:
	edi = 0x00000008
	// succ:  l0040F8EE
l0040F8EE:
	SZO = cond(edx & edx)
	C = false
	branch Test(ULE,CZ) l0040F947
	// succ:  l0040F8F2 l0040F947
l0040F8F2:
	eax = Mem0[esp + 0x0000000C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	eax = eax + 0x00000001
	SCZO = cond(eax)
	esi = edx
	ecx = ecx + 0x00000000
	// succ:  l0040F900
l0040F900:
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	bh = Mem0[eax + 0x00000003:byte]
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	ch = Mem0[eax + 0x00000001:byte]
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	dh = Mem0[eax - 0x00000001:byte]
	bl = Mem0[eax + 0x00000004:byte]
	cl = Mem0[eax + 0x00000002:byte]
	dl = Mem0[eax:byte]
	ebx = ebx + ecx
	SCZO = cond(ebx)
	ebx = ebx & 0x0000FFFF
	SZO = cond(ebx)
	C = false
	edx = edx + ecx
	SCZO = cond(edx)
	edx = edx & 0x0000FFFF
	SZO = cond(edx)
	C = false
	ecx = ebx
	ebx = edx
	Mem0[eax:byte] = dl
	edx = ecx
	ebx = ebx >>u 0x00000008
	SCZO = cond(ebx)
	edx = edx >>u 0x00000008
	SCZO = cond(edx)
	Mem0[eax - 0x00000001:byte] = bl
	Mem0[eax + 0x00000003:byte] = dl
	Mem0[eax + 0x00000004:byte] = cl
	eax = eax + edi
	SCZO = cond(eax)
	esi = esi - 0x00000001
	SCZO = cond(esi)
	branch Test(NE,Z) l0040F900
	// succ:  l0040F945 l0040F900
l0040F945:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l0040F947
l0040F947:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l0040F948
l0040F948:
	return
	// succ:  fn0040F880_exit
fn0040F880_exit:


// fn0040F950
// Return size: 4
void fn0040F950()
fn0040F950_entry:
	// succ:  l0040F950
l0040F950:
	esp = fp
	esp = esp - 0x0000003C
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000048:word32]
	ebx = (word32) Mem0[esi + 0x00000126:byte]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esi + 0x00000070:word32]
	SZO = cond(edi & 0x00000100)
	C = false
	Mem0[esp + 0x00000018:word32] = ebx
	Mem0[esp + 0x0000004C:word32] = edi
	branch Test(EQ,Z) l0040FA40
	// succ:  l0040F978 l0040FA40
l0040F978:
	SZO = cond(edi & 0x00001000)
	C = false
	branch Test(EQ,Z) l0040FA40
	// succ:  l0040F984 l0040FA40
l0040F984:
	SZO = cond(bl & 0x02)
	C = false
	branch Test(NE,Z) l0040F9FE
	// succ:  l0040F989 l0040F9FE
l0040F989:
	eax = (word32) Mem0[esi + 0x00000127:byte]
	eax = eax + 0xFFFFFFFF
	SCZO = cond(eax)
	SCZO = cond(eax - 0x0000000F)
	branch Test(UGT,CZ) l0040FA40
	// succ:  l0040F99C l0040FA40
l0040F99C:
	eax = (word32) Mem0[eax + 0x00410514:byte]
	switch (eax) { l0040F9AA l0040F9CD l0040FA40 l0040F9DA l0040FA40 l0040FA40 l0040FA40 l0040F9E7 l0040FA40 l0040FA40 l0040FA40 l0040FA40 l0040FA40 l0040FA40 l0040FA40 l0040F9E7 }
	// succ:  l0040F9AA l0040F9CD l0040FA40 l0040F9DA l0040FA40 l0040FA40 l0040FA40 l0040F9E7 l0040FA40 l0040FA40 l0040FA40 l0040FA40 l0040FA40 l0040FA40 l0040FA40 l0040F9E7
l0040F9AA:
	ax = Mem0[esi + 0x00000140:word16]
	ax = ax *s 0x00FF
	SCZO = cond(ax)
	// succ:  l0040F9B6
l0040F9B6:
	Mem0[esi + 0x00000140:word16] = ax
	Mem0[esi + 0x0000013C:word16] = ax
	Mem0[esi + 0x0000013A:word16] = ax
	goto l0040FA32
	// succ:  l0040FA32
l0040F9CD:
	ax = Mem0[esi + 0x00000140:word16]
	ax = ax *s 0x0055
	SCZO = cond(ax)
	goto l0040F9B6
	// succ:  l0040F9B6
l0040F9DA:
	ax = Mem0[esi + 0x00000140:word16]
	ax = ax *s 0x0011
	SCZO = cond(ax)
	goto l0040F9B6
	// succ:  l0040F9B6
l0040F9E7:
	eax = (word32) Mem0[esi + 0x00000140:word16]
	Mem0[esi + 0x0000013C:word16] = ax
	Mem0[esi + 0x0000013A:word16] = ax
	goto l0040FA32
	// succ:  l0040FA32
l0040F9FE:
	SCZO = cond(ebx - 0x00000003)
	branch Test(NE,Z) l0040FA40
	// succ:  l0040FA03 l0040FA40
l0040FA03:
	eax = (word32) Mem0[esi + 0x00000138:byte]
	edx = Mem0[esi + 0x00000114:word32]
	ecx = eax + eax * 0x00000002
	eax = ecx + edx
	cx = (word16) Mem0[eax:byte]
	Mem0[esi + 0x0000013A:word16] = cx
	dx = (word16) Mem0[eax + 0x00000001:byte]
	Mem0[esi + 0x0000013C:word16] = dx
	ax = (word16) Mem0[eax + 0x00000002:byte]
	// succ:  l0040FA32
l0040FA32:
	Mem0[esi + 0x0000013E:word16] = ax
	esp = esp + 0x00000000
	// succ:  l0040FA40
l0040FA40:
	SCZO = cond(ebx - 0x00000003)
	ecx = Mem0[esi + 0x00000138:word32]
	edx = Mem0[esi + 0x0000013C:word32]
	ax = Mem0[esi + 0x00000140:word16]
	Mem0[esi + 0x00000142:word32] = ecx
	Mem0[esi + 0x00000146:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	Mem0[esi + 0x0000014A:word16] = ax
	branch Test(NE,Z) l0040FAD8
	// succ:  l0040FA6C l0040FAD8
l0040FA6C:
	edx = (word32) Mem0[esi + 0x0000011A:word16]
	SZO = cond(dx & dx)
	C = false
	branch Test(EQ,Z) l0040FAD8
	// succ:  l0040FA78 l0040FAD8
l0040FA78:
	rLoc1 = Mem0[esi + 0x00000160:real32]
	rLoc1 = rLoc1 * Mem0[esi + 0x0000015C:real32]
	rLoc1 = rLoc1 - Mem0[0x0041ACD0:real64]
l0040FAD8:
	eax = Mem0[esi + 0x00000070:word32]
	SZO = cond(eax & 0x00602000)
	C = false
	branch Test(EQ,Z) l004102FE
	// succ:  l0040FAE6 l004102FE
l0040FAE6:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn0040F160 (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	SZO = cond(Mem0[esi + 0x00000070:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l00410293
	// succ:  l0040FAF9 l00410293
l0040FAF9:
	SCZO = cond(ebx - 0x00000003)
	branch Test(NE,Z) l0040FF59
	// succ:  l0040FB02 l0040FF59
l0040FB02:
	ebp = (word32) Mem0[esi + 0x00000118:word16]
	al = Mem0[esi + 0x00000130:byte]
	SCZO = cond(al - 0x02)
	Mem0[esp + 0x00000028:word32] = ebp
	branch Test(NE,Z) l0040FB66
	// succ:  l0040FB17 l0040FB66
l0040FB17:
	ecx = (word32) Mem0[esi + 0x0000013A:word16]
	eax = Mem0[esi + 0x00000164:word32]
	edx = (word32) Mem0[eax + ecx:byte]
	edi = (word32) Mem0[esi + 0x0000013C:word16]
	Mem0[esp + 0x00000010:byte] = dl
	edx = (word32) Mem0[edi + eax:byte]
	Mem0[esp + 0x00000011:byte] = dl
	edx = (word32) Mem0[esi + 0x0000013E:word16]
	al = Mem0[edx + eax:byte]
	Mem0[esp + 0x00000012:byte] = al
	eax = Mem0[esi + 0x0000016C:word32]
	edx = (word32) Mem0[eax + edx:byte]
	bl = Mem0[eax + ecx:byte]
	cl = Mem0[eax + edi:byte]
	Mem0[esp + 0x00000015:byte] = cl
	Mem0[esp + 0x00000016:byte] = dl
	goto l0040FDCC
	// succ:  l0040FDCC
l0040FB66:
	eax = (word32) al
	eax = eax - 0x00000001
	SCZO = cond(eax)
	branch Test(EQ,Z) l0040FBA8
	// succ:  l0040FB6E l0040FBA8
l0040FB6E:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	branch Test(EQ,Z) l0040FBA0
	// succ:  l0040FB73 l0040FBA0
l0040FB73:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	branch Test(EQ,Z) l0040FB80
	// succ:  l0040FB78 l0040FB80
l0040FB78:
	rLoc3 = 1
	Mem0[esp + 0x00000020:real64] = rLoc3
	goto l0040FBB4
	// succ:  l0040FBB4
l0040FB80:
	rLoc3 = Mem0[esi + 0x00000134:real32]
	// succ:  l0040FB86
l0040FB86:
	rLoc4 = 1
	rLoc5 = rLoc5
	rLoc5 = rLoc5 / rLoc3
	Mem0[esp + 0x00000020:real64] = rLoc5
	rLoc5 = Mem0[esi + 0x00000160:real32]
	rLoc3 = rLoc3 * rLoc5
	rLoc5 = rLoc5
	rLoc3 = rLoc5 / rLoc3
	v28 = rLoc4
	rLoc4 = rLoc3
	rLoc3 = v28
	goto l0040FBB6
	// succ:  l0040FBB6
l0040FBA0:
	rLoc3 = Mem0[esi + 0x0000015C:real32]
	goto l0040FB86
	// succ:  l0040FB86
l0040FBA8:
	rLoc3 = Mem0[esi + 0x00000160:real32]
	Mem0[esp + 0x00000020:real64] = rLoc3
	rLoc3 = 1
	// succ:  l0040FBB4
l0040FBB4:
	rLoc4 = rLoc4
	// succ:  l0040FBB6
l0040FBB6:
	Mem0[esp + 0x0000002C:real64] = rLoc4
	rLoc5 = rLoc5
	rLoc3 = rLoc5 - rLoc3
	v27 = rLoc4
	rLoc4 = rLoc3
	rLoc3 = v27
l0040FDCC:
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	SZO = cond(ebp & ebp)
	C = false
	branch Test(LE,SZO) l0041043F
	// succ:  l0040FDD6 l0041043F
l0040FDD6:
	eax = Mem0[esi + 0x00000114:word32]
	eax = eax + 0x00000002
	SCZO = cond(eax)
	// succ:  l0040FDE0
l0040FDE0:
	edx = (word32) Mem0[esi + 0x0000011A:word16]
	SCZO = cond(edi - edx)
	branch Test(GE,SO) l0040FF16
	// succ:  l0040FDEF l0040FF16
l0040FDEF:
	ecx = Mem0[esi + 0x00000188:word32]
	dl = Mem0[ecx + edi:byte]
	ecx = ecx + edi
	SCZO = cond(ecx)
	SCZO = cond(dl - 0xFF)
	branch Test(EQ,Z) l0040FF16
	// succ:  l0040FE03 l0040FF16
l0040FE03:
	SZO = cond(dl & dl)
	C = false
	branch Test(NE,Z) l0040FE1B
	// succ:  l0040FE07 l0040FE1B
l0040FE07:
	dx = Mem0[esp + 0x00000010:word16]
	cl = Mem0[esp + 0x00000012:byte]
	Mem0[eax - 0x00000002:word16] = dx
	Mem0[eax:byte] = cl
	goto l0040FF46
	// succ:  l0040FF46
l0040FE1B:
	cx = (word16) Mem0[ecx:byte]
	ebp = Mem0[esi + 0x0000016C:word32]
	edx = (word32) Mem0[eax - 0x00000002:byte]
	edx = (word32) Mem0[edx + ebp:byte]
	dx = dx *s cx
	SCZO = cond(dx)
	ebp = 0x000000FF
	ebp = ebp - ecx
	SCZO = cond(ebp)
	cx = (word16) bl
	bp = bp *s cx
	SCZO = cond(bp)
	dx = dx + bp
	SCZO = cond(dx)
	dx = dx + 0x0080
	SCZO = cond(dx)
	ecx = (word32) dx
	ecx = (word32) cx
	edx = ecx
	edx = edx >>u 0x00000008
	SCZO = cond(edx)
	edx = edx + ecx
	SCZO = cond(edx)
	edx = edx >> 0x00000008
	SCZO = cond(edx)
	ecx = (word32) dl
	edx = Mem0[esi + 0x00000168:word32]
	ecx = (word32) Mem0[ecx + edx:byte]
	Mem0[eax - 0x00000002:byte] = cl
	edx = Mem0[esi + 0x00000188:word32]
	cx = (word16) Mem0[edx + edi:byte]
	edx = (word32) Mem0[eax - 0x00000001:byte]
	ebp = Mem0[esi + 0x0000016C:word32]
	edx = (word32) Mem0[edx + ebp:byte]
	dx = dx *s cx
	SCZO = cond(dx)
	ebp = 0x000000FF
	ebp = ebp - ecx
	SCZO = cond(ebp)
	ecx = (word32) Mem0[esp + 0x00000015:byte]
	bp = bp *s cx
	SCZO = cond(bp)
	dx = dx + bp
	SCZO = cond(dx)
	dx = dx + 0x0080
	SCZO = cond(dx)
	ecx = (word32) dx
	ecx = (word32) cx
	edx = ecx
	edx = edx >>u 0x00000008
	SCZO = cond(edx)
	edx = edx + ecx
	SCZO = cond(edx)
	edx = edx >> 0x00000008
	SCZO = cond(edx)
	ecx = (word32) dl
	edx = Mem0[esi + 0x00000168:word32]
	ecx = (word32) Mem0[ecx + edx:byte]
	Mem0[eax - 0x00000001:byte] = cl
	edx = Mem0[esi + 0x00000188:word32]
	cx = (word16) Mem0[edx + edi:byte]
	edx = (word32) Mem0[eax:byte]
	ebp = Mem0[esi + 0x0000016C:word32]
	edx = (word32) Mem0[edx + ebp:byte]
	dx = dx *s cx
	SCZO = cond(dx)
	ebp = 0x000000FF
	ebp = ebp - ecx
	SCZO = cond(ebp)
	ecx = (word32) Mem0[esp + 0x00000016:byte]
	bp = bp *s cx
	SCZO = cond(bp)
	dx = dx + bp
	SCZO = cond(dx)
	ebp = Mem0[esp + 0x00000028:word32]
	dx = dx + 0x0080
	SCZO = cond(dx)
	ecx = (word32) dx
	ecx = (word32) cx
	edx = ecx
	edx = edx >>u 0x00000008
	SCZO = cond(edx)
	edx = edx + ecx
	SCZO = cond(edx)
	edx = edx >> 0x00000008
	SCZO = cond(edx)
	ecx = (word32) dl
	edx = Mem0[esi + 0x00000168:word32]
	ecx = (word32) Mem0[ecx + edx:byte]
	Mem0[eax:byte] = cl
	goto l0040FF46
	// succ:  l0040FF46
l0040FF16:
	ecx = Mem0[esi + 0x00000164:word32]
	edx = (word32) Mem0[eax - 0x00000002:byte]
	edx = (word32) Mem0[edx + ecx:byte]
	ecx = (word32) Mem0[eax - 0x00000001:byte]
	Mem0[eax - 0x00000002:byte] = dl
	edx = Mem0[esi + 0x00000164:word32]
	cl = Mem0[ecx + edx:byte]
	edx = (word32) Mem0[eax:byte]
	Mem0[eax - 0x00000001:byte] = cl
	ecx = Mem0[esi + 0x00000164:word32]
	edx = (word32) Mem0[edx + ecx:byte]
	Mem0[eax:byte] = dl
	// succ:  l0040FF46
l0040FF46:
	edi = edi + 0x00000001
	SCZO = cond(edi)
	eax = eax + 0x00000003
	SCZO = cond(eax)
	SCZO = cond(edi - ebp)
	branch Test(LT,SO) l0040FDE0
	// succ:  l0040FF54 l0040FDE0
l0040FF54:
	goto l0041043F
	// succ:  l0041043F
l0040FF59:
	cl = Mem0[esi + 0x00000127:byte]
	eax = 0x00000001
	eax = eax << cl
	SCZO = cond(eax)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	SZO = cond(eax & eax)
	C = false
	Mem0[esp + 0x00000050:word32] = eax
	rLoc3 = (real64) Mem0[esp + 0x00000050:int32]
	branch Test(GE,SO) l0040FF7B
	// succ:  l0040FF75 l0040FF7B
l0040FF75:
	rLoc3 = rLoc3 + Mem0[0x00417618:real64]
	// succ:  l0040FF7B
l0040FF7B:
	eax = (word32) Mem0[esi + 0x00000130:byte]
	Mem0[esp + 0x00000020:real64] = rLoc3
	eax = eax - 0x00000001
	SCZO = cond(eax)
	rLoc4 = 1
	rLoc5 = rLoc5
	Mem0[esp + 0x0000002C:real64] = rLoc5
	v30 = rLoc5
	rLoc5 = rLoc4
	rLoc4 = v30
	Mem0[esp + 0x00000014:real64] = rLoc5
	branch Test(EQ,Z) l0040FFCF
	// succ:  l0040FF99 l0040FFCF
l0040FF99:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	branch Test(EQ,Z) l0040FFAD
	// succ:  l0040FF9E l0040FFAD
l0040FF9E:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	branch Test(NE,Z) l0040FFE3
	// succ:  l0040FFA3 l0040FFE3
l0040FFA3:
	rLoc4 = rLoc5
	rLoc5 = Mem0[esi + 0x00000134:real32]
	goto l0040FFB5
	// succ:  l0040FFB5
l0040FFAD:
	rLoc4 = rLoc5
	rLoc5 = Mem0[esi + 0x0000015C:real32]
	// succ:  l0040FFB5
l0040FFB5:
	rLoc6 = rLoc5
	rLoc6 = rLoc6 / rLoc5
	Mem0[esp + 0x0000002C:real64] = rLoc6
	rLoc7 = Mem0[esi + 0x00000160:real32]
	rLoc5 = rLoc5 * rLoc7
	v33 = rLoc6
	rLoc6 = rLoc4
	rLoc4 = v33
	rLoc5 = rLoc6 / rLoc5
	Mem0[esp + 0x00000014:real64] = rLoc5
	goto l0040FFE5
	// succ:  l0040FFE5
l0040FFCF:
	rLoc4 = rLoc5
	rLoc5 = Mem0[esi + 0x00000160:real32]
	Mem0[esp + 0x0000002C:real64] = rLoc5
	v47 = rLoc5
	rLoc5 = rLoc4
	rLoc4 = v47
	Mem0[esp + 0x00000014:real64] = rLoc5
	goto l0040FFE5
	// succ:  l0040FFE5
l0040FFE3:
	rLoc5 = rLoc5
	// succ:  l0040FFE5
l0040FFE5:
	ecx = (word32) Mem0[esi + 0x00000140:word16]
	Mem0[esp + 0x00000050:word32] = ecx
	rLoc5 = (real64) Mem0[esp + 0x00000050:int32]
	rLoc3 = rLoc5 / rLoc3
	v38 = rLoc4
	rLoc4 = rLoc3
	rLoc3 = v38
	Mem0[esp + 0x00000034:real64] = rLoc4
	v39 = rLoc4
	rLoc4 = rLoc3
	rLoc3 = v39
	call _CIpow (retsize: 4; FPU: 4;)
	esp = esp + 0xFFFFFFFC
	rLoc4 = rLoc4 * Mem0[esp + 0x00000020:real64]
	Mem0[esp + 0x00000050:word16] = __fstcw()
	eax = (word32) Mem0[esp + 0x00000050:word16]
	rLoc4 = rLoc4 + Mem0[0x0041ACD8:real64]
	eax = eax | 0x00000C00
	SZO = cond(eax)
	C = false
	Mem0[esp + 0x00000028:word32] = eax
	__fldcw(Mem0[esp + 0x00000028:word16])
	Mem0[esp + 0x00000028:int32] = (int32) rLoc4
	dx = Mem0[esp + 0x00000028:word16]
	Mem0[esi + 0x0000014A:word16] = dx
	__fldcw(Mem0[esp + 0x00000050:word16])
	rLoc4 = Mem0[esp + 0x00000034:real64]
	rLoc5 = Mem0[esp + 0x00000014:real64]
	call _CIpow (retsize: 4; FPU: 5;)
	esp = esp + 0xFFFFFFFC
	rLoc6 = Mem0[esp + 0x00000020:real64]
	edi = (word32) Mem0[esi + 0x0000013C:word16]
	Mem0[esp + 0x00000050:word16] = __fstcw()
	eax = (word32) Mem0[esp + 0x00000050:word16]
	rLoc6 = rLoc6 * rLoc5
	v40 = rLoc6
	rLoc6 = rLoc5
	rLoc5 = v40
	ecx = (word32) Mem0[esi + 0x0000013A:word16]
	rLoc6 = rLoc6 + Mem0[0x0041ACD8:real64]
	eax = eax | 0x00000C00
	SZO = cond(eax)
	C = false
	SCZO = cond(cx - di)
	Mem0[esp + 0x00000028:word32] = eax
	__fldcw(Mem0[esp + 0x00000028:word16])
	Mem0[esp + 0x00000028:int32] = (int32) rLoc6
	ax = Mem0[esp + 0x00000028:word16]
	Mem0[esi + 0x00000140:word16] = ax
	__fldcw(Mem0[esp + 0x00000050:word16])
	branch Test(NE,Z) l004100D5
	// succ:  l0041008F l004100D5
l0041008F:
	SCZO = cond(cx - Mem0[esi + 0x0000013E:word16])
	branch Test(NE,Z) l004100D5
	// succ:  l00410098 l004100D5
l00410098:
	SCZO = cond(cx - ax)
	branch Test(NE,Z) l004100D5
	// succ:  l0041009D l004100D5
l0041009D:
	ecx = (word32) Mem0[esi + 0x0000014A:word16]
	rLoc5 = rLoc5
	Mem0[esi + 0x00000148:word16] = cx
	Mem0[esi + 0x00000146:word16] = cx
	Mem0[esi + 0x00000144:word16] = cx
	Mem0[esi + 0x0000013E:word16] = ax
	Mem0[esi + 0x0000013C:word16] = ax
	Mem0[esi + 0x0000013A:word16] = ax
	goto l0041043F
	// succ:  l0041043F
l004100D5:
	eax = (word32) cx
	Mem0[esp + 0x00000050:word32] = eax
	rLoc6 = (real64) Mem0[esp + 0x00000050:int32]
	rLoc5 = rLoc6 / rLoc5
	Mem0[esp + 0x00000034:real64] = rLoc5
	rLoc6 = Mem0[esp + 0x0000002C:real64]
	call _CIpow (retsize: 4; FPU: 6;)
	esp = esp + 0xFFFFFFFC
	rLoc7 = Mem0[esp + 0x00000020:real64]
	rLoc7 = rLoc7 * rLoc6
	edx = (word32) di
	Mem0[esp + 0x00000050:word16] = __fstcw()
	eax = (word32) Mem0[esp + 0x00000050:word16]
	v41 = rLoc7
	rLoc7 = rLoc6
	rLoc6 = v41
	rLoc7 = rLoc7 + Mem0[0x0041ACD8:real64]
	eax = eax | 0x00000C00
	SZO = cond(eax)
	C = false
	Mem0[esp + 0x00000028:word32] = eax
	__fldcw(Mem0[esp + 0x00000028:word16])
	Mem0[esp + 0x00000028:int32] = (int32) rLoc7
	ecx = (word32) Mem0[esp + 0x00000028:word16]
	Mem0[esi + 0x00000144:word16] = cx
	__fldcw(Mem0[esp + 0x00000050:word16])
	Mem0[esp + 0x00000050:word32] = edx
	rLoc7 = (real64) Mem0[esp + 0x00000050:int32]
	rLoc6 = rLoc7 / rLoc6
	Mem0[esp + 0x0000003C:real64] = rLoc6
	rLoc7 = Mem0[esp + 0x0000002C:real64]
	call _CIpow (retsize: 4; FPU: 7;)
	esp = esp + 0xFFFFFFFC
	rLoc8 = Mem0[esp + 0x00000020:real64]
	ecx = (word32) Mem0[esi + 0x0000013E:word16]
	rLoc8 = rLoc8 * rLoc7
	Mem0[esp + 0x00000050:word16] = __fstcw()
	eax = (word32) Mem0[esp + 0x00000050:word16]
	v43 = rLoc8
	rLoc8 = rLoc7
	rLoc7 = v43
	rLoc8 = rLoc8 + Mem0[0x0041ACD8:real64]
	eax = eax | 0x00000C00
	SZO = cond(eax)
	C = false
	Mem0[esp + 0x00000028:word32] = eax
	__fldcw(Mem0[esp + 0x00000028:word16])
	Mem0[esp + 0x00000028:int32] = (int32) rLoc8
	eax = (word32) Mem0[esp + 0x00000028:word16]
	Mem0[esi + 0x00000146:word16] = ax
	__fldcw(Mem0[esp + 0x00000050:word16])
	Mem0[esp + 0x00000050:word32] = ecx
	rLoc8 = (real64) Mem0[esp + 0x00000050:int32]
	rLoc7 = rLoc8 / rLoc7
	Mem0[esp + 0x00000044:real64] = rLoc7
	rLoc8 = Mem0[esp + 0x0000002C:real64]
	call _CIpow (retsize: 4; FPU: 8;)
	esp = esp + 0xFFFFFFFC
	rLoc8 = rLoc8 * Mem0[esp + 0x00000020:real64]
	Mem0[esp + 0x00000050:word16] = __fstcw()
	eax = (word32) Mem0[esp + 0x00000050:word16]
	rLoc8 = rLoc8 + Mem0[0x0041ACD8:real64]
	eax = eax | 0x00000C00
	SZO = cond(eax)
	C = false
	Mem0[esp + 0x00000028:word32] = eax
	__fldcw(Mem0[esp + 0x00000028:word16])
	Mem0[esp + 0x00000028:int32] = (int32) rLoc8
	edx = (word32) Mem0[esp + 0x00000028:word16]
	Mem0[esi + 0x00000148:word16] = dx
	__fldcw(Mem0[esp + 0x00000050:word16])
	rLoc8 = Mem0[esp + 0x00000034:real64]
	rLoc9 = Mem0[esp + 0x00000014:real64]
	call _CIpow (retsize: 4; FPU: 9;)
	esp = esp + 0xFFFFFFFC
	rLoc9 = rLoc9 * Mem0[esp + 0x00000020:real64]
	Mem0[esp + 0x00000050:word16] = __fstcw()
	eax = (word32) Mem0[esp + 0x00000050:word16]
	rLoc9 = rLoc9 + Mem0[0x0041ACD8:real64]
	eax = eax | 0x00000C00
	SZO = cond(eax)
	C = false
	Mem0[esp + 0x00000028:word32] = eax
	__fldcw(Mem0[esp + 0x00000028:word16])
	Mem0[esp + 0x00000028:int32] = (int32) rLoc9
	eax = (word32) Mem0[esp + 0x00000028:word16]
	Mem0[esi + 0x0000013A:word16] = ax
	__fldcw(Mem0[esp + 0x00000050:word16])
	rLoc9 = Mem0[esp + 0x0000003C:real64]
	rLoc10 = Mem0[esp + 0x00000014:real64]
	call _CIpow (retsize: 4; FPU: 10;)
	esp = esp + 0xFFFFFFFC
	rLoc10 = rLoc10 * Mem0[esp + 0x00000020:real64]
	Mem0[esp + 0x00000050:word16] = __fstcw()
	eax = (word32) Mem0[esp + 0x00000050:word16]
	rLoc10 = rLoc10 + Mem0[0x0041ACD8:real64]
	eax = eax | 0x00000C00
	SZO = cond(eax)
	C = false
	Mem0[esp + 0x00000028:word32] = eax
	__fldcw(Mem0[esp + 0x00000028:word16])
	Mem0[esp + 0x00000028:int32] = (int32) rLoc10
	ecx = (word32) Mem0[esp + 0x00000028:word16]
	Mem0[esi + 0x0000013C:word16] = cx
	__fldcw(Mem0[esp + 0x00000050:word16])
	rLoc10 = Mem0[esp + 0x00000044:real64]
	rLoc11 = Mem0[esp + 0x00000014:real64]
	call _CIpow (retsize: 4; FPU: 11;)
	esp = esp + 0xFFFFFFFC
	rLoc11 = rLoc11 * Mem0[esp + 0x00000020:real64]
	Mem0[esp + 0x00000050:word16] = __fstcw()
	eax = (word32) Mem0[esp + 0x00000050:word16]
	rLoc11 = rLoc11 + Mem0[0x0041ACD8:real64]
	eax = eax | 0x00000C00
	SZO = cond(eax)
	C = false
	Mem0[esp + 0x00000028:word32] = eax
	__fldcw(Mem0[esp + 0x00000028:word16])
	Mem0[esp + 0x00000028:int32] = (int32) rLoc11
	edx = (word32) Mem0[esp + 0x00000028:word16]
	Mem0[esi + 0x0000013E:word16] = dx
	__fldcw(Mem0[esp + 0x00000050:word16])
	goto l0041043F
	// succ:  l0041043F
l00410293:
	SCZO = cond(ebx - 0x00000003)
	branch Test(NE,Z) l0041043F
	// succ:  l0041029C l0041043F
l0041029C:
	ecx = (word32) Mem0[esi + 0x00000118:word16]
	SZO = cond(ecx & ecx)
	C = false
	eax = Mem0[esi + 0x00000114:word32]
	branch Test(LE,SZO) l0041043F
	// succ:  l004102B1 l0041043F
l004102B1:
	eax = eax + 0x00000002
	SCZO = cond(eax)
	// succ:  l004102C0
l004102C0:
	edx = (word32) Mem0[eax - 0x00000002:byte]
	edi = Mem0[esi + 0x00000164:word32]
	edx = (word32) Mem0[edx + edi:byte]
	Mem0[eax - 0x00000002:byte] = dl
	edx = (word32) Mem0[eax - 0x00000001:byte]
	edi = Mem0[esi + 0x00000164:word32]
	edx = (word32) Mem0[edx + edi:byte]
	Mem0[eax - 0x00000001:byte] = dl
	edx = (word32) Mem0[eax:byte]
	edi = Mem0[esi + 0x00000164:word32]
	edx = (word32) Mem0[edx + edi:byte]
	Mem0[eax:byte] = dl
	eax = eax + 0x00000003
	SCZO = cond(eax)
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	branch Test(NE,Z) l004102C0
	// succ:  l004102F9 l004102C0
l004102F9:
	goto l0041043F
	// succ:  l0041043F
l004102FE:
	SZO = cond(al & al)
	C = false
	branch Test(NS,S) l0041043F
	// succ:  l00410306 l0041043F
l00410306:
	SCZO = cond(Mem0[esp + 0x0000001C:word32] - 0x00000003)
	branch Test(NE,Z) l0041043F
	// succ:  l00410311 l0041043F
l00410311:
	ebp = (word32) Mem0[esi + 0x0000011A:word16]
	edx = (word32) Mem0[esi + 0x0000013C:byte]
	cl = Mem0[esi + 0x0000013A:byte]
	eax = Mem0[esi + 0x00000114:word32]
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	SZO = cond(ebp & ebp)
	C = false
	Mem0[esp + 0x00000051:byte] = dl
	dl = Mem0[esi + 0x0000013E:byte]
	Mem0[esp + 0x00000028:word32] = ebp
	Mem0[esp + 0x00000050:byte] = cl
	branch Test(LE,SZO) l0041043F
	// succ:  l00410347 l0041043F
l00410347:
	eax = eax + 0x00000002
	SCZO = cond(eax)
	ebx = ebx + 0x00000000
	// succ:  l00410350
l00410350:
	ecx = Mem0[esi + 0x00000188:word32]
	bl = Mem0[ecx + edi:byte]
	ecx = ecx + edi
	SCZO = cond(ecx)
	SZO = cond(bl & bl)
	C = false
	branch Test(NE,Z) l0041036F
	// succ:  l0041035F l0041036F
l0041035F:
	cx = Mem0[esp + 0x00000050:word16]
	Mem0[eax - 0x00000002:word16] = cx
	Mem0[eax:byte] = dl
	goto l00410431
	// succ:  l00410431
l0041036F:
	SCZO = cond(bl - 0xFF)
	branch Test(EQ,Z) l00410431
	// succ:  l00410378 l00410431
l00410378:
	cx = (word16) Mem0[ecx:byte]
	bp = (word16) Mem0[esp + 0x00000050:byte]
	ebx = 0x000000FF
	ebx = ebx - ecx
	SCZO = cond(ebx)
	bx = bx *s bp
	SCZO = cond(bx)
	bp = (word16) Mem0[eax - 0x00000002:byte]
	bp = bp *s cx
	SCZO = cond(bp)
	bx = bx + bp
	SCZO = cond(bx)
	bx = bx + 0x0080
	SCZO = cond(bx)
	ecx = (word32) bx
	bp = (word16) Mem0[esp + 0x00000051:byte]
	ecx = (word32) cx
	ebx = ecx
	ebx = ebx >>u 0x00000008
	SCZO = cond(ebx)
	ebx = ebx + ecx
	SCZO = cond(ebx)
	ebx = ebx >> 0x00000008
	SCZO = cond(ebx)
	Mem0[eax - 0x00000002:byte] = bl
	ecx = Mem0[esi + 0x00000188:word32]
	cx = (word16) Mem0[ecx + edi:byte]
	ebx = 0x000000FF
	ebx = ebx - ecx
	SCZO = cond(ebx)
	bx = bx *s bp
	SCZO = cond(bx)
	bp = (word16) Mem0[eax - 0x00000001:byte]
	bp = bp *s cx
	SCZO = cond(bp)
	bx = bx + bp
	SCZO = cond(bx)
	bx = bx + 0x0080
	SCZO = cond(bx)
	ecx = (word32) bx
	ecx = (word32) cx
	ebx = ecx
	ebx = ebx >>u 0x00000008
	SCZO = cond(ebx)
	ebx = ebx + ecx
	SCZO = cond(ebx)
	ebx = ebx >> 0x00000008
	SCZO = cond(ebx)
	Mem0[eax - 0x00000001:byte] = bl
	ecx = Mem0[esi + 0x00000188:word32]
	cx = (word16) Mem0[ecx + edi:byte]
	bp = (word16) dl
	ebx = 0x000000FF
	ebx = ebx - ecx
	SCZO = cond(ebx)
	bx = bx *s bp
	SCZO = cond(bx)
	bp = (word16) Mem0[eax:byte]
	bp = bp *s cx
	SCZO = cond(bp)
	bx = bx + bp
	SCZO = cond(bx)
	ebp = Mem0[esp + 0x00000028:word32]
	bx = bx + 0x0080
	SCZO = cond(bx)
	ecx = (word32) bx
	ecx = (word32) cx
	ebx = ecx
	ebx = ebx >>u 0x00000008
	SCZO = cond(ebx)
	ebx = ebx + ecx
	SCZO = cond(ebx)
	ebx = ebx >> 0x00000008
	SCZO = cond(ebx)
	Mem0[eax:byte] = bl
	// succ:  l00410431
l00410431:
	edi = edi + 0x00000001
	SCZO = cond(edi)
	eax = eax + 0x00000003
	SCZO = cond(eax)
	SCZO = cond(edi - ebp)
	branch Test(LT,SO) l00410350
	// succ:  l0041043F l00410350
l0041043F:
	SZO = cond(Mem0[esi + 0x00000070:byte] & 0x08)
	C = false
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	branch Test(EQ,Z) l004104F8
	SZO = cond(Mem0[esi + 0x00000070:byte] & 0x08)
	C = false
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	branch Test(EQ,Z) l004104F8
	// succ:  l0041044A l004104F8
l0041044A:
	SCZO = cond(Mem0[esp + 0x00000018:word32] - 0x00000003)
	branch Test(NE,Z) l004104F8
	SCZO = cond(Mem0[esp + 0x00000018:word32] - 0x00000003)
	branch Test(NE,Z) l004104F8
	// succ:  l00410455 l004104F8
l00410455:
	eax = (word32) Mem0[esi + 0x0000017C:byte]
	ecx = (word32) Mem0[esi + 0x0000017D:byte]
	edi = (word32) Mem0[esi + 0x0000017E:byte]
	edx = (word32) Mem0[esi + 0x00000118:word16]
	ebx = 0x00000008
	ebx = ebx - eax
	SCZO = cond(ebx)
	eax = 0x00000008
	eax = eax - ecx
	SCZO = cond(eax)
	ecx = 0x00000008
	ecx = ecx - edi
	SCZO = cond(ecx)
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	SCZO = cond(ebx - edi)
	Mem0[esp + 0x0000004C:word32] = eax
	Mem0[esp + 0x00000018:word32] = ecx
	branch Test(LT,SO) l00410499
	eax = (word32) Mem0[esi + 0x0000017C:byte]
	ecx = (word32) Mem0[esi + 0x0000017D:byte]
	edi = (word32) Mem0[esi + 0x0000017E:byte]
	edx = (word32) Mem0[esi + 0x00000118:word16]
	ebx = 0x00000008
	ebx = ebx - eax
	SCZO = cond(ebx)
	eax = 0x00000008
	eax = eax - ecx
	SCZO = cond(eax)
	ecx = 0x00000008
	ecx = ecx - edi
	SCZO = cond(ecx)
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	SCZO = cond(ebx - edi)
	Mem0[esp + 0x0000004C:word32] = eax
	Mem0[esp + 0x00000018:word32] = ecx
	branch Test(LT,SO) l00410499
	// succ:  l00410494 l00410499
l00410494:
	SCZO = cond(ebx - 0x00000008)
	branch Test(LE,SZO) l0041049B
	SCZO = cond(ebx - 0x00000008)
	branch Test(LE,SZO) l0041049B
	// succ:  l00410499 l0041049B
l00410499:
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	// succ:  l0041049B
l0041049B:
	SCZO = cond(eax - edi)
	branch Test(LT,SO) l004104A4
	// succ:  l0041049F l004104A4
l0041049F:
	SCZO = cond(eax - 0x00000008)
	branch Test(LE,SZO) l004104A8
	// succ:  l004104A4 l004104A8
l004104A4:
	Mem0[esp + 0x0000004C:word32] = edi
	// succ:  l004104A8
l004104A8:
	SCZO = cond(ecx - edi)
	branch Test(LT,SO) l004104B1
	// succ:  l004104AC l004104B1
l004104AC:
	SCZO = cond(ecx - 0x00000008)
	branch Test(LE,SZO) l004104B5
	// succ:  l004104B1 l004104B5
l004104B1:
	Mem0[esp + 0x00000018:word32] = edi
	// succ:  l004104B5
l004104B5:
	SCZO = cond(dx - di)
	branch Test(ULE,CZ) l004104F8
	// succ:  l004104BA l004104F8
l004104BA:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	edi = (word32) dx
	// succ:  l004104C0
l004104C0:
	edx = Mem0[esi + 0x00000114:word32]
	edx = edx + eax
	SCZO = cond(edx)
	cl = bl
	v35 = Mem0[edx:byte] >>u cl
	Mem0[edx:byte] = v35
	SCZO = cond(v35)
	ecx = Mem0[esi + 0x00000114:word32]
	edx = ecx + 0x00000001 + eax
	ecx = (word32) Mem0[esp + 0x0000004C:byte]
	v36 = Mem0[edx:byte] >>u cl
	Mem0[edx:byte] = v36
	SCZO = cond(v36)
	edx = Mem0[esi + 0x00000114:word32]
	ecx = (word32) Mem0[esp + 0x00000018:byte]
	v37 = Mem0[edx + 0x00000002 + eax:byte] >>u cl
	Mem0[edx + 0x00000002 + eax:byte] = v37
	SCZO = cond(v37)
	edx = edx + 0x00000002 + eax
	eax = eax + 0x00000003
	SCZO = cond(eax)
	edi = edi - 0x00000001
	SCZO = cond(edi)
	branch Test(NE,Z) l004104C0
	// succ:  l004104F8 l004104C0
l004104F8:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x0000003C
	SCZO = cond(esp)
	return
	// succ:  fn0040F950_exit
fn0040F950_exit:


// fn00410530
// Return size: 4
void fn00410530()
fn00410530_entry:
	// succ:  l00410530
l00410530:
	esp = fp
	esp = esp - 0x00000038
	SCZO = cond(esp)
	eax = Mem0[0x0041C340:word32]
	eax = eax ^ esp
	SZO = cond(eax)
	C = false
	Mem0[esp + 0x00000034:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000040:word32]
	SCZO = cond(Mem0[esi + 0x000000EC:word32] - 0x00000000)
	branch Test(NE,Z) l00410579
	// succ:  l0041054C l00410579
l0041054C:
	eax = (word32) Mem0[esi + 0x00000124:byte]
	ecx = Mem0[esi + 0x000000E4:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	edx = esp + 0x0000000C
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041767C
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call MSVCR80.dll!sprintf (retsize: 4;)
	eax = esp + 0x00000014
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000018
	SCZO = cond(esp)
	// succ:  l00410579
l00410579:
	SZO = cond(Mem0[esi + 0x00000070:word32] & 0x00001000)
	C = false
	branch Test(EQ,Z) l004105FB
	// succ:  l00410582 l004105FB
l00410582:
	SCZO = cond(Mem0[esi + 0x00000108:byte] - 0x03)
	branch Test(NE,Z) l004105BC
	// succ:  l0041058B l004105BC
l0041058B:
	ecx = (word32) Mem0[esi + 0x0000011A:word16]
	edx = Mem0[esi + 0x00000188:word32]
	eax = Mem0[esi + 0x00000114:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	ecx = Mem0[esi + 0x000000EC:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	edx = esi + 0x00000100
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call fn0040E9A0 (retsize: 4;)
	esp = esp + 0x00000014
	SCZO = cond(esp)
	goto l004105FB
	// succ:  l004105FB
l004105BC:
	SCZO = cond(Mem0[esi + 0x0000011A:word16] - 0x0000)
	branch Test(EQ,Z) l004105E0
	// succ:  l004105C6 l004105E0
l004105C6:
	ecx = Mem0[esi + 0x000000EC:word32]
	eax = esi + 0x0000018C
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	edx = esi + 0x00000100
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	goto l004105F3
	// succ:  l004105F3
l004105E0:
	eax = Mem0[esi + 0x000000EC:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	eax = eax + 0x00000001
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	ecx = esi + 0x00000100
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	// succ:  l004105F3
l004105F3:
	call fn0040EBF0 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	// succ:  l004105FB
l004105FB:
	eax = Mem0[esi + 0x0000006C:word32]
	eax = eax & 0x00400000
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l00410624
	// succ:  l00410605 l00410624
l00410605:
	edx = Mem0[esi + 0x000000EC:word32]
	eax = eax | 0x00000080
	SZO = cond(eax)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	edx = edx + 0x00000001
	SCZO = cond(edx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	eax = esi + 0x00000100
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn00410B20 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	// succ:  l00410624
l00410624:
	SZO = cond(Mem0[esi + 0x00000070:word32] & 0x00600000)
	C = false
	branch Test(EQ,Z) l00410680
	// succ:  l0041062D l00410680
l0041062D:
	ecx = Mem0[esi + 0x000000EC:word32]
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	edx = esi + 0x00000100
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn0040CEE0 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00410680
	// succ:  l0041064B l00410680
l0041064B:
	SCZO = cond(Mem0[esi + 0x00000070:word32] - 0x00400000)
	Mem0[esi + 0x00000228:byte] = 0x01
	branch Test(NE,Z) l00410669
	// succ:  l0041065B l00410669
l0041065B:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417654
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l00410669
l00410669:
	SCZO = cond(Mem0[esi + 0x00000070:word32] - 0x00200000)
	branch Test(NE,Z) l00410680
	// succ:  l00410672 l00410680
l00410672:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417654
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l00410680
l00410680:
	SZO = cond(Mem0[esi + 0x00000070:word32] & 0x00004000)
	C = false
	branch Test(EQ,Z) l004106AB
	// succ:  l00410689 l004106AB
l00410689:
	SZO = cond(Mem0[esi + 0x00000068:word32] & 0x00000800)
	C = false
	branch Test(NE,Z) l004106AB
	// succ:  l00410692 l004106AB
l00410692:
	eax = Mem0[esi + 0x000000EC:word32]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	ecx = esi + 0x00000100
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	call fn0040CD20 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l004106AB
l004106AB:
	SZO = cond(Mem0[esi + 0x00000070:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l00410723
	// succ:  l004106B1 l00410723
l004106B1:
	SCZO = cond(Mem0[esi + 0x0000011A:word16] - 0x0000)
	branch Test(NE,Z) l004106C4
	// succ:  l004106BB l004106C4
l004106BB:
	SZO = cond(Mem0[esi + 0x00000126:byte] & 0x04)
	C = false
	branch Test(EQ,Z) l00410723
	// succ:  l004106C4 l00410723
l004106C4:
	edx = Mem0[esi + 0x00000158:word32]
	eax = Mem0[esi + 0x00000178:word32]
	ecx = Mem0[esi + 0x00000174:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	edx = Mem0[esi + 0x00000170:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = Mem0[esi + 0x0000016C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	ecx = Mem0[esi + 0x00000168:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	edx = Mem0[esi + 0x00000164:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	eax = esi + 0x00000142
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = Mem0[esi + 0x000000EC:word32]
	ecx = esi + 0x00000138
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	edx = esi + 0x0000018C
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	eax = eax + 0x00000001
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	ecx = esi + 0x00000100
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	call fn0040D5E0 (retsize: 4;)
	esp = esp + 0x00000030
	SCZO = cond(esp)
	// succ:  l00410723
l00410723:
	eax = Mem0[esi + 0x00000070:word32]
	SZO = cond(eax & 0x00002000)
	C = false
	branch Test(EQ,Z) l0041077B
	// succ:  l0041072D l0041077B
l0041072D:
	SZO = cond(al & al)
	C = false
	branch Test(NS,S) l00410744
	// succ:  l00410731 l00410744
l00410731:
	SCZO = cond(Mem0[esi + 0x0000011A:word16] - 0x0000)
	branch Test(NE,Z) l0041077B
	// succ:  l0041073B l0041077B
l0041073B:
	SZO = cond(Mem0[esi + 0x00000126:byte] & 0x04)
	C = false
	branch Test(NE,Z) l0041077B
	// succ:  l00410744 l0041077B
l00410744:
	SCZO = cond(Mem0[esi + 0x00000126:byte] - 0x03)
	branch Test(EQ,Z) l0041077B
	// succ:  l0041074D l0041077B
l0041074D:
	edx = Mem0[esi + 0x00000158:word32]
	eax = Mem0[esi + 0x00000170:word32]
	ecx = Mem0[esi + 0x00000164:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	edx = Mem0[esi + 0x000000EC:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	edx = edx + 0x00000001
	SCZO = cond(edx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	eax = esi + 0x00000100
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn0040E5E0 (retsize: 4;)
	esp = esp + 0x00000014
	SCZO = cond(esp)
	// succ:  l0041077B
l0041077B:
	SZO = cond(Mem0[esi + 0x00000070:word32] & 0x00000400)
	C = false
	branch Test(EQ,Z) l0041079D
	// succ:  l00410784 l0041079D
l00410784:
	ecx = Mem0[esi + 0x000000EC:word32]
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	edx = esi + 0x00000100
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call fn0040C750 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l0041079D
l0041079D:
	SZO = cond(Mem0[esi + 0x00000070:byte] & 0x40)
	C = false
	branch Test(EQ,Z) l004107E1
	// succ:  l004107A3 l004107E1
l004107A3:
	eax = Mem0[esi + 0x000001F0:word32]
	ecx = Mem0[esi + 0x000001EC:word32]
	edx = Mem0[esi + 0x000000EC:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	edx = edx + 0x00000001
	SCZO = cond(edx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	eax = esi + 0x00000100
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn0040EFF0 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	SCZO = cond(Mem0[esi + 0x00000104:word32] - 0x00000000)
	branch Test(NE,Z) l004107E1
	// succ:  l004107D3 l004107E1
l004107D3:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417630
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l004107E1
l004107E1:
	SZO = cond(Mem0[esi + 0x00000070:byte] & 0x20)
	C = false
	branch Test(EQ,Z) l00410800
	// succ:  l004107E7 l00410800
l004107E7:
	ecx = Mem0[esi + 0x000000EC:word32]
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	edx = esi + 0x00000100
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call fn004109F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l00410800
l00410800:
	SZO = cond(Mem0[esi + 0x00000070:byte] & 0x08)
	C = false
	branch Test(EQ,Z) l00410826
	// succ:  l00410806 l00410826
l00410806:
	ecx = Mem0[esi + 0x000000EC:word32]
	eax = esi + 0x00000181
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	edx = esi + 0x00000100
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call fn0040C570 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	// succ:  l00410826
l00410826:
	SZO = cond(Mem0[esi + 0x00000070:byte] & 0x04)
	C = false
	branch Test(EQ,Z) l00410845
	// succ:  l0041082C l00410845
l0041082C:
	eax = Mem0[esi + 0x000000EC:word32]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	ecx = esi + 0x00000100
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	call fn0040C430 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l00410845
l00410845:
	SZO = cond(Mem0[esi + 0x00000070:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l00410864
	// succ:  l0041084B l00410864
l0041084B:
	edx = Mem0[esi + 0x000000EC:word32]
	edx = edx + 0x00000001
	SCZO = cond(edx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	eax = esi + 0x00000100
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn00410DD0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l00410864
l00410864:
	SZO = cond(Mem0[esi + 0x00000070:word32] & 0x00010000)
	C = false
	branch Test(EQ,Z) l00410886
	// succ:  l0041086D l00410886
l0041086D:
	ecx = Mem0[esi + 0x000000EC:word32]
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	edx = esi + 0x00000100
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call fn00410AC0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l00410886
l00410886:
	SZO = cond(Mem0[esi + 0x00000070:word32] & 0x00004000)
	C = false
	branch Test(EQ,Z) l004108B1
	// succ:  l0041088F l004108B1
l0041088F:
	SZO = cond(Mem0[esi + 0x00000068:word32] & 0x00000800)
	C = false
	branch Test(EQ,Z) l004108B1
	// succ:  l00410898 l004108B1
l00410898:
	eax = Mem0[esi + 0x000000EC:word32]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	ecx = esi + 0x00000100
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	call fn0040CD20 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l004108B1
l004108B1:
	SZO = cond(Mem0[esi + 0x00000070:word32] & 0x00008000)
	C = false
	branch Test(EQ,Z) l004108DF
	// succ:  l004108BA l004108DF
l004108BA:
	edx = Mem0[esi + 0x0000006C:word32]
	eax = (word32) Mem0[esi + 0x0000012E:word16]
	ecx = Mem0[esi + 0x000000EC:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	edx = esi + 0x00000100
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call fn0040CA00 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	// succ:  l004108DF
l004108DF:
	SZO = cond(Mem0[esi + 0x00000070:word32] & 0x00080000)
	C = false
	branch Test(EQ,Z) l00410901
	// succ:  l004108E8 l00410901
l004108E8:
	eax = Mem0[esi + 0x000000EC:word32]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	ecx = esi + 0x00000100
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	call fn0040C920 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l00410901
l00410901:
	SZO = cond(Mem0[esi + 0x00000070:word32] & 0x00020000)
	C = false
	branch Test(EQ,Z) l00410923
	// succ:  l0041090A l00410923
l0041090A:
	edx = Mem0[esi + 0x000000EC:word32]
	edx = edx + 0x00000001
	SCZO = cond(edx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	eax = esi + 0x00000100
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn0040C7A0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l00410923
l00410923:
	SZO = cond(Mem0[esi + 0x00000070:byte] & 0x10)
	C = false
	branch Test(EQ,Z) l00410942
	// succ:  l00410929 l00410942
l00410929:
	ecx = Mem0[esi + 0x000000EC:word32]
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	edx = esi + 0x00000100
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call fn00410A80 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l00410942
l00410942:
	SZO = cond(Mem0[esi + 0x00000070:word32] & 0x00100000)
	C = false
	branch Test(EQ,Z) l004109BB
	// succ:  l0041094B l004109BB
l0041094B:
	eax = Mem0[esi + 0x00000058:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00410969
	// succ:  l00410952 l00410969
l00410952:
	ecx = Mem0[esi + 0x000000EC:word32]
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	edx = esi + 0x00000100
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call eax (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	// succ:  l00410969
l00410969:
	al = Mem0[esi + 0x00000064:byte]
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l00410976
	// succ:  l00410970 l00410976
l00410970:
	Mem0[esi + 0x00000109:byte] = al
	// succ:  l00410976
l00410976:
	al = Mem0[esi + 0x00000065:byte]
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l00410983
	// succ:  l0041097D l00410983
l0041097D:
	Mem0[esi + 0x0000010A:byte] = al
	// succ:  l00410983
l00410983:
	al = Mem0[esi + 0x0000010A:byte]
	ax = Mem0[esi + 0x00000109:byte] *s al
	SCZO = cond(ax)
	Mem0[esi + 0x0000010B:byte] = al
	SCZO = cond(al - 0x08)
	eax = (word32) al
	branch Test(ULT,C) l004109A8
	// succ:  l0041099C l004109A8
l0041099C:
	eax = eax >>u 0x00000003
	SCZO = cond(eax)
	eax = eax *s Mem0[esi + 0x00000100:word32]
	SCZO = cond(eax)
	goto l004109B5
	// succ:  l004109B5
l004109A8:
	eax = eax *s Mem0[esi + 0x00000100:word32]
	SCZO = cond(eax)
	eax = eax + 0x00000007
	SCZO = cond(eax)
	eax = eax >>u 0x00000003
	SCZO = cond(eax)
	// succ:  l004109B5
l004109B5:
	Mem0[esi + 0x00000104:word32] = eax
	// succ:  l004109BB
l004109BB:
	ecx = Mem0[esp + 0x00000038:word32]
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x00000038
	SCZO = cond(esp)
	return
	// succ:  fn00410530_exit
fn00410530_exit:


// fn004109D0
// Return size: 4
void fn004109D0()
fn004109D0_entry:
	// succ:  l004109D0
l004109D0:
	esp = fp
	eax = Mem0[esp + 0x00000004:word32]
	SCZO = cond(Mem0[eax + 0x00000123:byte] - 0x00)
	branch Test(EQ,Z) l004109E7
	// succ:  l004109DD l004109E7
l004109DD:
	v6 = Mem0[eax + 0x00000070:word32] | 0x00000002
	Mem0[eax + 0x00000070:word32] = v6
	SZO = cond(Mem0[eax + 0x00000070:word32])
	C = false
	eax = 0x00000007
	return
	// succ:  fn004109D0_exit
l004109E7:
	eax = 0x00000001
	return
	// succ:  fn004109D0_exit
fn004109D0_exit:


// fn004109F0
// Return size: 4
void fn004109F0()
fn004109F0_entry:
	// succ:  l004109F0
l004109F0:
	esp = fp
	ecx = Mem0[esp + 0x00000004:word32]
	al = Mem0[ecx + 0x00000008:byte]
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l00410A15
	// succ:  l004109FB l00410A15
l004109FB:
	ecx = Mem0[ecx + 0x00000004:word32]
	SZO = cond(ecx & ecx)
	C = false
	eax = Mem0[esp + 0x00000008:word32]
	branch Test(ULE,CZ) l00410A7A
	// succ:  l00410A06 l00410A7A
l00410A06:
	dl = Mem0[eax:byte]
	dl = ~dl
	Mem0[eax:byte] = dl
	eax = eax + 0x00000001
	SCZO = cond(eax)
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	branch Test(NE,Z) l00410A06
	// succ:  l00410A14 l00410A06
l00410A14:
	return
	// succ:  fn004109F0_exit
l00410A15:
	SCZO = cond(al - 0x04)
	branch Test(NE,Z) l00410A7A
	// succ:  l00410A19 l00410A7A
l00410A19:
	SCZO = cond(Mem0[ecx + 0x00000009:byte] - 0x08)
	branch Test(NE,Z) l00410A41
	// succ:  l00410A1F l00410A41
l00410A1F:
	ecx = Mem0[ecx + 0x00000004:word32]
	SZO = cond(ecx & ecx)
	C = false
	eax = Mem0[esp + 0x00000008:word32]
	branch Test(ULE,CZ) l00410A7A
	// succ:  l00410A2A l00410A7A
l00410A2A:
	ecx = ecx + 0xFFFFFFFF
	SCZO = cond(ecx)
	ecx = ecx >>u 0x00000001
	SCZO = cond(ecx)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	// succ:  l00410A32
l00410A32:
	dl = Mem0[eax:byte]
	dl = ~dl
	Mem0[eax:byte] = dl
	eax = eax + 0x00000002
	SCZO = cond(eax)
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	branch Test(NE,Z) l00410A32
	// succ:  l00410A40 l00410A32
l00410A40:
	return
	// succ:  fn004109F0_exit
l00410A41:
	SCZO = cond(al - 0x04)
	branch Test(NE,Z) l00410A7A
	// succ:  l00410A45 l00410A7A
l00410A45:
	SCZO = cond(Mem0[ecx + 0x00000009:byte] - 0x10)
	branch Test(NE,Z) l00410A7A
	// succ:  l00410A4B l00410A7A
l00410A4B:
	ecx = Mem0[ecx + 0x00000004:word32]
	SZO = cond(ecx & ecx)
	C = false
	branch Test(ULE,CZ) l00410A7A
	// succ:  l00410A52 l00410A7A
l00410A52:
	eax = Mem0[esp + 0x00000008:word32]
	ecx = ecx + 0xFFFFFFFF
	SCZO = cond(ecx)
	ecx = ecx >>u 0x00000002
	SCZO = cond(ecx)
	eax = eax + 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	// succ:  l00410A62
l00410A62:
	edx = (word32) Mem0[eax - 0x00000001:byte]
	dl = ~dl
	Mem0[eax - 0x00000001:byte] = dl
	edx = (word32) Mem0[eax:byte]
	dl = ~dl
	Mem0[eax:byte] = dl
	eax = eax + 0x00000004
	SCZO = cond(eax)
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	branch Test(NE,Z) l00410A62
	// succ:  l00410A7A l00410A62
l00410A7A:
	return
	// succ:  fn004109F0_exit
fn004109F0_exit:


// fn00410A80
// Return size: 4
void fn00410A80()
fn00410A80_entry:
	// succ:  l00410A80
l00410A80:
	esp = fp
	edx = Mem0[esp + 0x00000004:word32]
	SCZO = cond(Mem0[edx + 0x00000009:byte] - 0x10)
	branch Test(NE,Z) l00410AB3
	// succ:  l00410A8A l00410AB3
l00410A8A:
	ecx = (word32) Mem0[edx + 0x0000000A:byte]
	ecx = ecx *s Mem0[edx:word32]
	SCZO = cond(ecx)
	SZO = cond(ecx & ecx)
	C = false
	eax = Mem0[esp + 0x00000008:word32]
	branch Test(ULE,CZ) l00410AB3
	// succ:  l00410A99 l00410AB3
l00410A99:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = ecx
	esp = esp + 0x00000000
	// succ:  l00410AA0
l00410AA0:
	cl = Mem0[eax:byte]
	dl = Mem0[eax + 0x00000001:byte]
	Mem0[eax:byte] = dl
	Mem0[eax + 0x00000001:byte] = cl
	eax = eax + 0x00000002
	SCZO = cond(eax)
	esi = esi - 0x00000001
	SCZO = cond(esi)
	branch Test(NE,Z) l00410AA0
	// succ:  l00410AB2 l00410AA0
l00410AB2:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00410AB3
l00410AB3:
	return
	// succ:  fn00410A80_exit
fn00410A80_exit:


// fn00410AC0
// Return size: 4
void fn00410AC0()
fn00410AC0_entry:
	// succ:  l00410AC0
l00410AC0:
	esp = fp
	eax = Mem0[esp + 0x00000004:word32]
	dl = Mem0[eax + 0x00000009:byte]
	SCZO = cond(dl - 0x08)
	branch Test(UGE,C) l00410B10
	// succ:  l00410ACC l00410B10
l00410ACC:
	ecx = Mem0[eax + 0x00000004:word32]
	eax = Mem0[esp + 0x00000008:word32]
	ecx = ecx + eax
	SCZO = cond(ecx)
	SCZO = cond(dl - 0x01)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	branch Test(NE,Z) l00410AE2
	// succ:  l00410ADB l00410AE2
l00410ADB:
	esi = 0x0041C040
	goto l00410AF8
	// succ:  l00410AF8
l00410AE2:
	SCZO = cond(dl - 0x02)
	branch Test(NE,Z) l00410AEE
	// succ:  l00410AE7 l00410AEE
l00410AE7:
	esi = 0x0041C140
	goto l00410AF8
	// succ:  l00410AF8
l00410AEE:
	SCZO = cond(dl - 0x04)
	branch Test(NE,Z) l00410B0F
	// succ:  l00410AF3 l00410B0F
l00410AF3:
	esi = 0x0041C240
	// succ:  l00410AF8
l00410AF8:
	SCZO = cond(eax - ecx)
	branch Test(UGE,C) l00410B0F
	// succ:  l00410AFC l00410B0F
l00410AFC:
	esp = esp + 0x00000000
	// succ:  l00410B00
l00410B00:
	edx = (word32) Mem0[eax:byte]
	dl = Mem0[edx + esi:byte]
	Mem0[eax:byte] = dl
	eax = eax + 0x00000001
	SCZO = cond(eax)
	SCZO = cond(eax - ecx)
	branch Test(ULT,C) l00410B00
	// succ:  l00410B0F l00410B00
l00410B0F:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00410B10
l00410B10:
	return
	// succ:  fn00410AC0_exit
fn00410AC0_exit:


// fn00410B20
// Return size: 4
void fn00410B20()
fn00410B20_entry:
	// succ:  l00410B20
l00410B20:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = Mem0[esp + 0x00000010:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = Mem0[esp + 0x0000000C:word32]
	dl = Mem0[ebp + 0x00000008:byte]
	SCZO = cond(dl - 0x02)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000014:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[ebp + 0x00000000:word32]
	eax = esi
	ecx = esi
	branch Test(EQ,Z) l00410B54
	// succ:  l00410B3F l00410B54
l00410B3F:
	SCZO = cond(dl - 0x06)
	branch Test(NE,Z) l00410CD7
	// succ:  l00410B48 l00410CD7
l00410B48:
	SZO = cond(ebx & 0x00400000)
	C = false
	branch Test(EQ,Z) l00410CD7
	// succ:  l00410B54 l00410CD7
l00410B54:
	SCZO = cond(Mem0[ebp + 0x0000000A:byte] - 0x04)
	branch Test(NE,Z) l00410CD7
	// succ:  l00410B5E l00410CD7
l00410B5E:
	SCZO = cond(Mem0[ebp + 0x00000009:byte] - 0x08)
	branch Test(NE,Z) l00410C00
	// succ:  l00410B68 l00410C00
l00410B68:
	SZO = cond(bl & bl)
	C = false
	branch Test(NS,S) l00410BBB
	// succ:  l00410B6C l00410BBB
l00410B6C:
	SCZO = cond(edi - 0x00000001)
	edx = esi + 0x00000003
	eax = esi + 0x00000004
	branch Test(ULE,CZ) l00410BED
	// succ:  l00410B77 l00410BED
l00410B77:
	esi = edi - 0x00000001
	ebx = ebx + 0x00000000
	// succ:  l00410B80
l00410B80:
	ecx = (word32) Mem0[eax:byte]
	Mem0[edx:byte] = cl
	ecx = (word32) Mem0[eax + 0x00000001:byte]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	Mem0[edx:byte] = cl
	ecx = (word32) Mem0[eax + 0x00000001:byte]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	Mem0[edx:byte] = cl
	edx = edx + 0x00000001
	SCZO = cond(edx)
	eax = eax + 0x00000002
	SCZO = cond(eax)
	esi = esi - 0x00000001
	SCZO = cond(esi)
	branch Test(NE,Z) l00410B80
	// succ:  l00410BA8 l00410B80
l00410BA8:
	eax = edi + edi * 0x00000002
	Mem0[ebp + 0x0000000B:byte] = 0x18
	Mem0[ebp + 0x00000004:word32] = eax
	Mem0[ebp + 0x0000000A:byte] = 0x03
	goto l00410DBE
	// succ:  l00410DBE
l00410BBB:
	SZO = cond(edi & edi)
	C = false
	branch Test(ULE,CZ) l00410BED
	// succ:  l00410BBF l00410BED
l00410BBF:
	esi = edi
	// succ:  l00410BC1
l00410BC1:
	edx = (word32) Mem0[eax + 0x00000001:byte]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	Mem0[ecx:byte] = dl
	edx = (word32) Mem0[eax + 0x00000001:byte]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	Mem0[ecx:byte] = dl
	edx = (word32) Mem0[eax + 0x00000001:byte]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	Mem0[ecx:byte] = dl
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	eax = eax + 0x00000001
	SCZO = cond(eax)
	esi = esi - 0x00000001
	SCZO = cond(esi)
	branch Test(NE,Z) l00410BC1
	// succ:  l00410BED l00410BC1
l00410BED:
	eax = edi + edi * 0x00000002
	Mem0[ebp + 0x0000000B:byte] = 0x18
	Mem0[ebp + 0x00000004:word32] = eax
	Mem0[ebp + 0x0000000A:byte] = 0x03
	goto l00410DBE
	// succ:  l00410DBE
l00410C00:
	SZO = cond(bl & bl)
	C = false
	branch Test(NS,S) l00410C66
	// succ:  l00410C04 l00410C66
l00410C04:
	SCZO = cond(edi - 0x00000001)
	edx = esi + 0x00000008
	eax = esi + 0x00000006
	branch Test(ULE,CZ) l00410CC2
	// succ:  l00410C13 l00410CC2
l00410C13:
	esi = edi - 0x00000001
	// succ:  l00410C16
l00410C16:
	ecx = (word32) Mem0[edx:byte]
	Mem0[eax:byte] = cl
	ecx = (word32) Mem0[edx + 0x00000001:byte]
	edx = edx + 0x00000001
	SCZO = cond(edx)
	Mem0[eax + 0x00000001:byte] = cl
	ecx = (word32) Mem0[edx + 0x00000001:byte]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	Mem0[eax + 0x00000001:byte] = cl
	ecx = (word32) Mem0[edx + 0x00000001:byte]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	eax = eax + 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = cl
	ecx = (word32) Mem0[edx + 0x00000001:byte]
	edx = edx + 0x00000001
	SCZO = cond(edx)
	eax = eax + 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = cl
	ecx = (word32) Mem0[edx + 0x00000001:byte]
	edx = edx + 0x00000001
	SCZO = cond(edx)
	eax = eax + 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = cl
	eax = eax + 0x00000001
	SCZO = cond(eax)
	edx = edx + 0x00000003
	SCZO = cond(edx)
	esi = esi - 0x00000001
	SCZO = cond(esi)
	branch Test(NE,Z) l00410C16
	// succ:  l00410C64 l00410C16
l00410C64:
	goto l00410CC2
	// succ:  l00410CC2
l00410C66:
	SZO = cond(edi & edi)
	C = false
	branch Test(ULE,CZ) l00410CC2
	// succ:  l00410C6A l00410CC2
l00410C6A:
	esi = edi
	esp = esp + 0x00000000
	// succ:  l00410C70
l00410C70:
	edx = (word32) Mem0[eax + 0x00000002:byte]
	Mem0[ecx:byte] = dl
	eax = eax + 0x00000002
	SCZO = cond(eax)
	edx = (word32) Mem0[eax + 0x00000001:byte]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	Mem0[ecx + 0x00000001:byte] = dl
	edx = (word32) Mem0[eax + 0x00000001:byte]
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	eax = eax + 0x00000001
	SCZO = cond(eax)
	Mem0[ecx + 0x00000001:byte] = dl
	edx = (word32) Mem0[eax + 0x00000001:byte]
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	eax = eax + 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	Mem0[ecx:byte] = dl
	edx = (word32) Mem0[eax + 0x00000001:byte]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	Mem0[ecx:byte] = dl
	edx = (word32) Mem0[eax + 0x00000001:byte]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	Mem0[ecx:byte] = dl
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	eax = eax + 0x00000001
	SCZO = cond(eax)
	esi = esi - 0x00000001
	SCZO = cond(esi)
	branch Test(NE,Z) l00410C70
	// succ:  l00410CC2 l00410C70
l00410CC2:
	eax = edi + edi * 0x00000002
	eax = eax + eax
	SCZO = cond(eax)
	Mem0[ebp + 0x0000000B:byte] = 0x30
	Mem0[ebp + 0x00000004:word32] = eax
	Mem0[ebp + 0x0000000A:byte] = 0x03
	eax = edi + edi * 0x00000002
	eax = eax + eax
	SCZO = cond(eax)
	Mem0[ebp + 0x0000000B:byte] = 0x30
	Mem0[ebp + 0x00000004:word32] = eax
	Mem0[ebp + 0x0000000A:byte] = 0x03
	goto l00410DBE
	// succ:  l00410DBE
l00410CD7:
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l00410CF0
	// succ:  l00410CDB l00410CF0
l00410CDB:
	SCZO = cond(dl - 0x04)
	branch Test(NE,Z) l00410DBE
	// succ:  l00410CE4 l00410DBE
l00410CE4:
	SZO = cond(ebx & 0x00400000)
	C = false
	branch Test(EQ,Z) l00410DCA
	// succ:  l00410CF0 l00410DCA
l00410CF0:
	SCZO = cond(Mem0[ebp + 0x0000000A:byte] - 0x02)
	branch Test(NE,Z) l00410DBE
	// succ:  l00410CFA l00410DBE
l00410CFA:
	dl = 0x08
	SCZO = cond(Mem0[ebp + 0x00000009:byte] - dl)
	branch Test(NE,Z) l00410D53
	// succ:  l00410D01 l00410D53
l00410D01:
	SZO = cond(bl & bl)
	C = false
	branch Test(NS,S) l00410D2E
	// succ:  l00410D05 l00410D2E
l00410D05:
	SZO = cond(edi & edi)
	C = false
	branch Test(ULE,CZ) l00410D4B
	// succ:  l00410D09 l00410D4B
l00410D09:
	esi = edi
	// succ:  l00410D10
l00410D10:
	bl = Mem0[eax:byte]
	Mem0[ecx:byte] = bl
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	eax = eax + 0x00000002
	SCZO = cond(eax)
	esi = esi - 0x00000001
	SCZO = cond(esi)
	branch Test(NE,Z) l00410D10
	// succ:  l00410D1F l00410D10
l00410D1F:
	ebx = Mem0[esp + 0x0000001C:word32]
	Mem0[ebp + 0x0000000B:byte] = dl
	Mem0[ebp + 0x00000004:word32] = edi
	goto l00410DBA
	// succ:  l00410DBA
l00410D2E:
	SZO = cond(edi & edi)
	C = false
	branch Test(ULE,CZ) l00410D4B
	// succ:  l00410D32 l00410D4B
l00410D32:
	esi = edi
	// succ:  l00410D34
l00410D34:
	bl = Mem0[eax + 0x00000001:byte]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	Mem0[ecx:byte] = bl
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	eax = eax + 0x00000001
	SCZO = cond(eax)
	esi = esi - 0x00000001
	SCZO = cond(esi)
	branch Test(NE,Z) l00410D34
	// succ:  l00410D47 l00410D34
l00410D47:
	ebx = Mem0[esp + 0x0000001C:word32]
	// succ:  l00410D4B
l00410D4B:
	Mem0[ebp + 0x0000000B:byte] = dl
	Mem0[ebp + 0x00000004:word32] = edi
	goto l00410DBA
	// succ:  l00410DBA
l00410D53:
	SZO = cond(bl & bl)
	C = false
	branch Test(NS,S) l00410D83
	// succ:  l00410D57 l00410D83
l00410D57:
	SCZO = cond(edi - 0x00000001)
	edx = esi + 0x00000004
	eax = esi + 0x00000002
	branch Test(ULE,CZ) l00410DB0
	// succ:  l00410D62 l00410DB0
l00410D62:
	esi = edi - 0x00000001
	// succ:  l00410D65
l00410D65:
	ecx = (word32) Mem0[edx:byte]
	Mem0[eax:byte] = cl
	ecx = (word32) Mem0[edx + 0x00000001:byte]
	edx = edx + 0x00000001
	SCZO = cond(edx)
	eax = eax + 0x00000001
	SCZO = cond(eax)
	Mem0[eax:byte] = cl
	eax = eax + 0x00000001
	SCZO = cond(eax)
	edx = edx + 0x00000003
	SCZO = cond(edx)
	esi = esi - 0x00000001
	SCZO = cond(esi)
	branch Test(NE,Z) l00410D65
	// succ:  l00410D81 l00410D65
l00410D81:
	goto l00410DB0
	// succ:  l00410DB0
l00410D83:
	SZO = cond(edi & edi)
	C = false
	branch Test(ULE,CZ) l00410DB0
	// succ:  l00410D87 l00410DB0
l00410D87:
	esi = edi
	esp = esp + 0x00000000
	// succ:  l00410D90
l00410D90:
	edx = (word32) Mem0[eax + 0x00000002:byte]
	eax = eax + 0x00000002
	SCZO = cond(eax)
	Mem0[ecx:byte] = dl
	edx = (word32) Mem0[eax + 0x00000001:byte]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	Mem0[ecx:byte] = dl
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	eax = eax + 0x00000001
	SCZO = cond(eax)
	esi = esi - 0x00000001
	SCZO = cond(esi)
	branch Test(NE,Z) l00410D90
	// succ:  l00410DB0 l00410D90
l00410DB0:
	eax = edi + edi
	Mem0[ebp + 0x0000000B:byte] = 0x10
	Mem0[ebp + 0x00000004:word32] = eax
	eax = edi + edi
	Mem0[ebp + 0x0000000B:byte] = 0x10
	Mem0[ebp + 0x00000004:word32] = eax
	// succ:  l00410DBA
l00410DBA:
	Mem0[ebp + 0x0000000A:byte] = 0x01
	// succ:  l00410DBE
l00410DBE:
	SZO = cond(ebx & 0x00400000)
	C = false
	branch Test(EQ,Z) l00410DCA
	// succ:  l00410DC6 l00410DCA
l00410DC6:
	v19 = Mem0[ebp + 0x00000008:byte] & 0xFB
	Mem0[ebp + 0x00000008:byte] = v19
	SZO = cond(Mem0[ebp + 0x00000008:byte])
	C = false
	// succ:  l00410DCA
l00410DCA:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00410B20_exit
fn00410B20_exit:


// fn00410DD0
// Return size: 4
void fn00410DD0()
fn00410DD0_entry:
	// succ:  l00410DD0
l00410DD0:
	esp = fp
	eax = Mem0[esp + 0x00000004:word32]
	dl = Mem0[eax + 0x00000008:byte]
	SZO = cond(dl & 0x02)
	C = false
	branch Test(EQ,Z) l00410EB5
	// succ:  l00410DE0 l00410EB5
l00410DE0:
	ecx = Mem0[eax:word32]
	al = Mem0[eax + 0x00000009:byte]
	SCZO = cond(al - 0x08)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	branch Test(NE,Z) l00410E44
	// succ:  l00410DEA l00410E44
l00410DEA:
	SCZO = cond(dl - 0x02)
	branch Test(NE,Z) l00410E14
	// succ:  l00410DEF l00410E14
l00410DEF:
	SZO = cond(ecx & ecx)
	C = false
	eax = Mem0[esp + 0x0000000C:word32]
	branch Test(ULE,CZ) l00410EB4
	// succ:  l00410DFB l00410EB4
l00410DFB:
	esi = ecx
	ecx = ecx + 0x00000000
	// succ:  l00410E00
l00410E00:
	cl = Mem0[eax:byte]
	dl = Mem0[eax + 0x00000002:byte]
	Mem0[eax:byte] = dl
	Mem0[eax + 0x00000002:byte] = cl
	eax = eax + 0x00000003
	SCZO = cond(eax)
	esi = esi - 0x00000001
	SCZO = cond(esi)
	branch Test(NE,Z) l00410E00
	// succ:  l00410E12 l00410E00
l00410E12:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00410DD0_exit
l00410E14:
	SCZO = cond(dl - 0x06)
	branch Test(NE,Z) l00410EB4
	// succ:  l00410E1D l00410EB4
l00410E1D:
	SZO = cond(ecx & ecx)
	C = false
	eax = Mem0[esp + 0x0000000C:word32]
	branch Test(ULE,CZ) l00410EB4
	// succ:  l00410E29 l00410EB4
l00410E29:
	esi = ecx
	// succ:  l00410E30
l00410E30:
	cl = Mem0[eax:byte]
	dl = Mem0[eax + 0x00000002:byte]
	Mem0[eax:byte] = dl
	Mem0[eax + 0x00000002:byte] = cl
	eax = eax + 0x00000004
	SCZO = cond(eax)
	esi = esi - 0x00000001
	SCZO = cond(esi)
	branch Test(NE,Z) l00410E30
	// succ:  l00410E42 l00410E30
l00410E42:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00410DD0_exit
l00410E44:
	SCZO = cond(al - 0x10)
	branch Test(NE,Z) l00410EB4
	// succ:  l00410E48 l00410EB4
l00410E48:
	SCZO = cond(dl - 0x02)
	branch Test(NE,Z) l00410E82
	// succ:  l00410E4D l00410E82
l00410E4D:
	SZO = cond(ecx & ecx)
	C = false
	branch Test(ULE,CZ) l00410EB4
	// succ:  l00410E51 l00410EB4
l00410E51:
	eax = Mem0[esp + 0x0000000C:word32]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	esi = ecx
	ebx = ebx + 0x00000000
	// succ:  l00410E60
l00410E60:
	edx = (word32) Mem0[eax + 0x00000003:byte]
	cl = Mem0[eax - 0x00000001:byte]
	Mem0[eax - 0x00000001:byte] = dl
	edx = (word32) Mem0[eax + 0x00000004:byte]
	Mem0[eax + 0x00000003:byte] = cl
	cl = Mem0[eax:byte]
	Mem0[eax:byte] = dl
	Mem0[eax + 0x00000004:byte] = cl
	eax = eax + 0x00000006
	SCZO = cond(eax)
	esi = esi - 0x00000001
	SCZO = cond(esi)
	branch Test(NE,Z) l00410E60
	// succ:  l00410E80 l00410E60
l00410E80:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00410DD0_exit
l00410E82:
	SCZO = cond(dl - 0x06)
	branch Test(NE,Z) l00410EB4
	// succ:  l00410E87 l00410EB4
l00410E87:
	SZO = cond(ecx & ecx)
	C = false
	branch Test(ULE,CZ) l00410EB4
	// succ:  l00410E8B l00410EB4
l00410E8B:
	eax = Mem0[esp + 0x0000000C:word32]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	esi = ecx
	// succ:  l00410E94
l00410E94:
	edx = (word32) Mem0[eax + 0x00000003:byte]
	cl = Mem0[eax - 0x00000001:byte]
	Mem0[eax - 0x00000001:byte] = dl
	edx = (word32) Mem0[eax + 0x00000004:byte]
	Mem0[eax + 0x00000003:byte] = cl
	cl = Mem0[eax:byte]
	Mem0[eax:byte] = dl
	Mem0[eax + 0x00000004:byte] = cl
	eax = eax + 0x00000008
	SCZO = cond(eax)
	esi = esi - 0x00000001
	SCZO = cond(esi)
	branch Test(NE,Z) l00410E94
	// succ:  l00410EB4 l00410E94
l00410EB4:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00410EB5
l00410EB5:
	return
	// succ:  fn00410DD0_exit
fn00410DD0_exit:


// fn00410EC0
// Return size: 4
void fn00410EC0()
fn00410EC0_entry:
	// succ:  l00410EC0
l00410EC0:
	esp = fp
	SCZO = cond(Mem0[esp + 0x00000004:word32] - 0x00000000)
	branch Test(EQ,Z) l00410EEA
	// succ:  l00410EC7 l00410EEA
l00410EC7:
	eax = Mem0[esp + 0x00000008:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00410EEA
	// succ:  l00410ECF l00410EEA
l00410ECF:
	ecx = Mem0[esp + 0x0000000C:word32]
	edx = Mem0[ecx:word32]
	Mem0[eax + 0x0000005A:word32] = edx
	edx = Mem0[ecx + 0x00000004:word32]
	Mem0[eax + 0x0000005E:word32] = edx
	cx = Mem0[ecx + 0x00000008:word16]
	v11 = Mem0[eax + 0x00000008:word32] | 0x00000020
	Mem0[eax + 0x00000008:word32] = v11
	SZO = cond(Mem0[eax + 0x00000008:word32])
	C = false
	Mem0[eax + 0x00000062:word16] = cx
	// succ:  l00410EEA
l00410EEA:
	return
	// succ:  fn00410EC0_exit
fn00410EC0_exit:


// fn00410EF0
// Return size: 4
void fn00410EF0()
fn00410EF0_entry:
	// succ:  l00410EF0
l00410EF0:
	esp = fp
	ecx = Mem0[esp + 0x00000004:word32]
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l0041122A
	// succ:  l00410EFC l0041122A
l00410EFC:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x0000000C:word32]
	SZO = cond(esi & esi)
	C = false
	branch Test(EQ,Z) l00411229
	// succ:  l00410F09 l00411229
l00410F09:
	rLoc1 = 0
	rLoc2 = Mem0[esp + 0x00000010:real64]
	FPUF = cond(rLoc2 - rLoc2)
	SCZO = FPUF
	branch Test(LT,FPUF) l00411217
	// succ:  l00410F1C l00411217
l00410F1C:
	rLoc3 = Mem0[esp + 0x00000018:real64]
	FPUF = cond(rLoc3 - rLoc3)
	SCZO = FPUF
	branch Test(LT,FPUF) l004111C3
	// succ:  l00410F2D l004111C3
l00410F2D:
	v13 = rLoc3
	rLoc3 = rLoc1
	rLoc1 = v13
	FPUF = cond(rLoc3 - Mem0[esp + 0x00000020:real64])
	SCZO = FPUF
	branch Test(LT,FPUF) l004111F9
	// succ:  l00410F3E l004111F9
l00410F3E:
	FPUF = cond(rLoc3 - Mem0[esp + 0x00000028:real64])
	SCZO = FPUF
	branch Test(LT,FPUF) l004111F9
	// succ:  l00410F4D l004111F9
l00410F4D:
	rLoc4 = Mem0[esp + 0x00000030:real64]
	FPUF = cond(rLoc4 - rLoc4)
	SCZO = FPUF
	branch Test(LT,FPUF) l00411213
	// succ:  l00410F5E l00411213
l00410F5E:
	rLoc5 = Mem0[esp + 0x00000038:real64]
	FPUF = cond(rLoc5 - rLoc5)
	SCZO = FPUF
	branch Test(LT,FPUF) l004111D9
	// succ:  l00410F6F l004111D9
l00410F6F:
	rLoc6 = Mem0[esp + 0x00000040:real64]
	FPUF = cond(rLoc6 - rLoc6)
	SCZO = FPUF
	branch Test(LT,FPUF) l004111F3
	// succ:  l00410F80 l004111F3
l00410F80:
	rLoc7 = Mem0[esp + 0x00000048:real64]
	FPUF = cond(rLoc7 - rLoc7)
	ax = (word16) FPUF << 8
	rLoc3 = rLoc7
	SZO = cond(ah & 0x05)
	C = false
	branch Test(PO,P) l0041120F
	// succ:  l00410F93 l0041120F
l00410F93:
	rLoc7 = Mem0[0x00417718:real64]
	FPUF = cond(rLoc7 - rLoc7)
	SCZO = FPUF
	branch Test(LT,FPUF) l004110F5
	// succ:  l00410FA6 l004110F5
l00410FA6:
	FPUF = cond(rLoc7 - rLoc7)
	ax = (word16) FPUF << 8
	rLoc1 = rLoc7
	SZO = cond(ah & 0x05)
	C = false
	branch Test(PO,P) l00411113
	// succ:  l00410FB5 l00411113
l00410FB5:
	v21 = rLoc6
	rLoc6 = rLoc1
	rLoc1 = v21
	FPUF = cond(rLoc6 - Mem0[esp + 0x00000020:real64])
	SCZO = FPUF
	branch Test(LT,FPUF) l0041112F
	// succ:  l00410FC6 l0041112F
l00410FC6:
	rLoc7 = Mem0[esp + 0x00000028:real64]
	FPUF = cond(rLoc7 - rLoc7)
	SCZO = FPUF
	branch Test(LT,FPUF) l0041114B
	// succ:  l00410FD7 l0041114B
l00410FD7:
	v22 = rLoc7
	rLoc7 = rLoc4
	rLoc4 = v22
	FPUF = cond(rLoc7 - rLoc7)
	SCZO = FPUF
	branch Test(LT,FPUF) l00411169
	// succ:  l00410FE6 l00411169
l00410FE6:
	v23 = rLoc7
	rLoc7 = rLoc5
	rLoc5 = v23
	FPUF = cond(rLoc7 - rLoc7)
	SCZO = FPUF
	branch Test(LT,FPUF) l00411187
	// succ:  l00410FF5 l00411187
l00410FF5:
	v24 = rLoc7
	rLoc7 = rLoc1
	rLoc1 = v24
	FPUF = cond(rLoc7 - rLoc7)
	SCZO = FPUF
	branch Test(LT,FPUF) l004111A5
	// succ:  l00411004 l004111A5
l00411004:
	v25 = rLoc7
	rLoc7 = rLoc6
	rLoc6 = v25
	FPUF = cond(rLoc7 - rLoc7)
	SCZO = FPUF
	branch Test(LT,FPUF) l004111A7
	// succ:  l00411013 l004111A7
l00411013:
	v26 = rLoc6
	rLoc6 = rLoc2
	rLoc2 = v26
	Mem0[esi + 0x00000080:real32] = rLoc6
	rLoc7 = Mem0[esp + 0x00000018:real64]
	Mem0[esi + 0x00000084:real32] = rLoc7
	rLoc7 = Mem0[esp + 0x00000020:real64]
	Mem0[esi + 0x00000088:real32] = rLoc7
	v27 = rLoc6
	rLoc6 = rLoc4
	rLoc4 = v27
	Mem0[esi + 0x0000008C:real32] = rLoc6
	Mem0[esi + 0x00000090:real32] = rLoc5
	v28 = rLoc5
	rLoc5 = rLoc1
	rLoc1 = v28
	Mem0[esi + 0x00000094:real32] = rLoc5
	v29 = rLoc5
	rLoc5 = rLoc2
	rLoc2 = v29
	Mem0[esi + 0x00000098:real32] = rLoc5
	v30 = rLoc5
	rLoc5 = rLoc3
	rLoc3 = v30
	Mem0[esi + 0x0000009C:real32] = rLoc5
	rLoc6 = Mem0[0x00416A30:real64]
	rLoc6 = rLoc6 * rLoc4
	rLoc7 = Mem0[0x0041ACD8:real64]
	rLoc7 = rLoc7 + rLoc4
	v31 = rLoc7
	rLoc7 = rLoc4
	rLoc4 = v31
	call fn00412520 (retsize: 4; FPU: 7;)
	rLoc7 = Mem0[esp + 0x00000018:real64]
	rLoc7 = rLoc7 * rLoc6
	Mem0[esi + 0x00000100:word32] = eax
	rLoc7 = rLoc7 + rLoc4
	call fn00412520 (retsize: 4; FPU: 7;)
	rLoc7 = Mem0[esp + 0x00000020:real64]
	rLoc7 = rLoc7 * rLoc6
	Mem0[esi + 0x00000104:word32] = eax
	rLoc7 = rLoc7 + rLoc4
	call fn00412520 (retsize: 4; FPU: 7;)
	rLoc7 = Mem0[esp + 0x00000028:real64]
	rLoc7 = rLoc7 * rLoc6
	Mem0[esi + 0x00000108:word32] = eax
	rLoc7 = rLoc7 + rLoc4
	call fn00412520 (retsize: 4; FPU: 7;)
	rLoc6 = rLoc6 * rLoc1
	v33 = rLoc6
	rLoc6 = rLoc1
	rLoc1 = v33
	Mem0[esi + 0x0000010C:word32] = eax
	rLoc6 = rLoc6 + rLoc4
	call fn00412520 (retsize: 4; FPU: 6;)
	v34 = rLoc5
	rLoc5 = rLoc2
	rLoc2 = v34
	rLoc5 = rLoc5 * rLoc1
	Mem0[esi + 0x00000110:word32] = eax
	rLoc5 = rLoc5 + rLoc4
	call fn00412520 (retsize: 4; FPU: 5;)
	v35 = rLoc4
	rLoc4 = rLoc3
	rLoc3 = v35
	rLoc4 = rLoc4 * rLoc1
	Mem0[esi + 0x00000114:word32] = eax
	rLoc4 = rLoc4 + rLoc3
	call fn00412520 (retsize: 4; FPU: 4;)
	v36 = rLoc3
	rLoc3 = rLoc2
	rLoc2 = v36
	rLoc1 = rLoc1 * rLoc3
	Mem0[esi + 0x00000118:word32] = eax
	rLoc1 = rLoc1 + rLoc2
	call fn00412520 (retsize: 4; FPU: 1;)
	v37 = Mem0[esi + 0x00000008:word32] | 0x00000004
	Mem0[esi + 0x00000008:word32] = v37
	SZO = cond(Mem0[esi + 0x00000008:word32])
	C = false
	Mem0[esi + 0x0000011C:word32] = eax
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00410EF0_exit
l004110F5:
	rLoc7 = rLoc7
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004176D8
	rLoc2 = rLoc6
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	rLoc1 = rLoc5
	rLoc3 = rLoc4
	rLoc2 = rLoc3
	rLoc1 = rLoc2
	rLoc1 = rLoc1
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00410EF0_exit
l00411113:
	rLoc1 = rLoc6
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004176D8
	rLoc2 = rLoc5
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	rLoc3 = rLoc4
	rLoc1 = rLoc3
	rLoc2 = rLoc2
	rLoc1 = rLoc1
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00410EF0_exit
l0041112F:
	rLoc6 = rLoc6
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004176D8
	rLoc2 = rLoc5
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	rLoc3 = rLoc4
	rLoc1 = rLoc3
	rLoc2 = rLoc2
	rLoc1 = rLoc1
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00410EF0_exit
l0041114B:
	rLoc6 = rLoc7
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004176D8
	rLoc2 = rLoc6
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	rLoc2 = rLoc5
	rLoc3 = rLoc4
	rLoc1 = rLoc3
	rLoc2 = rLoc2
	rLoc1 = rLoc1
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00410EF0_exit
l00411169:
	rLoc6 = rLoc7
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004176D8
	rLoc2 = rLoc6
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	rLoc4 = rLoc5
	rLoc3 = rLoc4
	rLoc1 = rLoc3
	rLoc1 = rLoc2
	rLoc1 = rLoc1
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00410EF0_exit
l00411187:
	rLoc6 = rLoc7
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004176D8
	rLoc2 = rLoc6
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	rLoc4 = rLoc5
	rLoc3 = rLoc4
	rLoc1 = rLoc3
	rLoc2 = rLoc2
	rLoc1 = rLoc1
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00410EF0_exit
l004111A5:
	rLoc6 = rLoc7
	// succ:  l004111A7
l004111A7:
	rLoc2 = rLoc6
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004176D8
	rLoc4 = rLoc5
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	rLoc3 = rLoc4
	rLoc2 = rLoc3
	rLoc1 = rLoc2
	rLoc1 = rLoc1
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00410EF0_exit
l004111C3:
	rLoc1 = rLoc3
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004176A4
	rLoc2 = rLoc2
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	rLoc1 = rLoc1
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00410EF0_exit
l004111D9:
	rLoc3 = rLoc5
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004176A4
	rLoc2 = rLoc4
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	rLoc1 = rLoc3
	rLoc1 = rLoc2
	rLoc1 = rLoc1
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00410EF0_exit
l004111F3:
	rLoc3 = rLoc6
	rLoc2 = rLoc5
	rLoc1 = rLoc4
	// succ:  l004111F9
l004111F9:
	rLoc3 = rLoc3
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004176A4
	rLoc2 = rLoc2
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	rLoc1 = rLoc1
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00410EF0_exit
l0041120F:
	rLoc2 = rLoc6
	rLoc1 = rLoc5
	// succ:  l00411213
l00411213:
	rLoc3 = rLoc4
	rLoc2 = rLoc3
	// succ:  l00411217
l00411217:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004176A4
	rLoc1 = rLoc2
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	rLoc1 = rLoc1
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l00411229
l00411229:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l0041122A
l0041122A:
	return
	// succ:  fn00410EF0_exit
fn00410EF0_exit:


// fn00411230
// Return size: 4
void fn00411230()
fn00411230_entry:
	// succ:  l00411230
l00411230:
	esp = fp
	esp = esp - 0x00000008
	SCZO = cond(esp)
	SCZO = cond(Mem0[esp + 0x0000000C:word32] - 0x00000000)
	branch Test(EQ,Z) l00411414
	// succ:  l0041123E l00411414
l0041123E:
	ecx = Mem0[esp + 0x00000010:word32]
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l00411414
	// succ:  l0041124A l00411414
l0041124A:
	SCZO = cond(Mem0[esp + 0x00000014:word32] - 0x00000000)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	branch Test(LT,SO) l004113FE
	// succ:  l00411259 l004113FE
l00411259:
	SCZO = cond(Mem0[esp + 0x00000028:word32] - 0x00000000)
	branch Test(LT,SO) l004113FE
	// succ:  l00411264 l004113FE
l00411264:
	SCZO = cond(Mem0[esp + 0x0000002C:word32] - 0x00000000)
	branch Test(LT,SO) l004113FE
	// succ:  l0041126F l004113FE
l0041126F:
	ebp = Mem0[esp + 0x00000030:word32]
	SZO = cond(ebp & ebp)
	C = false
	branch Test(LT,SO) l004113FE
	// succ:  l0041127B l004113FE
l0041127B:
	ebx = Mem0[esp + 0x00000034:word32]
	SZO = cond(ebx & ebx)
	C = false
	branch Test(LT,SO) l004113FE
	// succ:  l00411287 l004113FE
l00411287:
	edi = Mem0[esp + 0x00000038:word32]
	SZO = cond(edi & edi)
	C = false
	branch Test(LT,SO) l004113FE
	// succ:  l00411293 l004113FE
l00411293:
	esi = Mem0[esp + 0x0000003C:word32]
	SZO = cond(esi & esi)
	C = false
	branch Test(LT,SO) l004113FE
	// succ:  l0041129F l004113FE
l0041129F:
	edx = Mem0[esp + 0x00000040:word32]
	SZO = cond(edx & edx)
	C = false
	branch Test(LT,SO) l004113FE
	// succ:  l004112AB l004113FE
l004112AB:
	rLoc1 = (real64) Mem0[esp + 0x00000024:int32]
	rLoc2 = Mem0[0x00417720:real64]
	FPUF = cond(rLoc2 - rLoc2)
	SCZO = FPUF
	branch Test(LT,FPUF) l004113E0
	// succ:  l004112C2 l004113E0
l004112C2:
	rLoc3 = (real64) Mem0[esp + 0x00000028:int32]
	Mem0[esp + 0x00000010:real64] = rLoc3
	FPUF = cond(rLoc3 - rLoc3)
	SCZO = FPUF
	branch Test(LT,FPUF) l004113E0
	// succ:  l004112D7 l004113E0
l004112D7:
	rLoc3 = (real64) Mem0[esp + 0x0000002C:int32]
	FPUF = cond(rLoc3 - rLoc3)
	SCZO = FPUF
	branch Test(LT,FPUF) l004113DE
	// succ:  l004112E8 l004113DE
l004112E8:
	rLoc4 = (real64) Mem0[esp + 0x00000030:int32]
	FPUF = cond(rLoc4 - rLoc4)
	SCZO = FPUF
	branch Test(LT,FPUF) l004113DC
	// succ:  l004112F9 l004113DC
l004112F9:
	rLoc5 = (real64) Mem0[esp + 0x00000034:int32]
	FPUF = cond(rLoc5 - rLoc5)
	SCZO = FPUF
	branch Test(LT,FPUF) l004113DA
	// succ:  l0041130A l004113DA
l0041130A:
	rLoc6 = (real64) Mem0[esp + 0x00000038:int32]
	FPUF = cond(rLoc6 - rLoc6)
	SCZO = FPUF
	branch Test(LT,FPUF) l004113D8
	// succ:  l0041131B l004113D8
l0041131B:
	rLoc7 = (real64) Mem0[esp + 0x0000003C:int32]
	FPUF = cond(rLoc7 - rLoc7)
	SCZO = FPUF
	branch Test(LT,FPUF) l004113D6
	// succ:  l0041132C l004113D6
l0041132C:
	rLoc8 = (real64) Mem0[esp + 0x00000040:int32]
	FPUF = cond(rLoc8 - rLoc8)
	ax = (word16) FPUF << 8
	rLoc2 = rLoc8
	SZO = cond(ah & 0x41)
	C = false
	branch Test(EQ,Z) l004113D6
	// succ:  l0041133F l004113D6
l0041133F:
	rLoc8 = Mem0[0x00416A30:real64]
	eax = Mem0[esp + 0x00000024:word32]
	rLoc8 = rLoc1 / rLoc8
	v26 = Mem0[ecx + 0x00000008:word32] | 0x00000004
	Mem0[ecx + 0x00000008:word32] = v26
	SZO = cond(Mem0[ecx + 0x00000008:word32])
	C = false
	Mem0[ecx + 0x00000100:word32] = eax
	eax = Mem0[esp + 0x00000028:word32]
	Mem0[ecx + 0x00000114:word32] = edi
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[ecx + 0x00000118:word32] = esi
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[ecx + 0x00000104:word32] = eax
	eax = Mem0[esp + 0x00000024:word32]
	Mem0[ecx + 0x0000010C:word32] = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[ecx + 0x00000110:word32] = ebx
	Mem0[ecx + 0x00000108:word32] = eax
	Mem0[ecx + 0x0000011C:word32] = edx
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	v27 = rLoc8
	rLoc8 = rLoc1
	rLoc1 = v27
	Mem0[ecx + 0x00000080:real32] = rLoc8
	rLoc8 = Mem0[esp:real64]
	rLoc8 = rLoc8 / rLoc1
	Mem0[ecx + 0x00000084:real32] = rLoc8
	v28 = rLoc7
	rLoc7 = rLoc3
	rLoc3 = v28
	rLoc7 = rLoc7 / rLoc1
	Mem0[ecx + 0x00000088:real32] = rLoc7
	v29 = rLoc6
	rLoc6 = rLoc4
	rLoc4 = v29
	rLoc6 = rLoc6 / rLoc1
	Mem0[ecx + 0x0000008C:real32] = rLoc6
	rLoc5 = rLoc5 / rLoc1
	Mem0[ecx + 0x00000090:real32] = rLoc5
	rLoc4 = rLoc4 / rLoc1
	Mem0[ecx + 0x00000094:real32] = rLoc4
	rLoc3 = rLoc3 / rLoc1
	Mem0[ecx + 0x00000098:real32] = rLoc3
	rLoc1 = rLoc2 / rLoc1
	Mem0[ecx + 0x0000009C:real32] = rLoc1
	esp = esp + 0x00000008
	SCZO = cond(esp)
	return
	// succ:  fn00411230_exit
l004113D6:
	rLoc2 = rLoc7
	// succ:  l004113D8
l004113D8:
	rLoc2 = rLoc6
	// succ:  l004113DA
l004113DA:
	rLoc2 = rLoc5
	// succ:  l004113DC
l004113DC:
	rLoc2 = rLoc4
	// succ:  l004113DE
l004113DE:
	rLoc2 = rLoc3
	// succ:  l004113E0
l004113E0:
	ecx = Mem0[esp + 0x0000001C:word32]
	rLoc2 = rLoc2
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004176D8
	rLoc1 = rLoc1
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000008
	SCZO = cond(esp)
	return
	// succ:  fn00411230_exit
l004113FE:
	edx = Mem0[esp + 0x0000001C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004176A4
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00411414
l00411414:
	esp = esp + 0x00000008
	SCZO = cond(esp)
	return
	// succ:  fn00411230_exit
fn00411230_exit:


// fn00411420
// Return size: 4
void fn00411420()
fn00411420_entry:
	// succ:  l00411420
l00411420:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp + 0x00000008:word32]
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l00411497
	// succ:  l00411429 l00411497
l00411429:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000010:word32]
	SZO = cond(esi & esi)
	C = false
	branch Test(EQ,Z) l00411496
	// succ:  l00411432 l00411496
l00411432:
	rLoc1 = Mem0[0x00417718:real64]
	rLoc2 = Mem0[esp + 0x00000014:real64]
	FPUF = cond(rLoc2 - rLoc2)
	ax = (word16) FPUF << 8
	rLoc1 = rLoc2
	SZO = cond(ah & 0x41)
	C = false
	branch Test(NE,Z) l0041145D
	// succ:  l00411447 l0041145D
l00411447:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417738
	rLoc1 = rLoc1
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	rLoc1 = Mem0[0x00417718:real64]
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l0041145D
l0041145D:
	Mem0[esi + 0x00000028:real32] = rLoc1
	rLoc2 = Mem0[0x00416A30:real64]
	rLoc2 = rLoc2 * rLoc1
	rLoc2 = rLoc2 + Mem0[0x0041ACD8:real64]
	call fn00412520 (retsize: 4; FPU: 2;)
	rLoc2 = 0
	v14 = Mem0[esi + 0x00000008:word32] | 0x00000001
	Mem0[esi + 0x00000008:word32] = v14
	SZO = cond(Mem0[esi + 0x00000008:word32])
	C = false
	FPUF = cond(rLoc2 - rLoc1)
	Mem0[esi + 0x000000FC:word32] = eax
	SCZO = FPUF
	branch Test(NE,FPUF) l00411496
	// succ:  l00411488 l00411496
l00411488:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417728
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l00411496
l00411496:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00411497
l00411497:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00411420_exit
fn00411420_exit:


// fn004114A0
// Return size: 4
void fn004114A0()
fn004114A0_entry:
	// succ:  l004114A0
l004114A0:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp + 0x00000008:word32]
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l00411514
	// succ:  l004114A9 l00411514
l004114A9:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000010:word32]
	SZO = cond(esi & esi)
	C = false
	branch Test(EQ,Z) l00411513
	// succ:  l004114B2 l00411513
l004114B2:
	eax = Mem0[esp + 0x00000014:word32]
	SCZO = cond(eax - 0x7FFFFFFF)
	branch Test(LE,SZO) l004114D2
	// succ:  l004114BD l004114D2
l004114BD:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417738
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	eax = 0x7FFFFFFF
	goto l004114E6
	// succ:  l004114E6
l004114D2:
	SZO = cond(eax & eax)
	C = false
	branch Test(GE,SO) l004114E6
	// succ:  l004114D6 l004114E6
l004114D6:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417754
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l004114E6
l004114E6:
	Mem0[esp + 0x0000000C:word32] = eax
	rLoc1 = (real64) Mem0[esp + 0x0000000C:int32]
	v11 = Mem0[esi + 0x00000008:word32] | 0x00000001
	Mem0[esi + 0x00000008:word32] = v11
	SZO = cond(Mem0[esi + 0x00000008:word32])
	C = false
	SZO = cond(eax & eax)
	C = false
	Mem0[esi + 0x000000FC:word32] = eax
	rLoc1 = rLoc1 / Mem0[0x00416A30:real64]
	Mem0[esi + 0x00000028:real32] = rLoc1
	branch Test(NE,Z) l00411513
	// succ:  l00411505 l00411513
l00411505:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417728
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l00411513
l00411513:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00411514
l00411514:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004114A0_exit
fn004114A0_exit:


// fn00411520
// Return size: 4
void fn00411520()
fn00411520_entry:
	// succ:  l00411520
l00411520:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp + 0x00000008:word32]
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l004115CF
	// succ:  l0041152D l004115CF
l0041152D:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000010:word32]
	SZO = cond(esi & esi)
	C = false
	branch Test(EQ,Z) l004115CE
	// succ:  l0041153A l004115CE
l0041153A:
	SCZO = cond(Mem0[esi + 0x00000014:word16] - 0x0000)
	branch Test(NE,Z) l00411552
	// succ:  l00411541 l00411552
l00411541:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004177A0
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00411520_exit
l00411552:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000008
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00407E80 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000200
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408C20 (retsize: 4;)
	esp = esp + 0x00000018
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	Mem0[edi + 0x000001F4:word32] = eax
	branch Test(NE,Z) l00411586
	// succ:  l00411575 l00411586
l00411575:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417774
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00411520_exit
l00411586:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[esi + 0x00000014:word16] - ax)
	branch Test(ULE,CZ) l004115BA
	// succ:  l0041158E l004115BA
l0041158E:
	ecx = Mem0[esp + 0x00000014:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	// succ:  l004115A0
l004115A0:
	edx = Mem0[edi + 0x000001F4:word32]
	bx = Mem0[ecx + eax * 0x0002:word16]
	Mem0[edx + eax * 0x0002:word16] = bx
	edx = (word32) Mem0[esi + 0x00000014:word16]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	SCZO = cond(eax - edx)
	branch Test(LT,SO) l004115A0
	// succ:  l004115B9 l004115A0
l004115B9:
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l004115BA
l004115BA:
	eax = Mem0[edi + 0x000001F4:word32]
	v14 = Mem0[esi + 0x00000008:word32] | 0x00000040
	Mem0[esi + 0x00000008:word32] = v14
	SZO = cond(Mem0[esi + 0x00000008:word32])
	C = false
	v15 = Mem0[esi + 0x000000B8:word32] | 0x00000008
	Mem0[esi + 0x000000B8:word32] = v15
	SZO = cond(Mem0[esi + 0x000000B8:word32])
	C = false
	Mem0[esi + 0x0000007C:word32] = eax
	// succ:  l004115CE
l004115CE:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l004115CF
l004115CF:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00411520_exit
fn00411520_exit:


// fn004115E0
// Return size: 4
void fn004115E0()
fn004115E0_entry:
	// succ:  l004115E0
l004115E0:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp + 0x00000008:word32]
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l00411804
	// succ:  l004115ED l00411804
l004115ED:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000010:word32]
	SZO = cond(esi & esi)
	C = false
	branch Test(EQ,Z) l00411803
	// succ:  l004115FA l00411803
l004115FA:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = Mem0[esp + 0x0000001C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = Mem0[esp + 0x0000001C:word32]
	SZO = cond(ebp & ebp)
	C = false
	branch Test(EQ,Z) l0041160C
	// succ:  l00411608 l0041160C
l00411608:
	SZO = cond(ebx & ebx)
	C = false
	branch Test(NE,Z) l0041161A
	// succ:  l0041160C l0041161A
l0041160C:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417968
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l0041161A
l0041161A:
	SCZO = cond(ebp - Mem0[edi + 0x00000264:word32])
	branch Test(UGT,CZ) l0041162A
	// succ:  l00411622 l0041162A
l00411622:
	SCZO = cond(ebx - Mem0[edi + 0x00000268:word32])
	branch Test(ULE,CZ) l00411638
	// succ:  l0041162A l00411638
l0041162A:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417940
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l00411638
l00411638:
	SCZO = cond(ebp - 0x7FFFFFFF)
	branch Test(UGT,CZ) l00411648
	// succ:  l00411640 l00411648
l00411640:
	SCZO = cond(ebx - 0x7FFFFFFF)
	branch Test(ULE,CZ) l00411656
	// succ:  l00411648 l00411656
l00411648:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417924
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l00411656
l00411656:
	SCZO = cond(ebp - 0x1FFFFF7E)
	branch Test(ULE,CZ) l0041166C
	// succ:  l0041165E l0041166C
l0041165E:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004178F4
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l0041166C
l0041166C:
	eax = Mem0[esp + 0x00000024:word32]
	SCZO = cond(eax - 0x00000001)
	branch Test(EQ,Z) l00411697
	// succ:  l00411675 l00411697
l00411675:
	SCZO = cond(eax - 0x00000002)
	branch Test(EQ,Z) l00411697
	// succ:  l0041167A l00411697
l0041167A:
	SCZO = cond(eax - 0x00000004)
	branch Test(EQ,Z) l00411697
	// succ:  l0041167F l00411697
l0041167F:
	SCZO = cond(eax - 0x00000008)
	branch Test(EQ,Z) l00411697
	// succ:  l00411684 l00411697
l00411684:
	SCZO = cond(eax - 0x00000010)
	branch Test(EQ,Z) l00411697
	// succ:  l00411689 l00411697
l00411689:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004178D8
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l00411697
l00411697:
	ebx = Mem0[esp + 0x00000028:word32]
	SZO = cond(ebx & ebx)
	C = false
	branch Test(LT,SO) l004116AE
	// succ:  l0041169F l004116AE
l0041169F:
	SCZO = cond(ebx - 0x00000001)
	branch Test(EQ,Z) l004116AE
	// succ:  l004116A4 l004116AE
l004116A4:
	SCZO = cond(ebx - 0x00000005)
	branch Test(EQ,Z) l004116AE
	// succ:  l004116A9 l004116AE
l004116A9:
	SCZO = cond(ebx - 0x00000006)
	branch Test(LE,SZO) l004116BC
	// succ:  l004116AE l004116BC
l004116AE:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004178BC
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l004116BC
l004116BC:
	SCZO = cond(ebx - 0x00000003)
	branch Test(NE,Z) l004116CA
	// succ:  l004116C1 l004116CA
l004116C1:
	SCZO = cond(Mem0[esp + 0x00000024:word32] - 0x00000008)
	branch Test(GT,SZO) l004116E0
	// succ:  l004116C8 l004116E0
l004116C8:
	goto l004116EE
	// succ:  l004116EE
l004116CA:
	SCZO = cond(ebx - 0x00000002)
	branch Test(EQ,Z) l004116D9
	// succ:  l004116CF l004116D9
l004116CF:
	SCZO = cond(ebx - 0x00000004)
	branch Test(EQ,Z) l004116D9
	// succ:  l004116D4 l004116D9
l004116D4:
	SCZO = cond(ebx - 0x00000006)
	branch Test(NE,Z) l004116EE
	// succ:  l004116D9 l004116EE
l004116D9:
	SCZO = cond(Mem0[esp + 0x00000024:word32] - 0x00000008)
	branch Test(GE,SO) l004116EE
	// succ:  l004116E0 l004116EE
l004116E0:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417888
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417888
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l004116EE
l004116EE:
	SCZO = cond(Mem0[esp + 0x0000002C:word32] - 0x00000002)
	branch Test(LT,SO) l00411703
	// succ:  l004116F5 l00411703
l004116F5:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417864
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l00411703
l00411703:
	SCZO = cond(Mem0[esp + 0x00000030:word32] - 0x00000000)
	branch Test(EQ,Z) l00411718
	// succ:  l0041170A l00411718
l0041170A:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417840
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l00411718
l00411718:
	ebp = 0x00001000
	SZO = cond(Mem0[edi + 0x00000068:word32] & ebp)
	C = false
	branch Test(EQ,Z) l00411739
	// succ:  l00411722 l00411739
l00411722:
	SCZO = cond(Mem0[edi + 0x00000230:word32] - 0x00000000)
	branch Test(EQ,Z) l00411739
	// succ:  l0041172B l00411739
l0041172B:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041780C
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l00411739
l00411739:
	eax = Mem0[esp + 0x00000034:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0041177F
	// succ:  l00411741 l0041177F
l00411741:
	SZO = cond(Mem0[edi + 0x00000230:byte] & 0x04)
	C = false
	branch Test(EQ,Z) l0041175E
	// succ:  l0041174A l0041175E
l0041174A:
	SCZO = cond(eax - 0x00000040)
	branch Test(NE,Z) l0041175E
	// succ:  l0041174F l0041175E
l0041174F:
	SZO = cond(Mem0[edi + 0x00000068:word32] & ebp)
	C = false
	branch Test(NE,Z) l0041175E
	// succ:  l00411754 l0041175E
l00411754:
	SCZO = cond(ebx - 0x00000002)
	branch Test(EQ,Z) l0041176C
	// succ:  l00411759 l0041176C
l00411759:
	SCZO = cond(ebx - 0x00000006)
	branch Test(EQ,Z) l0041176C
	// succ:  l0041175E l0041176C
l0041175E:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004177EC
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408740 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l0041176C
l0041176C:
	SZO = cond(Mem0[edi + 0x00000068:word32] & ebp)
	C = false
	branch Test(EQ,Z) l0041177F
	// succ:  l00411771 l0041177F
l00411771:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004177CC
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l0041177F
l0041177F:
	SCZO = cond(bl - 0x03)
	eax = Mem0[esp + 0x00000020:word32]
	ecx = Mem0[esp + 0x0000001C:word32]
	dl = Mem0[esp + 0x00000024:byte]
	Mem0[esi + 0x00000004:word32] = eax
	al = Mem0[esp + 0x00000030:byte]
	Mem0[esi + 0x0000001A:byte] = al
	al = Mem0[esp + 0x00000034:byte]
	Mem0[esi + 0x0000001B:byte] = al
	al = Mem0[esp + 0x0000002C:byte]
	Mem0[esi:word32] = ecx
	Mem0[esi + 0x00000018:byte] = dl
	Mem0[esi + 0x00000019:byte] = bl
	Mem0[esi + 0x0000001C:byte] = al
	branch Test(EQ,Z) l004117BB
	// succ:  l004117B0 l004117BB
l004117B0:
	SZO = cond(bl & 0x02)
	C = false
	branch Test(EQ,Z) l004117BB
	// succ:  l004117B5 l004117BB
l004117B5:
	Mem0[esi + 0x0000001D:byte] = 0x03
	goto l004117BF
	// succ:  l004117BF
l004117BB:
	Mem0[esi + 0x0000001D:byte] = 0x01
	// succ:  l004117BF
l004117BF:
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	SZO = cond(bl & 0x04)
	C = false
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	branch Test(EQ,Z) l004117CA
	// succ:  l004117C6 l004117CA
l004117C6:
	v18 = Mem0[esi + 0x0000001D:byte] + 0x01
	Mem0[esi + 0x0000001D:byte] = v18
	SCZO = cond(v18)
	// succ:  l004117CA
l004117CA:
	al = Mem0[esi + 0x0000001D:byte]
	ax = dl *s al
	SCZO = cond(ax)
	SCZO = cond(ecx - 0x1FFFFF7E)
	Mem0[esi + 0x0000001E:byte] = al
	branch Test(ULE,CZ) l004117E4
	// succ:  l004117DA l004117E4
l004117DA:
	Mem0[esi + 0x0000000C:word32] = 0x00000000
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004115E0_exit
l004117E4:
	SCZO = cond(al - 0x08)
	eax = (word32) al
	branch Test(ULT,C) l004117F7
	// succ:  l004117EB l004117F7
l004117EB:
	eax = eax >>u 0x00000003
	SCZO = cond(eax)
	eax = eax *s ecx
	SCZO = cond(eax)
	Mem0[esi + 0x0000000C:word32] = eax
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004115E0_exit
l004117F7:
	eax = eax *s ecx
	SCZO = cond(eax)
	eax = eax + 0x00000007
	SCZO = cond(eax)
	eax = eax >>u 0x00000003
	SCZO = cond(eax)
	Mem0[esi + 0x0000000C:word32] = eax
	// succ:  l00411803
l00411803:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00411804
l00411804:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004115E0_exit
fn004115E0_exit:


// fn00411810
// Return size: 4
void fn00411810()
fn00411810_entry:
	// succ:  l00411810
l00411810:
	esp = fp
	SCZO = cond(Mem0[esp + 0x00000004:word32] - 0x00000000)
	branch Test(EQ,Z) l0041183B
	// succ:  l00411817 l0041183B
l00411817:
	eax = Mem0[esp + 0x00000008:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0041183B
	// succ:  l0041181F l0041183B
l0041181F:
	ecx = Mem0[esp + 0x0000000C:word32]
	edx = Mem0[esp + 0x00000010:word32]
	v10 = Mem0[eax + 0x00000008:word32] | 0x00000100
	Mem0[eax + 0x00000008:word32] = v10
	SZO = cond(Mem0[eax + 0x00000008:word32])
	C = false
	Mem0[eax + 0x00000064:word32] = ecx
	cl = Mem0[esp + 0x00000014:byte]
	Mem0[eax + 0x00000068:word32] = edx
	Mem0[eax + 0x0000006C:byte] = cl
	// succ:  l0041183B
l0041183B:
	return
	// succ:  fn00411810_exit
fn00411810_exit:


// fn00411840
// Return size: 4
void fn00411840()
fn00411840_entry:
	// succ:  l00411840
l00411840:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = Mem0[esp + 0x00000008:word32]
	SZO = cond(ebx & ebx)
	C = false
	branch Test(EQ,Z) l004119C0
	// succ:  l0041184D l004119C0
l0041184D:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp + 0x00000010:word32]
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l004119BF
	// succ:  l0041185A l004119BF
l0041185A:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = Mem0[esp + 0x00000018:word32]
	eax = ebp
	edx = eax + 0x00000001
	// succ:  l00411864
l00411864:
	cl = Mem0[eax:byte]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	SZO = cond(cl & cl)
	C = false
	branch Test(NE,Z) l00411864
	// succ:  l0041186D l00411864
l0041186D:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	eax = eax - edx
	SCZO = cond(eax)
	esi = eax + 0x00000001
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00408C20 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	Mem0[edi + 0x000000A0:word32] = eax
	branch Test(NE,Z) l0041189A
	// succ:  l00411887 l0041189A
l00411887:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417A04
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00411840_exit
l0041189A:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = memcpy(Mem0[esp:(ptr void)], Mem0[esp + 4:(ptr void)], Mem0[esp + 8:size_t])
	eax = Mem0[esp + 0x0000002C:word32]
	ebp = Mem0[esp + 0x0000003C:word32]
	ecx = Mem0[esp + 0x00000030:word32]
	dl = Mem0[esp + 0x00000034:byte]
	Mem0[edi + 0x000000A4:word32] = eax
	al = Mem0[esp + 0x00000038:byte]
	Mem0[edi + 0x000000B5:byte] = al
	eax = ebp
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	Mem0[edi + 0x000000A8:word32] = ecx
	Mem0[edi + 0x000000B4:byte] = dl
	esi = eax + 0x00000001
	// succ:  l004118D6
l004118D6:
	cl = Mem0[eax:byte]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	SZO = cond(cl & cl)
	C = false
	branch Test(NE,Z) l004118D6
	// succ:  l004118DF l004118D6
l004118DF:
	eax = eax - esi
	SCZO = cond(eax)
	esi = eax + 0x00000001
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00408C20 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	Mem0[edi + 0x000000AC:word32] = eax
	branch Test(NE,Z) l0041190B
	// succ:  l004118F8 l0041190B
l004118F8:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004179E0
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00411840_exit
l0041190B:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = memcpy(Mem0[esp:(ptr void)], Mem0[esp + 4:(ptr void)], Mem0[esp + 8:size_t])
	ecx = Mem0[esp + 0x00000038:word32]
	edx = 0x00000004 + ecx * 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00408C20 (retsize: 4;)
	esp = esp + 0x00000014
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	Mem0[edi + 0x000000B0:word32] = eax
	branch Test(NE,Z) l00411945
	// succ:  l00411932 l00411945
l00411932:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004179B8
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00411840_exit
l00411945:
	ecx = Mem0[esp + 0x0000002C:word32]
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	SZO = cond(ecx & ecx)
	C = false
	Mem0[eax + ecx * 0x00000004:word32] = 0x00000000
	branch Test(LE,SZO) l004119AC
	// succ:  l00411956 l004119AC
l00411956:
	eax = Mem0[esp + 0x00000034:word32]
	eax = Mem0[eax + esi * 0x00000004:word32]
	edx = eax + 0x00000001
	// succ:  l00411960
l00411960:
	cl = Mem0[eax:byte]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	SZO = cond(cl & cl)
	C = false
	branch Test(NE,Z) l00411960
	// succ:  l00411969 l00411960
l00411969:
	eax = eax - edx
	SCZO = cond(eax)
	ebp = eax + 0x00000001
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00408C20 (retsize: 4;)
	ecx = Mem0[edi + 0x000000B0:word32]
	Mem0[ecx + esi * 0x00000004:word32] = eax
	edx = Mem0[edi + 0x000000B0:word32]
	eax = edx + esi * 0x00000004
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SCZO = cond(Mem0[eax:word32] - 0x00000000)
	branch Test(EQ,Z) l004119C2
	// succ:  l0041198F l004119C2
l0041198F:
	ecx = Mem0[esp + 0x00000034:word32]
	edx = Mem0[ecx + esi * 0x00000004:word32]
	eax = Mem0[eax:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = memcpy(Mem0[esp:(ptr void)], Mem0[esp + 4:(ptr void)], Mem0[esp + 8:size_t])
	esi = esi + 0x00000001
	SCZO = cond(esi)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	SCZO = cond(esi - Mem0[esp + 0x0000002C:word32])
	branch Test(LT,SO) l00411956
	// succ:  l004119AC l00411956
l004119AC:
	v18 = Mem0[edi + 0x00000008:word32] | 0x00000400
	Mem0[edi + 0x00000008:word32] = v18
	SZO = cond(Mem0[edi + 0x00000008:word32])
	C = false
	v19 = Mem0[edi + 0x000000B8:word32] | 0x00000080
	Mem0[edi + 0x000000B8:word32] = v19
	SZO = cond(Mem0[edi + 0x000000B8:word32])
	C = false
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l004119BF
l004119BF:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l004119C0
l004119C0:
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00411840_exit
l004119C2:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417990
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00411840_exit
fn00411840_exit:


// fn004119E0
// Return size: 4
void fn004119E0()
fn004119E0_entry:
	// succ:  l004119E0
l004119E0:
	esp = fp
	SCZO = cond(Mem0[esp + 0x00000004:word32] - 0x00000000)
	branch Test(EQ,Z) l00411A14
	// succ:  l004119E7 l00411A14
l004119E7:
	eax = Mem0[esp + 0x00000008:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00411A14
	// succ:  l004119EF l00411A14
l004119EF:
	rLoc1 = Mem0[esp + 0x00000010:real64]
	cl = Mem0[esp + 0x0000000C:byte]
	v10 = Mem0[eax + 0x00000008:word32] | 0x00004000
	Mem0[eax + 0x00000008:word32] = v10
	SZO = cond(Mem0[eax + 0x00000008:word32])
	C = false
	Mem0[eax + 0x000000E0:real64] = rLoc1
	rLoc1 = Mem0[esp + 0x00000018:real64]
	Mem0[eax + 0x000000DC:byte] = cl
	Mem0[eax + 0x000000E8:real64] = rLoc1
	// succ:  l00411A14
l00411A14:
	return
	// succ:  fn004119E0_exit
fn004119E0_exit:


// fn00411A20
// Return size: 4
void fn00411A20()
fn00411A20_entry:
	// succ:  l00411A20
l00411A20:
	esp = fp
	SCZO = cond(Mem0[esp + 0x00000004:word32] - 0x00000000)
	branch Test(EQ,Z) l00411A4B
	// succ:  l00411A27 l00411A4B
l00411A27:
	eax = Mem0[esp + 0x00000008:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00411A4B
	// succ:  l00411A2F l00411A4B
l00411A2F:
	ecx = Mem0[esp + 0x0000000C:word32]
	edx = Mem0[esp + 0x00000010:word32]
	v10 = Mem0[eax + 0x00000008:word32] | 0x00000080
	Mem0[eax + 0x00000008:word32] = v10
	SZO = cond(Mem0[eax + 0x00000008:word32])
	C = false
	Mem0[eax + 0x00000070:word32] = ecx
	cl = Mem0[esp + 0x00000014:byte]
	Mem0[eax + 0x00000074:word32] = edx
	Mem0[eax + 0x00000078:byte] = cl
	// succ:  l00411A4B
l00411A4B:
	return
	// succ:  fn00411A20_exit
fn00411A20_exit:


// fn00411A50
// Return size: 4
void fn00411A50()
fn00411A50_entry:
	// succ:  l00411A50
l00411A50:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp + 0x00000008:word32]
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l00411ACF
	// succ:  l00411A59 l00411ACF
l00411A59:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000010:word32]
	SZO = cond(esi & esi)
	C = false
	branch Test(EQ,Z) l00411ACE
	// succ:  l00411A62 l00411ACE
l00411A62:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00001000
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00407E80 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000300
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BA0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000300
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	Mem0[edi + 0x00000114:word32] = eax
	eax = memset(Mem0[esp:(ptr void)], Mem0[esp + 4:int32], Mem0[esp + 8:size_t])
	ebx = Mem0[esp + 0x00000040:word32]
	ecx = Mem0[esp + 0x0000003C:word32]
	edx = Mem0[edi + 0x00000114:word32]
	eax = ebx + ebx * 0x00000002
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	eax = memcpy(Mem0[esp:(ptr void)], Mem0[esp + 4:(ptr void)], Mem0[esp + 8:size_t])
	eax = Mem0[edi + 0x00000114:word32]
	esp = esp + 0x00000030
	SCZO = cond(esp)
	Mem0[esi + 0x00000010:word32] = eax
	Mem0[edi + 0x00000118:word16] = bx
	v14 = Mem0[esi + 0x000000B8:word32] | 0x00001000
	Mem0[esi + 0x000000B8:word32] = v14
	SZO = cond(Mem0[esi + 0x000000B8:word32])
	C = false
	v15 = Mem0[esi + 0x00000008:word32] | 0x00000008
	Mem0[esi + 0x00000008:word32] = v15
	SZO = cond(Mem0[esi + 0x00000008:word32])
	C = false
	Mem0[esi + 0x00000014:word16] = bx
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00411ACE
l00411ACE:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00411ACF
l00411ACF:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00411A50_exit
fn00411A50_exit:


// fn00411AE0
// Return size: 4
void fn00411AE0()
fn00411AE0_entry:
	// succ:  l00411AE0
l00411AE0:
	esp = fp
	SCZO = cond(Mem0[esp + 0x00000004:word32] - 0x00000000)
	branch Test(EQ,Z) l00411B02
	// succ:  l00411AE7 l00411B02
l00411AE7:
	eax = Mem0[esp + 0x00000008:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00411B02
	// succ:  l00411AEF l00411B02
l00411AEF:
	ecx = Mem0[esp + 0x0000000C:word32]
	edx = Mem0[ecx:word32]
	Mem0[eax + 0x00000044:word32] = edx
	cl = Mem0[ecx + 0x00000004:byte]
	v11 = Mem0[eax + 0x00000008:word32] | 0x00000002
	Mem0[eax + 0x00000008:word32] = v11
	SZO = cond(Mem0[eax + 0x00000008:word32])
	C = false
	Mem0[eax + 0x00000048:byte] = cl
	// succ:  l00411B02
l00411B02:
	return
	// succ:  fn00411AE0_exit
fn00411AE0_exit:


// fn00411B10
// Return size: 4
void fn00411B10()
fn00411B10_entry:
	// succ:  l00411B10
l00411B10:
	esp = fp
	SCZO = cond(Mem0[esp + 0x00000004:word32] - 0x00000000)
	branch Test(EQ,Z) l00411B2D
	// succ:  l00411B17 l00411B2D
l00411B17:
	eax = Mem0[esp + 0x00000008:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00411B2D
	// succ:  l00411B1F l00411B2D
l00411B1F:
	cl = Mem0[esp + 0x0000000C:byte]
	v9 = Mem0[eax + 0x00000008:word32] | 0x00000800
	Mem0[eax + 0x00000008:word32] = v9
	SZO = cond(Mem0[eax + 0x00000008:word32])
	C = false
	Mem0[eax + 0x0000002C:byte] = cl
	// succ:  l00411B2D
l00411B2D:
	return
	// succ:  fn00411B10_exit
fn00411B10_exit:


// fn00411B30
// Return size: 4
void fn00411B30()
fn00411B30_entry:
	// succ:  l00411B30
l00411B30:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp + 0x00000008:word32]
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l00411C01
	// succ:  l00411B3D l00411C01
l00411B3D:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000010:word32]
	SZO = cond(esi & esi)
	C = false
	branch Test(EQ,Z) l00411C00
	// succ:  l00411B4A l00411C00
l00411B4A:
	eax = Mem0[esp + 0x00000014:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00411B10 (retsize: 4;)
	rLoc1 = Mem0[0x00417A70:real64]
	esp = esp + 0x00000004
	SCZO = cond(esp)
	Mem0[esp:real64] = rLoc1
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00411420 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0000B18F
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004114A0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00001770
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00003A98
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0000EA60
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00007530
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x000080E8
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0000FA00
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00008084
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00007A26
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00411230 (retsize: 4;)
	rLoc1 = Mem0[0x00417A68:real64]
	Mem0[esp + 0x0000003C:real64] = rLoc1
	esp = esp + 0x00000004
	SCZO = cond(esp)
	rLoc1 = Mem0[0x00417A60:real64]
	Mem0[esp + 0x00000030:real64] = rLoc1
	rLoc1 = Mem0[0x00417A58:real64]
	Mem0[esp + 0x00000028:real64] = rLoc1
	rLoc1 = Mem0[0x00417A50:real64]
	Mem0[esp + 0x00000020:real64] = rLoc1
	rLoc1 = Mem0[0x00417A48:real64]
	Mem0[esp + 0x00000018:real64] = rLoc1
	rLoc1 = Mem0[0x00417A40:real64]
	Mem0[esp + 0x00000010:real64] = rLoc1
	rLoc1 = Mem0[0x00417A38:real64]
	Mem0[esp + 0x00000008:real64] = rLoc1
	rLoc1 = Mem0[0x00417A30:real64]
	Mem0[esp:real64] = rLoc1
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00410EF0 (retsize: 4;)
	esp = esp + 0x00000048
	SCZO = cond(esp)
	// succ:  l00411C00
l00411C00:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00411C01
l00411C01:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00411B30_exit
fn00411B30_exit:


// fn00411C10
// Return size: 4
void fn00411C10()
fn00411C10_entry:
	// succ:  l00411C10
l00411C10:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp + 0x00000008:word32]
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l00411D09
	// succ:  l00411C1D l00411D09
l00411C1D:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000010:word32]
	SZO = cond(esi & esi)
	C = false
	branch Test(EQ,Z) l00411D08
	// succ:  l00411C2A l00411D08
l00411C2A:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = Mem0[esp + 0x00000018:word32]
	SZO = cond(ebx & ebx)
	C = false
	branch Test(EQ,Z) l00411D07
	// succ:  l00411C37 l00411D07
l00411C37:
	SCZO = cond(Mem0[esp + 0x00000020:word32] - 0x00000000)
	branch Test(EQ,Z) l00411D07
	// succ:  l00411C42 l00411D07
l00411C42:
	eax = ebx
	edx = eax + 0x00000001
	// succ:  l00411C47
l00411C47:
	cl = Mem0[eax:byte]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	SZO = cond(cl & cl)
	C = false
	branch Test(NE,Z) l00411C47
	// succ:  l00411C50 l00411C47
l00411C50:
	eax = eax - edx
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	eax = eax + 0x00000001
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408C20 (retsize: 4;)
	ebp = eax
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SZO = cond(ebp & ebp)
	C = false
	branch Test(NE,Z) l00411C79
	// succ:  l00411C66 l00411C79
l00411C66:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417AA8
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00411C10_exit
l00411C79:
	edx = ebp
	eax = ebx
	edx = edx - ebx
	SCZO = cond(edx)
	// succ:  l00411C80
l00411C80:
	cl = Mem0[eax:byte]
	Mem0[edx + eax:byte] = cl
	eax = eax + 0x00000001
	SCZO = cond(eax)
	SZO = cond(cl & cl)
	C = false
	branch Test(NE,Z) l00411C80
	// succ:  l00411C8C l00411C80
l00411C8C:
	ebx = Mem0[esp + 0x00000028:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408C20 (retsize: 4;)
	edi = eax
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SZO = cond(edi & edi)
	C = false
	branch Test(NE,Z) l00411CBE
	// succ:  l00411CA0 l00411CBE
l00411CA0:
	esi = Mem0[esp + 0x00000014:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00408BF0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417A78
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00411C10_exit
l00411CBE:
	eax = Mem0[esp + 0x00000024:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	eax = memcpy(Mem0[esp:(ptr void)], Mem0[esp + 4:(ptr void)], Mem0[esp + 8:size_t])
	ecx = Mem0[esp + 0x00000020:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000010
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	call fn00407E80 (retsize: 4;)
	dl = Mem0[esp + 0x0000003C:byte]
	v16 = Mem0[esi + 0x000000B8:word32] | 0x00000010
	Mem0[esi + 0x000000B8:word32] = v16
	SZO = cond(Mem0[esi + 0x000000B8:word32])
	C = false
	esp = esp + 0x0000001C
	SCZO = cond(esp)
	v17 = Mem0[esi + 0x00000008:word32] | 0x00001000
	Mem0[esi + 0x00000008:word32] = v17
	SZO = cond(Mem0[esi + 0x00000008:word32])
	C = false
	Mem0[esi + 0x000000C4:word32] = ebp
	Mem0[esi + 0x000000CC:word32] = ebx
	Mem0[esi + 0x000000C8:word32] = edi
	Mem0[esi + 0x000000D0:byte] = dl
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00411D07
l00411D07:
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00411D08
l00411D08:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00411D09
l00411D09:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00411C10_exit
fn00411C10_exit:


// fn00411D10
// Return size: 4
void fn00411D10()
fn00411D10_entry:
	// succ:  l00411D10
l00411D10:
	esp = fp
	esp = esp - 0x00000008
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp + 0x00000014:word32]
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l00411EF7
	// succ:  l00411D21 l00411EF7
l00411D21:
	ebx = Mem0[esp + 0x00000018:word32]
	SZO = cond(ebx & ebx)
	C = false
	branch Test(EQ,Z) l00411EF7
	// succ:  l00411D2D l00411EF7
l00411D2D:
	ecx = Mem0[esp + 0x00000020:word32]
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l00411EF7
	// succ:  l00411D39 l00411EF7
l00411D39:
	eax = Mem0[ebx + 0x00000030:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[ebx + 0x00000034:word32]
	eax = eax + ecx
	SCZO = cond(eax)
	SCZO = cond(eax - esi)
	branch Test(LE,SZO) l00411DC1
	// succ:  l00411D47 l00411DC1
l00411D47:
	ebp = Mem0[ebx + 0x00000038:word32]
	SZO = cond(ebp & ebp)
	C = false
	branch Test(EQ,Z) l00411D96
	// succ:  l00411D4E l00411D96
l00411D4E:
	eax = eax + 0x00000008
	SCZO = cond(eax)
	Mem0[ebx + 0x00000034:word32] = eax
	eax = eax << 0x00000004
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408C20 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	Mem0[ebx + 0x00000038:word32] = eax
	branch Test(NE,Z) l00411D7F
	// succ:  l00411D68 l00411D7F
l00411D68:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l00411D72
l00411D72:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = 0x00000001
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000008
	SCZO = cond(esp)
	return
	// succ:  fn00411D10_exit
l00411D7F:
	esi = esi << 0x00000004
	SCZO = cond(esi)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = memcpy(Mem0[esp:(ptr void)], Mem0[esp + 4:(ptr void)], Mem0[esp + 8:size_t])
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4;)
	esp = esp + 0x00000014
	SCZO = cond(esp)
	goto l00411DC1
	// succ:  l00411DC1
l00411D96:
	ecx = ecx + 0x00000008
	SCZO = cond(ecx)
	Mem0[ebx + 0x00000034:word32] = ecx
	ecx = ecx << 0x00000004
	SCZO = cond(ecx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	Mem0[ebx + 0x00000030:word32] = 0x00000000
	call fn00408C20 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	Mem0[ebx + 0x00000038:word32] = eax
	branch Test(EQ,Z) l00411D72
	// succ:  l00411DB7 l00411D72
l00411DB7:
	v13 = Mem0[ebx + 0x000000B8:word32] | 0x00004000
	Mem0[ebx + 0x000000B8:word32] = v13
	SZO = cond(Mem0[ebx + 0x000000B8:word32])
	C = false
	// succ:  l00411DC1
l00411DC1:
	SCZO = cond(Mem0[esp + 0x00000028:word32] - 0x00000000)
	Mem0[esp + 0x00000014:word32] = 0x00000000
	branch Test(LE,SZO) l00411EED
	// succ:  l00411DD4 l00411EED
l00411DD4:
	edi = Mem0[esp + 0x00000024:word32]
	edi = edi + 0x00000008
	SCZO = cond(edi)
	Mem0[esp + 0x00000010:word32] = edi
	// succ:  l00411DE0
l00411DE0:
	esi = Mem0[ebx + 0x00000030:word32]
	eax = Mem0[edi - 0x00000004:word32]
	esi = esi << 0x00000004
	SCZO = cond(esi)
	esi = esi + Mem0[ebx + 0x00000038:word32]
	SCZO = cond(esi)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00411ED1
	// succ:  l00411DF4 l00411ED1
l00411DF4:
	edx = eax + 0x00000001
	// succ:  l00411DF7
l00411DF7:
	cl = Mem0[eax:byte]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	SZO = cond(cl & cl)
	C = false
	branch Test(NE,Z) l00411DF7
	// succ:  l00411E00 l00411DF7
l00411E00:
	ecx = Mem0[edi - 0x00000008:word32]
	eax = eax - edx
	SCZO = cond(eax)
	SZO = cond(ecx & ecx)
	C = false
	ebp = eax
	branch Test(GT,SZO) l00411EBF
	// succ:  l00411E0F l00411EBF
l00411E0F:
	edi = Mem0[edi:word32]
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l00411E2F
	// succ:  l00411E15 l00411E2F
l00411E15:
	SCZO = cond(Mem0[edi:byte] - 0x00)
	branch Test(EQ,Z) l00411E2F
	// succ:  l00411E1A l00411E2F
l00411E1A:
	edx = edi + 0x00000001
	ecx = ecx + 0x00000000
	// succ:  l00411E20
l00411E20:
	al = Mem0[edi:byte]
	edi = edi + 0x00000001
	SCZO = cond(edi)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l00411E20
	// succ:  l00411E29 l00411E20
l00411E29:
	edi = edi - edx
	SCZO = cond(edi)
	Mem0[esi:word32] = ecx
	goto l00411E37
	// succ:  l00411E37
l00411E2F:
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	Mem0[esi:word32] = 0xFFFFFFFF
	// succ:  l00411E37
l00411E37:
	eax = Mem0[esp + 0x0000001C:word32]
	edx = edi + 0x00000004 + ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn00408C20 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	Mem0[esi + 0x00000004:word32] = eax
	branch Test(EQ,Z) l00411D72
	// succ:  l00411E54 l00411D72
l00411E54:
	ecx = Mem0[esp + 0x00000010:word32]
	edx = Mem0[ecx - 0x00000004:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = memcpy(Mem0[esp:(ptr void)], Mem0[esp + 4:(ptr void)], Mem0[esp + 8:size_t])
	eax = Mem0[esi + 0x00000004:word32]
	Mem0[eax + ebp:byte] = 0x00
	ecx = Mem0[esi + 0x00000004:word32]
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	SZO = cond(edi & edi)
	C = false
	eax = ecx + 0x00000001 + ebp
	Mem0[esi + 0x00000008:word32] = eax
	branch Test(EQ,Z) l00411E8C
	// succ:  l00411E7B l00411E8C
l00411E7B:
	edx = Mem0[esp + 0x00000010:word32]
	ecx = Mem0[edx:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = memcpy(Mem0[esp:(ptr void)], Mem0[esp + 4:(ptr void)], Mem0[esp + 8:size_t])
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	// succ:  l00411E8C
l00411E8C:
	edx = Mem0[esi + 0x00000008:word32]
	Mem0[edi + edx:byte] = 0x00
	Mem0[esi + 0x0000000C:word32] = edi
	eax = Mem0[ebx + 0x00000030:word32]
	ecx = Mem0[esi:word32]
	edi = Mem0[esp + 0x00000010:word32]
	eax = eax << 0x00000004
	SCZO = cond(eax)
	eax = eax + Mem0[ebx + 0x00000038:word32]
	SCZO = cond(eax)
	Mem0[eax:word32] = ecx
	edx = Mem0[esi + 0x00000004:word32]
	Mem0[eax + 0x00000004:word32] = edx
	ecx = Mem0[esi + 0x00000008:word32]
	Mem0[eax + 0x00000008:word32] = ecx
	edx = Mem0[esi + 0x0000000C:word32]
	Mem0[eax + 0x0000000C:word32] = edx
	v17 = Mem0[ebx + 0x00000030:word32] + 0x00000001
	Mem0[ebx + 0x00000030:word32] = v17
	SCZO = cond(v17)
	goto l00411ED1
	// succ:  l00411ED1
l00411EBF:
	eax = Mem0[esp + 0x0000001C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417AD4
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l00411ED1
l00411ED1:
	eax = Mem0[esp + 0x00000014:word32]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	edi = edi + 0x00000010
	SCZO = cond(edi)
	SCZO = cond(eax - Mem0[esp + 0x00000028:word32])
	Mem0[esp + 0x00000014:word32] = eax
	Mem0[esp + 0x00000010:word32] = edi
	branch Test(LT,SO) l00411DE0
	// succ:  l00411EED l00411DE0
l00411EED:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000008
	SCZO = cond(esp)
	return
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000008
	SCZO = cond(esp)
	return
	// succ:  fn00411D10_exit fn00411D10_exit
l00411EF7:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000008
	SCZO = cond(esp)
	return
	// succ:  fn00411D10_exit
fn00411D10_exit:


// fn00411F00
// Return size: 4
void fn00411F00()
fn00411F00_entry:
	// succ:  l00411F00
l00411F00:
	esp = fp
	ecx = Mem0[esp + 0x00000004:word32]
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l00411F2E
	// succ:  l00411F08 l00411F2E
l00411F08:
	eax = Mem0[esp + 0x00000008:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00411F2E
	// succ:  l00411F10 l00411F2E
l00411F10:
	edx = 0x00000200
	SZO = cond(Mem0[ecx + 0x00000068:word32] & edx)
	C = false
	branch Test(NE,Z) l00411F2E
	// succ:  l00411F1A l00411F2E
l00411F1A:
	ecx = Mem0[esp + 0x0000000C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[ecx:word32]
	Mem0[eax + 0x0000003C:word32] = esi
	ecx = Mem0[ecx + 0x00000004:word32]
	v10 = Mem0[eax + 0x00000008:word32] | edx
	Mem0[eax + 0x00000008:word32] = v10
	SZO = cond(Mem0[eax + 0x00000008:word32])
	C = false
	Mem0[eax + 0x00000040:word32] = ecx
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00411F2E
l00411F2E:
	return
	// succ:  fn00411F00_exit
fn00411F00_exit:


// fn00411F30
// Return size: 4
void fn00411F30()
fn00411F30_entry:
	// succ:  l00411F30
l00411F30:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp + 0x00000008:word32]
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l00411FBD
	// succ:  l00411F3D l00411FBD
l00411F3D:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000010:word32]
	SZO = cond(esi & esi)
	C = false
	branch Test(EQ,Z) l00411FBC
	// succ:  l00411F46 l00411FBC
l00411F46:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = Mem0[esp + 0x0000001C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = Mem0[esp + 0x0000001C:word32]
	SZO = cond(ebp & ebp)
	C = false
	branch Test(EQ,Z) l00411F8E
	// succ:  l00411F54 l00411F8E
l00411F54:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00002000
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00407E80 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000100
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BA0 (retsize: 4;)
	Mem0[esi + 0x0000004C:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	Mem0[edi + 0x00000188:word32] = eax
	eax = Mem0[esi + 0x0000004C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = memcpy(Mem0[esp:(ptr void)], Mem0[esp + 4:(ptr void)], Mem0[esp + 8:size_t])
	esp = esp + 0x00000024
	SCZO = cond(esp)
	v12 = Mem0[esi + 0x000000B8:word32] | 0x00002000
	Mem0[esi + 0x000000B8:word32] = v12
	SZO = cond(Mem0[esi + 0x000000B8:word32])
	C = false
	// succ:  l00411F8E
l00411F8E:
	eax = Mem0[esp + 0x00000024:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00411FB2
	// succ:  l00411F96 l00411FB2
l00411F96:
	SZO = cond(ebx & ebx)
	C = false
	ecx = Mem0[eax:word32]
	Mem0[esi + 0x00000050:word32] = ecx
	edx = Mem0[eax + 0x00000004:word32]
	Mem0[esi + 0x00000054:word32] = edx
	ax = Mem0[eax + 0x00000008:word16]
	Mem0[esi + 0x00000058:word16] = ax
	branch Test(NE,Z) l00411FB2
	// succ:  l00411FAD l00411FB2
l00411FAD:
	ebx = 0x00000001
	// succ:  l00411FB2
l00411FB2:
	v16 = Mem0[esi + 0x00000008:word32] | 0x00000010
	Mem0[esi + 0x00000008:word32] = v16
	SZO = cond(Mem0[esi + 0x00000008:word32])
	C = false
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[esi + 0x00000016:word16] = bx
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00411FBC
l00411FBC:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00411FBD
l00411FBD:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00411F30_exit
fn00411F30_exit:


// fn00411FC0
// Return size: 4
void fn00411FC0()
fn00411FC0_entry:
	// succ:  l00411FC0
l00411FC0:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = Mem0[esp + 0x00000010:word32]
	eax = Mem0[ebx + 0x000000D8:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000020:word32]
	eax = eax + esi
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp + 0x00000018:word32]
	eax = eax << 0x00000004
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408C20 (retsize: 4;)
	ebp = eax
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SZO = cond(ebp & ebp)
	C = false
	Mem0[esp + 0x00000010:word32] = ebp
	branch Test(NE,Z) l00412004
	// succ:  l00411FF0 l00412004
l00411FF0:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417AF0
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00411FC0_exit
l00412004:
	ecx = Mem0[ebx + 0x000000D8:word32]
	edx = Mem0[ebx + 0x000000D4:word32]
	ecx = ecx << 0x00000004
	SCZO = cond(ecx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	eax = memcpy(Mem0[esp:(ptr void)], Mem0[esp + 4:(ptr void)], Mem0[esp + 8:size_t])
	eax = Mem0[ebx + 0x000000D4:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	call fn00408BF0 (retsize: 4;)
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	esp = esp + 0x00000014
	SCZO = cond(esp)
	SCZO = cond(esi - eax)
	Mem0[ebx + 0x000000D4:word32] = eax
	Mem0[esp + 0x0000001C:word32] = eax
	branch Test(LE,SZO) l004120DE
	// succ:  l0041203F l004120DE
l0041203F:
	edi = Mem0[esp + 0x00000020:word32]
	// succ:  l00412043
l00412043:
	esi = Mem0[ebx + 0x000000D8:word32]
	esi = esi + Mem0[esp + 0x0000001C:word32]
	SCZO = cond(esi)
	eax = Mem0[edi:word32]
	esi = esi << 0x00000004
	SCZO = cond(esi)
	esi = esi + ebp
	SCZO = cond(esi)
	ebp = eax + 0x00000001
	// succ:  l00412057
l00412057:
	cl = Mem0[eax:byte]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	SZO = cond(cl & cl)
	C = false
	branch Test(NE,Z) l00412057
	// succ:  l00412060 l00412057
l00412060:
	eax = eax - ebp
	SCZO = cond(eax)
	ebp = Mem0[esp + 0x00000018:word32]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	call fn00408BA0 (retsize: 4;)
	Mem0[esi:word32] = eax
	ecx = Mem0[edi:word32]
	esp = esp + 0x00000008
	SCZO = cond(esp)
	edx = eax
	esp = esp + 0x00000000
	// succ:  l00412080
l00412080:
	al = Mem0[ecx:byte]
	Mem0[edx:byte] = al
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l00412080
	// succ:  l0041208E l00412080
l0041208E:
	ecx = Mem0[edi + 0x0000000C:word32]
	ecx = ecx << 0x00000004
	SCZO = cond(ecx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	call fn00408BA0 (retsize: 4;)
	Mem0[esi + 0x00000008:word32] = eax
	edx = Mem0[edi + 0x0000000C:word32]
	ecx = Mem0[edi + 0x00000008:word32]
	edx = edx << 0x00000004
	SCZO = cond(edx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = memcpy(Mem0[esp:(ptr void)], Mem0[esp + 4:(ptr void)], Mem0[esp + 8:size_t])
	edx = Mem0[edi + 0x0000000C:word32]
	ebp = Mem0[esp + 0x00000024:word32]
	Mem0[esi + 0x0000000C:word32] = edx
	al = Mem0[edi + 0x00000004:byte]
	Mem0[esi + 0x00000004:byte] = al
	eax = Mem0[esp + 0x00000030:word32]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	esp = esp + 0x00000014
	SCZO = cond(esp)
	edi = edi + 0x00000010
	SCZO = cond(edi)
	SCZO = cond(eax - Mem0[esp + 0x00000024:word32])
	Mem0[esp + 0x0000001C:word32] = eax
	branch Test(LT,SO) l00412043
	// succ:  l004120DA l00412043
l004120DA:
	esi = Mem0[esp + 0x00000024:word32]
	// succ:  l004120DE
l004120DE:
	v17 = Mem0[ebx + 0x000000D8:word32] + esi
	Mem0[ebx + 0x000000D8:word32] = v17
	SCZO = cond(v17)
	v18 = Mem0[ebx + 0x00000008:word32] | 0x00002000
	Mem0[ebx + 0x00000008:word32] = v18
	SZO = cond(Mem0[ebx + 0x00000008:word32])
	C = false
	v19 = Mem0[ebx + 0x000000B8:word32] | 0x00000020
	Mem0[ebx + 0x000000B8:word32] = v19
	SZO = cond(Mem0[ebx + 0x000000B8:word32])
	C = false
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[ebx + 0x000000D4:word32] = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00411FC0_exit
fn00411FC0_exit:


// fn00412100
// Return size: 4
void fn00412100()
fn00412100_entry:
	// succ:  l00412100
l00412100:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = Mem0[esp + 0x0000000C:word32]
	SZO = cond(ebp & ebp)
	C = false
	branch Test(EQ,Z) l00412234
	// succ:  l0041210E l00412234
l0041210E:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = Mem0[esp + 0x00000014:word32]
	SZO = cond(ebx & ebx)
	C = false
	branch Test(EQ,Z) l00412233
	// succ:  l0041211B l00412233
l0041211B:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp + 0x00000020:word32]
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l00412232
	// succ:  l00412128 l00412232
l00412128:
	eax = Mem0[ebx + 0x000000C0:word32]
	eax = eax + edi
	SCZO = cond(eax)
	eax = eax + eax * 0x00000004
	eax = eax + eax
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	eax = eax + eax
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	call fn00408C20 (retsize: 4;)
	esi = eax
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SZO = cond(esi & esi)
	C = false
	Mem0[esp + 0x00000010:word32] = esi
	branch Test(NE,Z) l00412160
	// succ:  l0041214C l00412160
l0041214C:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417B38
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00412100_exit
l00412160:
	eax = Mem0[ebx + 0x000000C0:word32]
	edx = Mem0[ebx + 0x000000BC:word32]
	ecx = eax + eax * 0x00000004
	ecx = ecx + ecx
	SCZO = cond(ecx)
	ecx = ecx + ecx
	SCZO = cond(ecx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	eax = memcpy(Mem0[esp:(ptr void)], Mem0[esp + 4:(ptr void)], Mem0[esp + 8:size_t])
	eax = Mem0[ebx + 0x000000BC:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	call fn00408BF0 (retsize: 4;)
	ebp = ebp ^ ebp
	SZO = cond(ebp)
	C = false
	esp = esp + 0x00000014
	SCZO = cond(esp)
	SCZO = cond(edi - ebp)
	Mem0[ebx + 0x000000BC:word32] = ebp
	branch Test(LE,SZO) l0041221B
	// succ:  l0041219B l0041221B
l0041219B:
	edi = Mem0[esp + 0x00000020:word32]
	edi = edi + 0x0000000C
	SCZO = cond(edi)
	// succ:  l004121A2
l004121A2:
	eax = Mem0[ebx + 0x000000C0:word32]
	eax = eax + ebp
	SCZO = cond(eax)
	ecx = eax + eax * 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000005
	edx = edi - 0x0000000C
	esi = esi + ecx * 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	eax = strncpy(Mem0[esp:(ptr char)], Mem0[esp + 4:(ptr char)], Mem0[esp + 8:size_t])
	eax = Mem0[edi:word32]
	ecx = Mem0[esp + 0x00000024:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	call fn00408C20 (retsize: 4;)
	esp = esp + 0x00000014
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	Mem0[esi + 0x00000008:word32] = eax
	branch Test(NE,Z) l004121E8
	// succ:  l004121D4 l004121E8
l004121D4:
	edx = Mem0[esp + 0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417B10
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call fn004087F0 (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	goto l00412207
	// succ:  l00412207
l004121E8:
	ecx = Mem0[edi:word32]
	edx = Mem0[edi - 0x00000004:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = memcpy(Mem0[esp:(ptr void)], Mem0[esp + 4:(ptr void)], Mem0[esp + 8:size_t])
	eax = Mem0[edi:word32]
	ecx = Mem0[esp + 0x00000024:word32]
	Mem0[esi + 0x0000000C:word32] = eax
	dl = Mem0[ecx + 0x00000068:byte]
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	Mem0[esi + 0x00000010:byte] = dl
	// succ:  l00412207
l00412207:
	esi = Mem0[esp + 0x00000010:word32]
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	edi = edi + 0x00000014
	SCZO = cond(edi)
	SCZO = cond(ebp - Mem0[esp + 0x00000024:word32])
	branch Test(LT,SO) l004121A2
	// succ:  l00412217 l004121A2
l00412217:
	edi = Mem0[esp + 0x00000024:word32]
	// succ:  l0041221B
l0041221B:
	v14 = Mem0[ebx + 0x000000C0:word32] + edi
	Mem0[ebx + 0x000000C0:word32] = v14
	SCZO = cond(v14)
	v15 = Mem0[ebx + 0x000000B8:word32] | 0x00000200
	Mem0[ebx + 0x000000B8:word32] = v15
	SZO = cond(Mem0[ebx + 0x000000B8:word32])
	C = false
	Mem0[ebx + 0x000000BC:word32] = esi
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00412232
l00412232:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00412233
l00412233:
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00412234
l00412234:
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00412100_exit
fn00412100_exit:


// fn00412237
// Return size: 4
void fn00412237()
fn00412237_entry:
	// succ:  l00412237
l00412237:
	esp = fp
	SCZO = cond(ecx - Mem0[0x0041C340:word32])
	branch Test(NE,Z) l00412241
	// succ:  l0041223F l00412241
l0041223F:
	branch ecx == 0x00000000 l00412241
	// succ:  l0041223F_1 l00412241
l0041223F_1:
	return
	// succ:  fn00412237_exit
l00412241:
	// succ:  l004125CB
l004125CB:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	esp = esp - 0x00000328
	SCZO = cond(esp)
	Mem0[0x0041CB48:word32] = eax
	Mem0[0x0041CB44:word32] = ecx
	Mem0[0x0041CB40:word32] = edx
	Mem0[0x0041CB3C:word32] = ebx
	Mem0[0x0041CB38:word32] = esi
	Mem0[0x0041CB34:word32] = edi
	Mem0[0x0041CB60:word16] = ss
	Mem0[0x0041CB54:word16] = cs
	Mem0[0x0041CB30:word16] = ds
	Mem0[0x0041CB2C:word16] = es
	Mem0[0x0041CB28:word16] = fs
	Mem0[0x0041CB24:word16] = gs
	esp = esp - 0x00000004
	Mem0[esp:word32] = SCZDOP
	Mem0[0x0041CB58:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = Mem0[ebp + 0x00000000:word32]
	Mem0[0x0041CB4C:word32] = eax
	eax = Mem0[ebp + 0x00000004:word32]
	Mem0[0x0041CB50:word32] = eax
	eax = ebp + 0x00000008
	Mem0[0x0041CB5C:word32] = eax
	eax = Mem0[ebp + 0xFFFFFCE0:word32]
	Mem0[0x0041CA98:word32] = 0x00010001
	eax = Mem0[0x0041CB50:word32]
	Mem0[0x0041CA4C:word32] = eax
	Mem0[0x0041CA40:word32] = 0xC0000409
	Mem0[0x0041CA44:word32] = 0x00000001
	eax = Mem0[0x0041C340:word32]
	Mem0[ebp + 0xFFFFFCD8:word32] = eax
	eax = Mem0[0x0041C344:word32]
	Mem0[ebp + 0xFFFFFCDC:word32] = eax
	eax = IsDebuggerPresent()
	Mem0[0x0041CA90:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000001
	call _crt_debugger_hook (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	eax = SetUnhandledExceptionFilter(Mem0[esp:LPTOP_LEVEL_EXCEPTION_FILTER])
	esp = esp + 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00417B68
	eax = UnhandledExceptionFilter(Mem0[esp:(ptr (struct "_EXCEPTION_POINTERS"))])
	esp = esp + 0x00000004
	SCZO = cond(Mem0[0x0041CA90:word32] - 0x00000000)
	branch Test(NE,Z) l004126BB
	// succ:  l004126B3 l004126BB
l004126B3:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000001
	call _crt_debugger_hook (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l004126BB
l004126BB:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0xC0000409
	eax = GetCurrentProcess()
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = TerminateProcess(Mem0[esp:HANDLE], Mem0[esp + 4:UINT])
	esp = esp + 0x00000008
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00412237_exit
fn00412237_exit:


// fn004124E9
// Return size: 4
void fn004124E9()
fn004124E9_entry:
	goto l004124E9
	// succ:  l004124E9
l00412291:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000010
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041AF08
	call fn004128CC (retsize: 4;)
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	Mem0[ebp - 0x00000004:word32] = ebx
	eax = Mem0[fs:0x00000018:word32]
	esi = Mem0[eax + 0x00000004:word32]
	Mem0[ebp - 0x0000001C:word32] = ebx
	edi = 0x0041CED8
	// succ:  l004122B3
l004122B3:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	eax = InterlockedCompareExchange(Mem0[esp:(ptr LONG)], Mem0[esp + 4:LONG], Mem0[esp + 8:LONG])
	esp = esp + 0x0000000C
	SCZO = cond(eax - ebx)
	branch Test(EQ,Z) l004122D9
	// succ:  l004122C0 l004122D9
l004122C0:
	SCZO = cond(eax - esi)
	branch Test(NE,Z) l004122CC
	// succ:  l004122C4 l004122CC
l004122C4:
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	Mem0[ebp - 0x0000001C:word32] = esi
	goto l004122DC
	// succ:  l004122DC
l004122CC:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x000003E8
	Sleep(Mem0[esp:DWORD])
	esp = esp + 0x00000004
	goto l004122B3
	// succ:  l004122B3
l004122D9:
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	// succ:  l004122DC
l004122DC:
	eax = Mem0[0x0041CED4:word32]
	SCZO = cond(eax - esi)
	branch Test(NE,Z) l004122EF
	// succ:  l004122E5 l004122EF
l004122E5:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0000001F
	call _amsg_exit (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	goto l0041232A
	// succ:  l0041232A
l004122EF:
	eax = Mem0[0x0041CED4:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00412324
	// succ:  l004122F8 l00412324
l004122F8:
	Mem0[0x0041CED4:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041616C
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416160
	call _initterm_e (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0041232A
	// succ:  l00412313 l0041232A
l00412313:
	Mem0[ebp - 0x00000004:word32] = 0xFFFFFFFE
	eax = 0x000000FF
	goto l00412401
	// succ:  l00412401
l00412324:
	Mem0[0x0041CA3C:word32] = esi
	// succ:  l0041232A
l0041232A:
	eax = Mem0[0x0041CED4:word32]
	SCZO = cond(eax - esi)
	branch Test(NE,Z) l0041234E
	// succ:  l00412333 l0041234E
l00412333:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041615C
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00416154
	call _initterm (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[0x0041CED4:word32] = 0x00000002
	// succ:  l0041234E
l0041234E:
	SCZO = cond(Mem0[ebp - 0x0000001C:word32] - ebx)
	branch Test(NE,Z) l0041235B
	// succ:  l00412353 l0041235B
l00412353:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	eax = InterlockedExchange(Mem0[esp:(ptr LONG)], Mem0[esp + 4:LONG])
	esp = esp + 0x00000008
	// succ:  l0041235B
l0041235B:
	SCZO = cond(Mem0[0x0041CEE4:word32] - ebx)
	branch Test(EQ,Z) l0041237C
	// succ:  l00412363 l0041237C
l00412363:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041CEE4
	call fn00412852 (retsize: 4;)
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0041237C
	// succ:  l00412372 l0041237C
l00412372:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000002
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call Mem0[0x0041CEE4:word32] (retsize: 4;)
	// succ:  l0041237C
l0041237C:
	eax = Mem0[0x0041CA24:word32]
	ecx = __initenv
	Mem0[ecx:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[0x0041CA24:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[0x0041CA28:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[0x0041CA20:word32]
	call fn004035B0 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	Mem0[0x0041CA38:word32] = eax
	SCZO = cond(Mem0[0x0041CA2C:word32] - ebx)
	branch Test(NE,Z) l004123E7
	// succ:  l004123B0 l004123E7
l004123B0:
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	exit(Mem0[esp:int32])
	eax = Mem0[ebp - 0x00000014:word32]
	ecx = Mem0[eax:word32]
	ecx = Mem0[ecx:word32]
	Mem0[ebp - 0x00000020:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	call _XcptFilter (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004124E9_exit
l004123E7:
	SCZO = cond(Mem0[0x0041CA3C:word32] - ebx)
	branch Test(NE,Z) l004123F5
	// succ:  l004123EF l004123F5
l004123EF:
	call _cexit (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	// succ:  l004123F5
l004123F5:
	Mem0[ebp - 0x00000004:word32] = 0xFFFFFFFE
	eax = Mem0[0x0041CA38:word32]
	// succ:  l00412401
l00412401:
	call fn00412911 (retsize: 4;)
	return
	// succ:  fn004124E9_exit
l004124E9:
	esp = fp
	call fn00412974 (retsize: 4;)
	goto l00412291
	// succ:  l00412291
fn004124E9_exit:


// fn00412520
// Return size: 4
void fn00412520()
fn00412520_entry:
	// succ:  l00412520
l00412520:
	esp = fp
	SCZO = cond(Mem0[0x0041CECC:word32] - 0x00000000)
	branch Test(EQ,Z) l00412556
	// succ:  l00412529 l00412556
l00412529:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	esp = esp - 0x00000008
	SCZO = cond(esp)
	__align(esp)
	Mem0[esp:real64] = rArg0
	eax = (int32) Mem0[esp:word64]
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00412520_exit
l00412556:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	esp = esp - 0x00000020
	SCZO = cond(esp)
	__align(esp)
	rLoc1 = rLoc1
	Mem0[esp + 0x00000018:real32] = rLoc1
	Mem0[esp + 0x00000010:int64] = (int64) rLoc1
	rLoc1 = (real64) Mem0[esp + 0x00000010:int64]
	edx = Mem0[esp + 0x00000018:word32]
	eax = Mem0[esp + 0x00000010:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004125B5
	// succ:  l00412579 l004125B5
l00412579:
	rArg0 = rArg0 - rLoc1
	SZO = cond(edx & edx)
	C = false
	branch Test(NS,S) l0041259D
	// succ:  l0041257F l0041259D
l0041257F:
	Mem0[esp:real32] = rArg0
	ecx = Mem0[esp:word32]
	ecx = ecx ^ 0x80000000
	SZO = cond(ecx)
	C = false
	ecx = ecx + 0x7FFFFFFF
	SCZO = cond(ecx)
	eax = eax + 0x00 + C
	SCZO = cond(eax)
	edx = Mem0[esp + 0x00000014:word32]
	edx = edx + 0x00 + C
	SCZO = cond(edx)
	goto l004125C9
	// succ:  l004125C9
l0041259D:
	Mem0[esp:real32] = rArg0
	ecx = Mem0[esp:word32]
	ecx = ecx + 0x7FFFFFFF
	SCZO = cond(ecx)
	eax = eax - 0x00 - C
	SCZO = cond(eax)
	edx = Mem0[esp + 0x00000014:word32]
	edx = edx - 0x00 - C
	SCZO = cond(edx)
	goto l004125C9
	// succ:  l004125C9
l004125B5:
	edx = Mem0[esp + 0x00000014:word32]
	SZO = cond(edx & 0x7FFFFFFF)
	C = false
	branch Test(NE,Z) l00412579
	// succ:  l004125C1 l00412579
l004125C1:
	Mem0[esp + 0x00000018:real32] = rLoc1
	Mem0[esp + 0x00000018:real32] = rArg0
	// succ:  l004125C9
l004125C9:
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00412520_exit
fn00412520_exit:


// fn004127E0
// Return size: 4
void fn004127E0()
fn004127E0_entry:
	// succ:  l004127E0
l004127E0:
	esp = fp
	ecx = Mem0[esp + 0x00000004:word32]
	SCZO = cond(Mem0[ecx:word16] - 0x5A4D)
	branch Test(EQ,Z) l004127EE
	// succ:  l004127EB l004127EE
l004127EB:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	return
	// succ:  fn004127E0_exit
l004127EE:
	eax = Mem0[ecx + 0x0000003C:word32]
	eax = eax + ecx
	SCZO = cond(eax)
	SCZO = cond(Mem0[eax:word32] - 0x00004550)
	branch Test(NE,Z) l004127EB
	// succ:  l004127FB l004127EB
l004127FB:
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	SCZO = cond(Mem0[eax + 0x00000018:word16] - 0x010B)
	cl = Test(EQ,Z)
	eax = ecx
	return
	// succ:  fn004127E0_exit
fn004127E0_exit:


// fn00412810
// Return size: 4
void fn00412810()
fn00412810_entry:
	// succ:  l00412810
l00412810:
	esp = fp
	eax = Mem0[esp + 0x00000004:word32]
	ecx = Mem0[eax + 0x0000003C:word32]
	ecx = ecx + eax
	SCZO = cond(ecx)
	eax = (word32) Mem0[ecx + 0x00000014:word16]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = (word32) Mem0[ecx + 0x00000006:word16]
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	SZO = cond(esi & esi)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	eax = eax + 0x00000018 + ecx
	branch Test(ULE,CZ) l0041284C
	// succ:  l0041282E l0041284C
l0041282E:
	edi = Mem0[esp + 0x00000014:word32]
	// succ:  l00412832
l00412832:
	ecx = Mem0[eax + 0x0000000C:word32]
	SCZO = cond(edi - ecx)
	branch Test(ULT,C) l00412842
	// succ:  l00412839 l00412842
l00412839:
	ebx = Mem0[eax + 0x00000008:word32]
	ebx = ebx + ecx
	SCZO = cond(ebx)
	SCZO = cond(edi - ebx)
	branch Test(ULT,C) l0041284E
	// succ:  l00412842 l0041284E
l00412842:
	edx = edx + 0x00000001
	SCZO = cond(edx)
	eax = eax + 0x00000028
	SCZO = cond(eax)
	SCZO = cond(edx - esi)
	branch Test(ULT,C) l00412832
	// succ:  l0041284C l00412832
l0041284C:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l0041284E
l0041284E:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00412810_exit
fn00412810_exit:


// fn00412852
// Return size: 4
void fn00412852()
fn00412852_entry:
	// succ:  l00412852
l00412852:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000008
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0041AF48
	call fn004128CC (retsize: 4;)
	v4 = Mem0[ebp - 0x00000004:word32] & 0x00000000
	Mem0[ebp - 0x00000004:word32] = v4
	SZO = cond(Mem0[ebp - 0x00000004:word32])
	C = false
	edx = 0x00400000
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call fn004127E0 (retsize: 4;)
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004128AF
	// succ:  l00412872 l004128AF
l00412872:
	eax = Mem0[ebp + 0x00000008:word32]
	eax = eax - edx
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call fn00412810 (retsize: 4;)
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004128AF
	// succ:  l00412884 l004128AF
l00412884:
	eax = Mem0[eax + 0x00000024:word32]
	eax = eax >>u 0x0000001F
	SCZO = cond(eax)
	eax = ~eax
	eax = eax & 0x00000001
	SZO = cond(eax)
	C = false
	Mem0[ebp - 0x00000004:word32] = 0xFFFFFFFE
	goto l004128B8
	// succ:  l004128B8
l004128AF:
	Mem0[ebp - 0x00000004:word32] = 0xFFFFFFFE
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l004128B8
l004128B8:
	call fn00412911 (retsize: 4;)
	return
	// succ:  fn00412852_exit
fn00412852_exit:


// fn004128CC
// Return size: 4
void fn004128CC()
fn004128CC_entry:
	// succ:  l004128CC
l004128CC:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00412925
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[fs:0x00000000:word32]
	eax = Mem0[esp + 0x00000010:word32]
	Mem0[esp + 0x00000010:word32] = ebp
	ebp = esp + 0x00000010
	esp = esp - eax
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	eax = Mem0[0x0041C340:word32]
	v10 = Mem0[ebp - 0x00000004:word32] ^ eax
	Mem0[ebp - 0x00000004:word32] = v10
	SZO = cond(Mem0[ebp - 0x00000004:word32])
	C = false
	eax = eax ^ ebp
	SZO = cond(eax)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	Mem0[ebp - 0x00000018:word32] = esp
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[ebp - 0x00000008:word32]
	eax = Mem0[ebp - 0x00000004:word32]
	Mem0[ebp - 0x00000004:word32] = 0xFFFFFFFE
	Mem0[ebp - 0x00000008:word32] = eax
	eax = ebp - 0x00000010
	Mem0[fs:0x00000000:word32] = eax
	return
	// succ:  fn004128CC_exit
fn004128CC_exit:


// fn00412911
// Return size: 4
void fn00412911()
fn00412911_entry:
	// succ:  l00412911
l00412911:
	esp = fp
	ecx = Mem0[ebp - 0x00000010:word32]
	Mem0[fs:0x00000000:word32] = ecx
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	return
	// succ:  fn00412911_exit
fn00412911_exit:


// fn00412974
// Return size: 4
void fn00412974()
fn00412974_entry:
	// succ:  l00412974
l00412974:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	esp = esp - 0x00000010
	SCZO = cond(esp)
	eax = Mem0[0x0041C340:word32]
	v6 = Mem0[ebp - 0x00000008:word32] & 0x00000000
	Mem0[ebp - 0x00000008:word32] = v6
	SZO = cond(Mem0[ebp - 0x00000008:word32])
	C = false
	v9 = Mem0[ebp - 0x00000004:word32] & 0x00000000
	Mem0[ebp - 0x00000004:word32] = v9
	SZO = cond(Mem0[ebp - 0x00000004:word32])
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = 0xBB40E64E
	SCZO = cond(eax - edi)
	ebx = 0xFFFF0000
	branch Test(EQ,Z) l004129A4
	// succ:  l00412997 l004129A4
l00412997:
	SZO = cond(ebx & eax)
	C = false
	branch Test(EQ,Z) l004129A4
	// succ:  l0041299B l004129A4
l0041299B:
	eax = ~eax
	Mem0[0x0041C344:word32] = eax
	goto l00412A04
	// succ:  l00412A04
l004129A4:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	eax = ebp - 0x00000008
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	GetSystemTimeAsFileTime(Mem0[esp:LPFILETIME])
	esp = esp + 0x00000004
	esi = Mem0[ebp - 0x00000004:word32]
	esi = esi ^ Mem0[ebp - 0x00000008:word32]
	SZO = cond(esi)
	C = false
	eax = GetCurrentProcessId()
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	eax = GetCurrentThreadId()
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	eax = GetTickCount()
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	eax = ebp - 0x00000010
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = QueryPerformanceCounter(Mem0[esp:(ptr LARGE_INTEGER)])
	esp = esp + 0x00000004
	eax = Mem0[ebp - 0x0000000C:word32]
	eax = eax ^ Mem0[ebp - 0x00000010:word32]
	SZO = cond(eax)
	C = false
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	SCZO = cond(esi - edi)
	branch Test(NE,Z) l004129EA
	// succ:  l004129E3 l004129EA
l004129E3:
	esi = 0xBB40E64F
	goto l004129F5
	// succ:  l004129F5
l004129EA:
	SZO = cond(ebx & esi)
	C = false
	branch Test(NE,Z) l004129F5
	// succ:  l004129EE l004129F5
l004129EE:
	eax = esi
	eax = eax << 0x00000010
	SCZO = cond(eax)
	esi = esi | eax
	SZO = cond(esi)
	C = false
	// succ:  l004129F5
l004129F5:
	Mem0[0x0041C340:word32] = esi
	esi = ~esi
	Mem0[0x0041C344:word32] = esi
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00412A04
l00412A04:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00412974_exit
fn00412974_exit:


// fn00412AF0
// Return size: 4
void fn00412AF0()
fn00412AF0_entry:
	// succ:  l00412AF0
l00412AF0:
	esp = fp
	edx = Mem0[esp + 0x00000004:word32]
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	SCZO = cond(edx - ecx)
	branch Test(EQ,Z) l00412B47
	// succ:  l00412AFA l00412B47
l00412AFA:
	eax = Mem0[edx + 0x0000001C:word32]
	SCZO = cond(eax - ecx)
	branch Test(EQ,Z) l00412B47
	// succ:  l00412B01 l00412B47
l00412B01:
	Mem0[eax + 0x0000001C:word32] = ecx
	Mem0[edx + 0x00000014:word32] = ecx
	Mem0[edx + 0x00000008:word32] = ecx
	Mem0[edx + 0x00000018:word32] = ecx
	Mem0[edx + 0x00000030:word32] = 0x00000001
	Mem0[eax:word32] = ecx
	Mem0[eax + 0x00000004:word32] = ecx
	Mem0[eax + 0x0000000C:word32] = ecx
	Mem0[eax + 0x00000020:word32] = ecx
	Mem0[eax + 0x00000028:word32] = ecx
	Mem0[eax + 0x0000002C:word32] = ecx
	Mem0[eax + 0x00000030:word32] = ecx
	Mem0[eax + 0x00000038:word32] = ecx
	Mem0[eax + 0x0000003C:word32] = ecx
	ecx = eax + 0x00000530
	Mem0[eax + 0x00000014:word32] = 0x00008000
	Mem0[eax + 0x0000006C:word32] = ecx
	Mem0[eax + 0x00000050:word32] = ecx
	Mem0[eax + 0x0000004C:word32] = ecx
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	return
	// succ:  fn00412AF0_exit
l00412B47:
	eax = 0xFFFFFFFE
	return
	// succ:  fn00412AF0_exit
fn00412AF0_exit:


// fn00412B50
// Return size: 4
void fn00412B50()
fn00412B50_entry:
	// succ:  l00412B50
l00412B50:
	esp = fp
	eax = Mem0[esp + 0x0000000C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	SCZO = cond(eax - edi)
	branch Test(EQ,Z) l00412C14
	// succ:  l00412B5F l00412C14
l00412B5F:
	SCZO = cond(Mem0[eax:byte] - 0x31)
	branch Test(NE,Z) l00412C14
	// succ:  l00412B68 l00412C14
l00412B68:
	SCZO = cond(Mem0[esp + 0x00000014:word32] - 0x00000038)
	branch Test(NE,Z) l00412C14
	// succ:  l00412B73 l00412C14
l00412B73:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x0000000C:word32]
	SCZO = cond(esi - edi)
	branch Test(EQ,Z) l00412C0C
	// succ:  l00412B80 l00412C0C
l00412B80:
	SCZO = cond(Mem0[esi + 0x00000020:word32] - edi)
	Mem0[esi + 0x00000018:word32] = edi
	branch Test(NE,Z) l00412B92
	// succ:  l00412B88 l00412B92
l00412B88:
	Mem0[esi + 0x00000020:word32] = 0x00414650
	Mem0[esi + 0x00000028:word32] = edi
	// succ:  l00412B92
l00412B92:
	SCZO = cond(Mem0[esi + 0x00000024:word32] - edi)
	branch Test(NE,Z) l00412B9E
	// succ:  l00412B97 l00412B9E
l00412B97:
	Mem0[esi + 0x00000024:word32] = 0x00414670
	// succ:  l00412B9E
l00412B9E:
	eax = Mem0[esi + 0x00000028:word32]
	ecx = Mem0[esi + 0x00000020:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00002530
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000001
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call ecx (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	SCZO = cond(eax - edi)
	branch Test(NE,Z) l00412BBD
	// succ:  l00412BB5 l00412BBD
l00412BB5:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = 0xFFFFFFFC
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00412B50_exit
l00412BBD:
	ecx = Mem0[esp + 0x00000010:word32]
	SCZO = cond(ecx - edi)
	Mem0[esi + 0x0000001C:word32] = eax
	branch Test(GE,SO) l00412BCF
	// succ:  l00412BC8 l00412BCF
l00412BC8:
	Mem0[eax + 0x00000008:word32] = edi
	ecx = -ecx
	SCZO = cond(ecx)
	C = ecx == 0x00000000
	goto l00412BE2
	// succ:  l00412BE2
l00412BCF:
	edx = ecx
	edx = edx >> 0x00000004
	SCZO = cond(edx)
	edx = edx + 0x00000001
	SCZO = cond(edx)
	SCZO = cond(ecx - 0x00000030)
	Mem0[eax + 0x00000008:word32] = edx
	branch Test(GE,SO) l00412BE2
	// succ:  l00412BDF l00412BE2
l00412BDF:
	ecx = ecx & 0x0000000F
	SZO = cond(ecx)
	C = false
	// succ:  l00412BE2
l00412BE2:
	edx = ecx - 0x00000008
	SCZO = cond(edx - 0x00000007)
	branch Test(UGT,CZ) l00412BFC
	// succ:  l00412BEA l00412BFC
l00412BEA:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	Mem0[eax + 0x00000024:word32] = ecx
	Mem0[eax + 0x00000034:word32] = edi
	call fn00412AF0 (retsize: 4;)
	esp = esp + 0x00000004
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00412B50_exit
l00412BFC:
	ecx = Mem0[esi + 0x00000024:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = Mem0[esi + 0x00000028:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call ecx (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	Mem0[esi + 0x0000001C:word32] = edi
	// succ:  l00412C0C
l00412C0C:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = 0xFFFFFFFE
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00412B50_exit
l00412C14:
	eax = 0xFFFFFFFA
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00412B50_exit
fn00412B50_exit:


// fn00412C20
// Return size: 4
void fn00412C20()
fn00412C20_entry:
	// succ:  l00412C20
l00412C20:
	esp = fp
	eax = Mem0[esp + 0x0000000C:word32]
	ecx = Mem0[esp + 0x00000008:word32]
	edx = Mem0[esp + 0x00000004:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0000000F
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call fn00412B50 (retsize: 4;)
	esp = esp + 0x00000010
	SCZO = cond(esp)
	return
	// succ:  fn00412C20_exit
fn00412C20_exit:


// fn00412C40
// Return size: 4
void fn00412C40()
fn00412C40_entry:
	// succ:  l00412C40
l00412C40:
	esp = fp
	Mem0[eax + 0x0000004C:word32] = 0x00417B70
	Mem0[eax + 0x00000054:word32] = 0x00000009
	Mem0[eax + 0x00000050:word32] = 0x00418370
	Mem0[eax + 0x00000058:word32] = 0x00000005
	return
	// succ:  fn00412C40_exit
fn00412C40_exit:


// fn00412C60
// Return size: 4
void fn00412C60()
fn00412C60_entry:
	// succ:  l00412C60
l00412C60:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[ebx + 0x0000001C:word32]
	ebp = ebp ^ ebp
	SZO = cond(ebp)
	C = false
	SCZO = cond(Mem0[esi + 0x00000034:word32] - ebp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = eax
	branch Test(NE,Z) l00412C98
	// succ:  l00412C6F l00412C98
l00412C6F:
	ecx = Mem0[esi + 0x00000024:word32]
	edx = Mem0[ebx + 0x00000020:word32]
	eax = 0x00000001
	eax = eax << cl
	SCZO = cond(eax)
	ecx = Mem0[ebx + 0x00000028:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000001
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	call edx (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	SCZO = cond(eax - ebp)
	Mem0[esi + 0x00000034:word32] = eax
	branch Test(NE,Z) l00412C98
	// succ:  l00412C8F l00412C98
l00412C8F:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = 0x00000001
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00412C60_exit
l00412C98:
	SCZO = cond(Mem0[esi + 0x00000028:word32] - ebp)
	branch Test(NE,Z) l00412CB0
	// succ:  l00412C9D l00412CB0
l00412C9D:
	ecx = Mem0[esi + 0x00000024:word32]
	eax = 0x00000001
	eax = eax << cl
	SCZO = cond(eax)
	Mem0[esi + 0x00000030:word32] = ebp
	Mem0[esi + 0x0000002C:word32] = ebp
	Mem0[esi + 0x00000028:word32] = eax
	// succ:  l00412CB0
l00412CB0:
	edi = edi - Mem0[ebx + 0x00000010:word32]
	SCZO = cond(edi)
	eax = Mem0[esi + 0x00000028:word32]
	SCZO = cond(edi - eax)
	branch Test(ULT,C) l00412CDC
	// succ:  l00412CBA l00412CDC
l00412CBA:
	ecx = Mem0[ebx + 0x0000000C:word32]
	edx = Mem0[esi + 0x00000034:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	ecx = ecx - eax
	SCZO = cond(ecx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	eax = memcpy(Mem0[esp:(ptr void)], Mem0[esp + 4:(ptr void)], Mem0[esp + 8:size_t])
	eax = Mem0[esi + 0x00000028:word32]
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[esi + 0x00000030:word32] = ebp
	Mem0[esi + 0x0000002C:word32] = eax
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00412C60_exit
l00412CDC:
	eax = eax - Mem0[esi + 0x00000030:word32]
	SCZO = cond(eax)
	ebp = eax
	SCZO = cond(ebp - edi)
	branch Test(ULE,CZ) l00412CE7
	// succ:  l00412CE5 l00412CE7
l00412CE5:
	ebp = edi
	// succ:  l00412CE7
l00412CE7:
	ecx = Mem0[ebx + 0x0000000C:word32]
	edx = Mem0[esi + 0x00000034:word32]
	edx = edx + Mem0[esi + 0x00000030:word32]
	SCZO = cond(edx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ecx = ecx - edi
	SCZO = cond(ecx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	eax = memcpy(Mem0[esp:(ptr void)], Mem0[esp + 4:(ptr void)], Mem0[esp + 8:size_t])
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	edi = edi - ebp
	SCZO = cond(edi)
	branch Test(EQ,Z) l00412D23
	// succ:  l00412D01 l00412D23
l00412D01:
	eax = Mem0[ebx + 0x0000000C:word32]
	ecx = Mem0[esi + 0x00000034:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	eax = eax - edi
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	eax = memcpy(Mem0[esp:(ptr void)], Mem0[esp + 4:(ptr void)], Mem0[esp + 8:size_t])
	edx = Mem0[esi + 0x00000028:word32]
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	Mem0[esi + 0x00000030:word32] = edi
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[esi + 0x0000002C:word32] = edx
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00412C60_exit
l00412D23:
	v16 = Mem0[esi + 0x00000030:word32] + ebp
	Mem0[esi + 0x00000030:word32] = v16
	SCZO = cond(v16)
	ecx = Mem0[esi + 0x00000030:word32]
	eax = Mem0[esi + 0x00000028:word32]
	SCZO = cond(ecx - eax)
	branch Test(NE,Z) l00412D37
	// succ:  l00412D30 l00412D37
l00412D30:
	Mem0[esi + 0x00000030:word32] = 0x00000000
	// succ:  l00412D37
l00412D37:
	ecx = Mem0[esi + 0x0000002C:word32]
	SCZO = cond(ecx - eax)
	branch Test(UGE,C) l00412D43
	// succ:  l00412D3E l00412D43
l00412D3E:
	ecx = ecx + ebp
	SCZO = cond(ecx)
	Mem0[esi + 0x0000002C:word32] = ecx
	// succ:  l00412D43
l00412D43:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00412C60_exit
fn00412C60_exit:


// fn00412D50
// Return size: 4
void fn00412D50()
fn00412D50_entry:
	// succ:  l00412D50
l00412D50:
	esp = fp
	eax = Mem0[esp + 0x00000004:word32]
	esp = esp - 0x0000002C
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	branch Test(EQ,Z) l004142AC
	// succ:  l00412D60 l004142AC
l00412D60:
	edi = Mem0[eax + 0x0000001C:word32]
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l004142AC
	// succ:  l00412D6B l004142AC
l00412D6B:
	SCZO = cond(Mem0[eax + 0x0000000C:word32] - 0x00000000)
	branch Test(EQ,Z) l004142AC
	// succ:  l00412D75 l004142AC
l00412D75:
	SCZO = cond(Mem0[eax:word32] - 0x00000000)
	branch Test(NE,Z) l00412D84
	// succ:  l00412D7A l00412D84
l00412D7A:
	SCZO = cond(Mem0[eax + 0x00000004:word32] - 0x00000000)
	branch Test(NE,Z) l004142AC
	// succ:  l00412D84 l004142AC
l00412D84:
	SCZO = cond(Mem0[edi:word32] - 0x0000000B)
	branch Test(NE,Z) l00412D8F
	// succ:  l00412D89 l00412D8F
l00412D89:
	Mem0[edi:word32] = 0x0000000C
	// succ:  l00412D8F
l00412D8F:
	ecx = Mem0[eax + 0x0000000C:word32]
	edx = Mem0[eax + 0x00000004:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = Mem0[edi + 0x00000038:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = Mem0[eax:word32]
	Mem0[esp + 0x00000024:word32] = ecx
	ecx = Mem0[eax + 0x00000010:word32]
	eax = Mem0[edi:word32]
	SCZO = cond(eax - 0x0000001C)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[edi + 0x0000003C:word32]
	Mem0[esp + 0x0000001C:word32] = ecx
	Mem0[esp + 0x00000010:word32] = edx
	Mem0[esp + 0x00000018:word32] = ebx
	Mem0[esp + 0x00000038:word32] = edx
	Mem0[esp + 0x0000002C:word32] = ecx
	Mem0[esp + 0x00000030:word32] = 0x00000000
	branch Test(UGT,CZ) l00414159
	// succ:  l00412DCE l00414159
l00412DCE:
	edi = edi
	// succ:  l00412DD0
l00412DD0:
	switch (eax) { l00412DD7 l00412F45 l00412FF3 l00413072 l004130F4 l0041317F l0041323B l004132F3 l004133AA l00413444 l004134AC l004134D8 l004134E3 l004135AE l0041361B l0041367B l004136FB l004137F2 l00413B03 l00413D07 l00413D52 l00413EC9 l00413F38 l00413FF4 l0041401F l004140F2 l0041419A l004141A4 l004141F4 }
	// succ:  l00412DD7 l00412F45 l00412FF3 l00413072 l004130F4 l0041317F l0041323B l004132F3 l004133AA l00413444 l004134AC l004134D8 l004134E3 l004135AE l0041361B l0041367B l004136FB l004137F2 l00413B03 l00413D07 l00413D52 l00413EC9 l00413F38 l00413FF4 l0041401F l004140F2 l0041419A l004141A4 l004141F4
l00412DD7:
	SCZO = cond(Mem0[edi + 0x00000008:word32] - 0x00000000)
	branch Test(NE,Z) l00412DE8
	// succ:  l00412DDD l00412DE8
l00412DDD:
	Mem0[edi:word32] = 0x0000000C
	goto l0041414E
	// succ:  l0041414E
l00412DE8:
	SCZO = cond(esi - 0x00000010)
	branch Test(UGE,C) l00412E18
	// succ:  l00412DED l00412E18
l00412DED:
	ecx = ecx + 0x00000000
	// succ:  l00412DF0
l00412DF0:
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l004141AC
	// succ:  l00412DF8 l004141AC
l00412DF8:
	eax = (word32) Mem0[ebp + 0x00000000:byte]
	ecx = esi
	eax = eax << cl
	SCZO = cond(eax)
	edx = edx - 0x00000001
	SCZO = cond(edx)
	esi = esi + 0x00000008
	SCZO = cond(esi)
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	ebx = ebx + eax
	SCZO = cond(ebx)
	SCZO = cond(esi - 0x00000010)
	Mem0[esp + 0x00000010:word32] = edx
	Mem0[esp + 0x00000018:word32] = ebx
	branch Test(ULT,C) l00412DF0
	// succ:  l00412E18 l00412DF0
l00412E18:
	SZO = cond(Mem0[edi + 0x00000008:byte] & 0x02)
	C = false
	branch Test(EQ,Z) l00412E6B
	// succ:  l00412E1E l00412E6B
l00412E1E:
	SCZO = cond(ebx - 0x00008B1F)
	branch Test(NE,Z) l00412E6B
	// succ:  l00412E26 l00412E6B
l00412E26:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	call fn00414630 (retsize: 4;)
	Mem0[edi + 0x00000018:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000002
	ecx = esp + 0x00000030
	Mem0[esp + 0x00000030:byte] = 0x1F
	Mem0[esp + 0x00000031:byte] = 0x8B
	edx = Mem0[edi + 0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call fn00414630 (retsize: 4;)
	edx = Mem0[esp + 0x00000028:word32]
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	esp = esp + 0x00000018
	SCZO = cond(esp)
	Mem0[edi + 0x00000018:word32] = eax
	Mem0[esp + 0x00000018:word32] = ebx
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	Mem0[edi:word32] = 0x00000001
	goto l0041414E
	// succ:  l0041414E
l00412E6B:
	eax = Mem0[edi + 0x00000020:word32]
	SZO = cond(eax & eax)
	C = false
	Mem0[edi + 0x00000010:word32] = 0x00000000
	branch Test(EQ,Z) l00412E80
	// succ:  l00412E79 l00412E80
l00412E79:
	Mem0[eax + 0x00000030:word32] = 0xFFFFFFFF
	// succ:  l00412E80
l00412E80:
	SZO = cond(Mem0[edi + 0x00000008:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l00412F31
	// succ:  l00412E8A l00412F31
l00412E8A:
	eax = (word32) bl
	eax = eax << 0x00000008
	SCZO = cond(eax)
	ecx = ebx
	ecx = ecx >>u 0x00000008
	SCZO = cond(ecx)
	eax = eax + ecx
	SCZO = cond(eax)
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	ecx = 0x0000001F
	edx = edx_eax % ecx
	eax = edx_eax /u ecx
	SCZO = cond(eax)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l00412F31
	// succ:  l00412EA8 l00412F31
l00412EA8:
	edx = ebx
	dl = dl & 0x0F
	SZO = cond(dl)
	C = false
	SCZO = cond(dl - 0x08)
	branch Test(EQ,Z) l00412EC6
	// succ:  l00412EB2 l00412EC6
l00412EB2:
	eax = Mem0[esp + 0x00000040:word32]
	edx = Mem0[esp + 0x00000010:word32]
	Mem0[eax + 0x00000018:word32] = 0x004185BC
	goto l00414148
	// succ:  l00414148
l00412EC6:
	ebx = ebx >>u 0x00000004
	SCZO = cond(ebx)
	ecx = ebx
	ecx = ecx & 0x0000000F
	SZO = cond(ecx)
	C = false
	ecx = ecx + 0x00000008
	SCZO = cond(ecx)
	esi = esi - 0x00000004
	SCZO = cond(esi)
	SCZO = cond(ecx - Mem0[edi + 0x00000024:word32])
	Mem0[esp + 0x00000018:word32] = ebx
	branch Test(ULE,CZ) l00412EF1
	// succ:  l00412EDD l00412EF1
l00412EDD:
	ecx = Mem0[esp + 0x00000040:word32]
	edx = Mem0[esp + 0x00000010:word32]
	Mem0[ecx + 0x00000018:word32] = 0x004185A8
	goto l00414148
	// succ:  l00414148
l00412EF1:
	edx = 0x00000001
	edx = edx << cl
	SCZO = cond(edx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	Mem0[edi + 0x00000014:word32] = edx
	call fn00415030 (retsize: 4;)
	ecx = Mem0[esp + 0x0000004C:word32]
	edx = Mem0[esp + 0x0000001C:word32]
	ebx = ebx >>u 0x00000008
	SCZO = cond(ebx)
	ebx = ~ebx
	ebx = ebx & 0x00000002
	SZO = cond(ebx)
	C = false
	ebx = ebx | 0x00000009
	SZO = cond(ebx)
	C = false
	Mem0[edi + 0x00000018:word32] = eax
	Mem0[ecx + 0x00000030:word32] = eax
	Mem0[edi:word32] = ebx
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	Mem0[esp + 0x00000018:word32] = ebx
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	goto l0041414E
	// succ:  l0041414E
l00412F31:
	edx = Mem0[esp + 0x00000040:word32]
	Mem0[edx + 0x00000018:word32] = 0x00418590
	edx = Mem0[esp + 0x00000010:word32]
	goto l00414148
	// succ:  l00414148
l00412F45:
	SCZO = cond(esi - 0x00000010)
	branch Test(UGE,C) l00412F78
	// succ:  l00412F4A l00412F78
l00412F4A:
	ebx = ebx + 0x00000000
	// succ:  l00412F50
l00412F50:
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l004141AC
	// succ:  l00412F58 l004141AC
l00412F58:
	eax = (word32) Mem0[ebp + 0x00000000:byte]
	ecx = esi
	eax = eax << cl
	SCZO = cond(eax)
	edx = edx - 0x00000001
	SCZO = cond(edx)
	esi = esi + 0x00000008
	SCZO = cond(esi)
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	ebx = ebx + eax
	SCZO = cond(ebx)
	SCZO = cond(esi - 0x00000010)
	Mem0[esp + 0x00000010:word32] = edx
	Mem0[esp + 0x00000018:word32] = ebx
	branch Test(ULT,C) l00412F50
	// succ:  l00412F78 l00412F50
l00412F78:
	SCZO = cond(bl - 0x08)
	Mem0[edi + 0x00000010:word32] = ebx
	branch Test(EQ,Z) l00412F90
	// succ:  l00412F80 l00412F90
l00412F80:
	ecx = Mem0[esp + 0x00000040:word32]
	Mem0[ecx + 0x00000018:word32] = 0x004185BC
	goto l00414148
	// succ:  l00414148
l00412F90:
	SZO = cond(ebx & 0x0000E000)
	C = false
	branch Test(EQ,Z) l00412FA8
	// succ:  l00412F98 l00412FA8
l00412F98:
	eax = Mem0[esp + 0x00000040:word32]
	Mem0[eax + 0x00000018:word32] = 0x00418574
	goto l00414148
	// succ:  l00414148
l00412FA8:
	eax = Mem0[edi + 0x00000020:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00412FB9
	// succ:  l00412FAF l00412FB9
l00412FAF:
	ecx = ebx
	ecx = ecx >>u 0x00000008
	SCZO = cond(ecx)
	ecx = ecx & 0x00000001
	SZO = cond(ecx)
	C = false
	Mem0[eax:word32] = ecx
	// succ:  l00412FB9
l00412FB9:
	SZO = cond(Mem0[edi + 0x00000010:word32] & 0x00000200)
	C = false
	branch Test(EQ,Z) l00412FE7
	// succ:  l00412FC2 l00412FE7
l00412FC2:
	Mem0[esp + 0x00000020:byte] = bl
	ebx = ebx >>u 0x00000008
	SCZO = cond(ebx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000002
	edx = esp + 0x00000024
	Mem0[esp + 0x00000025:byte] = bl
	eax = Mem0[edi + 0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn00414630 (retsize: 4;)
	edx = Mem0[esp + 0x0000001C:word32]
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	Mem0[edi + 0x00000018:word32] = eax
	// succ:  l00412FE7
l00412FE7:
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	Mem0[edi:word32] = 0x00000002
	goto l00412FF8
	// succ:  l00412FF8
l00412FF3:
	SCZO = cond(esi - 0x00000020)
	branch Test(UGE,C) l0041301C
	// succ:  l00412FF8 l0041301C
l00412FF8:
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l004141AC
	// succ:  l00413000 l004141AC
l00413000:
	eax = (word32) Mem0[ebp + 0x00000000:byte]
	ecx = esi
	eax = eax << cl
	SCZO = cond(eax)
	edx = edx - 0x00000001
	SCZO = cond(edx)
	esi = esi + 0x00000008
	SCZO = cond(esi)
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	ebx = ebx + eax
	SCZO = cond(ebx)
	SCZO = cond(esi - 0x00000020)
	Mem0[esp + 0x00000010:word32] = edx
	branch Test(ULT,C) l00412FF8
	// succ:  l0041301C l00412FF8
l0041301C:
	eax = Mem0[edi + 0x00000020:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00413026
	// succ:  l00413023 l00413026
l00413023:
	Mem0[eax + 0x00000004:word32] = ebx
	// succ:  l00413026
l00413026:
	SZO = cond(Mem0[edi + 0x00000010:word32] & 0x00000200)
	C = false
	branch Test(EQ,Z) l00413066
	// succ:  l0041302F l00413066
l0041302F:
	Mem0[esp + 0x00000020:byte] = bl
	ecx = ebx
	edx = ebx
	ecx = ecx >>u 0x00000008
	SCZO = cond(ecx)
	edx = edx >>u 0x00000010
	SCZO = cond(edx)
	ebx = ebx >>u 0x00000018
	SCZO = cond(ebx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000004
	eax = esp + 0x00000024
	Mem0[esp + 0x00000025:byte] = cl
	Mem0[esp + 0x00000026:byte] = dl
	Mem0[esp + 0x00000027:byte] = bl
	ecx = Mem0[edi + 0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	call fn00414630 (retsize: 4;)
	edx = Mem0[esp + 0x0000001C:word32]
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	Mem0[edi + 0x00000018:word32] = eax
	// succ:  l00413066
l00413066:
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	Mem0[edi:word32] = 0x00000003
	goto l00413077
	// succ:  l00413077
l00413072:
	SCZO = cond(esi - 0x00000010)
	branch Test(UGE,C) l0041309B
	// succ:  l00413077 l0041309B
l00413077:
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l004141AC
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l004141AC
	// succ:  l0041307F l004141AC
l0041307F:
	eax = (word32) Mem0[ebp + 0x00000000:byte]
	ecx = esi
	eax = eax << cl
	SCZO = cond(eax)
	edx = edx - 0x00000001
	SCZO = cond(edx)
	esi = esi + 0x00000008
	SCZO = cond(esi)
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	ebx = ebx + eax
	SCZO = cond(ebx)
	SCZO = cond(esi - 0x00000010)
	Mem0[esp + 0x00000010:word32] = edx
	branch Test(ULT,C) l00413077
	eax = (word32) Mem0[ebp + 0x00000000:byte]
	ecx = esi
	eax = eax << cl
	SCZO = cond(eax)
	edx = edx - 0x00000001
	SCZO = cond(edx)
	esi = esi + 0x00000008
	SCZO = cond(esi)
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	ebx = ebx + eax
	SCZO = cond(ebx)
	SCZO = cond(esi - 0x00000010)
	Mem0[esp + 0x00000010:word32] = edx
	branch Test(ULT,C) l00413077
	// succ:  l0041309B l00413077
l0041309B:
	eax = Mem0[edi + 0x00000020:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004130B8
	eax = Mem0[edi + 0x00000020:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004130B8
	// succ:  l004130A2 l004130B8
l004130A2:
	ecx = ebx
	ecx = ecx & 0x000000FF
	SZO = cond(ecx)
	C = false
	Mem0[eax + 0x00000008:word32] = ecx
	ecx = Mem0[edi + 0x00000020:word32]
	eax = ebx
	eax = eax >>u 0x00000008
	SCZO = cond(eax)
	Mem0[ecx + 0x0000000C:word32] = eax
	ecx = ebx
	ecx = ecx & 0x000000FF
	SZO = cond(ecx)
	C = false
	Mem0[eax + 0x00000008:word32] = ecx
	ecx = Mem0[edi + 0x00000020:word32]
	eax = ebx
	eax = eax >>u 0x00000008
	SCZO = cond(eax)
	Mem0[ecx + 0x0000000C:word32] = eax
	// succ:  l004130B8
l004130B8:
	SZO = cond(Mem0[edi + 0x00000010:word32] & 0x00000200)
	C = false
	branch Test(EQ,Z) l004130E6
	// succ:  l004130C1 l004130E6
l004130C1:
	Mem0[esp + 0x00000020:byte] = bl
	ebx = ebx >>u 0x00000008
	SCZO = cond(ebx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000002
	edx = esp + 0x00000024
	Mem0[esp + 0x00000025:byte] = bl
	eax = Mem0[edi + 0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn00414630 (retsize: 4;)
	edx = Mem0[esp + 0x0000001C:word32]
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	Mem0[edi + 0x00000018:word32] = eax
	// succ:  l004130E6
l004130E6:
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	Mem0[esp + 0x00000018:word32] = ebx
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	Mem0[edi:word32] = 0x00000004
	// succ:  l004130F4
l004130F4:
	SZO = cond(Mem0[edi + 0x00000010:word32] & 0x00000400)
	C = false
	branch Test(EQ,Z) l0041316B
	// succ:  l004130FD l0041316B
l004130FD:
	SCZO = cond(esi - 0x00000010)
	branch Test(UGE,C) l00413126
	// succ:  l00413102 l00413126
l00413102:
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l004141AC
	// succ:  l0041310A l004141AC
l0041310A:
	eax = (word32) Mem0[ebp + 0x00000000:byte]
	ecx = esi
	eax = eax << cl
	SCZO = cond(eax)
	edx = edx - 0x00000001
	SCZO = cond(edx)
	esi = esi + 0x00000008
	SCZO = cond(esi)
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	ebx = ebx + eax
	SCZO = cond(ebx)
	SCZO = cond(esi - 0x00000010)
	Mem0[esp + 0x00000010:word32] = edx
	branch Test(ULT,C) l00413102
	// succ:  l00413126 l00413102
l00413126:
	eax = Mem0[edi + 0x00000020:word32]
	SZO = cond(eax & eax)
	C = false
	Mem0[edi + 0x00000040:word32] = ebx
	branch Test(EQ,Z) l00413133
	// succ:  l00413130 l00413133
l00413130:
	Mem0[eax + 0x00000014:word32] = ebx
	// succ:  l00413133
l00413133:
	SZO = cond(Mem0[edi + 0x00000010:word32] & 0x00000200)
	C = false
	branch Test(EQ,Z) l00413161
	// succ:  l0041313C l00413161
l0041313C:
	Mem0[esp + 0x00000020:byte] = bl
	ebx = ebx >>u 0x00000008
	SCZO = cond(ebx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000002
	ecx = esp + 0x00000024
	Mem0[esp + 0x00000025:byte] = bl
	edx = Mem0[edi + 0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call fn00414630 (retsize: 4;)
	edx = Mem0[esp + 0x0000001C:word32]
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	Mem0[edi + 0x00000018:word32] = eax
	// succ:  l00413161
l00413161:
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	Mem0[esp + 0x00000018:word32] = ebx
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	goto l00413179
	// succ:  l00413179
l0041316B:
	eax = Mem0[edi + 0x00000020:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00413179
	// succ:  l00413172 l00413179
l00413172:
	Mem0[eax + 0x00000010:word32] = 0x00000000
	// succ:  l00413179
l00413179:
	Mem0[edi:word32] = 0x00000005
	// succ:  l0041317F
l0041317F:
	SZO = cond(Mem0[edi + 0x00000010:word32] & 0x00000400)
	C = false
	branch Test(EQ,Z) l0041322E
	// succ:  l0041318C l0041322E
l0041318C:
	eax = Mem0[edi + 0x00000040:word32]
	SCZO = cond(eax - edx)
	Mem0[esp + 0x00000014:word32] = eax
	branch Test(ULE,CZ) l0041319D
	// succ:  l00413197 l0041319D
l00413197:
	eax = edx
	Mem0[esp + 0x00000014:word32] = edx
	// succ:  l0041319D
l0041319D:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00413224
	// succ:  l004131A5 l00413224
l004131A5:
	ecx = Mem0[edi + 0x00000020:word32]
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l004131F3
	// succ:  l004131AC l004131F3
l004131AC:
	ecx = Mem0[ecx + 0x00000010:word32]
	SZO = cond(ecx & ecx)
	C = false
	Mem0[esp + 0x00000034:word32] = ecx
	branch Test(EQ,Z) l004131F3
	// succ:  l004131B7 l004131F3
l004131B7:
	ecx = Mem0[edi + 0x00000020:word32]
	ecx = Mem0[ecx + 0x00000014:word32]
	ecx = ecx - Mem0[edi + 0x00000040:word32]
	SCZO = cond(ecx)
	edx = Mem0[edi + 0x00000020:word32]
	edx = Mem0[edx + 0x00000018:word32]
	Mem0[esp + 0x00000024:word32] = ecx
	ecx = ecx + eax
	SCZO = cond(ecx)
	SCZO = cond(ecx - edx)
	branch Test(ULE,CZ) l004131D6
	// succ:  l004131D0 l004131D6
l004131D0:
	edx = edx - Mem0[esp + 0x00000024:word32]
	SCZO = cond(edx)
	eax = edx
	// succ:  l004131D6
l004131D6:
	edx = Mem0[esp + 0x00000034:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = Mem0[esp + 0x00000028:word32]
	edx = edx + eax
	SCZO = cond(edx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	eax = memcpy(Mem0[esp:(ptr void)], Mem0[esp + 4:(ptr void)], Mem0[esp + 8:size_t])
	eax = Mem0[esp + 0x00000020:word32]
	edx = Mem0[esp + 0x0000001C:word32]
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	// succ:  l004131F3
l004131F3:
	SZO = cond(Mem0[edi + 0x00000010:word32] & 0x00000200)
	C = false
	branch Test(EQ,Z) l00413219
	// succ:  l004131FC l00413219
l004131FC:
	ecx = Mem0[esp + 0x00000014:word32]
	edx = Mem0[edi + 0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call fn00414630 (retsize: 4;)
	edx = Mem0[esp + 0x0000001C:word32]
	Mem0[edi + 0x00000018:word32] = eax
	eax = Mem0[esp + 0x00000020:word32]
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	// succ:  l00413219
l00413219:
	edx = edx - eax
	SCZO = cond(edx)
	ebp = ebp + eax
	SCZO = cond(ebp)
	v45 = Mem0[edi + 0x00000040:word32] - eax
	Mem0[edi + 0x00000040:word32] = v45
	SCZO = cond(v45)
	Mem0[esp + 0x00000010:word32] = edx
	// succ:  l00413224
l00413224:
	SCZO = cond(Mem0[edi + 0x00000040:word32] - 0x00000000)
	branch Test(NE,Z) l004141AC
	// succ:  l0041322E l004141AC
l0041322E:
	Mem0[edi + 0x00000040:word32] = 0x00000000
	Mem0[edi:word32] = 0x00000006
	Mem0[edi + 0x00000040:word32] = 0x00000000
	Mem0[edi:word32] = 0x00000006
	// succ:  l0041323B
l0041323B:
	SZO = cond(Mem0[edi + 0x00000010:word32] & 0x00000800)
	C = false
	branch Test(EQ,Z) l004132D8
	// succ:  l00413248 l004132D8
l00413248:
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l004141AC
	// succ:  l00413250 l004141AC
l00413250:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l00413252
l00413252:
	ecx = (word32) Mem0[eax + ebp:byte]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	Mem0[esp + 0x00000014:word32] = eax
	eax = Mem0[edi + 0x00000020:word32]
	SZO = cond(eax & eax)
	C = false
	Mem0[esp + 0x00000024:word32] = ecx
	branch Test(EQ,Z) l0041328E
	// succ:  l00413268 l0041328E
l00413268:
	ecx = Mem0[eax + 0x0000001C:word32]
	SZO = cond(ecx & ecx)
	C = false
	Mem0[esp + 0x00000034:word32] = ecx
	branch Test(EQ,Z) l0041328E
	// succ:  l00413273 l0041328E
l00413273:
	ecx = Mem0[edi + 0x00000040:word32]
	SCZO = cond(ecx - Mem0[eax + 0x00000020:word32])
	branch Test(UGE,C) l0041328E
	// succ:  l0041327B l0041328E
l0041327B:
	edx = Mem0[esp + 0x00000034:word32]
	al = Mem0[esp + 0x00000024:byte]
	Mem0[edx + ecx:byte] = al
	v44 = Mem0[edi + 0x00000040:word32] + 0x00000001
	Mem0[edi + 0x00000040:word32] = v44
	SCZO = cond(v44)
	edx = Mem0[esp + 0x00000010:word32]
	// succ:  l0041328E
l0041328E:
	SCZO = cond(Mem0[esp + 0x00000024:word32] - 0x00000000)
	branch Test(EQ,Z) l0041329D
	// succ:  l00413295 l0041329D
l00413295:
	eax = Mem0[esp + 0x00000014:word32]
	SCZO = cond(eax - edx)
	branch Test(ULT,C) l00413252
	// succ:  l0041329D l00413252
l0041329D:
	SZO = cond(Mem0[edi + 0x00000010:word32] & 0x00000200)
	C = false
	branch Test(EQ,Z) l004132BF
	// succ:  l004132A6 l004132BF
l004132A6:
	ecx = Mem0[esp + 0x00000014:word32]
	edx = Mem0[edi + 0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call fn00414630 (retsize: 4;)
	edx = Mem0[esp + 0x0000001C:word32]
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	Mem0[edi + 0x00000018:word32] = eax
	// succ:  l004132BF
l004132BF:
	eax = Mem0[esp + 0x00000014:word32]
	edx = edx - eax
	SCZO = cond(edx)
	ebp = ebp + eax
	SCZO = cond(ebp)
	SCZO = cond(Mem0[esp + 0x00000024:word32] - 0x00000000)
	Mem0[esp + 0x00000010:word32] = edx
	branch Test(NE,Z) l004141AC
	// succ:  l004132D6 l004141AC
l004132D6:
	goto l004132E6
	// succ:  l004132E6
l004132D8:
	eax = Mem0[edi + 0x00000020:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004132E6
	// succ:  l004132DF l004132E6
l004132DF:
	Mem0[eax + 0x0000001C:word32] = 0x00000000
	// succ:  l004132E6
l004132E6:
	Mem0[edi + 0x00000040:word32] = 0x00000000
	Mem0[edi:word32] = 0x00000007
	// succ:  l004132F3
l004132F3:
	SZO = cond(Mem0[edi + 0x00000010:word32] & 0x00001000)
	C = false
	branch Test(EQ,Z) l00413396
	// succ:  l00413300 l00413396
l00413300:
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l004141AC
	// succ:  l00413308 l004141AC
l00413308:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	ebx = ebx + 0x00000000
	// succ:  l00413310
l00413310:
	ecx = (word32) Mem0[eax + ebp:byte]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	Mem0[esp + 0x00000014:word32] = eax
	eax = Mem0[edi + 0x00000020:word32]
	SZO = cond(eax & eax)
	C = false
	Mem0[esp + 0x00000024:word32] = ecx
	branch Test(EQ,Z) l0041334C
	// succ:  l00413326 l0041334C
l00413326:
	ecx = Mem0[eax + 0x00000024:word32]
	SZO = cond(ecx & ecx)
	C = false
	Mem0[esp + 0x00000034:word32] = ecx
	branch Test(EQ,Z) l0041334C
	// succ:  l00413331 l0041334C
l00413331:
	ecx = Mem0[edi + 0x00000040:word32]
	SCZO = cond(ecx - Mem0[eax + 0x00000028:word32])
	branch Test(UGE,C) l0041334C
	// succ:  l00413339 l0041334C
l00413339:
	edx = Mem0[esp + 0x00000034:word32]
	al = Mem0[esp + 0x00000024:byte]
	Mem0[edx + ecx:byte] = al
	v43 = Mem0[edi + 0x00000040:word32] + 0x00000001
	Mem0[edi + 0x00000040:word32] = v43
	SCZO = cond(v43)
	edx = Mem0[esp + 0x00000010:word32]
	// succ:  l0041334C
l0041334C:
	SCZO = cond(Mem0[esp + 0x00000024:word32] - 0x00000000)
	branch Test(EQ,Z) l0041335B
	// succ:  l00413353 l0041335B
l00413353:
	eax = Mem0[esp + 0x00000014:word32]
	SCZO = cond(eax - edx)
	branch Test(ULT,C) l00413310
	// succ:  l0041335B l00413310
l0041335B:
	SZO = cond(Mem0[edi + 0x00000010:word32] & 0x00000200)
	C = false
	branch Test(EQ,Z) l0041337D
	// succ:  l00413364 l0041337D
l00413364:
	ecx = Mem0[esp + 0x00000014:word32]
	edx = Mem0[edi + 0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call fn00414630 (retsize: 4;)
	edx = Mem0[esp + 0x0000001C:word32]
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	Mem0[edi + 0x00000018:word32] = eax
	// succ:  l0041337D
l0041337D:
	eax = Mem0[esp + 0x00000014:word32]
	edx = edx - eax
	SCZO = cond(edx)
	ebp = ebp + eax
	SCZO = cond(ebp)
	SCZO = cond(Mem0[esp + 0x00000024:word32] - 0x00000000)
	Mem0[esp + 0x00000010:word32] = edx
	branch Test(NE,Z) l004141AC
	// succ:  l00413394 l004141AC
l00413394:
	goto l004133A4
	// succ:  l004133A4
l00413396:
	eax = Mem0[edi + 0x00000020:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004133A4
	// succ:  l0041339D l004133A4
l0041339D:
	Mem0[eax + 0x00000024:word32] = 0x00000000
	// succ:  l004133A4
l004133A4:
	Mem0[edi:word32] = 0x00000008
	// succ:  l004133AA
l004133AA:
	SZO = cond(Mem0[edi + 0x00000010:word32] & 0x00000200)
	C = false
	branch Test(EQ,Z) l00413400
	// succ:  l004133B3 l00413400
l004133B3:
	SCZO = cond(esi - 0x00000010)
	branch Test(UGE,C) l004133E0
	// succ:  l004133B8 l004133E0
l004133B8:
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l004141AC
	// succ:  l004133C0 l004141AC
l004133C0:
	eax = (word32) Mem0[ebp + 0x00000000:byte]
	ecx = esi
	eax = eax << cl
	SCZO = cond(eax)
	edx = edx - 0x00000001
	SCZO = cond(edx)
	esi = esi + 0x00000008
	SCZO = cond(esi)
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	ebx = ebx + eax
	SCZO = cond(ebx)
	SCZO = cond(esi - 0x00000010)
	Mem0[esp + 0x00000010:word32] = edx
	Mem0[esp + 0x00000018:word32] = ebx
	branch Test(ULT,C) l004133B8
	// succ:  l004133E0 l004133B8
l004133E0:
	ecx = (word32) Mem0[edi + 0x00000018:word16]
	SCZO = cond(ebx - ecx)
	branch Test(EQ,Z) l004133F8
	// succ:  l004133E8 l004133F8
l004133E8:
	eax = Mem0[esp + 0x00000040:word32]
	Mem0[eax + 0x00000018:word32] = 0x00418560
	goto l00414148
	// succ:  l00414148
l004133F8:
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	Mem0[esp + 0x00000018:word32] = ebx
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	// succ:  l00413400
l00413400:
	eax = Mem0[edi + 0x00000020:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0041341D
	// succ:  l00413407 l0041341D
l00413407:
	ecx = Mem0[edi + 0x00000010:word32]
	ecx = ecx >> 0x00000009
	SCZO = cond(ecx)
	ecx = ecx & 0x00000001
	SZO = cond(ecx)
	C = false
	Mem0[eax + 0x0000002C:word32] = ecx
	edx = Mem0[edi + 0x00000020:word32]
	Mem0[edx + 0x00000030:word32] = 0x00000001
	// succ:  l0041341D
l0041341D:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	call fn00414630 (retsize: 4;)
	ecx = Mem0[esp + 0x0000004C:word32]
	edx = Mem0[esp + 0x0000001C:word32]
	Mem0[edi + 0x00000018:word32] = eax
	Mem0[ecx + 0x00000030:word32] = eax
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	Mem0[edi:word32] = 0x0000000B
	goto l0041414E
	// succ:  l0041414E
l00413444:
	SCZO = cond(esi - 0x00000020)
	branch Test(UGE,C) l00413478
	// succ:  l00413449 l00413478
l00413449:
	esp = esp + 0x00000000
	// succ:  l00413450
l00413450:
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l004141AC
	// succ:  l00413458 l004141AC
l00413458:
	eax = (word32) Mem0[ebp + 0x00000000:byte]
	ecx = esi
	eax = eax << cl
	SCZO = cond(eax)
	edx = edx - 0x00000001
	SCZO = cond(edx)
	esi = esi + 0x00000008
	SCZO = cond(esi)
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	ebx = ebx + eax
	SCZO = cond(ebx)
	SCZO = cond(esi - 0x00000020)
	Mem0[esp + 0x00000010:word32] = edx
	Mem0[esp + 0x00000018:word32] = ebx
	branch Test(ULT,C) l00413450
	// succ:  l00413478 l00413450
l00413478:
	ecx = ebx
	ecx = ecx & 0x0000FF00
	SZO = cond(ecx)
	C = false
	eax = ebx
	eax = eax << 0x00000010
	SCZO = cond(eax)
	ecx = ecx + eax
	SCZO = cond(ecx)
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	ah = Mem0[esp + 0x0000001A:byte]
	ecx = ecx << 0x00000008
	SCZO = cond(ecx)
	ebx = ebx >>u 0x00000018
	SCZO = cond(ebx)
	ecx = ecx + eax
	SCZO = cond(ecx)
	eax = ecx + ebx
	ecx = Mem0[esp + 0x00000040:word32]
	Mem0[edi + 0x00000018:word32] = eax
	Mem0[ecx + 0x00000030:word32] = eax
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	Mem0[edi:word32] = 0x0000000A
	// succ:  l004134AC
l004134AC:
	SCZO = cond(Mem0[edi + 0x0000000C:word32] - 0x00000000)
	branch Test(EQ,Z) l00414166
	// succ:  l004134B6 l00414166
l004134B6:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	call fn00415030 (retsize: 4;)
	edx = Mem0[esp + 0x0000004C:word32]
	Mem0[edi + 0x00000018:word32] = eax
	Mem0[edx + 0x00000030:word32] = eax
	edx = Mem0[esp + 0x0000001C:word32]
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	Mem0[edi:word32] = 0x0000000B
	// succ:  l004134D8
l004134D8:
	SCZO = cond(Mem0[esp + 0x00000044:word32] - 0x00000005)
	branch Test(EQ,Z) l004141AC
	// succ:  l004134E3 l004141AC
l004134E3:
	SCZO = cond(Mem0[edi + 0x00000004:word32] - 0x00000000)
	branch Test(EQ,Z) l00413501
	SCZO = cond(Mem0[edi + 0x00000004:word32] - 0x00000000)
	branch Test(EQ,Z) l00413501
	// succ:  l004134E9 l00413501
l004134E9:
	ecx = esi
	ecx = ecx & 0x00000007
	SZO = cond(ecx)
	C = false
	ebx = ebx >>u cl
	SCZO = cond(ebx)
	esi = esi - ecx
	SCZO = cond(esi)
	Mem0[edi:word32] = 0x00000018
	Mem0[esp + 0x00000018:word32] = ebx
	ecx = esi
	ecx = ecx & 0x00000007
	SZO = cond(ecx)
	C = false
	ebx = ebx >>u cl
	SCZO = cond(ebx)
	esi = esi - ecx
	SCZO = cond(esi)
	Mem0[edi:word32] = 0x00000018
	Mem0[esp + 0x00000018:word32] = ebx
	goto l0041414E
	// succ:  l0041414E
l00413501:
	SCZO = cond(esi - 0x00000003)
	branch Test(UGE,C) l0041352A
	// succ:  l00413506 l0041352A
l00413506:
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l004141AC
	// succ:  l0041350E l004141AC
l0041350E:
	eax = (word32) Mem0[ebp + 0x00000000:byte]
	ecx = esi
	eax = eax << cl
	SCZO = cond(eax)
	edx = edx - 0x00000001
	SCZO = cond(edx)
	esi = esi + 0x00000008
	SCZO = cond(esi)
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	ebx = ebx + eax
	SCZO = cond(ebx)
	SCZO = cond(esi - 0x00000003)
	Mem0[esp + 0x00000010:word32] = edx
	branch Test(ULT,C) l00413506
	// succ:  l0041352A l00413506
l0041352A:
	ecx = ebx
	ebx = ebx >>u 0x00000001
	SCZO = cond(ebx)
	eax = ebx
	ecx = ecx & 0x00000001
	SZO = cond(ecx)
	C = false
	eax = eax & 0x00000003
	SZO = cond(eax)
	C = false
	esi = esi - 0x00000001
	SCZO = cond(esi)
	SCZO = cond(eax - 0x00000003)
	Mem0[edi + 0x00000004:word32] = ecx
	branch Test(UGT,CZ) l0041359F
	// succ:  l00413541 l0041359F
l00413541:
	switch (eax) { l00413548 l0041355D l00413579 l0041358E }
	// succ:  l00413548 l0041355D l00413579 l0041358E
l00413548:
	ebx = ebx >>u 0x00000002
	SCZO = cond(ebx)
	Mem0[edi:word32] = 0x0000000D
	Mem0[esp + 0x00000018:word32] = ebx
	esi = esi - 0x00000002
	SCZO = cond(esi)
	goto l0041414E
	// succ:  l0041414E
l0041355D:
	eax = edi
	call fn00412C40 (retsize: 4;)
	ebx = ebx >>u 0x00000002
	SCZO = cond(ebx)
	Mem0[edi:word32] = 0x00000012
	Mem0[esp + 0x00000018:word32] = ebx
	esi = esi - 0x00000002
	SCZO = cond(esi)
	goto l0041414E
	// succ:  l0041414E
l00413579:
	ebx = ebx >>u 0x00000002
	SCZO = cond(ebx)
	Mem0[edi:word32] = 0x0000000F
	Mem0[esp + 0x00000018:word32] = ebx
	esi = esi - 0x00000002
	SCZO = cond(esi)
	goto l0041414E
	// succ:  l0041414E
l0041358E:
	eax = Mem0[esp + 0x00000040:word32]
	Mem0[eax + 0x00000018:word32] = 0x0041854C
	Mem0[edi:word32] = 0x0000001B
	// succ:  l0041359F
l0041359F:
	ebx = ebx >>u 0x00000002
	SCZO = cond(ebx)
	Mem0[esp + 0x00000018:word32] = ebx
	esi = esi - 0x00000002
	SCZO = cond(esi)
	goto l0041414E
	// succ:  l0041414E
l004135AE:
	ecx = esi
	ecx = ecx & 0x00000007
	SZO = cond(ecx)
	C = false
	ebx = ebx >>u cl
	SCZO = cond(ebx)
	esi = esi - ecx
	SCZO = cond(esi)
	SCZO = cond(esi - 0x00000020)
	Mem0[esp + 0x00000018:word32] = ebx
	branch Test(UGE,C) l004135E8
	// succ:  l004135C0 l004135E8
l004135C0:
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l004141AC
	// succ:  l004135C8 l004141AC
l004135C8:
	eax = (word32) Mem0[ebp + 0x00000000:byte]
	ecx = esi
	eax = eax << cl
	SCZO = cond(eax)
	edx = edx - 0x00000001
	SCZO = cond(edx)
	esi = esi + 0x00000008
	SCZO = cond(esi)
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	ebx = ebx + eax
	SCZO = cond(ebx)
	SCZO = cond(esi - 0x00000020)
	Mem0[esp + 0x00000010:word32] = edx
	Mem0[esp + 0x00000018:word32] = ebx
	branch Test(ULT,C) l004135C0
	// succ:  l004135E8 l004135C0
l004135E8:
	ecx = ebx
	eax = ebx
	ecx = ~ecx
	eax = eax & 0x0000FFFF
	SZO = cond(eax)
	C = false
	ecx = ecx >>u 0x00000010
	SCZO = cond(ecx)
	SCZO = cond(eax - ecx)
	branch Test(EQ,Z) l0041360A
	// succ:  l004135FA l0041360A
l004135FA:
	eax = Mem0[esp + 0x00000040:word32]
	Mem0[eax + 0x00000018:word32] = 0x0041852C
	goto l00414148
	// succ:  l00414148
l0041360A:
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	Mem0[edi + 0x00000040:word32] = eax
	Mem0[esp + 0x00000018:word32] = ebx
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	Mem0[edi:word32] = 0x0000000E
	// succ:  l0041361B
l0041361B:
	eax = Mem0[edi + 0x00000040:word32]
	SZO = cond(eax & eax)
	C = false
	Mem0[esp + 0x00000014:word32] = eax
	branch Test(EQ,Z) l00413CDC
	// succ:  l0041362A l00413CDC
l0041362A:
	SCZO = cond(eax - edx)
	branch Test(ULE,CZ) l00413634
	// succ:  l0041362E l00413634
l0041362E:
	eax = edx
	Mem0[esp + 0x00000014:word32] = edx
	// succ:  l00413634
l00413634:
	ecx = Mem0[esp + 0x0000001C:word32]
	SCZO = cond(eax - ecx)
	branch Test(ULE,CZ) l00413642
	// succ:  l0041363C l00413642
l0041363C:
	eax = ecx
	Mem0[esp + 0x00000014:word32] = eax
	// succ:  l00413642
l00413642:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004141AC
	// succ:  l0041364A l004141AC
l0041364A:
	ecx = Mem0[esp + 0x00000014:word32]
	edx = Mem0[esp + 0x00000028:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	eax = memcpy(Mem0[esp:(ptr void)], Mem0[esp + 4:(ptr void)], Mem0[esp + 8:size_t])
	eax = Mem0[esp + 0x00000020:word32]
	v39 = Mem0[esp + 0x0000001C:word32] - eax
	Mem0[esp + 0x0000001C:word32] = v39
	SCZO = cond(v39)
	v40 = Mem0[esp + 0x00000028:word32] - eax
	Mem0[esp + 0x00000028:word32] = v40
	SCZO = cond(v40)
	v41 = Mem0[esp + 0x00000034:word32] + eax
	Mem0[esp + 0x00000034:word32] = v41
	SCZO = cond(v41)
	edx = Mem0[esp + 0x0000001C:word32]
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	ebp = ebp + eax
	SCZO = cond(ebp)
	v42 = Mem0[edi + 0x00000040:word32] - eax
	Mem0[edi + 0x00000040:word32] = v42
	SCZO = cond(v42)
	goto l0041414E
	// succ:  l0041414E
l0041367B:
	SCZO = cond(esi - 0x0000000E)
	branch Test(UGE,C) l004136A4
	// succ:  l00413680 l004136A4
l00413680:
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l004141AC
	// succ:  l00413688 l004141AC
l00413688:
	eax = (word32) Mem0[ebp + 0x00000000:byte]
	ecx = esi
	eax = eax << cl
	SCZO = cond(eax)
	edx = edx - 0x00000001
	SCZO = cond(edx)
	esi = esi + 0x00000008
	SCZO = cond(esi)
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	ebx = ebx + eax
	SCZO = cond(ebx)
	SCZO = cond(esi - 0x0000000E)
	Mem0[esp + 0x00000010:word32] = edx
	branch Test(ULT,C) l00413680
	// succ:  l004136A4 l00413680
l004136A4:
	ecx = ebx
	ecx = ecx & 0x0000001F
	SZO = cond(ecx)
	C = false
	ebx = ebx >>u 0x00000005
	SCZO = cond(ebx)
	ecx = ecx + 0x00000101
	SCZO = cond(ecx)
	eax = ebx
	Mem0[edi + 0x00000060:word32] = ecx
	ebx = ebx >>u 0x00000005
	SCZO = cond(ebx)
	ecx = ebx
	eax = eax & 0x0000001F
	SZO = cond(eax)
	C = false
	ecx = ecx & 0x0000000F
	SZO = cond(ecx)
	C = false
	eax = eax + 0x00000001
	SCZO = cond(eax)
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	ebx = ebx >>u 0x00000004
	SCZO = cond(ebx)
	esi = esi - 0x0000000E
	SCZO = cond(esi)
	SCZO = cond(Mem0[edi + 0x00000060:word32] - 0x0000011E)
	Mem0[edi + 0x00000064:word32] = eax
	Mem0[edi + 0x0000005C:word32] = ecx
	Mem0[esp + 0x00000018:word32] = ebx
	branch Test(UGT,CZ) l004137D5
	// succ:  l004136E5 l004137D5
l004136E5:
	SCZO = cond(eax - 0x0000001E)
	branch Test(UGT,CZ) l004137D5
	// succ:  l004136EE l004137D5
l004136EE:
	Mem0[edi + 0x00000068:word32] = 0x00000000
	Mem0[edi:word32] = 0x00000010
	// succ:  l004136FB
l004136FB:
	ecx = Mem0[edi + 0x00000068:word32]
	SCZO = cond(ecx - Mem0[edi + 0x0000005C:word32])
	branch Test(UGE,C) l00413758
	// succ:  l00413703 l00413758
l00413703:
	SCZO = cond(esi - 0x00000003)
	branch Test(UGE,C) l0041372C
	// succ:  l00413708 l0041372C
l00413708:
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l004141AC
	// succ:  l00413710 l004141AC
l00413710:
	eax = (word32) Mem0[ebp + 0x00000000:byte]
	ecx = esi
	eax = eax << cl
	SCZO = cond(eax)
	edx = edx - 0x00000001
	SCZO = cond(edx)
	esi = esi + 0x00000008
	SCZO = cond(esi)
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	ebx = ebx + eax
	SCZO = cond(ebx)
	SCZO = cond(esi - 0x00000003)
	Mem0[esp + 0x00000010:word32] = edx
	branch Test(ULT,C) l00413708
	// succ:  l0041372C l00413708
l0041372C:
	eax = Mem0[edi + 0x00000068:word32]
	eax = (word32) Mem0[0x004183F0 + eax * 0x0002:word16]
	ecx = (word32) bl
	ecx = ecx & 0x00000007
	SZO = cond(ecx)
	C = false
	Mem0[edi + 0x00000070 + eax * 0x0002:word16] = cx
	v34 = Mem0[edi + 0x00000068:word32] + 0x00000001
	Mem0[edi + 0x00000068:word32] = v34
	SCZO = cond(v34)
	ecx = Mem0[edi + 0x00000068:word32]
	ebx = ebx >>u 0x00000003
	SCZO = cond(ebx)
	esi = esi - 0x00000003
	SCZO = cond(esi)
	SCZO = cond(ecx - Mem0[edi + 0x0000005C:word32])
	Mem0[esp + 0x00000018:word32] = ebx
	branch Test(ULT,C) l00413703
	// succ:  l00413758 l00413703
l00413758:
	SCZO = cond(Mem0[edi + 0x00000068:word32] - 0x00000013)
	branch Test(UGE,C) l00413789
	// succ:  l0041375E l00413789
l0041375E:
	ecx = 0x00000001
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l00413770
l00413770:
	edx = Mem0[edi + 0x00000068:word32]
	edx = (word32) Mem0[0x004183F0 + edx * 0x0002:word16]
	Mem0[edi + 0x00000070 + edx * 0x0002:word16] = ax
	v36 = Mem0[edi + 0x00000068:word32] + ecx
	Mem0[edi + 0x00000068:word32] = v36
	SCZO = cond(v36)
	SCZO = cond(Mem0[edi + 0x00000068:word32] - 0x00000013)
	branch Test(ULT,C) l00413770
	// succ:  l00413789 l00413770
l00413789:
	eax = edi + 0x00000530
	ecx = edi + 0x0000006C
	Mem0[ecx:word32] = eax
	Mem0[edi + 0x0000004C:word32] = eax
	edx = edi + 0x000002F0
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	eax = edi + 0x00000054
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	Mem0[eax:word32] = 0x00000007
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000013
	eax = edi + 0x00000070
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	call fn00414B40 (retsize: 4;)
	edx = Mem0[esp + 0x00000028:word32]
	esp = esp + 0x00000018
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	Mem0[esp + 0x00000030:word32] = eax
	branch Test(EQ,Z) l004137E5
	// succ:  l004137C5 l004137E5
l004137C5:
	ecx = Mem0[esp + 0x00000040:word32]
	Mem0[ecx + 0x00000018:word32] = 0x00418510
	goto l00414148
	// succ:  l00414148
l004137D5:
	eax = Mem0[esp + 0x00000040:word32]
	Mem0[eax + 0x00000018:word32] = 0x004184EC
	goto l00414148
	// succ:  l00414148
l004137E5:
	Mem0[edi + 0x00000068:word32] = 0x00000000
	Mem0[edi:word32] = 0x00000011
	// succ:  l004137F2
l004137F2:
	eax = Mem0[edi + 0x00000064:word32]
	eax = eax + Mem0[edi + 0x00000060:word32]
	SCZO = cond(eax)
	SCZO = cond(Mem0[edi + 0x00000068:word32] - eax)
	branch Test(UGE,C) l00413A39
	// succ:  l00413801 l00413A39
l00413801:
	ecx = Mem0[edi + 0x00000054:word32]
	eax = 0x00000001
	eax = eax << cl
	SCZO = cond(eax)
	ecx = Mem0[edi + 0x0000004C:word32]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	eax = eax & ebx
	SZO = cond(eax)
	C = false
	eax = Mem0[ecx + eax * 0x00000004:word32]
	ecx = eax
	ecx = ecx >>u 0x00000008
	SCZO = cond(ecx)
	ecx = (word32) cl
	SCZO = cond(ecx - esi)
	Mem0[esp + 0x00000014:word32] = eax
	branch Test(ULE,CZ) l0041386A
	// succ:  l00413826 l0041386A
l00413826:
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l004141AC
	// succ:  l0041382E l004141AC
l0041382E:
	eax = (word32) Mem0[ebp + 0x00000000:byte]
	ecx = esi
	eax = eax << cl
	SCZO = cond(eax)
	ecx = Mem0[edi + 0x00000054:word32]
	edx = edx - 0x00000001
	SCZO = cond(edx)
	esi = esi + 0x00000008
	SCZO = cond(esi)
	ebx = ebx + eax
	SCZO = cond(ebx)
	eax = 0x00000001
	eax = eax << cl
	SCZO = cond(eax)
	ecx = Mem0[edi + 0x0000004C:word32]
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	Mem0[esp + 0x00000010:word32] = edx
	eax = eax - 0x00000001
	SCZO = cond(eax)
	eax = eax & ebx
	SZO = cond(eax)
	C = false
	eax = Mem0[ecx + eax * 0x00000004:word32]
	ecx = eax
	ecx = ecx >>u 0x00000008
	SCZO = cond(ecx)
	ecx = (word32) cl
	SCZO = cond(ecx - esi)
	Mem0[esp + 0x00000014:word32] = eax
	branch Test(UGT,CZ) l00413826
	// succ:  l0041386A l00413826
l0041386A:
	ecx = eax
	ecx = ecx >>u 0x00000010
	SCZO = cond(ecx)
	SCZO = cond(ecx - 0x00000010)
	branch Test(UGE,C) l004138CB
	// succ:  l00413874 l004138CB
l00413874:
	ecx = eax
	ecx = ecx >>u 0x00000008
	SCZO = cond(ecx)
	ecx = (word32) cl
	SCZO = cond(esi - ecx)
	branch Test(UGE,C) l004138AA
	// succ:  l00413880 l004138AA
l00413880:
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l004141AC
	// succ:  l00413888 l004141AC
l00413888:
	eax = (word32) Mem0[ebp + 0x00000000:byte]
	ecx = esi
	eax = eax << cl
	SCZO = cond(eax)
	edx = edx - 0x00000001
	SCZO = cond(edx)
	esi = esi + 0x00000008
	SCZO = cond(esi)
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	ebx = ebx + eax
	SCZO = cond(ebx)
	eax = Mem0[esp + 0x00000014:word32]
	ecx = (word32) ah
	SCZO = cond(esi - ecx)
	Mem0[esp + 0x00000010:word32] = edx
	branch Test(ULT,C) l00413880
	// succ:  l004138AA l00413880
l004138AA:
	ecx = (word32) ah
	eax = Mem0[edi + 0x00000068:word32]
	ebx = ebx >>u cl
	SCZO = cond(ebx)
	esi = esi - ecx
	SCZO = cond(esi)
	cx = Mem0[esp + 0x00000016:word16]
	Mem0[edi + 0x00000070 + eax * 0x0002:word16] = cx
	v33 = Mem0[edi + 0x00000068:word32] + 0x00000001
	Mem0[edi + 0x00000068:word32] = v33
	SCZO = cond(v33)
	Mem0[esp + 0x00000018:word32] = ebx
	goto l00413A2A
	// succ:  l00413A2A
l004138CB:
	cx = Mem0[esp + 0x00000016:word16]
	SCZO = cond(cx - 0x0010)
	branch Test(NE,Z) l00413941
	// succ:  l004138D6 l00413941
l004138D6:
	ecx = (word32) ah
	eax = ecx + 0x00000002
	SCZO = cond(esi - eax)
	Mem0[esp + 0x00000024:word32] = ecx
	branch Test(UGE,C) l0041390E
	// succ:  l004138E4 l0041390E
l004138E4:
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l004141AC
	// succ:  l004138EC l004141AC
l004138EC:
	eax = (word32) Mem0[ebp + 0x00000000:byte]
	ecx = esi
	eax = eax << cl
	SCZO = cond(eax)
	ecx = Mem0[esp + 0x00000024:word32]
	edx = edx - 0x00000001
	SCZO = cond(edx)
	esi = esi + 0x00000008
	SCZO = cond(esi)
	ebx = ebx + eax
	SCZO = cond(ebx)
	eax = ecx + 0x00000002
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	SCZO = cond(esi - eax)
	Mem0[esp + 0x00000010:word32] = edx
	branch Test(ULT,C) l004138E4
	// succ:  l0041390E l004138E4
l0041390E:
	eax = Mem0[edi + 0x00000068:word32]
	ebx = ebx >>u cl
	SCZO = cond(ebx)
	esi = esi - ecx
	SCZO = cond(esi)
	SZO = cond(eax & eax)
	C = false
	Mem0[esp + 0x00000018:word32] = ebx
	branch Test(EQ,Z) l00413A90
	// succ:  l00413921 l00413A90
l00413921:
	ecx = (word32) Mem0[edi + 0x0000006E + eax * 0x0002:word16]
	eax = ebx
	eax = eax & 0x00000003
	SZO = cond(eax)
	C = false
	eax = eax + 0x00000003
	SCZO = cond(eax)
	ebx = ebx >>u 0x00000002
	SCZO = cond(ebx)
	Mem0[esp + 0x00000024:word32] = ecx
	Mem0[esp + 0x00000014:word32] = eax
	esi = esi - 0x00000002
	SCZO = cond(esi)
	goto l004139F0
	// succ:  l004139F0
l00413941:
	SCZO = cond(cx - 0x0011)
	ecx = (word32) ah
	Mem0[esp + 0x00000024:word32] = ecx
	branch Test(NE,Z) l00413997
	// succ:  l0041394E l00413997
l0041394E:
	eax = ecx + 0x00000003
	SCZO = cond(esi - eax)
	branch Test(UGE,C) l0041397F
	// succ:  l00413955 l0041397F
l00413955:
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l004141AC
	// succ:  l0041395D l004141AC
l0041395D:
	eax = (word32) Mem0[ebp + 0x00000000:byte]
	ecx = esi
	eax = eax << cl
	SCZO = cond(eax)
	ecx = Mem0[esp + 0x00000024:word32]
	edx = edx - 0x00000001
	SCZO = cond(edx)
	esi = esi + 0x00000008
	SCZO = cond(esi)
	ebx = ebx + eax
	SCZO = cond(ebx)
	eax = ecx + 0x00000003
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	SCZO = cond(esi - eax)
	Mem0[esp + 0x00000010:word32] = edx
	branch Test(ULT,C) l00413955
	// succ:  l0041397F l00413955
l0041397F:
	ebx = ebx >>u cl
	SCZO = cond(ebx)
	eax = ebx
	eax = eax & 0x00000007
	SZO = cond(eax)
	C = false
	eax = eax + 0x00000003
	SCZO = cond(eax)
	Mem0[esp + 0x00000014:word32] = eax
	ebx = ebx >>u 0x00000003
	SCZO = cond(ebx)
	eax = 0xFFFFFFFD
	goto l004139E0
	// succ:  l004139E0
l00413997:
	eax = ecx + 0x00000007
	SCZO = cond(esi - eax)
	branch Test(UGE,C) l004139CA
	// succ:  l0041399E l004139CA
l0041399E:
	edi = edi
	// succ:  l004139A0
l004139A0:
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l004141AC
	// succ:  l004139A8 l004141AC
l004139A8:
	eax = (word32) Mem0[ebp + 0x00000000:byte]
	ecx = esi
	eax = eax << cl
	SCZO = cond(eax)
	ecx = Mem0[esp + 0x00000024:word32]
	edx = edx - 0x00000001
	SCZO = cond(edx)
	esi = esi + 0x00000008
	SCZO = cond(esi)
	ebx = ebx + eax
	SCZO = cond(ebx)
	eax = ecx + 0x00000007
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	SCZO = cond(esi - eax)
	Mem0[esp + 0x00000010:word32] = edx
	branch Test(ULT,C) l004139A0
	// succ:  l004139CA l004139A0
l004139CA:
	ebx = ebx >>u cl
	SCZO = cond(ebx)
	eax = ebx
	eax = eax & 0x0000007F
	SZO = cond(eax)
	C = false
	eax = eax + 0x0000000B
	SCZO = cond(eax)
	Mem0[esp + 0x00000014:word32] = eax
	ebx = ebx >>u 0x00000007
	SCZO = cond(ebx)
	eax = 0xFFFFFFF9
	// succ:  l004139E0
l004139E0:
	eax = eax - ecx
	SCZO = cond(eax)
	esi = esi + eax
	SCZO = cond(esi)
	eax = Mem0[esp + 0x00000014:word32]
	Mem0[esp + 0x00000024:word32] = 0x00000000
	// succ:  l004139F0
l004139F0:
	ecx = Mem0[edi + 0x00000068:word32]
	ecx = ecx + eax
	SCZO = cond(ecx)
	eax = Mem0[edi + 0x00000064:word32]
	eax = eax + Mem0[edi + 0x00000060:word32]
	SCZO = cond(eax)
	Mem0[esp + 0x00000018:word32] = ebx
	SCZO = cond(ecx - eax)
	branch Test(UGT,CZ) l00413AA0
	// succ:  l00413A07 l00413AA0
l00413A07:
	SCZO = cond(Mem0[esp + 0x00000014:word32] - 0x00000000)
	branch Test(EQ,Z) l00413A2A
	// succ:  l00413A0E l00413A2A
l00413A0E:
	eax = Mem0[esp + 0x00000024:word32]
	// succ:  l00413A12
l00413A12:
	ecx = Mem0[edi + 0x00000068:word32]
	v37 = Mem0[esp + 0x00000014:word32] - 0x00000001
	Mem0[esp + 0x00000014:word32] = v37
	SCZO = cond(v37)
	Mem0[edi + 0x00000070 + ecx * 0x0002:word16] = ax
	v38 = Mem0[edi + 0x00000068:word32] + 0x00000001
	Mem0[edi + 0x00000068:word32] = v38
	SCZO = cond(v38)
	SCZO = cond(Mem0[esp + 0x00000014:word32] - 0x00000000)
	branch Test(NE,Z) l00413A12
	// succ:  l00413A2A l00413A12
l00413A2A:
	eax = Mem0[edi + 0x00000064:word32]
	eax = eax + Mem0[edi + 0x00000060:word32]
	SCZO = cond(eax)
	SCZO = cond(Mem0[edi + 0x00000068:word32] - eax)
	branch Test(ULT,C) l00413801
	eax = Mem0[edi + 0x00000064:word32]
	eax = eax + Mem0[edi + 0x00000060:word32]
	SCZO = cond(eax)
	SCZO = cond(Mem0[edi + 0x00000068:word32] - eax)
	branch Test(ULT,C) l00413801
	// succ:  l00413A39 l00413801
l00413A39:
	SCZO = cond(Mem0[edi:word32] - 0x0000001B)
	branch Test(EQ,Z) l0041414E
	SCZO = cond(Mem0[edi:word32] - 0x0000001B)
	branch Test(EQ,Z) l0041414E
	// succ:  l00413A42 l0041414E
l00413A42:
	eax = edi + 0x00000530
	ecx = edi + 0x0000006C
	Mem0[ecx:word32] = eax
	edx = edi + 0x000002F0
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	Mem0[edi + 0x0000004C:word32] = eax
	eax = edi + 0x00000054
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	ecx = Mem0[edi + 0x00000060:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	edx = edi + 0x00000070
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000001
	Mem0[eax:word32] = 0x00000009
	call fn00414B40 (retsize: 4;)
	esp = esp + 0x00000018
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	Mem0[esp + 0x00000030:word32] = eax
	branch Test(EQ,Z) l00413AB0
	eax = edi + 0x00000530
	ecx = edi + 0x0000006C
	Mem0[ecx:word32] = eax
	edx = edi + 0x000002F0
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	Mem0[edi + 0x0000004C:word32] = eax
	eax = edi + 0x00000054
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	ecx = Mem0[edi + 0x00000060:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	edx = edi + 0x00000070
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000001
	Mem0[eax:word32] = 0x00000009
	call fn00414B40 (retsize: 4;)
	esp = esp + 0x00000018
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	Mem0[esp + 0x00000030:word32] = eax
	branch Test(EQ,Z) l00413AB0
	// succ:  l00413A7C l00413AB0
l00413A7C:
	eax = Mem0[esp + 0x00000040:word32]
	edx = Mem0[esp + 0x00000010:word32]
	Mem0[eax + 0x00000018:word32] = 0x004184D0
	eax = Mem0[esp + 0x00000040:word32]
	edx = Mem0[esp + 0x00000010:word32]
	Mem0[eax + 0x00000018:word32] = 0x004184D0
	goto l00414148
	// succ:  l00414148
l00413A90:
	ecx = Mem0[esp + 0x00000040:word32]
	Mem0[ecx + 0x00000018:word32] = 0x004184B4
	goto l00414148
	// succ:  l00414148
l00413AA0:
	eax = Mem0[esp + 0x00000040:word32]
	Mem0[eax + 0x00000018:word32] = 0x004184B4
	goto l00414148
	// succ:  l00414148
l00413AB0:
	edx = Mem0[edi + 0x0000006C:word32]
	ecx = edi + 0x0000006C
	Mem0[edi + 0x00000050:word32] = edx
	edx = edi + 0x000002F0
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	eax = edi + 0x00000058
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	ecx = Mem0[edi + 0x00000060:word32]
	Mem0[eax:word32] = 0x00000006
	eax = Mem0[edi + 0x00000064:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	edx = edi + 0x00000070 + ecx * 0x00000002
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000002
	call fn00414B40 (retsize: 4;)
	edx = Mem0[esp + 0x00000028:word32]
	esp = esp + 0x00000018
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	Mem0[esp + 0x00000030:word32] = eax
	branch Test(EQ,Z) l00413AFD
	// succ:  l00413AED l00413AFD
l00413AED:
	eax = Mem0[esp + 0x00000040:word32]
	Mem0[eax + 0x00000018:word32] = 0x0041849C
	goto l00414148
	// succ:  l00414148
l00413AFD:
	Mem0[edi:word32] = 0x00000012
	// succ:  l00413B03
l00413B03:
	SCZO = cond(edx - 0x00000006)
	branch Test(ULT,C) l00413B71
	// succ:  l00413B0C l00413B71
l00413B0C:
	SCZO = cond(Mem0[esp + 0x0000001C:word32] - 0x00000102)
	branch Test(ULT,C) l00413B71
	// succ:  l00413B16 l00413B71
l00413B16:
	eax = Mem0[esp + 0x00000040:word32]
	edx = Mem0[esp + 0x0000001C:word32]
	ecx = Mem0[esp + 0x00000028:word32]
	Mem0[eax + 0x00000010:word32] = edx
	edx = Mem0[esp + 0x0000002C:word32]
	Mem0[eax + 0x0000000C:word32] = ecx
	ecx = Mem0[esp + 0x00000010:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	Mem0[eax:word32] = ebp
	Mem0[eax + 0x00000004:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	Mem0[edi + 0x00000038:word32] = ebx
	Mem0[edi + 0x0000003C:word32] = esi
	call fn00414680 (retsize: 4;)
	eax = Mem0[esp + 0x00000048:word32]
	edx = Mem0[eax + 0x00000010:word32]
	ecx = Mem0[eax + 0x0000000C:word32]
	ebp = Mem0[eax:word32]
	eax = Mem0[eax + 0x00000004:word32]
	ebx = Mem0[edi + 0x00000038:word32]
	esi = Mem0[edi + 0x0000003C:word32]
	Mem0[esp + 0x00000024:word32] = edx
	esp = esp + 0x00000008
	SCZO = cond(esp)
	Mem0[esp + 0x00000028:word32] = ecx
	Mem0[esp + 0x00000010:word32] = eax
	Mem0[esp + 0x00000018:word32] = ebx
	edx = eax
	goto l0041414E
	// succ:  l0041414E
l00413B71:
	ecx = Mem0[edi + 0x00000054:word32]
	eax = 0x00000001
	eax = eax << cl
	SCZO = cond(eax)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	eax = eax & ebx
	SZO = cond(eax)
	C = false
	ecx = eax
	eax = Mem0[edi + 0x0000004C:word32]
	eax = Mem0[eax + ecx * 0x00000004:word32]
	ecx = eax
	ecx = ecx >>u 0x00000008
	SCZO = cond(ecx)
	ecx = (word32) cl
	SCZO = cond(ecx - esi)
	Mem0[esp + 0x00000014:word32] = eax
	branch Test(ULE,CZ) l00413BDC
	// succ:  l00413B98 l00413BDC
l00413B98:
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l004141AC
	// succ:  l00413BA0 l004141AC
l00413BA0:
	eax = (word32) Mem0[ebp + 0x00000000:byte]
	ecx = esi
	eax = eax << cl
	SCZO = cond(eax)
	ecx = Mem0[edi + 0x00000054:word32]
	edx = edx - 0x00000001
	SCZO = cond(edx)
	esi = esi + 0x00000008
	SCZO = cond(esi)
	ebx = ebx + eax
	SCZO = cond(ebx)
	eax = 0x00000001
	eax = eax << cl
	SCZO = cond(eax)
	ecx = Mem0[edi + 0x0000004C:word32]
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	Mem0[esp + 0x00000010:word32] = edx
	eax = eax - 0x00000001
	SCZO = cond(eax)
	eax = eax & ebx
	SZO = cond(eax)
	C = false
	eax = Mem0[ecx + eax * 0x00000004:word32]
	ecx = eax
	ecx = ecx >>u 0x00000008
	SCZO = cond(ecx)
	ecx = (word32) cl
	SCZO = cond(ecx - esi)
	Mem0[esp + 0x00000014:word32] = eax
	branch Test(UGT,CZ) l00413B98
	// succ:  l00413BDC l00413B98
l00413BDC:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l00413CAD
	// succ:  l00413BE4 l00413CAD
l00413BE4:
	SZO = cond(al & 0xF0)
	C = false
	branch Test(NE,Z) l00413CAD
	// succ:  l00413BEC l00413CAD
l00413BEC:
	ecx = eax
	ecx = ecx >>u 0x00000008
	SCZO = cond(ecx)
	Mem0[esp + 0x00000034:word32] = ecx
	ecx = (word32) cl
	Mem0[esp + 0x00000024:word32] = ecx
	ecx = (word32) al
	ecx = ecx + Mem0[esp + 0x00000024:word32]
	SCZO = cond(ecx)
	Mem0[esp + 0x00000018:word32] = eax
	eax = 0x00000001
	eax = eax << cl
	SCZO = cond(eax)
	ecx = Mem0[esp + 0x00000024:word32]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	eax = eax & ebx
	SZO = cond(eax)
	C = false
	eax = eax >>u cl
	SCZO = cond(eax)
	ecx = Mem0[esp + 0x00000014:word32]
	ecx = ecx >>u 0x00000010
	SCZO = cond(ecx)
	eax = eax + ecx
	SCZO = cond(eax)
	ecx = eax
	eax = Mem0[edi + 0x0000004C:word32]
	eax = Mem0[eax + ecx * 0x00000004:word32]
	ecx = (word32) Mem0[esp + 0x00000034:byte]
	Mem0[esp + 0x00000014:word32] = eax
	eax = eax >>u 0x00000008
	SCZO = cond(eax)
	eax = (word32) al
	eax = eax + ecx
	SCZO = cond(eax)
	SCZO = cond(eax - esi)
	branch Test(ULE,CZ) l00413CA0
	// succ:  l00413C43 l00413CA0
l00413C43:
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l004141AC
	// succ:  l00413C4B l004141AC
l00413C4B:
	eax = (word32) Mem0[ebp + 0x00000000:byte]
	ecx = esi
	eax = eax << cl
	SCZO = cond(eax)
	ecx = Mem0[esp + 0x00000018:word32]
	edx = edx - 0x00000001
	SCZO = cond(edx)
	esi = esi + 0x00000008
	SCZO = cond(esi)
	ebx = ebx + eax
	SCZO = cond(ebx)
	eax = (word32) ch
	ecx = ecx + eax
	SCZO = cond(ecx)
	Mem0[esp + 0x00000024:word32] = eax
	eax = 0x00000001
	eax = eax << cl
	SCZO = cond(eax)
	ecx = Mem0[esp + 0x00000024:word32]
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	Mem0[esp + 0x00000010:word32] = edx
	eax = eax - 0x00000001
	SCZO = cond(eax)
	eax = eax & ebx
	SZO = cond(eax)
	C = false
	eax = eax >>u cl
	SCZO = cond(eax)
	ecx = (word32) Mem0[esp + 0x0000001A:word16]
	eax = eax + ecx
	SCZO = cond(eax)
	ecx = Mem0[edi + 0x0000004C:word32]
	eax = Mem0[ecx + eax * 0x00000004:word32]
	Mem0[esp + 0x00000014:word32] = eax
	eax = eax >>u 0x00000008
	SCZO = cond(eax)
	eax = (word32) al
	eax = eax + Mem0[esp + 0x00000024:word32]
	SCZO = cond(eax)
	SCZO = cond(eax - esi)
	branch Test(UGT,CZ) l00413C43
	// succ:  l00413CA0 l00413C43
l00413CA0:
	ecx = (word32) Mem0[esp + 0x00000019:byte]
	eax = Mem0[esp + 0x00000014:word32]
	ebx = ebx >>u cl
	SCZO = cond(ebx)
	esi = esi - ecx
	SCZO = cond(esi)
	// succ:  l00413CAD
l00413CAD:
	ecx = eax
	ecx = ecx >>u 0x00000008
	SCZO = cond(ecx)
	ecx = (word32) cl
	ebx = ebx >>u cl
	SCZO = cond(ebx)
	esi = esi - ecx
	SCZO = cond(esi)
	Mem0[esp + 0x00000024:word32] = ecx
	ecx = eax
	ecx = ecx >>u 0x00000010
	SCZO = cond(ecx)
	SZO = cond(al & al)
	C = false
	Mem0[esp + 0x00000018:word32] = ebx
	Mem0[edi + 0x00000040:word32] = ecx
	branch Test(NE,Z) l00413CD8
	// succ:  l00413CCD l00413CD8
l00413CCD:
	Mem0[edi:word32] = 0x00000017
	goto l0041414E
	// succ:  l0041414E
l00413CD8:
	SZO = cond(al & 0x20)
	C = false
	branch Test(EQ,Z) l00413CE7
	// succ:  l00413CDC l00413CE7
l00413CDC:
	Mem0[edi:word32] = 0x0000000B
	goto l0041414E
	// succ:  l0041414E
l00413CE7:
	SZO = cond(al & 0x40)
	C = false
	branch Test(EQ,Z) l00413CFB
	// succ:  l00413CEB l00413CFB
l00413CEB:
	eax = Mem0[esp + 0x00000040:word32]
	Mem0[eax + 0x00000018:word32] = 0x00418480
	goto l00414148
	// succ:  l00414148
l00413CFB:
	eax = eax & 0x0000000F
	SZO = cond(eax)
	C = false
	Mem0[edi + 0x00000048:word32] = eax
	Mem0[edi:word32] = 0x00000013
	// succ:  l00413D07
l00413D07:
	eax = Mem0[edi + 0x00000048:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00413D4C
	// succ:  l00413D0E l00413D4C
l00413D0E:
	SCZO = cond(esi - eax)
	branch Test(UGE,C) l00413D36
	// succ:  l00413D12 l00413D36
l00413D12:
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l004141AC
	// succ:  l00413D1A l004141AC
l00413D1A:
	eax = (word32) Mem0[ebp + 0x00000000:byte]
	ecx = esi
	eax = eax << cl
	SCZO = cond(eax)
	edx = edx - 0x00000001
	SCZO = cond(edx)
	esi = esi + 0x00000008
	SCZO = cond(esi)
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	ebx = ebx + eax
	SCZO = cond(ebx)
	SCZO = cond(esi - Mem0[edi + 0x00000048:word32])
	Mem0[esp + 0x00000010:word32] = edx
	branch Test(ULT,C) l00413D12
	// succ:  l00413D36 l00413D12
l00413D36:
	ecx = Mem0[edi + 0x00000048:word32]
	eax = 0x00000001
	eax = eax << cl
	SCZO = cond(eax)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	eax = eax & ebx
	SZO = cond(eax)
	C = false
	v30 = Mem0[edi + 0x00000040:word32] + eax
	Mem0[edi + 0x00000040:word32] = v30
	SCZO = cond(v30)
	ebx = ebx >>u cl
	SCZO = cond(ebx)
	esi = esi - ecx
	SCZO = cond(esi)
	// succ:  l00413D4C
l00413D4C:
	Mem0[edi:word32] = 0x00000014
	// succ:  l00413D52
l00413D52:
	ecx = Mem0[edi + 0x00000058:word32]
	eax = 0x00000001
	eax = eax << cl
	SCZO = cond(eax)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	eax = eax & ebx
	SZO = cond(eax)
	C = false
	ecx = eax
	eax = Mem0[edi + 0x00000050:word32]
	eax = Mem0[eax + ecx * 0x00000004:word32]
	ecx = eax
	ecx = ecx >>u 0x00000008
	SCZO = cond(ecx)
	ecx = (word32) cl
	SCZO = cond(ecx - esi)
	Mem0[esp + 0x00000014:word32] = eax
	branch Test(ULE,CZ) l00413DC4
	// succ:  l00413D79 l00413DC4
l00413D79:
	esp = esp + 0x00000000
	// succ:  l00413D80
l00413D80:
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l004141AC
	// succ:  l00413D88 l004141AC
l00413D88:
	eax = (word32) Mem0[ebp + 0x00000000:byte]
	ecx = esi
	eax = eax << cl
	SCZO = cond(eax)
	ecx = Mem0[edi + 0x00000058:word32]
	edx = edx - 0x00000001
	SCZO = cond(edx)
	esi = esi + 0x00000008
	SCZO = cond(esi)
	ebx = ebx + eax
	SCZO = cond(ebx)
	eax = 0x00000001
	eax = eax << cl
	SCZO = cond(eax)
	ecx = Mem0[edi + 0x00000050:word32]
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	Mem0[esp + 0x00000010:word32] = edx
	eax = eax - 0x00000001
	SCZO = cond(eax)
	eax = eax & ebx
	SZO = cond(eax)
	C = false
	eax = Mem0[ecx + eax * 0x00000004:word32]
	ecx = eax
	ecx = ecx >>u 0x00000008
	SCZO = cond(ecx)
	ecx = (word32) cl
	SCZO = cond(ecx - esi)
	Mem0[esp + 0x00000014:word32] = eax
	branch Test(UGT,CZ) l00413D80
	// succ:  l00413DC4 l00413D80
l00413DC4:
	SZO = cond(al & 0xF0)
	C = false
	branch Test(NE,Z) l00413E8D
	// succ:  l00413DCC l00413E8D
l00413DCC:
	ecx = eax
	ecx = ecx >>u 0x00000008
	SCZO = cond(ecx)
	Mem0[esp + 0x00000034:word32] = ecx
	ecx = (word32) cl
	Mem0[esp + 0x00000024:word32] = ecx
	ecx = (word32) al
	ecx = ecx + Mem0[esp + 0x00000024:word32]
	SCZO = cond(ecx)
	Mem0[esp + 0x00000018:word32] = eax
	eax = 0x00000001
	eax = eax << cl
	SCZO = cond(eax)
	ecx = Mem0[esp + 0x00000024:word32]
	eax = eax - 0x00000001
	SCZO = cond(eax)
	eax = eax & ebx
	SZO = cond(eax)
	C = false
	eax = eax >>u cl
	SCZO = cond(eax)
	ecx = Mem0[esp + 0x00000014:word32]
	ecx = ecx >>u 0x00000010
	SCZO = cond(ecx)
	eax = eax + ecx
	SCZO = cond(eax)
	ecx = eax
	eax = Mem0[edi + 0x00000050:word32]
	eax = Mem0[eax + ecx * 0x00000004:word32]
	ecx = (word32) Mem0[esp + 0x00000034:byte]
	Mem0[esp + 0x00000014:word32] = eax
	eax = eax >>u 0x00000008
	SCZO = cond(eax)
	eax = (word32) al
	eax = eax + ecx
	SCZO = cond(eax)
	SCZO = cond(eax - esi)
	branch Test(ULE,CZ) l00413E80
	// succ:  l00413E23 l00413E80
l00413E23:
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l004141AC
	// succ:  l00413E2B l004141AC
l00413E2B:
	eax = (word32) Mem0[ebp + 0x00000000:byte]
	ecx = esi
	eax = eax << cl
	SCZO = cond(eax)
	ecx = Mem0[esp + 0x00000018:word32]
	edx = edx - 0x00000001
	SCZO = cond(edx)
	esi = esi + 0x00000008
	SCZO = cond(esi)
	ebx = ebx + eax
	SCZO = cond(ebx)
	eax = (word32) ch
	ecx = ecx + eax
	SCZO = cond(ecx)
	Mem0[esp + 0x00000024:word32] = eax
	eax = 0x00000001
	eax = eax << cl
	SCZO = cond(eax)
	ecx = Mem0[esp + 0x00000024:word32]
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	Mem0[esp + 0x00000010:word32] = edx
	eax = eax - 0x00000001
	SCZO = cond(eax)
	eax = eax & ebx
	SZO = cond(eax)
	C = false
	eax = eax >>u cl
	SCZO = cond(eax)
	ecx = (word32) Mem0[esp + 0x0000001A:word16]
	eax = eax + ecx
	SCZO = cond(eax)
	ecx = Mem0[edi + 0x00000050:word32]
	eax = Mem0[ecx + eax * 0x00000004:word32]
	Mem0[esp + 0x00000014:word32] = eax
	eax = eax >>u 0x00000008
	SCZO = cond(eax)
	eax = (word32) al
	eax = eax + Mem0[esp + 0x00000024:word32]
	SCZO = cond(eax)
	SCZO = cond(eax - esi)
	branch Test(UGT,CZ) l00413E23
	// succ:  l00413E80 l00413E23
l00413E80:
	ecx = (word32) Mem0[esp + 0x00000019:byte]
	eax = Mem0[esp + 0x00000014:word32]
	ebx = ebx >>u cl
	SCZO = cond(ebx)
	esi = esi - ecx
	SCZO = cond(esi)
	// succ:  l00413E8D
l00413E8D:
	ecx = eax
	ecx = ecx >>u 0x00000008
	SCZO = cond(ecx)
	ecx = (word32) cl
	ebx = ebx >>u cl
	SCZO = cond(ebx)
	esi = esi - ecx
	SCZO = cond(esi)
	SZO = cond(al & 0x40)
	C = false
	Mem0[esp + 0x00000024:word32] = ecx
	Mem0[esp + 0x00000018:word32] = ebx
	branch Test(EQ,Z) l00413EB5
	// succ:  l00413EA5 l00413EB5
l00413EA5:
	eax = Mem0[esp + 0x00000040:word32]
	Mem0[eax + 0x00000018:word32] = 0x00418468
	goto l00414148
	// succ:  l00414148
l00413EB5:
	ecx = eax
	ecx = ecx >>u 0x00000010
	SCZO = cond(ecx)
	eax = eax & 0x0000000F
	SZO = cond(eax)
	C = false
	Mem0[edi + 0x00000044:word32] = ecx
	Mem0[edi + 0x00000048:word32] = eax
	Mem0[edi:word32] = 0x00000015
	// succ:  l00413EC9
l00413EC9:
	eax = Mem0[edi + 0x00000048:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00413F12
	// succ:  l00413ED0 l00413F12
l00413ED0:
	SCZO = cond(esi - eax)
	branch Test(UGE,C) l00413EF8
	// succ:  l00413ED4 l00413EF8
l00413ED4:
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l004141AC
	// succ:  l00413EDC l004141AC
l00413EDC:
	eax = (word32) Mem0[ebp + 0x00000000:byte]
	ecx = esi
	eax = eax << cl
	SCZO = cond(eax)
	edx = edx - 0x00000001
	SCZO = cond(edx)
	esi = esi + 0x00000008
	SCZO = cond(esi)
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	ebx = ebx + eax
	SCZO = cond(ebx)
	SCZO = cond(esi - Mem0[edi + 0x00000048:word32])
	Mem0[esp + 0x00000010:word32] = edx
	branch Test(ULT,C) l00413ED4
	// succ:  l00413EF8 l00413ED4
l00413EF8:
	ecx = Mem0[edi + 0x00000048:word32]
	eax = 0x00000001
	eax = eax << cl
	SCZO = cond(eax)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	eax = eax & ebx
	SZO = cond(eax)
	C = false
	v28 = Mem0[edi + 0x00000044:word32] + eax
	Mem0[edi + 0x00000044:word32] = v28
	SCZO = cond(v28)
	ebx = ebx >>u cl
	SCZO = cond(ebx)
	esi = esi - ecx
	SCZO = cond(esi)
	Mem0[esp + 0x00000018:word32] = ebx
	// succ:  l00413F12
l00413F12:
	ecx = Mem0[edi + 0x0000002C:word32]
	ecx = ecx - Mem0[esp + 0x0000001C:word32]
	SCZO = cond(ecx)
	ecx = ecx + Mem0[esp + 0x0000002C:word32]
	SCZO = cond(ecx)
	SCZO = cond(Mem0[edi + 0x00000044:word32] - ecx)
	branch Test(ULE,CZ) l00413F32
	// succ:  l00413F22 l00413F32
l00413F22:
	eax = Mem0[esp + 0x00000040:word32]
	Mem0[eax + 0x00000018:word32] = 0x00418448
	goto l00414148
	// succ:  l00414148
l00413F32:
	Mem0[edi:word32] = 0x00000016
	// succ:  l00413F38
l00413F38:
	SCZO = cond(Mem0[esp + 0x0000001C:word32] - 0x00000000)
	branch Test(EQ,Z) l004141AC
	// succ:  l00413F43 l004141AC
l00413F43:
	ecx = Mem0[esp + 0x0000002C:word32]
	ecx = ecx - Mem0[esp + 0x0000001C:word32]
	SCZO = cond(ecx)
	eax = Mem0[edi + 0x00000044:word32]
	SCZO = cond(eax - ecx)
	branch Test(ULE,CZ) l00413F8E
	// succ:  l00413F52 l00413F8E
l00413F52:
	eax = eax - ecx
	SCZO = cond(eax)
	ecx = Mem0[edi + 0x00000030:word32]
	SCZO = cond(eax - ecx)
	Mem0[esp + 0x00000014:word32] = eax
	branch Test(ULE,CZ) l00413F6F
	// succ:  l00413F5F l00413F6F
l00413F5F:
	eax = eax - ecx
	SCZO = cond(eax)
	ecx = Mem0[edi + 0x00000034:word32]
	ecx = ecx + Mem0[edi + 0x00000028:word32]
	SCZO = cond(ecx)
	Mem0[esp + 0x00000014:word32] = eax
	ecx = ecx - eax
	SCZO = cond(ecx)
	goto l00413F7B
	// succ:  l00413F7B
l00413F6F:
	ecx = Mem0[edi + 0x00000034:word32]
	ecx = ecx - eax
	SCZO = cond(ecx)
	ecx = ecx + Mem0[edi + 0x00000030:word32]
	SCZO = cond(ecx)
	eax = Mem0[esp + 0x00000014:word32]
	// succ:  l00413F7B
l00413F7B:
	Mem0[esp + 0x00000024:word32] = ecx
	ecx = Mem0[edi + 0x00000040:word32]
	SCZO = cond(eax - ecx)
	Mem0[esp + 0x00000034:word32] = ecx
	branch Test(ULE,CZ) l00413FA3
	// succ:  l00413F8A l00413FA3
l00413F8A:
	eax = ecx
	goto l00413F9F
	// succ:  l00413F9F
l00413F8E:
	ecx = Mem0[esp + 0x00000028:word32]
	ecx = ecx - eax
	SCZO = cond(ecx)
	eax = Mem0[edi + 0x00000040:word32]
	Mem0[esp + 0x00000024:word32] = ecx
	Mem0[esp + 0x00000034:word32] = eax
	// succ:  l00413F9F
l00413F9F:
	Mem0[esp + 0x00000014:word32] = eax
	// succ:  l00413FA3
l00413FA3:
	ecx = Mem0[esp + 0x0000001C:word32]
	SCZO = cond(eax - ecx)
	branch Test(ULE,CZ) l00413FB1
	// succ:  l00413FAB l00413FB1
l00413FAB:
	eax = ecx
	Mem0[esp + 0x00000014:word32] = eax
	// succ:  l00413FB1
l00413FB1:
	ecx = ecx - eax
	SCZO = cond(ecx)
	Mem0[esp + 0x0000001C:word32] = ecx
	ecx = Mem0[esp + 0x00000034:word32]
	ecx = ecx - eax
	SCZO = cond(ecx)
	eax = Mem0[esp + 0x00000028:word32]
	Mem0[edi + 0x00000040:word32] = ecx
	// succ:  l00413FC4
l00413FC4:
	ecx = Mem0[esp + 0x00000024:word32]
	cl = Mem0[ecx:byte]
	v23 = Mem0[esp + 0x00000024:word32] + 0x00000001
	Mem0[esp + 0x00000024:word32] = v23
	SCZO = cond(v23)
	Mem0[eax:byte] = cl
	eax = eax + 0x00000001
	SCZO = cond(eax)
	v24 = Mem0[esp + 0x00000014:word32] - 0x00000001
	Mem0[esp + 0x00000014:word32] = v24
	SCZO = cond(v24)
	branch Test(NE,Z) l00413FC4
	// succ:  l00413FDB l00413FC4
l00413FDB:
	SCZO = cond(Mem0[edi + 0x00000040:word32] - 0x00000000)
	Mem0[esp + 0x00000028:word32] = eax
	branch Test(NE,Z) l0041414E
	// succ:  l00413FE9 l0041414E
l00413FE9:
	Mem0[edi:word32] = 0x00000012
	goto l0041414E
	// succ:  l0041414E
l00413FF4:
	SCZO = cond(Mem0[esp + 0x0000001C:word32] - 0x00000000)
	branch Test(EQ,Z) l004141AC
	// succ:  l00413FFF l004141AC
l00413FFF:
	eax = Mem0[esp + 0x00000028:word32]
	cl = Mem0[edi + 0x00000040:byte]
	Mem0[eax:byte] = cl
	eax = eax + 0x00000001
	SCZO = cond(eax)
	v21 = Mem0[esp + 0x0000001C:word32] - 0x00000001
	Mem0[esp + 0x0000001C:word32] = v21
	SCZO = cond(v21)
	Mem0[esp + 0x00000028:word32] = eax
	Mem0[edi:word32] = 0x00000012
	goto l0041414E
	// succ:  l0041414E
l0041401F:
	SCZO = cond(Mem0[edi + 0x00000008:word32] - 0x00000000)
	branch Test(EQ,Z) l004140EC
	// succ:  l00414029 l004140EC
l00414029:
	SCZO = cond(esi - 0x00000020)
	branch Test(UGE,C) l00414058
	// succ:  l0041402E l00414058
l0041402E:
	edi = edi
	// succ:  l00414030
l00414030:
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l004141AC
	// succ:  l00414038 l004141AC
l00414038:
	eax = (word32) Mem0[ebp + 0x00000000:byte]
	ecx = esi
	eax = eax << cl
	SCZO = cond(eax)
	edx = edx - 0x00000001
	SCZO = cond(edx)
	esi = esi + 0x00000008
	SCZO = cond(esi)
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	ebx = ebx + eax
	SCZO = cond(ebx)
	SCZO = cond(esi - 0x00000020)
	Mem0[esp + 0x00000010:word32] = edx
	Mem0[esp + 0x00000018:word32] = ebx
	branch Test(ULT,C) l00414030
	// succ:  l00414058 l00414030
l00414058:
	eax = Mem0[esp + 0x0000002C:word32]
	eax = eax - Mem0[esp + 0x0000001C:word32]
	SCZO = cond(eax)
	ecx = Mem0[esp + 0x00000040:word32]
	v19 = Mem0[ecx + 0x00000014:word32] + eax
	Mem0[ecx + 0x00000014:word32] = v19
	SCZO = cond(v19)
	v20 = Mem0[edi + 0x0000001C:word32] + eax
	Mem0[edi + 0x0000001C:word32] = v20
	SCZO = cond(v20)
	SZO = cond(eax & eax)
	C = false
	Mem0[esp + 0x0000002C:word32] = eax
	branch Test(EQ,Z) l004140A1
	// succ:  l00414072 l004140A1
l00414072:
	ecx = Mem0[esp + 0x00000028:word32]
	edx = Mem0[edi + 0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	ecx = ecx - eax
	SCZO = cond(ecx)
	SCZO = cond(Mem0[edi + 0x00000010:word32] - 0x00000000)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	branch Test(EQ,Z) l0041408B
	// succ:  l00414084 l0041408B
l00414084:
	call fn00414630 (retsize: 4;)
	goto l00414090
	// succ:  l00414090
l0041408B:
	call fn00415030 (retsize: 4;)
	// succ:  l00414090
l00414090:
	ecx = Mem0[esp + 0x0000004C:word32]
	edx = Mem0[esp + 0x0000001C:word32]
	Mem0[edi + 0x00000018:word32] = eax
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	Mem0[ecx + 0x00000030:word32] = eax
	// succ:  l004140A1
l004140A1:
	SCZO = cond(Mem0[edi + 0x00000010:word32] - 0x00000000)
	eax = Mem0[esp + 0x0000001C:word32]
	Mem0[esp + 0x0000002C:word32] = eax
	eax = ebx
	branch Test(NE,Z) l004140CF
	// succ:  l004140B1 l004140CF
l004140B1:
	eax = eax & 0x0000FF00
	SZO = cond(eax)
	C = false
	ecx = ebx
	ecx = ecx << 0x00000010
	SCZO = cond(ecx)
	eax = eax + ecx
	SCZO = cond(eax)
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	ch = Mem0[esp + 0x0000001A:byte]
	eax = eax << 0x00000008
	SCZO = cond(eax)
	eax = eax + ecx
	SCZO = cond(eax)
	ecx = ebx
	ecx = ecx >>u 0x00000018
	SCZO = cond(ecx)
	eax = eax + ecx
	SCZO = cond(eax)
	// succ:  l004140CF
l004140CF:
	SCZO = cond(eax - Mem0[edi + 0x00000018:word32])
	branch Test(EQ,Z) l004140E4
	// succ:  l004140D4 l004140E4
l004140D4:
	eax = Mem0[esp + 0x00000040:word32]
	Mem0[eax + 0x00000018:word32] = 0x00418430
	goto l00414148
	// succ:  l00414148
l004140E4:
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	Mem0[esp + 0x00000018:word32] = ebx
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	// succ:  l004140EC
l004140EC:
	Mem0[edi:word32] = 0x00000019
	// succ:  l004140F2
l004140F2:
	SCZO = cond(Mem0[edi + 0x00000008:word32] - 0x00000000)
	branch Test(EQ,Z) l00414194
	// succ:  l004140FC l00414194
l004140FC:
	SCZO = cond(Mem0[edi + 0x00000010:word32] - 0x00000000)
	branch Test(EQ,Z) l00414194
	// succ:  l00414106 l00414194
l00414106:
	SCZO = cond(esi - 0x00000020)
	branch Test(UGE,C) l00414138
	// succ:  l0041410B l00414138
l0041410B:
	// succ:  l00414110
l00414110:
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l004141AC
	// succ:  l00414118 l004141AC
l00414118:
	eax = (word32) Mem0[ebp + 0x00000000:byte]
	ecx = esi
	eax = eax << cl
	SCZO = cond(eax)
	edx = edx - 0x00000001
	SCZO = cond(edx)
	esi = esi + 0x00000008
	SCZO = cond(esi)
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	ebx = ebx + eax
	SCZO = cond(ebx)
	SCZO = cond(esi - 0x00000020)
	Mem0[esp + 0x00000010:word32] = edx
	Mem0[esp + 0x00000018:word32] = ebx
	branch Test(ULT,C) l00414110
	// succ:  l00414138 l00414110
l00414138:
	SCZO = cond(ebx - Mem0[edi + 0x0000001C:word32])
	branch Test(EQ,Z) l00414190
	// succ:  l0041413D l00414190
l0041413D:
	ecx = Mem0[esp + 0x00000040:word32]
	Mem0[ecx + 0x00000018:word32] = 0x00418418
	// succ:  l00414148
l00414148:
	Mem0[edi:word32] = 0x0000001B
	// succ:  l0041414E
l0041414E:
	eax = Mem0[edi:word32]
	SCZO = cond(eax - 0x0000001C)
	branch Test(ULE,CZ) l00412DD0
	// succ:  l00414159 l00412DD0
l00414159:
	eax = 0xFFFFFFFE
	eax = 0xFFFFFFFE
	// succ:  l0041415E
l0041415E:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x0000002C
	SCZO = cond(esp)
	return
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x0000002C
	SCZO = cond(esp)
	return
	// succ:  fn00412D50_exit fn00412D50_exit
l00414166:
	eax = Mem0[esp + 0x00000040:word32]
	ecx = Mem0[esp + 0x00000028:word32]
	Mem0[eax + 0x0000000C:word32] = ecx
	ecx = Mem0[esp + 0x0000001C:word32]
	Mem0[eax:word32] = ebp
	Mem0[eax + 0x00000010:word32] = ecx
	Mem0[eax + 0x00000004:word32] = edx
	Mem0[edi + 0x0000003C:word32] = esi
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[edi + 0x00000038:word32] = ebx
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = 0x00000002
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x0000002C
	SCZO = cond(esp)
	return
	// succ:  fn00412D50_exit
l00414190:
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	// succ:  l00414194
l00414194:
	Mem0[edi:word32] = 0x0000001A
	// succ:  l0041419A
l0041419A:
	Mem0[esp + 0x00000030:word32] = 0x00000001
	goto l004141AC
	// succ:  l004141AC
l004141A4:
	Mem0[esp + 0x00000030:word32] = 0xFFFFFFFD
	// succ:  l004141AC
l004141AC:
	eax = Mem0[esp + 0x00000040:word32]
	ecx = Mem0[esp + 0x00000028:word32]
	Mem0[eax + 0x0000000C:word32] = ecx
	ecx = Mem0[esp + 0x0000001C:word32]
	Mem0[eax + 0x00000010:word32] = ecx
	Mem0[eax:word32] = ebp
	Mem0[eax + 0x00000004:word32] = edx
	SCZO = cond(Mem0[edi + 0x00000028:word32] - 0x00000000)
	Mem0[edi + 0x00000038:word32] = ebx
	Mem0[edi + 0x0000003C:word32] = esi
	branch Test(NE,Z) l004141DD
	// succ:  l004141CF l004141DD
l004141CF:
	SCZO = cond(Mem0[edi:word32] - 0x00000018)
	branch Test(GE,SO) l00414201
	// succ:  l004141D4 l00414201
l004141D4:
	edx = Mem0[esp + 0x0000002C:word32]
	SCZO = cond(edx - Mem0[eax + 0x00000010:word32])
	branch Test(EQ,Z) l00414201
	// succ:  l004141DD l00414201
l004141DD:
	eax = Mem0[esp + 0x0000002C:word32]
	ebx = Mem0[esp + 0x00000040:word32]
	call fn00412C60 (retsize: 4;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00414201
	// succ:  l004141EE l00414201
l004141EE:
	Mem0[edi:word32] = 0x0000001C
	// succ:  l004141F4
l004141F4:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = 0xFFFFFFFC
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x0000002C
	SCZO = cond(esp)
	return
	// succ:  fn00412D50_exit
l00414201:
	esi = Mem0[esp + 0x00000040:word32]
	ebp = Mem0[esp + 0x00000038:word32]
	ebp = ebp - Mem0[esi + 0x00000004:word32]
	SCZO = cond(ebp)
	ebx = Mem0[esp + 0x0000002C:word32]
	ebx = ebx - Mem0[esi + 0x00000010:word32]
	SCZO = cond(ebx)
	v25 = Mem0[esi + 0x00000008:word32] + ebp
	Mem0[esi + 0x00000008:word32] = v25
	SCZO = cond(v25)
	v26 = Mem0[esi + 0x00000014:word32] + ebx
	Mem0[esi + 0x00000014:word32] = v26
	SCZO = cond(v26)
	v27 = Mem0[edi + 0x0000001C:word32] + ebx
	Mem0[edi + 0x0000001C:word32] = v27
	SCZO = cond(v27)
	SCZO = cond(Mem0[edi + 0x00000008:word32] - 0x00000000)
	branch Test(EQ,Z) l00414256
	// succ:  l00414222 l00414256
l00414222:
	SZO = cond(ebx & ebx)
	C = false
	branch Test(EQ,Z) l00414256
	// succ:  l00414226 l00414256
l00414226:
	SCZO = cond(Mem0[edi + 0x00000010:word32] - 0x00000000)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	branch Test(EQ,Z) l0041423E
	// succ:  l0041422D l0041423E
l0041422D:
	ecx = Mem0[esi + 0x0000000C:word32]
	edx = Mem0[edi + 0x00000018:word32]
	ecx = ecx - ebx
	SCZO = cond(ecx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call fn00414630 (retsize: 4;)
	goto l0041424D
	// succ:  l0041424D
l0041423E:
	eax = Mem0[esi + 0x0000000C:word32]
	ecx = Mem0[edi + 0x00000018:word32]
	eax = eax - ebx
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	call fn00415030 (retsize: 4;)
	// succ:  l0041424D
l0041424D:
	Mem0[edi + 0x00000018:word32] = eax
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	Mem0[esi + 0x00000030:word32] = eax
	// succ:  l00414256
l00414256:
	edx = Mem0[edi + 0x00000004:word32]
	edx = -edx
	SCZO = cond(edx)
	C = edx == 0x00000000
	edx = edx - edx - C
	SCZO = cond(edx)
	edx = edx & 0x00000040
	SZO = cond(edx)
	C = false
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[edi:word32] - 0x0000000B)
	al = Test(NE,Z)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	eax = eax & 0x00000080
	SZO = cond(eax)
	C = false
	edx = edx + eax
	SCZO = cond(edx)
	edx = edx + Mem0[edi + 0x0000003C:word32]
	SCZO = cond(edx)
	SZO = cond(ebp & ebp)
	C = false
	Mem0[esi + 0x0000002C:word32] = edx
	branch Test(NE,Z) l00414280
	// succ:  l0041427C l00414280
l0041427C:
	SZO = cond(ebx & ebx)
	C = false
	branch Test(EQ,Z) l00414287
	// succ:  l00414280 l00414287
l00414280:
	SCZO = cond(Mem0[esp + 0x00000044:word32] - 0x00000004)
	branch Test(NE,Z) l004142A0
	// succ:  l00414287 l004142A0
l00414287:
	eax = Mem0[esp + 0x00000030:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0041415E
	// succ:  l00414293 l0041415E
l00414293:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = 0xFFFFFFFB
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x0000002C
	SCZO = cond(esp)
	return
	// succ:  fn00412D50_exit
l004142A0:
	eax = Mem0[esp + 0x00000030:word32]
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x0000002C
	SCZO = cond(esp)
	return
	// succ:  fn00412D50_exit
l004142AC:
	eax = 0xFFFFFFFE
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x0000002C
	SCZO = cond(esp)
	return
	// succ:  fn00412D50_exit
fn00412D50_exit:


// fn00414340
// Return size: 4
void fn00414340()
fn00414340_entry:
	// succ:  l00414340
l00414340:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000008:word32]
	SZO = cond(esi & esi)
	C = false
	branch Test(EQ,Z) l00414383
	// succ:  l00414349 l00414383
l00414349:
	eax = Mem0[esi + 0x0000001C:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00414383
	// succ:  l00414350 l00414383
l00414350:
	ecx = Mem0[esi + 0x00000024:word32]
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l00414383
	// succ:  l00414357 l00414383
l00414357:
	eax = Mem0[eax + 0x00000034:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00414368
	// succ:  l0041435E l00414368
l0041435E:
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = Mem0[esi + 0x00000028:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call ecx (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	// succ:  l00414368
l00414368:
	ecx = Mem0[esi + 0x0000001C:word32]
	edx = Mem0[esi + 0x00000028:word32]
	eax = Mem0[esi + 0x00000024:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call eax (retsize: 4;)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	Mem0[esi + 0x0000001C:word32] = 0x00000000
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00414340_exit
l00414383:
	eax = 0xFFFFFFFE
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00414340_exit
fn00414340_exit:


// fn00414630
// Return size: 4
void fn00414630()
fn00414630_entry:
	goto l00414630
	// succ:  l00414630
l00414390:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = edx
	SZO = cond(esi & esi)
	C = false
	eax = ~eax
	branch Test(EQ,Z) l004143C2
	// succ:  l00414399 l004143C2
l00414399:
	esp = esp + 0x00000000
	// succ:  l004143A0
l004143A0:
	SZO = cond(cl & 0x03)
	C = false
	branch Test(EQ,Z) l004143C2
	// succ:  l004143A5 l004143C2
l004143A5:
	edx = (word32) Mem0[ecx:byte]
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	edx = edx & 0x000000FF
	SZO = cond(edx)
	C = false
	eax = eax >>u 0x00000008
	SCZO = cond(eax)
	eax = eax ^ Mem0[0x004185D8 + edx * 0x00000004:word32]
	SZO = cond(eax)
	C = false
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	esi = esi - 0x00000001
	SCZO = cond(esi)
	branch Test(NE,Z) l004143A0
	// succ:  l004143C2 l004143A0
l004143C2:
	SCZO = cond(esi - 0x00000020)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	branch Test(ULT,C) l004145AC
	// succ:  l004143CD l004145AC
l004143CD:
	edi = esi
	edi = edi >>u 0x00000005
	SCZO = cond(edi)
	// succ:  l004143D2
l004143D2:
	eax = eax ^ Mem0[ecx:word32]
	SZO = cond(eax)
	C = false
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = eax
	edx = edx >>u 0x00000010
	SCZO = cond(edx)
	ebx = (word32) ah
	edx = edx & 0x000000FF
	SZO = cond(edx)
	C = false
	edx = Mem0[0x004189D8 + edx * 0x00000004:word32]
	edx = edx ^ Mem0[0x00418DD8 + ebx * 0x00000004:word32]
	SZO = cond(edx)
	C = false
	ebx = eax
	eax = eax & 0x000000FF
	SZO = cond(eax)
	C = false
	ebx = ebx >>u 0x00000018
	SCZO = cond(ebx)
	edx = edx ^ Mem0[0x004185D8 + ebx * 0x00000004:word32]
	SZO = cond(edx)
	C = false
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx ^ Mem0[0x004191D8 + eax * 0x00000004:word32]
	SZO = cond(edx)
	C = false
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx ^ Mem0[ecx - 0x00000008:word32]
	SZO = cond(edx)
	C = false
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	eax = edx
	eax = eax >>u 0x00000010
	SCZO = cond(eax)
	eax = eax & 0x000000FF
	SZO = cond(eax)
	C = false
	eax = Mem0[0x004189D8 + eax * 0x00000004:word32]
	ebx = (word32) dh
	eax = eax ^ Mem0[0x00418DD8 + ebx * 0x00000004:word32]
	SZO = cond(eax)
	C = false
	ebx = edx
	edx = edx & 0x000000FF
	SZO = cond(edx)
	C = false
	ebx = ebx >>u 0x00000018
	SCZO = cond(ebx)
	eax = eax ^ Mem0[0x004185D8 + ebx * 0x00000004:word32]
	SZO = cond(eax)
	C = false
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	eax = eax ^ Mem0[0x004191D8 + edx * 0x00000004:word32]
	SZO = cond(eax)
	C = false
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	eax = eax ^ Mem0[ecx - 0x00000010:word32]
	SZO = cond(eax)
	C = false
	edx = eax
	edx = edx >>u 0x00000010
	SCZO = cond(edx)
	ebx = (word32) ah
	edx = edx & 0x000000FF
	SZO = cond(edx)
	C = false
	edx = Mem0[0x004189D8 + edx * 0x00000004:word32]
	edx = edx ^ Mem0[0x00418DD8 + ebx * 0x00000004:word32]
	SZO = cond(edx)
	C = false
	ebx = eax
	eax = eax & 0x000000FF
	SZO = cond(eax)
	C = false
	ebx = ebx >>u 0x00000018
	SCZO = cond(ebx)
	edx = edx ^ Mem0[0x004185D8 + ebx * 0x00000004:word32]
	SZO = cond(edx)
	C = false
	edx = edx ^ Mem0[0x004191D8 + eax * 0x00000004:word32]
	SZO = cond(edx)
	C = false
	edx = edx ^ Mem0[ecx - 0x0000000C:word32]
	SZO = cond(edx)
	C = false
	eax = edx
	eax = eax >>u 0x00000010
	SCZO = cond(eax)
	eax = eax & 0x000000FF
	SZO = cond(eax)
	C = false
	eax = Mem0[0x004189D8 + eax * 0x00000004:word32]
	ebx = (word32) dh
	eax = eax ^ Mem0[0x00418DD8 + ebx * 0x00000004:word32]
	SZO = cond(eax)
	C = false
	ebx = edx
	edx = edx & 0x000000FF
	SZO = cond(edx)
	C = false
	ebx = ebx >>u 0x00000018
	SCZO = cond(ebx)
	eax = eax ^ Mem0[0x004185D8 + ebx * 0x00000004:word32]
	SZO = cond(eax)
	C = false
	eax = eax ^ Mem0[0x004191D8 + edx * 0x00000004:word32]
	SZO = cond(eax)
	C = false
	eax = eax ^ Mem0[ecx - 0x00000008:word32]
	SZO = cond(eax)
	C = false
	edx = eax
	edx = edx >>u 0x00000010
	SCZO = cond(edx)
	ebx = (word32) ah
	edx = edx & 0x000000FF
	SZO = cond(edx)
	C = false
	edx = Mem0[0x004189D8 + edx * 0x00000004:word32]
	edx = edx ^ Mem0[0x00418DD8 + ebx * 0x00000004:word32]
	SZO = cond(edx)
	C = false
	ebx = eax
	eax = eax & 0x000000FF
	SZO = cond(eax)
	C = false
	ebx = ebx >>u 0x00000018
	SCZO = cond(ebx)
	edx = edx ^ Mem0[0x004185D8 + ebx * 0x00000004:word32]
	SZO = cond(edx)
	C = false
	edx = edx ^ Mem0[0x004191D8 + eax * 0x00000004:word32]
	SZO = cond(edx)
	C = false
	edx = edx ^ Mem0[ecx - 0x00000004:word32]
	SZO = cond(edx)
	C = false
	eax = edx
	eax = eax >>u 0x00000010
	SCZO = cond(eax)
	eax = eax & 0x000000FF
	SZO = cond(eax)
	C = false
	eax = Mem0[0x004189D8 + eax * 0x00000004:word32]
	ebx = (word32) dh
	eax = eax ^ Mem0[0x00418DD8 + ebx * 0x00000004:word32]
	SZO = cond(eax)
	C = false
	ebx = edx
	ebx = ebx >>u 0x00000018
	SCZO = cond(ebx)
	eax = eax ^ Mem0[0x004185D8 + ebx * 0x00000004:word32]
	SZO = cond(eax)
	C = false
	edx = edx & 0x000000FF
	SZO = cond(edx)
	C = false
	eax = eax ^ Mem0[0x004191D8 + edx * 0x00000004:word32]
	SZO = cond(eax)
	C = false
	eax = eax ^ Mem0[ecx:word32]
	SZO = cond(eax)
	C = false
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = eax
	edx = edx >>u 0x00000010
	SCZO = cond(edx)
	ebx = (word32) ah
	edx = edx & 0x000000FF
	SZO = cond(edx)
	C = false
	edx = Mem0[0x004189D8 + edx * 0x00000004:word32]
	edx = edx ^ Mem0[0x00418DD8 + ebx * 0x00000004:word32]
	SZO = cond(edx)
	C = false
	ebx = eax
	eax = eax & 0x000000FF
	SZO = cond(eax)
	C = false
	ebx = ebx >>u 0x00000018
	SCZO = cond(ebx)
	edx = edx ^ Mem0[0x004185D8 + ebx * 0x00000004:word32]
	SZO = cond(edx)
	C = false
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edx = edx ^ Mem0[0x004191D8 + eax * 0x00000004:word32]
	SZO = cond(edx)
	C = false
	esi = esi - 0x00000020
	SCZO = cond(esi)
	edx = edx ^ Mem0[ecx - 0x00000004:word32]
	SZO = cond(edx)
	C = false
	eax = edx
	eax = eax >>u 0x00000010
	SCZO = cond(eax)
	eax = eax & 0x000000FF
	SZO = cond(eax)
	C = false
	eax = Mem0[0x004189D8 + eax * 0x00000004:word32]
	ebx = (word32) dh
	eax = eax ^ Mem0[0x00418DD8 + ebx * 0x00000004:word32]
	SZO = cond(eax)
	C = false
	ebx = edx
	ebx = ebx >>u 0x00000018
	SCZO = cond(ebx)
	eax = eax ^ Mem0[0x004185D8 + ebx * 0x00000004:word32]
	SZO = cond(eax)
	C = false
	edx = edx & 0x000000FF
	SZO = cond(edx)
	C = false
	eax = eax ^ Mem0[0x004191D8 + edx * 0x00000004:word32]
	SZO = cond(eax)
	C = false
	edi = edi - 0x00000001
	SCZO = cond(edi)
	branch Test(NE,Z) l004143D2
	// succ:  l004145AC l004143D2
l004145AC:
	SCZO = cond(esi - 0x00000004)
	branch Test(ULT,C) l004145F9
	// succ:  l004145B1 l004145F9
l004145B1:
	edx = esi
	edx = edx >>u 0x00000002
	SCZO = cond(edx)
	// succ:  l004145B6
l004145B6:
	eax = eax ^ Mem0[ecx:word32]
	SZO = cond(eax)
	C = false
	ecx = ecx + 0x00000004
	SCZO = cond(ecx)
	edi = eax
	edi = edi >>u 0x00000010
	SCZO = cond(edi)
	edi = edi & 0x000000FF
	SZO = cond(edi)
	C = false
	edi = Mem0[0x004189D8 + edi * 0x00000004:word32]
	ebx = (word32) ah
	edi = edi ^ Mem0[0x00418DD8 + ebx * 0x00000004:word32]
	SZO = cond(edi)
	C = false
	ebx = eax
	ebx = ebx >>u 0x00000018
	SCZO = cond(ebx)
	edi = edi ^ Mem0[0x004185D8 + ebx * 0x00000004:word32]
	SZO = cond(edi)
	C = false
	eax = eax & 0x000000FF
	SZO = cond(eax)
	C = false
	edi = edi ^ Mem0[0x004191D8 + eax * 0x00000004:word32]
	SZO = cond(edi)
	C = false
	esi = esi - 0x00000004
	SCZO = cond(esi)
	edx = edx - 0x00000001
	SCZO = cond(edx)
	eax = edi
	branch Test(NE,Z) l004145B6
	// succ:  l004145F9 l004145B6
l004145F9:
	SZO = cond(esi & esi)
	C = false
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	branch Test(EQ,Z) l0041461D
	// succ:  l004145FF l0041461D
l004145FF:
	// succ:  l00414600
l00414600:
	edx = (word32) Mem0[ecx:byte]
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	edx = edx & 0x000000FF
	SZO = cond(edx)
	C = false
	eax = eax >>u 0x00000008
	SCZO = cond(eax)
	eax = eax ^ Mem0[0x004185D8 + edx * 0x00000004:word32]
	SZO = cond(eax)
	C = false
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	esi = esi - 0x00000001
	SCZO = cond(esi)
	branch Test(NE,Z) l00414600
	// succ:  l0041461D l00414600
l0041461D:
	eax = ~eax
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00414630_exit
l00414630:
	esp = fp
	ecx = Mem0[esp + 0x00000008:word32]
	SZO = cond(ecx & ecx)
	C = false
	branch Test(NE,Z) l0041463B
	// succ:  l00414638 l0041463B
l00414638:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	return
	// succ:  fn00414630_exit
l0041463B:
	edx = Mem0[esp + 0x0000000C:word32]
	eax = Mem0[esp + 0x00000004:word32]
	goto l00414390
	// succ:  l00414390
fn00414630_exit:


// fn00414680
// Return size: 4
void fn00414680()
fn00414680_entry:
	// succ:  l00414680
l00414680:
	esp = fp
	esp = esp - 0x0000003C
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	ecx = Mem0[esp + 0x00000050:word32]
	eax = Mem0[ecx + 0x0000001C:word32]
	edx = Mem0[ecx + 0x00000004:word32]
	ebx = Mem0[eax + 0x00000038:word32]
	ebp = Mem0[ecx:word32]
	ebp = ebp - 0x00000001
	SCZO = cond(ebp)
	edx = edx - 0x00000005 + ebp
	Mem0[esp + 0x00000014:word32] = edx
	esi = Mem0[ecx + 0x0000000C:word32]
	ecx = Mem0[ecx + 0x00000010:word32]
	edx = ecx
	edx = edx - Mem0[esp + 0x00000054:word32]
	SCZO = cond(edx)
	esi = esi - 0x00000001
	SCZO = cond(esi)
	edx = edx + esi
	SCZO = cond(edx)
	ecx = ecx + 0xFFFFFEFF + esi
	Mem0[esp + 0x00000038:word32] = edx
	edx = Mem0[eax + 0x00000028:word32]
	Mem0[esp + 0x0000002C:word32] = ecx
	ecx = Mem0[eax + 0x0000002C:word32]
	Mem0[esp + 0x00000028:word32] = edx
	edx = Mem0[eax + 0x00000030:word32]
	Mem0[esp + 0x0000003C:word32] = ecx
	ecx = Mem0[eax + 0x00000034:word32]
	Mem0[esp + 0x00000044:word32] = edx
	edx = Mem0[eax + 0x0000004C:word32]
	Mem0[esp + 0x00000040:word32] = ecx
	ecx = Mem0[eax + 0x00000050:word32]
	Mem0[esp + 0x00000020:word32] = edx
	Mem0[esp + 0x00000024:word32] = ecx
	ecx = Mem0[eax + 0x00000054:word32]
	edx = 0x00000001
	edx = edx << cl
	SCZO = cond(edx)
	ecx = Mem0[eax + 0x00000058:word32]
	Mem0[esp + 0x00000018:word32] = eax
	edi = Mem0[eax + 0x0000003C:word32]
	Mem0[esp + 0x00000054:word32] = 0x00000001
	eax = Mem0[esp + 0x00000054:word32]
	eax = eax << cl
	SCZO = cond(eax)
	edx = edx - 0x00000001
	SCZO = cond(edx)
	Mem0[esp + 0x00000010:word32] = ebp
	Mem0[esp + 0x00000048:word32] = edx
	eax = eax - 0x00000001
	SCZO = cond(eax)
	Mem0[esp + 0x00000030:word32] = eax
	// succ:  l00414720
l00414720:
	SCZO = cond(edi - 0x0000000F)
	branch Test(UGE,C) l00414749
	// succ:  l00414725 l00414749
l00414725:
	eax = (word32) Mem0[ebp + 0x00000001:byte]
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	ecx = edi
	eax = eax << cl
	SCZO = cond(eax)
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	edi = edi + 0x00000008
	SCZO = cond(edi)
	ecx = edi
	ebx = ebx + eax
	SCZO = cond(ebx)
	eax = (word32) Mem0[ebp + 0x00000000:byte]
	eax = eax << cl
	SCZO = cond(eax)
	Mem0[esp + 0x00000010:word32] = ebp
	ebx = ebx + eax
	SCZO = cond(ebx)
	edi = edi + 0x00000008
	SCZO = cond(edi)
	// succ:  l00414749
l00414749:
	ecx = Mem0[esp + 0x00000020:word32]
	edx = edx & ebx
	SZO = cond(edx)
	C = false
	eax = Mem0[ecx + edx * 0x00000004:word32]
	edx = eax
	edx = edx >>u 0x00000008
	SCZO = cond(edx)
	ecx = (word32) dl
	edx = (word32) al
	ebx = ebx >>u cl
	SCZO = cond(ebx)
	edi = edi - ecx
	SCZO = cond(edi)
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l004147A8
	// succ:  l00414765 l004147A8
l00414765:
	SZO = cond(dl & 0x10)
	C = false
	branch Test(NE,Z) l004147B5
	// succ:  l0041476A l004147B5
l0041476A:
	SZO = cond(dl & 0x40)
	C = false
	branch Test(NE,Z) l00414ABA
	// succ:  l00414773 l00414ABA
l00414773:
	ecx = 0x00000001
	Mem0[esp + 0x00000054:word32] = ecx
	ecx = edx
	edx = Mem0[esp + 0x00000054:word32]
	edx = edx << cl
	SCZO = cond(edx)
	eax = eax >>u 0x00000010
	SCZO = cond(eax)
	edx = edx - 0x00000001
	SCZO = cond(edx)
	edx = edx & ebx
	SZO = cond(edx)
	C = false
	edx = edx + eax
	SCZO = cond(edx)
	eax = Mem0[esp + 0x00000020:word32]
	eax = Mem0[eax + edx * 0x00000004:word32]
	ecx = eax
	ecx = ecx >>u 0x00000008
	SCZO = cond(ecx)
	ecx = (word32) cl
	edx = (word32) al
	ebx = ebx >>u cl
	SCZO = cond(ebx)
	edi = edi - ecx
	SCZO = cond(edi)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l00414765
	// succ:  l004147A8 l00414765
l004147A8:
	esi = esi + 0x00000001
	SCZO = cond(esi)
	eax = eax >>u 0x00000010
	SCZO = cond(eax)
	Mem0[esi:byte] = al
	goto l00414A15
	// succ:  l00414A15
l004147B5:
	eax = eax >>u 0x00000010
	SCZO = cond(eax)
	edx = edx & 0x0000000F
	SZO = cond(edx)
	C = false
	Mem0[esp + 0x00000054:word32] = eax
	branch Test(EQ,Z) l004147EF
	// succ:  l004147C1 l004147EF
l004147C1:
	SCZO = cond(edi - edx)
	branch Test(UGE,C) l004147D9
	// succ:  l004147C5 l004147D9
l004147C5:
	eax = (word32) Mem0[ebp + 0x00000001:byte]
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	ecx = edi
	eax = eax << cl
	SCZO = cond(eax)
	Mem0[esp + 0x00000010:word32] = ebp
	ebx = ebx + eax
	SCZO = cond(ebx)
	edi = edi + 0x00000008
	SCZO = cond(edi)
	// succ:  l004147D9
l004147D9:
	ecx = edx
	eax = 0x00000001
	eax = eax << cl
	SCZO = cond(eax)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	eax = eax & ebx
	SZO = cond(eax)
	C = false
	v17 = Mem0[esp + 0x00000054:word32] + eax
	Mem0[esp + 0x00000054:word32] = v17
	SCZO = cond(v17)
	ebx = ebx >>u cl
	SCZO = cond(ebx)
	edi = edi - edx
	SCZO = cond(edi)
	// succ:  l004147EF
l004147EF:
	SCZO = cond(edi - 0x0000000F)
	branch Test(UGE,C) l00414818
	// succ:  l004147F4 l00414818
l004147F4:
	edx = (word32) Mem0[ebp + 0x00000001:byte]
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	eax = (word32) Mem0[ebp + 0x00000001:byte]
	ecx = edi
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	edx = edx << cl
	SCZO = cond(edx)
	edi = edi + 0x00000008
	SCZO = cond(edi)
	ecx = edi
	eax = eax << cl
	SCZO = cond(eax)
	ebx = ebx + edx
	SCZO = cond(ebx)
	Mem0[esp + 0x00000010:word32] = ebp
	ebx = ebx + eax
	SCZO = cond(ebx)
	edi = edi + 0x00000008
	SCZO = cond(edi)
	// succ:  l00414818
l00414818:
	ecx = Mem0[esp + 0x00000030:word32]
	edx = Mem0[esp + 0x00000024:word32]
	ecx = ecx & ebx
	SZO = cond(ecx)
	C = false
	edx = Mem0[edx + ecx * 0x00000004:word32]
	eax = edx
	eax = eax >>u 0x00000008
	SCZO = cond(eax)
	ecx = (word32) al
	eax = (word32) dl
	ebx = ebx >>u cl
	SCZO = cond(ebx)
	edi = edi - ecx
	SCZO = cond(edi)
	SZO = cond(al & 0x10)
	C = false
	Mem0[esp + 0x0000001C:word32] = edx
	branch Test(NE,Z) l0041487B
	// succ:  l0041483C l0041487B
l0041483C:
	esp = esp + 0x00000000
	// succ:  l00414840
l00414840:
	SZO = cond(al & 0x40)
	C = false
	branch Test(NE,Z) l00414AAD
	// succ:  l00414848 l00414AAD
l00414848:
	ecx = eax
	eax = (word32) Mem0[esp + 0x0000001E:word16]
	edx = 0x00000001
	edx = edx << cl
	SCZO = cond(edx)
	ecx = Mem0[esp + 0x00000024:word32]
	edx = edx - 0x00000001
	SCZO = cond(edx)
	edx = edx & ebx
	SZO = cond(edx)
	C = false
	edx = edx + eax
	SCZO = cond(edx)
	edx = Mem0[ecx + edx * 0x00000004:word32]
	eax = edx
	eax = eax >>u 0x00000008
	SCZO = cond(eax)
	ecx = (word32) al
	eax = (word32) dl
	ebx = ebx >>u cl
	SCZO = cond(ebx)
	edi = edi - ecx
	SCZO = cond(edi)
	SZO = cond(al & 0x10)
	C = false
	Mem0[esp + 0x0000001C:word32] = edx
	branch Test(EQ,Z) l00414840
	// succ:  l0041487B l00414840
l0041487B:
	edx = edx >>u 0x00000010
	SCZO = cond(edx)
	eax = eax & 0x0000000F
	SZO = cond(eax)
	C = false
	SCZO = cond(edi - eax)
	Mem0[esp + 0x0000001C:word32] = edx
	branch Test(UGE,C) l004148B5
	// succ:  l00414889 l004148B5
l00414889:
	edx = (word32) Mem0[ebp + 0x00000001:byte]
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	ecx = edi
	edx = edx << cl
	SCZO = cond(edx)
	edi = edi + 0x00000008
	SCZO = cond(edi)
	Mem0[esp + 0x00000010:word32] = ebp
	ebx = ebx + edx
	SCZO = cond(ebx)
	SCZO = cond(edi - eax)
	branch Test(UGE,C) l004148B5
	// succ:  l004148A1 l004148B5
l004148A1:
	edx = (word32) Mem0[ebp + 0x00000001:byte]
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	ecx = edi
	edx = edx << cl
	SCZO = cond(edx)
	Mem0[esp + 0x00000010:word32] = ebp
	ebx = ebx + edx
	SCZO = cond(ebx)
	edi = edi + 0x00000008
	SCZO = cond(edi)
	// succ:  l004148B5
l004148B5:
	ecx = 0x00000001
	edx = ecx
	ecx = eax
	edx = edx << cl
	SCZO = cond(edx)
	edi = edi - eax
	SCZO = cond(edi)
	edx = edx - 0x00000001
	SCZO = cond(edx)
	edx = edx & ebx
	SZO = cond(edx)
	C = false
	ecx = edx
	edx = Mem0[esp + 0x0000001C:word32]
	edx = edx + ecx
	SCZO = cond(edx)
	ecx = eax
	eax = esi
	eax = eax - Mem0[esp + 0x00000038:word32]
	SCZO = cond(eax)
	ebx = ebx >>u cl
	SCZO = cond(ebx)
	SCZO = cond(edx - eax)
	Mem0[esp + 0x0000001C:word32] = edx
	branch Test(ULE,CZ) l00414A34
	// succ:  l004148E5 l00414A34
l004148E5:
	ebp = edx
	ebp = ebp - eax
	SCZO = cond(ebp)
	SCZO = cond(ebp - Mem0[esp + 0x0000003C:word32])
	branch Test(UGT,CZ) l00414A92
	// succ:  l004148F3 l00414A92
l004148F3:
	ecx = Mem0[esp + 0x00000040:word32]
	eax = Mem0[esp + 0x00000044:word32]
	ecx = ecx + 0xFFFFFFFF
	SCZO = cond(ecx)
	SZO = cond(eax & eax)
	C = false
	Mem0[esp + 0x00000034:word32] = ecx
	branch Test(NE,Z) l00414932
	// succ:  l00414906 l00414932
l00414906:
	eax = Mem0[esp + 0x00000028:word32]
	eax = eax - ebp
	SCZO = cond(eax)
	ecx = ecx + eax
	SCZO = cond(ecx)
	SCZO = cond(ebp - Mem0[esp + 0x00000054:word32])
	branch Test(UGE,C) l004149AA
	// succ:  l00414918 l004149AA
l00414918:
	v19 = Mem0[esp + 0x00000054:word32] - ebp
	Mem0[esp + 0x00000054:word32] = v19
	SCZO = cond(v19)
	esp = esp + 0x00000000
	// succ:  l00414920
l00414920:
	al = Mem0[ecx + 0x00000001:byte]
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	esi = esi + 0x00000001
	SCZO = cond(esi)
	ebp = ebp - 0x00000001
	SCZO = cond(ebp)
	Mem0[esi:byte] = al
	branch Test(NE,Z) l00414920
	// succ:  l00414930 l00414920
l00414930:
	goto l004149A6
	// succ:  l004149A6
l00414932:
	SCZO = cond(eax - ebp)
	branch Test(UGE,C) l00414988
	// succ:  l00414936 l00414988
l00414936:
	edx = eax
	edx = edx - ebp
	SCZO = cond(edx)
	edx = edx + Mem0[esp + 0x00000028:word32]
	SCZO = cond(edx)
	ebp = ebp - eax
	SCZO = cond(ebp)
	ecx = ecx + edx
	SCZO = cond(ecx)
	SCZO = cond(ebp - Mem0[esp + 0x00000054:word32])
	branch Test(UGE,C) l004149AA
	// succ:  l00414948 l004149AA
l00414948:
	v22 = Mem0[esp + 0x00000054:word32] - ebp
	Mem0[esp + 0x00000054:word32] = v22
	SCZO = cond(v22)
	esp = esp + 0x00000000
	// succ:  l00414950
l00414950:
	dl = Mem0[ecx + 0x00000001:byte]
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	esi = esi + 0x00000001
	SCZO = cond(esi)
	ebp = ebp - 0x00000001
	SCZO = cond(ebp)
	Mem0[esi:byte] = dl
	branch Test(NE,Z) l00414950
	// succ:  l00414960 l00414950
l00414960:
	SCZO = cond(eax - Mem0[esp + 0x00000054:word32])
	ecx = Mem0[esp + 0x00000034:word32]
	branch Test(UGE,C) l004149AA
	// succ:  l0041496A l004149AA
l0041496A:
	v23 = Mem0[esp + 0x00000054:word32] - eax
	Mem0[esp + 0x00000054:word32] = v23
	SCZO = cond(v23)
	ebp = eax
	// succ:  l00414970
l00414970:
	al = Mem0[ecx + 0x00000001:byte]
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	esi = esi + 0x00000001
	SCZO = cond(esi)
	ebp = ebp - 0x00000001
	SCZO = cond(ebp)
	Mem0[esi:byte] = al
	branch Test(NE,Z) l00414970
	// succ:  l00414980 l00414970
l00414980:
	ecx = esi
	ecx = ecx - Mem0[esp + 0x0000001C:word32]
	SCZO = cond(ecx)
	goto l004149AA
	// succ:  l004149AA
l00414988:
	eax = eax - ebp
	SCZO = cond(eax)
	ecx = ecx + eax
	SCZO = cond(ecx)
	SCZO = cond(ebp - Mem0[esp + 0x00000054:word32])
	branch Test(UGE,C) l004149AA
	// succ:  l00414992 l004149AA
l00414992:
	v24 = Mem0[esp + 0x00000054:word32] - ebp
	Mem0[esp + 0x00000054:word32] = v24
	SCZO = cond(v24)
	// succ:  l00414996
l00414996:
	al = Mem0[ecx + 0x00000001:byte]
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	esi = esi + 0x00000001
	SCZO = cond(esi)
	ebp = ebp - 0x00000001
	SCZO = cond(ebp)
	Mem0[esi:byte] = al
	branch Test(NE,Z) l00414996
	// succ:  l004149A6 l00414996
l004149A6:
	ecx = esi
	ecx = ecx - edx
	SCZO = cond(ecx)
	ecx = esi
	ecx = ecx - edx
	SCZO = cond(ecx)
	// succ:  l004149AA
l004149AA:
	eax = Mem0[esp + 0x00000054:word32]
	SCZO = cond(eax - 0x00000002)
	branch Test(ULE,CZ) l004149F1
	// succ:  l004149B3 l004149F1
l004149B3:
	edx = eax - 0x00000003
	eax = 0xAAAAAAAB
	edx_eax = edx *u eax
	SCZO = cond(edx_eax)
	ebp = edx
	ebp = ebp >>u 0x00000001
	SCZO = cond(ebp)
	ebp = ebp + 0x00000001
	SCZO = cond(ebp)
	// succ:  l004149C4
l004149C4:
	eax = (word32) Mem0[ecx + 0x00000001:byte]
	v21 = Mem0[esp + 0x00000054:word32] - 0x00000003
	Mem0[esp + 0x00000054:word32] = v21
	SCZO = cond(v21)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	esi = esi + 0x00000001
	SCZO = cond(esi)
	Mem0[esi:byte] = al
	dl = Mem0[ecx + 0x00000001:byte]
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	esi = esi + 0x00000001
	SCZO = cond(esi)
	Mem0[esi:byte] = dl
	eax = (word32) Mem0[ecx + 0x00000001:byte]
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	esi = esi + 0x00000001
	SCZO = cond(esi)
	ebp = ebp - 0x00000001
	SCZO = cond(ebp)
	Mem0[esi:byte] = al
	branch Test(NE,Z) l004149C4
	// succ:  l004149F1 l004149C4
l004149F1:
	ebp = Mem0[esp + 0x00000054:word32]
	SZO = cond(ebp & ebp)
	C = false
	branch Test(EQ,Z) l00414A11
	// succ:  l004149F9 l00414A11
l004149F9:
	dl = Mem0[ecx + 0x00000001:byte]
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	esi = esi + 0x00000001
	SCZO = cond(esi)
	SCZO = cond(ebp - 0x00000001)
	Mem0[esi:byte] = dl
	branch Test(ULE,CZ) l00414A11
	// succ:  l00414A09 l00414A11
l00414A09:
	al = Mem0[ecx + 0x00000001:byte]
	esi = esi + 0x00000001
	SCZO = cond(esi)
	Mem0[esi:byte] = al
	// succ:  l00414A11
l00414A11:
	ebp = Mem0[esp + 0x00000010:word32]
	// succ:  l00414A15
l00414A15:
	edx = Mem0[esp + 0x00000014:word32]
	SCZO = cond(ebp - edx)
	branch Test(UGE,C) l00414AE4
	// succ:  l00414A21 l00414AE4
l00414A21:
	SCZO = cond(esi - Mem0[esp + 0x0000002C:word32])
	branch Test(UGE,C) l00414AE4
	// succ:  l00414A2B l00414AE4
l00414A2B:
	edx = Mem0[esp + 0x00000048:word32]
	goto l00414720
	// succ:  l00414720
l00414A34:
	eax = esi
	eax = eax - edx
	SCZO = cond(eax)
	// succ:  l00414A40
l00414A40:
	ecx = (word32) Mem0[eax + 0x00000001:byte]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	Mem0[esi + 0x00000001:byte] = cl
	dl = Mem0[eax + 0x00000001:byte]
	esi = esi + 0x00000001
	SCZO = cond(esi)
	eax = eax + 0x00000001
	SCZO = cond(eax)
	esi = esi + 0x00000001
	SCZO = cond(esi)
	Mem0[esi:byte] = dl
	ecx = (word32) Mem0[eax + 0x00000001:byte]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	esi = esi + 0x00000001
	SCZO = cond(esi)
	Mem0[esi:byte] = cl
	ecx = Mem0[esp + 0x00000054:word32]
	ecx = ecx - 0x00000003
	SCZO = cond(ecx)
	SCZO = cond(ecx - 0x00000002)
	Mem0[esp + 0x00000054:word32] = ecx
	branch Test(UGT,CZ) l00414A40
	// succ:  l00414A74 l00414A40
l00414A74:
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l00414A15
	// succ:  l00414A78 l00414A15
l00414A78:
	dl = Mem0[eax + 0x00000001:byte]
	eax = eax + 0x00000001
	SCZO = cond(eax)
	esi = esi + 0x00000001
	SCZO = cond(esi)
	SCZO = cond(ecx - 0x00000001)
	Mem0[esi:byte] = dl
	branch Test(ULE,CZ) l00414A15
	// succ:  l00414A88 l00414A15
l00414A88:
	al = Mem0[eax + 0x00000001:byte]
	esi = esi + 0x00000001
	SCZO = cond(esi)
	Mem0[esi:byte] = al
	goto l00414A15
	// succ:  l00414A15
l00414A92:
	ecx = Mem0[esp + 0x00000050:word32]
	edx = Mem0[esp + 0x00000018:word32]
	ebp = Mem0[esp + 0x00000010:word32]
	Mem0[ecx + 0x00000018:word32] = 0x00418448
	Mem0[edx:word32] = 0x0000001B
	goto l00414AE0
	// succ:  l00414AE0
l00414AAD:
	eax = Mem0[esp + 0x00000050:word32]
	Mem0[eax + 0x00000018:word32] = 0x00418468
	goto l00414AD6
	// succ:  l00414AD6
l00414ABA:
	SZO = cond(dl & 0x20)
	C = false
	branch Test(EQ,Z) l00414ACB
	// succ:  l00414ABF l00414ACB
l00414ABF:
	edx = Mem0[esp + 0x00000018:word32]
	Mem0[edx:word32] = 0x0000000B
	goto l00414AE0
	// succ:  l00414AE0
l00414ACB:
	eax = Mem0[esp + 0x00000050:word32]
	Mem0[eax + 0x00000018:word32] = 0x00418480
	// succ:  l00414AD6
l00414AD6:
	ecx = Mem0[esp + 0x00000018:word32]
	Mem0[ecx:word32] = 0x0000001B
	// succ:  l00414AE0
l00414AE0:
	edx = Mem0[esp + 0x00000014:word32]
	// succ:  l00414AE4
l00414AE4:
	eax = edi
	eax = eax >>u 0x00000003
	SCZO = cond(eax)
	ebp = ebp - eax
	SCZO = cond(ebp)
	eax = eax + eax
	SCZO = cond(eax)
	eax = eax + eax
	SCZO = cond(eax)
	eax = eax + eax
	SCZO = cond(eax)
	edi = edi - eax
	SCZO = cond(edi)
	ecx = edi
	eax = 0x00000001
	eax = eax << cl
	SCZO = cond(eax)
	ecx = Mem0[esp + 0x00000050:word32]
	edx = edx - ebp
	SCZO = cond(edx)
	edx = edx + 0x00000005
	SCZO = cond(edx)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	ebx = ebx & eax
	SZO = cond(ebx)
	C = false
	eax = ebp + 0x00000001
	Mem0[ecx:word32] = eax
	eax = esi + 0x00000001
	Mem0[ecx + 0x0000000C:word32] = eax
	eax = Mem0[esp + 0x0000002C:word32]
	eax = eax - esi
	SCZO = cond(eax)
	eax = eax + 0x00000101
	SCZO = cond(eax)
	Mem0[ecx + 0x00000010:word32] = eax
	eax = Mem0[esp + 0x00000018:word32]
	Mem0[ecx + 0x00000004:word32] = edx
	Mem0[eax + 0x0000003C:word32] = edi
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[eax + 0x00000038:word32] = ebx
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x0000003C
	SCZO = cond(esp)
	return
	// succ:  fn00414680_exit
fn00414680_exit:


// fn00414B40
// Return size: 4
void fn00414B40()
fn00414B40_entry:
	// succ:  l00414B40
l00414B40:
	esp = fp
	esp = esp - 0x0000008C
	SCZO = cond(esp)
	eax = Mem0[0x0041C340:word32]
	eax = eax ^ esp
	SZO = cond(eax)
	C = false
	Mem0[esp + 0x00000088:word32] = eax
	eax = Mem0[esp + 0x000000A4:word32]
	edx = Mem0[esp + 0x000000A0:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = Mem0[esp + 0x000000A0:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = Mem0[esp + 0x0000009C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x000000A4:word32]
	Mem0[esp + 0x00000018:word32] = eax
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SZO = cond(esi & esi)
	C = false
	Mem0[esp + 0x00000050:word32] = ebp
	Mem0[esp + 0x00000038:word32] = ebx
	Mem0[esp + 0x00000048:word32] = edx
	Mem0[esp + 0x00000054:word32] = eax
	Mem0[esp + 0x00000058:word32] = eax
	Mem0[esp + 0x0000005C:word32] = eax
	Mem0[esp + 0x00000060:word32] = eax
	Mem0[esp + 0x00000064:word32] = eax
	Mem0[esp + 0x00000068:word32] = eax
	Mem0[esp + 0x0000006C:word32] = eax
	Mem0[esp + 0x00000070:word32] = eax
	branch Test(ULE,CZ) l00414BC6
	// succ:  l00414BB0 l00414BC6
l00414BB0:
	ecx = (word32) Mem0[ebp + 0x00000000 + eax * 0x0002:word16]
	v13 = Mem0[esp + 0x00000054 + ecx * 0x0002:word16] + 0x0001
	Mem0[esp + 0x00000054 + ecx * 0x0002:word16] = v13
	SCZO = cond(v13)
	ecx = esp + 0x00000054 + ecx * 0x00000002
	eax = eax + 0x00000001
	SCZO = cond(eax)
	SCZO = cond(eax - esi)
	branch Test(ULT,C) l00414BB0
	// succ:  l00414BC6 l00414BB0
l00414BC6:
	eax = Mem0[edx:word32]
	Mem0[esp + 0x00000010:word32] = eax
	ecx = 0x0000000F
	// succ:  l00414BD1
l00414BD1:
	SCZO = cond(Mem0[esp + 0x00000054 + ecx * 0x0002:word16] - 0x0000)
	branch Test(NE,Z) l00414BE1
	// succ:  l00414BD9 l00414BE1
l00414BD9:
	ecx = ecx - 0x00000001
	SCZO = cond(ecx)
	SCZO = cond(ecx - 0x00000001)
	branch Test(UGE,C) l00414BD1
	// succ:  l00414BE1 l00414BD1
l00414BE1:
	SCZO = cond(eax - ecx)
	Mem0[esp + 0x0000001C:word32] = ecx
	branch Test(ULE,CZ) l00414BEF
	// succ:  l00414BE9 l00414BEF
l00414BE9:
	Mem0[esp + 0x00000010:word32] = ecx
	eax = ecx
	// succ:  l00414BEF
l00414BEF:
	SZO = cond(ecx & ecx)
	C = false
	branch Test(NE,Z) l00414C34
	// succ:  l00414BF3 l00414C34
l00414BF3:
	Mem0[esp + 0x0000000E:word16] = cx
	ecx = Mem0[ebx:word32]
	Mem0[esp + 0x0000000C:byte] = 0x40
	Mem0[esp + 0x0000000D:byte] = 0x01
	eax = Mem0[esp + 0x0000000C:word32]
	Mem0[ecx:word32] = eax
	v16 = Mem0[ebx:word32] + 0x00000004
	Mem0[ebx:word32] = v16
	SCZO = cond(v16)
	ecx = Mem0[ebx:word32]
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[ecx:word32] = eax
	v17 = Mem0[ebx:word32] + 0x00000004
	Mem0[ebx:word32] = v17
	SCZO = cond(v17)
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[edx:word32] = 0x00000001
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp + 0x00000088:word32]
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x0000008C
	SCZO = cond(esp)
	return
	// succ:  fn00414B40_exit
l00414C34:
	esi = 0x00000001
	esp = esp + 0x00000000
	// succ:  l00414C40
l00414C40:
	SCZO = cond(Mem0[esp + 0x00000054 + esi * 0x0002:word16] - 0x0000)
	branch Test(NE,Z) l00414C84
	// succ:  l00414C48 l00414C84
l00414C48:
	SCZO = cond(Mem0[esp + 0x00000056 + esi * 0x0002:word16] - 0x0000)
	branch Test(NE,Z) l00414C72
	// succ:  l00414C50 l00414C72
l00414C50:
	SCZO = cond(Mem0[esp + 0x00000058 + esi * 0x0002:word16] - 0x0000)
	branch Test(NE,Z) l00414C77
	// succ:  l00414C58 l00414C77
l00414C58:
	SCZO = cond(Mem0[esp + 0x0000005A + esi * 0x0002:word16] - 0x0000)
	branch Test(NE,Z) l00414C7C
	// succ:  l00414C60 l00414C7C
l00414C60:
	SCZO = cond(Mem0[esp + 0x0000005C + esi * 0x0002:word16] - 0x0000)
	branch Test(NE,Z) l00414C81
	// succ:  l00414C68 l00414C81
l00414C68:
	esi = esi + 0x00000005
	SCZO = cond(esi)
	SCZO = cond(esi - 0x0000000F)
	branch Test(ULE,CZ) l00414C40
	// succ:  l00414C70 l00414C40
l00414C70:
	goto l00414C84
	// succ:  l00414C84
l00414C72:
	esi = esi + 0x00000001
	SCZO = cond(esi)
	goto l00414C84
	// succ:  l00414C84
l00414C77:
	esi = esi + 0x00000002
	SCZO = cond(esi)
	goto l00414C84
	// succ:  l00414C84
l00414C7C:
	esi = esi + 0x00000003
	SCZO = cond(esi)
	goto l00414C84
	// succ:  l00414C84
l00414C81:
	esi = esi + 0x00000004
	SCZO = cond(esi)
	// succ:  l00414C84
l00414C84:
	SCZO = cond(eax - esi)
	branch Test(UGE,C) l00414C8C
	// succ:  l00414C88 l00414C8C
l00414C88:
	Mem0[esp + 0x00000010:word32] = esi
	// succ:  l00414C8C
l00414C8C:
	edx = 0x00000001
	eax = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	// succ:  l00414C94
l00414C94:
	edi = (word32) Mem0[esp + 0x00000058 + eax * 0x0002:word16]
	edx = edx + edx
	SCZO = cond(edx)
	edx = edx - edi
	SCZO = cond(edx)
	branch Test(SG,S) l00414CBB
	// succ:  l00414C9F l00414CBB
l00414C9F:
	eax = eax + 0x00000001
	SCZO = cond(eax)
	SCZO = cond(eax - 0x0000000F)
	branch Test(ULE,CZ) l00414C94
	// succ:  l00414CA7 l00414C94
l00414CA7:
	SZO = cond(edx & edx)
	C = false
	edi = Mem0[esp + 0x000000A0:word32]
	branch Test(LE,SZO) l00414CC3
	// succ:  l00414CB2 l00414CC3
l00414CB2:
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l00414CBB
	// succ:  l00414CB6 l00414CBB
l00414CB6:
	SCZO = cond(ecx - 0x00000001)
	branch Test(EQ,Z) l00414CC3
	// succ:  l00414CBB l00414CC3
l00414CBB:
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	goto l00415015
	// succ:  l00415015
l00414CC3:
	Mem0[esp + 0x0000007A:word16] = 0x0000
	eax = 0x00000002
	// succ:  l00414CD0
l00414CD0:
	cx = Mem0[esp + 0x00000078 + eax:word16]
	cx = cx + Mem0[(esp + 0x00000058) + eax:word16]
	SCZO = cond(cx)
	eax = eax + 0x00000002
	SCZO = cond(eax)
	SCZO = cond(eax - 0x0000001E)
	Mem0[esp + 0x00000078 + eax:word16] = cx
	branch Test(ULT,C) l00414CD0
	// succ:  l00414CE7 l00414CD0
l00414CE7:
	ecx = Mem0[esp + 0x0000001C:word32]
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[esp + 0x000000A8:word32] - eax)
	branch Test(ULE,CZ) l00414D27
	// succ:  l00414CF6 l00414D27
l00414CF6:
	SCZO = cond(Mem0[ebp + 0x00000000 + eax * 0x0002:word16] - 0x0000)
	branch Test(EQ,Z) l00414D1B
	// succ:  l00414CFE l00414D1B
l00414CFE:
	edx = (word32) Mem0[ebp + 0x00000000 + eax * 0x0002:word16]
	edx = (word32) Mem0[esp + 0x00000078 + edx * 0x0002:word16]
	Mem0[ecx + edx * 0x0002:word16] = ax
	edx = (word32) Mem0[ebp + 0x00000000 + eax * 0x0002:word16]
	v21 = Mem0[esp + 0x00000078 + edx * 0x0002:word16] + 0x0001
	Mem0[esp + 0x00000078 + edx * 0x0002:word16] = v21
	SCZO = cond(v21)
	edx = esp + 0x00000078 + edx * 0x00000002
	// succ:  l00414D1B
l00414D1B:
	eax = eax + 0x00000001
	SCZO = cond(eax)
	SCZO = cond(eax - Mem0[esp + 0x000000A8:word32])
	branch Test(ULT,C) l00414CF6
	// succ:  l00414D27 l00414CF6
l00414D27:
	eax = edi
	eax = eax - 0x00000000
	SCZO = cond(eax)
	edx = 0xFFFFFFFF
	branch Test(EQ,Z) l00414D74
	// succ:  l00414D33 l00414D74
l00414D33:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	branch Test(EQ,Z) l00414D4E
	// succ:  l00414D38 l00414D4E
l00414D38:
	Mem0[esp + 0x0000002C:word32] = 0x0041A730
	Mem0[esp + 0x00000038:word32] = 0x0041A770
	Mem0[esp + 0x00000030:word32] = edx
	goto l00414D84
	// succ:  l00414D84
l00414D4E:
	eax = 0x0041A6B0
	eax = eax - 0x00000202
	SCZO = cond(eax)
	Mem0[esp + 0x0000002C:word32] = eax
	eax = 0x0041A6F0
	eax = eax - 0x00000202
	SCZO = cond(eax)
	Mem0[esp + 0x00000038:word32] = eax
	Mem0[esp + 0x00000030:word32] = 0x00000100
	goto l00414D84
	// succ:  l00414D84
l00414D74:
	Mem0[esp + 0x00000038:word32] = ecx
	Mem0[esp + 0x0000002C:word32] = ecx
	Mem0[esp + 0x00000030:word32] = 0x00000013
	// succ:  l00414D84
l00414D84:
	eax = Mem0[ebx:word32]
	ecx = Mem0[esp + 0x00000014:word32]
	Mem0[esp + 0x00000024:word32] = eax
	eax = 0x00000001
	eax = eax << cl
	SCZO = cond(eax)
	ebp = ebp ^ ebp
	SZO = cond(ebp)
	C = false
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	SCZO = cond(edi - 0x00000001)
	ecx = eax - 0x00000001
	Mem0[esp + 0x00000018:word32] = esi
	Mem0[esp + 0x00000034:word32] = edx
	Mem0[esp + 0x00000044:word32] = eax
	Mem0[esp + 0x00000028:word32] = eax
	Mem0[esp + 0x00000040:word32] = ecx
	branch Test(NE,Z) l00414DC0
	// succ:  l00414DB5 l00414DC0
l00414DB5:
	SCZO = cond(eax - 0x000005B0)
	branch Test(UGE,C) l00415010
	// succ:  l00414DC0 l00415010
l00414DC0:
	edx = Mem0[esp + 0x0000001C:word32]
	Mem0[esp + 0x0000001C:word32] = edx
	// succ:  l00414DD0
l00414DD0:
	al = Mem0[esp + 0x00000018:byte]
	esi = Mem0[esp + 0x0000001C:word32]
	edx = Mem0[esp + 0x00000030:word32]
	al = al - bl
	SCZO = cond(al)
	Mem0[esp + 0x00000011:byte] = al
	eax = (word32) Mem0[esi:word16]
	ecx = (word32) ax
	SCZO = cond(ecx - edx)
	branch Test(GE,SO) l00414DF8
	// succ:  l00414DEC l00414DF8
l00414DEC:
	Mem0[esp + 0x00000010:byte] = 0x00
	Mem0[esp + 0x00000012:word16] = ax
	goto l00414E25
	// succ:  l00414E25
l00414DF8:
	branch Test(LE,SZO) l00414E19
	// succ:  l00414DFA l00414E19
l00414DFA:
	eax = (word32) Mem0[esi:word16]
	ecx = Mem0[esp + 0x00000038:word32]
	eax = eax + eax
	SCZO = cond(eax)
	dl = Mem0[eax + ecx:byte]
	ecx = Mem0[esp + 0x0000002C:word32]
	Mem0[esp + 0x00000010:byte] = dl
	dx = Mem0[eax + ecx:word16]
	Mem0[esp + 0x00000012:word16] = dx
	goto l00414E25
	// succ:  l00414E25
l00414E19:
	Mem0[esp + 0x00000010:byte] = 0x60
	Mem0[esp + 0x00000012:word16] = 0x0000
	// succ:  l00414E25
l00414E25:
	ecx = Mem0[esp + 0x00000018:word32]
	eax = Mem0[esp + 0x00000044:word32]
	ecx = ecx - ebx
	SCZO = cond(ecx)
	edx = 0x00000001
	edx = edx << cl
	SCZO = cond(edx)
	ecx = ebx
	edi = ebp
	edi = edi >>u cl
	SCZO = cond(edi)
	ecx = Mem0[esp + 0x00000024:word32]
	Mem0[esp + 0x00000050:word32] = eax
	esi = 0x00000000 + edx * 0x00000004
	edi = edi + eax
	SCZO = cond(edi)
	ecx = ecx + edi * 0x00000004
	edi = Mem0[esp + 0x00000010:word32]
	// succ:  l00414E54
l00414E54:
	eax = eax - edx
	SCZO = cond(eax)
	ecx = ecx - esi
	SCZO = cond(ecx)
	SZO = cond(eax & eax)
	C = false
	Mem0[ecx:word32] = edi
	branch Test(NE,Z) l00414E54
	// succ:  l00414E5E l00414E54
l00414E5E:
	edx = Mem0[esp + 0x00000018:word32]
	ecx = edx - 0x00000001
	eax = 0x00000001
	eax = eax << cl
	SCZO = cond(eax)
	SZO = cond(ebp & eax)
	C = false
	branch Test(EQ,Z) l00414E76
	// succ:  l00414E70 l00414E76
l00414E70:
	eax = eax >>u 0x00000001
	SCZO = cond(eax)
	SZO = cond(ebp & eax)
	C = false
	branch Test(NE,Z) l00414E70
	// succ:  l00414E76 l00414E70
l00414E76:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00414E85
	// succ:  l00414E7A l00414E85
l00414E7A:
	ecx = eax - 0x00000001
	ecx = ecx & ebp
	SZO = cond(ecx)
	C = false
	ecx = ecx + eax
	SCZO = cond(ecx)
	ebp = ecx
	goto l00414E87
	// succ:  l00414E87
l00414E85:
	ebp = ebp ^ ebp
	SZO = cond(ebp)
	C = false
	// succ:  l00414E87
l00414E87:
	v28 = Mem0[esp + 0x00000058 + edx * 0x0002:word16] + 0xFFFF
	Mem0[esp + 0x00000058 + edx * 0x0002:word16] = v28
	SCZO = cond(v28)
	eax = (word32) Mem0[esp + 0x00000058 + edx * 0x0002:word16]
	v29 = Mem0[esp + 0x0000001C:word32] + 0x00000002
	Mem0[esp + 0x0000001C:word32] = v29
	SCZO = cond(v29)
	SZO = cond(ax & ax)
	C = false
	branch Test(NE,Z) l00414EBA
	// succ:  l00414E9D l00414EBA
l00414E9D:
	SCZO = cond(edx - Mem0[esp + 0x00000020:word32])
	branch Test(EQ,Z) l00414F83
	// succ:  l00414EA7 l00414F83
l00414EA7:
	edx = Mem0[esp + 0x0000001C:word32]
	eax = (word32) Mem0[edx:word16]
	ecx = Mem0[esp + 0x00000054:word32]
	edx = (word32) Mem0[ecx + eax * 0x0002:word16]
	Mem0[esp + 0x00000018:word32] = edx
	// succ:  l00414EBA
l00414EBA:
	SCZO = cond(edx - Mem0[esp + 0x00000014:word32])
	branch Test(ULE,CZ) l00414DD0
	// succ:  l00414EC4 l00414DD0
l00414EC4:
	esi = Mem0[esp + 0x00000040:word32]
	esi = esi & ebp
	SZO = cond(esi)
	C = false
	SCZO = cond(esi - Mem0[esp + 0x00000034:word32])
	Mem0[esp + 0x00000048:word32] = esi
	branch Test(EQ,Z) l00414DD0
	// succ:  l00414ED8 l00414DD0
l00414ED8:
	SZO = cond(ebx & ebx)
	C = false
	branch Test(NE,Z) l00414EE0
	// succ:  l00414EDC l00414EE0
l00414EDC:
	ebx = Mem0[esp + 0x00000014:word32]
	// succ:  l00414EE0
l00414EE0:
	eax = Mem0[esp + 0x00000024:word32]
	ecx = Mem0[esp + 0x00000050:word32]
	edx = eax + ecx * 0x00000004
	ecx = Mem0[esp + 0x00000018:word32]
	ecx = ecx - ebx
	SCZO = cond(ecx)
	Mem0[esp + 0x00000024:word32] = edx
	eax = 0x00000001
	edx = ebx + ecx
	eax = eax << cl
	SCZO = cond(eax)
	SCZO = cond(edx - Mem0[esp + 0x00000020:word32])
	branch Test(UGE,C) l00414F2E
	// succ:  l00414F05 l00414F2E
l00414F05:
	esi = esp + 0x00000058 + edx * 0x00000002
	esp = esp + 0x00000000
	// succ:  l00414F10
l00414F10:
	edi = (word32) Mem0[esi:word16]
	eax = eax - edi
	SCZO = cond(eax)
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l00414F2A
	// succ:  l00414F19 l00414F2A
l00414F19:
	edx = edx + 0x00000001
	SCZO = cond(edx)
	ecx = ecx + 0x00000001
	SCZO = cond(ecx)
	esi = esi + 0x00000002
	SCZO = cond(esi)
	eax = eax + eax
	SCZO = cond(eax)
	SCZO = cond(edx - Mem0[esp + 0x00000020:word32])
	branch Test(ULT,C) l00414F10
	// succ:  l00414F2A l00414F10
l00414F2A:
	esi = Mem0[esp + 0x00000048:word32]
	// succ:  l00414F2E
l00414F2E:
	eax = 0x00000001
	eax = eax << cl
	SCZO = cond(eax)
	v31 = Mem0[esp + 0x00000028:word32] + eax
	Mem0[esp + 0x00000028:word32] = v31
	SCZO = cond(v31)
	SCZO = cond(Mem0[esp + 0x000000A0:word32] - 0x00000001)
	Mem0[esp + 0x00000044:word32] = eax
	branch Test(NE,Z) l00414F55
	// succ:  l00414F47 l00414F55
l00414F47:
	SCZO = cond(Mem0[esp + 0x00000028:word32] - 0x000005B0)
	branch Test(UGE,C) l00415010
	// succ:  l00414F55 l00415010
l00414F55:
	edx = esi
	esi = Mem0[esp + 0x0000003C:word32]
	eax = Mem0[esi:word32]
	Mem0[eax + edx * 0x04:byte] = cl
	ecx = Mem0[esi:word32]
	al = Mem0[esp + 0x00000014:byte]
	Mem0[ecx + 0x00000001 + edx * 0x04:byte] = al
	eax = Mem0[esi:word32]
	ecx = Mem0[esp + 0x00000024:word32]
	ecx = ecx - eax
	SCZO = cond(ecx)
	ecx = ecx >> 0x00000002
	SCZO = cond(ecx)
	Mem0[esp + 0x00000034:word32] = edx
	Mem0[eax + 0x00000002 + edx * 0x0004:word16] = cx
	goto l00414DD0
	// succ:  l00414DD0
l00414F83:
	edi = Mem0[esp + 0x0000003C:word32]
	al = dl
	al = al - bl
	SCZO = cond(al)
	SZO = cond(ebp & ebp)
	C = false
	Mem0[esp + 0x00000010:byte] = 0x40
	Mem0[esp + 0x00000011:byte] = al
	Mem0[esp + 0x00000012:word16] = 0x0000
	branch Test(EQ,Z) l00414FF5
	// succ:  l00414F9F l00414FF5
l00414F9F:
	esi = Mem0[esp + 0x00000024:word32]
	// succ:  l00414FA3
l00414FA3:
	SZO = cond(ebx & ebx)
	C = false
	branch Test(EQ,Z) l00414FC5
	// succ:  l00414FA7 l00414FC5
l00414FA7:
	ecx = Mem0[esp + 0x00000040:word32]
	ecx = ecx & ebp
	SZO = cond(ecx)
	C = false
	SCZO = cond(ecx - Mem0[esp + 0x00000034:word32])
	branch Test(EQ,Z) l00414FC5
	// succ:  l00414FB3 l00414FC5
l00414FB3:
	eax = Mem0[esp + 0x00000014:word32]
	esi = Mem0[edi:word32]
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	Mem0[esp + 0x00000018:word32] = eax
	Mem0[esp + 0x00000011:byte] = al
	edx = eax
	// succ:  l00414FC5
l00414FC5:
	ecx = ebx
	eax = ebp
	eax = eax >>u cl
	SCZO = cond(eax)
	ecx = Mem0[esp + 0x00000010:word32]
	Mem0[esi + eax * 0x00000004:word32] = ecx
	ecx = edx - 0x00000001
	eax = 0x00000001
	eax = eax << cl
	SCZO = cond(eax)
	SZO = cond(ebp & eax)
	C = false
	branch Test(EQ,Z) l00414FE6
	// succ:  l00414FE0 l00414FE6
l00414FE0:
	eax = eax >>u 0x00000001
	SCZO = cond(eax)
	SZO = cond(ebp & eax)
	C = false
	branch Test(NE,Z) l00414FE0
	// succ:  l00414FE6 l00414FE0
l00414FE6:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00414FF5
	// succ:  l00414FEA l00414FF5
l00414FEA:
	ecx = eax - 0x00000001
	ecx = ecx & ebp
	SZO = cond(ecx)
	C = false
	ecx = ecx + eax
	SCZO = cond(ecx)
	ebp = ecx
	branch Test(NE,Z) l00414FA3
	// succ:  l00414FF5 l00414FA3
l00414FF5:
	edx = Mem0[esp + 0x00000028:word32]
	ecx = Mem0[esp + 0x0000004C:word32]
	eax = 0x00000000 + edx * 0x00000004
	v30 = Mem0[edi:word32] + eax
	Mem0[edi:word32] = v30
	SCZO = cond(v30)
	edx = Mem0[esp + 0x00000014:word32]
	Mem0[ecx:word32] = edx
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	goto l00415015
	// succ:  l00415015
l00415010:
	eax = 0x00000001
	// succ:  l00415015
l00415015:
	ecx = Mem0[esp + 0x00000098:word32]
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx ^ esp
	SZO = cond(ecx)
	C = false
	call fn00412237 (retsize: 4;)
	esp = esp + 0x0000008C
	SCZO = cond(esp)
	return
	// succ:  fn00414B40_exit
fn00414B40_exit:


// fn00415030
// Return size: 4
void fn00415030()
fn00415030_entry:
	// succ:  l00415030
l00415030:
	esp = fp
	ecx = Mem0[esp + 0x00000004:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = Mem0[esp + 0x00000010:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = ecx
	edi = edi >>u 0x00000010
	SCZO = cond(edi)
	ecx = ecx & 0x0000FFFF
	SZO = cond(ecx)
	C = false
	SCZO = cond(ebx - 0x00000001)
	branch Test(NE,Z) l0041507B
	// succ:  l0041504A l0041507B
l0041504A:
	eax = Mem0[esp + 0x00000010:word32]
	edx = (word32) Mem0[eax:byte]
	ecx = ecx + edx
	SCZO = cond(ecx)
	SCZO = cond(ecx - 0x0000FFF1)
	branch Test(ULT,C) l00415061
	// succ:  l0041505B l00415061
l0041505B:
	ecx = ecx - 0x0000FFF1
	SCZO = cond(ecx)
	// succ:  l00415061
l00415061:
	edi = edi + ecx
	SCZO = cond(edi)
	SCZO = cond(edi - 0x0000FFF1)
	branch Test(ULT,C) l00415071
	// succ:  l0041506B l00415071
l0041506B:
	edi = edi - 0x0000FFF1
	SCZO = cond(edi)
	// succ:  l00415071
l00415071:
	eax = edi
	eax = eax << 0x00000010
	SCZO = cond(eax)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax | ecx
	SZO = cond(eax)
	C = false
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00415030_exit
l0041507B:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp + 0x00000014:word32]
	SZO = cond(esi & esi)
	C = false
	branch Test(NE,Z) l0041508D
	// succ:  l00415084 l0041508D
l00415084:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = 0x00000001
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00415030_exit
l0041508D:
	SCZO = cond(ebx - 0x00000010)
	branch Test(UGE,C) l004150D1
	// succ:  l00415092 l004150D1
l00415092:
	SZO = cond(ebx & ebx)
	C = false
	branch Test(EQ,Z) l004150A7
	// succ:  l00415096 l004150A7
l00415096:
	eax = (word32) Mem0[esi:byte]
	ecx = ecx + eax
	SCZO = cond(ecx)
	ebx = ebx - 0x00000001
	SCZO = cond(ebx)
	esi = esi + 0x00000001
	SCZO = cond(esi)
	edi = edi + ecx
	SCZO = cond(edi)
	SZO = cond(ebx & ebx)
	C = false
	branch Test(NE,Z) l00415096
	// succ:  l004150A7 l00415096
l004150A7:
	SCZO = cond(ecx - 0x0000FFF1)
	branch Test(ULT,C) l004150B5
	// succ:  l004150AF l004150B5
l004150AF:
	ecx = ecx - 0x0000FFF1
	SCZO = cond(ecx)
	// succ:  l004150B5
l004150B5:
	eax = 0x80078071
	edx_eax = edi *u eax
	SCZO = cond(edx_eax)
	edx = edx >>u 0x0000000F
	SCZO = cond(edx)
	eax = edx
	eax = eax << 0x00000004
	SCZO = cond(eax)
	eax = eax - edx
	SCZO = cond(eax)
	eax = eax + edi
	SCZO = cond(eax)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax << 0x00000010
	SCZO = cond(eax)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax | ecx
	SZO = cond(eax)
	C = false
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00415030_exit
l004150D1:
	SCZO = cond(ebx - 0x000015B0)
	branch Test(ULT,C) l004151B9
	// succ:  l004150DD l004151B9
l004150DD:
	eax = 0x5E6EA9AF
	edx_eax = ebx *u eax
	SCZO = cond(edx_eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = edx
	ebp = ebp >>u 0x0000000B
	SCZO = cond(ebp)
	ebx = ebx + 0x00000000
	// succ:  l004150F0
l004150F0:
	ebx = ebx - 0x000015B0
	SCZO = cond(ebx)
	eax = 0x0000015B
	// succ:  l00415100
l00415100:
	edx = (word32) Mem0[esi:byte]
	ecx = ecx + edx
	SCZO = cond(ecx)
	edx = (word32) Mem0[esi + 0x00000001:byte]
	edi = edi + ecx
	SCZO = cond(edi)
	ecx = ecx + edx
	SCZO = cond(ecx)
	edx = (word32) Mem0[esi + 0x00000002:byte]
	edi = edi + ecx
	SCZO = cond(edi)
	ecx = ecx + edx
	SCZO = cond(ecx)
	edx = (word32) Mem0[esi + 0x00000003:byte]
	edi = edi + ecx
	SCZO = cond(edi)
	ecx = ecx + edx
	SCZO = cond(ecx)
	edx = (word32) Mem0[esi + 0x00000004:byte]
	edi = edi + ecx
	SCZO = cond(edi)
	ecx = ecx + edx
	SCZO = cond(ecx)
	edx = (word32) Mem0[esi + 0x00000005:byte]
	edi = edi + ecx
	SCZO = cond(edi)
	ecx = ecx + edx
	SCZO = cond(ecx)
	edx = (word32) Mem0[esi + 0x00000006:byte]
	edi = edi + ecx
	SCZO = cond(edi)
	ecx = ecx + edx
	SCZO = cond(ecx)
	edx = (word32) Mem0[esi + 0x00000007:byte]
	edi = edi + ecx
	SCZO = cond(edi)
	ecx = ecx + edx
	SCZO = cond(ecx)
	edx = (word32) Mem0[esi + 0x00000008:byte]
	edi = edi + ecx
	SCZO = cond(edi)
	ecx = ecx + edx
	SCZO = cond(ecx)
	edx = (word32) Mem0[esi + 0x00000009:byte]
	edi = edi + ecx
	SCZO = cond(edi)
	ecx = ecx + edx
	SCZO = cond(ecx)
	edx = (word32) Mem0[esi + 0x0000000A:byte]
	edi = edi + ecx
	SCZO = cond(edi)
	ecx = ecx + edx
	SCZO = cond(ecx)
	edx = (word32) Mem0[esi + 0x0000000B:byte]
	edi = edi + ecx
	SCZO = cond(edi)
	ecx = ecx + edx
	SCZO = cond(ecx)
	edx = (word32) Mem0[esi + 0x0000000C:byte]
	edi = edi + ecx
	SCZO = cond(edi)
	ecx = ecx + edx
	SCZO = cond(ecx)
	edx = (word32) Mem0[esi + 0x0000000D:byte]
	edi = edi + ecx
	SCZO = cond(edi)
	ecx = ecx + edx
	SCZO = cond(ecx)
	edx = (word32) Mem0[esi + 0x0000000E:byte]
	edi = edi + ecx
	SCZO = cond(edi)
	ecx = ecx + edx
	SCZO = cond(ecx)
	edx = (word32) Mem0[esi + 0x0000000F:byte]
	edi = edi + ecx
	SCZO = cond(edi)
	ecx = ecx + edx
	SCZO = cond(ecx)
	edi = edi + ecx
	SCZO = cond(edi)
	esi = esi + 0x00000010
	SCZO = cond(esi)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	branch Test(NE,Z) l00415100
	// succ:  l0041518B l00415100
l0041518B:
	eax = 0x80078071
	edx_eax = ecx *u eax
	SCZO = cond(edx_eax)
	edx = edx >>u 0x0000000F
	SCZO = cond(edx)
	edx = edx *s 0xFFFF000F
	SCZO = cond(edx)
	ecx = ecx + edx
	SCZO = cond(ecx)
	eax = 0x80078071
	edx_eax = edi *u eax
	SCZO = cond(edx_eax)
	edx = edx >>u 0x0000000F
	SCZO = cond(edx)
	edx = edx *s 0xFFFF000F
	SCZO = cond(edx)
	edi = edi + edx
	SCZO = cond(edi)
	ebp = ebp - 0x00000001
	SCZO = cond(ebp)
	branch Test(NE,Z) l004150F0
	// succ:  l004151B8 l004150F0
l004151B8:
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l004151B9
l004151B9:
	SZO = cond(ebx & ebx)
	C = false
	branch Test(EQ,Z) l00415297
	// succ:  l004151C1 l00415297
l004151C1:
	SCZO = cond(ebx - 0x00000010)
	branch Test(ULT,C) l0041525E
	// succ:  l004151CA l0041525E
l004151CA:
	eax = ebx
	eax = eax >>u 0x00000004
	SCZO = cond(eax)
	// succ:  l004151D0
l004151D0:
	edx = (word32) Mem0[esi:byte]
	ecx = ecx + edx
	SCZO = cond(ecx)
	edx = (word32) Mem0[esi + 0x00000001:byte]
	edi = edi + ecx
	SCZO = cond(edi)
	ecx = ecx + edx
	SCZO = cond(ecx)
	edx = (word32) Mem0[esi + 0x00000002:byte]
	edi = edi + ecx
	SCZO = cond(edi)
	ecx = ecx + edx
	SCZO = cond(ecx)
	edx = (word32) Mem0[esi + 0x00000003:byte]
	edi = edi + ecx
	SCZO = cond(edi)
	ecx = ecx + edx
	SCZO = cond(ecx)
	edx = (word32) Mem0[esi + 0x00000004:byte]
	edi = edi + ecx
	SCZO = cond(edi)
	ecx = ecx + edx
	SCZO = cond(ecx)
	edx = (word32) Mem0[esi + 0x00000005:byte]
	edi = edi + ecx
	SCZO = cond(edi)
	ecx = ecx + edx
	SCZO = cond(ecx)
	edx = (word32) Mem0[esi + 0x00000006:byte]
	edi = edi + ecx
	SCZO = cond(edi)
	ecx = ecx + edx
	SCZO = cond(ecx)
	edx = (word32) Mem0[esi + 0x00000007:byte]
	edi = edi + ecx
	SCZO = cond(edi)
	ecx = ecx + edx
	SCZO = cond(ecx)
	edx = (word32) Mem0[esi + 0x00000008:byte]
	edi = edi + ecx
	SCZO = cond(edi)
	ecx = ecx + edx
	SCZO = cond(ecx)
	edx = (word32) Mem0[esi + 0x00000009:byte]
	edi = edi + ecx
	SCZO = cond(edi)
	ecx = ecx + edx
	SCZO = cond(ecx)
	edx = (word32) Mem0[esi + 0x0000000A:byte]
	edi = edi + ecx
	SCZO = cond(edi)
	ecx = ecx + edx
	SCZO = cond(ecx)
	edx = (word32) Mem0[esi + 0x0000000B:byte]
	edi = edi + ecx
	SCZO = cond(edi)
	ecx = ecx + edx
	SCZO = cond(ecx)
	edx = (word32) Mem0[esi + 0x0000000C:byte]
	edi = edi + ecx
	SCZO = cond(edi)
	ecx = ecx + edx
	SCZO = cond(ecx)
	edx = (word32) Mem0[esi + 0x0000000D:byte]
	edi = edi + ecx
	SCZO = cond(edi)
	ecx = ecx + edx
	SCZO = cond(ecx)
	edx = (word32) Mem0[esi + 0x0000000E:byte]
	edi = edi + ecx
	SCZO = cond(edi)
	ecx = ecx + edx
	SCZO = cond(ecx)
	edx = (word32) Mem0[esi + 0x0000000F:byte]
	edi = edi + ecx
	SCZO = cond(edi)
	ecx = ecx + edx
	SCZO = cond(ecx)
	ebx = ebx - 0x00000010
	SCZO = cond(ebx)
	edi = edi + ecx
	SCZO = cond(edi)
	esi = esi + 0x00000010
	SCZO = cond(esi)
	eax = eax - 0x00000001
	SCZO = cond(eax)
	branch Test(NE,Z) l004151D0
	// succ:  l0041525E l004151D0
l0041525E:
	SZO = cond(ebx & ebx)
	C = false
	branch Test(EQ,Z) l00415273
	// succ:  l00415262 l00415273
l00415262:
	eax = (word32) Mem0[esi:byte]
	ecx = ecx + eax
	SCZO = cond(ecx)
	ebx = ebx - 0x00000001
	SCZO = cond(ebx)
	esi = esi + 0x00000001
	SCZO = cond(esi)
	edi = edi + ecx
	SCZO = cond(edi)
	SZO = cond(ebx & ebx)
	C = false
	branch Test(NE,Z) l00415262
	// succ:  l00415273 l00415262
l00415273:
	eax = 0x80078071
	edx_eax = ecx *u eax
	SCZO = cond(edx_eax)
	edx = edx >>u 0x0000000F
	SCZO = cond(edx)
	edx = edx *s 0xFFFF000F
	SCZO = cond(edx)
	ecx = ecx + edx
	SCZO = cond(ecx)
	eax = 0x80078071
	edx_eax = edi *u eax
	SCZO = cond(edx_eax)
	edx = edx >>u 0x0000000F
	SCZO = cond(edx)
	edx = edx *s 0xFFFF000F
	SCZO = cond(edx)
	edi = edi + edx
	SCZO = cond(edi)
	// succ:  l00415297
l00415297:
	eax = edi
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax << 0x00000010
	SCZO = cond(eax)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax | ecx
	SZO = cond(eax)
	C = false
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00415030_exit
fn00415030_exit:


