#define __MOD(a,b) a % b
/*****************************************************************************************/
/******                                                                             ******/
/******                            Structure Definitions                            ******/
/******                                                                             ******/
/*****************************************************************************************/
typedef struct BoxType BoxType;
typedef int LocationType;
struct BoxType {
     LocationType X1;
     LocationType Y1;
     LocationType X2;
     LocationType Y2;
  } ;
typedef struct {
     unsigned long f;
     unsigned char t[8];
  } FlagType;
typedef int BDimension;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } ;
typedef struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } *ArcTypePtr;
typedef unsigned int Cardinal;
typedef struct {
     LocationType X;
     LocationType Y;
     LocationType X2;
     LocationType Y2;
     long ID;
  } PointType;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
typedef struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } *LineTypePtr;
typedef unsigned char BYTE;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Scale;
     LocationType X;
     LocationType Y;
     BYTE Direction;
     char *TextString;
     void *Element;
  } ;
typedef struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Scale;
     LocationType X;
     LocationType Y;
     BYTE Direction;
     char *TextString;
     void *Element;
  } *TextTypePtr;
typedef struct polygon_st *PolygonTypePtr;
typedef struct POLYAREA POLYAREA;
typedef struct PLINE PLINE;
typedef struct VNODE VNODE;
struct {
     unsigned int bits_at_0;
  } ;
typedef struct CVCList CVCList;
struct CVCList {
     double angle;
     VNODE *parent;
     CVCList *prev;
     CVCList *next;
     CVCList *head;
     char poly;
     char side;
     char __pad[2];
  } ;
typedef int vertex[2];
typedef vertex Vector;
struct VNODE {
     VNODE *next;
     VNODE *prev;
     VNODE *shared;
     struct {
       unsigned int bits_at_0;
    } Flags;
     CVCList *cvc_prev;
     CVCList *cvc_next;
     Vector point;
  } ;
typedef struct rtree rtree_t;
struct rtree {
     struct rtree_node *root;
     int size;
  } ;
struct {
     unsigned int bits_at_0;
  } ;
struct PLINE {
     int xmin;
     int ymin;
     int xmax;
     int ymax;
     PLINE *next;
     VNODE head;
     unsigned int Count;
     double area;
     rtree_t *tree;
     struct {
       unsigned int bits_at_0;
    } Flags;
  } ;
struct POLYAREA {
     POLYAREA *f;
     POLYAREA *b;
     PLINE *contours;
  } ;
struct {
     LocationType X;
     LocationType Y;
     LocationType X2;
     LocationType Y2;
     long ID;
  } ;
typedef struct {
     LocationType X;
     LocationType Y;
     LocationType X2;
     LocationType Y2;
     long ID;
  } *PointTypePtr;
struct polygon_st {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     Cardinal PointN;
     Cardinal PointMax;
     POLYAREA *Clipped;
     PLINE *NoHoles;
     int NoHolesValid;
     PointTypePtr Points;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } ;
typedef char Boolean;
typedef struct {
     char *name;
     char *value;
  } AttributeType;
typedef struct {
     int Number;
     int Max;
     AttributeType *List;
  } AttributeListType;
struct {
     char *Name;
     Cardinal LineN;
     Cardinal TextN;
     Cardinal PolygonN;
     Cardinal ArcN;
     Cardinal LineMax;
     Cardinal TextMax;
     Cardinal PolygonMax;
     Cardinal ArcMax;
     LineTypePtr Line;
     TextTypePtr Text;
     PolygonTypePtr Polygon;
     ArcTypePtr Arc;
     rtree_t *line_tree;
     rtree_t *text_tree;
     rtree_t *polygon_tree;
     rtree_t *arc_tree;
     Boolean On;
     char *Color;
     char *SelectedColor;
     AttributeListType Attributes;
  } ;
typedef struct {
     char *Name;
     Cardinal LineN;
     Cardinal TextN;
     Cardinal PolygonN;
     Cardinal ArcN;
     Cardinal LineMax;
     Cardinal TextMax;
     Cardinal PolygonMax;
     Cardinal ArcMax;
     LineTypePtr Line;
     TextTypePtr Text;
     PolygonTypePtr Polygon;
     ArcTypePtr Arc;
     rtree_t *line_tree;
     rtree_t *text_tree;
     rtree_t *polygon_tree;
     rtree_t *arc_tree;
     Boolean On;
     char *Color;
     char *SelectedColor;
     AttributeListType Attributes;
  } *LayerTypePtr;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Scale;
     LocationType X;
     LocationType Y;
     BYTE Direction;
     char *TextString;
     void *Element;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } ;
struct {
     char *Name;
     Cardinal LineN;
     Cardinal TextN;
     Cardinal PolygonN;
     Cardinal ArcN;
     Cardinal LineMax;
     Cardinal TextMax;
     Cardinal PolygonMax;
     Cardinal ArcMax;
     LineTypePtr Line;
     TextTypePtr Text;
     PolygonTypePtr Polygon;
     ArcTypePtr Arc;
     rtree_t *line_tree;
     rtree_t *text_tree;
     rtree_t *polygon_tree;
     rtree_t *arc_tree;
     Boolean On;
     char *Color;
     char *SelectedColor;
     AttributeListType Attributes;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     BDimension Mask;
     BDimension DrillingHole;
     LocationType X;
     LocationType Y;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
typedef struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     BDimension Mask;
     BDimension DrillingHole;
     LocationType X;
     LocationType Y;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } *PinTypePtr;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     BDimension Mask;
     BDimension DrillingHole;
     LocationType X;
     LocationType Y;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
typedef struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Scale;
     LocationType X;
     LocationType Y;
     BYTE Direction;
     char *TextString;
     void *Element;
  } TextType;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     BDimension Mask;
     BDimension DrillingHole;
     LocationType X;
     LocationType Y;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     BDimension Mask;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
typedef struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     BDimension Mask;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } *PadTypePtr;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     TextType Name[3];
     LocationType MarkX;
     LocationType MarkY;
     Cardinal PinN;
     Cardinal PinMax;
     Cardinal PadN;
     Cardinal PadMax;
     Cardinal LineN;
     Cardinal LineMax;
     Cardinal ArcN;
     Cardinal ArcMax;
     PinTypePtr Pin;
     PadTypePtr Pad;
     LineTypePtr Line;
     ArcTypePtr Arc;
     BoxType VBox;
     AttributeListType Attributes;
  } ;
typedef struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     TextType Name[3];
     LocationType MarkX;
     LocationType MarkY;
     Cardinal PinN;
     Cardinal PinMax;
     Cardinal PadN;
     Cardinal PadMax;
     Cardinal LineN;
     Cardinal LineMax;
     Cardinal ArcN;
     Cardinal ArcMax;
     PinTypePtr Pin;
     PadTypePtr Pad;
     LineTypePtr Line;
     ArcTypePtr Arc;
     BoxType VBox;
     AttributeListType Attributes;
  } *ElementTypePtr;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     Cardinal group1;
     Cardinal group2;
  } ;
typedef struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     Cardinal group1;
     Cardinal group2;
  } *RatTypePtr;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
typedef struct {
     LineTypePtr Line;
     Boolean Valid;
     Cardinal LineN;
     Cardinal LineMax;
     BDimension Width;
     BDimension Height;
     BDimension Delta;
  } SymbolType;
typedef struct {
     LocationType MaxHeight;
     LocationType MaxWidth;
     BoxType DefaultSymbol;
     SymbolType Symbol[256];
     Boolean Valid;
     char __pad[3];
  } FontType;
typedef struct {
     Cardinal Number[16];
     Cardinal Entries[16][18];
  } LayerGroupType;
typedef struct {
     BDimension Thick;
     BDimension Diameter;
     BDimension Hole;
     BDimension Keepaway;
     char *Name;
     int index;
  } RouteStyleType;
struct {
     char *ListEntry;
     char *AllocatedMemory;
     char *Template;
     char *Package;
     char *Value;
     char *Description;
  } ;
typedef struct {
     char *ListEntry;
     char *AllocatedMemory;
     char *Template;
     char *Package;
     char *Value;
     char *Description;
  } *LibraryEntryTypePtr;
struct {
     char *Name;
     char *directory;
     char *Style;
     Cardinal EntryN;
     Cardinal EntryMax;
     LibraryEntryTypePtr Entry;
     char flag;
     char internal;
     char __pad[2];
  } ;
typedef struct {
     char *Name;
     char *directory;
     char *Style;
     Cardinal EntryN;
     Cardinal EntryMax;
     LibraryEntryTypePtr Entry;
     char flag;
     char internal;
     char __pad[2];
  } *LibraryMenuTypePtr;
typedef struct {
     Cardinal MenuN;
     Cardinal MenuMax;
     LibraryMenuTypePtr Menu;
  } LibraryType;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     BDimension Mask;
     BDimension DrillingHole;
     LocationType X;
     LocationType Y;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     BDimension Mask;
     BDimension DrillingHole;
     LocationType X;
     LocationType Y;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     BDimension Mask;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     TextType Name[3];
     LocationType MarkX;
     LocationType MarkY;
     Cardinal PinN;
     Cardinal PinMax;
     Cardinal PadN;
     Cardinal PadMax;
     Cardinal LineN;
     Cardinal LineMax;
     Cardinal ArcN;
     Cardinal ArcMax;
     PinTypePtr Pin;
     PadTypePtr Pad;
     LineTypePtr Line;
     ArcTypePtr Arc;
     BoxType VBox;
     AttributeListType Attributes;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     Cardinal group1;
     Cardinal group2;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Scale;
     LocationType X;
     LocationType Y;
     BYTE Direction;
     char *TextString;
     void *Element;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } ;
typedef struct {
     char *Name;
     Cardinal LineN;
     Cardinal TextN;
     Cardinal PolygonN;
     Cardinal ArcN;
     Cardinal LineMax;
     Cardinal TextMax;
     Cardinal PolygonMax;
     Cardinal ArcMax;
     LineTypePtr Line;
     TextTypePtr Text;
     PolygonTypePtr Polygon;
     ArcTypePtr Arc;
     rtree_t *line_tree;
     rtree_t *text_tree;
     rtree_t *polygon_tree;
     rtree_t *arc_tree;
     Boolean On;
     char *Color;
     char *SelectedColor;
     AttributeListType Attributes;
  } LayerType;
struct {
     Cardinal ViaN;
     Cardinal ViaMax;
     Cardinal ElementN;
     Cardinal ElementMax;
     Cardinal RatN;
     Cardinal RatMax;
     int LayerN;
     PinTypePtr Via;
     ElementTypePtr Element;
     RatTypePtr Rat;
     rtree_t *via_tree;
     rtree_t *element_tree;
     rtree_t *pin_tree;
     rtree_t *pad_tree;
     rtree_t *name_tree[3];
     rtree_t *rat_tree;
     struct PCBType *pcb;
     LayerType Layer[18];
  } ;
typedef struct {
     Cardinal ViaN;
     Cardinal ViaMax;
     Cardinal ElementN;
     Cardinal ElementMax;
     Cardinal RatN;
     Cardinal RatMax;
     int LayerN;
     PinTypePtr Via;
     ElementTypePtr Element;
     RatTypePtr Rat;
     rtree_t *via_tree;
     rtree_t *element_tree;
     rtree_t *pin_tree;
     rtree_t *pad_tree;
     rtree_t *name_tree[3];
     rtree_t *rat_tree;
     struct PCBType *pcb;
     LayerType Layer[18];
  } *DataTypePtr;
struct PCBType {
     long ID;
     FlagType Flags;
     char *Name;
     char *Filename;
     char *PrintFilename;
     char *Netlistname;
     char ThermStyle;
     Boolean Changed;
     Boolean ViaOn;
     Boolean ElementOn;
     Boolean RatOn;
     Boolean InvisibleObjectsOn;
     Boolean PinOn;
     Boolean SilkActive;
     Boolean RatDraw;
     char *ViaColor;
     char *ViaSelectedColor;
     char *PinColor;
     char *PinSelectedColor;
     char *PinNameColor;
     char *ElementColor;
     char *RatColor;
     char *InvisibleObjectsColor;
     char *InvisibleMarkColor;
     char *ElementSelectedColor;
     char *RatSelectedColor;
     char *ConnectedColor;
     char *WarnColor;
     char *MaskColor;
     long CursorX;
     long CursorY;
     long Clipping;
     int Bloat;
     int Shrink;
     int minWid;
     int minSlk;
     int minDrill;
     int minRing;
     int GridOffsetX;
     int GridOffsetY;
     int MaxWidth;
     int MaxHeight;
     double Grid;
     double Zoom;
     double IsleArea;
     double ThermScale;
     FontType Font;
     LayerGroupType LayerGroups;
     RouteStyleType RouteStyle[4];
     LibraryType NetlistLib;
     AttributeListType Attributes;
     DataTypePtr Data;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Scale;
     LocationType X;
     LocationType Y;
     BYTE Direction;
     char *TextString;
     void *Element;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } ;
struct {
     Cardinal ViaN;
     Cardinal ViaMax;
     Cardinal ElementN;
     Cardinal ElementMax;
     Cardinal RatN;
     Cardinal RatMax;
     int LayerN;
     PinTypePtr Via;
     ElementTypePtr Element;
     RatTypePtr Rat;
     rtree_t *via_tree;
     rtree_t *element_tree;
     rtree_t *pin_tree;
     rtree_t *pad_tree;
     rtree_t *name_tree[3];
     rtree_t *rat_tree;
     struct PCBType *pcb;
     LayerType Layer[18];
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Scale;
     LocationType X;
     LocationType Y;
     BYTE Direction;
     char *TextString;
     void *Element;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } ;
struct {
     char *Name;
     Cardinal LineN;
     Cardinal TextN;
     Cardinal PolygonN;
     Cardinal ArcN;
     Cardinal LineMax;
     Cardinal TextMax;
     Cardinal PolygonMax;
     Cardinal ArcMax;
     LineTypePtr Line;
     TextTypePtr Text;
     PolygonTypePtr Polygon;
     ArcTypePtr Arc;
     rtree_t *line_tree;
     rtree_t *text_tree;
     rtree_t *polygon_tree;
     rtree_t *arc_tree;
     Boolean On;
     char *Color;
     char *SelectedColor;
     AttributeListType Attributes;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     BDimension Mask;
     BDimension DrillingHole;
     LocationType X;
     LocationType Y;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     char *ListEntry;
     char *AllocatedMemory;
     char *Template;
     char *Package;
     char *Value;
     char *Description;
  } ;
typedef struct {
     char *Name;
     char *directory;
     char *Style;
     Cardinal EntryN;
     Cardinal EntryMax;
     LibraryEntryTypePtr Entry;
     char flag;
     char internal;
     char __pad[2];
  } LibraryMenuType;
struct {
     LocationType X;
     LocationType Y;
     long type;
     void *ptr1;
     void *ptr2;
     Cardinal group;
     LibraryMenuType *menu;
  } ;
typedef struct {
     LocationType X;
     LocationType Y;
     long type;
     void *ptr1;
     void *ptr2;
     Cardinal group;
     LibraryMenuType *menu;
  } *ConnectionTypePtr;
struct {
     BDimension Thick;
     BDimension Diameter;
     BDimension Hole;
     BDimension Keepaway;
     char *Name;
     int index;
  } ;
typedef struct {
     BDimension Thick;
     BDimension Diameter;
     BDimension Hole;
     BDimension Keepaway;
     char *Name;
     int index;
  } *RouteStyleTypePtr;
struct {
     Cardinal ConnectionN;
     Cardinal ConnectionMax;
     ConnectionTypePtr Connection;
     RouteStyleTypePtr Style;
  } ;
typedef struct {
     Cardinal ConnectionN;
     Cardinal ConnectionMax;
     ConnectionTypePtr Connection;
     RouteStyleTypePtr Style;
  } *NetTypePtr;
struct {
     Cardinal NetN;
     Cardinal NetMax;
     NetTypePtr Net;
  } ;
typedef struct {
     Cardinal NetN;
     Cardinal NetMax;
     NetTypePtr Net;
  } *NetListTypePtr;
struct {
     Cardinal NetListN;
     Cardinal NetListMax;
     NetListTypePtr NetList;
  } ;
typedef struct {
     Cardinal NetListN;
     Cardinal NetListMax;
     NetListTypePtr NetList;
  } *NetListListTypePtr;
struct {
     char *ListEntry;
     char *AllocatedMemory;
     char *Template;
     char *Package;
     char *Value;
     char *Description;
  } ;
struct {
     LocationType X;
     LocationType Y;
     long type;
     void *ptr1;
     void *ptr2;
     Cardinal group;
     LibraryMenuType *menu;
  } ;
struct {
     BDimension Thick;
     BDimension Diameter;
     BDimension Hole;
     BDimension Keepaway;
     char *Name;
     int index;
  } ;
struct {
     Cardinal ConnectionN;
     Cardinal ConnectionMax;
     ConnectionTypePtr Connection;
     RouteStyleTypePtr Style;
  } ;
struct {
     Cardinal NetN;
     Cardinal NetMax;
     NetTypePtr Net;
  } ;
typedef struct {
     Cardinal NetListN;
     Cardinal NetListMax;
     NetListTypePtr NetList;
  } NetListListType;
typedef struct {
     char *name;
     char *need_coord_msg;
     int (*trigger_cb)( int , char **, int , int  );
     char *description;
     char *syntax;
  } HID_Action;
typedef struct _toporouter_edge_t toporouter_edge_t;
typedef struct _GtsEdge GtsEdge;
typedef struct _GtsSegment GtsSegment;
typedef struct _GtsObject GtsObject;
typedef struct _GtsObjectClass GtsObjectClass;
typedef struct _GtsObjectClassInfo GtsObjectClassInfo;
typedef char gchar;
typedef unsigned int guint;
typedef void (*GtsObjectClassInitFunc)( GtsObjectClass * );
typedef void (*GtsObjectInitFunc)( GtsObject * );
typedef void (*GtsArgSetFunc)( GtsObject * );
typedef void (*GtsArgGetFunc)( GtsObject * );
struct _GtsObjectClassInfo {
     gchar name[40];
     guint object_size;
     guint class_size;
     GtsObjectClassInitFunc class_init_func;
     GtsObjectInitFunc object_init_func;
     GtsArgSetFunc arg_set_func;
     GtsArgGetFunc arg_get_func;
  } ;
typedef struct _GtsFile GtsFile;
typedef struct _IO_FILE FILE;
struct _IO_marker {
     struct _IO_marker *_next;
     struct _IO_FILE *_sbuf;
     int _pos;
  } ;
typedef long __off_t;
typedef void _IO_lock_t;
typedef long long __quad_t;
typedef __quad_t __off64_t;
typedef unsigned int size_t;
struct _IO_FILE {
     int _flags;
     char *_IO_read_ptr;
     char *_IO_read_end;
     char *_IO_read_base;
     char *_IO_write_base;
     char *_IO_write_ptr;
     char *_IO_write_end;
     char *_IO_buf_base;
     char *_IO_buf_end;
     char *_IO_save_base;
     char *_IO_backup_base;
     char *_IO_save_end;
     struct _IO_marker *_markers;
     struct _IO_FILE *_chain;
     int _fileno;
     int _flags2;
     __off_t _old_offset;
     unsigned short _cur_column;
     char _vtable_offset;
     char _shortbuf[1];
     _IO_lock_t *_lock;
     __off64_t _offset;
     void *__pad1;
     void *__pad2;
     void *__pad3;
     void *__pad4;
     size_t __pad5;
     int _mode;
     char _unused2[40];
  } ;
typedef struct _GString GString;
typedef unsigned int gsize;
struct _GString {
     gchar *str;
     gsize len;
     gsize allocated_len;
  } ;
enum  { GTS_NONE = 256, GTS_INT = 512, GTS_UINT = 1024, GTS_FLOAT = 2048, GTS_DOUBLE = 4096, GTS_STRING = 8192, GTS_FILE = 16384, GTS_ERROR = 32768, };
typedef enum  { GTS_NONE = 256, GTS_INT = 512, GTS_UINT = 1024, GTS_FLOAT = 2048, GTS_DOUBLE = 4096, GTS_STRING = 8192, GTS_FILE = 16384, GTS_ERROR = 32768, } GtsTokenType;
typedef int gint;
struct _GtsFile {
     FILE *fp;
     gchar *s;
     gchar *s1;
     guint line;
     guint pos;
     GString *token;
     GtsTokenType type;
     gchar *error;
     guint curline;
     guint curpos;
     guint scope;
     guint scope_max;
     gint next_token;
     gchar *delimiters;
     gchar *comments;
     gchar *tokens;
  } ;
typedef struct _GtsColor GtsColor;
typedef float gfloat;
struct _GtsColor {
     gfloat r;
     gfloat g;
     gfloat b;
  } ;
struct _GtsObjectClass {
     GtsObjectClassInfo info;
     GtsObjectClass *parent_class;
     void (*clone)( GtsObject *, GtsObject * );
     void (*destroy)( GtsObject * );
     void (*read)( GtsObject **, GtsFile * );
     void (*write)( GtsObject *, FILE * );
     GtsColor (*color)( GtsObject * );
     void (*attributes)( GtsObject *, GtsObject * );
  } ;
typedef void *gpointer;
typedef unsigned int guint32;
struct _GtsObject {
     GtsObjectClass *klass;
     gpointer reserved;
     guint32 flags;
  } ;
typedef struct _GtsVertex GtsVertex;
typedef struct _GtsPoint GtsPoint;
typedef double gdouble;
struct _GtsPoint {
     GtsObject object;
     gdouble x;
     gdouble y;
     gdouble z;
  } ;
typedef struct _GSList GSList;
struct _GSList {
     gpointer data;
     GSList *next;
  } ;
struct _GtsVertex {
     GtsPoint p;
     GSList *segments;
  } ;
struct _GtsSegment {
     GtsObject object;
     GtsVertex *v1;
     GtsVertex *v2;
  } ;
struct _GtsEdge {
     GtsSegment segment;
     GSList *triangles;
  } ;
typedef struct _GList GList;
struct _GList {
     gpointer data;
     GList *next;
     GList *prev;
  } ;
struct _toporouter_edge_t {
     GtsEdge e;
     guint flags;
     GList *routing;
  } ;
typedef struct _toporouter_bbox_t toporouter_bbox_t;
typedef struct _GtsBBox GtsBBox;
struct _GtsBBox {
     GtsObject object;
     gpointer bounded;
     gdouble x1;
     gdouble y1;
     gdouble z1;
     gdouble x2;
     gdouble y2;
     gdouble z2;
  } ;
enum  { PAD = 0, PIN = 1, VIA = 2, ARC = 3, VIA_SHADOW = 4, LINE = 5, OTHER = 6, BOARD = 7, EXPANSION_AREA = 8, POLYGON = 9, TEMP = 10, };
typedef enum  { PAD = 0, PIN = 1, VIA = 2, ARC = 3, VIA_SHADOW = 4, LINE = 5, OTHER = 6, BOARD = 7, EXPANSION_AREA = 8, POLYGON = 9, TEMP = 10, } toporouter_term_t;
typedef struct _GtsSurface GtsSurface;
typedef struct _GHashTable GHashTable;
struct _GHashTable  ;
typedef struct _GtsFaceClass GtsFaceClass;
typedef struct _GtsTriangleClass GtsTriangleClass;
struct _GtsTriangleClass {
     GtsObjectClass parent_class;
  } ;
struct _GtsFaceClass {
     GtsTriangleClass parent_class;
  } ;
typedef struct _GtsEdgeClass GtsEdgeClass;
typedef struct _GtsSegmentClass GtsSegmentClass;
struct _GtsSegmentClass {
     GtsObjectClass parent_class;
  } ;
struct _GtsEdgeClass {
     GtsSegmentClass parent_class;
  } ;
typedef struct _GtsVertexClass GtsVertexClass;
typedef struct _GtsPointClass GtsPointClass;
typedef gint gboolean;
struct _GtsPointClass {
     GtsObjectClass parent_class;
     gboolean binary;
  } ;
struct _GtsVertexClass {
     GtsPointClass parent_class;
     void (*intersection_attributes)( GtsVertex *, GtsObject *, GtsObject * );
  } ;
struct _GtsSurface {
     GtsObject object;
     GHashTable *faces;
     GtsFaceClass *face_class;
     GtsEdgeClass *edge_class;
     GtsVertexClass *vertex_class;
     gboolean keep_faces;
  } ;
typedef struct _GtsTriangle GtsTriangle;
struct _GtsTriangle {
     GtsObject object;
     GtsEdge *e1;
     GtsEdge *e2;
     GtsEdge *e3;
  } ;
typedef struct _GPtrArray GPtrArray;
struct _GPtrArray {
     gpointer *pdata;
     guint len;
  } ;
typedef struct _toporouter_netlist_t toporouter_netlist_t;
struct _toporouter_netlist_t {
     GPtrArray *clusters;
     GPtrArray *routes;
     char *netlist;
     char *style;
     GList *routed;
  } ;
struct _toporouter_cluster_t {
     gint c;
     gint pc;
     GPtrArray *boxes;
     toporouter_netlist_t *netlist;
  } ;
struct _toporouter_bbox_t {
     GtsBBox b;
     toporouter_term_t type;
     void *data;
     int layer;
     GtsSurface *surface;
     GtsTriangle *enclosing;
     GList *constraints;
     GtsPoint *point;
     GtsPoint *realpoint;
     struct _toporouter_cluster_t *cluster;
  } ;
typedef struct _toporouter_vertex_class_t toporouter_vertex_class_t;
struct _toporouter_vertex_class_t {
     GtsVertexClass parent_class;
  } ;
typedef struct _toporouter_vertex_t toporouter_vertex_t;
typedef struct _toporouter_oproute_t toporouter_oproute_t;
typedef struct _toporouter_serpintine_t toporouter_serpintine_t;
struct _toporouter_serpintine_t {
     GList *arcs;
     gdouble x;
     gdouble y;
     gdouble x0;
     gdouble y0;
     gdouble x1;
     gdouble y1;
     gpointer start;
     gdouble halfa;
     gdouble radius;
     guint nhalfcycles;
  } ;
struct _toporouter_oproute_t {
     GList *arcs;
     toporouter_vertex_t *term1;
     toporouter_vertex_t *term2;
     char *style;
     char *netlist;
     guint layergroup;
     gdouble tof;
     GList *path;
     toporouter_serpintine_t *serp;
  } ;
struct _toporouter_arc_t {
     GtsObject object;
     gdouble x0;
     gdouble y0;
     gdouble x1;
     gdouble y1;
     toporouter_vertex_t *centre;
     toporouter_vertex_t *v;
     gdouble r;
     gint dir;
     GList *clearance;
     toporouter_oproute_t *oproute;
     toporouter_vertex_t *v1;
     toporouter_vertex_t *v2;
  } ;
struct _toporouter_route_t {
     struct _toporouter_netlist_t *netlist;
     struct _toporouter_cluster_t *src;
     struct _toporouter_cluster_t *dest;
     struct _toporouter_cluster_t *psrc;
     struct _toporouter_cluster_t *pdest;
     gdouble score;
     gdouble detourscore;
     toporouter_vertex_t *curpoint;
     GHashTable *alltemppoints;
     GList *path;
     guint flags;
     GList *destvertices;
     GList *srcvertices;
     GList *topopath;
     gdouble pscore;
     GList *ppath;
     gint *ppathindices;
  } ;
struct _toporouter_vertex_t {
     GtsVertex v;
     struct _toporouter_bbox_t *bbox;
     struct _toporouter_vertex_t *parent;
     struct _toporouter_vertex_t *child;
     toporouter_edge_t *routingedge;
     guint flags;
     gdouble gcost;
     gdouble hcost;
     guint gn;
     struct _toporouter_arc_t *arc;
     struct _toporouter_oproute_t *oproute;
     struct _toporouter_route_t *route;
     gdouble thickness;
  } ;
typedef struct _toporouter_constraint_class_t toporouter_constraint_class_t;
typedef struct _GtsConstraintClass GtsConstraintClass;
struct _GtsConstraintClass {
     GtsEdgeClass parent_class;
  } ;
struct _toporouter_constraint_class_t {
     GtsConstraintClass parent_class;
  } ;
typedef struct _toporouter_constraint_t toporouter_constraint_t;
typedef struct _GtsConstraint GtsConstraint;
struct _GtsConstraint {
     GtsEdge edge;
  } ;
struct _toporouter_constraint_t {
     GtsConstraint c;
     toporouter_bbox_t *box;
     GList *routing;
  } ;
typedef struct _toporouter_arc_t toporouter_arc_t;
typedef struct _toporouter_rubberband_arc_t toporouter_rubberband_arc_t;
struct _toporouter_rubberband_arc_t {
     toporouter_vertex_t *pathv;
     toporouter_vertex_t *arcv;
     gdouble r;
     gdouble d;
     gint wind;
     GList *list;
  } ;
typedef struct _toporouter_route_t toporouter_route_t;
typedef struct {
     gdouble x;
     gdouble y;
  } toporouter_spoint_t;
typedef struct _toporouter_cluster_t toporouter_cluster_t;
typedef struct {
     double s;
     int mode;
     void *data;
     char *filename;
     double iw;
     double ih;
  } drawing_context_t;
typedef struct _toporouter_t toporouter_t;
typedef struct _GNode GNode;
struct _GNode {
     gpointer data;
     GNode *next;
     GNode *prev;
     GNode *parent;
     GNode *children;
  } ;
typedef struct {
     GtsSurface *surface;
     GList *vertices;
     GList *constraints;
     GList *edges;
  } toporouter_layer_t;
typedef struct {
     guint id;
     guint *pairwise_nodetour;
     gdouble pairwise_detour_sum;
     gdouble score;
     guint pairwise_fails;
     toporouter_route_t *routedata;
     toporouter_t *r;
  } toporouter_netscore_t;
typedef long __time_t;
typedef long __suseconds_t;
struct timeval {
     __time_t tv_sec;
     __suseconds_t tv_usec;
  } ;
struct _toporouter_t {
     GSList *bboxes;
     GNode *bboxtree;
     toporouter_layer_t *layers;
     GList *paths;
     GList *keepoutlayers;
     guint flags;
     GList *destboxes;
     GList *consumeddestboxes;
     guint viamax;
     gdouble viacost;
     gdouble stublength;
     gdouble serpintine_half_amplitude;
     gdouble wiring_score;
     GPtrArray *routes;
     GPtrArray *netlists;
     GList *routednets;
     GList *failednets;
     gint (*netsort)( toporouter_netscore_t **, toporouter_netscore_t ** );
     struct timeval  starttime;
     FILE *debug;
  } ;
typedef void *gconstpointer;
typedef struct {
     GList *points;
     toporouter_vertex_t *v1;
     toporouter_vertex_t *v2;
     toporouter_vertex_t *origin;
  } toporouter_vertex_region_t;
enum  { PAD = 0, PIN = 1, VIA = 2, ARC = 3, VIA_SHADOW = 4, LINE = 5, OTHER = 6, BOARD = 7, EXPANSION_AREA = 8, POLYGON = 9, TEMP = 10, };
typedef struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     Cardinal group1;
     Cardinal group2;
  } RatType;
typedef struct _toporouter_arc_class_t toporouter_arc_class_t;
struct _toporouter_arc_class_t {
     GtsObjectClass parent_class;
     gboolean binary;
  } ;
typedef struct _toporouter_bbox_class_t toporouter_bbox_class_t;
typedef struct _GtsBBoxClass GtsBBoxClass;
struct _GtsBBoxClass {
     GtsObjectClass parent_class;
  } ;
struct _toporouter_bbox_class_t {
     GtsBBoxClass parent_class;
  } ;
enum  { PAD = 0, PIN = 1, VIA = 2, ARC = 3, VIA_SHADOW = 4, LINE = 5, OTHER = 6, BOARD = 7, EXPANSION_AREA = 8, POLYGON = 9, TEMP = 10, };
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Scale;
     LocationType X;
     LocationType Y;
     BYTE Direction;
     char *TextString;
     void *Element;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } ;
typedef struct _toporouter_edge_class_t toporouter_edge_class_t;
struct _toporouter_edge_class_t {
     GtsEdgeClass parent_class;
  } ;
enum  { PAD = 0, PIN = 1, VIA = 2, ARC = 3, VIA_SHADOW = 4, LINE = 5, OTHER = 6, BOARD = 7, EXPANSION_AREA = 8, POLYGON = 9, TEMP = 10, };
typedef struct _GtsFace GtsFace;
struct _GtsFace {
     GtsTriangle triangle;
     GSList *surfaces;
  } ;
typedef struct _GtsEHeap GtsEHeap;
typedef gdouble (*GtsKeyFunc)( gpointer , gpointer  );
struct _GtsEHeap {
     GPtrArray *elts;
     GtsKeyFunc func;
     gpointer data;
     gboolean frozen;
     gboolean randomized;
  } ;
typedef void (*GFunc)( gpointer , gpointer  );
typedef struct _GtsEHeapPair GtsEHeapPair;
struct _GtsEHeapPair {
     gpointer data;
     gdouble key;
     guint pos;
  } ;
typedef struct _GtsSurfaceClass GtsSurfaceClass;
struct _GtsSurfaceClass {
     GtsObjectClass parent_class;
     void (*add_face)( GtsSurface *, GtsFace * );
     void (*remove_face)( GtsSurface *, GtsFace * );
  } ;
typedef __time_t time_t;
typedef struct PCBType *PCBTypePtr;
typedef struct {
     Boolean grid_units_mm;
     int verbose;
     char *BlackColor;
     char *WhiteColor;
     char *BackgroundColor;
     char *CrosshairColor;
     char *CrossColor;
     char *ViaColor;
     char *ViaSelectedColor;
     char *PinColor;
     char *PinSelectedColor;
     char *PinNameColor;
     char *ElementColor;
     char *RatColor;
     char *InvisibleObjectsColor;
     char *InvisibleMarkColor;
     char *ElementSelectedColor;
     char *RatSelectedColor;
     char *ConnectedColor;
     char *OffLimitColor;
     char *GridColor;
     char *LayerColor[16];
     char *LayerSelectedColor[16];
     char *WarnColor;
     char *MaskColor;
     int ViaThickness;
     int ViaDrillingHole;
     int LineThickness;
     int RatThickness;
     int Keepaway;
     int MaxWidth;
     int MaxHeight;
     int TextScale;
     int AlignmentDistance;
     int Bloat;
     int Shrink;
     int minWid;
     int minSlk;
     int minDrill;
     int minRing;
     double Grid;
     double IsleArea;
     double grid_increment_mm;
     double grid_increment_mil;
     double size_increment_mm;
     double size_increment_mil;
     double line_increment_mm;
     double line_increment_mil;
     double clear_increment_mm;
     double clear_increment_mil;
     double Zoom;
     double PinoutZoom;
     int PinoutNameLength;
     int Volume;
     int CharPerLine;
     int Mode;
     int BufferNumber;
     int GridFactor;
     int BackupInterval;
     char *DefaultLayerName[16];
     char *FontCommand;
     char *FileCommand;
     char *ElementCommand;
     char *PrintFile;
     char *LibraryCommandDir;
     char *LibraryCommand;
     char *LibraryContentsCommand;
     char *LibraryTree;
     char *SaveCommand;
     char *LibraryFilename;
     char *FontFile;
     char *Groups;
     char *Routes;
     char *FilePath;
     char *RatPath;
     char *RatCommand;
     char *FontPath;
     char *PinoutFont;
     char *ElementPath;
     char *LibraryPath;
     char *Size;
     char *Media;
     char *MenuFile;
     char *BackgroundImage;
     char *ScriptFilename;
     char *ActionString;
     char *FabAuthor;
     char *InitialLayerStack;
     Boolean DumpMenuFile;
     LocationType PinoutOffsetX;
     LocationType PinoutOffsetY;
     int PinoutTextOffsetX;
     int PinoutTextOffsetY;
     RouteStyleType RouteStyle[4];
     LayerGroupType LayerGroups;
     Boolean ClearLine;
     Boolean FullPoly;
     Boolean UniqueNames;
     Boolean SnapPin;
     Boolean ShowSolderSide;
     Boolean SaveLastCommand;
     Boolean SaveInTMP;
     Boolean DrawGrid;
     Boolean RatWarn;
     Boolean StipplePolygons;
     Boolean AllDirectionLines;
     Boolean RubberBandMode;
     Boolean SwapStartDirection;
     Boolean ShowDRC;
     Boolean AutoDRC;
     Boolean ShowNumber;
     Boolean OrthogonalMoves;
     Boolean ResetAfterElement;
     Boolean liveRouting;
     Boolean RingBellWhenFinished;
     Boolean AutoPlace;
     int HistorySize;
     int init_done;
  } SettingType;
/*****************************************************************************************/
/******                                                                             ******/
/******                          Function Prototypes                                ******/
/******                                                                             ******/
/*****************************************************************************************/
ArcTypePtr CreateNewArcOnLayer( LayerTypePtr , LocationType , LocationType , BDimension , BDimension , int , int , BDimension , BDimension , FlagType  );
LineTypePtr CreateDrawnLineOnLayer( LayerTypePtr , LocationType , LocationType , LocationType , LocationType , BDimension , BDimension , FlagType  );
PinTypePtr CreateNewVia( DataTypePtr , LocationType , LocationType , BDimension , BDimension , BDimension , BDimension , char *, FlagType  );
void ClearAndRedrawOutput( void );
void DrawLine( LayerTypePtr , LineTypePtr , int  );
void DrawVia( PinTypePtr , int  );
void Draw( void );
void Message( char *, ... );
void ResetFoundLinesAndPolygons( Boolean  );
void ResetFoundPinsViasAndPads( Boolean  );
int GetLayerGroupNumberByNumber( Cardinal  );
FlagType MakeFlags( unsigned int  );
void FreeNetListListMemory( NetListListTypePtr  );
NetListListType CollectSubnets( Boolean  );
Boolean AddAllRats( Boolean , void (*)( void ) );
Boolean DeleteRats( Boolean  );
void RestoreUndoSerialNumber( void );
void SaveUndoSerialNumber( void );
void AddObjectToCreateUndoList( int , void *, void *, void * );
void IncrementUndoSerialNumber( void );
void hid_register_actions( HID_Action *, int  );
void toporouter_edge_init( toporouter_edge_t * );
void toporouter_bbox_init( toporouter_bbox_t * );
void toporouter_vertex_class_init( toporouter_vertex_class_t * );
void toporouter_vertex_init( toporouter_vertex_t * );
void toporouter_constraint_class_init( toporouter_constraint_class_t * );
void toporouter_constraint_init( toporouter_constraint_t * );
void toporouter_arc_init( toporouter_arc_t * );
gint coord_intersect_prop( gdouble , gdouble , gdouble , gdouble , gdouble , gdouble , gdouble , gdouble  );
int point_intersect_prop( GtsPoint *, GtsPoint *, GtsPoint *, GtsPoint * );
gdouble route_heap_cmp( gpointer , gpointer  );
void toporouter_heap_search( gpointer , gpointer  );
gint compare_rubberband_arcs( toporouter_rubberband_arc_t *, toporouter_rubberband_arc_t * );
gint route_detour_compare( toporouter_route_t **, toporouter_route_t ** );
void register_toporouter_action_list( void );
void arc_ortho_projections( toporouter_arc_t *, toporouter_arc_t *, gdouble *, gdouble * );
gdouble vertices_plane_distance( toporouter_spoint_t *, toporouter_spoint_t * );
void points_on_line( GtsPoint *, gdouble , gdouble , GtsPoint *, GtsPoint * );
void coords_on_line( gdouble , gdouble , gdouble , gdouble , gdouble *, gdouble *, gdouble *, gdouble * );
void vertices_on_line( toporouter_spoint_t *, gdouble , gdouble , toporouter_spoint_t *, toporouter_spoint_t * );
gdouble export_pcb_drawline( guint , guint , guint , guint , guint , guint , guint  );
int escape( int , char **, int , int  );
void print_netlist( toporouter_netlist_t * );
void print_netscores( GPtrArray * );
void print_costmatrix( gdouble *, guint  );
void calculate_serpintine( gdouble , gdouble , gdouble , gdouble *, guint * );
void print_toporouter_arc( toporouter_arc_t * );
void print_bbox( toporouter_bbox_t * );
void print_cluster( toporouter_cluster_t * );
toporouter_route_t *routedata_create( void );
toporouter_rubberband_arc_t *new_rubberband_arc( toporouter_vertex_t *, toporouter_vertex_t *, gdouble , gdouble , gint , GList * );
toporouter_serpintine_t *toporouter_serpintine_new( gdouble , gdouble , gdouble , gdouble , gdouble , gdouble , gpointer , gdouble , gdouble , guint  );
drawing_context_t *toporouter_output_init( int , int , char * );
toporouter_t *toporouter_new( void );
void parse_arguments( toporouter_t *, int , char ** );
void toporouter_arc_remove( toporouter_oproute_t *, toporouter_arc_t * );
void toporouter_layer_free( toporouter_layer_t * );
void cluster_join_bbox( toporouter_cluster_t *, toporouter_bbox_t * );
toporouter_cluster_t *cluster_create( toporouter_t *, toporouter_netlist_t * );
gint netscore_pairwise_compare( toporouter_netscore_t **, toporouter_netscore_t ** );
void netlist_recalculate( toporouter_netlist_t *, GList * );
void netlists_recalculate( GList *, GList * );
GtsTriangle *opposite_triangle( GtsTriangle *, toporouter_edge_t * );
GList *cluster_vertices( toporouter_t *, toporouter_cluster_t * );
gpointer gts_object_is_from_class( gpointer , gpointer  );
void free_list_elements( gpointer , gpointer  );
void toporouter_free( toporouter_t * );
gdouble path_score( toporouter_t *, GList * );
gdouble edge_capacity( toporouter_edge_t * );
gdouble simple_h_cost( toporouter_t *, toporouter_vertex_t *, toporouter_vertex_t * );
toporouter_vertex_t *closest_dest_vertex( toporouter_t *, toporouter_vertex_t *, toporouter_route_t * );
void closest_cluster_pair( toporouter_t *, GList *, GList *, toporouter_vertex_t **, toporouter_vertex_t ** );
void snapshot( toporouter_t *, char *, GList * );
gint routing_edge_insert( gconstpointer , gconstpointer , gpointer  );
void oproute_free( toporouter_oproute_t * );
GList *split_path( GList * );
gdouble vector_angle( gdouble , gdouble , gdouble , gdouble , gdouble , gdouble  );
gdouble arc_angle( toporouter_arc_t * );
void oproute_calculate_tof( toporouter_oproute_t * );
gdouble line_line_distance_at_normal( gdouble , gdouble , gdouble , gdouble , gdouble , gdouble , gdouble , gdouble , gdouble , gdouble  );
guint vertex_line_normal_intersection( gdouble , gdouble , gdouble , gdouble , gdouble , gdouble , gdouble *, gdouble * );
void vertex_move_towards_vertex( GtsVertex *, GtsVertex *, gdouble  );
void vertex_move_towards_point( GtsVertex *, gdouble , gdouble , gdouble  );
gdouble point_xangle( GtsPoint *, GtsPoint * );
gdouble region_span( toporouter_vertex_region_t * );
gdouble coord_xangle( gdouble , gdouble , gdouble , gdouble  );
gdouble export_pcb_drawarc( guint , toporouter_arc_t *, guint , guint  );
void vertex_move_towards_vertex_values( GtsVertex *, GtsVertex *, gdouble , gdouble *, gdouble * );
void vertex_move_towards_point_values( GtsVertex *, gdouble , gdouble , gdouble , gdouble *, gdouble * );
void coord_move_towards_coord_values( gdouble , gdouble , gdouble , gdouble , gdouble , gdouble *, gdouble * );
void point_from_point_to_point( toporouter_vertex_t *, toporouter_vertex_t *, gdouble , gdouble *, gdouble * );
guint calculate_arc_to_arc( toporouter_t *, toporouter_arc_t *, toporouter_arc_t * );
void calculate_term_to_arc( toporouter_vertex_t *, toporouter_arc_t *, guint  );
void clean_routing_edges( toporouter_t *, toporouter_route_t * );
void routedata_insert_temppoints( toporouter_route_t *, GList * );
gdouble triangle_interior_capacity( GtsTriangle *, toporouter_vertex_t * );
GtsPoint *midpoint( GtsPoint *, GtsPoint * );
toporouter_bbox_t *toporouter_bbox_locate( toporouter_t *, toporouter_term_t , void *, gdouble , gdouble , guint  );
toporouter_cluster_t *cluster_find( toporouter_t *, gdouble , gdouble , gdouble  );
toporouter_route_t *import_route( toporouter_t *, RatType * );
void acquire_twonets( toporouter_t * );
void import_clusters( toporouter_t * );
gdouble triangle_cost( GtsTriangle *, gpointer * );
GSList *list_to_slist( GList * );
gdouble lookup_thickness( char * );
gdouble vertex_net_thickness( toporouter_vertex_t * );
gdouble lookup_keepaway( char * );
gdouble oproute_min_spacing( toporouter_oproute_t *, toporouter_oproute_t * );
void export_oproutes( toporouter_t *, toporouter_oproute_t * );
gdouble vertex_net_keepaway( toporouter_vertex_t * );
toporouter_arc_class_t *toporouter_arc_class( void );
toporouter_arc_t *toporouter_arc_new( toporouter_oproute_t *, toporouter_vertex_t *, toporouter_vertex_t *, toporouter_vertex_t *, gdouble , gint  );
toporouter_constraint_class_t *toporouter_constraint_class( void );
toporouter_vertex_class_t *toporouter_vertex_class( void );
void create_board_edge( gdouble , gdouble , gdouble , gdouble , gdouble , gint , GList ** );
GList *rect_with_attachments( gdouble , gdouble , gdouble , gdouble , gdouble , gdouble , gdouble , gdouble , gdouble , gdouble  );
void insert_centre_point( toporouter_t *, toporouter_layer_t *, gdouble , gdouble  );
GList *insert_constraint_edge( toporouter_t *, toporouter_layer_t *, gdouble , gdouble , guint , gdouble , gdouble , guint , toporouter_bbox_t * );
void insert_constraints_from_list( toporouter_t *, toporouter_layer_t *, GList *, toporouter_bbox_t * );
GtsVertex *insert_vertex( toporouter_t *, toporouter_layer_t *, gdouble , gdouble , toporouter_bbox_t * );
GtsVertex *vertex_intersect( GtsVertex *, GtsVertex *, GtsVertex *, GtsVertex * );
void speccut_edge_routing_from_edge( GList *, toporouter_edge_t * );
toporouter_bbox_class_t *toporouter_bbox_class( void );
toporouter_bbox_t *toporouter_bbox_create_from_points( int , GList *, toporouter_term_t , gpointer  );
int read_lines( toporouter_t *, toporouter_layer_t *, LayerType *, int  );
toporouter_edge_class_t *toporouter_edge_class( void );
void build_cdt( toporouter_t *, toporouter_layer_t * );
void route_restore( toporouter_route_t * );
gint apply_route( GList *, toporouter_route_t * );
void remove_route( GList * );
void route_checkpoint( toporouter_route_t *, toporouter_route_t * );
void delete_route( toporouter_route_t *, guint  );
gdouble pathvertex_arcing_through_constraint( toporouter_vertex_t *, toporouter_vertex_t * );
void split_edge_routing( toporouter_vertex_t *, GList **, GList ** );
GList *edge_routing_first_not_temp( toporouter_edge_t * );
toporouter_vertex_t *edge_routing_prev_not_temp( toporouter_edge_t *, GList * );
toporouter_vertex_t *edge_routing_next_not_temp( toporouter_edge_t *, GList * );
gdouble flow_from_edge_to_edge( GtsTriangle *, toporouter_edge_t *, toporouter_edge_t *, toporouter_vertex_t *, toporouter_vertex_t * );
gdouble edge_flow( toporouter_edge_t *, toporouter_vertex_t *, toporouter_vertex_t *, toporouter_vertex_t * );
guint check_arc_for_loops( gpointer , toporouter_arc_t *, gpointer  );
GList *edge_routing_last_not_temp( toporouter_edge_t * );
gdouble edge_min_spacing( GList *, toporouter_edge_t *, toporouter_vertex_t * );
void print_vertex( toporouter_vertex_t * );
void print_oproute( toporouter_oproute_t * );
void print_vertices( GList * );
void print_edge( toporouter_edge_t * );
gint check_speccut( toporouter_oproute_t *, toporouter_vertex_t *, toporouter_vertex_t *, toporouter_edge_t *, toporouter_edge_t *, toporouter_edge_t * );
gint oproute_path_speccut( toporouter_oproute_t * );
void print_path( GList * );
void delaunay_create_from_vertices( GList *, GtsSurface **, GtsTriangle ** );
toporouter_bbox_t *toporouter_bbox_create( int , GList *, toporouter_term_t , gpointer  );
int read_board_constraints( toporouter_t *, toporouter_layer_t *, int  );
int read_points( toporouter_t *, toporouter_layer_t *, int  );
int read_pads( toporouter_t *, toporouter_layer_t *, guint  );
void import_geometry( toporouter_t * );
toporouter_vertex_t *edge_closest_vertex( toporouter_edge_t *, toporouter_vertex_t * );
void delete_vertex( toporouter_vertex_t * );
void oproute_check_all_loops( toporouter_t *, toporouter_oproute_t * );
gboolean temp_point_clean( gpointer , gpointer , gpointer  );
GList *vertices_routing_conflicts( toporouter_vertex_t *, toporouter_vertex_t * );
GList *route_conflicts( toporouter_route_t * );
gdouble vertices_routing_conflict_cost( toporouter_t *, toporouter_vertex_t *, toporouter_vertex_t *, guint * );
gdouble gcost( toporouter_t *, toporouter_route_t *, toporouter_vertex_t *, toporouter_vertex_t *, toporouter_vertex_t *, guint * );
gdouble check_intersect_vertex( gdouble , gdouble , gdouble , gdouble , toporouter_vertex_t *, toporouter_vertex_t *, toporouter_vertex_t *, gint , gint *, gdouble *, guint  );
gdouble check_non_intersect_vertex( gdouble , gdouble , gdouble , gdouble , toporouter_vertex_t *, toporouter_vertex_t *, toporouter_vertex_t *, gint , gint *, gdouble *, guint  );
GList *oproute_rubberband_segment( toporouter_t *, toporouter_oproute_t *, GList *, gpointer , gpointer , guint  );
toporouter_oproute_t *oproute_rubberband( toporouter_t *, GList * );
void toporouter_export( toporouter_t * );
void edge_adjacent_vertices( toporouter_edge_t *, toporouter_vertex_t *, toporouter_vertex_t **, toporouter_vertex_t ** );
toporouter_vertex_t *new_temp_toporoutervertex( gdouble , gdouble , toporouter_edge_t * );
GList *candidate_vertices( toporouter_vertex_t *, toporouter_vertex_t *, toporouter_vertex_t *, toporouter_edge_t * );
toporouter_vertex_t *new_temp_toporoutervertex_in_segment( toporouter_edge_t *, toporouter_vertex_t *, gdouble , toporouter_vertex_t * );
GList *all_candidates_on_edge( toporouter_edge_t *, toporouter_route_t * );
GList *triangle_all_candidate_points_from_vertex( GtsTriangle *, toporouter_vertex_t *, toporouter_route_t * );
GList *triangle_candidate_points_from_vertex( GtsTriangle *, toporouter_vertex_t *, toporouter_vertex_t *, toporouter_route_t * );
gint space_edge( gpointer , gpointer  );
guint check_triangle_interior_capacity( GtsTriangle *, toporouter_vertex_t *, toporouter_vertex_t *, toporouter_edge_t *, toporouter_edge_t *, toporouter_edge_t * );
GList *triangle_candidate_points_from_edge( toporouter_t *, GtsTriangle *, toporouter_edge_t *, toporouter_vertex_t *, toporouter_vertex_t **, toporouter_route_t * );
GList *triangle_all_candidate_points_from_edge( toporouter_t *, GtsTriangle *, toporouter_edge_t *, toporouter_route_t *, toporouter_vertex_t **, toporouter_vertex_t * );
GList *compute_candidate_points( toporouter_t *, toporouter_layer_t *, toporouter_vertex_t *, toporouter_route_t *, toporouter_vertex_t ** );
GList *route( toporouter_t *, toporouter_route_t *, guint  );
void roar_detour_route( toporouter_t *, toporouter_route_t * );
void detour_router( toporouter_t * );
gint roar_route( toporouter_t *, toporouter_route_t *, gint  );
gint roar_router( toporouter_t *, gint , gint  );
void netscore_pairwise_calculation( toporouter_netscore_t *, GPtrArray * );
toporouter_netscore_t *netscore_create( toporouter_t *, toporouter_route_t *, guint , guint  );
guint order_nets_preroute_greedy( toporouter_t *, GList *, GList ** );
gint rubix_router( toporouter_t *, gint  );
guint hybrid_router( toporouter_t * );
int toporouter( int , char **, int , int  );
gint spread_edge( gpointer , gpointer  );
void gts_object_destroy( GtsObject * );
GtsObject *gts_object_new( GtsObjectClass * );
gpointer gts_object_class_new( GtsObjectClass *, GtsObjectClassInfo * );
GtsPoint *gts_point_new( GtsPointClass *, gdouble , gdouble , gdouble  );
gdouble gts_point_distance2( GtsPoint *, GtsPoint * );
gdouble gts_point_distance( GtsPoint *, GtsPoint * );
GtsPointClass *gts_point_class( void );
GtsSegment *gts_vertices_are_connected( GtsVertex *, GtsVertex * );
GtsVertex *gts_vertex_new( GtsVertexClass *, gdouble , gdouble , gdouble  );
GtsVertexClass *gts_vertex_class( void );
GSList *gts_vertex_triangles( GtsVertex *, GSList * );
GtsEdge *gts_edge_new( GtsEdgeClass *, GtsVertex *, GtsVertex * );
GtsEdgeClass *gts_edge_class( void );
void gts_triangle_vertices( GtsTriangle *, GtsVertex **, GtsVertex **, GtsVertex ** );
GtsTriangle *gts_triangle_use_edges( GtsEdge *, GtsEdge *, GtsEdge * );
GtsEdge *gts_triangle_edge_opposite( GtsTriangle *, GtsVertex * );
GtsVertex *gts_triangle_vertex_opposite( GtsTriangle *, GtsEdge * );
gdouble gts_triangle_area( GtsTriangle * );
gdouble gts_triangle_quality( GtsTriangle * );
GtsTriangleClass *gts_triangle_class( void );
GtsTriangle *gts_triangle_enclosing( GtsTriangleClass *, GSList *, gdouble  );
GtsFace *gts_face_new( GtsFaceClass *, GtsEdge *, GtsEdge *, GtsEdge * );
GtsFaceClass *gts_face_class( void );
GtsBBox *gts_bbox_points( GtsBBoxClass *, GSList * );
GSList *gts_bb_tree_stabbed( GNode *, GtsPoint * );
GtsBBox *gts_bbox_surface( GtsBBoxClass *, GtsSurface * );
GtsBBoxClass *gts_bbox_class( void );
GNode *gts_bb_tree_new( GSList * );
void gts_predicates_init( void );
guint gts_eheap_size( GtsEHeap * );
void gts_eheap_foreach( GtsEHeap *, GFunc , gpointer  );
void gts_eheap_update( GtsEHeap * );
void gts_eheap_destroy( GtsEHeap * );
gpointer gts_eheap_remove_top( GtsEHeap *, gdouble * );
GtsEHeapPair *gts_eheap_insert( GtsEHeap *, gpointer  );
GtsEHeap *gts_eheap_new( GtsKeyFunc , gpointer  );
GtsSurface *gts_surface_new( GtsSurfaceClass *, GtsFaceClass *, GtsEdgeClass *, GtsVertexClass * );
void gts_surface_add_face( GtsSurface *, GtsFace * );
GtsSurfaceClass *gts_surface_class( void );
GtsConstraintClass *gts_constraint_class( void );
GtsFace *gts_point_locate( GtsPoint *, GtsSurface *, GtsFace * );
GtsVertex *gts_delaunay_add_vertex( GtsSurface *, GtsVertex *, GtsFace * );
GSList *gts_delaunay_add_constraint( GtsSurface *, GtsConstraint * );
GList *g_list_find( GList *, gconstpointer  );
gboolean g_direct_equal( gconstpointer , gconstpointer  );
void g_slist_free( GSList * );
void g_hash_table_destroy( GHashTable * );
int __fprintf_chk( void *, int , char *, ... );
int __isoc99_sscanf( char *, char *, ... );
void *localtime( void * );
int __printf_chk( int , char *, ... );
int __isinf( float  );
void *calloc( unsigned int , unsigned int  );
void g_list_foreach( GList *, GFunc , gpointer  );
void g_hash_table_insert( GHashTable *, gpointer , gpointer  );
void g_list_free( GList * );
void g_ptr_array_foreach( GPtrArray *, GFunc , gpointer  );
GList *g_list_copy( GList * );
void g_ptr_array_add( GPtrArray *, gpointer  );
int gettimeofday( void *, void * );
void *strtol( char *, char **, int  );
void g_assertion_message_expr( char *, char *, int , char *, char * );
void free( void * );
double atan( double  );
guint g_list_length( GList * );
double sqrt( double  );
gpointer *g_ptr_array_free( GPtrArray *, gboolean  );
GHashTable *g_hash_table_new( void *, void * );
GSList *g_slist_prepend( GSList *, gpointer  );
double acos( double  );
double cos( double  );
void g_return_if_fail_warning( char *, char *, char * );
GList *g_list_concat( GList *, GList * );
GList *g_list_insert( GList *, gpointer , gint  );
GList *g_list_sort( GList *, void * );
GList *g_list_last( GList * );
gint g_list_index( GList *, gconstpointer  );
GList *g_list_append( GList *, gpointer  );
time_t time( void * );
void __stack_chk_fail( void );
void g_ptr_array_sort( GPtrArray *, void * );
guint g_direct_hash( gconstpointer  );
GPtrArray *g_ptr_array_sized_new( guint  );
GList *g_list_prepend( GList *, gpointer  );
char *asctime( void * );
int __sprintf_chk( char *, int , unsigned int , char *, ... );
GPtrArray *g_ptr_array_new( void );
GList *g_list_insert_sorted_with_data( GList *, gpointer , void *, gpointer  );
guint g_hash_table_foreach_remove( GHashTable *, void *, gpointer  );
double sin( double  );
GList *g_list_remove( GList *, gconstpointer  );
int strcmp( char *, char * );
void sincos( double , void *, void * );
/*****************************************************************************************/
/******                                                                             ******/
/******                        Forward Var Declarations                             ******/
/******                                                                             ******/
/*****************************************************************************************/
extern struct _IO_FILE  *stderr;
extern PCBTypePtr PCB;
extern SettingType Settings;
extern int LayerStack[16];
extern gboolean gts_allow_floating_vertices;
/*****************************************************************************************/
/******                                                                             ******/
/******                      Inline Function Definitions                            ******/
/******                                                                             ******/
/*****************************************************************************************/
