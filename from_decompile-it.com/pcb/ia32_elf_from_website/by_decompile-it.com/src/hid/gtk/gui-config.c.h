#define __MOD(a,b) a % b
/*****************************************************************************************/
/******                                                                             ******/
/******                            Structure Definitions                            ******/
/******                                                                             ******/
/*****************************************************************************************/
typedef int BDimension;
typedef struct {
     int int_value;
     char *str_value;
     double real_value;
  } HID_Attr_Val;
typedef struct {
     char *name;
     char *help_text;
     enum  { HID_Label = 0, HID_Integer = 1, HID_Real = 2, HID_String = 3, HID_Boolean = 4, HID_Enum = 5, HID_Mixed = 6, HID_Path = 7, } type;
     int min_val;
     int max_val;
     HID_Attr_Val default_val;
     char **enumerations;
     void *value;
     int hash;
  } HID_Attribute;
typedef struct _GtkSpinButton GtkSpinButton;
typedef struct _GtkEntry GtkEntry;
typedef struct _GtkWidget GtkWidget;
typedef struct _GtkObject GtkObject;
typedef struct _GObject GInitiallyUnowned;
typedef struct _GTypeInstance GTypeInstance;
typedef struct _GTypeClass GTypeClass;
typedef unsigned int gsize;
typedef gsize GType;
struct _GTypeClass {
     GType g_type;
  } ;
struct _GTypeInstance {
     GTypeClass *g_class;
  } ;
typedef unsigned int guint;
typedef struct _GData GData;
struct _GData  ;
struct _GObject {
     GTypeInstance g_type_instance;
     guint ref_count;
     GData *qdata;
  } ;
typedef unsigned int guint32;
struct _GtkObject {
     GInitiallyUnowned parent_instance;
     guint32 flags;
  } ;
typedef unsigned short guint16;
typedef unsigned char guint8;
typedef char gchar;
typedef struct _GtkStyle GtkStyle;
typedef struct _GObject GObject;
typedef struct _GdkColor GdkColor;
struct _GdkColor {
     guint32 pixel;
     guint16 red;
     guint16 green;
     guint16 blue;
     char __pad[2];
  } ;
typedef struct _PangoFontDescription PangoFontDescription;
struct _PangoFontDescription  ;
typedef int gint;
typedef struct _GdkGC GdkGC;
typedef struct _GdkColormap GdkColormap;
typedef struct _GdkVisual GdkVisual;
enum  { GDK_VISUAL_STATIC_GRAY = 0, GDK_VISUAL_GRAYSCALE = 1, GDK_VISUAL_STATIC_COLOR = 2, GDK_VISUAL_PSEUDO_COLOR = 3, GDK_VISUAL_TRUE_COLOR = 4, GDK_VISUAL_DIRECT_COLOR = 5, };
typedef enum  { GDK_VISUAL_STATIC_GRAY = 0, GDK_VISUAL_GRAYSCALE = 1, GDK_VISUAL_STATIC_COLOR = 2, GDK_VISUAL_PSEUDO_COLOR = 3, GDK_VISUAL_TRUE_COLOR = 4, GDK_VISUAL_DIRECT_COLOR = 5, } GdkVisualType;
enum  { GDK_LSB_FIRST = 0, GDK_MSB_FIRST = 1, };
typedef enum  { GDK_LSB_FIRST = 0, GDK_MSB_FIRST = 1, } GdkByteOrder;
struct _GdkVisual {
     GObject parent_instance;
     GdkVisualType type;
     gint depth;
     GdkByteOrder byte_order;
     gint colormap_size;
     gint bits_per_rgb;
     guint32 red_mask;
     gint red_shift;
     gint red_prec;
     guint32 green_mask;
     gint green_shift;
     gint green_prec;
     guint32 blue_mask;
     gint blue_shift;
     gint blue_prec;
  } ;
typedef void *gpointer;
struct _GdkColormap {
     GObject parent_instance;
     gint size;
     GdkColor *colors;
     GdkVisual *visual;
     gpointer windowing_data;
  } ;
struct _GdkGC {
     GObject parent_instance;
     gint clip_x_origin;
     gint clip_y_origin;
     gint ts_x_origin;
     gint ts_y_origin;
     GdkColormap *colormap;
  } ;
typedef struct _GdkDrawable GdkPixmap;
struct _GdkDrawable {
     GObject parent_instance;
  } ;
typedef struct _GdkFont GdkFont;
enum  { GDK_FONT_FONT = 0, GDK_FONT_FONTSET = 1, };
typedef enum  { GDK_FONT_FONT = 0, GDK_FONT_FONTSET = 1, } GdkFontType;
struct _GdkFont {
     GdkFontType type;
     gint ascent;
     gint descent;
  } ;
typedef struct _GtkRcStyle GtkRcStyle;
enum  { GTK_RC_FG = 1, GTK_RC_BG = 2, GTK_RC_TEXT = 4, GTK_RC_BASE = 8, };
typedef enum  { GTK_RC_FG = 1, GTK_RC_BG = 2, GTK_RC_TEXT = 4, GTK_RC_BASE = 8, } GtkRcFlags;
typedef struct _GArray GArray;
struct _GArray {
     gchar *data;
     guint len;
  } ;
typedef struct _GSList GSList;
struct _GSList {
     gpointer data;
     GSList *next;
  } ;
struct _GtkRcStyle {
     GObject parent_instance;
     gchar *name;
     gchar *bg_pixmap_name[5];
     PangoFontDescription *font_desc;
     GtkRcFlags color_flags[5];
     GdkColor fg[5];
     GdkColor bg[5];
     GdkColor text[5];
     GdkColor base[5];
     gint xthickness;
     gint ythickness;
     GArray *rc_properties;
     GSList *rc_style_lists;
     GSList *icon_factories;
     guint bits_at_320;
  } ;
struct _GtkStyle {
     GObject parent_instance;
     GdkColor fg[5];
     GdkColor bg[5];
     GdkColor light[5];
     GdkColor dark[5];
     GdkColor mid[5];
     GdkColor text[5];
     GdkColor base[5];
     GdkColor text_aa[5];
     GdkColor black;
     GdkColor white;
     PangoFontDescription *font_desc;
     gint xthickness;
     gint ythickness;
     GdkGC *fg_gc[5];
     GdkGC *bg_gc[5];
     GdkGC *light_gc[5];
     GdkGC *dark_gc[5];
     GdkGC *mid_gc[5];
     GdkGC *text_gc[5];
     GdkGC *base_gc[5];
     GdkGC *text_aa_gc[5];
     GdkGC *black_gc;
     GdkGC *white_gc;
     GdkPixmap *bg_pixmap[5];
     gint attach_count;
     gint depth;
     GdkColormap *colormap;
     GdkFont *private_font;
     PangoFontDescription *private_font_desc;
     GtkRcStyle *rc_style;
     GSList *styles;
     GArray *property_cache;
     GSList *icon_factories;
  } ;
typedef struct _GtkRequisition GtkRequisition;
struct _GtkRequisition {
     gint width;
     gint height;
  } ;
typedef struct _GdkRectangle GdkRectangle;
struct _GdkRectangle {
     gint x;
     gint y;
     gint width;
     gint height;
  } ;
typedef GdkRectangle GtkAllocation;
typedef struct _GdkDrawable GdkWindow;
struct _GtkWidget {
     GtkObject object;
     guint16 private_flags;
     guint8 state;
     guint8 saved_state;
     gchar *name;
     GtkStyle *style;
     GtkRequisition requisition;
     GtkAllocation allocation;
     GdkWindow *window;
     GtkWidget *parent;
  } ;
typedef struct _GtkIMContext GtkIMContext;
struct _GtkIMContext {
     GObject parent_instance;
  } ;
typedef struct _PangoLayout PangoLayout;
struct _PangoLayout  ;
typedef guint32 gunichar;
struct _GtkEntry {
     GtkWidget widget;
     gchar *text;
     guint bits_at_64;
     guint16 text_length;
     guint16 text_max_length;
     GdkWindow *text_area;
     GtkIMContext *im_context;
     GtkWidget *popup_menu;
     gint current_pos;
     gint selection_bound;
     PangoLayout *cached_layout;
     guint bits_at_96;
     guint button;
     guint blink_timeout;
     guint recompute_idle;
     gint scroll_offset;
     gint ascent;
     gint descent;
     guint16 x_text_size;
     guint16 x_n_bytes;
     guint16 preedit_length;
     guint16 preedit_cursor;
     gint dnd_position;
     gint drag_start_x;
     gint drag_start_y;
     gunichar invisible_char;
     gint width_chars;
  } ;
typedef struct _GtkAdjustment GtkAdjustment;
typedef double gdouble;
struct _GtkAdjustment {
     GtkObject parent_instance;
     gdouble lower;
     gdouble upper;
     gdouble value;
     gdouble step_increment;
     gdouble page_increment;
     gdouble page_size;
  } ;
enum  { GTK_UPDATE_ALWAYS = 0, GTK_UPDATE_IF_VALID = 1, };
typedef enum  { GTK_UPDATE_ALWAYS = 0, GTK_UPDATE_IF_VALID = 1, } GtkSpinButtonUpdatePolicy;
struct _GtkSpinButton {
     GtkEntry entry;
     GtkAdjustment *adjustment;
     GdkWindow *panel;
     guint32 timer;
     gdouble climb_rate;
     gdouble timer_step;
     GtkSpinButtonUpdatePolicy update_policy;
     guint bits_at_184;
  } ;
typedef struct _GtkToggleButton GtkToggleButton;
typedef struct _GtkButton GtkButton;
typedef struct _GtkBin GtkBin;
typedef struct _GtkContainer GtkContainer;
struct _GtkContainer {
     GtkWidget widget;
     GtkWidget *focus_child;
     guint bits_at_64;
  } ;
struct _GtkBin {
     GtkContainer container;
     GtkWidget *child;
  } ;
struct _GtkButton {
     GtkBin bin;
     GdkWindow *event_window;
     gchar *label_text;
     guint activate_timeout;
     guint bits_at_84;
  } ;
struct _GtkToggleButton {
     GtkButton button;
     guint bits_at_88;
  } ;
typedef struct _GtkTreeStore GtkTreeStore;
typedef struct _GList GList;
struct _GList {
     gpointer data;
     GList *next;
     GList *prev;
  } ;
enum  { GTK_SORT_ASCENDING = 0, GTK_SORT_DESCENDING = 1, };
typedef enum  { GTK_SORT_ASCENDING = 0, GTK_SORT_DESCENDING = 1, } GtkSortType;
typedef struct _GtkTreeModel GtkTreeModel;
struct _GtkTreeModel  ;
typedef struct _GtkTreeIter GtkTreeIter;
struct _GtkTreeIter {
     gint stamp;
     gpointer user_data;
     gpointer user_data2;
     gpointer user_data3;
  } ;
typedef gint (*GtkTreeIterCompareFunc)( GtkTreeModel *, GtkTreeIter *, GtkTreeIter *, gpointer  );
typedef void (*GDestroyNotify)( gpointer  );
struct _GtkTreeStore {
     GObject parent;
     gint stamp;
     gpointer root;
     gpointer last;
     gint n_columns;
     gint sort_column_id;
     GList *sort_list;
     GtkSortType order;
     GType *column_headers;
     GtkTreeIterCompareFunc default_sort_func;
     gpointer default_sort_data;
     GDestroyNotify default_sort_destroy;
     guint bits_at_56;
  } ;
typedef struct _GtkNotebook GtkNotebook;
typedef struct _GtkNotebookPage GtkNotebookPage;
struct _GtkNotebookPage  ;
struct _GtkNotebook {
     GtkContainer container;
     GtkNotebookPage *cur_page;
     GList *children;
     GList *first_tab;
     GList *focus_tab;
     GtkWidget *menu;
     GdkWindow *event_window;
     guint32 timer;
     guint16 tab_hborder;
     guint16 tab_vborder;
     guint bits_at_100;
     guint button;
  } ;
typedef gint gboolean;
typedef struct {
     HID_Attribute *attributes;
     enum ColorTypes { MISC_COLOR = 0, MISC_SELECTED_COLOR = 1, LAYER_COLOR = 2, LAYER_SELECTED_COLOR = 3, } type;
     GdkColor color;
     gboolean color_is_mapped;
  } ConfigColor;
typedef struct _GtkTreeSelection GtkTreeSelection;
typedef struct _GtkTreeView GtkTreeView;
typedef struct _GtkTreeViewPrivate GtkTreeViewPrivate;
struct _GtkTreeViewPrivate  ;
struct _GtkTreeView {
     GtkContainer parent;
     GtkTreeViewPrivate *priv;
  } ;
enum  { GTK_SELECTION_NONE = 0, GTK_SELECTION_SINGLE = 1, GTK_SELECTION_BROWSE = 2, GTK_SELECTION_MULTIPLE = 3, GTK_SELECTION_EXTENDED = 3, };
typedef enum  { GTK_SELECTION_NONE = 0, GTK_SELECTION_SINGLE = 1, GTK_SELECTION_BROWSE = 2, GTK_SELECTION_MULTIPLE = 3, GTK_SELECTION_EXTENDED = 3, } GtkSelectionMode;
typedef struct _GtkTreePath GtkTreePath;
struct _GtkTreePath  ;
typedef gboolean (*GtkTreeSelectionFunc)( GtkTreeSelection *, GtkTreeModel *, GtkTreePath *, gboolean , gpointer  );
struct _GtkTreeSelection {
     GObject parent;
     GtkTreeView *tree_view;
     GtkSelectionMode type;
     GtkTreeSelectionFunc user_func;
     gpointer user_data;
     GDestroyNotify destroy;
  } ;
typedef struct _IO_FILE FILE;
struct _IO_marker {
     struct _IO_marker *_next;
     struct _IO_FILE *_sbuf;
     int _pos;
  } ;
typedef long __off_t;
typedef void _IO_lock_t;
typedef long long __quad_t;
typedef __quad_t __off64_t;
typedef unsigned int size_t;
struct _IO_FILE {
     int _flags;
     char *_IO_read_ptr;
     char *_IO_read_end;
     char *_IO_read_base;
     char *_IO_write_base;
     char *_IO_write_ptr;
     char *_IO_write_end;
     char *_IO_buf_base;
     char *_IO_buf_end;
     char *_IO_save_base;
     char *_IO_backup_base;
     char *_IO_save_end;
     struct _IO_marker *_markers;
     struct _IO_FILE *_chain;
     int _fileno;
     int _flags2;
     __off_t _old_offset;
     unsigned short _cur_column;
     char _vtable_offset;
     char _shortbuf[1];
     _IO_lock_t *_lock;
     __off64_t _offset;
     void *__pad1;
     void *__pad2;
     void *__pad3;
     void *__pad4;
     size_t __pad5;
     int _mode;
     char _unused2[40];
  } ;
enum  { GTK_POLICY_ALWAYS = 0, GTK_POLICY_AUTOMATIC = 1, GTK_POLICY_NEVER = 2, };
typedef enum  { GTK_POLICY_ALWAYS = 0, GTK_POLICY_AUTOMATIC = 1, GTK_POLICY_NEVER = 2, } GtkPolicyType;
enum  { GTK_POLICY_ALWAYS = 0, GTK_POLICY_AUTOMATIC = 1, GTK_POLICY_NEVER = 2, };
enum  { GTK_POLICY_ALWAYS = 0, GTK_POLICY_AUTOMATIC = 1, GTK_POLICY_NEVER = 2, };
enum  { GTK_POLICY_ALWAYS = 0, GTK_POLICY_AUTOMATIC = 1, GTK_POLICY_NEVER = 2, };
typedef float gfloat;
typedef unsigned int __mode_t;
typedef struct _GtkCellRenderer GtkCellRenderer;
struct _GtkCellRenderer {
     GtkObject parent;
     gfloat xalign;
     gfloat yalign;
     gint width;
     gint height;
     guint16 xpad;
     guint16 ypad;
     guint bits_at_36;
  } ;
enum  { GTK_POLICY_ALWAYS = 0, GTK_POLICY_AUTOMATIC = 1, GTK_POLICY_NEVER = 2, };
enum  { GTK_POLICY_ALWAYS = 0, GTK_POLICY_AUTOMATIC = 1, GTK_POLICY_NEVER = 2, };
typedef struct _GtkTreeViewColumn GtkTreeViewColumn;
typedef struct _GtkCellEditable GtkCellEditable;
struct _GtkCellEditable  ;
enum  { GTK_TREE_VIEW_COLUMN_GROW_ONLY = 0, GTK_TREE_VIEW_COLUMN_AUTOSIZE = 1, GTK_TREE_VIEW_COLUMN_FIXED = 2, };
typedef enum  { GTK_TREE_VIEW_COLUMN_GROW_ONLY = 0, GTK_TREE_VIEW_COLUMN_AUTOSIZE = 1, GTK_TREE_VIEW_COLUMN_FIXED = 2, } GtkTreeViewColumnSizing;
enum  { GTK_SORT_ASCENDING = 0, GTK_SORT_DESCENDING = 1, };
struct _GtkTreeViewColumn {
     GtkObject parent;
     GtkWidget *tree_view;
     GtkWidget *button;
     GtkWidget *child;
     GtkWidget *arrow;
     GtkWidget *alignment;
     GdkWindow *window;
     GtkCellEditable *editable_widget;
     gfloat xalign;
     guint property_changed_signal;
     gint spacing;
     GtkTreeViewColumnSizing column_type;
     gint requested_width;
     gint button_request;
     gint resized_width;
     gint width;
     gint fixed_width;
     gint min_width;
     gint max_width;
     gint drag_x;
     gint drag_y;
     gchar *title;
     GList *cell_list;
     guint sort_clicked_signal;
     guint sort_column_changed_signal;
     gint sort_column_id;
     GtkSortType sort_order;
     guint bits_at_120;
  } ;
typedef struct _GtkWindow GtkWindow;
typedef struct _GtkWindowGeometryInfo GtkWindowGeometryInfo;
struct _GtkWindowGeometryInfo  ;
typedef struct _GtkWindowGroup GtkWindowGroup;
struct _GtkWindowGroup {
     GObject parent_instance;
     GSList *grabs;
  } ;
enum  { GDK_SHIFT_MASK = 1, GDK_LOCK_MASK = 2, GDK_CONTROL_MASK = 4, GDK_MOD1_MASK = 8, GDK_MOD2_MASK = 16, GDK_MOD3_MASK = 32, GDK_MOD4_MASK = 64, GDK_MOD5_MASK = 128, GDK_BUTTON1_MASK = 256, GDK_BUTTON2_MASK = 512, GDK_BUTTON3_MASK = 1024, GDK_BUTTON4_MASK = 2048, GDK_BUTTON5_MASK = 4096, GDK_SUPER_MASK = 67108864, GDK_HYPER_MASK = 134217728, GDK_META_MASK = 268435456, GDK_RELEASE_MASK = 1073741824, GDK_MODIFIER_MASK = 1543512063, };
typedef enum  { GDK_SHIFT_MASK = 1, GDK_LOCK_MASK = 2, GDK_CONTROL_MASK = 4, GDK_MOD1_MASK = 8, GDK_MOD2_MASK = 16, GDK_MOD3_MASK = 32, GDK_MOD4_MASK = 64, GDK_MOD5_MASK = 128, GDK_BUTTON1_MASK = 256, GDK_BUTTON2_MASK = 512, GDK_BUTTON3_MASK = 1024, GDK_BUTTON4_MASK = 2048, GDK_BUTTON5_MASK = 4096, GDK_SUPER_MASK = 67108864, GDK_HYPER_MASK = 134217728, GDK_META_MASK = 268435456, GDK_RELEASE_MASK = 1073741824, GDK_MODIFIER_MASK = 1543512063, } GdkModifierType;
typedef struct _GdkScreen GdkScreen;
typedef struct _cairo_font_options cairo_font_options_t;
struct _cairo_font_options  ;
struct _GdkScreen {
     GObject parent_instance;
     guint bits_at_12;
     GdkGC *normal_gcs[32];
     GdkGC *exposure_gcs[32];
     GdkGC *subwindow_gcs[32];
     cairo_font_options_t *font_options;
     double resolution;
  } ;
struct _GtkWindow {
     GtkBin bin;
     gchar *title;
     gchar *wmclass_name;
     gchar *wmclass_class;
     gchar *wm_role;
     GtkWidget *focus_widget;
     GtkWidget *default_widget;
     GtkWindow *transient_parent;
     GtkWindowGeometryInfo *geometry_info;
     GdkWindow *frame;
     GtkWindowGroup *group;
     guint16 configure_request_count;
     guint bits_at_112;
     guint bits_at_116;
     guint frame_left;
     guint frame_top;
     guint frame_right;
     guint frame_bottom;
     guint keys_changed_handler;
     GdkModifierType mnemonic_modifier;
     GdkScreen *screen;
  } ;
typedef unsigned long gulong;
typedef void (*GCallback)( void );
enum  { GTK_SELECTION_NONE = 0, GTK_SELECTION_SINGLE = 1, GTK_SELECTION_BROWSE = 2, GTK_SELECTION_MULTIPLE = 3, GTK_SELECTION_EXTENDED = 3, };
typedef struct PCBType *PCBTypePtr;
typedef struct {
     unsigned long f;
     unsigned char t[8];
  } FlagType;
typedef char Boolean;
typedef int LocationType;
typedef struct BoxType BoxType;
struct BoxType {
     LocationType X1;
     LocationType Y1;
     LocationType X2;
     LocationType Y2;
  } ;
typedef struct {
     LocationType X;
     LocationType Y;
     LocationType X2;
     LocationType Y2;
     long ID;
  } PointType;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
typedef struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } *LineTypePtr;
typedef unsigned int Cardinal;
typedef struct {
     LineTypePtr Line;
     Boolean Valid;
     Cardinal LineN;
     Cardinal LineMax;
     BDimension Width;
     BDimension Height;
     BDimension Delta;
  } SymbolType;
typedef struct {
     LocationType MaxHeight;
     LocationType MaxWidth;
     BoxType DefaultSymbol;
     SymbolType Symbol[256];
     Boolean Valid;
     char __pad[3];
  } FontType;
typedef struct {
     Cardinal Number[16];
     Cardinal Entries[16][18];
  } LayerGroupType;
typedef struct {
     BDimension Thick;
     BDimension Diameter;
     BDimension Hole;
     BDimension Keepaway;
     char *Name;
     int index;
  } RouteStyleType;
struct {
     char *ListEntry;
     char *AllocatedMemory;
     char *Template;
     char *Package;
     char *Value;
     char *Description;
  } ;
typedef struct {
     char *ListEntry;
     char *AllocatedMemory;
     char *Template;
     char *Package;
     char *Value;
     char *Description;
  } *LibraryEntryTypePtr;
struct {
     char *Name;
     char *directory;
     char *Style;
     Cardinal EntryN;
     Cardinal EntryMax;
     LibraryEntryTypePtr Entry;
     char flag;
     char internal;
     char __pad[2];
  } ;
typedef struct {
     char *Name;
     char *directory;
     char *Style;
     Cardinal EntryN;
     Cardinal EntryMax;
     LibraryEntryTypePtr Entry;
     char flag;
     char internal;
     char __pad[2];
  } *LibraryMenuTypePtr;
typedef struct {
     Cardinal MenuN;
     Cardinal MenuMax;
     LibraryMenuTypePtr Menu;
  } LibraryType;
typedef struct {
     char *name;
     char *value;
  } AttributeType;
typedef struct {
     int Number;
     int Max;
     AttributeType *List;
  } AttributeListType;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     BDimension Mask;
     BDimension DrillingHole;
     LocationType X;
     LocationType Y;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
typedef struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     BDimension Mask;
     BDimension DrillingHole;
     LocationType X;
     LocationType Y;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } *PinTypePtr;
typedef unsigned char BYTE;
typedef struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Scale;
     LocationType X;
     LocationType Y;
     BYTE Direction;
     char *TextString;
     void *Element;
  } TextType;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     BDimension Mask;
     BDimension DrillingHole;
     LocationType X;
     LocationType Y;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     BDimension Mask;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
typedef struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     BDimension Mask;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } *PadTypePtr;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } ;
typedef struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } *ArcTypePtr;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     TextType Name[3];
     LocationType MarkX;
     LocationType MarkY;
     Cardinal PinN;
     Cardinal PinMax;
     Cardinal PadN;
     Cardinal PadMax;
     Cardinal LineN;
     Cardinal LineMax;
     Cardinal ArcN;
     Cardinal ArcMax;
     PinTypePtr Pin;
     PadTypePtr Pad;
     LineTypePtr Line;
     ArcTypePtr Arc;
     BoxType VBox;
     AttributeListType Attributes;
  } ;
typedef struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     TextType Name[3];
     LocationType MarkX;
     LocationType MarkY;
     Cardinal PinN;
     Cardinal PinMax;
     Cardinal PadN;
     Cardinal PadMax;
     Cardinal LineN;
     Cardinal LineMax;
     Cardinal ArcN;
     Cardinal ArcMax;
     PinTypePtr Pin;
     PadTypePtr Pad;
     LineTypePtr Line;
     ArcTypePtr Arc;
     BoxType VBox;
     AttributeListType Attributes;
  } *ElementTypePtr;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     Cardinal group1;
     Cardinal group2;
  } ;
typedef struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     Cardinal group1;
     Cardinal group2;
  } *RatTypePtr;
typedef struct rtree rtree_t;
struct rtree {
     struct rtree_node *root;
     int size;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Scale;
     LocationType X;
     LocationType Y;
     BYTE Direction;
     char *TextString;
     void *Element;
  } ;
typedef struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Scale;
     LocationType X;
     LocationType Y;
     BYTE Direction;
     char *TextString;
     void *Element;
  } *TextTypePtr;
typedef struct polygon_st *PolygonTypePtr;
typedef struct POLYAREA POLYAREA;
typedef struct PLINE PLINE;
typedef struct VNODE VNODE;
struct {
     unsigned int bits_at_0;
  } ;
typedef struct CVCList CVCList;
struct CVCList {
     double angle;
     VNODE *parent;
     CVCList *prev;
     CVCList *next;
     CVCList *head;
     char poly;
     char side;
     char __pad[2];
  } ;
typedef int vertex[2];
typedef vertex Vector;
struct VNODE {
     VNODE *next;
     VNODE *prev;
     VNODE *shared;
     struct {
       unsigned int bits_at_0;
    } Flags;
     CVCList *cvc_prev;
     CVCList *cvc_next;
     Vector point;
  } ;
struct {
     unsigned int bits_at_0;
  } ;
struct PLINE {
     int xmin;
     int ymin;
     int xmax;
     int ymax;
     PLINE *next;
     VNODE head;
     unsigned int Count;
     double area;
     rtree_t *tree;
     struct {
       unsigned int bits_at_0;
    } Flags;
  } ;
struct POLYAREA {
     POLYAREA *f;
     POLYAREA *b;
     PLINE *contours;
  } ;
struct {
     LocationType X;
     LocationType Y;
     LocationType X2;
     LocationType Y2;
     long ID;
  } ;
typedef struct {
     LocationType X;
     LocationType Y;
     LocationType X2;
     LocationType Y2;
     long ID;
  } *PointTypePtr;
struct polygon_st {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     Cardinal PointN;
     Cardinal PointMax;
     POLYAREA *Clipped;
     PLINE *NoHoles;
     int NoHolesValid;
     PointTypePtr Points;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } ;
typedef struct {
     char *Name;
     Cardinal LineN;
     Cardinal TextN;
     Cardinal PolygonN;
     Cardinal ArcN;
     Cardinal LineMax;
     Cardinal TextMax;
     Cardinal PolygonMax;
     Cardinal ArcMax;
     LineTypePtr Line;
     TextTypePtr Text;
     PolygonTypePtr Polygon;
     ArcTypePtr Arc;
     rtree_t *line_tree;
     rtree_t *text_tree;
     rtree_t *polygon_tree;
     rtree_t *arc_tree;
     Boolean On;
     char *Color;
     char *SelectedColor;
     AttributeListType Attributes;
  } LayerType;
struct {
     Cardinal ViaN;
     Cardinal ViaMax;
     Cardinal ElementN;
     Cardinal ElementMax;
     Cardinal RatN;
     Cardinal RatMax;
     int LayerN;
     PinTypePtr Via;
     ElementTypePtr Element;
     RatTypePtr Rat;
     rtree_t *via_tree;
     rtree_t *element_tree;
     rtree_t *pin_tree;
     rtree_t *pad_tree;
     rtree_t *name_tree[3];
     rtree_t *rat_tree;
     struct PCBType *pcb;
     LayerType Layer[18];
  } ;
typedef struct {
     Cardinal ViaN;
     Cardinal ViaMax;
     Cardinal ElementN;
     Cardinal ElementMax;
     Cardinal RatN;
     Cardinal RatMax;
     int LayerN;
     PinTypePtr Via;
     ElementTypePtr Element;
     RatTypePtr Rat;
     rtree_t *via_tree;
     rtree_t *element_tree;
     rtree_t *pin_tree;
     rtree_t *pad_tree;
     rtree_t *name_tree[3];
     rtree_t *rat_tree;
     struct PCBType *pcb;
     LayerType Layer[18];
  } *DataTypePtr;
struct PCBType {
     long ID;
     FlagType Flags;
     char *Name;
     char *Filename;
     char *PrintFilename;
     char *Netlistname;
     char ThermStyle;
     Boolean Changed;
     Boolean ViaOn;
     Boolean ElementOn;
     Boolean RatOn;
     Boolean InvisibleObjectsOn;
     Boolean PinOn;
     Boolean SilkActive;
     Boolean RatDraw;
     char *ViaColor;
     char *ViaSelectedColor;
     char *PinColor;
     char *PinSelectedColor;
     char *PinNameColor;
     char *ElementColor;
     char *RatColor;
     char *InvisibleObjectsColor;
     char *InvisibleMarkColor;
     char *ElementSelectedColor;
     char *RatSelectedColor;
     char *ConnectedColor;
     char *WarnColor;
     char *MaskColor;
     long CursorX;
     long CursorY;
     long Clipping;
     int Bloat;
     int Shrink;
     int minWid;
     int minSlk;
     int minDrill;
     int minRing;
     int GridOffsetX;
     int GridOffsetY;
     int MaxWidth;
     int MaxHeight;
     double Grid;
     double Zoom;
     double IsleArea;
     double ThermScale;
     FontType Font;
     LayerGroupType LayerGroups;
     RouteStyleType RouteStyle[4];
     LibraryType NetlistLib;
     AttributeListType Attributes;
     DataTypePtr Data;
  } ;
typedef struct {
     Boolean grid_units_mm;
     int verbose;
     char *BlackColor;
     char *WhiteColor;
     char *BackgroundColor;
     char *CrosshairColor;
     char *CrossColor;
     char *ViaColor;
     char *ViaSelectedColor;
     char *PinColor;
     char *PinSelectedColor;
     char *PinNameColor;
     char *ElementColor;
     char *RatColor;
     char *InvisibleObjectsColor;
     char *InvisibleMarkColor;
     char *ElementSelectedColor;
     char *RatSelectedColor;
     char *ConnectedColor;
     char *OffLimitColor;
     char *GridColor;
     char *LayerColor[16];
     char *LayerSelectedColor[16];
     char *WarnColor;
     char *MaskColor;
     int ViaThickness;
     int ViaDrillingHole;
     int LineThickness;
     int RatThickness;
     int Keepaway;
     int MaxWidth;
     int MaxHeight;
     int TextScale;
     int AlignmentDistance;
     int Bloat;
     int Shrink;
     int minWid;
     int minSlk;
     int minDrill;
     int minRing;
     double Grid;
     double IsleArea;
     double grid_increment_mm;
     double grid_increment_mil;
     double size_increment_mm;
     double size_increment_mil;
     double line_increment_mm;
     double line_increment_mil;
     double clear_increment_mm;
     double clear_increment_mil;
     double Zoom;
     double PinoutZoom;
     int PinoutNameLength;
     int Volume;
     int CharPerLine;
     int Mode;
     int BufferNumber;
     int GridFactor;
     int BackupInterval;
     char *DefaultLayerName[16];
     char *FontCommand;
     char *FileCommand;
     char *ElementCommand;
     char *PrintFile;
     char *LibraryCommandDir;
     char *LibraryCommand;
     char *LibraryContentsCommand;
     char *LibraryTree;
     char *SaveCommand;
     char *LibraryFilename;
     char *FontFile;
     char *Groups;
     char *Routes;
     char *FilePath;
     char *RatPath;
     char *RatCommand;
     char *FontPath;
     char *PinoutFont;
     char *ElementPath;
     char *LibraryPath;
     char *Size;
     char *Media;
     char *MenuFile;
     char *BackgroundImage;
     char *ScriptFilename;
     char *ActionString;
     char *FabAuthor;
     char *InitialLayerStack;
     Boolean DumpMenuFile;
     LocationType PinoutOffsetX;
     LocationType PinoutOffsetY;
     int PinoutTextOffsetX;
     int PinoutTextOffsetY;
     RouteStyleType RouteStyle[4];
     LayerGroupType LayerGroups;
     Boolean ClearLine;
     Boolean FullPoly;
     Boolean UniqueNames;
     Boolean SnapPin;
     Boolean ShowSolderSide;
     Boolean SaveLastCommand;
     Boolean SaveInTMP;
     Boolean DrawGrid;
     Boolean RatWarn;
     Boolean StipplePolygons;
     Boolean AllDirectionLines;
     Boolean RubberBandMode;
     Boolean SwapStartDirection;
     Boolean ShowDRC;
     Boolean AutoDRC;
     Boolean ShowNumber;
     Boolean OrthogonalMoves;
     Boolean ResetAfterElement;
     Boolean liveRouting;
     Boolean RingBellWhenFinished;
     Boolean AutoPlace;
     int HistorySize;
     int init_done;
  } SettingType;
typedef struct HID_AttrNode HID_AttrNode;
struct HID_AttrNode {
     struct HID_AttrNode *next;
     HID_Attribute *attributes;
     int n;
  } ;
typedef struct {
     gchar *name;
     enum ConfigType { CONFIG_Boolean = 0, CONFIG_Integer = 1, CONFIG_Real = 2, CONFIG_String = 3, CONFIG_Unused = 4, } type;
     void *value;
  } ConfigAttribute;
typedef struct _GtkUIManager GtkUIManager;
typedef struct _GtkUIManagerPrivate GtkUIManagerPrivate;
struct _GtkUIManagerPrivate  ;
struct _GtkUIManager {
     GObject parent;
     GtkUIManagerPrivate *private_data;
  } ;
typedef struct _GtkActionGroup GtkActionGroup;
typedef struct _GtkActionGroupPrivate GtkActionGroupPrivate;
struct _GtkActionGroupPrivate  ;
struct _GtkActionGroup {
     GObject parent;
     GtkActionGroupPrivate *private_data;
  } ;
typedef struct _GdkPixbuf GdkPixbuf;
struct _GdkPixbuf  ;
typedef struct {
     GtkUIManager *ui_manager;
     GtkActionGroup *main_actions;
     GtkActionGroup *grid_actions;
     GtkActionGroup *change_selected_actions;
     GtkActionGroup *displayed_name_actions;
     GtkWidget *name_label;
     GtkWidget *status_line_label;
     GtkWidget *cursor_position_relative_label;
     GtkWidget *cursor_position_absolute_label;
     GtkWidget *grid_units_label;
     GtkWidget *status_line_hbox;
     GtkWidget *command_combo_box;
     GtkEntry *command_entry;
     GtkWidget *top_hbox;
     GtkWidget *menu_hbox;
     GtkWidget *compact_vbox;
     GtkWidget *compact_hbox;
     GtkWidget *position_hbox;
     GtkWidget *label_hbox;
     GtkWidget *mode_buttons0_vbox;
     GtkWidget *mode_buttons1_hbox;
     GtkWidget *mode_buttons1_vbox;
     GtkWidget *mode_buttons0_frame;
     GtkWidget *mode_buttons1_frame;
     GtkWidget *mode_buttons0_frame_vbox;
     GtkWidget *h_range;
     GtkWidget *v_range;
     GtkObject *h_adjustment;
     GtkObject *v_adjustment;
     GdkPixbuf *bg_pixbuf;
     gchar *name_label_string;
     gboolean adjustment_changed_holdoff;
     gboolean toggle_holdoff;
     gboolean command_entry_status_line_active;
     gboolean auto_pan_on;
     gboolean in_popup;
     gboolean combine_adjustments;
     gboolean config_modified;
     gboolean small_label_markup;
     gboolean compact_horizontal;
     gboolean compact_vertical;
     gboolean ghid_title_window;
     gboolean use_command_window;
     gboolean need_restore_crosshair;
     gboolean creating;
     gint n_mode_button_columns;
     gint top_window_width;
     gint top_window_height;
     gint log_window_width;
     gint log_window_height;
     gint drc_window_width;
     gint drc_window_height;
     gint keyref_window_width;
     gint keyref_window_height;
     gint library_window_width;
     gint library_window_height;
     gint netlist_window_height;
     gint history_size;
     gint settings_mode;
     gint auto_pan_speed;
  } GhidGui;
/*****************************************************************************************/
/******                                                                             ******/
/******                          Function Prototypes                                ******/
/******                                                                             ******/
/*****************************************************************************************/
void ChangePCBSize( BDimension , BDimension  );
void Message( char *, ... );
void EnableAutosave( void );
int MoveLayerAction( int , char **, int , int  );
void ghid_set_special_colors( HID_Attribute * );
void ghid_invalidate_all( void );
void ghid_command_use_command_window_sync( void );
void config_auto_pan_speed_spin_button_cb( GtkSpinButton *, gpointer  );
void config_history_spin_button_cb( GtkSpinButton *, gpointer  );
void config_backup_spin_button_cb( GtkSpinButton *, gpointer  );
void config_general_toggle_cb( GtkToggleButton *, gint * );
void config_layer_groups_radio_button_cb( GtkToggleButton *, gpointer  );
void config_title_window_cb( GtkToggleButton *, gpointer  );
void config_compact_vertical_toggle_cb( GtkToggleButton *, gpointer  );
void config_compact_horizontal_toggle_cb( GtkToggleButton *, gpointer  );
void text_spin_button_cb( GtkSpinButton *, gint * );
void config_command_window_toggle_cb( GtkToggleButton *, gpointer  );
void config_increments_tab_create( GtkWidget * );
void config_sizes_tab_create( GtkWidget * );
void size_spin_button_cb( GtkSpinButton *, gint * );
void increment_spin_button_cb( GtkSpinButton *, gdouble * );
void edit_layer_button_cb( GtkWidget *, gchar * );
GtkWidget *config_page_create( GtkTreeStore *, GtkTreeIter *, GtkNotebook * );
void config_color_button_create( GtkWidget *, ConfigColor * );
void config_color_set_cb( GtkWidget *, ConfigColor * );
void config_color_file_set_label( void );
void config_colors_tab_create( GtkWidget * );
void config_color_defaults_cb( gpointer  );
void config_destroy_cb( gpointer  );
void config_color_save_cb( gpointer  );
gboolean config_colors_read( gchar * );
void config_color_load_cb( gpointer  );
void config_layer_group_button_state_update( void );
void ghid_config_layer_name_update( gchar *, gint  );
void layer_name_entry_cb( GtkWidget *, gpointer  );
void config_selection_changed_cb( GtkTreeSelection *, gpointer  );
void ghid_config_text_scale_update( void );
void ghid_config_handle_units_changed( void );
void ghid_config_groups_changed( void );
void config_layers_tab_create( GtkWidget * );
void ghid_config_window_show( void );
FILE *config_file_open( gchar * );
void ghid_config_files_write( void );
void config_close_cb( gpointer  );
gchar *expand_dir( gchar * );
gint parse_option_line( gchar *, gchar **, gchar ** );
void config_file_read( void );
void parse_optionv( gint *, gchar ***, gboolean  );
void load_rc_file( gchar * );
void ghid_config_init( void );
void ghid_config_files_read( gint *, gchar *** );
gchar *ghid_dialog_file_select_save( gchar *, gchar **, gchar *, gchar * );
gchar *ghid_dialog_file_select_open( gchar *, gchar **, gchar * );
void ghid_dialog_message( gchar * );
void ghid_set_cursor_position_labels( void );
void ghid_set_status_line_label( void );
void ghid_layer_buttons_color_update( void );
void ghid_pack_mode_buttons( void );
void ghid_window_set_name_label( gchar * );
void ghid_layer_buttons_update( void );
gboolean dup_string( gchar **, gchar * );
GtkWidget *ghid_scrolled_text_view( GtkWidget *, GtkWidget **, GtkPolicyType , GtkPolicyType  );
void ghid_text_view_append( GtkWidget *, gchar * );
GtkWidget *ghid_notebook_page( GtkWidget *, char *, gint , gint  );
GtkWidget *ghid_category_vbox( GtkWidget *, gchar *, gint , gint , gboolean , gboolean  );
GtkWidget *ghid_scrolled_vbox( GtkWidget *, GtkWidget **, GtkPolicyType , GtkPolicyType  );
void ghid_spin_button( GtkWidget *, GtkWidget **, gfloat , gfloat , gfloat , gfloat , gfloat , gint , gint , void (*)( void ), gpointer , gboolean , gchar * );
void ghid_table_spin_button( GtkWidget *, gint , gint , GtkWidget **, gfloat , gfloat , gfloat , gfloat , gfloat , gint , gint , void (*)( void ), gpointer , gboolean , gchar * );
void ghid_button_connected( GtkWidget *, GtkWidget **, gboolean , gboolean , gboolean , gint , void (*)( void ), gpointer , gchar * );
void ghid_check_button_connected( GtkWidget *, GtkWidget **, gboolean , gboolean , gboolean , gboolean , gint , void (*)( void ), gpointer , gchar * );
gchar *ghid_entry_get_text( GtkWidget * );
void ghid_map_color_string( char *, GdkColor * );
gchar *ghid_get_color_name( GdkColor * );
void abort( void );
void g_free( gpointer  );
void gtk_label_set_use_markup( void *, gboolean  );
void gtk_table_attach_defaults( void *, GtkWidget *, guint , guint , guint , guint  );
GtkWidget *gtk_entry_new( void );
int mkdir( char *, __mode_t  );
GType gtk_box_get_type( void );
GtkWidget *gtk_window_new( void * );
void gtk_color_button_set_title( void *, gchar * );
gchar *g_path_get_basename( gchar * );
int __fprintf_chk( void *, int , char *, ... );
gboolean gtk_toggle_button_get_active( GtkToggleButton * );
GtkCellRenderer *gtk_cell_renderer_text_new( void );
GType gtk_button_box_get_type( void );
void g_object_unref( gpointer  );
GtkWidget *gtk_label_new( gchar * );
GType gtk_table_get_type( void );
GtkWidget *gtk_vbox_new( gboolean , gint  );
gchar *g_strdup( gchar * );
void gtk_entry_set_text( GtkEntry *, gchar * );
int __printf_chk( int , char *, ... );
double strtod( char *, char ** );
char *strchr( char *, char  );
GType gtk_widget_get_type( void );
void gtk_widget_destroy( GtkWidget * );
GtkWidget *gtk_button_new( void );
gchar *g_strconcat( gchar *, ... );
char *fgets( char *, int , void * );
GtkWidget *gtk_notebook_new( void );
void gtk_scrolled_window_set_policy( void *, GtkPolicyType , GtkPolicyType  );
GtkTreeStore *gtk_tree_store_new( gint , ... );
GtkWidget *gtk_table_new( guint , guint , gboolean  );
gint gtk_notebook_append_page( GtkNotebook *, GtkWidget *, GtkWidget * );
gint gtk_spin_button_get_value_as_int( GtkSpinButton * );
void *strtol( char *, char **, int  );
void gtk_widget_show_all( GtkWidget * );
void gtk_widget_set_sensitive( GtkWidget *, gboolean  );
GtkWidget *gtk_tree_view_new_with_model( GtkTreeModel * );
GType gtk_container_get_type( void );
guint g_list_length( GList * );
char *dcgettext( char *, char *, int  );
gchar *g_strdup_printf( gchar *, ... );
gint gtk_tree_view_append_column( GtkTreeView *, GtkTreeViewColumn * );
void gtk_window_set_title( GtkWindow *, gchar * );
int fclose( void * );
GType gtk_window_get_type( void );
unsigned int strlen( char * );
void *fopen( char *, char * );
void gtk_tree_store_append( GtkTreeStore *, GtkTreeIter *, GtkTreeIter * );
void gtk_spin_button_set_value( GtkSpinButton *, gdouble  );
void gtk_widget_grab_default( GtkWidget * );
GtkWidget *gtk_arrow_new( void *, void * );
GType gtk_tree_model_get_type( void );
void gtk_window_present( GtkWindow * );
gboolean gtk_tree_selection_get_selected( GtkTreeSelection *, void *, GtkTreeIter * );
GType gtk_label_get_type( void );
GType gtk_object_get_type( void );
GList *g_list_append( GList *, gpointer  );
GtkWidget *gtk_radio_button_new_with_label( GSList *, gchar * );
void gtk_widget_set_size_request( GtkWidget *, gint , gint  );
void gtk_table_set_col_spacings( void *, guint  );
char *strstr( char *, char * );
void gtk_button_box_set_layout( void *, void * );
GType gtk_entry_get_type( void );
void gtk_scrolled_window_add_with_viewport( void *, GtkWidget * );
gulong g_signal_connect_data( gpointer , gchar *, GCallback , gpointer , void *, void * );
GTypeInstance *g_type_check_instance_cast( GTypeInstance *, GType  );
void gtk_widget_show( GtkWidget * );
void __stack_chk_fail( void );
void gtk_notebook_set_current_page( GtkNotebook *, gint  );
void gtk_toggle_button_set_mode( GtkToggleButton *, gboolean  );
GType gtk_color_button_get_type( void );
char *strtok( char *, char * );
GtkWidget *gtk_hbox_new( gboolean , gint  );
GtkWidget *gtk_expander_new( gchar * );
void *g_strsplit( gchar *, gchar *, gint  );
void gtk_container_add( GtkContainer *, GtkWidget * );
GSList *gtk_radio_button_get_group( void * );
void gtk_toggle_button_set_active( GtkToggleButton *, gboolean  );
GType gtk_toggle_button_get_type( void );
GtkWidget *gtk_scrolled_window_new( GtkAdjustment *, GtkAdjustment * );
gpointer g_malloc0( gsize  );
void gtk_box_pack_start( void *, GtkWidget *, gboolean , gboolean , guint  );
GList *g_list_prepend( GList *, gpointer  );
GType gtk_misc_get_type( void );
gchar *g_build_filename( gchar *, ... );
GType gtk_tree_view_get_type( void );
gchar *g_build_path( gchar *, gchar *, ... );
GType gtk_notebook_get_type( void );
void gtk_tree_model_get( GtkTreeModel *, GtkTreeIter *, ... );
GtkWidget *gtk_button_new_from_stock( gchar * );
void gtk_color_button_get_color( void *, GdkColor * );
int sscanf( char *, char *, ... );
gchar *g_get_home_dir( void );
void gtk_tree_selection_set_mode( GtkTreeSelection *, GtkSelectionMode  );
GType gtk_scrolled_window_get_type( void );
int strncmp( char *, char *, unsigned int  );
GtkTreeSelection *gtk_tree_view_get_selection( GtkTreeView * );
int __snprintf_chk( char *, unsigned int , int , unsigned int , char *, ... );
void g_strfreev( void * );
GtkTreeViewColumn *gtk_tree_view_column_new_with_attributes( gchar *, GtkCellRenderer *, ... );
void gtk_tree_store_set( GtkTreeStore *, GtkTreeIter *, ... );
void gtk_table_set_row_spacings( void *, guint  );
GtkWidget *gtk_hseparator_new( void );
void gtk_window_set_wmclass( GtkWindow *, gchar *, gchar * );
void gtk_notebook_set_show_tabs( GtkNotebook *, gboolean  );
void gtk_container_remove( GtkContainer *, GtkWidget * );
void gtk_box_set_spacing( void *, gint  );
GType gtk_spin_button_get_type( void );
int strcmp( char *, char * );
GType gtk_radio_button_get_type( void );
void gtk_label_set_markup( void *, gchar * );
void exit( int  );
void g_log( gchar *, void *, gchar *, ... );
void gtk_container_set_border_width( GtkContainer *, guint  );
GtkWidget *gtk_hbutton_box_new( void );
gboolean g_file_test( gchar *, void * );
void gtk_misc_set_alignment( void *, gfloat , gfloat  );
GtkWidget *gtk_color_button_new_with_color( GdkColor * );
void gtk_box_pack_end( void *, GtkWidget *, gboolean , gboolean , guint  );
gdouble gtk_spin_button_get_value( GtkSpinButton * );
/*****************************************************************************************/
/******                                                                             ******/
/******                        Forward Var Declarations                             ******/
/******                                                                             ******/
/*****************************************************************************************/
extern struct _IO_FILE  *stderr;
extern PCBTypePtr PCB;
extern SettingType Settings;
extern char *pcblibdir;
extern HID_AttrNode *hid_attr_nodes;
extern GhidGui _ghidgui;
extern GhidGui *ghidgui;
/*****************************************************************************************/
/******                                                                             ******/
/******                      Inline Function Definitions                            ******/
/******                                                                             ******/
/*****************************************************************************************/
