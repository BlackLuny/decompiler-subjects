#define __MOD(a,b) a % b
/*****************************************************************************************/
/******                                                                             ******/
/******                            Structure Definitions                            ******/
/******                                                                             ******/
/*****************************************************************************************/
typedef int gint;
typedef gint gboolean;
typedef char gchar;
typedef struct _GtkWidget GtkWidget;
typedef struct _GtkObject GtkObject;
typedef struct _GObject GInitiallyUnowned;
typedef struct _GTypeInstance GTypeInstance;
typedef struct _GTypeClass GTypeClass;
typedef unsigned int gsize;
typedef gsize GType;
struct _GTypeClass {
     GType g_type;
  } ;
struct _GTypeInstance {
     GTypeClass *g_class;
  } ;
typedef unsigned int guint;
typedef struct _GData GData;
struct _GData  ;
struct _GObject {
     GTypeInstance g_type_instance;
     guint ref_count;
     GData *qdata;
  } ;
typedef unsigned int guint32;
struct _GtkObject {
     GInitiallyUnowned parent_instance;
     guint32 flags;
  } ;
typedef unsigned short guint16;
typedef unsigned char guint8;
typedef struct _GtkStyle GtkStyle;
typedef struct _GObject GObject;
typedef struct _GdkColor GdkColor;
struct _GdkColor {
     guint32 pixel;
     guint16 red;
     guint16 green;
     guint16 blue;
     char __pad[2];
  } ;
typedef struct _PangoFontDescription PangoFontDescription;
struct _PangoFontDescription  ;
typedef struct _GdkGC GdkGC;
typedef struct _GdkColormap GdkColormap;
typedef struct _GdkVisual GdkVisual;
enum  { GDK_VISUAL_STATIC_GRAY = 0, GDK_VISUAL_GRAYSCALE = 1, GDK_VISUAL_STATIC_COLOR = 2, GDK_VISUAL_PSEUDO_COLOR = 3, GDK_VISUAL_TRUE_COLOR = 4, GDK_VISUAL_DIRECT_COLOR = 5, };
typedef enum  { GDK_VISUAL_STATIC_GRAY = 0, GDK_VISUAL_GRAYSCALE = 1, GDK_VISUAL_STATIC_COLOR = 2, GDK_VISUAL_PSEUDO_COLOR = 3, GDK_VISUAL_TRUE_COLOR = 4, GDK_VISUAL_DIRECT_COLOR = 5, } GdkVisualType;
enum  { GDK_LSB_FIRST = 0, GDK_MSB_FIRST = 1, };
typedef enum  { GDK_LSB_FIRST = 0, GDK_MSB_FIRST = 1, } GdkByteOrder;
struct _GdkVisual {
     GObject parent_instance;
     GdkVisualType type;
     gint depth;
     GdkByteOrder byte_order;
     gint colormap_size;
     gint bits_per_rgb;
     guint32 red_mask;
     gint red_shift;
     gint red_prec;
     guint32 green_mask;
     gint green_shift;
     gint green_prec;
     guint32 blue_mask;
     gint blue_shift;
     gint blue_prec;
  } ;
typedef void *gpointer;
struct _GdkColormap {
     GObject parent_instance;
     gint size;
     GdkColor *colors;
     GdkVisual *visual;
     gpointer windowing_data;
  } ;
struct _GdkGC {
     GObject parent_instance;
     gint clip_x_origin;
     gint clip_y_origin;
     gint ts_x_origin;
     gint ts_y_origin;
     GdkColormap *colormap;
  } ;
typedef struct _GdkDrawable GdkPixmap;
struct _GdkDrawable {
     GObject parent_instance;
  } ;
typedef struct _GdkFont GdkFont;
enum  { GDK_FONT_FONT = 0, GDK_FONT_FONTSET = 1, };
typedef enum  { GDK_FONT_FONT = 0, GDK_FONT_FONTSET = 1, } GdkFontType;
struct _GdkFont {
     GdkFontType type;
     gint ascent;
     gint descent;
  } ;
typedef struct _GtkRcStyle GtkRcStyle;
enum  { GTK_RC_FG = 1, GTK_RC_BG = 2, GTK_RC_TEXT = 4, GTK_RC_BASE = 8, };
typedef enum  { GTK_RC_FG = 1, GTK_RC_BG = 2, GTK_RC_TEXT = 4, GTK_RC_BASE = 8, } GtkRcFlags;
typedef struct _GArray GArray;
struct _GArray {
     gchar *data;
     guint len;
  } ;
typedef struct _GSList GSList;
struct _GSList {
     gpointer data;
     GSList *next;
  } ;
struct _GtkRcStyle {
     GObject parent_instance;
     gchar *name;
     gchar *bg_pixmap_name[5];
     PangoFontDescription *font_desc;
     GtkRcFlags color_flags[5];
     GdkColor fg[5];
     GdkColor bg[5];
     GdkColor text[5];
     GdkColor base[5];
     gint xthickness;
     gint ythickness;
     GArray *rc_properties;
     GSList *rc_style_lists;
     GSList *icon_factories;
     guint bits_at_320;
  } ;
struct _GtkStyle {
     GObject parent_instance;
     GdkColor fg[5];
     GdkColor bg[5];
     GdkColor light[5];
     GdkColor dark[5];
     GdkColor mid[5];
     GdkColor text[5];
     GdkColor base[5];
     GdkColor text_aa[5];
     GdkColor black;
     GdkColor white;
     PangoFontDescription *font_desc;
     gint xthickness;
     gint ythickness;
     GdkGC *fg_gc[5];
     GdkGC *bg_gc[5];
     GdkGC *light_gc[5];
     GdkGC *dark_gc[5];
     GdkGC *mid_gc[5];
     GdkGC *text_gc[5];
     GdkGC *base_gc[5];
     GdkGC *text_aa_gc[5];
     GdkGC *black_gc;
     GdkGC *white_gc;
     GdkPixmap *bg_pixmap[5];
     gint attach_count;
     gint depth;
     GdkColormap *colormap;
     GdkFont *private_font;
     PangoFontDescription *private_font_desc;
     GtkRcStyle *rc_style;
     GSList *styles;
     GArray *property_cache;
     GSList *icon_factories;
  } ;
typedef struct _GtkRequisition GtkRequisition;
struct _GtkRequisition {
     gint width;
     gint height;
  } ;
typedef struct _GdkRectangle GdkRectangle;
struct _GdkRectangle {
     gint x;
     gint y;
     gint width;
     gint height;
  } ;
typedef GdkRectangle GtkAllocation;
typedef struct _GdkDrawable GdkWindow;
struct _GtkWidget {
     GtkObject object;
     guint16 private_flags;
     guint8 state;
     guint8 saved_state;
     gchar *name;
     GtkStyle *style;
     GtkRequisition requisition;
     GtkAllocation allocation;
     GdkWindow *window;
     GtkWidget *parent;
  } ;
enum  { GTK_POLICY_ALWAYS = 0, GTK_POLICY_AUTOMATIC = 1, GTK_POLICY_NEVER = 2, };
typedef enum  { GTK_POLICY_ALWAYS = 0, GTK_POLICY_AUTOMATIC = 1, GTK_POLICY_NEVER = 2, } GtkPolicyType;
enum  { GTK_POLICY_ALWAYS = 0, GTK_POLICY_AUTOMATIC = 1, GTK_POLICY_NEVER = 2, };
typedef struct _GtkTreeSelection GtkTreeSelection;
typedef struct _GtkTreeView GtkTreeView;
typedef struct _GtkContainer GtkContainer;
struct _GtkContainer {
     GtkWidget widget;
     GtkWidget *focus_child;
     guint bits_at_64;
  } ;
typedef struct _GtkTreeViewPrivate GtkTreeViewPrivate;
struct _GtkTreeViewPrivate  ;
struct _GtkTreeView {
     GtkContainer parent;
     GtkTreeViewPrivate *priv;
  } ;
enum  { GTK_SELECTION_NONE = 0, GTK_SELECTION_SINGLE = 1, GTK_SELECTION_BROWSE = 2, GTK_SELECTION_MULTIPLE = 3, GTK_SELECTION_EXTENDED = 3, };
typedef enum  { GTK_SELECTION_NONE = 0, GTK_SELECTION_SINGLE = 1, GTK_SELECTION_BROWSE = 2, GTK_SELECTION_MULTIPLE = 3, GTK_SELECTION_EXTENDED = 3, } GtkSelectionMode;
typedef struct _GtkTreeModel GtkTreeModel;
struct _GtkTreeModel  ;
typedef struct _GtkTreePath GtkTreePath;
struct _GtkTreePath  ;
typedef gboolean (*GtkTreeSelectionFunc)( GtkTreeSelection *, GtkTreeModel *, GtkTreePath *, gboolean , gpointer  );
typedef void (*GDestroyNotify)( gpointer  );
struct _GtkTreeSelection {
     GObject parent;
     GtkTreeView *tree_view;
     GtkSelectionMode type;
     GtkTreeSelectionFunc user_func;
     gpointer user_data;
     GDestroyNotify destroy;
  } ;
enum  { GTK_SELECTION_NONE = 0, GTK_SELECTION_SINGLE = 1, GTK_SELECTION_BROWSE = 2, GTK_SELECTION_MULTIPLE = 3, GTK_SELECTION_EXTENDED = 3, };
enum  { GTK_POLICY_ALWAYS = 0, GTK_POLICY_AUTOMATIC = 1, GTK_POLICY_NEVER = 2, };
enum  { GTK_POLICY_ALWAYS = 0, GTK_POLICY_AUTOMATIC = 1, GTK_POLICY_NEVER = 2, };
enum  { GTK_POLICY_ALWAYS = 0, GTK_POLICY_AUTOMATIC = 1, GTK_POLICY_NEVER = 2, };
enum  { GTK_POLICY_ALWAYS = 0, GTK_POLICY_AUTOMATIC = 1, GTK_POLICY_NEVER = 2, };
enum  { GTK_POS_LEFT = 0, GTK_POS_RIGHT = 1, GTK_POS_TOP = 2, GTK_POS_BOTTOM = 3, };
typedef enum  { GTK_POS_LEFT = 0, GTK_POS_RIGHT = 1, GTK_POS_TOP = 2, GTK_POS_BOTTOM = 3, } GtkPositionType;
typedef float gfloat;
typedef struct _GdkDrawable GdkDrawable;
typedef struct _GdkCursor GdkCursor;
enum  { GDK_X_CURSOR = 0, GDK_ARROW = 2, GDK_BASED_ARROW_DOWN = 4, GDK_BASED_ARROW_UP = 6, GDK_BOAT = 8, GDK_BOGOSITY = 10, GDK_BOTTOM_LEFT_CORNER = 12, GDK_BOTTOM_RIGHT_CORNER = 14, GDK_BOTTOM_SIDE = 16, GDK_BOTTOM_TEE = 18, GDK_BOX_SPIRAL = 20, GDK_CENTER_PTR = 22, GDK_CIRCLE = 24, GDK_CLOCK = 26, GDK_COFFEE_MUG = 28, GDK_CROSS = 30, GDK_CROSS_REVERSE = 32, GDK_CROSSHAIR = 34, GDK_DIAMOND_CROSS = 36, GDK_DOT = 38, GDK_DOTBOX = 40, GDK_DOUBLE_ARROW = 42, GDK_DRAFT_LARGE = 44, GDK_DRAFT_SMALL = 46, GDK_DRAPED_BOX = 48, GDK_EXCHANGE = 50, GDK_FLEUR = 52, GDK_GOBBLER = 54, GDK_GUMBY = 56, GDK_HAND1 = 58, GDK_HAND2 = 60, GDK_HEART = 62, GDK_ICON = 64, GDK_IRON_CROSS = 66, GDK_LEFT_PTR = 68, GDK_LEFT_SIDE = 70, GDK_LEFT_TEE = 72, GDK_LEFTBUTTON = 74, GDK_LL_ANGLE = 76, GDK_LR_ANGLE = 78, GDK_MAN = 80, GDK_MIDDLEBUTTON = 82, GDK_MOUSE = 84, GDK_PENCIL = 86, GDK_PIRATE = 88, GDK_PLUS = 90, GDK_QUESTION_ARROW = 92, GDK_RIGHT_PTR = 94, GDK_RIGHT_SIDE = 96, GDK_RIGHT_TEE = 98, GDK_RIGHTBUTTON = 100, GDK_RTL_LOGO = 102, GDK_SAILBOAT = 104, GDK_SB_DOWN_ARROW = 106, GDK_SB_H_DOUBLE_ARROW = 108, GDK_SB_LEFT_ARROW = 110, GDK_SB_RIGHT_ARROW = 112, GDK_SB_UP_ARROW = 114, GDK_SB_V_DOUBLE_ARROW = 116, GDK_SHUTTLE = 118, GDK_SIZING = 120, GDK_SPIDER = 122, GDK_SPRAYCAN = 124, GDK_STAR = 126, GDK_TARGET = 128, GDK_TCROSS = 130, GDK_TOP_LEFT_ARROW = 132, GDK_TOP_LEFT_CORNER = 134, GDK_TOP_RIGHT_CORNER = 136, GDK_TOP_SIDE = 138, GDK_TOP_TEE = 140, GDK_TREK = 142, GDK_UL_ANGLE = 144, GDK_UMBRELLA = 146, GDK_UR_ANGLE = 148, GDK_WATCH = 150, GDK_XTERM = 152, GDK_LAST_CURSOR = 153, GDK_BLANK_CURSOR = -2, GDK_CURSOR_IS_PIXMAP = -1, };
typedef enum  { GDK_X_CURSOR = 0, GDK_ARROW = 2, GDK_BASED_ARROW_DOWN = 4, GDK_BASED_ARROW_UP = 6, GDK_BOAT = 8, GDK_BOGOSITY = 10, GDK_BOTTOM_LEFT_CORNER = 12, GDK_BOTTOM_RIGHT_CORNER = 14, GDK_BOTTOM_SIDE = 16, GDK_BOTTOM_TEE = 18, GDK_BOX_SPIRAL = 20, GDK_CENTER_PTR = 22, GDK_CIRCLE = 24, GDK_CLOCK = 26, GDK_COFFEE_MUG = 28, GDK_CROSS = 30, GDK_CROSS_REVERSE = 32, GDK_CROSSHAIR = 34, GDK_DIAMOND_CROSS = 36, GDK_DOT = 38, GDK_DOTBOX = 40, GDK_DOUBLE_ARROW = 42, GDK_DRAFT_LARGE = 44, GDK_DRAFT_SMALL = 46, GDK_DRAPED_BOX = 48, GDK_EXCHANGE = 50, GDK_FLEUR = 52, GDK_GOBBLER = 54, GDK_GUMBY = 56, GDK_HAND1 = 58, GDK_HAND2 = 60, GDK_HEART = 62, GDK_ICON = 64, GDK_IRON_CROSS = 66, GDK_LEFT_PTR = 68, GDK_LEFT_SIDE = 70, GDK_LEFT_TEE = 72, GDK_LEFTBUTTON = 74, GDK_LL_ANGLE = 76, GDK_LR_ANGLE = 78, GDK_MAN = 80, GDK_MIDDLEBUTTON = 82, GDK_MOUSE = 84, GDK_PENCIL = 86, GDK_PIRATE = 88, GDK_PLUS = 90, GDK_QUESTION_ARROW = 92, GDK_RIGHT_PTR = 94, GDK_RIGHT_SIDE = 96, GDK_RIGHT_TEE = 98, GDK_RIGHTBUTTON = 100, GDK_RTL_LOGO = 102, GDK_SAILBOAT = 104, GDK_SB_DOWN_ARROW = 106, GDK_SB_H_DOUBLE_ARROW = 108, GDK_SB_LEFT_ARROW = 110, GDK_SB_RIGHT_ARROW = 112, GDK_SB_UP_ARROW = 114, GDK_SB_V_DOUBLE_ARROW = 116, GDK_SHUTTLE = 118, GDK_SIZING = 120, GDK_SPIDER = 122, GDK_SPRAYCAN = 124, GDK_STAR = 126, GDK_TARGET = 128, GDK_TCROSS = 130, GDK_TOP_LEFT_ARROW = 132, GDK_TOP_LEFT_CORNER = 134, GDK_TOP_RIGHT_CORNER = 136, GDK_TOP_SIDE = 138, GDK_TOP_TEE = 140, GDK_TREK = 142, GDK_UL_ANGLE = 144, GDK_UMBRELLA = 146, GDK_UR_ANGLE = 148, GDK_WATCH = 150, GDK_XTERM = 152, GDK_LAST_CURSOR = 153, GDK_BLANK_CURSOR = -2, GDK_CURSOR_IS_PIXMAP = -1, } GdkCursorType;
struct _GdkCursor {
     GdkCursorType type;
     guint ref_count;
  } ;
enum  { GDK_X_CURSOR = 0, GDK_ARROW = 2, GDK_BASED_ARROW_DOWN = 4, GDK_BASED_ARROW_UP = 6, GDK_BOAT = 8, GDK_BOGOSITY = 10, GDK_BOTTOM_LEFT_CORNER = 12, GDK_BOTTOM_RIGHT_CORNER = 14, GDK_BOTTOM_SIDE = 16, GDK_BOTTOM_TEE = 18, GDK_BOX_SPIRAL = 20, GDK_CENTER_PTR = 22, GDK_CIRCLE = 24, GDK_CLOCK = 26, GDK_COFFEE_MUG = 28, GDK_CROSS = 30, GDK_CROSS_REVERSE = 32, GDK_CROSSHAIR = 34, GDK_DIAMOND_CROSS = 36, GDK_DOT = 38, GDK_DOTBOX = 40, GDK_DOUBLE_ARROW = 42, GDK_DRAFT_LARGE = 44, GDK_DRAFT_SMALL = 46, GDK_DRAPED_BOX = 48, GDK_EXCHANGE = 50, GDK_FLEUR = 52, GDK_GOBBLER = 54, GDK_GUMBY = 56, GDK_HAND1 = 58, GDK_HAND2 = 60, GDK_HEART = 62, GDK_ICON = 64, GDK_IRON_CROSS = 66, GDK_LEFT_PTR = 68, GDK_LEFT_SIDE = 70, GDK_LEFT_TEE = 72, GDK_LEFTBUTTON = 74, GDK_LL_ANGLE = 76, GDK_LR_ANGLE = 78, GDK_MAN = 80, GDK_MIDDLEBUTTON = 82, GDK_MOUSE = 84, GDK_PENCIL = 86, GDK_PIRATE = 88, GDK_PLUS = 90, GDK_QUESTION_ARROW = 92, GDK_RIGHT_PTR = 94, GDK_RIGHT_SIDE = 96, GDK_RIGHT_TEE = 98, GDK_RIGHTBUTTON = 100, GDK_RTL_LOGO = 102, GDK_SAILBOAT = 104, GDK_SB_DOWN_ARROW = 106, GDK_SB_H_DOUBLE_ARROW = 108, GDK_SB_LEFT_ARROW = 110, GDK_SB_RIGHT_ARROW = 112, GDK_SB_UP_ARROW = 114, GDK_SB_V_DOUBLE_ARROW = 116, GDK_SHUTTLE = 118, GDK_SIZING = 120, GDK_SPIDER = 122, GDK_SPRAYCAN = 124, GDK_STAR = 126, GDK_TARGET = 128, GDK_TCROSS = 130, GDK_TOP_LEFT_ARROW = 132, GDK_TOP_LEFT_CORNER = 134, GDK_TOP_RIGHT_CORNER = 136, GDK_TOP_SIDE = 138, GDK_TOP_TEE = 140, GDK_TREK = 142, GDK_UL_ANGLE = 144, GDK_UMBRELLA = 146, GDK_UR_ANGLE = 148, GDK_WATCH = 150, GDK_XTERM = 152, GDK_LAST_CURSOR = 153, GDK_BLANK_CURSOR = -2, GDK_CURSOR_IS_PIXMAP = -1, };
typedef double gdouble;
typedef struct {
     GtkWidget *top_window;
     GtkWidget *drawing_area;
     GdkPixmap *pixmap;
     GdkPixmap *mask;
     GdkDrawable *drawable;
     gint width;
     gint height;
     GdkGC *bg_gc;
     GdkGC *offlimits_gc;
     GdkGC *mask_gc;
     GdkGC *u_gc;
     GdkGC *grid_gc;
     GdkColor bg_color;
     GdkColor offlimits_color;
     GdkColor grid_color;
     GdkColormap *colormap;
     GdkCursor *X_cursor;
     GdkCursorType X_cursor_shape;
     gboolean has_entered;
     gboolean panning;
     gdouble zoom;
     gint view_x0;
     gint view_y0;
     gint view_width;
     gint view_height;
     gint view_x;
     gint view_y;
     gint x_crosshair;
     gint y_crosshair;
  } GHidPort;
enum  { NO_BUTTON_PRESSED = 0, BUTTON1_PRESSED = 1, BUTTON2_PRESSED = 2, BUTTON3_PRESSED = 3, };
typedef enum  { NO_BUTTON_PRESSED = 0, BUTTON1_PRESSED = 1, BUTTON2_PRESSED = 2, BUTTON3_PRESSED = 3, } ButtonState;
enum  { GDK_SHIFT_MASK = 1, GDK_LOCK_MASK = 2, GDK_CONTROL_MASK = 4, GDK_MOD1_MASK = 8, GDK_MOD2_MASK = 16, GDK_MOD3_MASK = 32, GDK_MOD4_MASK = 64, GDK_MOD5_MASK = 128, GDK_BUTTON1_MASK = 256, GDK_BUTTON2_MASK = 512, GDK_BUTTON3_MASK = 1024, GDK_BUTTON4_MASK = 2048, GDK_BUTTON5_MASK = 4096, GDK_SUPER_MASK = 67108864, GDK_HYPER_MASK = 134217728, GDK_META_MASK = 268435456, GDK_RELEASE_MASK = 1073741824, GDK_MODIFIER_MASK = 1543512063, };
typedef enum  { GDK_SHIFT_MASK = 1, GDK_LOCK_MASK = 2, GDK_CONTROL_MASK = 4, GDK_MOD1_MASK = 8, GDK_MOD2_MASK = 16, GDK_MOD3_MASK = 32, GDK_MOD4_MASK = 64, GDK_MOD5_MASK = 128, GDK_BUTTON1_MASK = 256, GDK_BUTTON2_MASK = 512, GDK_BUTTON3_MASK = 1024, GDK_BUTTON4_MASK = 2048, GDK_BUTTON5_MASK = 4096, GDK_SUPER_MASK = 67108864, GDK_HYPER_MASK = 134217728, GDK_META_MASK = 268435456, GDK_RELEASE_MASK = 1073741824, GDK_MODIFIER_MASK = 1543512063, } GdkModifierType;
enum  { NONE_PRESSED = 0, SHIFT_PRESSED = 1, CONTROL_PRESSED = 2, MOD1_PRESSED = 4, SHIFT_CONTROL_PRESSED = 3, SHIFT_MOD1_PRESSED = 5, CONTROL_MOD1_PRESSED = 6, SHIFT_CONTROL_MOD1_PRESSED = 7, };
typedef enum  { NONE_PRESSED = 0, SHIFT_PRESSED = 1, CONTROL_PRESSED = 2, MOD1_PRESSED = 4, SHIFT_CONTROL_PRESSED = 3, SHIFT_MOD1_PRESSED = 5, CONTROL_MOD1_PRESSED = 6, SHIFT_CONTROL_MOD1_PRESSED = 7, } ModifierKeysState;
enum  { GDK_SHIFT_MASK = 1, GDK_LOCK_MASK = 2, GDK_CONTROL_MASK = 4, GDK_MOD1_MASK = 8, GDK_MOD2_MASK = 16, GDK_MOD3_MASK = 32, GDK_MOD4_MASK = 64, GDK_MOD5_MASK = 128, GDK_BUTTON1_MASK = 256, GDK_BUTTON2_MASK = 512, GDK_BUTTON3_MASK = 1024, GDK_BUTTON4_MASK = 2048, GDK_BUTTON5_MASK = 4096, GDK_SUPER_MASK = 67108864, GDK_HYPER_MASK = 134217728, GDK_META_MASK = 268435456, GDK_RELEASE_MASK = 1073741824, GDK_MODIFIER_MASK = 1543512063, };
typedef struct _GList GList;
struct _GList {
     gpointer data;
     GList *next;
     GList *prev;
  } ;
typedef unsigned long gulong;
typedef void (*GCallback)( void );
enum  { GTK_POLICY_ALWAYS = 0, GTK_POLICY_AUTOMATIC = 1, GTK_POLICY_NEVER = 2, };
enum  { GTK_POLICY_ALWAYS = 0, GTK_POLICY_AUTOMATIC = 1, GTK_POLICY_NEVER = 2, };
typedef struct _GtkTextBuffer GtkTextBuffer;
typedef struct _GtkTextTagTable GtkTextTagTable;
typedef struct _GHashTable GHashTable;
struct _GHashTable  ;
struct _GtkTextTagTable {
     GObject parent_instance;
     GHashTable *hash;
     GSList *anonymous;
     gint anon_count;
     GSList *buffers;
  } ;
typedef struct _GtkTextBTree GtkTextBTree;
struct _GtkTextBTree  ;
typedef struct _GtkTextLogAttrCache GtkTextLogAttrCache;
struct _GtkTextLogAttrCache  ;
struct _GtkTextBuffer {
     GObject parent_instance;
     GtkTextTagTable *tag_table;
     GtkTextBTree *btree;
     GSList *clipboard_contents_buffers;
     GSList *selection_clipboards;
     GtkTextLogAttrCache *log_attr_cache;
     guint user_action_count;
     guint bits_at_36;
  } ;
typedef struct _GtkWindow GtkWindow;
typedef struct _GtkBin GtkBin;
struct _GtkBin {
     GtkContainer container;
     GtkWidget *child;
  } ;
typedef struct _GtkWindowGeometryInfo GtkWindowGeometryInfo;
struct _GtkWindowGeometryInfo  ;
typedef struct _GtkWindowGroup GtkWindowGroup;
struct _GtkWindowGroup {
     GObject parent_instance;
     GSList *grabs;
  } ;
enum  { GDK_SHIFT_MASK = 1, GDK_LOCK_MASK = 2, GDK_CONTROL_MASK = 4, GDK_MOD1_MASK = 8, GDK_MOD2_MASK = 16, GDK_MOD3_MASK = 32, GDK_MOD4_MASK = 64, GDK_MOD5_MASK = 128, GDK_BUTTON1_MASK = 256, GDK_BUTTON2_MASK = 512, GDK_BUTTON3_MASK = 1024, GDK_BUTTON4_MASK = 2048, GDK_BUTTON5_MASK = 4096, GDK_SUPER_MASK = 67108864, GDK_HYPER_MASK = 134217728, GDK_META_MASK = 268435456, GDK_RELEASE_MASK = 1073741824, GDK_MODIFIER_MASK = 1543512063, };
typedef struct _GdkScreen GdkScreen;
typedef struct _cairo_font_options cairo_font_options_t;
struct _cairo_font_options  ;
struct _GdkScreen {
     GObject parent_instance;
     guint bits_at_12;
     GdkGC *normal_gcs[32];
     GdkGC *exposure_gcs[32];
     GdkGC *subwindow_gcs[32];
     cairo_font_options_t *font_options;
     double resolution;
  } ;
struct _GtkWindow {
     GtkBin bin;
     gchar *title;
     gchar *wmclass_name;
     gchar *wmclass_class;
     gchar *wm_role;
     GtkWidget *focus_widget;
     GtkWidget *default_widget;
     GtkWindow *transient_parent;
     GtkWindowGeometryInfo *geometry_info;
     GdkWindow *frame;
     GtkWindowGroup *group;
     guint16 configure_request_count;
     guint bits_at_112;
     guint bits_at_116;
     guint frame_left;
     guint frame_top;
     guint frame_right;
     guint frame_bottom;
     guint keys_changed_handler;
     GdkModifierType mnemonic_modifier;
     GdkScreen *screen;
  } ;
typedef struct _GtkNotebook GtkNotebook;
typedef struct _GtkNotebookPage GtkNotebookPage;
struct _GtkNotebookPage  ;
struct _GtkNotebook {
     GtkContainer container;
     GtkNotebookPage *cur_page;
     GList *children;
     GList *first_tab;
     GList *focus_tab;
     GtkWidget *menu;
     GdkWindow *event_window;
     guint32 timer;
     guint16 tab_hborder;
     guint16 tab_vborder;
     guint bits_at_100;
     guint button;
  } ;
typedef struct _GtkEntry GtkEntry;
typedef struct _GtkIMContext GtkIMContext;
struct _GtkIMContext {
     GObject parent_instance;
  } ;
typedef struct _PangoLayout PangoLayout;
struct _PangoLayout  ;
typedef guint32 gunichar;
struct _GtkEntry {
     GtkWidget widget;
     gchar *text;
     guint bits_at_64;
     guint16 text_length;
     guint16 text_max_length;
     GdkWindow *text_area;
     GtkIMContext *im_context;
     GtkWidget *popup_menu;
     gint current_pos;
     gint selection_bound;
     PangoLayout *cached_layout;
     guint bits_at_96;
     guint button;
     guint blink_timeout;
     guint recompute_idle;
     gint scroll_offset;
     gint ascent;
     gint descent;
     guint16 x_text_size;
     guint16 x_n_bytes;
     guint16 preedit_length;
     guint16 preedit_cursor;
     gint dnd_position;
     gint drag_start_x;
     gint drag_start_y;
     gunichar invisible_char;
     gint width_chars;
  } ;
enum  { GDK_SHIFT_MASK = 1, GDK_LOCK_MASK = 2, GDK_CONTROL_MASK = 4, GDK_MOD1_MASK = 8, GDK_MOD2_MASK = 16, GDK_MOD3_MASK = 32, GDK_MOD4_MASK = 64, GDK_MOD5_MASK = 128, GDK_BUTTON1_MASK = 256, GDK_BUTTON2_MASK = 512, GDK_BUTTON3_MASK = 1024, GDK_BUTTON4_MASK = 2048, GDK_BUTTON5_MASK = 4096, GDK_SUPER_MASK = 67108864, GDK_HYPER_MASK = 134217728, GDK_META_MASK = 268435456, GDK_RELEASE_MASK = 1073741824, GDK_MODIFIER_MASK = 1543512063, };
typedef struct _GtkTextMark GtkTextMark;
struct _GtkTextMark {
     GObject parent_instance;
     gpointer segment;
  } ;
typedef struct _GtkSpinButton GtkSpinButton;
typedef struct _GtkAdjustment GtkAdjustment;
struct _GtkAdjustment {
     GtkObject parent_instance;
     gdouble lower;
     gdouble upper;
     gdouble value;
     gdouble step_increment;
     gdouble page_increment;
     gdouble page_size;
  } ;
enum  { GTK_UPDATE_ALWAYS = 0, GTK_UPDATE_IF_VALID = 1, };
typedef enum  { GTK_UPDATE_ALWAYS = 0, GTK_UPDATE_IF_VALID = 1, } GtkSpinButtonUpdatePolicy;
struct _GtkSpinButton {
     GtkEntry entry;
     GtkAdjustment *adjustment;
     GdkWindow *panel;
     guint32 timer;
     gdouble climb_rate;
     gdouble timer_step;
     GtkSpinButtonUpdatePolicy update_policy;
     guint bits_at_184;
  } ;
enum  { GTK_POS_LEFT = 0, GTK_POS_RIGHT = 1, GTK_POS_TOP = 2, GTK_POS_BOTTOM = 3, };
typedef struct _GtkToggleButton GtkToggleButton;
typedef struct _GtkButton GtkButton;
struct _GtkButton {
     GtkBin bin;
     GdkWindow *event_window;
     gchar *label_text;
     guint activate_timeout;
     guint bits_at_84;
  } ;
struct _GtkToggleButton {
     GtkButton button;
     guint bits_at_88;
  } ;
enum  { GTK_SELECTION_NONE = 0, GTK_SELECTION_SINGLE = 1, GTK_SELECTION_BROWSE = 2, GTK_SELECTION_MULTIPLE = 3, GTK_SELECTION_EXTENDED = 3, };
enum  { GDK_X_CURSOR = 0, GDK_ARROW = 2, GDK_BASED_ARROW_DOWN = 4, GDK_BASED_ARROW_UP = 6, GDK_BOAT = 8, GDK_BOGOSITY = 10, GDK_BOTTOM_LEFT_CORNER = 12, GDK_BOTTOM_RIGHT_CORNER = 14, GDK_BOTTOM_SIDE = 16, GDK_BOTTOM_TEE = 18, GDK_BOX_SPIRAL = 20, GDK_CENTER_PTR = 22, GDK_CIRCLE = 24, GDK_CLOCK = 26, GDK_COFFEE_MUG = 28, GDK_CROSS = 30, GDK_CROSS_REVERSE = 32, GDK_CROSSHAIR = 34, GDK_DIAMOND_CROSS = 36, GDK_DOT = 38, GDK_DOTBOX = 40, GDK_DOUBLE_ARROW = 42, GDK_DRAFT_LARGE = 44, GDK_DRAFT_SMALL = 46, GDK_DRAPED_BOX = 48, GDK_EXCHANGE = 50, GDK_FLEUR = 52, GDK_GOBBLER = 54, GDK_GUMBY = 56, GDK_HAND1 = 58, GDK_HAND2 = 60, GDK_HEART = 62, GDK_ICON = 64, GDK_IRON_CROSS = 66, GDK_LEFT_PTR = 68, GDK_LEFT_SIDE = 70, GDK_LEFT_TEE = 72, GDK_LEFTBUTTON = 74, GDK_LL_ANGLE = 76, GDK_LR_ANGLE = 78, GDK_MAN = 80, GDK_MIDDLEBUTTON = 82, GDK_MOUSE = 84, GDK_PENCIL = 86, GDK_PIRATE = 88, GDK_PLUS = 90, GDK_QUESTION_ARROW = 92, GDK_RIGHT_PTR = 94, GDK_RIGHT_SIDE = 96, GDK_RIGHT_TEE = 98, GDK_RIGHTBUTTON = 100, GDK_RTL_LOGO = 102, GDK_SAILBOAT = 104, GDK_SB_DOWN_ARROW = 106, GDK_SB_H_DOUBLE_ARROW = 108, GDK_SB_LEFT_ARROW = 110, GDK_SB_RIGHT_ARROW = 112, GDK_SB_UP_ARROW = 114, GDK_SB_V_DOUBLE_ARROW = 116, GDK_SHUTTLE = 118, GDK_SIZING = 120, GDK_SPIDER = 122, GDK_SPRAYCAN = 124, GDK_STAR = 126, GDK_TARGET = 128, GDK_TCROSS = 130, GDK_TOP_LEFT_ARROW = 132, GDK_TOP_LEFT_CORNER = 134, GDK_TOP_RIGHT_CORNER = 136, GDK_TOP_SIDE = 138, GDK_TOP_TEE = 140, GDK_TREK = 142, GDK_UL_ANGLE = 144, GDK_UMBRELLA = 146, GDK_UR_ANGLE = 148, GDK_WATCH = 150, GDK_XTERM = 152, GDK_LAST_CURSOR = 153, GDK_BLANK_CURSOR = -2, GDK_CURSOR_IS_PIXMAP = -1, };
/*****************************************************************************************/
/******                                                                             ******/
/******                          Function Prototypes                                ******/
/******                                                                             ******/
/*****************************************************************************************/
gboolean dup_string( gchar **, gchar * );
gboolean utf8_dup_string( gchar **, gchar * );
GtkWidget *ghid_scrolled_text_view( GtkWidget *, GtkWidget **, GtkPolicyType , GtkPolicyType  );
void text_view_append( GtkWidget *, gchar * );
void ghid_text_view_append_strings( GtkWidget *, gchar **, gint  );
void ghid_text_view_append( GtkWidget *, gchar * );
void ghid_label_set_markup( GtkWidget *, gchar * );
GtkWidget *ghid_notebook_page( GtkWidget *, char *, gint , gint  );
GtkTreeSelection *ghid_scrolled_selection( GtkTreeView *, GtkWidget *, GtkSelectionMode , GtkPolicyType , GtkPolicyType , void (*)( void ), gpointer  );
GtkWidget *ghid_category_vbox( GtkWidget *, gchar *, gint , gint , gboolean , gboolean  );
GtkWidget *ghid_framed_vbox_end( GtkWidget *, gchar *, gint , gboolean , gint , gint  );
GtkWidget *ghid_framed_vbox( GtkWidget *, gchar *, gint , gboolean , gint , gint  );
GtkWidget *ghid_framed_notebook_page( GtkWidget *, char *, gint , gint , gint , gint  );
GtkWidget *ghid_scrolled_vbox( GtkWidget *, GtkWidget **, GtkPolicyType , GtkPolicyType  );
void ghid_dialog_report( gchar *, gchar * );
void ghid_range_control( GtkWidget *, GtkWidget **, gboolean , GtkPositionType , gboolean , gint , gboolean , gboolean , gboolean , guint , gfloat , gfloat , gfloat , gfloat , gfloat , void (*)( void ), gpointer  );
void ghid_spin_button( GtkWidget *, GtkWidget **, gfloat , gfloat , gfloat , gfloat , gfloat , gint , gint , void (*)( void ), gpointer , gboolean , gchar * );
void ghid_table_spin_button( GtkWidget *, gint , gint , GtkWidget **, gfloat , gfloat , gfloat , gfloat , gfloat , gint , gint , void (*)( void ), gpointer , gboolean , gchar * );
void ghid_button_connected( GtkWidget *, GtkWidget **, gboolean , gboolean , gboolean , gint , void (*)( void ), gpointer , gchar * );
gboolean ghid_button_active( GtkWidget * );
void ghid_check_button_connected( GtkWidget *, GtkWidget **, gboolean , gboolean , gboolean , gboolean , gint , void (*)( void ), gpointer , gchar * );
gchar *ghid_entry_get_text( GtkWidget * );
void ghid_button_set_text( GtkWidget *, gchar * );
void ghid_map_color_string( char *, GdkColor * );
gchar *ghid_get_color_name( GdkColor * );
void ghid_draw_string_markup( GdkDrawable *, PangoFontDescription *, GdkGC *, gint , gint , gchar * );
void ghid_string_markup_extents( PangoFontDescription *, gchar *, gint *, gint * );
void ghid_draw_area_update( GHidPort *, GdkRectangle * );
ButtonState ghid_button_state( GdkModifierType * );
ModifierKeysState ghid_modifier_keys_state( GdkModifierType * );
void free_glist_and_data( GList ** );
gboolean g_utf8_validate( gchar *, void *, void * );
void g_free( gpointer  );
void gdk_window_invalidate_rect( GdkWindow *, GdkRectangle *, gboolean  );
gboolean gdk_color_parse( gchar *, GdkColor * );
GType gtk_text_view_get_type( void );
void gtk_table_attach_defaults( void *, GtkWidget *, guint , guint , guint , guint  );
GtkWidget *gtk_bin_get_child( void * );
GType gtk_box_get_type( void );
void gtk_scale_set_digits( void *, gint  );
GType gtk_scale_get_type( void );
void g_object_unref( gpointer  );
GtkWidget *gtk_label_new( gchar * );
GType gtk_table_get_type( void );
gulong gtk_signal_connect_full( GtkObject *, gchar *, GCallback , void *, gpointer , GDestroyNotify , gint , gint  );
GtkWidget *gtk_vbox_new( gboolean , gint  );
void gtk_range_set_increments( void *, gdouble , gdouble  );
gchar *g_strdup( gchar * );
GType gtk_widget_get_type( void );
void gtk_widget_destroy( GtkWidget * );
void g_list_free( GList * );
gchar *g_strconcat( gchar *, ... );
void gtk_label_set_justify( void *, void * );
void gtk_label_set_text( void *, gchar * );
GType gtk_dialog_get_type( void );
void gdk_colormap_free_colors( GdkColormap *, GdkColor *, gint  );
void gtk_scrolled_window_set_policy( void *, GtkPolicyType , GtkPolicyType  );
void *gtk_text_buffer_create_tag( GtkTextBuffer *, gchar *, gchar *, ... );
GtkWidget *gtk_dialog_new_with_buttons( gchar *, GtkWindow *, void *, gchar *, ... );
gint gtk_notebook_append_page( GtkNotebook *, GtkWidget *, GtkWidget * );
gchar *gtk_entry_get_text( GtkEntry * );
GtkWidget *gtk_frame_new( gchar * );
GdkColormap *gtk_widget_get_colormap( GtkWidget * );
void gtk_text_view_set_editable( void *, gboolean  );
gint gdk_color_alloc( GdkColormap *, GdkColor * );
GtkWidget *gtk_text_view_new( void );
void gtk_text_buffer_insert( GtkTextBuffer *, void *, gchar *, gint  );
void gtk_widget_show_all( GtkWidget * );
GType gtk_range_get_type( void );
GType gtk_container_get_type( void );
char *dcgettext( char *, char *, int  );
gchar *g_strdup_printf( gchar *, ... );
GType gtk_adjustment_get_type( void );
GdkWindow *gdk_window_get_pointer( GdkWindow *, gint *, gint *, GdkModifierType * );
GType gtk_window_get_type( void );
void gtk_text_buffer_get_end_iter( GtkTextBuffer *, void * );
unsigned int strlen( char * );
void gtk_text_view_scroll_to_mark( void *, GtkTextMark *, gdouble , gboolean , gdouble , gdouble  );
GtkObject *gtk_adjustment_new( gdouble , gdouble , gdouble , gdouble , gdouble , gdouble  );
GtkWidget *gtk_check_button_new_with_label( gchar * );
void pango_layout_get_pixel_size( PangoLayout *, int *, int * );
GType gtk_label_get_type( void );
GType gtk_object_get_type( void );
void gtk_spin_button_set_numeric( GtkSpinButton *, gboolean  );
void gtk_widget_set_size_request( GtkWidget *, gint , gint  );
GType gtk_entry_get_type( void );
void gtk_scrolled_window_add_with_viewport( void *, GtkWidget * );
gulong g_signal_connect_data( gpointer , gchar *, GCallback , gpointer , void *, void * );
GtkTextMark *gtk_text_buffer_create_mark( GtkTextBuffer *, gchar *, void *, gboolean  );
void gdk_draw_layout( GdkDrawable *, GdkGC *, gint , gint , PangoLayout * );
GTypeInstance *g_type_check_instance_cast( GTypeInstance *, GType  );
void pango_layout_set_font_description( PangoLayout *, PangoFontDescription * );
void gtk_scale_set_value_pos( void *, GtkPositionType  );
gchar *g_locale_to_utf8( gchar *, void *, gsize *, gsize *, void * );
GtkWidget *gtk_hbox_new( gboolean , gint  );
void gtk_container_add( GtkContainer *, GtkWidget * );
GtkTextBuffer *gtk_text_view_get_buffer( void * );
void gtk_toggle_button_set_active( GtkToggleButton *, gboolean  );
GType gtk_toggle_button_get_type( void );
GtkWidget *gtk_scrolled_window_new( GtkAdjustment *, GtkAdjustment * );
void gtk_box_pack_start( void *, GtkWidget *, gboolean , gboolean , guint  );
void pango_layout_set_markup( PangoLayout *, char *, int  );
GType gtk_misc_get_type( void );
GtkWidget *gtk_button_new_with_label( gchar * );
GType gtk_notebook_get_type( void );
PangoLayout *gtk_widget_create_pango_layout( GtkWidget *, gchar * );
void gtk_tree_selection_set_mode( GtkTreeSelection *, GtkSelectionMode  );
GType gtk_scrolled_window_get_type( void );
void gtk_range_set_update_policy( void *, void * );
GtkTreeSelection *gtk_tree_view_get_selection( GtkTreeView * );
GtkWidget *gtk_spin_button_new( GtkAdjustment *, gdouble , guint  );
void gtk_text_buffer_insert_with_tags_by_name( GtkTextBuffer *, void *, gchar *, gint , gchar *, ... );
void gtk_window_set_wmclass( GtkWindow *, gchar *, gchar * );
GtkWidget *gtk_vscale_new( GtkAdjustment * );
GType gtk_spin_button_get_type( void );
GType gtk_bin_get_type( void );
int strcmp( char *, char * );
void gtk_label_set_markup( void *, gchar * );
void gtk_container_set_border_width( GtkContainer *, guint  );
void gtk_text_buffer_delete_mark( GtkTextBuffer *, GtkTextMark * );
GtkWidget *gtk_hscale_new( GtkAdjustment * );
void gtk_misc_set_alignment( void *, gfloat , gfloat  );
void gtk_scale_set_draw_value( void *, gboolean  );
void gtk_box_pack_end( void *, GtkWidget *, gboolean , gboolean , guint  );
/*****************************************************************************************/
/******                                                                             ******/
/******                        Forward Var Declarations                             ******/
/******                                                                             ******/
/*****************************************************************************************/
extern GHidPort ghid_port;
/*****************************************************************************************/
/******                                                                             ******/
/******                      Inline Function Definitions                            ******/
/******                                                                             ******/
/*****************************************************************************************/
