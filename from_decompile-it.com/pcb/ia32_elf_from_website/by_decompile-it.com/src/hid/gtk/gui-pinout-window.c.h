#define __MOD(a,b) a % b
/*****************************************************************************************/
/******                                                                             ******/
/******                            Structure Definitions                            ******/
/******                                                                             ******/
/*****************************************************************************************/
typedef struct _GhidPinoutPreview GhidPinoutPreview;
typedef struct _GtkDrawingArea GtkDrawingArea;
typedef struct _GtkWidget GtkWidget;
typedef struct _GtkObject GtkObject;
typedef struct _GObject GInitiallyUnowned;
typedef struct _GTypeInstance GTypeInstance;
typedef struct _GTypeClass GTypeClass;
typedef unsigned int gsize;
typedef gsize GType;
struct _GTypeClass {
     GType g_type;
  } ;
struct _GTypeInstance {
     GTypeClass *g_class;
  } ;
typedef unsigned int guint;
typedef struct _GData GData;
struct _GData  ;
struct _GObject {
     GTypeInstance g_type_instance;
     guint ref_count;
     GData *qdata;
  } ;
typedef unsigned int guint32;
struct _GtkObject {
     GInitiallyUnowned parent_instance;
     guint32 flags;
  } ;
typedef unsigned short guint16;
typedef unsigned char guint8;
typedef char gchar;
typedef struct _GtkStyle GtkStyle;
typedef struct _GObject GObject;
typedef struct _GdkColor GdkColor;
struct _GdkColor {
     guint32 pixel;
     guint16 red;
     guint16 green;
     guint16 blue;
     char __pad[2];
  } ;
typedef struct _PangoFontDescription PangoFontDescription;
struct _PangoFontDescription  ;
typedef int gint;
typedef struct _GdkGC GdkGC;
typedef struct _GdkColormap GdkColormap;
typedef struct _GdkVisual GdkVisual;
enum  { GDK_VISUAL_STATIC_GRAY = 0, GDK_VISUAL_GRAYSCALE = 1, GDK_VISUAL_STATIC_COLOR = 2, GDK_VISUAL_PSEUDO_COLOR = 3, GDK_VISUAL_TRUE_COLOR = 4, GDK_VISUAL_DIRECT_COLOR = 5, };
typedef enum  { GDK_VISUAL_STATIC_GRAY = 0, GDK_VISUAL_GRAYSCALE = 1, GDK_VISUAL_STATIC_COLOR = 2, GDK_VISUAL_PSEUDO_COLOR = 3, GDK_VISUAL_TRUE_COLOR = 4, GDK_VISUAL_DIRECT_COLOR = 5, } GdkVisualType;
enum  { GDK_LSB_FIRST = 0, GDK_MSB_FIRST = 1, };
typedef enum  { GDK_LSB_FIRST = 0, GDK_MSB_FIRST = 1, } GdkByteOrder;
struct _GdkVisual {
     GObject parent_instance;
     GdkVisualType type;
     gint depth;
     GdkByteOrder byte_order;
     gint colormap_size;
     gint bits_per_rgb;
     guint32 red_mask;
     gint red_shift;
     gint red_prec;
     guint32 green_mask;
     gint green_shift;
     gint green_prec;
     guint32 blue_mask;
     gint blue_shift;
     gint blue_prec;
  } ;
typedef void *gpointer;
struct _GdkColormap {
     GObject parent_instance;
     gint size;
     GdkColor *colors;
     GdkVisual *visual;
     gpointer windowing_data;
  } ;
struct _GdkGC {
     GObject parent_instance;
     gint clip_x_origin;
     gint clip_y_origin;
     gint ts_x_origin;
     gint ts_y_origin;
     GdkColormap *colormap;
  } ;
typedef struct _GdkDrawable GdkPixmap;
struct _GdkDrawable {
     GObject parent_instance;
  } ;
typedef struct _GdkFont GdkFont;
enum  { GDK_FONT_FONT = 0, GDK_FONT_FONTSET = 1, };
typedef enum  { GDK_FONT_FONT = 0, GDK_FONT_FONTSET = 1, } GdkFontType;
struct _GdkFont {
     GdkFontType type;
     gint ascent;
     gint descent;
  } ;
typedef struct _GtkRcStyle GtkRcStyle;
enum  { GTK_RC_FG = 1, GTK_RC_BG = 2, GTK_RC_TEXT = 4, GTK_RC_BASE = 8, };
typedef enum  { GTK_RC_FG = 1, GTK_RC_BG = 2, GTK_RC_TEXT = 4, GTK_RC_BASE = 8, } GtkRcFlags;
typedef struct _GArray GArray;
struct _GArray {
     gchar *data;
     guint len;
  } ;
typedef struct _GSList GSList;
struct _GSList {
     gpointer data;
     GSList *next;
  } ;
struct _GtkRcStyle {
     GObject parent_instance;
     gchar *name;
     gchar *bg_pixmap_name[5];
     PangoFontDescription *font_desc;
     GtkRcFlags color_flags[5];
     GdkColor fg[5];
     GdkColor bg[5];
     GdkColor text[5];
     GdkColor base[5];
     gint xthickness;
     gint ythickness;
     GArray *rc_properties;
     GSList *rc_style_lists;
     GSList *icon_factories;
     guint bits_at_320;
  } ;
struct _GtkStyle {
     GObject parent_instance;
     GdkColor fg[5];
     GdkColor bg[5];
     GdkColor light[5];
     GdkColor dark[5];
     GdkColor mid[5];
     GdkColor text[5];
     GdkColor base[5];
     GdkColor text_aa[5];
     GdkColor black;
     GdkColor white;
     PangoFontDescription *font_desc;
     gint xthickness;
     gint ythickness;
     GdkGC *fg_gc[5];
     GdkGC *bg_gc[5];
     GdkGC *light_gc[5];
     GdkGC *dark_gc[5];
     GdkGC *mid_gc[5];
     GdkGC *text_gc[5];
     GdkGC *base_gc[5];
     GdkGC *text_aa_gc[5];
     GdkGC *black_gc;
     GdkGC *white_gc;
     GdkPixmap *bg_pixmap[5];
     gint attach_count;
     gint depth;
     GdkColormap *colormap;
     GdkFont *private_font;
     PangoFontDescription *private_font_desc;
     GtkRcStyle *rc_style;
     GSList *styles;
     GArray *property_cache;
     GSList *icon_factories;
  } ;
typedef struct _GtkRequisition GtkRequisition;
struct _GtkRequisition {
     gint width;
     gint height;
  } ;
typedef struct _GdkRectangle GdkRectangle;
struct _GdkRectangle {
     gint x;
     gint y;
     gint width;
     gint height;
  } ;
typedef GdkRectangle GtkAllocation;
typedef struct _GdkDrawable GdkWindow;
struct _GtkWidget {
     GtkObject object;
     guint16 private_flags;
     guint8 state;
     guint8 saved_state;
     gchar *name;
     GtkStyle *style;
     GtkRequisition requisition;
     GtkAllocation allocation;
     GdkWindow *window;
     GtkWidget *parent;
  } ;
struct _GtkDrawingArea {
     GtkWidget widget;
     gpointer draw_data;
  } ;
typedef struct BoxType BoxType;
typedef int LocationType;
struct BoxType {
     LocationType X1;
     LocationType Y1;
     LocationType X2;
     LocationType Y2;
  } ;
typedef struct {
     unsigned long f;
     unsigned char t[8];
  } FlagType;
typedef int BDimension;
typedef unsigned char BYTE;
typedef struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Scale;
     LocationType X;
     LocationType Y;
     BYTE Direction;
     char *TextString;
     void *Element;
  } TextType;
typedef unsigned int Cardinal;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     BDimension Mask;
     BDimension DrillingHole;
     LocationType X;
     LocationType Y;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
typedef struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     BDimension Mask;
     BDimension DrillingHole;
     LocationType X;
     LocationType Y;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } *PinTypePtr;
typedef struct {
     LocationType X;
     LocationType Y;
     LocationType X2;
     LocationType Y2;
     long ID;
  } PointType;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     BDimension Mask;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
typedef struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     BDimension Mask;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } *PadTypePtr;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
typedef struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } *LineTypePtr;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } ;
typedef struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } *ArcTypePtr;
typedef struct {
     char *name;
     char *value;
  } AttributeType;
typedef struct {
     int Number;
     int Max;
     AttributeType *List;
  } AttributeListType;
typedef struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     TextType Name[3];
     LocationType MarkX;
     LocationType MarkY;
     Cardinal PinN;
     Cardinal PinMax;
     Cardinal PadN;
     Cardinal PadMax;
     Cardinal LineN;
     Cardinal LineMax;
     Cardinal ArcN;
     Cardinal ArcMax;
     PinTypePtr Pin;
     PadTypePtr Pad;
     LineTypePtr Line;
     ArcTypePtr Arc;
     BoxType VBox;
     AttributeListType Attributes;
  } ElementType;
typedef float gfloat;
struct _GhidPinoutPreview {
     GtkDrawingArea parent_instance;
     ElementType element;
     gfloat zoom;
     gfloat scale;
     gint x_max;
     gint y_max;
     gint w_pixels;
     gint h_pixels;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     BDimension Mask;
     BDimension DrillingHole;
     LocationType X;
     LocationType Y;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     BDimension Mask;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } ;
typedef struct _GdkDrawable GdkDrawable;
typedef struct _GdkCursor GdkCursor;
enum  { GDK_X_CURSOR = 0, GDK_ARROW = 2, GDK_BASED_ARROW_DOWN = 4, GDK_BASED_ARROW_UP = 6, GDK_BOAT = 8, GDK_BOGOSITY = 10, GDK_BOTTOM_LEFT_CORNER = 12, GDK_BOTTOM_RIGHT_CORNER = 14, GDK_BOTTOM_SIDE = 16, GDK_BOTTOM_TEE = 18, GDK_BOX_SPIRAL = 20, GDK_CENTER_PTR = 22, GDK_CIRCLE = 24, GDK_CLOCK = 26, GDK_COFFEE_MUG = 28, GDK_CROSS = 30, GDK_CROSS_REVERSE = 32, GDK_CROSSHAIR = 34, GDK_DIAMOND_CROSS = 36, GDK_DOT = 38, GDK_DOTBOX = 40, GDK_DOUBLE_ARROW = 42, GDK_DRAFT_LARGE = 44, GDK_DRAFT_SMALL = 46, GDK_DRAPED_BOX = 48, GDK_EXCHANGE = 50, GDK_FLEUR = 52, GDK_GOBBLER = 54, GDK_GUMBY = 56, GDK_HAND1 = 58, GDK_HAND2 = 60, GDK_HEART = 62, GDK_ICON = 64, GDK_IRON_CROSS = 66, GDK_LEFT_PTR = 68, GDK_LEFT_SIDE = 70, GDK_LEFT_TEE = 72, GDK_LEFTBUTTON = 74, GDK_LL_ANGLE = 76, GDK_LR_ANGLE = 78, GDK_MAN = 80, GDK_MIDDLEBUTTON = 82, GDK_MOUSE = 84, GDK_PENCIL = 86, GDK_PIRATE = 88, GDK_PLUS = 90, GDK_QUESTION_ARROW = 92, GDK_RIGHT_PTR = 94, GDK_RIGHT_SIDE = 96, GDK_RIGHT_TEE = 98, GDK_RIGHTBUTTON = 100, GDK_RTL_LOGO = 102, GDK_SAILBOAT = 104, GDK_SB_DOWN_ARROW = 106, GDK_SB_H_DOUBLE_ARROW = 108, GDK_SB_LEFT_ARROW = 110, GDK_SB_RIGHT_ARROW = 112, GDK_SB_UP_ARROW = 114, GDK_SB_V_DOUBLE_ARROW = 116, GDK_SHUTTLE = 118, GDK_SIZING = 120, GDK_SPIDER = 122, GDK_SPRAYCAN = 124, GDK_STAR = 126, GDK_TARGET = 128, GDK_TCROSS = 130, GDK_TOP_LEFT_ARROW = 132, GDK_TOP_LEFT_CORNER = 134, GDK_TOP_RIGHT_CORNER = 136, GDK_TOP_SIDE = 138, GDK_TOP_TEE = 140, GDK_TREK = 142, GDK_UL_ANGLE = 144, GDK_UMBRELLA = 146, GDK_UR_ANGLE = 148, GDK_WATCH = 150, GDK_XTERM = 152, GDK_LAST_CURSOR = 153, GDK_BLANK_CURSOR = -2, GDK_CURSOR_IS_PIXMAP = -1, };
typedef enum  { GDK_X_CURSOR = 0, GDK_ARROW = 2, GDK_BASED_ARROW_DOWN = 4, GDK_BASED_ARROW_UP = 6, GDK_BOAT = 8, GDK_BOGOSITY = 10, GDK_BOTTOM_LEFT_CORNER = 12, GDK_BOTTOM_RIGHT_CORNER = 14, GDK_BOTTOM_SIDE = 16, GDK_BOTTOM_TEE = 18, GDK_BOX_SPIRAL = 20, GDK_CENTER_PTR = 22, GDK_CIRCLE = 24, GDK_CLOCK = 26, GDK_COFFEE_MUG = 28, GDK_CROSS = 30, GDK_CROSS_REVERSE = 32, GDK_CROSSHAIR = 34, GDK_DIAMOND_CROSS = 36, GDK_DOT = 38, GDK_DOTBOX = 40, GDK_DOUBLE_ARROW = 42, GDK_DRAFT_LARGE = 44, GDK_DRAFT_SMALL = 46, GDK_DRAPED_BOX = 48, GDK_EXCHANGE = 50, GDK_FLEUR = 52, GDK_GOBBLER = 54, GDK_GUMBY = 56, GDK_HAND1 = 58, GDK_HAND2 = 60, GDK_HEART = 62, GDK_ICON = 64, GDK_IRON_CROSS = 66, GDK_LEFT_PTR = 68, GDK_LEFT_SIDE = 70, GDK_LEFT_TEE = 72, GDK_LEFTBUTTON = 74, GDK_LL_ANGLE = 76, GDK_LR_ANGLE = 78, GDK_MAN = 80, GDK_MIDDLEBUTTON = 82, GDK_MOUSE = 84, GDK_PENCIL = 86, GDK_PIRATE = 88, GDK_PLUS = 90, GDK_QUESTION_ARROW = 92, GDK_RIGHT_PTR = 94, GDK_RIGHT_SIDE = 96, GDK_RIGHT_TEE = 98, GDK_RIGHTBUTTON = 100, GDK_RTL_LOGO = 102, GDK_SAILBOAT = 104, GDK_SB_DOWN_ARROW = 106, GDK_SB_H_DOUBLE_ARROW = 108, GDK_SB_LEFT_ARROW = 110, GDK_SB_RIGHT_ARROW = 112, GDK_SB_UP_ARROW = 114, GDK_SB_V_DOUBLE_ARROW = 116, GDK_SHUTTLE = 118, GDK_SIZING = 120, GDK_SPIDER = 122, GDK_SPRAYCAN = 124, GDK_STAR = 126, GDK_TARGET = 128, GDK_TCROSS = 130, GDK_TOP_LEFT_ARROW = 132, GDK_TOP_LEFT_CORNER = 134, GDK_TOP_RIGHT_CORNER = 136, GDK_TOP_SIDE = 138, GDK_TOP_TEE = 140, GDK_TREK = 142, GDK_UL_ANGLE = 144, GDK_UMBRELLA = 146, GDK_UR_ANGLE = 148, GDK_WATCH = 150, GDK_XTERM = 152, GDK_LAST_CURSOR = 153, GDK_BLANK_CURSOR = -2, GDK_CURSOR_IS_PIXMAP = -1, } GdkCursorType;
struct _GdkCursor {
     GdkCursorType type;
     guint ref_count;
  } ;
enum  { GDK_X_CURSOR = 0, GDK_ARROW = 2, GDK_BASED_ARROW_DOWN = 4, GDK_BASED_ARROW_UP = 6, GDK_BOAT = 8, GDK_BOGOSITY = 10, GDK_BOTTOM_LEFT_CORNER = 12, GDK_BOTTOM_RIGHT_CORNER = 14, GDK_BOTTOM_SIDE = 16, GDK_BOTTOM_TEE = 18, GDK_BOX_SPIRAL = 20, GDK_CENTER_PTR = 22, GDK_CIRCLE = 24, GDK_CLOCK = 26, GDK_COFFEE_MUG = 28, GDK_CROSS = 30, GDK_CROSS_REVERSE = 32, GDK_CROSSHAIR = 34, GDK_DIAMOND_CROSS = 36, GDK_DOT = 38, GDK_DOTBOX = 40, GDK_DOUBLE_ARROW = 42, GDK_DRAFT_LARGE = 44, GDK_DRAFT_SMALL = 46, GDK_DRAPED_BOX = 48, GDK_EXCHANGE = 50, GDK_FLEUR = 52, GDK_GOBBLER = 54, GDK_GUMBY = 56, GDK_HAND1 = 58, GDK_HAND2 = 60, GDK_HEART = 62, GDK_ICON = 64, GDK_IRON_CROSS = 66, GDK_LEFT_PTR = 68, GDK_LEFT_SIDE = 70, GDK_LEFT_TEE = 72, GDK_LEFTBUTTON = 74, GDK_LL_ANGLE = 76, GDK_LR_ANGLE = 78, GDK_MAN = 80, GDK_MIDDLEBUTTON = 82, GDK_MOUSE = 84, GDK_PENCIL = 86, GDK_PIRATE = 88, GDK_PLUS = 90, GDK_QUESTION_ARROW = 92, GDK_RIGHT_PTR = 94, GDK_RIGHT_SIDE = 96, GDK_RIGHT_TEE = 98, GDK_RIGHTBUTTON = 100, GDK_RTL_LOGO = 102, GDK_SAILBOAT = 104, GDK_SB_DOWN_ARROW = 106, GDK_SB_H_DOUBLE_ARROW = 108, GDK_SB_LEFT_ARROW = 110, GDK_SB_RIGHT_ARROW = 112, GDK_SB_UP_ARROW = 114, GDK_SB_V_DOUBLE_ARROW = 116, GDK_SHUTTLE = 118, GDK_SIZING = 120, GDK_SPIDER = 122, GDK_SPRAYCAN = 124, GDK_STAR = 126, GDK_TARGET = 128, GDK_TCROSS = 130, GDK_TOP_LEFT_ARROW = 132, GDK_TOP_LEFT_CORNER = 134, GDK_TOP_RIGHT_CORNER = 136, GDK_TOP_SIDE = 138, GDK_TOP_TEE = 140, GDK_TREK = 142, GDK_UL_ANGLE = 144, GDK_UMBRELLA = 146, GDK_UR_ANGLE = 148, GDK_WATCH = 150, GDK_XTERM = 152, GDK_LAST_CURSOR = 153, GDK_BLANK_CURSOR = -2, GDK_CURSOR_IS_PIXMAP = -1, };
typedef gint gboolean;
typedef double gdouble;
typedef struct {
     GtkWidget *top_window;
     GtkWidget *drawing_area;
     GdkPixmap *pixmap;
     GdkPixmap *mask;
     GdkDrawable *drawable;
     gint width;
     gint height;
     GdkGC *bg_gc;
     GdkGC *offlimits_gc;
     GdkGC *mask_gc;
     GdkGC *u_gc;
     GdkGC *grid_gc;
     GdkColor bg_color;
     GdkColor offlimits_color;
     GdkColor grid_color;
     GdkColormap *colormap;
     GdkCursor *X_cursor;
     GdkCursorType X_cursor_shape;
     gboolean has_entered;
     gboolean panning;
     gdouble zoom;
     gint view_x0;
     gint view_y0;
     gint view_width;
     gint view_height;
     gint view_x;
     gint view_y;
     gint x_crosshair;
     gint y_crosshair;
  } GHidPort;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     BDimension Mask;
     BDimension DrillingHole;
     LocationType X;
     LocationType Y;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     BDimension Mask;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } ;
typedef struct _GtkAdjustment GtkAdjustment;
struct _GtkAdjustment {
     GtkObject parent_instance;
     gdouble lower;
     gdouble upper;
     gdouble value;
     gdouble step_increment;
     gdouble page_increment;
     gdouble page_size;
  } ;
typedef struct _GtkWindow GtkWindow;
typedef struct _GtkBin GtkBin;
typedef struct _GtkContainer GtkContainer;
struct _GtkContainer {
     GtkWidget widget;
     GtkWidget *focus_child;
     guint bits_at_64;
  } ;
struct _GtkBin {
     GtkContainer container;
     GtkWidget *child;
  } ;
typedef struct _GtkWindowGeometryInfo GtkWindowGeometryInfo;
struct _GtkWindowGeometryInfo  ;
typedef struct _GtkWindowGroup GtkWindowGroup;
struct _GtkWindowGroup {
     GObject parent_instance;
     GSList *grabs;
  } ;
enum  { GDK_SHIFT_MASK = 1, GDK_LOCK_MASK = 2, GDK_CONTROL_MASK = 4, GDK_MOD1_MASK = 8, GDK_MOD2_MASK = 16, GDK_MOD3_MASK = 32, GDK_MOD4_MASK = 64, GDK_MOD5_MASK = 128, GDK_BUTTON1_MASK = 256, GDK_BUTTON2_MASK = 512, GDK_BUTTON3_MASK = 1024, GDK_BUTTON4_MASK = 2048, GDK_BUTTON5_MASK = 4096, GDK_SUPER_MASK = 67108864, GDK_HYPER_MASK = 134217728, GDK_META_MASK = 268435456, GDK_RELEASE_MASK = 1073741824, GDK_MODIFIER_MASK = 1543512063, };
typedef enum  { GDK_SHIFT_MASK = 1, GDK_LOCK_MASK = 2, GDK_CONTROL_MASK = 4, GDK_MOD1_MASK = 8, GDK_MOD2_MASK = 16, GDK_MOD3_MASK = 32, GDK_MOD4_MASK = 64, GDK_MOD5_MASK = 128, GDK_BUTTON1_MASK = 256, GDK_BUTTON2_MASK = 512, GDK_BUTTON3_MASK = 1024, GDK_BUTTON4_MASK = 2048, GDK_BUTTON5_MASK = 4096, GDK_SUPER_MASK = 67108864, GDK_HYPER_MASK = 134217728, GDK_META_MASK = 268435456, GDK_RELEASE_MASK = 1073741824, GDK_MODIFIER_MASK = 1543512063, } GdkModifierType;
typedef struct _GdkScreen GdkScreen;
typedef struct _cairo_font_options cairo_font_options_t;
struct _cairo_font_options  ;
struct _GdkScreen {
     GObject parent_instance;
     guint bits_at_12;
     GdkGC *normal_gcs[32];
     GdkGC *exposure_gcs[32];
     GdkGC *subwindow_gcs[32];
     cairo_font_options_t *font_options;
     double resolution;
  } ;
struct _GtkWindow {
     GtkBin bin;
     gchar *title;
     gchar *wmclass_name;
     gchar *wmclass_class;
     gchar *wm_role;
     GtkWidget *focus_widget;
     GtkWidget *default_widget;
     GtkWindow *transient_parent;
     GtkWindowGeometryInfo *geometry_info;
     GdkWindow *frame;
     GtkWindowGroup *group;
     guint16 configure_request_count;
     guint bits_at_112;
     guint bits_at_116;
     guint frame_left;
     guint frame_top;
     guint frame_right;
     guint frame_bottom;
     guint keys_changed_handler;
     GdkModifierType mnemonic_modifier;
     GdkScreen *screen;
  } ;
typedef unsigned long gulong;
typedef void (*GCallback)( void );
typedef char Boolean;
typedef struct {
     BDimension Thick;
     BDimension Diameter;
     BDimension Hole;
     BDimension Keepaway;
     char *Name;
     int index;
  } RouteStyleType;
typedef struct {
     Cardinal Number[16];
     Cardinal Entries[16][18];
  } LayerGroupType;
typedef struct {
     Boolean grid_units_mm;
     int verbose;
     char *BlackColor;
     char *WhiteColor;
     char *BackgroundColor;
     char *CrosshairColor;
     char *CrossColor;
     char *ViaColor;
     char *ViaSelectedColor;
     char *PinColor;
     char *PinSelectedColor;
     char *PinNameColor;
     char *ElementColor;
     char *RatColor;
     char *InvisibleObjectsColor;
     char *InvisibleMarkColor;
     char *ElementSelectedColor;
     char *RatSelectedColor;
     char *ConnectedColor;
     char *OffLimitColor;
     char *GridColor;
     char *LayerColor[16];
     char *LayerSelectedColor[16];
     char *WarnColor;
     char *MaskColor;
     int ViaThickness;
     int ViaDrillingHole;
     int LineThickness;
     int RatThickness;
     int Keepaway;
     int MaxWidth;
     int MaxHeight;
     int TextScale;
     int AlignmentDistance;
     int Bloat;
     int Shrink;
     int minWid;
     int minSlk;
     int minDrill;
     int minRing;
     double Grid;
     double IsleArea;
     double grid_increment_mm;
     double grid_increment_mil;
     double size_increment_mm;
     double size_increment_mil;
     double line_increment_mm;
     double line_increment_mil;
     double clear_increment_mm;
     double clear_increment_mil;
     double Zoom;
     double PinoutZoom;
     int PinoutNameLength;
     int Volume;
     int CharPerLine;
     int Mode;
     int BufferNumber;
     int GridFactor;
     int BackupInterval;
     char *DefaultLayerName[16];
     char *FontCommand;
     char *FileCommand;
     char *ElementCommand;
     char *PrintFile;
     char *LibraryCommandDir;
     char *LibraryCommand;
     char *LibraryContentsCommand;
     char *LibraryTree;
     char *SaveCommand;
     char *LibraryFilename;
     char *FontFile;
     char *Groups;
     char *Routes;
     char *FilePath;
     char *RatPath;
     char *RatCommand;
     char *FontPath;
     char *PinoutFont;
     char *ElementPath;
     char *LibraryPath;
     char *Size;
     char *Media;
     char *MenuFile;
     char *BackgroundImage;
     char *ScriptFilename;
     char *ActionString;
     char *FabAuthor;
     char *InitialLayerStack;
     Boolean DumpMenuFile;
     LocationType PinoutOffsetX;
     LocationType PinoutOffsetY;
     int PinoutTextOffsetX;
     int PinoutTextOffsetY;
     RouteStyleType RouteStyle[4];
     LayerGroupType LayerGroups;
     Boolean ClearLine;
     Boolean FullPoly;
     Boolean UniqueNames;
     Boolean SnapPin;
     Boolean ShowSolderSide;
     Boolean SaveLastCommand;
     Boolean SaveInTMP;
     Boolean DrawGrid;
     Boolean RatWarn;
     Boolean StipplePolygons;
     Boolean AllDirectionLines;
     Boolean RubberBandMode;
     Boolean SwapStartDirection;
     Boolean ShowDRC;
     Boolean AutoDRC;
     Boolean ShowNumber;
     Boolean OrthogonalMoves;
     Boolean ResetAfterElement;
     Boolean liveRouting;
     Boolean RingBellWhenFinished;
     Boolean AutoPlace;
     int HistorySize;
     int init_done;
  } SettingType;
/*****************************************************************************************/
/******                                                                             ******/
/******                          Function Prototypes                                ******/
/******                                                                             ******/
/*****************************************************************************************/
void ghid_pinout_preview_get_natural_size( GhidPinoutPreview *, int *, int * );
GType ghid_pinout_preview_get_type( void );
GtkWidget *ghid_pinout_preview_new( ElementType * );
void ghid_pinout_window_show( GHidPort *, ElementType * );
void pinout_close_cb( GtkWidget *, GtkWidget * );
void g_free( gpointer  );
GType gtk_box_get_type( void );
GtkWidget *gtk_window_new( void * );
GType gtk_button_box_get_type( void );
GtkWidget *gtk_vbox_new( gboolean , gint  );
void gtk_widget_destroy( GtkWidget * );
GtkWidget *gtk_viewport_new( GtkAdjustment *, GtkAdjustment * );
void gtk_widget_show_all( GtkWidget * );
GType gtk_viewport_get_type( void );
GType gtk_container_get_type( void );
gchar *g_strdup_printf( gchar *, ... );
void gtk_window_set_title( GtkWindow *, gchar * );
void gtk_window_set_default_size( GtkWindow *, gint , gint  );
GType gtk_window_get_type( void );
void gtk_widget_realize( GtkWidget * );
void gtk_button_box_set_layout( void *, void * );
gulong g_signal_connect_data( gpointer , gchar *, GCallback , gpointer , void *, void * );
GTypeInstance *g_type_check_instance_cast( GTypeInstance *, GType  );
void gtk_container_add( GtkContainer *, GtkWidget * );
void gtk_box_pack_start( void *, GtkWidget *, gboolean , gboolean , guint  );
void gtk_viewport_set_shadow_type( void *, void * );
GtkWidget *gtk_button_new_from_stock( gchar * );
void gtk_window_set_wmclass( GtkWindow *, gchar *, gchar * );
void gtk_widget_set_uposition( GtkWidget *, gint , gint  );
void gtk_container_set_border_width( GtkContainer *, guint  );
GtkWidget *gtk_hbutton_box_new( void );
/*****************************************************************************************/
/******                                                                             ******/
/******                        Forward Var Declarations                             ******/
/******                                                                             ******/
/*****************************************************************************************/
extern SettingType Settings;
/*****************************************************************************************/
/******                                                                             ******/
/******                      Inline Function Definitions                            ******/
/******                                                                             ******/
/*****************************************************************************************/
