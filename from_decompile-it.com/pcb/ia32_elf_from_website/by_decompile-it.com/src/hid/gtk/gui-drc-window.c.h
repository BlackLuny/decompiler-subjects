#define __MOD(a,b) a % b
/*****************************************************************************************/
/******                                                                             ******/
/******                            Structure Definitions                            ******/
/******                                                                             ******/
/*****************************************************************************************/
typedef unsigned int Cardinal;
typedef struct BoxType BoxType;
typedef int LocationType;
struct BoxType {
     LocationType X1;
     LocationType Y1;
     LocationType X2;
     LocationType Y2;
  } ;
typedef struct {
     unsigned long f;
     unsigned char t[8];
  } FlagType;
typedef int BDimension;
typedef struct {
     LocationType X;
     LocationType Y;
     LocationType X2;
     LocationType Y2;
     long ID;
  } PointType;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
typedef struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } *LineTypePtr;
typedef unsigned char BYTE;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Scale;
     LocationType X;
     LocationType Y;
     BYTE Direction;
     char *TextString;
     void *Element;
  } ;
typedef struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Scale;
     LocationType X;
     LocationType Y;
     BYTE Direction;
     char *TextString;
     void *Element;
  } *TextTypePtr;
typedef struct polygon_st *PolygonTypePtr;
typedef struct POLYAREA POLYAREA;
typedef struct PLINE PLINE;
typedef struct VNODE VNODE;
struct {
     unsigned int bits_at_0;
  } ;
typedef struct CVCList CVCList;
struct CVCList {
     double angle;
     VNODE *parent;
     CVCList *prev;
     CVCList *next;
     CVCList *head;
     char poly;
     char side;
     char __pad[2];
  } ;
typedef int vertex[2];
typedef vertex Vector;
struct VNODE {
     VNODE *next;
     VNODE *prev;
     VNODE *shared;
     struct {
       unsigned int bits_at_0;
    } Flags;
     CVCList *cvc_prev;
     CVCList *cvc_next;
     Vector point;
  } ;
typedef struct rtree rtree_t;
struct rtree {
     struct rtree_node *root;
     int size;
  } ;
struct {
     unsigned int bits_at_0;
  } ;
struct PLINE {
     int xmin;
     int ymin;
     int xmax;
     int ymax;
     PLINE *next;
     VNODE head;
     unsigned int Count;
     double area;
     rtree_t *tree;
     struct {
       unsigned int bits_at_0;
    } Flags;
  } ;
struct POLYAREA {
     POLYAREA *f;
     POLYAREA *b;
     PLINE *contours;
  } ;
struct {
     LocationType X;
     LocationType Y;
     LocationType X2;
     LocationType Y2;
     long ID;
  } ;
typedef struct {
     LocationType X;
     LocationType Y;
     LocationType X2;
     LocationType Y2;
     long ID;
  } *PointTypePtr;
struct polygon_st {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     Cardinal PointN;
     Cardinal PointMax;
     POLYAREA *Clipped;
     PLINE *NoHoles;
     int NoHolesValid;
     PointTypePtr Points;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } ;
typedef struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } *ArcTypePtr;
typedef char Boolean;
typedef struct {
     char *name;
     char *value;
  } AttributeType;
typedef struct {
     int Number;
     int Max;
     AttributeType *List;
  } AttributeListType;
struct {
     char *Name;
     Cardinal LineN;
     Cardinal TextN;
     Cardinal PolygonN;
     Cardinal ArcN;
     Cardinal LineMax;
     Cardinal TextMax;
     Cardinal PolygonMax;
     Cardinal ArcMax;
     LineTypePtr Line;
     TextTypePtr Text;
     PolygonTypePtr Polygon;
     ArcTypePtr Arc;
     rtree_t *line_tree;
     rtree_t *text_tree;
     rtree_t *polygon_tree;
     rtree_t *arc_tree;
     Boolean On;
     char *Color;
     char *SelectedColor;
     AttributeListType Attributes;
  } ;
typedef struct {
     char *Name;
     Cardinal LineN;
     Cardinal TextN;
     Cardinal PolygonN;
     Cardinal ArcN;
     Cardinal LineMax;
     Cardinal TextMax;
     Cardinal PolygonMax;
     Cardinal ArcMax;
     LineTypePtr Line;
     TextTypePtr Text;
     PolygonTypePtr Polygon;
     ArcTypePtr Arc;
     rtree_t *line_tree;
     rtree_t *text_tree;
     rtree_t *polygon_tree;
     rtree_t *arc_tree;
     Boolean On;
     char *Color;
     char *SelectedColor;
     AttributeListType Attributes;
  } *LayerTypePtr;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     Cardinal group1;
     Cardinal group2;
  } ;
typedef struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     Cardinal group1;
     Cardinal group2;
  } *RatTypePtr;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Scale;
     LocationType X;
     LocationType Y;
     BYTE Direction;
     char *TextString;
     void *Element;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } ;
struct {
     char *Name;
     Cardinal LineN;
     Cardinal TextN;
     Cardinal PolygonN;
     Cardinal ArcN;
     Cardinal LineMax;
     Cardinal TextMax;
     Cardinal PolygonMax;
     Cardinal ArcMax;
     LineTypePtr Line;
     TextTypePtr Text;
     PolygonTypePtr Polygon;
     ArcTypePtr Arc;
     rtree_t *line_tree;
     rtree_t *text_tree;
     rtree_t *polygon_tree;
     rtree_t *arc_tree;
     Boolean On;
     char *Color;
     char *SelectedColor;
     AttributeListType Attributes;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Scale;
     LocationType X;
     LocationType Y;
     BYTE Direction;
     char *TextString;
     void *Element;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } ;
struct {
     char *Name;
     Cardinal LineN;
     Cardinal TextN;
     Cardinal PolygonN;
     Cardinal ArcN;
     Cardinal LineMax;
     Cardinal TextMax;
     Cardinal PolygonMax;
     Cardinal ArcMax;
     LineTypePtr Line;
     TextTypePtr Text;
     PolygonTypePtr Polygon;
     ArcTypePtr Arc;
     rtree_t *line_tree;
     rtree_t *text_tree;
     rtree_t *polygon_tree;
     rtree_t *arc_tree;
     Boolean On;
     char *Color;
     char *SelectedColor;
     AttributeListType Attributes;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     BDimension Mask;
     BDimension DrillingHole;
     LocationType X;
     LocationType Y;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
typedef struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     BDimension Mask;
     BDimension DrillingHole;
     LocationType X;
     LocationType Y;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } *PinTypePtr;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     BDimension Mask;
     BDimension DrillingHole;
     LocationType X;
     LocationType Y;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     BDimension Mask;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
typedef struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     BDimension Mask;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } *PadTypePtr;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     BDimension Mask;
     BDimension DrillingHole;
     LocationType X;
     LocationType Y;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
typedef struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Scale;
     LocationType X;
     LocationType Y;
     BYTE Direction;
     char *TextString;
     void *Element;
  } TextType;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     BDimension Mask;
     BDimension DrillingHole;
     LocationType X;
     LocationType Y;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     BDimension Mask;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     TextType Name[3];
     LocationType MarkX;
     LocationType MarkY;
     Cardinal PinN;
     Cardinal PinMax;
     Cardinal PadN;
     Cardinal PadMax;
     Cardinal LineN;
     Cardinal LineMax;
     Cardinal ArcN;
     Cardinal ArcMax;
     PinTypePtr Pin;
     PadTypePtr Pad;
     LineTypePtr Line;
     ArcTypePtr Arc;
     BoxType VBox;
     AttributeListType Attributes;
  } ;
typedef struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     TextType Name[3];
     LocationType MarkX;
     LocationType MarkY;
     Cardinal PinN;
     Cardinal PinMax;
     Cardinal PadN;
     Cardinal PadMax;
     Cardinal LineN;
     Cardinal LineMax;
     Cardinal ArcN;
     Cardinal ArcMax;
     PinTypePtr Pin;
     PadTypePtr Pad;
     LineTypePtr Line;
     ArcTypePtr Arc;
     BoxType VBox;
     AttributeListType Attributes;
  } *ElementTypePtr;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     Cardinal group1;
     Cardinal group2;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
typedef struct {
     LineTypePtr Line;
     Boolean Valid;
     Cardinal LineN;
     Cardinal LineMax;
     BDimension Width;
     BDimension Height;
     BDimension Delta;
  } SymbolType;
typedef struct {
     LocationType MaxHeight;
     LocationType MaxWidth;
     BoxType DefaultSymbol;
     SymbolType Symbol[256];
     Boolean Valid;
     char __pad[3];
  } FontType;
typedef struct {
     Cardinal Number[16];
     Cardinal Entries[16][18];
  } LayerGroupType;
typedef struct {
     BDimension Thick;
     BDimension Diameter;
     BDimension Hole;
     BDimension Keepaway;
     char *Name;
     int index;
  } RouteStyleType;
struct {
     char *ListEntry;
     char *AllocatedMemory;
     char *Template;
     char *Package;
     char *Value;
     char *Description;
  } ;
typedef struct {
     char *ListEntry;
     char *AllocatedMemory;
     char *Template;
     char *Package;
     char *Value;
     char *Description;
  } *LibraryEntryTypePtr;
struct {
     char *Name;
     char *directory;
     char *Style;
     Cardinal EntryN;
     Cardinal EntryMax;
     LibraryEntryTypePtr Entry;
     char flag;
     char internal;
     char __pad[2];
  } ;
typedef struct {
     char *Name;
     char *directory;
     char *Style;
     Cardinal EntryN;
     Cardinal EntryMax;
     LibraryEntryTypePtr Entry;
     char flag;
     char internal;
     char __pad[2];
  } *LibraryMenuTypePtr;
typedef struct {
     Cardinal MenuN;
     Cardinal MenuMax;
     LibraryMenuTypePtr Menu;
  } LibraryType;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     BDimension Mask;
     BDimension DrillingHole;
     LocationType X;
     LocationType Y;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     BDimension Mask;
     BDimension DrillingHole;
     LocationType X;
     LocationType Y;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     BDimension Mask;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     TextType Name[3];
     LocationType MarkX;
     LocationType MarkY;
     Cardinal PinN;
     Cardinal PinMax;
     Cardinal PadN;
     Cardinal PadMax;
     Cardinal LineN;
     Cardinal LineMax;
     Cardinal ArcN;
     Cardinal ArcMax;
     PinTypePtr Pin;
     PadTypePtr Pad;
     LineTypePtr Line;
     ArcTypePtr Arc;
     BoxType VBox;
     AttributeListType Attributes;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     Cardinal group1;
     Cardinal group2;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Scale;
     LocationType X;
     LocationType Y;
     BYTE Direction;
     char *TextString;
     void *Element;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } ;
typedef struct {
     char *Name;
     Cardinal LineN;
     Cardinal TextN;
     Cardinal PolygonN;
     Cardinal ArcN;
     Cardinal LineMax;
     Cardinal TextMax;
     Cardinal PolygonMax;
     Cardinal ArcMax;
     LineTypePtr Line;
     TextTypePtr Text;
     PolygonTypePtr Polygon;
     ArcTypePtr Arc;
     rtree_t *line_tree;
     rtree_t *text_tree;
     rtree_t *polygon_tree;
     rtree_t *arc_tree;
     Boolean On;
     char *Color;
     char *SelectedColor;
     AttributeListType Attributes;
  } LayerType;
struct {
     Cardinal ViaN;
     Cardinal ViaMax;
     Cardinal ElementN;
     Cardinal ElementMax;
     Cardinal RatN;
     Cardinal RatMax;
     int LayerN;
     PinTypePtr Via;
     ElementTypePtr Element;
     RatTypePtr Rat;
     rtree_t *via_tree;
     rtree_t *element_tree;
     rtree_t *pin_tree;
     rtree_t *pad_tree;
     rtree_t *name_tree[3];
     rtree_t *rat_tree;
     struct PCBType *pcb;
     LayerType Layer[18];
  } ;
typedef struct {
     Cardinal ViaN;
     Cardinal ViaMax;
     Cardinal ElementN;
     Cardinal ElementMax;
     Cardinal RatN;
     Cardinal RatMax;
     int LayerN;
     PinTypePtr Via;
     ElementTypePtr Element;
     RatTypePtr Rat;
     rtree_t *via_tree;
     rtree_t *element_tree;
     rtree_t *pin_tree;
     rtree_t *pad_tree;
     rtree_t *name_tree[3];
     rtree_t *rat_tree;
     struct PCBType *pcb;
     LayerType Layer[18];
  } *DataTypePtr;
struct PCBType {
     long ID;
     FlagType Flags;
     char *Name;
     char *Filename;
     char *PrintFilename;
     char *Netlistname;
     char ThermStyle;
     Boolean Changed;
     Boolean ViaOn;
     Boolean ElementOn;
     Boolean RatOn;
     Boolean InvisibleObjectsOn;
     Boolean PinOn;
     Boolean SilkActive;
     Boolean RatDraw;
     char *ViaColor;
     char *ViaSelectedColor;
     char *PinColor;
     char *PinSelectedColor;
     char *PinNameColor;
     char *ElementColor;
     char *RatColor;
     char *InvisibleObjectsColor;
     char *InvisibleMarkColor;
     char *ElementSelectedColor;
     char *RatSelectedColor;
     char *ConnectedColor;
     char *WarnColor;
     char *MaskColor;
     long CursorX;
     long CursorY;
     long Clipping;
     int Bloat;
     int Shrink;
     int minWid;
     int minSlk;
     int minDrill;
     int minRing;
     int GridOffsetX;
     int GridOffsetY;
     int MaxWidth;
     int MaxHeight;
     double Grid;
     double Zoom;
     double IsleArea;
     double ThermScale;
     FontType Font;
     LayerGroupType LayerGroups;
     RouteStyleType RouteStyle[4];
     LibraryType NetlistLib;
     AttributeListType Attributes;
     DataTypePtr Data;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Scale;
     LocationType X;
     LocationType Y;
     BYTE Direction;
     char *TextString;
     void *Element;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } ;
struct {
     Cardinal ViaN;
     Cardinal ViaMax;
     Cardinal ElementN;
     Cardinal ElementMax;
     Cardinal RatN;
     Cardinal RatMax;
     int LayerN;
     PinTypePtr Via;
     ElementTypePtr Element;
     RatTypePtr Rat;
     rtree_t *via_tree;
     rtree_t *element_tree;
     rtree_t *pin_tree;
     rtree_t *pad_tree;
     rtree_t *name_tree[3];
     rtree_t *rat_tree;
     struct PCBType *pcb;
     LayerType Layer[18];
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Scale;
     LocationType X;
     LocationType Y;
     BYTE Direction;
     char *TextString;
     void *Element;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } ;
struct {
     char *Name;
     Cardinal LineN;
     Cardinal TextN;
     Cardinal PolygonN;
     Cardinal ArcN;
     Cardinal LineMax;
     Cardinal TextMax;
     Cardinal PolygonMax;
     Cardinal ArcMax;
     LineTypePtr Line;
     TextTypePtr Text;
     PolygonTypePtr Polygon;
     ArcTypePtr Arc;
     rtree_t *line_tree;
     rtree_t *text_tree;
     rtree_t *polygon_tree;
     rtree_t *arc_tree;
     Boolean On;
     char *Color;
     char *SelectedColor;
     AttributeListType Attributes;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     BDimension Mask;
     BDimension DrillingHole;
     LocationType X;
     LocationType Y;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     BDimension Mask;
     BDimension DrillingHole;
     LocationType X;
     LocationType Y;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     BDimension Mask;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     TextType Name[3];
     LocationType MarkX;
     LocationType MarkY;
     Cardinal PinN;
     Cardinal PinMax;
     Cardinal PadN;
     Cardinal PadMax;
     Cardinal LineN;
     Cardinal LineMax;
     Cardinal ArcN;
     Cardinal ArcMax;
     PinTypePtr Pin;
     PadTypePtr Pad;
     LineTypePtr Line;
     ArcTypePtr Arc;
     BoxType VBox;
     AttributeListType Attributes;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     Cardinal group1;
     Cardinal group2;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Scale;
     LocationType X;
     LocationType Y;
     BYTE Direction;
     char *TextString;
     void *Element;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } ;
struct {
     Cardinal ViaN;
     Cardinal ViaMax;
     Cardinal ElementN;
     Cardinal ElementMax;
     Cardinal RatN;
     Cardinal RatMax;
     int LayerN;
     PinTypePtr Via;
     ElementTypePtr Element;
     RatTypePtr Rat;
     rtree_t *via_tree;
     rtree_t *element_tree;
     rtree_t *pin_tree;
     rtree_t *pad_tree;
     rtree_t *name_tree[3];
     rtree_t *rat_tree;
     struct PCBType *pcb;
     LayerType Layer[18];
  } ;
typedef int gint;
typedef struct _GtkWidget GtkWidget;
typedef struct _GtkObject GtkObject;
typedef struct _GObject GInitiallyUnowned;
typedef struct _GTypeInstance GTypeInstance;
typedef struct _GTypeClass GTypeClass;
typedef unsigned int gsize;
typedef gsize GType;
struct _GTypeClass {
     GType g_type;
  } ;
struct _GTypeInstance {
     GTypeClass *g_class;
  } ;
typedef unsigned int guint;
typedef struct _GData GData;
struct _GData  ;
struct _GObject {
     GTypeInstance g_type_instance;
     guint ref_count;
     GData *qdata;
  } ;
typedef unsigned int guint32;
struct _GtkObject {
     GInitiallyUnowned parent_instance;
     guint32 flags;
  } ;
typedef unsigned short guint16;
typedef unsigned char guint8;
typedef char gchar;
typedef struct _GtkStyle GtkStyle;
typedef struct _GObject GObject;
typedef struct _GdkColor GdkColor;
struct _GdkColor {
     guint32 pixel;
     guint16 red;
     guint16 green;
     guint16 blue;
     char __pad[2];
  } ;
typedef struct _PangoFontDescription PangoFontDescription;
struct _PangoFontDescription  ;
typedef struct _GdkGC GdkGC;
typedef struct _GdkColormap GdkColormap;
typedef struct _GdkVisual GdkVisual;
enum  { GDK_VISUAL_STATIC_GRAY = 0, GDK_VISUAL_GRAYSCALE = 1, GDK_VISUAL_STATIC_COLOR = 2, GDK_VISUAL_PSEUDO_COLOR = 3, GDK_VISUAL_TRUE_COLOR = 4, GDK_VISUAL_DIRECT_COLOR = 5, };
typedef enum  { GDK_VISUAL_STATIC_GRAY = 0, GDK_VISUAL_GRAYSCALE = 1, GDK_VISUAL_STATIC_COLOR = 2, GDK_VISUAL_PSEUDO_COLOR = 3, GDK_VISUAL_TRUE_COLOR = 4, GDK_VISUAL_DIRECT_COLOR = 5, } GdkVisualType;
enum  { GDK_LSB_FIRST = 0, GDK_MSB_FIRST = 1, };
typedef enum  { GDK_LSB_FIRST = 0, GDK_MSB_FIRST = 1, } GdkByteOrder;
struct _GdkVisual {
     GObject parent_instance;
     GdkVisualType type;
     gint depth;
     GdkByteOrder byte_order;
     gint colormap_size;
     gint bits_per_rgb;
     guint32 red_mask;
     gint red_shift;
     gint red_prec;
     guint32 green_mask;
     gint green_shift;
     gint green_prec;
     guint32 blue_mask;
     gint blue_shift;
     gint blue_prec;
  } ;
typedef void *gpointer;
struct _GdkColormap {
     GObject parent_instance;
     gint size;
     GdkColor *colors;
     GdkVisual *visual;
     gpointer windowing_data;
  } ;
struct _GdkGC {
     GObject parent_instance;
     gint clip_x_origin;
     gint clip_y_origin;
     gint ts_x_origin;
     gint ts_y_origin;
     GdkColormap *colormap;
  } ;
typedef struct _GdkDrawable GdkPixmap;
struct _GdkDrawable {
     GObject parent_instance;
  } ;
typedef struct _GdkFont GdkFont;
enum  { GDK_FONT_FONT = 0, GDK_FONT_FONTSET = 1, };
typedef enum  { GDK_FONT_FONT = 0, GDK_FONT_FONTSET = 1, } GdkFontType;
struct _GdkFont {
     GdkFontType type;
     gint ascent;
     gint descent;
  } ;
typedef struct _GtkRcStyle GtkRcStyle;
enum  { GTK_RC_FG = 1, GTK_RC_BG = 2, GTK_RC_TEXT = 4, GTK_RC_BASE = 8, };
typedef enum  { GTK_RC_FG = 1, GTK_RC_BG = 2, GTK_RC_TEXT = 4, GTK_RC_BASE = 8, } GtkRcFlags;
typedef struct _GArray GArray;
struct _GArray {
     gchar *data;
     guint len;
  } ;
typedef struct _GSList GSList;
struct _GSList {
     gpointer data;
     GSList *next;
  } ;
struct _GtkRcStyle {
     GObject parent_instance;
     gchar *name;
     gchar *bg_pixmap_name[5];
     PangoFontDescription *font_desc;
     GtkRcFlags color_flags[5];
     GdkColor fg[5];
     GdkColor bg[5];
     GdkColor text[5];
     GdkColor base[5];
     gint xthickness;
     gint ythickness;
     GArray *rc_properties;
     GSList *rc_style_lists;
     GSList *icon_factories;
     guint bits_at_320;
  } ;
struct _GtkStyle {
     GObject parent_instance;
     GdkColor fg[5];
     GdkColor bg[5];
     GdkColor light[5];
     GdkColor dark[5];
     GdkColor mid[5];
     GdkColor text[5];
     GdkColor base[5];
     GdkColor text_aa[5];
     GdkColor black;
     GdkColor white;
     PangoFontDescription *font_desc;
     gint xthickness;
     gint ythickness;
     GdkGC *fg_gc[5];
     GdkGC *bg_gc[5];
     GdkGC *light_gc[5];
     GdkGC *dark_gc[5];
     GdkGC *mid_gc[5];
     GdkGC *text_gc[5];
     GdkGC *base_gc[5];
     GdkGC *text_aa_gc[5];
     GdkGC *black_gc;
     GdkGC *white_gc;
     GdkPixmap *bg_pixmap[5];
     gint attach_count;
     gint depth;
     GdkColormap *colormap;
     GdkFont *private_font;
     PangoFontDescription *private_font_desc;
     GtkRcStyle *rc_style;
     GSList *styles;
     GArray *property_cache;
     GSList *icon_factories;
  } ;
typedef struct _GtkRequisition GtkRequisition;
struct _GtkRequisition {
     gint width;
     gint height;
  } ;
typedef struct _GdkRectangle GdkRectangle;
struct _GdkRectangle {
     gint x;
     gint y;
     gint width;
     gint height;
  } ;
typedef GdkRectangle GtkAllocation;
typedef struct _GdkDrawable GdkWindow;
struct _GtkWidget {
     GtkObject object;
     guint16 private_flags;
     guint8 state;
     guint8 saved_state;
     gchar *name;
     GtkStyle *style;
     GtkRequisition requisition;
     GtkAllocation allocation;
     GdkWindow *window;
     GtkWidget *parent;
  } ;
typedef struct _GdkEventConfigure GdkEventConfigure;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
typedef enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, } GdkEventType;
typedef char gint8;
struct _GdkEventConfigure {
     GdkEventType type;
     GdkWindow *window;
     gint8 send_event;
     gint x;
     gint y;
     gint width;
     gint height;
  } ;
typedef struct _GtkTreeView GtkTreeView;
typedef struct _GtkContainer GtkContainer;
struct _GtkContainer {
     GtkWidget widget;
     GtkWidget *focus_child;
     guint bits_at_64;
  } ;
typedef struct _GtkTreeViewPrivate GtkTreeViewPrivate;
struct _GtkTreeViewPrivate  ;
struct _GtkTreeView {
     GtkContainer parent;
     GtkTreeViewPrivate *priv;
  } ;
typedef struct _GtkTreePath GtkTreePath;
struct _GtkTreePath  ;
typedef struct _GtkTreeViewColumn GtkTreeViewColumn;
typedef struct _GtkCellEditable GtkCellEditable;
struct _GtkCellEditable  ;
typedef float gfloat;
enum  { GTK_TREE_VIEW_COLUMN_GROW_ONLY = 0, GTK_TREE_VIEW_COLUMN_AUTOSIZE = 1, GTK_TREE_VIEW_COLUMN_FIXED = 2, };
typedef enum  { GTK_TREE_VIEW_COLUMN_GROW_ONLY = 0, GTK_TREE_VIEW_COLUMN_AUTOSIZE = 1, GTK_TREE_VIEW_COLUMN_FIXED = 2, } GtkTreeViewColumnSizing;
typedef struct _GList GList;
struct _GList {
     gpointer data;
     GList *next;
     GList *prev;
  } ;
enum  { GTK_SORT_ASCENDING = 0, GTK_SORT_DESCENDING = 1, };
typedef enum  { GTK_SORT_ASCENDING = 0, GTK_SORT_DESCENDING = 1, } GtkSortType;
struct _GtkTreeViewColumn {
     GtkObject parent;
     GtkWidget *tree_view;
     GtkWidget *button;
     GtkWidget *child;
     GtkWidget *arrow;
     GtkWidget *alignment;
     GdkWindow *window;
     GtkCellEditable *editable_widget;
     gfloat xalign;
     guint property_changed_signal;
     gint spacing;
     GtkTreeViewColumnSizing column_type;
     gint requested_width;
     gint button_request;
     gint resized_width;
     gint width;
     gint fixed_width;
     gint min_width;
     gint max_width;
     gint drag_x;
     gint drag_y;
     gchar *title;
     GList *cell_list;
     guint sort_clicked_signal;
     guint sort_column_changed_signal;
     gint sort_column_id;
     GtkSortType sort_order;
     guint bits_at_120;
  } ;
typedef struct _GtkTreeSelection GtkTreeSelection;
enum  { GTK_SELECTION_NONE = 0, GTK_SELECTION_SINGLE = 1, GTK_SELECTION_BROWSE = 2, GTK_SELECTION_MULTIPLE = 3, GTK_SELECTION_EXTENDED = 3, };
typedef enum  { GTK_SELECTION_NONE = 0, GTK_SELECTION_SINGLE = 1, GTK_SELECTION_BROWSE = 2, GTK_SELECTION_MULTIPLE = 3, GTK_SELECTION_EXTENDED = 3, } GtkSelectionMode;
typedef gint gboolean;
typedef struct _GtkTreeModel GtkTreeModel;
struct _GtkTreeModel  ;
typedef gboolean (*GtkTreeSelectionFunc)( GtkTreeSelection *, GtkTreeModel *, GtkTreePath *, gboolean , gpointer  );
typedef void (*GDestroyNotify)( gpointer  );
struct _GtkTreeSelection {
     GObject parent;
     GtkTreeView *tree_view;
     GtkSelectionMode type;
     GtkTreeSelectionFunc user_func;
     gpointer user_data;
     GDestroyNotify destroy;
  } ;
typedef struct _GtkCellRenderer GtkCellRenderer;
struct _GtkCellRenderer {
     GtkObject parent;
     gfloat xalign;
     gfloat yalign;
     gint width;
     gint height;
     guint16 xpad;
     guint16 ypad;
     guint bits_at_36;
  } ;
typedef struct _GhidDrcViolation GhidDrcViolation;
typedef struct _GdkDrawable GdkDrawable;
struct _GhidDrcViolation {
     GObject parent_instance;
     char *title;
     char *explanation;
     int x_coord;
     int y_coord;
     int angle;
     int have_measured;
     double measured_value;
     double required_value;
     int value_digits;
     char *value_units;
     int object_count;
     long *object_id_list;
     int *object_type_list;
     GdkDrawable *pixmap;
  } ;
typedef struct drc_violation_st DrcViolationType;
struct drc_violation_st {
     char *title;
     char *explanation;
     int x;
     int y;
     int angle;
     int have_measured;
     double measured_value;
     double required_value;
     int value_digits;
     char *value_units;
     int object_count;
     long *object_id_list;
     int *object_type_list;
  } ;
typedef struct _GhidViolationRendererClass GhidViolationRendererClass;
typedef struct _GtkCellRendererTextClass GtkCellRendererTextClass;
typedef struct _GtkCellRendererClass GtkCellRendererClass;
typedef struct _GtkObjectClass GtkObjectClass;
typedef struct _GObjectClass GInitiallyUnownedClass;
typedef struct _GObjectConstructParam GObjectConstructParam;
typedef struct _GParamSpec GParamSpec;
enum  { G_PARAM_READABLE = 1, G_PARAM_WRITABLE = 2, G_PARAM_CONSTRUCT = 4, G_PARAM_CONSTRUCT_ONLY = 8, G_PARAM_LAX_VALIDATION = 16, G_PARAM_STATIC_NAME = 32, G_PARAM_PRIVATE = 32, G_PARAM_STATIC_NICK = 64, G_PARAM_STATIC_BLURB = 128, G_PARAM_DEPRECATED = -2147483648, };
typedef enum  { G_PARAM_READABLE = 1, G_PARAM_WRITABLE = 2, G_PARAM_CONSTRUCT = 4, G_PARAM_CONSTRUCT_ONLY = 8, G_PARAM_LAX_VALIDATION = 16, G_PARAM_STATIC_NAME = 32, G_PARAM_PRIVATE = 32, G_PARAM_STATIC_NICK = 64, G_PARAM_STATIC_BLURB = 128, G_PARAM_DEPRECATED = -2147483648, } GParamFlags;
struct _GParamSpec {
     GTypeInstance g_type_instance;
     gchar *name;
     GParamFlags flags;
     GType value_type;
     GType owner_type;
     gchar *_nick;
     gchar *_blurb;
     GData *qdata;
     guint ref_count;
     guint param_id;
  } ;
typedef struct _GValue GValue;
typedef long glong;
typedef unsigned long gulong;
typedef long long gint64;
typedef unsigned long long guint64;
typedef double gdouble;
union {
     gint v_int;
     guint v_uint;
     glong v_long;
     gulong v_ulong;
     gint64 v_int64;
     guint64 v_uint64;
     gfloat v_float;
     gdouble v_double;
     gpointer v_pointer;
  } ;
struct _GValue {
     GType g_type;
     union {
       gint v_int;
       guint v_uint;
       glong v_long;
       gulong v_ulong;
       gint64 v_int64;
       guint64 v_uint64;
       gfloat v_float;
       gdouble v_double;
       gpointer v_pointer;
    } data[2];
  } ;
struct _GObjectConstructParam {
     GParamSpec *pspec;
     GValue *value;
  } ;
struct _GObjectClass {
     GTypeClass g_type_class;
     GSList *construct_properties;
     GObject *(*constructor)( GType , guint , GObjectConstructParam * );
     void (*set_property)( GObject *, guint , GValue *, GParamSpec * );
     void (*get_property)( GObject *, guint , GValue *, GParamSpec * );
     void (*dispose)( GObject * );
     void (*finalize)( GObject * );
     void (*dispatch_properties_changed)( GObject *, guint , GParamSpec ** );
     void (*notify)( GObject *, GParamSpec * );
     void (*constructed)( GObject * );
     gsize flags;
     gpointer pdummy[6];
  } ;
typedef struct _GtkArg GtkArg;
typedef unsigned char guchar;
typedef void (*GCallback)( void );
struct {
     GCallback f;
     gpointer d;
  } ;
union {
     gchar char_data;
     guchar uchar_data;
     gboolean bool_data;
     gint int_data;
     guint uint_data;
     glong long_data;
     gulong ulong_data;
     gfloat float_data;
     gdouble double_data;
     gchar *string_data;
     GtkObject *object_data;
     gpointer pointer_data;
     struct {
       GCallback f;
       gpointer d;
    } signal_data;
  } ;
struct _GtkArg {
     GType type;
     gchar *name;
     union {
       gchar char_data;
       guchar uchar_data;
       gboolean bool_data;
       gint int_data;
       guint uint_data;
       glong long_data;
       gulong ulong_data;
       gfloat float_data;
       gdouble double_data;
       gchar *string_data;
       GtkObject *object_data;
       gpointer pointer_data;
       struct {
         GCallback f;
         gpointer d;
      } signal_data;
    } d;
  } ;
struct _GtkObjectClass {
     GInitiallyUnownedClass parent_class;
     void (*set_arg)( GtkObject *, GtkArg *, guint  );
     void (*get_arg)( GtkObject *, GtkArg *, guint  );
     void (*destroy)( GtkObject * );
  } ;
enum  { GTK_CELL_RENDERER_SELECTED = 1, GTK_CELL_RENDERER_PRELIT = 2, GTK_CELL_RENDERER_INSENSITIVE = 4, GTK_CELL_RENDERER_SORTED = 8, GTK_CELL_RENDERER_FOCUSED = 16, };
typedef enum  { GTK_CELL_RENDERER_SELECTED = 1, GTK_CELL_RENDERER_PRELIT = 2, GTK_CELL_RENDERER_INSENSITIVE = 4, GTK_CELL_RENDERER_SORTED = 8, GTK_CELL_RENDERER_FOCUSED = 16, } GtkCellRendererState;
typedef union _GdkEvent GdkEvent;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
typedef struct _GdkEventAny GdkEventAny;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
struct _GdkEventAny {
     GdkEventType type;
     GdkWindow *window;
     gint8 send_event;
     char __pad[3];
  } ;
typedef struct _GdkEventExpose GdkEventExpose;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
typedef struct _GdkRegion GdkRegion;
struct _GdkRegion  ;
struct _GdkEventExpose {
     GdkEventType type;
     GdkWindow *window;
     gint8 send_event;
     GdkRectangle area;
     GdkRegion *region;
     gint count;
  } ;
typedef struct _GdkEventNoExpose GdkEventNoExpose;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
struct _GdkEventNoExpose {
     GdkEventType type;
     GdkWindow *window;
     gint8 send_event;
     char __pad[3];
  } ;
typedef struct _GdkEventVisibility GdkEventVisibility;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
enum  { GDK_VISIBILITY_UNOBSCURED = 0, GDK_VISIBILITY_PARTIAL = 1, GDK_VISIBILITY_FULLY_OBSCURED = 2, };
typedef enum  { GDK_VISIBILITY_UNOBSCURED = 0, GDK_VISIBILITY_PARTIAL = 1, GDK_VISIBILITY_FULLY_OBSCURED = 2, } GdkVisibilityState;
struct _GdkEventVisibility {
     GdkEventType type;
     GdkWindow *window;
     gint8 send_event;
     GdkVisibilityState state;
  } ;
typedef struct _GdkEventMotion GdkEventMotion;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
typedef short gint16;
typedef struct _GdkDevice GdkDevice;
enum  { GDK_SOURCE_MOUSE = 0, GDK_SOURCE_PEN = 1, GDK_SOURCE_ERASER = 2, GDK_SOURCE_CURSOR = 3, };
typedef enum  { GDK_SOURCE_MOUSE = 0, GDK_SOURCE_PEN = 1, GDK_SOURCE_ERASER = 2, GDK_SOURCE_CURSOR = 3, } GdkInputSource;
enum  { GDK_MODE_DISABLED = 0, GDK_MODE_SCREEN = 1, GDK_MODE_WINDOW = 2, };
typedef enum  { GDK_MODE_DISABLED = 0, GDK_MODE_SCREEN = 1, GDK_MODE_WINDOW = 2, } GdkInputMode;
typedef struct _GdkDeviceAxis GdkDeviceAxis;
enum  { GDK_AXIS_IGNORE = 0, GDK_AXIS_X = 1, GDK_AXIS_Y = 2, GDK_AXIS_PRESSURE = 3, GDK_AXIS_XTILT = 4, GDK_AXIS_YTILT = 5, GDK_AXIS_WHEEL = 6, GDK_AXIS_LAST = 7, };
typedef enum  { GDK_AXIS_IGNORE = 0, GDK_AXIS_X = 1, GDK_AXIS_Y = 2, GDK_AXIS_PRESSURE = 3, GDK_AXIS_XTILT = 4, GDK_AXIS_YTILT = 5, GDK_AXIS_WHEEL = 6, GDK_AXIS_LAST = 7, } GdkAxisUse;
struct _GdkDeviceAxis {
     GdkAxisUse use;
     gdouble min;
     gdouble max;
  } ;
typedef struct _GdkDeviceKey GdkDeviceKey;
enum  { GDK_SHIFT_MASK = 1, GDK_LOCK_MASK = 2, GDK_CONTROL_MASK = 4, GDK_MOD1_MASK = 8, GDK_MOD2_MASK = 16, GDK_MOD3_MASK = 32, GDK_MOD4_MASK = 64, GDK_MOD5_MASK = 128, GDK_BUTTON1_MASK = 256, GDK_BUTTON2_MASK = 512, GDK_BUTTON3_MASK = 1024, GDK_BUTTON4_MASK = 2048, GDK_BUTTON5_MASK = 4096, GDK_SUPER_MASK = 67108864, GDK_HYPER_MASK = 134217728, GDK_META_MASK = 268435456, GDK_RELEASE_MASK = 1073741824, GDK_MODIFIER_MASK = 1543512063, };
typedef enum  { GDK_SHIFT_MASK = 1, GDK_LOCK_MASK = 2, GDK_CONTROL_MASK = 4, GDK_MOD1_MASK = 8, GDK_MOD2_MASK = 16, GDK_MOD3_MASK = 32, GDK_MOD4_MASK = 64, GDK_MOD5_MASK = 128, GDK_BUTTON1_MASK = 256, GDK_BUTTON2_MASK = 512, GDK_BUTTON3_MASK = 1024, GDK_BUTTON4_MASK = 2048, GDK_BUTTON5_MASK = 4096, GDK_SUPER_MASK = 67108864, GDK_HYPER_MASK = 134217728, GDK_META_MASK = 268435456, GDK_RELEASE_MASK = 1073741824, GDK_MODIFIER_MASK = 1543512063, } GdkModifierType;
struct _GdkDeviceKey {
     guint keyval;
     GdkModifierType modifiers;
  } ;
struct _GdkDevice {
     GObject parent_instance;
     gchar *name;
     GdkInputSource source;
     GdkInputMode mode;
     gboolean has_cursor;
     gint num_axes;
     GdkDeviceAxis *axes;
     gint num_keys;
     GdkDeviceKey *keys;
  } ;
struct _GdkEventMotion {
     GdkEventType type;
     GdkWindow *window;
     gint8 send_event;
     guint32 time;
     gdouble x;
     gdouble y;
     gdouble *axes;
     guint state;
     gint16 is_hint;
     GdkDevice *device;
     gdouble x_root;
     gdouble y_root;
  } ;
typedef struct _GdkEventButton GdkEventButton;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
struct _GdkEventButton {
     GdkEventType type;
     GdkWindow *window;
     gint8 send_event;
     guint32 time;
     gdouble x;
     gdouble y;
     gdouble *axes;
     guint state;
     guint button;
     GdkDevice *device;
     gdouble x_root;
     gdouble y_root;
  } ;
typedef struct _GdkEventScroll GdkEventScroll;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
enum  { GDK_SCROLL_UP = 0, GDK_SCROLL_DOWN = 1, GDK_SCROLL_LEFT = 2, GDK_SCROLL_RIGHT = 3, };
typedef enum  { GDK_SCROLL_UP = 0, GDK_SCROLL_DOWN = 1, GDK_SCROLL_LEFT = 2, GDK_SCROLL_RIGHT = 3, } GdkScrollDirection;
struct _GdkEventScroll {
     GdkEventType type;
     GdkWindow *window;
     gint8 send_event;
     guint32 time;
     gdouble x;
     gdouble y;
     guint state;
     GdkScrollDirection direction;
     GdkDevice *device;
     gdouble x_root;
     gdouble y_root;
  } ;
typedef struct _GdkEventKey GdkEventKey;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
struct _GdkEventKey {
     GdkEventType type;
     GdkWindow *window;
     gint8 send_event;
     guint32 time;
     guint state;
     guint keyval;
     gint length;
     gchar *string;
     guint16 hardware_keycode;
     guint8 group;
     guint bits_at_32;
  } ;
typedef struct _GdkEventCrossing GdkEventCrossing;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
enum  { GDK_CROSSING_NORMAL = 0, GDK_CROSSING_GRAB = 1, GDK_CROSSING_UNGRAB = 2, GDK_CROSSING_GTK_GRAB = 3, GDK_CROSSING_GTK_UNGRAB = 4, GDK_CROSSING_STATE_CHANGED = 5, };
typedef enum  { GDK_CROSSING_NORMAL = 0, GDK_CROSSING_GRAB = 1, GDK_CROSSING_UNGRAB = 2, GDK_CROSSING_GTK_GRAB = 3, GDK_CROSSING_GTK_UNGRAB = 4, GDK_CROSSING_STATE_CHANGED = 5, } GdkCrossingMode;
enum  { GDK_NOTIFY_ANCESTOR = 0, GDK_NOTIFY_VIRTUAL = 1, GDK_NOTIFY_INFERIOR = 2, GDK_NOTIFY_NONLINEAR = 3, GDK_NOTIFY_NONLINEAR_VIRTUAL = 4, GDK_NOTIFY_UNKNOWN = 5, };
typedef enum  { GDK_NOTIFY_ANCESTOR = 0, GDK_NOTIFY_VIRTUAL = 1, GDK_NOTIFY_INFERIOR = 2, GDK_NOTIFY_NONLINEAR = 3, GDK_NOTIFY_NONLINEAR_VIRTUAL = 4, GDK_NOTIFY_UNKNOWN = 5, } GdkNotifyType;
struct _GdkEventCrossing {
     GdkEventType type;
     GdkWindow *window;
     gint8 send_event;
     GdkWindow *subwindow;
     guint32 time;
     gdouble x;
     gdouble y;
     gdouble x_root;
     gdouble y_root;
     GdkCrossingMode mode;
     GdkNotifyType detail;
     gboolean focus;
     guint state;
  } ;
typedef struct _GdkEventFocus GdkEventFocus;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
struct _GdkEventFocus {
     GdkEventType type;
     GdkWindow *window;
     gint8 send_event;
     gint16 in;
  } ;
typedef struct _GdkEventProperty GdkEventProperty;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
typedef struct _GdkAtom *GdkAtom;
struct _GdkEventProperty {
     GdkEventType type;
     GdkWindow *window;
     gint8 send_event;
     GdkAtom atom;
     guint32 time;
     guint state;
  } ;
typedef struct _GdkEventSelection GdkEventSelection;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
typedef guint32 GdkNativeWindow;
struct _GdkEventSelection {
     GdkEventType type;
     GdkWindow *window;
     gint8 send_event;
     GdkAtom selection;
     GdkAtom target;
     GdkAtom property;
     guint32 time;
     GdkNativeWindow requestor;
  } ;
typedef struct _GdkEventOwnerChange GdkEventOwnerChange;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
enum  { GDK_OWNER_CHANGE_NEW_OWNER = 0, GDK_OWNER_CHANGE_DESTROY = 1, GDK_OWNER_CHANGE_CLOSE = 2, };
typedef enum  { GDK_OWNER_CHANGE_NEW_OWNER = 0, GDK_OWNER_CHANGE_DESTROY = 1, GDK_OWNER_CHANGE_CLOSE = 2, } GdkOwnerChange;
struct _GdkEventOwnerChange {
     GdkEventType type;
     GdkWindow *window;
     gint8 send_event;
     GdkNativeWindow owner;
     GdkOwnerChange reason;
     GdkAtom selection;
     guint32 time;
     guint32 selection_time;
  } ;
typedef struct _GdkEventProximity GdkEventProximity;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
struct _GdkEventProximity {
     GdkEventType type;
     GdkWindow *window;
     gint8 send_event;
     guint32 time;
     GdkDevice *device;
  } ;
typedef struct _GdkEventClient GdkEventClient;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
typedef unsigned short gushort;
union {
     char b[20];
     short s[10];
     long l[5];
  } ;
struct _GdkEventClient {
     GdkEventType type;
     GdkWindow *window;
     gint8 send_event;
     GdkAtom message_type;
     gushort data_format;
     union {
       char b[20];
       short s[10];
       long l[5];
    } data;
  } ;
typedef struct _GdkEventDND GdkEventDND;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
typedef struct _GdkDragContext GdkDragContext;
enum  { GDK_DRAG_PROTO_MOTIF = 0, GDK_DRAG_PROTO_XDND = 1, GDK_DRAG_PROTO_ROOTWIN = 2, GDK_DRAG_PROTO_NONE = 3, GDK_DRAG_PROTO_WIN32_DROPFILES = 4, GDK_DRAG_PROTO_OLE2 = 5, GDK_DRAG_PROTO_LOCAL = 6, };
typedef enum  { GDK_DRAG_PROTO_MOTIF = 0, GDK_DRAG_PROTO_XDND = 1, GDK_DRAG_PROTO_ROOTWIN = 2, GDK_DRAG_PROTO_NONE = 3, GDK_DRAG_PROTO_WIN32_DROPFILES = 4, GDK_DRAG_PROTO_OLE2 = 5, GDK_DRAG_PROTO_LOCAL = 6, } GdkDragProtocol;
enum  { GDK_ACTION_DEFAULT = 1, GDK_ACTION_COPY = 2, GDK_ACTION_MOVE = 4, GDK_ACTION_LINK = 8, GDK_ACTION_PRIVATE = 16, GDK_ACTION_ASK = 32, };
typedef enum  { GDK_ACTION_DEFAULT = 1, GDK_ACTION_COPY = 2, GDK_ACTION_MOVE = 4, GDK_ACTION_LINK = 8, GDK_ACTION_PRIVATE = 16, GDK_ACTION_ASK = 32, } GdkDragAction;
enum  { GDK_ACTION_DEFAULT = 1, GDK_ACTION_COPY = 2, GDK_ACTION_MOVE = 4, GDK_ACTION_LINK = 8, GDK_ACTION_PRIVATE = 16, GDK_ACTION_ASK = 32, };
enum  { GDK_ACTION_DEFAULT = 1, GDK_ACTION_COPY = 2, GDK_ACTION_MOVE = 4, GDK_ACTION_LINK = 8, GDK_ACTION_PRIVATE = 16, GDK_ACTION_ASK = 32, };
struct _GdkDragContext {
     GObject parent_instance;
     GdkDragProtocol protocol;
     gboolean is_source;
     GdkWindow *source_window;
     GdkWindow *dest_window;
     GList *targets;
     GdkDragAction actions;
     GdkDragAction suggested_action;
     GdkDragAction action;
     guint32 start_time;
     gpointer windowing_data;
  } ;
typedef short gshort;
struct _GdkEventDND {
     GdkEventType type;
     GdkWindow *window;
     gint8 send_event;
     GdkDragContext *context;
     guint32 time;
     gshort x_root;
     gshort y_root;
  } ;
typedef struct _GdkEventWindowState GdkEventWindowState;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
enum  { GDK_WINDOW_STATE_WITHDRAWN = 1, GDK_WINDOW_STATE_ICONIFIED = 2, GDK_WINDOW_STATE_MAXIMIZED = 4, GDK_WINDOW_STATE_STICKY = 8, GDK_WINDOW_STATE_FULLSCREEN = 16, GDK_WINDOW_STATE_ABOVE = 32, GDK_WINDOW_STATE_BELOW = 64, };
typedef enum  { GDK_WINDOW_STATE_WITHDRAWN = 1, GDK_WINDOW_STATE_ICONIFIED = 2, GDK_WINDOW_STATE_MAXIMIZED = 4, GDK_WINDOW_STATE_STICKY = 8, GDK_WINDOW_STATE_FULLSCREEN = 16, GDK_WINDOW_STATE_ABOVE = 32, GDK_WINDOW_STATE_BELOW = 64, } GdkWindowState;
enum  { GDK_WINDOW_STATE_WITHDRAWN = 1, GDK_WINDOW_STATE_ICONIFIED = 2, GDK_WINDOW_STATE_MAXIMIZED = 4, GDK_WINDOW_STATE_STICKY = 8, GDK_WINDOW_STATE_FULLSCREEN = 16, GDK_WINDOW_STATE_ABOVE = 32, GDK_WINDOW_STATE_BELOW = 64, };
struct _GdkEventWindowState {
     GdkEventType type;
     GdkWindow *window;
     gint8 send_event;
     GdkWindowState changed_mask;
     GdkWindowState new_window_state;
  } ;
typedef struct _GdkEventSetting GdkEventSetting;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
enum  { GDK_SETTING_ACTION_NEW = 0, GDK_SETTING_ACTION_CHANGED = 1, GDK_SETTING_ACTION_DELETED = 2, };
typedef enum  { GDK_SETTING_ACTION_NEW = 0, GDK_SETTING_ACTION_CHANGED = 1, GDK_SETTING_ACTION_DELETED = 2, } GdkSettingAction;
struct _GdkEventSetting {
     GdkEventType type;
     GdkWindow *window;
     gint8 send_event;
     GdkSettingAction action;
     char *name;
  } ;
typedef struct _GdkEventGrabBroken GdkEventGrabBroken;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
struct _GdkEventGrabBroken {
     GdkEventType type;
     GdkWindow *window;
     gint8 send_event;
     gboolean keyboard;
     gboolean implicit;
     GdkWindow *grab_window;
  } ;
union _GdkEvent {
     GdkEventType type;
     GdkEventAny any;
     GdkEventExpose expose;
     GdkEventNoExpose no_expose;
     GdkEventVisibility visibility;
     GdkEventMotion motion;
     GdkEventButton button;
     GdkEventScroll scroll;
     GdkEventKey key;
     GdkEventCrossing crossing;
     GdkEventFocus focus_change;
     GdkEventConfigure configure;
     GdkEventProperty property;
     GdkEventSelection selection;
     GdkEventOwnerChange owner_change;
     GdkEventProximity proximity;
     GdkEventClient client;
     GdkEventDND dnd;
     GdkEventWindowState window_state;
     GdkEventSetting setting;
     GdkEventGrabBroken grab_broken;
  } ;
enum  { GTK_CELL_RENDERER_SELECTED = 1, GTK_CELL_RENDERER_PRELIT = 2, GTK_CELL_RENDERER_INSENSITIVE = 4, GTK_CELL_RENDERER_SORTED = 8, GTK_CELL_RENDERER_FOCUSED = 16, };
enum  { GTK_CELL_RENDERER_SELECTED = 1, GTK_CELL_RENDERER_PRELIT = 2, GTK_CELL_RENDERER_INSENSITIVE = 4, GTK_CELL_RENDERER_SORTED = 8, GTK_CELL_RENDERER_FOCUSED = 16, };
struct _GtkCellRendererClass {
     GtkObjectClass parent_class;
     void (*get_size)( GtkCellRenderer *, GtkWidget *, GdkRectangle *, gint *, gint *, gint *, gint * );
     void (*render)( GtkCellRenderer *, GdkDrawable *, GtkWidget *, GdkRectangle *, GdkRectangle *, GdkRectangle *, GtkCellRendererState  );
     gboolean (*activate)( GtkCellRenderer *, GdkEvent *, GtkWidget *, gchar *, GdkRectangle *, GdkRectangle *, GtkCellRendererState  );
     GtkCellEditable *(*start_editing)( GtkCellRenderer *, GdkEvent *, GtkWidget *, gchar *, GdkRectangle *, GdkRectangle *, GtkCellRendererState  );
     void (*editing_canceled)( GtkCellRenderer * );
     void (*editing_started)( GtkCellRenderer *, GtkCellEditable *, gchar * );
     void (*_gtk_reserved1)( void );
     void (*_gtk_reserved2)( void );
  } ;
typedef struct _GtkCellRendererText GtkCellRendererText;
typedef struct _PangoColor PangoColor;
struct _PangoColor {
     guint16 red;
     guint16 green;
     guint16 blue;
  } ;
typedef struct _PangoAttrList PangoAttrList;
struct _PangoAttrList  ;
enum  { PANGO_UNDERLINE_NONE = 0, PANGO_UNDERLINE_SINGLE = 1, PANGO_UNDERLINE_DOUBLE = 2, PANGO_UNDERLINE_LOW = 3, PANGO_UNDERLINE_ERROR = 4, };
typedef enum  { PANGO_UNDERLINE_NONE = 0, PANGO_UNDERLINE_SINGLE = 1, PANGO_UNDERLINE_DOUBLE = 2, PANGO_UNDERLINE_LOW = 3, PANGO_UNDERLINE_ERROR = 4, } PangoUnderline;
struct _GtkCellRendererText {
     GtkCellRenderer parent;
     gchar *text;
     PangoFontDescription *font;
     gdouble font_scale;
     PangoColor foreground;
     PangoColor background;
     PangoAttrList *extra_attrs;
     PangoUnderline underline_style;
     gint rise;
     gint fixed_height_rows;
     guint bits_at_84;
  } ;
struct _GtkCellRendererTextClass {
     GtkCellRendererClass parent_class;
     void (*edited)( GtkCellRendererText *, gchar *, gchar * );
     void (*_gtk_reserved1)( void );
     void (*_gtk_reserved2)( void );
     void (*_gtk_reserved3)( void );
     void (*_gtk_reserved4)( void );
  } ;
struct _GhidViolationRendererClass {
     GtkCellRendererTextClass parent_class;
  } ;
enum  { GTK_CELL_RENDERER_SELECTED = 1, GTK_CELL_RENDERER_PRELIT = 2, GTK_CELL_RENDERER_INSENSITIVE = 4, GTK_CELL_RENDERER_SORTED = 8, GTK_CELL_RENDERER_FOCUSED = 16, };
enum  { G_PARAM_READABLE = 1, G_PARAM_WRITABLE = 2, G_PARAM_CONSTRUCT = 4, G_PARAM_CONSTRUCT_ONLY = 8, G_PARAM_LAX_VALIDATION = 16, G_PARAM_STATIC_NAME = 32, G_PARAM_PRIVATE = 32, G_PARAM_STATIC_NICK = 64, G_PARAM_STATIC_BLURB = 128, G_PARAM_DEPRECATED = -2147483648, };
enum  { G_PARAM_READABLE = 1, G_PARAM_WRITABLE = 2, G_PARAM_CONSTRUCT = 4, G_PARAM_CONSTRUCT_ONLY = 8, G_PARAM_LAX_VALIDATION = 16, G_PARAM_STATIC_NAME = 32, G_PARAM_PRIVATE = 32, G_PARAM_STATIC_NICK = 64, G_PARAM_STATIC_BLURB = 128, G_PARAM_DEPRECATED = -2147483648, };
enum  { GTK_POLICY_ALWAYS = 0, GTK_POLICY_AUTOMATIC = 1, GTK_POLICY_NEVER = 2, };
typedef enum  { GTK_POLICY_ALWAYS = 0, GTK_POLICY_AUTOMATIC = 1, GTK_POLICY_NEVER = 2, } GtkPolicyType;
enum  { GTK_POLICY_ALWAYS = 0, GTK_POLICY_AUTOMATIC = 1, GTK_POLICY_NEVER = 2, };
typedef struct _GObjectClass GObjectClass;
typedef struct _GtkListStore GtkListStore;
enum  { GTK_SORT_ASCENDING = 0, GTK_SORT_DESCENDING = 1, };
typedef struct _GtkTreeIter GtkTreeIter;
struct _GtkTreeIter {
     gint stamp;
     gpointer user_data;
     gpointer user_data2;
     gpointer user_data3;
  } ;
typedef gint (*GtkTreeIterCompareFunc)( GtkTreeModel *, GtkTreeIter *, GtkTreeIter *, gpointer  );
struct _GtkListStore {
     GObject parent;
     gint stamp;
     gpointer seq;
     gpointer _gtk_reserved1;
     GList *sort_list;
     gint n_columns;
     gint sort_column_id;
     GtkSortType order;
     GType *column_headers;
     gint length;
     GtkTreeIterCompareFunc default_sort_func;
     gpointer default_sort_data;
     GDestroyNotify default_sort_destroy;
     guint bits_at_60;
  } ;
enum  { G_PARAM_READABLE = 1, G_PARAM_WRITABLE = 2, G_PARAM_CONSTRUCT = 4, G_PARAM_CONSTRUCT_ONLY = 8, G_PARAM_LAX_VALIDATION = 16, G_PARAM_STATIC_NAME = 32, G_PARAM_PRIVATE = 32, G_PARAM_STATIC_NICK = 64, G_PARAM_STATIC_BLURB = 128, G_PARAM_DEPRECATED = -2147483648, };
typedef struct _GtkWindow GtkWindow;
typedef struct _GtkBin GtkBin;
struct _GtkBin {
     GtkContainer container;
     GtkWidget *child;
  } ;
typedef struct _GtkWindowGeometryInfo GtkWindowGeometryInfo;
struct _GtkWindowGeometryInfo  ;
typedef struct _GtkWindowGroup GtkWindowGroup;
struct _GtkWindowGroup {
     GObject parent_instance;
     GSList *grabs;
  } ;
enum  { GDK_SHIFT_MASK = 1, GDK_LOCK_MASK = 2, GDK_CONTROL_MASK = 4, GDK_MOD1_MASK = 8, GDK_MOD2_MASK = 16, GDK_MOD3_MASK = 32, GDK_MOD4_MASK = 64, GDK_MOD5_MASK = 128, GDK_BUTTON1_MASK = 256, GDK_BUTTON2_MASK = 512, GDK_BUTTON3_MASK = 1024, GDK_BUTTON4_MASK = 2048, GDK_BUTTON5_MASK = 4096, GDK_SUPER_MASK = 67108864, GDK_HYPER_MASK = 134217728, GDK_META_MASK = 268435456, GDK_RELEASE_MASK = 1073741824, GDK_MODIFIER_MASK = 1543512063, };
typedef struct _GdkScreen GdkScreen;
typedef struct _cairo_font_options cairo_font_options_t;
struct _cairo_font_options  ;
struct _GdkScreen {
     GObject parent_instance;
     guint bits_at_12;
     GdkGC *normal_gcs[32];
     GdkGC *exposure_gcs[32];
     GdkGC *subwindow_gcs[32];
     cairo_font_options_t *font_options;
     double resolution;
  } ;
struct _GtkWindow {
     GtkBin bin;
     gchar *title;
     gchar *wmclass_name;
     gchar *wmclass_class;
     gchar *wm_role;
     GtkWidget *focus_widget;
     GtkWidget *default_widget;
     GtkWindow *transient_parent;
     GtkWindowGeometryInfo *geometry_info;
     GdkWindow *frame;
     GtkWindowGroup *group;
     guint16 configure_request_count;
     guint bits_at_112;
     guint bits_at_116;
     guint frame_left;
     guint frame_top;
     guint frame_right;
     guint frame_bottom;
     guint keys_changed_handler;
     GdkModifierType mnemonic_modifier;
     GdkScreen *screen;
  } ;
enum  { G_PARAM_READABLE = 1, G_PARAM_WRITABLE = 2, G_PARAM_CONSTRUCT = 4, G_PARAM_CONSTRUCT_ONLY = 8, G_PARAM_LAX_VALIDATION = 16, G_PARAM_STATIC_NAME = 32, G_PARAM_PRIVATE = 32, G_PARAM_STATIC_NICK = 64, G_PARAM_STATIC_BLURB = 128, G_PARAM_DEPRECATED = -2147483648, };
enum  { G_PARAM_READABLE = 1, G_PARAM_WRITABLE = 2, G_PARAM_CONSTRUCT = 4, G_PARAM_CONSTRUCT_ONLY = 8, G_PARAM_LAX_VALIDATION = 16, G_PARAM_STATIC_NAME = 32, G_PARAM_PRIVATE = 32, G_PARAM_STATIC_NICK = 64, G_PARAM_STATIC_BLURB = 128, G_PARAM_DEPRECATED = -2147483648, };
typedef struct _GtkAdjustment GtkAdjustment;
struct _GtkAdjustment {
     GtkObject parent_instance;
     gdouble lower;
     gdouble upper;
     gdouble value;
     gdouble step_increment;
     gdouble page_increment;
     gdouble page_size;
  } ;
typedef struct PCBType *PCBTypePtr;
typedef struct {
     Boolean grid_units_mm;
     int verbose;
     char *BlackColor;
     char *WhiteColor;
     char *BackgroundColor;
     char *CrosshairColor;
     char *CrossColor;
     char *ViaColor;
     char *ViaSelectedColor;
     char *PinColor;
     char *PinSelectedColor;
     char *PinNameColor;
     char *ElementColor;
     char *RatColor;
     char *InvisibleObjectsColor;
     char *InvisibleMarkColor;
     char *ElementSelectedColor;
     char *RatSelectedColor;
     char *ConnectedColor;
     char *OffLimitColor;
     char *GridColor;
     char *LayerColor[16];
     char *LayerSelectedColor[16];
     char *WarnColor;
     char *MaskColor;
     int ViaThickness;
     int ViaDrillingHole;
     int LineThickness;
     int RatThickness;
     int Keepaway;
     int MaxWidth;
     int MaxHeight;
     int TextScale;
     int AlignmentDistance;
     int Bloat;
     int Shrink;
     int minWid;
     int minSlk;
     int minDrill;
     int minRing;
     double Grid;
     double IsleArea;
     double grid_increment_mm;
     double grid_increment_mil;
     double size_increment_mm;
     double size_increment_mil;
     double line_increment_mm;
     double line_increment_mil;
     double clear_increment_mm;
     double clear_increment_mil;
     double Zoom;
     double PinoutZoom;
     int PinoutNameLength;
     int Volume;
     int CharPerLine;
     int Mode;
     int BufferNumber;
     int GridFactor;
     int BackupInterval;
     char *DefaultLayerName[16];
     char *FontCommand;
     char *FileCommand;
     char *ElementCommand;
     char *PrintFile;
     char *LibraryCommandDir;
     char *LibraryCommand;
     char *LibraryContentsCommand;
     char *LibraryTree;
     char *SaveCommand;
     char *LibraryFilename;
     char *FontFile;
     char *Groups;
     char *Routes;
     char *FilePath;
     char *RatPath;
     char *RatCommand;
     char *FontPath;
     char *PinoutFont;
     char *ElementPath;
     char *LibraryPath;
     char *Size;
     char *Media;
     char *MenuFile;
     char *BackgroundImage;
     char *ScriptFilename;
     char *ActionString;
     char *FabAuthor;
     char *InitialLayerStack;
     Boolean DumpMenuFile;
     LocationType PinoutOffsetX;
     LocationType PinoutOffsetY;
     int PinoutTextOffsetX;
     int PinoutTextOffsetY;
     RouteStyleType RouteStyle[4];
     LayerGroupType LayerGroups;
     Boolean ClearLine;
     Boolean FullPoly;
     Boolean UniqueNames;
     Boolean SnapPin;
     Boolean ShowSolderSide;
     Boolean SaveLastCommand;
     Boolean SaveInTMP;
     Boolean DrawGrid;
     Boolean RatWarn;
     Boolean StipplePolygons;
     Boolean AllDirectionLines;
     Boolean RubberBandMode;
     Boolean SwapStartDirection;
     Boolean ShowDRC;
     Boolean AutoDRC;
     Boolean ShowNumber;
     Boolean OrthogonalMoves;
     Boolean ResetAfterElement;
     Boolean liveRouting;
     Boolean RingBellWhenFinished;
     Boolean AutoPlace;
     int HistorySize;
     int init_done;
  } SettingType;
typedef struct _GTypeInfo GTypeInfo;
typedef void (*GBaseInitFunc)( gpointer  );
typedef void (*GBaseFinalizeFunc)( gpointer  );
typedef void (*GClassInitFunc)( gpointer , gpointer  );
typedef void (*GClassFinalizeFunc)( gpointer , gpointer  );
typedef void *gconstpointer;
typedef void (*GInstanceInitFunc)( GTypeInstance *, gpointer  );
typedef struct _GTypeValueTable GTypeValueTable;
typedef union _GTypeCValue GTypeCValue;
union _GTypeCValue  ;
struct _GTypeValueTable {
     void (*value_init)( GValue * );
     void (*value_free)( GValue * );
     void (*value_copy)( GValue *, GValue * );
     gpointer (*value_peek_pointer)( GValue * );
     gchar *collect_format;
     gchar *(*collect_value)( GValue *, guint , GTypeCValue *, guint  );
     gchar *lcopy_format;
     gchar *(*lcopy_value)( GValue *, guint , GTypeCValue *, guint  );
  } ;
struct _GTypeInfo {
     guint16 class_size;
     GBaseInitFunc base_init;
     GBaseFinalizeFunc base_finalize;
     GClassInitFunc class_init;
     GClassFinalizeFunc class_finalize;
     gconstpointer class_data;
     guint16 instance_size;
     guint16 n_preallocs;
     GInstanceInitFunc instance_init;
     GTypeValueTable *value_table;
  } ;
typedef struct _GtkUIManager GtkUIManager;
typedef struct _GtkUIManagerPrivate GtkUIManagerPrivate;
struct _GtkUIManagerPrivate  ;
struct _GtkUIManager {
     GObject parent;
     GtkUIManagerPrivate *private_data;
  } ;
typedef struct _GtkActionGroup GtkActionGroup;
typedef struct _GtkActionGroupPrivate GtkActionGroupPrivate;
struct _GtkActionGroupPrivate  ;
struct _GtkActionGroup {
     GObject parent;
     GtkActionGroupPrivate *private_data;
  } ;
typedef struct _GtkEntry GtkEntry;
typedef struct _GtkIMContext GtkIMContext;
struct _GtkIMContext {
     GObject parent_instance;
  } ;
typedef struct _PangoLayout PangoLayout;
struct _PangoLayout  ;
typedef guint32 gunichar;
struct _GtkEntry {
     GtkWidget widget;
     gchar *text;
     guint bits_at_64;
     guint16 text_length;
     guint16 text_max_length;
     GdkWindow *text_area;
     GtkIMContext *im_context;
     GtkWidget *popup_menu;
     gint current_pos;
     gint selection_bound;
     PangoLayout *cached_layout;
     guint bits_at_96;
     guint button;
     guint blink_timeout;
     guint recompute_idle;
     gint scroll_offset;
     gint ascent;
     gint descent;
     guint16 x_text_size;
     guint16 x_n_bytes;
     guint16 preedit_length;
     guint16 preedit_cursor;
     gint dnd_position;
     gint drag_start_x;
     gint drag_start_y;
     gunichar invisible_char;
     gint width_chars;
  } ;
typedef struct _GdkPixbuf GdkPixbuf;
struct _GdkPixbuf  ;
typedef struct {
     GtkUIManager *ui_manager;
     GtkActionGroup *main_actions;
     GtkActionGroup *grid_actions;
     GtkActionGroup *change_selected_actions;
     GtkActionGroup *displayed_name_actions;
     GtkWidget *name_label;
     GtkWidget *status_line_label;
     GtkWidget *cursor_position_relative_label;
     GtkWidget *cursor_position_absolute_label;
     GtkWidget *grid_units_label;
     GtkWidget *status_line_hbox;
     GtkWidget *command_combo_box;
     GtkEntry *command_entry;
     GtkWidget *top_hbox;
     GtkWidget *menu_hbox;
     GtkWidget *compact_vbox;
     GtkWidget *compact_hbox;
     GtkWidget *position_hbox;
     GtkWidget *label_hbox;
     GtkWidget *mode_buttons0_vbox;
     GtkWidget *mode_buttons1_hbox;
     GtkWidget *mode_buttons1_vbox;
     GtkWidget *mode_buttons0_frame;
     GtkWidget *mode_buttons1_frame;
     GtkWidget *mode_buttons0_frame_vbox;
     GtkWidget *h_range;
     GtkWidget *v_range;
     GtkObject *h_adjustment;
     GtkObject *v_adjustment;
     GdkPixbuf *bg_pixbuf;
     gchar *name_label_string;
     gboolean adjustment_changed_holdoff;
     gboolean toggle_holdoff;
     gboolean command_entry_status_line_active;
     gboolean auto_pan_on;
     gboolean in_popup;
     gboolean combine_adjustments;
     gboolean config_modified;
     gboolean small_label_markup;
     gboolean compact_horizontal;
     gboolean compact_vertical;
     gboolean ghid_title_window;
     gboolean use_command_window;
     gboolean need_restore_crosshair;
     gboolean creating;
     gint n_mode_button_columns;
     gint top_window_width;
     gint top_window_height;
     gint log_window_width;
     gint log_window_height;
     gint drc_window_width;
     gint drc_window_height;
     gint keyref_window_width;
     gint keyref_window_height;
     gint library_window_width;
     gint library_window_height;
     gint netlist_window_height;
     gint history_size;
     gint settings_mode;
     gint auto_pan_speed;
  } GhidGui;
/*****************************************************************************************/
/******                                                                             ******/
/******                          Function Prototypes                                ******/
/******                                                                             ******/
/*****************************************************************************************/
void DrawLine( LayerTypePtr , LineTypePtr , int  );
void DrawRat( RatTypePtr , int  );
void DrawArc( LayerTypePtr , ArcTypePtr , int  );
void DrawPolygon( LayerTypePtr , PolygonTypePtr , int  );
void DrawPin( PinTypePtr , int  );
void DrawVia( PinTypePtr , int  );
void DrawPad( PadTypePtr , int  );
void DrawObject( int , void *, void *, int  );
void Draw( void );
void Message( char *, ... );
int GetLayerNumber( DataTypePtr , LayerTypePtr  );
int ChangeGroupVisibility( int , Boolean , Boolean  );
void CenterDisplay( LocationType , LocationType , Boolean  );
int SearchObjectByID( DataTypePtr , void **, void **, void **, int , int  );
void SetChangedFlag( Boolean  );
void AddObjectToFlagUndoList( int , void *, void *, void * );
void IncrementUndoSerialNumber( void );
int hid_actionl( char *, ... );
gint drc_window_configure_event_cb( GtkWidget *, GdkEventConfigure *, gpointer  );
void drc_destroy_cb( GtkWidget *, gpointer  );
void ghid_drc_window_reset_message( void );
void drc_close_cb( gpointer  );
void drc_refresh_cb( gpointer  );
void row_activated_cb( GtkTreeView *, GtkTreePath *, GtkTreeViewColumn *, gpointer  );
void unset_found_flags( int  );
void selection_changed_cb( GtkTreeSelection *, gpointer  );
GType ghid_violation_renderer_get_type( void );
GtkCellRenderer *ghid_violation_renderer_new( void );
void ghid_drc_window_show( gboolean  );
int ghid_drc_window_throw_dialog( void );
GType ghid_drc_violation_get_type( void );
GhidDrcViolation *ghid_drc_violation_new( DrcViolationType *, GdkDrawable * );
void ghid_drc_window_append_violation( DrcViolationType * );
void ghid_violation_renderer_get_size( GtkCellRenderer *, GtkWidget *, GdkRectangle *, gint *, gint *, gint *, gint * );
void ghid_violation_renderer_finalize( GObject * );
void ghid_violation_renderer_class_init( GhidViolationRendererClass * );
void ghid_violation_renderer_render( GtkCellRenderer *, GdkDrawable *, GtkWidget *, GdkRectangle *, GdkRectangle *, GdkRectangle *, GtkCellRendererState  );
void ghid_violation_renderer_get_property( GObject *, guint , GValue *, GParamSpec * );
void ghid_drc_violation_get_property( GObject *, guint , GValue *, GParamSpec * );
void ghid_violation_renderer_set_property( GObject *, guint , GValue *, GParamSpec * );
void ghid_drc_violation_finalize( GObject * );
void ghid_drc_violation_class_init( GhidViolationRendererClass * );
void ghid_drc_violation_set_property( GObject *, guint , GValue *, GParamSpec * );
GParamSpec *g_param_spec_object( gchar *, gchar *, gchar *, GType , GParamFlags  );
GtkTreeModel *gtk_tree_view_get_model( GtkTreeView * );
void g_free( gpointer  );
GParamSpec *g_param_spec_string( gchar *, gchar *, gchar *, gchar *, GParamFlags  );
GType gtk_box_get_type( void );
GtkWidget *gtk_window_new( void * );
gchar *g_value_dup_string( GValue * );
GtkCellRenderer *gtk_cell_renderer_text_new( void );
GType gtk_button_box_get_type( void );
void g_object_unref( gpointer  );
GtkWidget *gtk_vbox_new( gboolean , gint  );
gint gtk_tree_view_insert_column_with_attributes( GtkTreeView *, gint , gchar *, GtkCellRenderer *, ... );
gdouble g_value_get_double( GValue * );
GType gtk_widget_get_type( void );
GType gdk_drawable_get_type( void );
void gtk_widget_destroy( GtkWidget * );
void gtk_scrolled_window_set_policy( void *, GtkPolicyType , GtkPolicyType  );
void g_object_class_install_property( GObjectClass *, guint , GParamSpec * );
void gtk_list_store_clear( GtkListStore * );
GParamSpec *g_param_spec_int( gchar *, gchar *, gchar *, gint , gint , gint , GParamFlags  );
void gtk_widget_show_all( GtkWidget * );
GtkWidget *gtk_tree_view_new_with_model( GtkTreeModel * );
gpointer g_object_new( GType , gchar *, ... );
GType gtk_container_get_type( void );
gboolean gtk_tree_model_iter_has_child( GtkTreeModel *, GtkTreeIter * );
char *dcgettext( char *, char *, int  );
gchar *g_strdup_printf( gchar *, ... );
GTypeClass *g_type_check_class_cast( GTypeClass *, GType  );
void gtk_window_set_title( GtkWindow *, gchar * );
void gtk_window_set_default_size( GtkWindow *, gint , gint  );
GParamSpec *g_param_spec_pointer( gchar *, gchar *, gchar *, GParamFlags  );
GType gtk_window_get_type( void );
void *memcpy( void *, void *, unsigned int  );
GType g_type_register_static( GType , gchar *, void *, void * );
gpointer g_value_get_pointer( GValue * );
void g_object_set( gpointer , gchar *, ... );
GType gtk_tree_model_get_type( void );
void gtk_list_store_append( GtkListStore *, GtkTreeIter * );
void gtk_window_present( GtkWindow * );
gboolean gtk_tree_selection_get_selected( GtkTreeSelection *, void *, GtkTreeIter * );
void gtk_widget_realize( GtkWidget * );
gpointer g_value_dup_object( GValue * );
GParamSpec *g_param_spec_double( gchar *, gchar *, gchar *, gdouble , gdouble , gdouble , GParamFlags  );
gchar *g_type_name( GType  );
void gtk_button_box_set_layout( void *, void * );
gulong g_signal_connect_data( gpointer , gchar *, GCallback , gpointer , void *, void * );
GTypeInstance *g_type_check_instance_cast( GTypeInstance *, GType  );
GtkListStore *gtk_list_store_new( gint , ... );
void gtk_container_add( GtkContainer *, GtkWidget * );
GtkWidget *gtk_scrolled_window_new( GtkAdjustment *, GtkAdjustment * );
void gtk_list_store_set( GtkListStore *, GtkTreeIter *, ... );
void gtk_box_pack_start( void *, GtkWidget *, gboolean , gboolean , guint  );
GType gtk_cell_renderer_text_get_type( void );
GType gtk_cell_renderer_get_type( void );
GType gtk_tree_view_get_type( void );
void gtk_tree_model_get( GtkTreeModel *, GtkTreeIter *, ... );
GtkWidget *gtk_button_new_from_stock( gchar * );
GType gtk_scrolled_window_get_type( void );
GtkTreeSelection *gtk_tree_view_get_selection( GtkTreeView * );
gboolean gtk_tree_model_get_iter( GtkTreeModel *, GtkTreeIter *, GtkTreePath * );
gpointer g_malloc_n( gsize , gsize  );
gint g_value_get_int( GValue * );
void gtk_window_set_wmclass( GtkWindow *, gchar *, gchar * );
void gtk_box_set_spacing( void *, gint  );
void gtk_widget_set_uposition( GtkWidget *, gint , gint  );
gpointer g_type_class_peek_parent( gpointer  );
void g_log( gchar *, void *, gchar *, ... );
void gtk_tree_view_set_rules_hint( GtkTreeView *, gboolean  );
void gtk_container_set_border_width( GtkContainer *, guint  );
GtkWidget *gtk_hbutton_box_new( void );
/*****************************************************************************************/
/******                                                                             ******/
/******                        Forward Var Declarations                             ******/
/******                                                                             ******/
/*****************************************************************************************/
extern PCBTypePtr PCB;
extern SettingType Settings;
extern GhidGui *ghidgui;
/*****************************************************************************************/
/******                                                                             ******/
/******                      Inline Function Definitions                            ******/
/******                                                                             ******/
/*****************************************************************************************/
