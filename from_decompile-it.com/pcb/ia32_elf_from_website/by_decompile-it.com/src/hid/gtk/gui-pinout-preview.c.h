#define __MOD(a,b) a % b
/*****************************************************************************************/
/******                                                                             ******/
/******                            Structure Definitions                            ******/
/******                                                                             ******/
/*****************************************************************************************/
typedef struct BoxType BoxType;
typedef int LocationType;
struct BoxType {
     LocationType X1;
     LocationType Y1;
     LocationType X2;
     LocationType Y2;
  } ;
typedef struct {
     unsigned long f;
     unsigned char t[8];
  } FlagType;
typedef int BDimension;
typedef unsigned char BYTE;
typedef struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Scale;
     LocationType X;
     LocationType Y;
     BYTE Direction;
     char *TextString;
     void *Element;
  } TextType;
typedef unsigned int Cardinal;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     BDimension Mask;
     BDimension DrillingHole;
     LocationType X;
     LocationType Y;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
typedef struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     BDimension Mask;
     BDimension DrillingHole;
     LocationType X;
     LocationType Y;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } *PinTypePtr;
typedef struct {
     LocationType X;
     LocationType Y;
     LocationType X2;
     LocationType Y2;
     long ID;
  } PointType;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     BDimension Mask;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
typedef struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     BDimension Mask;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } *PadTypePtr;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
typedef struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } *LineTypePtr;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } ;
typedef struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } *ArcTypePtr;
typedef struct {
     char *name;
     char *value;
  } AttributeType;
typedef struct {
     int Number;
     int Max;
     AttributeType *List;
  } AttributeListType;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     TextType Name[3];
     LocationType MarkX;
     LocationType MarkY;
     Cardinal PinN;
     Cardinal PinMax;
     Cardinal PadN;
     Cardinal PadMax;
     Cardinal LineN;
     Cardinal LineMax;
     Cardinal ArcN;
     Cardinal ArcMax;
     PinTypePtr Pin;
     PadTypePtr Pad;
     LineTypePtr Line;
     ArcTypePtr Arc;
     BoxType VBox;
     AttributeListType Attributes;
  } ;
typedef struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     TextType Name[3];
     LocationType MarkX;
     LocationType MarkY;
     Cardinal PinN;
     Cardinal PinMax;
     Cardinal PadN;
     Cardinal PadMax;
     Cardinal LineN;
     Cardinal LineMax;
     Cardinal ArcN;
     Cardinal ArcMax;
     PinTypePtr Pin;
     PadTypePtr Pad;
     LineTypePtr Line;
     ArcTypePtr Arc;
     BoxType VBox;
     AttributeListType Attributes;
  } *ElementTypePtr;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     BDimension Mask;
     BDimension DrillingHole;
     LocationType X;
     LocationType Y;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     BDimension Mask;
     BDimension DrillingHole;
     LocationType X;
     LocationType Y;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     BDimension Mask;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     TextType Name[3];
     LocationType MarkX;
     LocationType MarkY;
     Cardinal PinN;
     Cardinal PinMax;
     Cardinal PadN;
     Cardinal PadMax;
     Cardinal LineN;
     Cardinal LineMax;
     Cardinal ArcN;
     Cardinal ArcMax;
     PinTypePtr Pin;
     PadTypePtr Pad;
     LineTypePtr Line;
     ArcTypePtr Arc;
     BoxType VBox;
     AttributeListType Attributes;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     Cardinal group1;
     Cardinal group2;
  } ;
typedef struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     Cardinal group1;
     Cardinal group2;
  } *RatTypePtr;
typedef struct rtree rtree_t;
struct rtree {
     struct rtree_node *root;
     int size;
  } ;
typedef char Boolean;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
typedef struct {
     LineTypePtr Line;
     Boolean Valid;
     Cardinal LineN;
     Cardinal LineMax;
     BDimension Width;
     BDimension Height;
     BDimension Delta;
  } SymbolType;
typedef struct {
     LocationType MaxHeight;
     LocationType MaxWidth;
     BoxType DefaultSymbol;
     SymbolType Symbol[256];
     Boolean Valid;
     char __pad[3];
  } FontType;
typedef struct {
     Cardinal Number[16];
     Cardinal Entries[16][18];
  } LayerGroupType;
typedef struct {
     BDimension Thick;
     BDimension Diameter;
     BDimension Hole;
     BDimension Keepaway;
     char *Name;
     int index;
  } RouteStyleType;
struct {
     char *ListEntry;
     char *AllocatedMemory;
     char *Template;
     char *Package;
     char *Value;
     char *Description;
  } ;
typedef struct {
     char *ListEntry;
     char *AllocatedMemory;
     char *Template;
     char *Package;
     char *Value;
     char *Description;
  } *LibraryEntryTypePtr;
struct {
     char *Name;
     char *directory;
     char *Style;
     Cardinal EntryN;
     Cardinal EntryMax;
     LibraryEntryTypePtr Entry;
     char flag;
     char internal;
     char __pad[2];
  } ;
typedef struct {
     char *Name;
     char *directory;
     char *Style;
     Cardinal EntryN;
     Cardinal EntryMax;
     LibraryEntryTypePtr Entry;
     char flag;
     char internal;
     char __pad[2];
  } *LibraryMenuTypePtr;
typedef struct {
     Cardinal MenuN;
     Cardinal MenuMax;
     LibraryMenuTypePtr Menu;
  } LibraryType;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     BDimension Mask;
     BDimension DrillingHole;
     LocationType X;
     LocationType Y;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     BDimension Mask;
     BDimension DrillingHole;
     LocationType X;
     LocationType Y;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     BDimension Mask;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     TextType Name[3];
     LocationType MarkX;
     LocationType MarkY;
     Cardinal PinN;
     Cardinal PinMax;
     Cardinal PadN;
     Cardinal PadMax;
     Cardinal LineN;
     Cardinal LineMax;
     Cardinal ArcN;
     Cardinal ArcMax;
     PinTypePtr Pin;
     PadTypePtr Pad;
     LineTypePtr Line;
     ArcTypePtr Arc;
     BoxType VBox;
     AttributeListType Attributes;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     Cardinal group1;
     Cardinal group2;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Scale;
     LocationType X;
     LocationType Y;
     BYTE Direction;
     char *TextString;
     void *Element;
  } ;
typedef struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Scale;
     LocationType X;
     LocationType Y;
     BYTE Direction;
     char *TextString;
     void *Element;
  } *TextTypePtr;
typedef struct polygon_st *PolygonTypePtr;
typedef struct POLYAREA POLYAREA;
typedef struct PLINE PLINE;
typedef struct VNODE VNODE;
struct {
     unsigned int bits_at_0;
  } ;
typedef struct CVCList CVCList;
struct CVCList {
     double angle;
     VNODE *parent;
     CVCList *prev;
     CVCList *next;
     CVCList *head;
     char poly;
     char side;
     char __pad[2];
  } ;
typedef int vertex[2];
typedef vertex Vector;
struct VNODE {
     VNODE *next;
     VNODE *prev;
     VNODE *shared;
     struct {
       unsigned int bits_at_0;
    } Flags;
     CVCList *cvc_prev;
     CVCList *cvc_next;
     Vector point;
  } ;
struct {
     unsigned int bits_at_0;
  } ;
struct PLINE {
     int xmin;
     int ymin;
     int xmax;
     int ymax;
     PLINE *next;
     VNODE head;
     unsigned int Count;
     double area;
     rtree_t *tree;
     struct {
       unsigned int bits_at_0;
    } Flags;
  } ;
struct POLYAREA {
     POLYAREA *f;
     POLYAREA *b;
     PLINE *contours;
  } ;
struct {
     LocationType X;
     LocationType Y;
     LocationType X2;
     LocationType Y2;
     long ID;
  } ;
typedef struct {
     LocationType X;
     LocationType Y;
     LocationType X2;
     LocationType Y2;
     long ID;
  } *PointTypePtr;
struct polygon_st {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     Cardinal PointN;
     Cardinal PointMax;
     POLYAREA *Clipped;
     PLINE *NoHoles;
     int NoHolesValid;
     PointTypePtr Points;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } ;
typedef struct {
     char *Name;
     Cardinal LineN;
     Cardinal TextN;
     Cardinal PolygonN;
     Cardinal ArcN;
     Cardinal LineMax;
     Cardinal TextMax;
     Cardinal PolygonMax;
     Cardinal ArcMax;
     LineTypePtr Line;
     TextTypePtr Text;
     PolygonTypePtr Polygon;
     ArcTypePtr Arc;
     rtree_t *line_tree;
     rtree_t *text_tree;
     rtree_t *polygon_tree;
     rtree_t *arc_tree;
     Boolean On;
     char *Color;
     char *SelectedColor;
     AttributeListType Attributes;
  } LayerType;
struct {
     Cardinal ViaN;
     Cardinal ViaMax;
     Cardinal ElementN;
     Cardinal ElementMax;
     Cardinal RatN;
     Cardinal RatMax;
     int LayerN;
     PinTypePtr Via;
     ElementTypePtr Element;
     RatTypePtr Rat;
     rtree_t *via_tree;
     rtree_t *element_tree;
     rtree_t *pin_tree;
     rtree_t *pad_tree;
     rtree_t *name_tree[3];
     rtree_t *rat_tree;
     struct PCBType *pcb;
     LayerType Layer[18];
  } ;
typedef struct {
     Cardinal ViaN;
     Cardinal ViaMax;
     Cardinal ElementN;
     Cardinal ElementMax;
     Cardinal RatN;
     Cardinal RatMax;
     int LayerN;
     PinTypePtr Via;
     ElementTypePtr Element;
     RatTypePtr Rat;
     rtree_t *via_tree;
     rtree_t *element_tree;
     rtree_t *pin_tree;
     rtree_t *pad_tree;
     rtree_t *name_tree[3];
     rtree_t *rat_tree;
     struct PCBType *pcb;
     LayerType Layer[18];
  } *DataTypePtr;
struct PCBType {
     long ID;
     FlagType Flags;
     char *Name;
     char *Filename;
     char *PrintFilename;
     char *Netlistname;
     char ThermStyle;
     Boolean Changed;
     Boolean ViaOn;
     Boolean ElementOn;
     Boolean RatOn;
     Boolean InvisibleObjectsOn;
     Boolean PinOn;
     Boolean SilkActive;
     Boolean RatDraw;
     char *ViaColor;
     char *ViaSelectedColor;
     char *PinColor;
     char *PinSelectedColor;
     char *PinNameColor;
     char *ElementColor;
     char *RatColor;
     char *InvisibleObjectsColor;
     char *InvisibleMarkColor;
     char *ElementSelectedColor;
     char *RatSelectedColor;
     char *ConnectedColor;
     char *WarnColor;
     char *MaskColor;
     long CursorX;
     long CursorY;
     long Clipping;
     int Bloat;
     int Shrink;
     int minWid;
     int minSlk;
     int minDrill;
     int minRing;
     int GridOffsetX;
     int GridOffsetY;
     int MaxWidth;
     int MaxHeight;
     double Grid;
     double Zoom;
     double IsleArea;
     double ThermScale;
     FontType Font;
     LayerGroupType LayerGroups;
     RouteStyleType RouteStyle[4];
     LibraryType NetlistLib;
     AttributeListType Attributes;
     DataTypePtr Data;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Scale;
     LocationType X;
     LocationType Y;
     BYTE Direction;
     char *TextString;
     void *Element;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } ;
struct {
     Cardinal ViaN;
     Cardinal ViaMax;
     Cardinal ElementN;
     Cardinal ElementMax;
     Cardinal RatN;
     Cardinal RatMax;
     int LayerN;
     PinTypePtr Via;
     ElementTypePtr Element;
     RatTypePtr Rat;
     rtree_t *via_tree;
     rtree_t *element_tree;
     rtree_t *pin_tree;
     rtree_t *pad_tree;
     rtree_t *name_tree[3];
     rtree_t *rat_tree;
     struct PCBType *pcb;
     LayerType Layer[18];
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     BDimension Mask;
     BDimension DrillingHole;
     LocationType X;
     LocationType Y;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     BDimension Mask;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     TextType Name[3];
     LocationType MarkX;
     LocationType MarkY;
     Cardinal PinN;
     Cardinal PinMax;
     Cardinal PadN;
     Cardinal PadMax;
     Cardinal LineN;
     Cardinal LineMax;
     Cardinal ArcN;
     Cardinal ArcMax;
     PinTypePtr Pin;
     PadTypePtr Pad;
     LineTypePtr Line;
     ArcTypePtr Arc;
     BoxType VBox;
     AttributeListType Attributes;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     BDimension Mask;
     BDimension DrillingHole;
     LocationType X;
     LocationType Y;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     BDimension Mask;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     TextType Name[3];
     LocationType MarkX;
     LocationType MarkY;
     Cardinal PinN;
     Cardinal PinMax;
     Cardinal PadN;
     Cardinal PadMax;
     Cardinal LineN;
     Cardinal LineMax;
     Cardinal ArcN;
     Cardinal ArcMax;
     PinTypePtr Pin;
     PadTypePtr Pad;
     LineTypePtr Line;
     ArcTypePtr Arc;
     BoxType VBox;
     AttributeListType Attributes;
  } ;
typedef struct {
     int int_value;
     char *str_value;
     double real_value;
  } HID_Attr_Val;
typedef struct {
     char *name;
     char *help_text;
     enum  { HID_Label = 0, HID_Integer = 1, HID_Real = 2, HID_String = 3, HID_Boolean = 4, HID_Enum = 5, HID_Mixed = 6, HID_Path = 7, } type;
     int min_val;
     int max_val;
     HID_Attr_Val default_val;
     char **enumerations;
     void *value;
     int hash;
  } HID_Attribute;
typedef struct hid_gc_struct *hidGC;
enum  { Trace_Cap = 0, Square_Cap = 1, Round_Cap = 2, Beveled_Cap = 3, };
typedef enum  { Trace_Cap = 0, Square_Cap = 1, Round_Cap = 2, Beveled_Cap = 3, } EndCapStyle;
typedef struct polygon_st PolygonType;
typedef union {
     long lval;
     void *ptr;
  } hidval;
typedef char *__gnuc_va_list;
typedef __gnuc_va_list va_list;
typedef struct drc_violation_st DrcViolationType;
struct drc_violation_st {
     char *title;
     char *explanation;
     int x;
     int y;
     int angle;
     int have_measured;
     double measured_value;
     double required_value;
     int value_digits;
     char *value_units;
     int object_count;
     long *object_id_list;
     int *object_type_list;
  } ;
typedef struct {
     int log_drc_overview;
     int log_drc_violations;
     void (*reset_drc_dialog_message)( void );
     void (*append_drc_violation)( DrcViolationType * );
     int (*throw_drc_dialog)( void );
  } HID_DRC_GUI;
typedef struct {
     int struct_size;
     char *name;
     char *description;
     char bits_at_12;
     HID_Attribute *(*get_export_options)( int * );
     void (*do_export)( HID_Attr_Val * );
     void (*parse_arguments)( int *, char *** );
     void (*invalidate_wh)( int , int , int , int , int  );
     void (*invalidate_lr)( int , int , int , int , int  );
     void (*invalidate_all)( void );
     int (*set_layer)( char *, int , int  );
     hidGC (*make_gc)( void );
     void (*destroy_gc)( hidGC  );
     void (*use_mask)( int  );
     void (*set_color)( hidGC , char * );
     void (*set_line_cap)( hidGC , EndCapStyle  );
     void (*set_line_width)( hidGC , int  );
     void (*set_draw_xor)( hidGC , int  );
     void (*set_draw_faded)( hidGC , int  );
     void (*set_line_cap_angle)( hidGC , int , int , int , int  );
     void (*draw_line)( hidGC , int , int , int , int  );
     void (*draw_arc)( hidGC , int , int , int , int , int , int  );
     void (*draw_rect)( hidGC , int , int , int , int  );
     void (*fill_circle)( hidGC , int , int , int  );
     void (*fill_polygon)( hidGC , int , int *, int * );
     void (*fill_pcb_polygon)( hidGC , PolygonType *, BoxType * );
     void (*thindraw_pcb_polygon)( hidGC , PolygonType *, BoxType * );
     void (*fill_rect)( hidGC , int , int , int , int  );
     void (*calibrate)( double , double  );
     int (*shift_is_pressed)( void );
     int (*control_is_pressed)( void );
     int (*mod1_is_pressed)( void );
     void (*get_coords)( char *, int *, int * );
     void (*set_crosshair)( int , int , int  );
     hidval (*add_timer)( void (*)( hidval  ), unsigned long , hidval  );
     void (*stop_timer)( hidval  );
     hidval (*watch_file)( int , unsigned int , void (*)( hidval , int , unsigned int , hidval  ), hidval  );
     void (*unwatch_file)( hidval  );
     hidval (*add_block_hook)( void (*)( hidval  ), hidval  );
     void (*stop_block_hook)( hidval  );
     void (*log)( char * );
     void (*logv)( char *, va_list  );
     int (*confirm_dialog)( char * );
     int (*close_confirm_dialog)( void );
     void (*report_dialog)( char *, char * );
     char *(*prompt_for)( char *, char * );
     char *(*fileselect)( char *, char *, char *, char *, char *, int  );
     int (*attribute_dialog)( HID_Attribute *, int , HID_Attr_Val *, char *, char * );
     void (*show_item)( void * );
     void (*beep)( void );
     int (*progress)( int , int , char * );
     HID_DRC_GUI *drc_gui;
  } HID;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     BDimension Mask;
     BDimension DrillingHole;
     LocationType X;
     LocationType Y;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     BDimension Mask;
     BDimension DrillingHole;
     LocationType X;
     LocationType Y;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     BDimension Mask;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     TextType Name[3];
     LocationType MarkX;
     LocationType MarkY;
     Cardinal PinN;
     Cardinal PinMax;
     Cardinal PadN;
     Cardinal PadMax;
     Cardinal LineN;
     Cardinal LineMax;
     Cardinal ArcN;
     Cardinal ArcMax;
     PinTypePtr Pin;
     PadTypePtr Pad;
     LineTypePtr Line;
     ArcTypePtr Arc;
     BoxType VBox;
     AttributeListType Attributes;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     Cardinal group1;
     Cardinal group2;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Scale;
     LocationType X;
     LocationType Y;
     BYTE Direction;
     char *TextString;
     void *Element;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } ;
struct {
     Cardinal ViaN;
     Cardinal ViaMax;
     Cardinal ElementN;
     Cardinal ElementMax;
     Cardinal RatN;
     Cardinal RatMax;
     int LayerN;
     PinTypePtr Via;
     ElementTypePtr Element;
     RatTypePtr Rat;
     rtree_t *via_tree;
     rtree_t *element_tree;
     rtree_t *pin_tree;
     rtree_t *pad_tree;
     rtree_t *name_tree[3];
     rtree_t *rat_tree;
     struct PCBType *pcb;
     LayerType Layer[18];
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     BDimension Mask;
     BDimension DrillingHole;
     LocationType X;
     LocationType Y;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     BDimension Mask;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     TextType Name[3];
     LocationType MarkX;
     LocationType MarkY;
     Cardinal PinN;
     Cardinal PinMax;
     Cardinal PadN;
     Cardinal PadMax;
     Cardinal LineN;
     Cardinal LineMax;
     Cardinal ArcN;
     Cardinal ArcMax;
     PinTypePtr Pin;
     PadTypePtr Pad;
     LineTypePtr Line;
     ArcTypePtr Arc;
     BoxType VBox;
     AttributeListType Attributes;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     BDimension Mask;
     BDimension DrillingHole;
     LocationType X;
     LocationType Y;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     BDimension Mask;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     TextType Name[3];
     LocationType MarkX;
     LocationType MarkY;
     Cardinal PinN;
     Cardinal PinMax;
     Cardinal PadN;
     Cardinal PadMax;
     Cardinal LineN;
     Cardinal LineMax;
     Cardinal ArcN;
     Cardinal ArcMax;
     PinTypePtr Pin;
     PadTypePtr Pad;
     LineTypePtr Line;
     ArcTypePtr Arc;
     BoxType VBox;
     AttributeListType Attributes;
  } ;
typedef unsigned int gsize;
typedef gsize GType;
typedef struct _GtkWidget GtkWidget;
typedef struct _GtkObject GtkObject;
typedef struct _GObject GInitiallyUnowned;
typedef struct _GTypeInstance GTypeInstance;
typedef struct _GTypeClass GTypeClass;
struct _GTypeClass {
     GType g_type;
  } ;
struct _GTypeInstance {
     GTypeClass *g_class;
  } ;
typedef unsigned int guint;
typedef struct _GData GData;
struct _GData  ;
struct _GObject {
     GTypeInstance g_type_instance;
     guint ref_count;
     GData *qdata;
  } ;
typedef unsigned int guint32;
struct _GtkObject {
     GInitiallyUnowned parent_instance;
     guint32 flags;
  } ;
typedef unsigned short guint16;
typedef unsigned char guint8;
typedef char gchar;
typedef struct _GtkStyle GtkStyle;
typedef struct _GObject GObject;
typedef struct _GdkColor GdkColor;
struct _GdkColor {
     guint32 pixel;
     guint16 red;
     guint16 green;
     guint16 blue;
     char __pad[2];
  } ;
typedef struct _PangoFontDescription PangoFontDescription;
struct _PangoFontDescription  ;
typedef int gint;
typedef struct _GdkGC GdkGC;
typedef struct _GdkColormap GdkColormap;
typedef struct _GdkVisual GdkVisual;
enum  { GDK_VISUAL_STATIC_GRAY = 0, GDK_VISUAL_GRAYSCALE = 1, GDK_VISUAL_STATIC_COLOR = 2, GDK_VISUAL_PSEUDO_COLOR = 3, GDK_VISUAL_TRUE_COLOR = 4, GDK_VISUAL_DIRECT_COLOR = 5, };
typedef enum  { GDK_VISUAL_STATIC_GRAY = 0, GDK_VISUAL_GRAYSCALE = 1, GDK_VISUAL_STATIC_COLOR = 2, GDK_VISUAL_PSEUDO_COLOR = 3, GDK_VISUAL_TRUE_COLOR = 4, GDK_VISUAL_DIRECT_COLOR = 5, } GdkVisualType;
enum  { GDK_LSB_FIRST = 0, GDK_MSB_FIRST = 1, };
typedef enum  { GDK_LSB_FIRST = 0, GDK_MSB_FIRST = 1, } GdkByteOrder;
struct _GdkVisual {
     GObject parent_instance;
     GdkVisualType type;
     gint depth;
     GdkByteOrder byte_order;
     gint colormap_size;
     gint bits_per_rgb;
     guint32 red_mask;
     gint red_shift;
     gint red_prec;
     guint32 green_mask;
     gint green_shift;
     gint green_prec;
     guint32 blue_mask;
     gint blue_shift;
     gint blue_prec;
  } ;
typedef void *gpointer;
struct _GdkColormap {
     GObject parent_instance;
     gint size;
     GdkColor *colors;
     GdkVisual *visual;
     gpointer windowing_data;
  } ;
struct _GdkGC {
     GObject parent_instance;
     gint clip_x_origin;
     gint clip_y_origin;
     gint ts_x_origin;
     gint ts_y_origin;
     GdkColormap *colormap;
  } ;
typedef struct _GdkDrawable GdkPixmap;
struct _GdkDrawable {
     GObject parent_instance;
  } ;
typedef struct _GdkFont GdkFont;
enum  { GDK_FONT_FONT = 0, GDK_FONT_FONTSET = 1, };
typedef enum  { GDK_FONT_FONT = 0, GDK_FONT_FONTSET = 1, } GdkFontType;
struct _GdkFont {
     GdkFontType type;
     gint ascent;
     gint descent;
  } ;
typedef struct _GtkRcStyle GtkRcStyle;
enum  { GTK_RC_FG = 1, GTK_RC_BG = 2, GTK_RC_TEXT = 4, GTK_RC_BASE = 8, };
typedef enum  { GTK_RC_FG = 1, GTK_RC_BG = 2, GTK_RC_TEXT = 4, GTK_RC_BASE = 8, } GtkRcFlags;
typedef struct _GArray GArray;
struct _GArray {
     gchar *data;
     guint len;
  } ;
typedef struct _GSList GSList;
struct _GSList {
     gpointer data;
     GSList *next;
  } ;
struct _GtkRcStyle {
     GObject parent_instance;
     gchar *name;
     gchar *bg_pixmap_name[5];
     PangoFontDescription *font_desc;
     GtkRcFlags color_flags[5];
     GdkColor fg[5];
     GdkColor bg[5];
     GdkColor text[5];
     GdkColor base[5];
     gint xthickness;
     gint ythickness;
     GArray *rc_properties;
     GSList *rc_style_lists;
     GSList *icon_factories;
     guint bits_at_320;
  } ;
struct _GtkStyle {
     GObject parent_instance;
     GdkColor fg[5];
     GdkColor bg[5];
     GdkColor light[5];
     GdkColor dark[5];
     GdkColor mid[5];
     GdkColor text[5];
     GdkColor base[5];
     GdkColor text_aa[5];
     GdkColor black;
     GdkColor white;
     PangoFontDescription *font_desc;
     gint xthickness;
     gint ythickness;
     GdkGC *fg_gc[5];
     GdkGC *bg_gc[5];
     GdkGC *light_gc[5];
     GdkGC *dark_gc[5];
     GdkGC *mid_gc[5];
     GdkGC *text_gc[5];
     GdkGC *base_gc[5];
     GdkGC *text_aa_gc[5];
     GdkGC *black_gc;
     GdkGC *white_gc;
     GdkPixmap *bg_pixmap[5];
     gint attach_count;
     gint depth;
     GdkColormap *colormap;
     GdkFont *private_font;
     PangoFontDescription *private_font_desc;
     GtkRcStyle *rc_style;
     GSList *styles;
     GArray *property_cache;
     GSList *icon_factories;
  } ;
typedef struct _GtkRequisition GtkRequisition;
struct _GtkRequisition {
     gint width;
     gint height;
  } ;
typedef struct _GdkRectangle GdkRectangle;
struct _GdkRectangle {
     gint x;
     gint y;
     gint width;
     gint height;
  } ;
typedef GdkRectangle GtkAllocation;
typedef struct _GdkDrawable GdkWindow;
struct _GtkWidget {
     GtkObject object;
     guint16 private_flags;
     guint8 state;
     guint8 saved_state;
     gchar *name;
     GtkStyle *style;
     GtkRequisition requisition;
     GtkAllocation allocation;
     GdkWindow *window;
     GtkWidget *parent;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     BDimension Mask;
     BDimension DrillingHole;
     LocationType X;
     LocationType Y;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     BDimension Mask;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } ;
typedef struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     TextType Name[3];
     LocationType MarkX;
     LocationType MarkY;
     Cardinal PinN;
     Cardinal PinMax;
     Cardinal PadN;
     Cardinal PadMax;
     Cardinal LineN;
     Cardinal LineMax;
     Cardinal ArcN;
     Cardinal ArcMax;
     PinTypePtr Pin;
     PadTypePtr Pad;
     LineTypePtr Line;
     ArcTypePtr Arc;
     BoxType VBox;
     AttributeListType Attributes;
  } ElementType;
typedef struct _GhidPinoutPreviewClass GhidPinoutPreviewClass;
typedef struct _GtkDrawingAreaClass GtkDrawingAreaClass;
typedef struct _GtkWidgetClass GtkWidgetClass;
typedef struct _GtkObjectClass GtkObjectClass;
typedef struct _GObjectClass GInitiallyUnownedClass;
typedef struct _GObjectConstructParam GObjectConstructParam;
typedef struct _GParamSpec GParamSpec;
enum  { G_PARAM_READABLE = 1, G_PARAM_WRITABLE = 2, G_PARAM_CONSTRUCT = 4, G_PARAM_CONSTRUCT_ONLY = 8, G_PARAM_LAX_VALIDATION = 16, G_PARAM_STATIC_NAME = 32, G_PARAM_PRIVATE = 32, G_PARAM_STATIC_NICK = 64, G_PARAM_STATIC_BLURB = 128, G_PARAM_DEPRECATED = -2147483648, };
typedef enum  { G_PARAM_READABLE = 1, G_PARAM_WRITABLE = 2, G_PARAM_CONSTRUCT = 4, G_PARAM_CONSTRUCT_ONLY = 8, G_PARAM_LAX_VALIDATION = 16, G_PARAM_STATIC_NAME = 32, G_PARAM_PRIVATE = 32, G_PARAM_STATIC_NICK = 64, G_PARAM_STATIC_BLURB = 128, G_PARAM_DEPRECATED = -2147483648, } GParamFlags;
struct _GParamSpec {
     GTypeInstance g_type_instance;
     gchar *name;
     GParamFlags flags;
     GType value_type;
     GType owner_type;
     gchar *_nick;
     gchar *_blurb;
     GData *qdata;
     guint ref_count;
     guint param_id;
  } ;
typedef struct _GValue GValue;
typedef long glong;
typedef unsigned long gulong;
typedef long long gint64;
typedef unsigned long long guint64;
typedef float gfloat;
typedef double gdouble;
union {
     gint v_int;
     guint v_uint;
     glong v_long;
     gulong v_ulong;
     gint64 v_int64;
     guint64 v_uint64;
     gfloat v_float;
     gdouble v_double;
     gpointer v_pointer;
  } ;
struct _GValue {
     GType g_type;
     union {
       gint v_int;
       guint v_uint;
       glong v_long;
       gulong v_ulong;
       gint64 v_int64;
       guint64 v_uint64;
       gfloat v_float;
       gdouble v_double;
       gpointer v_pointer;
    } data[2];
  } ;
struct _GObjectConstructParam {
     GParamSpec *pspec;
     GValue *value;
  } ;
struct _GObjectClass {
     GTypeClass g_type_class;
     GSList *construct_properties;
     GObject *(*constructor)( GType , guint , GObjectConstructParam * );
     void (*set_property)( GObject *, guint , GValue *, GParamSpec * );
     void (*get_property)( GObject *, guint , GValue *, GParamSpec * );
     void (*dispose)( GObject * );
     void (*finalize)( GObject * );
     void (*dispatch_properties_changed)( GObject *, guint , GParamSpec ** );
     void (*notify)( GObject *, GParamSpec * );
     void (*constructed)( GObject * );
     gsize flags;
     gpointer pdummy[6];
  } ;
typedef struct _GtkArg GtkArg;
typedef unsigned char guchar;
typedef gint gboolean;
typedef void (*GCallback)( void );
struct {
     GCallback f;
     gpointer d;
  } ;
union {
     gchar char_data;
     guchar uchar_data;
     gboolean bool_data;
     gint int_data;
     guint uint_data;
     glong long_data;
     gulong ulong_data;
     gfloat float_data;
     gdouble double_data;
     gchar *string_data;
     GtkObject *object_data;
     gpointer pointer_data;
     struct {
       GCallback f;
       gpointer d;
    } signal_data;
  } ;
struct _GtkArg {
     GType type;
     gchar *name;
     union {
       gchar char_data;
       guchar uchar_data;
       gboolean bool_data;
       gint int_data;
       guint uint_data;
       glong long_data;
       gulong ulong_data;
       gfloat float_data;
       gdouble double_data;
       gchar *string_data;
       GtkObject *object_data;
       gpointer pointer_data;
       struct {
         GCallback f;
         gpointer d;
      } signal_data;
    } d;
  } ;
struct _GtkObjectClass {
     GInitiallyUnownedClass parent_class;
     void (*set_arg)( GtkObject *, GtkArg *, guint  );
     void (*get_arg)( GtkObject *, GtkArg *, guint  );
     void (*destroy)( GtkObject * );
  } ;
enum  { GTK_STATE_NORMAL = 0, GTK_STATE_ACTIVE = 1, GTK_STATE_PRELIGHT = 2, GTK_STATE_SELECTED = 3, GTK_STATE_INSENSITIVE = 4, };
typedef enum  { GTK_STATE_NORMAL = 0, GTK_STATE_ACTIVE = 1, GTK_STATE_PRELIGHT = 2, GTK_STATE_SELECTED = 3, GTK_STATE_INSENSITIVE = 4, } GtkStateType;
enum  { GTK_TEXT_DIR_NONE = 0, GTK_TEXT_DIR_LTR = 1, GTK_TEXT_DIR_RTL = 2, };
typedef enum  { GTK_TEXT_DIR_NONE = 0, GTK_TEXT_DIR_LTR = 1, GTK_TEXT_DIR_RTL = 2, } GtkTextDirection;
enum  { GTK_DIR_TAB_FORWARD = 0, GTK_DIR_TAB_BACKWARD = 1, GTK_DIR_UP = 2, GTK_DIR_DOWN = 3, GTK_DIR_LEFT = 4, GTK_DIR_RIGHT = 5, };
typedef enum  { GTK_DIR_TAB_FORWARD = 0, GTK_DIR_TAB_BACKWARD = 1, GTK_DIR_UP = 2, GTK_DIR_DOWN = 3, GTK_DIR_LEFT = 4, GTK_DIR_RIGHT = 5, } GtkDirectionType;
typedef union _GdkEvent GdkEvent;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
typedef enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, } GdkEventType;
typedef struct _GdkEventAny GdkEventAny;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
typedef char gint8;
struct _GdkEventAny {
     GdkEventType type;
     GdkWindow *window;
     gint8 send_event;
     char __pad[3];
  } ;
typedef struct _GdkEventExpose GdkEventExpose;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
typedef struct _GdkRegion GdkRegion;
struct _GdkRegion  ;
struct _GdkEventExpose {
     GdkEventType type;
     GdkWindow *window;
     gint8 send_event;
     GdkRectangle area;
     GdkRegion *region;
     gint count;
  } ;
typedef struct _GdkEventNoExpose GdkEventNoExpose;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
struct _GdkEventNoExpose {
     GdkEventType type;
     GdkWindow *window;
     gint8 send_event;
     char __pad[3];
  } ;
typedef struct _GdkEventVisibility GdkEventVisibility;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
enum  { GDK_VISIBILITY_UNOBSCURED = 0, GDK_VISIBILITY_PARTIAL = 1, GDK_VISIBILITY_FULLY_OBSCURED = 2, };
typedef enum  { GDK_VISIBILITY_UNOBSCURED = 0, GDK_VISIBILITY_PARTIAL = 1, GDK_VISIBILITY_FULLY_OBSCURED = 2, } GdkVisibilityState;
struct _GdkEventVisibility {
     GdkEventType type;
     GdkWindow *window;
     gint8 send_event;
     GdkVisibilityState state;
  } ;
typedef struct _GdkEventMotion GdkEventMotion;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
typedef short gint16;
typedef struct _GdkDevice GdkDevice;
enum  { GDK_SOURCE_MOUSE = 0, GDK_SOURCE_PEN = 1, GDK_SOURCE_ERASER = 2, GDK_SOURCE_CURSOR = 3, };
typedef enum  { GDK_SOURCE_MOUSE = 0, GDK_SOURCE_PEN = 1, GDK_SOURCE_ERASER = 2, GDK_SOURCE_CURSOR = 3, } GdkInputSource;
enum  { GDK_MODE_DISABLED = 0, GDK_MODE_SCREEN = 1, GDK_MODE_WINDOW = 2, };
typedef enum  { GDK_MODE_DISABLED = 0, GDK_MODE_SCREEN = 1, GDK_MODE_WINDOW = 2, } GdkInputMode;
typedef struct _GdkDeviceAxis GdkDeviceAxis;
enum  { GDK_AXIS_IGNORE = 0, GDK_AXIS_X = 1, GDK_AXIS_Y = 2, GDK_AXIS_PRESSURE = 3, GDK_AXIS_XTILT = 4, GDK_AXIS_YTILT = 5, GDK_AXIS_WHEEL = 6, GDK_AXIS_LAST = 7, };
typedef enum  { GDK_AXIS_IGNORE = 0, GDK_AXIS_X = 1, GDK_AXIS_Y = 2, GDK_AXIS_PRESSURE = 3, GDK_AXIS_XTILT = 4, GDK_AXIS_YTILT = 5, GDK_AXIS_WHEEL = 6, GDK_AXIS_LAST = 7, } GdkAxisUse;
struct _GdkDeviceAxis {
     GdkAxisUse use;
     gdouble min;
     gdouble max;
  } ;
typedef struct _GdkDeviceKey GdkDeviceKey;
enum  { GDK_SHIFT_MASK = 1, GDK_LOCK_MASK = 2, GDK_CONTROL_MASK = 4, GDK_MOD1_MASK = 8, GDK_MOD2_MASK = 16, GDK_MOD3_MASK = 32, GDK_MOD4_MASK = 64, GDK_MOD5_MASK = 128, GDK_BUTTON1_MASK = 256, GDK_BUTTON2_MASK = 512, GDK_BUTTON3_MASK = 1024, GDK_BUTTON4_MASK = 2048, GDK_BUTTON5_MASK = 4096, GDK_SUPER_MASK = 67108864, GDK_HYPER_MASK = 134217728, GDK_META_MASK = 268435456, GDK_RELEASE_MASK = 1073741824, GDK_MODIFIER_MASK = 1543512063, };
typedef enum  { GDK_SHIFT_MASK = 1, GDK_LOCK_MASK = 2, GDK_CONTROL_MASK = 4, GDK_MOD1_MASK = 8, GDK_MOD2_MASK = 16, GDK_MOD3_MASK = 32, GDK_MOD4_MASK = 64, GDK_MOD5_MASK = 128, GDK_BUTTON1_MASK = 256, GDK_BUTTON2_MASK = 512, GDK_BUTTON3_MASK = 1024, GDK_BUTTON4_MASK = 2048, GDK_BUTTON5_MASK = 4096, GDK_SUPER_MASK = 67108864, GDK_HYPER_MASK = 134217728, GDK_META_MASK = 268435456, GDK_RELEASE_MASK = 1073741824, GDK_MODIFIER_MASK = 1543512063, } GdkModifierType;
struct _GdkDeviceKey {
     guint keyval;
     GdkModifierType modifiers;
  } ;
struct _GdkDevice {
     GObject parent_instance;
     gchar *name;
     GdkInputSource source;
     GdkInputMode mode;
     gboolean has_cursor;
     gint num_axes;
     GdkDeviceAxis *axes;
     gint num_keys;
     GdkDeviceKey *keys;
  } ;
struct _GdkEventMotion {
     GdkEventType type;
     GdkWindow *window;
     gint8 send_event;
     guint32 time;
     gdouble x;
     gdouble y;
     gdouble *axes;
     guint state;
     gint16 is_hint;
     GdkDevice *device;
     gdouble x_root;
     gdouble y_root;
  } ;
typedef struct _GdkEventButton GdkEventButton;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
struct _GdkEventButton {
     GdkEventType type;
     GdkWindow *window;
     gint8 send_event;
     guint32 time;
     gdouble x;
     gdouble y;
     gdouble *axes;
     guint state;
     guint button;
     GdkDevice *device;
     gdouble x_root;
     gdouble y_root;
  } ;
typedef struct _GdkEventScroll GdkEventScroll;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
enum  { GDK_SCROLL_UP = 0, GDK_SCROLL_DOWN = 1, GDK_SCROLL_LEFT = 2, GDK_SCROLL_RIGHT = 3, };
typedef enum  { GDK_SCROLL_UP = 0, GDK_SCROLL_DOWN = 1, GDK_SCROLL_LEFT = 2, GDK_SCROLL_RIGHT = 3, } GdkScrollDirection;
struct _GdkEventScroll {
     GdkEventType type;
     GdkWindow *window;
     gint8 send_event;
     guint32 time;
     gdouble x;
     gdouble y;
     guint state;
     GdkScrollDirection direction;
     GdkDevice *device;
     gdouble x_root;
     gdouble y_root;
  } ;
typedef struct _GdkEventKey GdkEventKey;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
struct _GdkEventKey {
     GdkEventType type;
     GdkWindow *window;
     gint8 send_event;
     guint32 time;
     guint state;
     guint keyval;
     gint length;
     gchar *string;
     guint16 hardware_keycode;
     guint8 group;
     guint bits_at_32;
  } ;
typedef struct _GdkEventCrossing GdkEventCrossing;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
enum  { GDK_CROSSING_NORMAL = 0, GDK_CROSSING_GRAB = 1, GDK_CROSSING_UNGRAB = 2, GDK_CROSSING_GTK_GRAB = 3, GDK_CROSSING_GTK_UNGRAB = 4, GDK_CROSSING_STATE_CHANGED = 5, };
typedef enum  { GDK_CROSSING_NORMAL = 0, GDK_CROSSING_GRAB = 1, GDK_CROSSING_UNGRAB = 2, GDK_CROSSING_GTK_GRAB = 3, GDK_CROSSING_GTK_UNGRAB = 4, GDK_CROSSING_STATE_CHANGED = 5, } GdkCrossingMode;
enum  { GDK_NOTIFY_ANCESTOR = 0, GDK_NOTIFY_VIRTUAL = 1, GDK_NOTIFY_INFERIOR = 2, GDK_NOTIFY_NONLINEAR = 3, GDK_NOTIFY_NONLINEAR_VIRTUAL = 4, GDK_NOTIFY_UNKNOWN = 5, };
typedef enum  { GDK_NOTIFY_ANCESTOR = 0, GDK_NOTIFY_VIRTUAL = 1, GDK_NOTIFY_INFERIOR = 2, GDK_NOTIFY_NONLINEAR = 3, GDK_NOTIFY_NONLINEAR_VIRTUAL = 4, GDK_NOTIFY_UNKNOWN = 5, } GdkNotifyType;
struct _GdkEventCrossing {
     GdkEventType type;
     GdkWindow *window;
     gint8 send_event;
     GdkWindow *subwindow;
     guint32 time;
     gdouble x;
     gdouble y;
     gdouble x_root;
     gdouble y_root;
     GdkCrossingMode mode;
     GdkNotifyType detail;
     gboolean focus;
     guint state;
  } ;
typedef struct _GdkEventFocus GdkEventFocus;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
struct _GdkEventFocus {
     GdkEventType type;
     GdkWindow *window;
     gint8 send_event;
     gint16 in;
  } ;
typedef struct _GdkEventConfigure GdkEventConfigure;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
struct _GdkEventConfigure {
     GdkEventType type;
     GdkWindow *window;
     gint8 send_event;
     gint x;
     gint y;
     gint width;
     gint height;
  } ;
typedef struct _GdkEventProperty GdkEventProperty;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
typedef struct _GdkAtom *GdkAtom;
struct _GdkEventProperty {
     GdkEventType type;
     GdkWindow *window;
     gint8 send_event;
     GdkAtom atom;
     guint32 time;
     guint state;
  } ;
typedef struct _GdkEventSelection GdkEventSelection;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
typedef guint32 GdkNativeWindow;
struct _GdkEventSelection {
     GdkEventType type;
     GdkWindow *window;
     gint8 send_event;
     GdkAtom selection;
     GdkAtom target;
     GdkAtom property;
     guint32 time;
     GdkNativeWindow requestor;
  } ;
typedef struct _GdkEventOwnerChange GdkEventOwnerChange;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
enum  { GDK_OWNER_CHANGE_NEW_OWNER = 0, GDK_OWNER_CHANGE_DESTROY = 1, GDK_OWNER_CHANGE_CLOSE = 2, };
typedef enum  { GDK_OWNER_CHANGE_NEW_OWNER = 0, GDK_OWNER_CHANGE_DESTROY = 1, GDK_OWNER_CHANGE_CLOSE = 2, } GdkOwnerChange;
struct _GdkEventOwnerChange {
     GdkEventType type;
     GdkWindow *window;
     gint8 send_event;
     GdkNativeWindow owner;
     GdkOwnerChange reason;
     GdkAtom selection;
     guint32 time;
     guint32 selection_time;
  } ;
typedef struct _GdkEventProximity GdkEventProximity;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
struct _GdkEventProximity {
     GdkEventType type;
     GdkWindow *window;
     gint8 send_event;
     guint32 time;
     GdkDevice *device;
  } ;
typedef struct _GdkEventClient GdkEventClient;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
typedef unsigned short gushort;
union {
     char b[20];
     short s[10];
     long l[5];
  } ;
struct _GdkEventClient {
     GdkEventType type;
     GdkWindow *window;
     gint8 send_event;
     GdkAtom message_type;
     gushort data_format;
     union {
       char b[20];
       short s[10];
       long l[5];
    } data;
  } ;
typedef struct _GdkEventDND GdkEventDND;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
typedef struct _GdkDragContext GdkDragContext;
enum  { GDK_DRAG_PROTO_MOTIF = 0, GDK_DRAG_PROTO_XDND = 1, GDK_DRAG_PROTO_ROOTWIN = 2, GDK_DRAG_PROTO_NONE = 3, GDK_DRAG_PROTO_WIN32_DROPFILES = 4, GDK_DRAG_PROTO_OLE2 = 5, GDK_DRAG_PROTO_LOCAL = 6, };
typedef enum  { GDK_DRAG_PROTO_MOTIF = 0, GDK_DRAG_PROTO_XDND = 1, GDK_DRAG_PROTO_ROOTWIN = 2, GDK_DRAG_PROTO_NONE = 3, GDK_DRAG_PROTO_WIN32_DROPFILES = 4, GDK_DRAG_PROTO_OLE2 = 5, GDK_DRAG_PROTO_LOCAL = 6, } GdkDragProtocol;
typedef struct _GList GList;
struct _GList {
     gpointer data;
     GList *next;
     GList *prev;
  } ;
enum  { GDK_ACTION_DEFAULT = 1, GDK_ACTION_COPY = 2, GDK_ACTION_MOVE = 4, GDK_ACTION_LINK = 8, GDK_ACTION_PRIVATE = 16, GDK_ACTION_ASK = 32, };
typedef enum  { GDK_ACTION_DEFAULT = 1, GDK_ACTION_COPY = 2, GDK_ACTION_MOVE = 4, GDK_ACTION_LINK = 8, GDK_ACTION_PRIVATE = 16, GDK_ACTION_ASK = 32, } GdkDragAction;
enum  { GDK_ACTION_DEFAULT = 1, GDK_ACTION_COPY = 2, GDK_ACTION_MOVE = 4, GDK_ACTION_LINK = 8, GDK_ACTION_PRIVATE = 16, GDK_ACTION_ASK = 32, };
enum  { GDK_ACTION_DEFAULT = 1, GDK_ACTION_COPY = 2, GDK_ACTION_MOVE = 4, GDK_ACTION_LINK = 8, GDK_ACTION_PRIVATE = 16, GDK_ACTION_ASK = 32, };
struct _GdkDragContext {
     GObject parent_instance;
     GdkDragProtocol protocol;
     gboolean is_source;
     GdkWindow *source_window;
     GdkWindow *dest_window;
     GList *targets;
     GdkDragAction actions;
     GdkDragAction suggested_action;
     GdkDragAction action;
     guint32 start_time;
     gpointer windowing_data;
  } ;
typedef short gshort;
struct _GdkEventDND {
     GdkEventType type;
     GdkWindow *window;
     gint8 send_event;
     GdkDragContext *context;
     guint32 time;
     gshort x_root;
     gshort y_root;
  } ;
typedef struct _GdkEventWindowState GdkEventWindowState;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
enum  { GDK_WINDOW_STATE_WITHDRAWN = 1, GDK_WINDOW_STATE_ICONIFIED = 2, GDK_WINDOW_STATE_MAXIMIZED = 4, GDK_WINDOW_STATE_STICKY = 8, GDK_WINDOW_STATE_FULLSCREEN = 16, GDK_WINDOW_STATE_ABOVE = 32, GDK_WINDOW_STATE_BELOW = 64, };
typedef enum  { GDK_WINDOW_STATE_WITHDRAWN = 1, GDK_WINDOW_STATE_ICONIFIED = 2, GDK_WINDOW_STATE_MAXIMIZED = 4, GDK_WINDOW_STATE_STICKY = 8, GDK_WINDOW_STATE_FULLSCREEN = 16, GDK_WINDOW_STATE_ABOVE = 32, GDK_WINDOW_STATE_BELOW = 64, } GdkWindowState;
enum  { GDK_WINDOW_STATE_WITHDRAWN = 1, GDK_WINDOW_STATE_ICONIFIED = 2, GDK_WINDOW_STATE_MAXIMIZED = 4, GDK_WINDOW_STATE_STICKY = 8, GDK_WINDOW_STATE_FULLSCREEN = 16, GDK_WINDOW_STATE_ABOVE = 32, GDK_WINDOW_STATE_BELOW = 64, };
struct _GdkEventWindowState {
     GdkEventType type;
     GdkWindow *window;
     gint8 send_event;
     GdkWindowState changed_mask;
     GdkWindowState new_window_state;
  } ;
typedef struct _GdkEventSetting GdkEventSetting;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
enum  { GDK_SETTING_ACTION_NEW = 0, GDK_SETTING_ACTION_CHANGED = 1, GDK_SETTING_ACTION_DELETED = 2, };
typedef enum  { GDK_SETTING_ACTION_NEW = 0, GDK_SETTING_ACTION_CHANGED = 1, GDK_SETTING_ACTION_DELETED = 2, } GdkSettingAction;
struct _GdkEventSetting {
     GdkEventType type;
     GdkWindow *window;
     gint8 send_event;
     GdkSettingAction action;
     char *name;
  } ;
typedef struct _GdkEventGrabBroken GdkEventGrabBroken;
enum  { GDK_NOTHING = -1, GDK_DELETE = 0, GDK_DESTROY = 1, GDK_EXPOSE = 2, GDK_MOTION_NOTIFY = 3, GDK_BUTTON_PRESS = 4, GDK_2BUTTON_PRESS = 5, GDK_3BUTTON_PRESS = 6, GDK_BUTTON_RELEASE = 7, GDK_KEY_PRESS = 8, GDK_KEY_RELEASE = 9, GDK_ENTER_NOTIFY = 10, GDK_LEAVE_NOTIFY = 11, GDK_FOCUS_CHANGE = 12, GDK_CONFIGURE = 13, GDK_MAP = 14, GDK_UNMAP = 15, GDK_PROPERTY_NOTIFY = 16, GDK_SELECTION_CLEAR = 17, GDK_SELECTION_REQUEST = 18, GDK_SELECTION_NOTIFY = 19, GDK_PROXIMITY_IN = 20, GDK_PROXIMITY_OUT = 21, GDK_DRAG_ENTER = 22, GDK_DRAG_LEAVE = 23, GDK_DRAG_MOTION = 24, GDK_DRAG_STATUS = 25, GDK_DROP_START = 26, GDK_DROP_FINISHED = 27, GDK_CLIENT_EVENT = 28, GDK_VISIBILITY_NOTIFY = 29, GDK_NO_EXPOSE = 30, GDK_SCROLL = 31, GDK_WINDOW_STATE = 32, GDK_SETTING = 33, GDK_OWNER_CHANGE = 34, GDK_GRAB_BROKEN = 35, GDK_DAMAGE = 36, GDK_EVENT_LAST = 37, };
struct _GdkEventGrabBroken {
     GdkEventType type;
     GdkWindow *window;
     gint8 send_event;
     gboolean keyboard;
     gboolean implicit;
     GdkWindow *grab_window;
  } ;
union _GdkEvent {
     GdkEventType type;
     GdkEventAny any;
     GdkEventExpose expose;
     GdkEventNoExpose no_expose;
     GdkEventVisibility visibility;
     GdkEventMotion motion;
     GdkEventButton button;
     GdkEventScroll scroll;
     GdkEventKey key;
     GdkEventCrossing crossing;
     GdkEventFocus focus_change;
     GdkEventConfigure configure;
     GdkEventProperty property;
     GdkEventSelection selection;
     GdkEventOwnerChange owner_change;
     GdkEventProximity proximity;
     GdkEventClient client;
     GdkEventDND dnd;
     GdkEventWindowState window_state;
     GdkEventSetting setting;
     GdkEventGrabBroken grab_broken;
  } ;
typedef struct _GtkSelectionData GtkSelectionData;
typedef struct _GdkDisplay GdkDisplay;
typedef struct _GdkDisplayPointerHooks GdkDisplayPointerHooks;
typedef struct _GdkScreen GdkScreen;
typedef struct _cairo_font_options cairo_font_options_t;
struct _cairo_font_options  ;
struct _GdkScreen {
     GObject parent_instance;
     guint bits_at_12;
     GdkGC *normal_gcs[32];
     GdkGC *exposure_gcs[32];
     GdkGC *subwindow_gcs[32];
     cairo_font_options_t *font_options;
     double resolution;
  } ;
enum  { GDK_SHIFT_MASK = 1, GDK_LOCK_MASK = 2, GDK_CONTROL_MASK = 4, GDK_MOD1_MASK = 8, GDK_MOD2_MASK = 16, GDK_MOD3_MASK = 32, GDK_MOD4_MASK = 64, GDK_MOD5_MASK = 128, GDK_BUTTON1_MASK = 256, GDK_BUTTON2_MASK = 512, GDK_BUTTON3_MASK = 1024, GDK_BUTTON4_MASK = 2048, GDK_BUTTON5_MASK = 4096, GDK_SUPER_MASK = 67108864, GDK_HYPER_MASK = 134217728, GDK_META_MASK = 268435456, GDK_RELEASE_MASK = 1073741824, GDK_MODIFIER_MASK = 1543512063, };
enum  { GDK_SHIFT_MASK = 1, GDK_LOCK_MASK = 2, GDK_CONTROL_MASK = 4, GDK_MOD1_MASK = 8, GDK_MOD2_MASK = 16, GDK_MOD3_MASK = 32, GDK_MOD4_MASK = 64, GDK_MOD5_MASK = 128, GDK_BUTTON1_MASK = 256, GDK_BUTTON2_MASK = 512, GDK_BUTTON3_MASK = 1024, GDK_BUTTON4_MASK = 2048, GDK_BUTTON5_MASK = 4096, GDK_SUPER_MASK = 67108864, GDK_HYPER_MASK = 134217728, GDK_META_MASK = 268435456, GDK_RELEASE_MASK = 1073741824, GDK_MODIFIER_MASK = 1543512063, };
struct _GdkDisplayPointerHooks {
     void (*get_pointer)( GdkDisplay *, GdkScreen **, gint *, gint *, GdkModifierType * );
     GdkWindow *(*window_get_pointer)( GdkDisplay *, GdkWindow *, gint *, gint *, GdkModifierType * );
     GdkWindow *(*window_at_pointer)( GdkDisplay *, gint *, gint * );
  } ;
typedef struct {
     GdkWindow *window;
     GdkWindow *native_window;
     gulong serial;
     gboolean owner_events;
     guint32 time;
  } GdkKeyboardGrabInfo;
typedef struct {
     GdkWindow *toplevel_under_pointer;
     GdkWindow *window_under_pointer;
     gdouble toplevel_x;
     gdouble toplevel_y;
     guint32 state;
     guint32 button;
     gulong motion_hint_serial;
  } GdkPointerWindowInfo;
struct _GdkDisplay {
     GObject parent_instance;
     GList *queued_events;
     GList *queued_tail;
     guint32 button_click_time[2];
     GdkWindow *button_window[2];
     gint button_number[2];
     guint double_click_time;
     GdkDevice *core_pointer;
     GdkDisplayPointerHooks *pointer_hooks;
     guint bits_at_56;
     guint double_click_distance;
     gint button_x[2];
     gint button_y[2];
     GList *pointer_grabs;
     GdkKeyboardGrabInfo keyboard_grab;
     GdkPointerWindowInfo pointer_info;
     guint32 last_event_time;
  } ;
struct _GtkSelectionData {
     GdkAtom selection;
     GdkAtom target;
     GdkAtom type;
     gint format;
     guchar *data;
     gint length;
     GdkDisplay *display;
  } ;
enum  { GTK_WIDGET_HELP_TOOLTIP = 0, GTK_WIDGET_HELP_WHATS_THIS = 1, };
typedef enum  { GTK_WIDGET_HELP_TOOLTIP = 0, GTK_WIDGET_HELP_WHATS_THIS = 1, } GtkWidgetHelpType;
typedef struct _AtkObject AtkObject;
enum  { ATK_ROLE_INVALID = 0, ATK_ROLE_ACCEL_LABEL = 1, ATK_ROLE_ALERT = 2, ATK_ROLE_ANIMATION = 3, ATK_ROLE_ARROW = 4, ATK_ROLE_CALENDAR = 5, ATK_ROLE_CANVAS = 6, ATK_ROLE_CHECK_BOX = 7, ATK_ROLE_CHECK_MENU_ITEM = 8, ATK_ROLE_COLOR_CHOOSER = 9, ATK_ROLE_COLUMN_HEADER = 10, ATK_ROLE_COMBO_BOX = 11, ATK_ROLE_DATE_EDITOR = 12, ATK_ROLE_DESKTOP_ICON = 13, ATK_ROLE_DESKTOP_FRAME = 14, ATK_ROLE_DIAL = 15, ATK_ROLE_DIALOG = 16, ATK_ROLE_DIRECTORY_PANE = 17, ATK_ROLE_DRAWING_AREA = 18, ATK_ROLE_FILE_CHOOSER = 19, ATK_ROLE_FILLER = 20, ATK_ROLE_FONT_CHOOSER = 21, ATK_ROLE_FRAME = 22, ATK_ROLE_GLASS_PANE = 23, ATK_ROLE_HTML_CONTAINER = 24, ATK_ROLE_ICON = 25, ATK_ROLE_IMAGE = 26, ATK_ROLE_INTERNAL_FRAME = 27, ATK_ROLE_LABEL = 28, ATK_ROLE_LAYERED_PANE = 29, ATK_ROLE_LIST = 30, ATK_ROLE_LIST_ITEM = 31, ATK_ROLE_MENU = 32, ATK_ROLE_MENU_BAR = 33, ATK_ROLE_MENU_ITEM = 34, ATK_ROLE_OPTION_PANE = 35, ATK_ROLE_PAGE_TAB = 36, ATK_ROLE_PAGE_TAB_LIST = 37, ATK_ROLE_PANEL = 38, ATK_ROLE_PASSWORD_TEXT = 39, ATK_ROLE_POPUP_MENU = 40, ATK_ROLE_PROGRESS_BAR = 41, ATK_ROLE_PUSH_BUTTON = 42, ATK_ROLE_RADIO_BUTTON = 43, ATK_ROLE_RADIO_MENU_ITEM = 44, ATK_ROLE_ROOT_PANE = 45, ATK_ROLE_ROW_HEADER = 46, ATK_ROLE_SCROLL_BAR = 47, ATK_ROLE_SCROLL_PANE = 48, ATK_ROLE_SEPARATOR = 49, ATK_ROLE_SLIDER = 50, ATK_ROLE_SPLIT_PANE = 51, ATK_ROLE_SPIN_BUTTON = 52, ATK_ROLE_STATUSBAR = 53, ATK_ROLE_TABLE = 54, ATK_ROLE_TABLE_CELL = 55, ATK_ROLE_TABLE_COLUMN_HEADER = 56, ATK_ROLE_TABLE_ROW_HEADER = 57, ATK_ROLE_TEAR_OFF_MENU_ITEM = 58, ATK_ROLE_TERMINAL = 59, ATK_ROLE_TEXT = 60, ATK_ROLE_TOGGLE_BUTTON = 61, ATK_ROLE_TOOL_BAR = 62, ATK_ROLE_TOOL_TIP = 63, ATK_ROLE_TREE = 64, ATK_ROLE_TREE_TABLE = 65, ATK_ROLE_UNKNOWN = 66, ATK_ROLE_VIEWPORT = 67, ATK_ROLE_WINDOW = 68, ATK_ROLE_HEADER = 69, ATK_ROLE_FOOTER = 70, ATK_ROLE_PARAGRAPH = 71, ATK_ROLE_RULER = 72, ATK_ROLE_APPLICATION = 73, ATK_ROLE_AUTOCOMPLETE = 74, ATK_ROLE_EDITBAR = 75, ATK_ROLE_EMBEDDED = 76, ATK_ROLE_ENTRY = 77, ATK_ROLE_CHART = 78, ATK_ROLE_CAPTION = 79, ATK_ROLE_DOCUMENT_FRAME = 80, ATK_ROLE_HEADING = 81, ATK_ROLE_PAGE = 82, ATK_ROLE_SECTION = 83, ATK_ROLE_REDUNDANT_OBJECT = 84, ATK_ROLE_FORM = 85, ATK_ROLE_LINK = 86, ATK_ROLE_INPUT_METHOD_WINDOW = 87, ATK_ROLE_LAST_DEFINED = 88, };
typedef enum  { ATK_ROLE_INVALID = 0, ATK_ROLE_ACCEL_LABEL = 1, ATK_ROLE_ALERT = 2, ATK_ROLE_ANIMATION = 3, ATK_ROLE_ARROW = 4, ATK_ROLE_CALENDAR = 5, ATK_ROLE_CANVAS = 6, ATK_ROLE_CHECK_BOX = 7, ATK_ROLE_CHECK_MENU_ITEM = 8, ATK_ROLE_COLOR_CHOOSER = 9, ATK_ROLE_COLUMN_HEADER = 10, ATK_ROLE_COMBO_BOX = 11, ATK_ROLE_DATE_EDITOR = 12, ATK_ROLE_DESKTOP_ICON = 13, ATK_ROLE_DESKTOP_FRAME = 14, ATK_ROLE_DIAL = 15, ATK_ROLE_DIALOG = 16, ATK_ROLE_DIRECTORY_PANE = 17, ATK_ROLE_DRAWING_AREA = 18, ATK_ROLE_FILE_CHOOSER = 19, ATK_ROLE_FILLER = 20, ATK_ROLE_FONT_CHOOSER = 21, ATK_ROLE_FRAME = 22, ATK_ROLE_GLASS_PANE = 23, ATK_ROLE_HTML_CONTAINER = 24, ATK_ROLE_ICON = 25, ATK_ROLE_IMAGE = 26, ATK_ROLE_INTERNAL_FRAME = 27, ATK_ROLE_LABEL = 28, ATK_ROLE_LAYERED_PANE = 29, ATK_ROLE_LIST = 30, ATK_ROLE_LIST_ITEM = 31, ATK_ROLE_MENU = 32, ATK_ROLE_MENU_BAR = 33, ATK_ROLE_MENU_ITEM = 34, ATK_ROLE_OPTION_PANE = 35, ATK_ROLE_PAGE_TAB = 36, ATK_ROLE_PAGE_TAB_LIST = 37, ATK_ROLE_PANEL = 38, ATK_ROLE_PASSWORD_TEXT = 39, ATK_ROLE_POPUP_MENU = 40, ATK_ROLE_PROGRESS_BAR = 41, ATK_ROLE_PUSH_BUTTON = 42, ATK_ROLE_RADIO_BUTTON = 43, ATK_ROLE_RADIO_MENU_ITEM = 44, ATK_ROLE_ROOT_PANE = 45, ATK_ROLE_ROW_HEADER = 46, ATK_ROLE_SCROLL_BAR = 47, ATK_ROLE_SCROLL_PANE = 48, ATK_ROLE_SEPARATOR = 49, ATK_ROLE_SLIDER = 50, ATK_ROLE_SPLIT_PANE = 51, ATK_ROLE_SPIN_BUTTON = 52, ATK_ROLE_STATUSBAR = 53, ATK_ROLE_TABLE = 54, ATK_ROLE_TABLE_CELL = 55, ATK_ROLE_TABLE_COLUMN_HEADER = 56, ATK_ROLE_TABLE_ROW_HEADER = 57, ATK_ROLE_TEAR_OFF_MENU_ITEM = 58, ATK_ROLE_TERMINAL = 59, ATK_ROLE_TEXT = 60, ATK_ROLE_TOGGLE_BUTTON = 61, ATK_ROLE_TOOL_BAR = 62, ATK_ROLE_TOOL_TIP = 63, ATK_ROLE_TREE = 64, ATK_ROLE_TREE_TABLE = 65, ATK_ROLE_UNKNOWN = 66, ATK_ROLE_VIEWPORT = 67, ATK_ROLE_WINDOW = 68, ATK_ROLE_HEADER = 69, ATK_ROLE_FOOTER = 70, ATK_ROLE_PARAGRAPH = 71, ATK_ROLE_RULER = 72, ATK_ROLE_APPLICATION = 73, ATK_ROLE_AUTOCOMPLETE = 74, ATK_ROLE_EDITBAR = 75, ATK_ROLE_EMBEDDED = 76, ATK_ROLE_ENTRY = 77, ATK_ROLE_CHART = 78, ATK_ROLE_CAPTION = 79, ATK_ROLE_DOCUMENT_FRAME = 80, ATK_ROLE_HEADING = 81, ATK_ROLE_PAGE = 82, ATK_ROLE_SECTION = 83, ATK_ROLE_REDUNDANT_OBJECT = 84, ATK_ROLE_FORM = 85, ATK_ROLE_LINK = 86, ATK_ROLE_INPUT_METHOD_WINDOW = 87, ATK_ROLE_LAST_DEFINED = 88, } AtkRole;
typedef struct _AtkRelationSet AtkRelationSet;
typedef struct _GPtrArray GPtrArray;
struct _GPtrArray {
     gpointer *pdata;
     guint len;
  } ;
struct _AtkRelationSet {
     GObject parent;
     GPtrArray *relations;
  } ;
enum  { ATK_LAYER_INVALID = 0, ATK_LAYER_BACKGROUND = 1, ATK_LAYER_CANVAS = 2, ATK_LAYER_WIDGET = 3, ATK_LAYER_MDI = 4, ATK_LAYER_POPUP = 5, ATK_LAYER_OVERLAY = 6, ATK_LAYER_WINDOW = 7, };
typedef enum  { ATK_LAYER_INVALID = 0, ATK_LAYER_BACKGROUND = 1, ATK_LAYER_CANVAS = 2, ATK_LAYER_WIDGET = 3, ATK_LAYER_MDI = 4, ATK_LAYER_POPUP = 5, ATK_LAYER_OVERLAY = 6, ATK_LAYER_WINDOW = 7, } AtkLayer;
struct _AtkObject {
     GObject parent;
     gchar *description;
     gchar *name;
     AtkObject *accessible_parent;
     AtkRole role;
     AtkRelationSet *relation_set;
     AtkLayer layer;
  } ;
typedef struct _GtkTooltip GtkTooltip;
struct _GtkTooltip  ;
struct _GtkWidgetClass {
     GtkObjectClass parent_class;
     guint activate_signal;
     guint set_scroll_adjustments_signal;
     void (*dispatch_child_properties_changed)( GtkWidget *, guint , GParamSpec ** );
     void (*show)( GtkWidget * );
     void (*show_all)( GtkWidget * );
     void (*hide)( GtkWidget * );
     void (*hide_all)( GtkWidget * );
     void (*map)( GtkWidget * );
     void (*unmap)( GtkWidget * );
     void (*realize)( GtkWidget * );
     void (*unrealize)( GtkWidget * );
     void (*size_request)( GtkWidget *, GtkRequisition * );
     void (*size_allocate)( GtkWidget *, GtkAllocation * );
     void (*state_changed)( GtkWidget *, GtkStateType  );
     void (*parent_set)( GtkWidget *, GtkWidget * );
     void (*hierarchy_changed)( GtkWidget *, GtkWidget * );
     void (*style_set)( GtkWidget *, GtkStyle * );
     void (*direction_changed)( GtkWidget *, GtkTextDirection  );
     void (*grab_notify)( GtkWidget *, gboolean  );
     void (*child_notify)( GtkWidget *, GParamSpec * );
     gboolean (*mnemonic_activate)( GtkWidget *, gboolean  );
     void (*grab_focus)( GtkWidget * );
     gboolean (*focus)( GtkWidget *, GtkDirectionType  );
     gboolean (*event)( GtkWidget *, GdkEvent * );
     gboolean (*button_press_event)( GtkWidget *, GdkEventButton * );
     gboolean (*button_release_event)( GtkWidget *, GdkEventButton * );
     gboolean (*scroll_event)( GtkWidget *, GdkEventScroll * );
     gboolean (*motion_notify_event)( GtkWidget *, GdkEventMotion * );
     gboolean (*delete_event)( GtkWidget *, GdkEventAny * );
     gboolean (*destroy_event)( GtkWidget *, GdkEventAny * );
     gboolean (*expose_event)( GtkWidget *, GdkEventExpose * );
     gboolean (*key_press_event)( GtkWidget *, GdkEventKey * );
     gboolean (*key_release_event)( GtkWidget *, GdkEventKey * );
     gboolean (*enter_notify_event)( GtkWidget *, GdkEventCrossing * );
     gboolean (*leave_notify_event)( GtkWidget *, GdkEventCrossing * );
     gboolean (*configure_event)( GtkWidget *, GdkEventConfigure * );
     gboolean (*focus_in_event)( GtkWidget *, GdkEventFocus * );
     gboolean (*focus_out_event)( GtkWidget *, GdkEventFocus * );
     gboolean (*map_event)( GtkWidget *, GdkEventAny * );
     gboolean (*unmap_event)( GtkWidget *, GdkEventAny * );
     gboolean (*property_notify_event)( GtkWidget *, GdkEventProperty * );
     gboolean (*selection_clear_event)( GtkWidget *, GdkEventSelection * );
     gboolean (*selection_request_event)( GtkWidget *, GdkEventSelection * );
     gboolean (*selection_notify_event)( GtkWidget *, GdkEventSelection * );
     gboolean (*proximity_in_event)( GtkWidget *, GdkEventProximity * );
     gboolean (*proximity_out_event)( GtkWidget *, GdkEventProximity * );
     gboolean (*visibility_notify_event)( GtkWidget *, GdkEventVisibility * );
     gboolean (*client_event)( GtkWidget *, GdkEventClient * );
     gboolean (*no_expose_event)( GtkWidget *, GdkEventAny * );
     gboolean (*window_state_event)( GtkWidget *, GdkEventWindowState * );
     void (*selection_get)( GtkWidget *, GtkSelectionData *, guint , guint  );
     void (*selection_received)( GtkWidget *, GtkSelectionData *, guint  );
     void (*drag_begin)( GtkWidget *, GdkDragContext * );
     void (*drag_end)( GtkWidget *, GdkDragContext * );
     void (*drag_data_get)( GtkWidget *, GdkDragContext *, GtkSelectionData *, guint , guint  );
     void (*drag_data_delete)( GtkWidget *, GdkDragContext * );
     void (*drag_leave)( GtkWidget *, GdkDragContext *, guint  );
     gboolean (*drag_motion)( GtkWidget *, GdkDragContext *, gint , gint , guint  );
     gboolean (*drag_drop)( GtkWidget *, GdkDragContext *, gint , gint , guint  );
     void (*drag_data_received)( GtkWidget *, GdkDragContext *, gint , gint , GtkSelectionData *, guint , guint  );
     gboolean (*popup_menu)( GtkWidget * );
     gboolean (*show_help)( GtkWidget *, GtkWidgetHelpType  );
     AtkObject *(*get_accessible)( GtkWidget * );
     void (*screen_changed)( GtkWidget *, GdkScreen * );
     gboolean (*can_activate_accel)( GtkWidget *, guint  );
     gboolean (*grab_broken_event)( GtkWidget *, GdkEventGrabBroken * );
     void (*composited_changed)( GtkWidget * );
     gboolean (*query_tooltip)( GtkWidget *, gint , gint , gboolean , GtkTooltip * );
     void (*_gtk_reserved5)( void );
     void (*_gtk_reserved6)( void );
     void (*_gtk_reserved7)( void );
  } ;
struct _GtkDrawingAreaClass {
     GtkWidgetClass parent_class;
     void (*_gtk_reserved1)( void );
     void (*_gtk_reserved2)( void );
     void (*_gtk_reserved3)( void );
     void (*_gtk_reserved4)( void );
  } ;
struct _GhidPinoutPreviewClass {
     GtkDrawingAreaClass parent_class;
  } ;
typedef struct _GhidPinoutPreview GhidPinoutPreview;
typedef struct _GtkDrawingArea GtkDrawingArea;
struct _GtkDrawingArea {
     GtkWidget widget;
     gpointer draw_data;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     BDimension Mask;
     BDimension DrillingHole;
     LocationType X;
     LocationType Y;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     BDimension Mask;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } ;
struct _GhidPinoutPreview {
     GtkDrawingArea parent_instance;
     ElementType element;
     gfloat zoom;
     gfloat scale;
     gint x_max;
     gint y_max;
     gint w_pixels;
     gint h_pixels;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     BDimension Mask;
     BDimension DrillingHole;
     LocationType X;
     LocationType Y;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     BDimension Mask;
     char *Name;
     char *Number;
     void *Element;
     void *Spare;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     PointType Point1;
     PointType Point2;
     char *Number;
  } ;
struct {
     BoxType BoundingBox;
     long ID;
     FlagType Flags;
     struct LibraryEntryType *net;
     BDimension Thickness;
     BDimension Clearance;
     LocationType Width;
     LocationType Height;
     LocationType X;
     LocationType Y;
     long StartAngle;
     long Delta;
  } ;
typedef struct _GObjectClass GObjectClass;
enum  { G_PARAM_READABLE = 1, G_PARAM_WRITABLE = 2, G_PARAM_CONSTRUCT = 4, G_PARAM_CONSTRUCT_ONLY = 8, G_PARAM_LAX_VALIDATION = 16, G_PARAM_STATIC_NAME = 32, G_PARAM_PRIVATE = 32, G_PARAM_STATIC_NICK = 64, G_PARAM_STATIC_BLURB = 128, G_PARAM_DEPRECATED = -2147483648, };
typedef struct _GdkDrawable GdkDrawable;
typedef struct {
     hidGC bgGC;
     hidGC fgGC;
     hidGC pmGC;
     hidGC GridGC;
     int Width;
     int Height;
     int oldObjState;
     int oldLineState;
     int oldBoxState;
  } OutputType;
typedef struct {
     Boolean grid_units_mm;
     int verbose;
     char *BlackColor;
     char *WhiteColor;
     char *BackgroundColor;
     char *CrosshairColor;
     char *CrossColor;
     char *ViaColor;
     char *ViaSelectedColor;
     char *PinColor;
     char *PinSelectedColor;
     char *PinNameColor;
     char *ElementColor;
     char *RatColor;
     char *InvisibleObjectsColor;
     char *InvisibleMarkColor;
     char *ElementSelectedColor;
     char *RatSelectedColor;
     char *ConnectedColor;
     char *OffLimitColor;
     char *GridColor;
     char *LayerColor[16];
     char *LayerSelectedColor[16];
     char *WarnColor;
     char *MaskColor;
     int ViaThickness;
     int ViaDrillingHole;
     int LineThickness;
     int RatThickness;
     int Keepaway;
     int MaxWidth;
     int MaxHeight;
     int TextScale;
     int AlignmentDistance;
     int Bloat;
     int Shrink;
     int minWid;
     int minSlk;
     int minDrill;
     int minRing;
     double Grid;
     double IsleArea;
     double grid_increment_mm;
     double grid_increment_mil;
     double size_increment_mm;
     double size_increment_mil;
     double line_increment_mm;
     double line_increment_mil;
     double clear_increment_mm;
     double clear_increment_mil;
     double Zoom;
     double PinoutZoom;
     int PinoutNameLength;
     int Volume;
     int CharPerLine;
     int Mode;
     int BufferNumber;
     int GridFactor;
     int BackupInterval;
     char *DefaultLayerName[16];
     char *FontCommand;
     char *FileCommand;
     char *ElementCommand;
     char *PrintFile;
     char *LibraryCommandDir;
     char *LibraryCommand;
     char *LibraryContentsCommand;
     char *LibraryTree;
     char *SaveCommand;
     char *LibraryFilename;
     char *FontFile;
     char *Groups;
     char *Routes;
     char *FilePath;
     char *RatPath;
     char *RatCommand;
     char *FontPath;
     char *PinoutFont;
     char *ElementPath;
     char *LibraryPath;
     char *Size;
     char *Media;
     char *MenuFile;
     char *BackgroundImage;
     char *ScriptFilename;
     char *ActionString;
     char *FabAuthor;
     char *InitialLayerStack;
     Boolean DumpMenuFile;
     LocationType PinoutOffsetX;
     LocationType PinoutOffsetY;
     int PinoutTextOffsetX;
     int PinoutTextOffsetY;
     RouteStyleType RouteStyle[4];
     LayerGroupType LayerGroups;
     Boolean ClearLine;
     Boolean FullPoly;
     Boolean UniqueNames;
     Boolean SnapPin;
     Boolean ShowSolderSide;
     Boolean SaveLastCommand;
     Boolean SaveInTMP;
     Boolean DrawGrid;
     Boolean RatWarn;
     Boolean StipplePolygons;
     Boolean AllDirectionLines;
     Boolean RubberBandMode;
     Boolean SwapStartDirection;
     Boolean ShowDRC;
     Boolean AutoDRC;
     Boolean ShowNumber;
     Boolean OrthogonalMoves;
     Boolean ResetAfterElement;
     Boolean liveRouting;
     Boolean RingBellWhenFinished;
     Boolean AutoPlace;
     int HistorySize;
     int init_done;
  } SettingType;
typedef struct _GTypeInfo GTypeInfo;
typedef void (*GBaseInitFunc)( gpointer  );
typedef void (*GBaseFinalizeFunc)( gpointer  );
typedef void (*GClassInitFunc)( gpointer , gpointer  );
typedef void (*GClassFinalizeFunc)( gpointer , gpointer  );
typedef void *gconstpointer;
typedef void (*GInstanceInitFunc)( GTypeInstance *, gpointer  );
typedef struct _GTypeValueTable GTypeValueTable;
typedef union _GTypeCValue GTypeCValue;
union _GTypeCValue  ;
struct _GTypeValueTable {
     void (*value_init)( GValue * );
     void (*value_free)( GValue * );
     void (*value_copy)( GValue *, GValue * );
     gpointer (*value_peek_pointer)( GValue * );
     gchar *collect_format;
     gchar *(*collect_value)( GValue *, guint , GTypeCValue *, guint  );
     gchar *lcopy_format;
     gchar *(*lcopy_value)( GValue *, guint , GTypeCValue *, guint  );
  } ;
struct _GTypeInfo {
     guint16 class_size;
     GBaseInitFunc base_init;
     GBaseFinalizeFunc base_finalize;
     GClassInitFunc class_init;
     GClassFinalizeFunc class_finalize;
     gconstpointer class_data;
     guint16 instance_size;
     guint16 n_preallocs;
     GInstanceInitFunc instance_init;
     GTypeValueTable *value_table;
  } ;
enum  { Trace_Cap = 0, Square_Cap = 1, Round_Cap = 2, Beveled_Cap = 3, };
struct hid_gc_struct {
     HID *me_pointer;
     GdkGC *gc;
     gchar *colorname;
     gint width;
     gint cap;
     gint join;
     gchar xor;
     gchar erase;
     gint mask_seq;
  } ;
enum  { Trace_Cap = 0, Square_Cap = 1, Round_Cap = 2, Beveled_Cap = 3, };
typedef struct _GdkCursor GdkCursor;
enum  { GDK_X_CURSOR = 0, GDK_ARROW = 2, GDK_BASED_ARROW_DOWN = 4, GDK_BASED_ARROW_UP = 6, GDK_BOAT = 8, GDK_BOGOSITY = 10, GDK_BOTTOM_LEFT_CORNER = 12, GDK_BOTTOM_RIGHT_CORNER = 14, GDK_BOTTOM_SIDE = 16, GDK_BOTTOM_TEE = 18, GDK_BOX_SPIRAL = 20, GDK_CENTER_PTR = 22, GDK_CIRCLE = 24, GDK_CLOCK = 26, GDK_COFFEE_MUG = 28, GDK_CROSS = 30, GDK_CROSS_REVERSE = 32, GDK_CROSSHAIR = 34, GDK_DIAMOND_CROSS = 36, GDK_DOT = 38, GDK_DOTBOX = 40, GDK_DOUBLE_ARROW = 42, GDK_DRAFT_LARGE = 44, GDK_DRAFT_SMALL = 46, GDK_DRAPED_BOX = 48, GDK_EXCHANGE = 50, GDK_FLEUR = 52, GDK_GOBBLER = 54, GDK_GUMBY = 56, GDK_HAND1 = 58, GDK_HAND2 = 60, GDK_HEART = 62, GDK_ICON = 64, GDK_IRON_CROSS = 66, GDK_LEFT_PTR = 68, GDK_LEFT_SIDE = 70, GDK_LEFT_TEE = 72, GDK_LEFTBUTTON = 74, GDK_LL_ANGLE = 76, GDK_LR_ANGLE = 78, GDK_MAN = 80, GDK_MIDDLEBUTTON = 82, GDK_MOUSE = 84, GDK_PENCIL = 86, GDK_PIRATE = 88, GDK_PLUS = 90, GDK_QUESTION_ARROW = 92, GDK_RIGHT_PTR = 94, GDK_RIGHT_SIDE = 96, GDK_RIGHT_TEE = 98, GDK_RIGHTBUTTON = 100, GDK_RTL_LOGO = 102, GDK_SAILBOAT = 104, GDK_SB_DOWN_ARROW = 106, GDK_SB_H_DOUBLE_ARROW = 108, GDK_SB_LEFT_ARROW = 110, GDK_SB_RIGHT_ARROW = 112, GDK_SB_UP_ARROW = 114, GDK_SB_V_DOUBLE_ARROW = 116, GDK_SHUTTLE = 118, GDK_SIZING = 120, GDK_SPIDER = 122, GDK_SPRAYCAN = 124, GDK_STAR = 126, GDK_TARGET = 128, GDK_TCROSS = 130, GDK_TOP_LEFT_ARROW = 132, GDK_TOP_LEFT_CORNER = 134, GDK_TOP_RIGHT_CORNER = 136, GDK_TOP_SIDE = 138, GDK_TOP_TEE = 140, GDK_TREK = 142, GDK_UL_ANGLE = 144, GDK_UMBRELLA = 146, GDK_UR_ANGLE = 148, GDK_WATCH = 150, GDK_XTERM = 152, GDK_LAST_CURSOR = 153, GDK_BLANK_CURSOR = -2, GDK_CURSOR_IS_PIXMAP = -1, };
typedef enum  { GDK_X_CURSOR = 0, GDK_ARROW = 2, GDK_BASED_ARROW_DOWN = 4, GDK_BASED_ARROW_UP = 6, GDK_BOAT = 8, GDK_BOGOSITY = 10, GDK_BOTTOM_LEFT_CORNER = 12, GDK_BOTTOM_RIGHT_CORNER = 14, GDK_BOTTOM_SIDE = 16, GDK_BOTTOM_TEE = 18, GDK_BOX_SPIRAL = 20, GDK_CENTER_PTR = 22, GDK_CIRCLE = 24, GDK_CLOCK = 26, GDK_COFFEE_MUG = 28, GDK_CROSS = 30, GDK_CROSS_REVERSE = 32, GDK_CROSSHAIR = 34, GDK_DIAMOND_CROSS = 36, GDK_DOT = 38, GDK_DOTBOX = 40, GDK_DOUBLE_ARROW = 42, GDK_DRAFT_LARGE = 44, GDK_DRAFT_SMALL = 46, GDK_DRAPED_BOX = 48, GDK_EXCHANGE = 50, GDK_FLEUR = 52, GDK_GOBBLER = 54, GDK_GUMBY = 56, GDK_HAND1 = 58, GDK_HAND2 = 60, GDK_HEART = 62, GDK_ICON = 64, GDK_IRON_CROSS = 66, GDK_LEFT_PTR = 68, GDK_LEFT_SIDE = 70, GDK_LEFT_TEE = 72, GDK_LEFTBUTTON = 74, GDK_LL_ANGLE = 76, GDK_LR_ANGLE = 78, GDK_MAN = 80, GDK_MIDDLEBUTTON = 82, GDK_MOUSE = 84, GDK_PENCIL = 86, GDK_PIRATE = 88, GDK_PLUS = 90, GDK_QUESTION_ARROW = 92, GDK_RIGHT_PTR = 94, GDK_RIGHT_SIDE = 96, GDK_RIGHT_TEE = 98, GDK_RIGHTBUTTON = 100, GDK_RTL_LOGO = 102, GDK_SAILBOAT = 104, GDK_SB_DOWN_ARROW = 106, GDK_SB_H_DOUBLE_ARROW = 108, GDK_SB_LEFT_ARROW = 110, GDK_SB_RIGHT_ARROW = 112, GDK_SB_UP_ARROW = 114, GDK_SB_V_DOUBLE_ARROW = 116, GDK_SHUTTLE = 118, GDK_SIZING = 120, GDK_SPIDER = 122, GDK_SPRAYCAN = 124, GDK_STAR = 126, GDK_TARGET = 128, GDK_TCROSS = 130, GDK_TOP_LEFT_ARROW = 132, GDK_TOP_LEFT_CORNER = 134, GDK_TOP_RIGHT_CORNER = 136, GDK_TOP_SIDE = 138, GDK_TOP_TEE = 140, GDK_TREK = 142, GDK_UL_ANGLE = 144, GDK_UMBRELLA = 146, GDK_UR_ANGLE = 148, GDK_WATCH = 150, GDK_XTERM = 152, GDK_LAST_CURSOR = 153, GDK_BLANK_CURSOR = -2, GDK_CURSOR_IS_PIXMAP = -1, } GdkCursorType;
struct _GdkCursor {
     GdkCursorType type;
     guint ref_count;
  } ;
enum  { GDK_X_CURSOR = 0, GDK_ARROW = 2, GDK_BASED_ARROW_DOWN = 4, GDK_BASED_ARROW_UP = 6, GDK_BOAT = 8, GDK_BOGOSITY = 10, GDK_BOTTOM_LEFT_CORNER = 12, GDK_BOTTOM_RIGHT_CORNER = 14, GDK_BOTTOM_SIDE = 16, GDK_BOTTOM_TEE = 18, GDK_BOX_SPIRAL = 20, GDK_CENTER_PTR = 22, GDK_CIRCLE = 24, GDK_CLOCK = 26, GDK_COFFEE_MUG = 28, GDK_CROSS = 30, GDK_CROSS_REVERSE = 32, GDK_CROSSHAIR = 34, GDK_DIAMOND_CROSS = 36, GDK_DOT = 38, GDK_DOTBOX = 40, GDK_DOUBLE_ARROW = 42, GDK_DRAFT_LARGE = 44, GDK_DRAFT_SMALL = 46, GDK_DRAPED_BOX = 48, GDK_EXCHANGE = 50, GDK_FLEUR = 52, GDK_GOBBLER = 54, GDK_GUMBY = 56, GDK_HAND1 = 58, GDK_HAND2 = 60, GDK_HEART = 62, GDK_ICON = 64, GDK_IRON_CROSS = 66, GDK_LEFT_PTR = 68, GDK_LEFT_SIDE = 70, GDK_LEFT_TEE = 72, GDK_LEFTBUTTON = 74, GDK_LL_ANGLE = 76, GDK_LR_ANGLE = 78, GDK_MAN = 80, GDK_MIDDLEBUTTON = 82, GDK_MOUSE = 84, GDK_PENCIL = 86, GDK_PIRATE = 88, GDK_PLUS = 90, GDK_QUESTION_ARROW = 92, GDK_RIGHT_PTR = 94, GDK_RIGHT_SIDE = 96, GDK_RIGHT_TEE = 98, GDK_RIGHTBUTTON = 100, GDK_RTL_LOGO = 102, GDK_SAILBOAT = 104, GDK_SB_DOWN_ARROW = 106, GDK_SB_H_DOUBLE_ARROW = 108, GDK_SB_LEFT_ARROW = 110, GDK_SB_RIGHT_ARROW = 112, GDK_SB_UP_ARROW = 114, GDK_SB_V_DOUBLE_ARROW = 116, GDK_SHUTTLE = 118, GDK_SIZING = 120, GDK_SPIDER = 122, GDK_SPRAYCAN = 124, GDK_STAR = 126, GDK_TARGET = 128, GDK_TCROSS = 130, GDK_TOP_LEFT_ARROW = 132, GDK_TOP_LEFT_CORNER = 134, GDK_TOP_RIGHT_CORNER = 136, GDK_TOP_SIDE = 138, GDK_TOP_TEE = 140, GDK_TREK = 142, GDK_UL_ANGLE = 144, GDK_UMBRELLA = 146, GDK_UR_ANGLE = 148, GDK_WATCH = 150, GDK_XTERM = 152, GDK_LAST_CURSOR = 153, GDK_BLANK_CURSOR = -2, GDK_CURSOR_IS_PIXMAP = -1, };
typedef struct {
     GtkWidget *top_window;
     GtkWidget *drawing_area;
     GdkPixmap *pixmap;
     GdkPixmap *mask;
     GdkDrawable *drawable;
     gint width;
     gint height;
     GdkGC *bg_gc;
     GdkGC *offlimits_gc;
     GdkGC *mask_gc;
     GdkGC *u_gc;
     GdkGC *grid_gc;
     GdkColor bg_color;
     GdkColor offlimits_color;
     GdkColor grid_color;
     GdkColormap *colormap;
     GdkCursor *X_cursor;
     GdkCursorType X_cursor_shape;
     gboolean has_entered;
     gboolean panning;
     gdouble zoom;
     gint view_x0;
     gint view_y0;
     gint view_width;
     gint view_height;
     gint view_x;
     gint view_y;
     gint x_crosshair;
     gint y_crosshair;
  } GHidPort;
/*****************************************************************************************/
/******                                                                             ******/
/******                          Function Prototypes                                ******/
/******                                                                             ******/
/*****************************************************************************************/
ElementTypePtr CopyElementLowLevel( DataTypePtr , ElementTypePtr , ElementTypePtr , Boolean , LocationType , LocationType  );
void hid_expose_callback( HID *, BoxType *, void * );
void MoveElementLowLevel( DataTypePtr , ElementTypePtr , LocationType , LocationType  );
void FreeElementMemory( ElementTypePtr  );
GType ghid_pinout_preview_get_type( void );
GtkWidget *ghid_pinout_preview_new( ElementType * );
void ghid_pinout_preview_class_init( GhidPinoutPreviewClass * );
gboolean ghid_pinout_preview_expose( GtkWidget *, GdkEventExpose * );
void ghid_pinout_preview_get_property( GObject *, guint , GValue *, GParamSpec * );
gboolean pinout_zoom_fit( GhidPinoutPreview *, gint  );
void pinout_set_data( GhidPinoutPreview *, ElementType * );
void ghid_pinout_preview_set_property( GObject *, guint , GValue *, GParamSpec * );
void ghid_pinout_preview_finalize( GObject * );
void gdk_window_invalidate_rect( GdkWindow *, GdkRectangle *, gboolean  );
GType gtk_widget_get_type( void );
void g_object_class_install_property( GObjectClass *, guint , GParamSpec * );
double exp( double  );
gpointer g_object_new( GType , gchar *, ... );
GTypeClass *g_type_check_class_cast( GTypeClass *, GType  );
GParamSpec *g_param_spec_pointer( gchar *, gchar *, gchar *, GParamFlags  );
void gdk_draw_rectangle( GdkDrawable *, GdkGC *, gboolean , gint , gint , gint , gint  );
void gdk_window_get_geometry( GdkWindow *, gint *, gint *, gint *, gint *, gint * );
GType g_type_register_static( GType , gchar *, void *, void * );
gpointer g_value_get_pointer( GValue * );
GType gtk_object_get_type( void );
gchar *g_type_name( GType  );
GTypeInstance *g_type_check_instance_cast( GTypeInstance *, GType  );
gpointer g_type_class_peek_parent( gpointer  );
void g_log( gchar *, void *, gchar *, ... );
GType gtk_drawing_area_get_type( void );
/*****************************************************************************************/
/******                                                                             ******/
/******                        Forward Var Declarations                             ******/
/******                                                                             ******/
/*****************************************************************************************/
extern OutputType Output;
extern SettingType Settings;
extern HID ghid_hid;
extern GHidPort *gport;
/*****************************************************************************************/
/******                                                                             ******/
/******                      Inline Function Definitions                            ******/
/******                                                                             ******/
/*****************************************************************************************/
