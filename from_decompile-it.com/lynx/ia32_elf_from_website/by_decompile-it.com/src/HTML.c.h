#define __MOD(a,b) a % b
/*****************************************************************************************/
/******                                                                             ******/
/******                            Structure Definitions                            ******/
/******                                                                             ******/
/*****************************************************************************************/
typedef struct _HTParentAnchor HTParentAnchor;
typedef struct _HTParentAnchor0 HTParentAnchor0;
typedef struct _HTBTree_top HTBTree;
typedef int (*HTComparer)( void *, void * );
struct _HTBTree_element {
     void *object;
     struct _HTBTree_element *up;
     struct _HTBTree_element *left;
     int left_depth;
     struct _HTBTree_element *right;
     int right_depth;
  } ;
struct _HTBTree_top {
     HTComparer compare;
     struct _HTBTree_element *top;
  } ;
typedef struct _HTList HTList;
struct _HTList {
     void *object;
     HTList *next;
  } ;
typedef char BOOLEAN;
struct _HTParentAnchor0 {
     HTParentAnchor0 *parent;
     char *address;
     HTParentAnchor *info;
     HTBTree *children;
     HTList sources;
     HTList _add_adult;
     short adult_hash;
     BOOLEAN underway;
     char __pad[1];
  } ;
typedef struct _HyperDoc HyperDoc;
struct _HyperDoc  ;
typedef struct {
     char *str;
     int len;
  } bstring;
typedef struct _HTAtom HTAtom;
struct _HTAtom {
     HTAtom *next;
     char *name;
  } ;
typedef HTAtom *HTFormat;
typedef struct _HTChunk HTChunk;
struct _HTChunk {
     int size;
     int growby;
     int allocated;
     char *data;
     int failok;
     HTChunk *next;
  } ;
typedef struct _UCAnchorInfo UCAnchorInfo;
typedef struct _LYUCcharset LYUCcharset;
struct _LYUCcharset {
     int UChndl;
     char *MIMEname;
     int enc;
     int codepage;
     int repertoire;
     int codepoints;
     int cpranges;
     int like8859;
  } ;
struct _UCStageInfo {
     int lock;
     int LYhndl;
     LYUCcharset C;
  } ;
struct _UCAnchorInfo {
     struct _UCStageInfo  s[4];
  } ;
struct _HTParentAnchor {
     HTParentAnchor0 *parent;
     HTList children_notag;
     HyperDoc *document;
     char *address;
     bstring *post_data;
     char *post_content_type;
     char *bookmark;
     HTFormat format;
     char *charset;
     BOOLEAN isIndex;
     char *isIndexAction;
     char *isIndexPrompt;
     char *title;
     char *owner;
     char *RevTitle;
     char *citehost;
     char *style;
     HTList *methods;
     void *protocol;
     char *physical;
     BOOLEAN isISMAPScript;
     BOOLEAN isHEAD;
     BOOLEAN safe;
     char *source_cache_file;
     HTChunk *source_cache_chunk;
     char *FileCache;
     char *SugFname;
     char *cache_control;
     BOOLEAN no_cache;
     BOOLEAN inBASE;
     char *content_type_params;
     char *content_type;
     char *content_language;
     char *content_encoding;
     char *content_base;
     char *content_disposition;
     char *content_location;
     char *content_md5;
     char *message_id;
     char *subject;
     int content_length;
     char *date;
     char *expires;
     char *last_modified;
     char *ETag;
     char *server;
     UCAnchorInfo *UCStages;
     HTList *imaps;
  } ;
typedef struct _HTStream HTStream;
typedef struct _HTStreamClass HTStreamClass;
typedef void *HTError;
struct _HTStreamClass {
     char *name;
     void (*_free)( HTStream * );
     void (*_abort)( HTStream *, HTError  );
     void (*put_character)( HTStream *, char  );
     void (*put_string)( HTStream *, char * );
     void (*put_block)( HTStream *, char *, int  );
  } ;
struct _HTStream {
     HTStreamClass *isa;
  } ;
typedef struct _HText HText;
typedef struct _line HTLine;
typedef struct {
     unsigned int bits_at_0;
  } HTStyleChange;
struct _line {
     struct _line *next;
     struct _line *prev;
     unsigned short offset;
     unsigned short size;
     HTStyleChange *styles;
     unsigned short numstyles;
     char data[1];
     char __pad[1];
  } ;
typedef struct {
     HTLine base;
     char data[1026];
     char __pad[2];
  } HTLineTemp;
typedef struct _TextAnchor TextAnchor;
typedef struct _FormInfo FormInfo;
typedef struct _OptionType OptionType;
struct _OptionType {
     char *name;
     char *cp_submit_value;
     int value_cs;
     struct _OptionType *next;
  } ;
struct _FormInfo {
     char *name;
     int number;
     int type;
     char *value;
     char *orig_value;
     int size;
     unsigned int maxlength;
     int group;
     int num_value;
     int hrange;
     int lrange;
     OptionType *select_list;
     char *submit_action;
     int submit_method;
     char *submit_enctype;
     char *submit_title;
     BOOLEAN no_cache;
     char *cp_submit_value;
     char *orig_submit_value;
     int size_l;
     int disabled;
     int name_cs;
     int value_cs;
     char *accept_cs;
  } ;
typedef struct {
     char *hl_text;
     short hl_x;
     char __pad[2];
  } HiliteInfo;
typedef struct {
     HiliteInfo *hl_info;
     HiliteInfo hl_base;
     short hl_len;
     char __pad[2];
  } HiliteList;
typedef struct _HTAnchor HTAnchor;
struct _HTAnchor {
     HTParentAnchor0 *parent;
  } ;
typedef HTAtom HTLinkType;
typedef struct {
     HTParentAnchor0 *parent;
     char *tag;
     HTAnchor *dest;
     HTLinkType *type;
     HTList _add_children_notag;
     HTList _add_sources;
  } HTChildAnchor;
struct _TextAnchor {
     struct _TextAnchor *next;
     struct _TextAnchor *prev;
     int sgml_offset;
     int number;
     int line_num;
     short line_pos;
     short extent;
     BOOLEAN show_anchor;
     BOOLEAN inUnderline;
     BOOLEAN expansion_anch;
     char link_type;
     FormInfo *input_field;
     HiliteList lites;
     HTChildAnchor *anchor;
  } ;
typedef struct _HTStyle HTStyle;
typedef long HTFont;
typedef int HTCoord;
typedef int HTColor;
typedef struct {
     short kind;
     HTCoord position;
  } HTTabStop;
struct _HTStyle {
     struct _HTStyle *next;
     char *name;
     int id;
     char *SGMLTag;
     HTFont font;
     HTCoord fontSize;
     HTColor color;
     int superscript;
     HTAnchor *anchor;
     HTCoord indent1st;
     HTCoord leftIndent;
     HTCoord rightIndent;
     short alignment;
     HTCoord lineHt;
     HTCoord descentLine;
     HTTabStop *tabs;
     BOOLEAN wordWrap;
     BOOLEAN freeFormat;
     HTCoord spaceBefore;
     HTCoord spaceAfter;
     int paraFlags;
  } ;
typedef struct _STable_info STable_info;
struct _STable_info  ;
typedef enum  { NOKANJI = 0, EUC = 1, SJIS = 2, JIS = 3, } HTkcode;
typedef enum  { DET_SJIS = 0, DET_EUC = 1, DET_NOTYET = 2, DET_MIXED = 3, } eDetectedKCode;
typedef enum  { SJIS_state_neutral = 0, SJIS_state_in_kanji = 1, SJIS_state_has_bad_code = 2, } eSJIS_status;
typedef enum  { EUC_state_neutral = 0, EUC_state_in_kanji = 1, EUC_state_in_kana = 2, EUC_state_has_bad_code = 3, } eEUC_status;
typedef enum  { S_text = 0, S_esc = 1, S_dollar = 2, S_paren = 3, S_nonascii_text = 4, S_dollar_paren = 5, S_jisx0201_text = 6, } eGridState;
typedef struct _UCTransParams UCTransParams;
struct _UCTransParams {
     BOOLEAN transp;
     BOOLEAN do_cjk;
     BOOLEAN decode_utf8;
     BOOLEAN output_utf8;
     BOOLEAN use_raw_char_in;
     BOOLEAN strip_raw_char_in;
     BOOLEAN pass_160_173_raw;
     BOOLEAN do_8bitraw;
     BOOLEAN trans_to_uni;
     BOOLEAN trans_C0_to_uni;
     BOOLEAN repl_translated_C0;
     BOOLEAN trans_from_uni;
  } ;
typedef struct _HTPool HTPool;
typedef HTStyleChange pool_data;
struct _HTPool {
     pool_data data[2042];
     struct _HTPool *prev;
     int used;
  } ;
struct _HText {
     HTParentAnchor *node_anchor;
     HTLine *last_line;
     HTLineTemp temp_line[2];
     int Lines;
     TextAnchor *first_anchor;
     TextAnchor *last_anchor;
     TextAnchor *last_anchor_before_stbl;
     TextAnchor *last_anchor_before_split;
     HTList *forms;
     int last_anchor_number;
     BOOLEAN source;
     BOOLEAN toolbar;
     HTList *tabs;
     HTList *hidden_links;
     int hiddenlinkflag;
     BOOLEAN no_cache;
     char LastChar;
     BOOLEAN IgnoreExcess;
     HTStyle *style;
     int display_on_the_fly;
     int top_of_screen;
     HTLine *top_of_screen_line;
     HTLine *next_line;
     unsigned int permissible_split;
     BOOLEAN in_line_1;
     BOOLEAN stale;
     BOOLEAN page_has_target;
     BOOLEAN has_utf8;
     BOOLEAN had_utf8;
     int first_lineno_last_disp_partial;
     int last_lineno_last_disp_partial;
     STable_info *stbl;
     HTList *enclosed_stbl;
     HTkcode kcode;
     HTkcode specified_kcode;
     eDetectedKCode detected_kcode;
     eSJIS_status SJIS_status;
     eEUC_status EUC_status;
     eGridState state;
     int kanji_buf;
     int in_sjis;
     int halted;
     BOOLEAN have_8bit_chars;
     LYUCcharset *UCI;
     int UCLYhndl;
     UCTransParams T;
     HTStream *target;
     HTStreamClass targetClass;
     HTPool *pool;
     BOOLEAN clickable_images;
     BOOLEAN pseudo_inline_alts;
     BOOLEAN verbose_img;
     BOOLEAN raw_mode;
     BOOLEAN historical_comments;
     BOOLEAN minimal_comments;
     BOOLEAN soft_dquotes;
     short old_dtd;
     short keypad_mode;
     short disp_lines;
     short disp_cols;
  } ;
typedef struct _InputFieldData InputFieldData;
struct _InputFieldData {
     char *accept;
     char *align;
     int checked;
     char *iclass;
     int disabled;
     char *error;
     char *height;
     char *id;
     char *lang;
     char *max;
     char *maxlength;
     char *md;
     char *min;
     char *name;
     int size;
     char *src;
     char *type;
     char *value;
     char *width;
     int name_cs;
     int value_cs;
     char *accept_cs;
  } ;
typedef struct _IO_FILE FILE;
struct _IO_marker {
     struct _IO_marker *_next;
     struct _IO_FILE *_sbuf;
     int _pos;
  } ;
typedef long __off_t;
typedef void _IO_lock_t;
typedef long long __quad_t;
typedef __quad_t __off64_t;
typedef unsigned int size_t;
struct _IO_FILE {
     int _flags;
     char *_IO_read_ptr;
     char *_IO_read_end;
     char *_IO_read_base;
     char *_IO_write_base;
     char *_IO_write_ptr;
     char *_IO_write_end;
     char *_IO_buf_base;
     char *_IO_buf_end;
     char *_IO_save_base;
     char *_IO_backup_base;
     char *_IO_save_end;
     struct _IO_marker *_markers;
     struct _IO_FILE *_chain;
     int _fileno;
     int _flags2;
     __off_t _old_offset;
     unsigned short _cur_column;
     char _vtable_offset;
     char _shortbuf[1];
     _IO_lock_t *_lock;
     __off64_t _offset;
     void *__pad1;
     void *__pad2;
     void *__pad3;
     void *__pad4;
     size_t __pad5;
     int _mode;
     char _unused2[40];
  } ;
typedef enum  { UIP_UNKNOWN = -1, UIP_HISTORY = 0, UIP_DOWNLOAD_OPTIONS = 1, UIP_PRINT_OPTIONS = 2, UIP_SHOWINFO = 3, UIP_LIST_PAGE = 4, UIP_VLINKS = 5, UIP_LYNXCFG = 6, UIP_OPTIONS_MENU = 7, UIP_DIRED_MENU = 8, UIP_PERMIT_OPTIONS = 9, UIP_UPLOAD_OPTIONS = 10, UIP_ADDRLIST_PAGE = 11, UIP_CONFIG_DEF = 12, UIP_TRACELOG = 13, UIP_INSTALL = 14, } UIP_t;
typedef struct _HTStructured HTStructured;
typedef struct _HTStructuredClass HTStructuredClass;
struct _HTStructuredClass {
     char *name;
     void (*_free)( HTStructured * );
     void (*_abort)( HTStructured *, HTError  );
     void (*put_character)( HTStructured *, char  );
     void (*put_string)( HTStructured *, char * );
     void (*put_block)( HTStructured *, char *, int  );
     int (*start_element)( HTStructured *, int , BOOLEAN *, char **, int , char ** );
     int (*end_element)( HTStructured *, int , char ** );
     int (*put_entity)( HTStructured *, int  );
  } ;
typedef struct _tag HTTag;
typedef struct {
     char *name;
     char type;
     char __pad[3];
  } attr;
typedef attr *AttrList;
typedef struct {
     char *name;
     AttrList list;
  } AttrType;
typedef enum  { SGML_EMPTY = 0, SGML_LITTERAL = 1, SGML_CDATA = 2, SGML_SCRIPT = 3, SGML_RCDATA = 4, SGML_MIXED = 5, SGML_ELEMENT = 6, SGML_PCDATA = 7, } SGMLContent;
typedef int TagClass;
typedef int TagFlags;
struct _tag {
     char *name;
     int name_len;
     BOOLEAN can_justify;
     AttrList attributes;
     int number_of_attributes;
     AttrType *attr_types;
     SGMLContent contents;
     TagClass tagclass;
     TagClass contains;
     TagClass icontains;
     TagClass contained;
     TagClass icontained;
     TagClass canclose;
     TagFlags flags;
  } ;
typedef struct _stack_element stack_element;
struct _stack_element {
     HTStyle *style;
     int tag_number;
  } ;
struct _HTStructured {
     HTStructuredClass *isa;
     HTParentAnchor *node_anchor;
     HText *text;
     HTStream *target;
     HTStreamClass targetClass;
     HTChildAnchor *CurrentA;
     int CurrentANum;
     char *base_href;
     char *map_address;
     HTChunk title;
     HTChunk object;
     BOOLEAN object_started;
     BOOLEAN object_declare;
     BOOLEAN object_shapes;
     BOOLEAN object_ismap;
     char *object_usemap;
     char *object_id;
     char *object_title;
     char *object_data;
     char *object_type;
     char *object_classid;
     char *object_codebase;
     char *object_codetype;
     char *object_name;
     int objects_mixed_open;
     int objects_figged_open;
     HTChunk option;
     BOOLEAN first_option;
     char *LastOptionValue;
     BOOLEAN LastOptionChecked;
     BOOLEAN select_disabled;
     HTChunk textarea;
     char *textarea_name;
     int textarea_name_cs;
     char *textarea_accept_cs;
     int textarea_cols;
     int textarea_rows;
     int textarea_disabled;
     char *textarea_id;
     HTChunk math;
     HTChunk style_block;
     HTChunk script;
     int List_Nesting_Level;
     int OL_Counter[12];
     char OL_Type[12];
     int Last_OL_Count;
     char Last_OL_Type;
     int Division_Level;
     short DivisionAlignments[800];
     int Underline_Level;
     int Quote_Level;
     BOOLEAN UsePlainSpace;
     BOOLEAN HiddenValue;
     int lastraw;
     char *comment_start;
     char *comment_end;
     HTTag *current_tag;
     BOOLEAN style_change;
     HTStyle *new_style;
     HTStyle *old_style;
     int current_default_alignment;
     BOOLEAN in_word;
     stack_element stack[800];
     stack_element *sp;
     BOOLEAN stack_overrun;
     int skip_stack;
     BOOLEAN inA;
     BOOLEAN inAPPLET;
     BOOLEAN inAPPLETwithP;
     BOOLEAN inBadBASE;
     BOOLEAN inBadHREF;
     BOOLEAN inBadHTML;
     BOOLEAN inBASE;
     BOOLEAN inBoldA;
     BOOLEAN inBoldH;
     BOOLEAN inCAPTION;
     BOOLEAN inCREDIT;
     BOOLEAN inFIG;
     BOOLEAN inFIGwithP;
     BOOLEAN inFONT;
     BOOLEAN inFORM;
     BOOLEAN inLABEL;
     BOOLEAN inP;
     BOOLEAN inPRE;
     BOOLEAN inSELECT;
     BOOLEAN inTABLE;
     BOOLEAN inTEXTAREA;
     BOOLEAN inUnderline;
     BOOLEAN needBoldH;
     char *xinclude;
     LYUCcharset *UCI;
     int UCLYhndl;
     LYUCcharset *inUCI;
     int inUCLYhndl;
     LYUCcharset *outUCI;
     int outUCLYhndl;
     UCTransParams T;
     int tag_charset;
  } ;
typedef enum  { HTL_comm = 0, HTL_tag = 1, HTL_attrib = 2, HTL_attrval = 3, HTL_abracket = 4, HTL_entity = 5, HTL_href = 6, HTL_entire = 7, HTL_badseq = 8, HTL_badtag = 9, HTL_badattr = 10, HTL_sgmlspecial = 11, HTL_num_lexemes = 12, } HTlexeme;
typedef struct _HTPresentation HTPresentation;
typedef HTStream *HTConverter( HTPresentation *, HTParentAnchor *, HTStream * );
typedef __off64_t off_t;
struct _HTPresentation {
     HTAtom *rep;
     HTAtom *rep_out;
     HTConverter *converter;
     char *command;
     char *testcommand;
     float quality;
     float secs;
     float secs_per_byte;
     off_t maxbytes;
     BOOLEAN get_accept;
     int accept_opt;
  } ;
typedef enum  { st_HTML = 0, st_URL = 1, st_other = 2, } CharUtil_st;
typedef struct {
     HTTag *tags;
     int number_of_tags;
     char **entity_names;
     size_t number_of_entities;
  } SGML_dtd;
typedef struct _HTStyleSheet HTStyleSheet;
struct _HTStyleSheet {
     char *name;
     HTStyle *styles;
  } ;
typedef struct _hashbucket bucket;
struct _hashbucket {
     char *name;
     int code;
     int color;
     int mono;
     int cattr;
     struct _hashbucket *next;
  } ;
typedef struct _HT_tagspec HT_tagspec;
typedef enum  { HTML_A = 0, HTML_ABBR = 1, HTML_ACRONYM = 2, HTML_ADDRESS = 3, HTML_APPLET = 4, HTML_AREA = 5, HTML_AU = 6, HTML_AUTHOR = 7, HTML_B = 8, HTML_BANNER = 9, HTML_BASE = 10, HTML_BASEFONT = 11, HTML_BDO = 12, HTML_BGSOUND = 13, HTML_BIG = 14, HTML_BLINK = 15, HTML_BLOCKQUOTE = 16, HTML_BODY = 17, HTML_BODYTEXT = 18, HTML_BQ = 19, HTML_BR = 20, HTML_BUTTON = 21, HTML_CAPTION = 22, HTML_CENTER = 23, HTML_CITE = 24, HTML_CODE = 25, HTML_COL = 26, HTML_COLGROUP = 27, HTML_COMMENT = 28, HTML_CREDIT = 29, HTML_DD = 30, HTML_DEL = 31, HTML_DFN = 32, HTML_DIR = 33, HTML_DIV = 34, HTML_DL = 35, HTML_DLC = 36, HTML_DT = 37, HTML_EM = 38, HTML_EMBED = 39, HTML_FIELDSET = 40, HTML_FIG = 41, HTML_FN = 42, HTML_FONT = 43, HTML_FORM = 44, HTML_FRAME = 45, HTML_FRAMESET = 46, HTML_H1 = 47, HTML_H2 = 48, HTML_H3 = 49, HTML_H4 = 50, HTML_H5 = 51, HTML_H6 = 52, HTML_HEAD = 53, HTML_HR = 54, HTML_HTML = 55, HTML_HY = 56, HTML_I = 57, HTML_IFRAME = 58, HTML_IMG = 59, HTML_INPUT = 60, HTML_INS = 61, HTML_ISINDEX = 62, HTML_KBD = 63, HTML_KEYGEN = 64, HTML_LABEL = 65, HTML_LEGEND = 66, HTML_LH = 67, HTML_LI = 68, HTML_LINK = 69, HTML_LISTING = 70, HTML_MAP = 71, HTML_MARQUEE = 72, HTML_MATH = 73, HTML_MENU = 74, HTML_META = 75, HTML_NEXTID = 76, HTML_NOFRAMES = 77, HTML_NOTE = 78, HTML_OBJECT = 79, HTML_OL = 80, HTML_OPTION = 81, HTML_OVERLAY = 82, HTML_P = 83, HTML_PARAM = 84, HTML_PLAINTEXT = 85, HTML_PRE = 86, HTML_Q = 87, HTML_S = 88, HTML_SAMP = 89, HTML_SCRIPT = 90, HTML_SELECT = 91, HTML_SHY = 92, HTML_SMALL = 93, HTML_SPAN = 94, HTML_SPOT = 95, HTML_STRIKE = 96, HTML_STRONG = 97, HTML_STYLE = 98, HTML_SUB = 99, HTML_SUP = 100, HTML_TAB = 101, HTML_TABLE = 102, HTML_TBODY = 103, HTML_TD = 104, HTML_TEXTAREA = 105, HTML_TEXTFLOW = 106, HTML_TFOOT = 107, HTML_TH = 108, HTML_THEAD = 109, HTML_TITLE = 110, HTML_TR = 111, HTML_TT = 112, HTML_U = 113, HTML_UL = 114, HTML_VAR = 115, HTML_WBR = 116, HTML_XMP = 117, HTML_ALT_OBJECT = 118, } HTMLElement;
struct _HT_tagspec {
     struct _HT_tagspec *next;
     int style;
     char *class_name;
     HTMLElement element;
     BOOLEAN *present;
     char **value;
     BOOLEAN start;
     char __pad[3];
  } ;
typedef enum  { NOCJK = 0, JAPANESE = 1, CHINESE = 2, KOREAN = 3, TAIPEI = 4, } HTCJKlang;
/*****************************************************************************************/
/******                                                                             ******/
/******                          Function Prototypes                                ******/
/******                                                                             ******/
/*****************************************************************************************/
char *LYstrncpy( char *, char *, int  );
void LYLowerCase( char * );
void LYUpperCase( char * );
char *LYReduceBlanks( char * );
char *LYRemoveBlanks( char * );
char *SNACat( char **, char *, int  );
void HTAlert( char * );
void HTUserMsg( char * );
void mark_justify_start_position( void * );
HText *HText_new2( HTParentAnchor *, HTStream * );
void HText_beginAppend( HText * );
void HText_appendParagraph( HText * );
void HText_setStyle( HText *, HTStyle * );
void HText_appendCharacter( HText *, int  );
void _internal_HTC( HText *, int , int  );
void HText_setLastChar( HText *, char  );
char HText_getLastChar( HText * );
void HText_setIgnoreExcess( HText *, BOOLEAN  );
void HText_cancelStbl( HText * );
void HText_startStblTABLE( HText *, short  );
int HText_endStblTABLE( HText * );
void HText_startStblTR( HText *, short  );
void HText_endStblTR( HText * );
void HText_startStblTD( HText *, int , int , short , BOOLEAN  );
void HText_endStblTD( HText * );
void HText_startStblCOL( HText *, int , short , BOOLEAN  );
void HText_endStblCOLGROUP( HText * );
void HText_startStblRowGroup( HText *, short  );
int HText_beginAnchor( HText *, BOOLEAN , HTChildAnchor * );
void HText_endAnchor( HText *, int  );
BOOLEAN HText_isAnchorBlank( HText *, int  );
void HText_appendText( HText *, char * );
void HText_endAppend( HText * );
int HText_sourceAnchors( HText * );
int HText_getLines( HText * );
int HText_LastLineSize( HText *, BOOLEAN  );
BOOLEAN HText_LastLineEmpty( HText *, BOOLEAN  );
BOOLEAN HText_PreviousLineEmpty( HText *, BOOLEAN  );
void HText_NegateLineOne( HText * );
BOOLEAN HText_inLineOne( HText * );
void HText_RemovePreviousLine( HText * );
int HText_getCurrentColumn( HText * );
int HText_getMaximumColumn( HText * );
void HText_setTabID( HText *, char * );
int HText_getTabIDColumn( HText *, char * );
int HText_HiddenLinkCount( HText * );
void HText_beginForm( char *, char *, char *, char *, char * );
void HText_endForm( HText * );
int HText_getOptionNum( HText * );
char *HText_setLastOptionValue( HText *, char *, char *, int , BOOLEAN , int , int  );
int HText_beginInput( HText *, BOOLEAN , InputFieldData * );
void HText_endInput( HText * );
void HText_setToolbar( HText * );
BOOLEAN HText_hasToolbar( HText * );
void HText_setBreakPoint( HText * );
HTkcode HText_getKcode( HText * );
void HText_updateKcode( HText *, HTkcode  );
HTkcode HText_getSpecifiedKcode( HText * );
void HText_updateSpecifiedKcode( HText *, HTkcode  );
void exit_immediately( int  );
FILE *TraceFP( void );
FILE *LYOpenTemp( char *, char *, char * );
void LYCloseTempFP( FILE * );
int LYRemoveTemp( char * );
BOOLEAN LYIsUIPage3( char *, UIP_t , int  );
void LYAddHtmlSep( char ** );
void strtolower( char * );
void actually_set_style( HTStructured * );
void change_paragraph_style( HTStructured *, HTStyle * );
BOOLEAN LYBadHTML( HTStructured * );
void HTML_put_character( HTStructured *, char  );
void HTML_put_string( HTStructured *, char * );
void HTML_write( HTStructured *, char *, int  );
void addClassName( char *, char *, int  );
void HTMLSRC_apply_markup( HTStructured *, HTlexeme , BOOLEAN , int  );
void LYStartArea( HTStructured *, char *, char *, char *, int  );
void LYHandleFIG( HTStructured *, BOOLEAN *, char **, BOOLEAN , BOOLEAN , char *, char *, BOOLEAN , BOOLEAN , BOOLEAN * );
void clear_objectdata( HTStructured * );
int HTML_start_element( HTStructured *, int , BOOLEAN *, char **, int , char ** );
int HTML_end_element( HTStructured *, int , char ** );
int HTML_put_entity( HTStructured *, int  );
void HTML_free( HTStructured * );
void HTML_abort( HTStructured *, HTError  );
void get_styles( void );
HTStyle *LYstyles( int  );
HTStructured *HTML_new( HTParentAnchor *, HTFormat , HTStream * );
void CacheThru_do_free( HTStream * );
void CacheThru_free( HTStream * );
void CacheThru_abort( HTStream *, HTError  );
void CacheThru_put_character( HTStream *, char  );
void CacheThru_put_string( HTStream *, char * );
void CacheThru_write( HTStream *, char *, int  );
HTStream *CacheThru_new( HTParentAnchor *, HTStream * );
HTStream *HTMLToPlain( HTPresentation *, HTParentAnchor *, HTStream * );
HTStream *HTMLParsedPresent( HTPresentation *, HTParentAnchor *, HTStream * );
HTStream *HTMLToC( HTPresentation *, HTParentAnchor *, HTStream * );
HTStream *HTMLPresent( HTPresentation *, HTParentAnchor *, HTStream * );
int HTLoadError( HTStream *, int , char * );
char *MakeNewTitle( char **, int  );
char *MakeNewImageValue( char ** );
char *MakeNewMapValue( char **, char * );
HTStyleSheet *DefaultStyle( HTStyle *** );
void outofmem( char *, char * );
void HTMLSetCharacterHandling( int  );
void LYEntify( char **, BOOLEAN  );
void LYTrimHead( char * );
void LYTrimTail( char * );
char *LYFindEndOfComment( char * );
char *LYUppercaseA_OL_String( int  );
char *LYLowercaseA_OL_String( int  );
char *LYUppercaseI_OL_String( int  );
char *LYLowercaseI_OL_String( int  );
void LYZero_OL_Counter( HTStructured * );
void LYGetChartransInfo( HTStructured * );
char **LYUCFullyTranslateString( char **, int , int , BOOLEAN , BOOLEAN , BOOLEAN , BOOLEAN , BOOLEAN , CharUtil_st  );
BOOLEAN LYUCTranslateHTMLString( char **, int , int , BOOLEAN , BOOLEAN , BOOLEAN , CharUtil_st  );
void LYHandleMETA( HTStructured *, BOOLEAN *, char **, char ** );
void LYHandlePlike( HTStructured *, BOOLEAN *, char **, char **, int , BOOLEAN  );
void LYHandleSELECT( HTStructured *, BOOLEAN *, char **, char **, BOOLEAN  );
int LYLegitimizeHREF( HTStructured *, char **, BOOLEAN , BOOLEAN  );
void LYCheckForContentBase( HTStructured * );
void LYCheckForID( HTStructured *, BOOLEAN *, char **, int  );
void LYHandleID( HTStructured *, char * );
BOOLEAN LYoverride_default_alignment( HTStructured * );
void LYEnsureDoubleSpace( HTStructured * );
void LYEnsureSingleSpace( HTStructured * );
void LYResetParagraphAlignment( HTStructured * );
BOOLEAN LYAddImageMap( char *, char *, HTParentAnchor * );
BOOLEAN LYAddMapElement( char *, char *, char *, HTParentAnchor *, BOOLEAN  );
void FastTrimColorClass( char *, int , char *, char **, int * );
int hash_code( char * );
int hash_code_lowercase_on_fly( char * );
int hash_code_aggregate_char( char , int  );
int hash_code_aggregate_lower_str( char *, int  );
int UCGetLYhndl_byMIME( char * );
void UCSetTransParams( UCTransParams *, int , LYUCcharset *, int , LYUCcharset * );
void UCTransParams_clear( UCTransParams * );
char *HTParse( char *, char *, int  );
HTStream *SGML_new( SGML_dtd *, HTParentAnchor *, HTStructured * );
void HTStartAnchor( HTStructured *, char *, char * );
void HTStartAnchor5( HTStructured *, char *, char *, char *, int  );
void HTChunkInit( HTChunk *, int  );
HTChunk *HTChunkCreateMayFail( int , int  );
void HTChunkClear( HTChunk * );
void HTChunkFree( HTChunk * );
void HTChunkPutc( HTChunk *, char  );
HTChunk *HTChunkPutc2( HTChunk *, char  );
HTChunk *HTChunkPutb2( HTChunk *, char *, int  );
void HTChunkTerminate( HTChunk * );
void HTChunkPuts( HTChunk *, char * );
HTChunk *HTChunkPuts2( HTChunk *, char * );
HTStructured *HTMLGenerator( HTStream * );
HTAtom *HTAtom_for( char * );
HTChildAnchor *HTAnchor_findChildAndLink( HTParentAnchor *, char *, char *, HTLinkType * );
HTParentAnchor *HTAnchor_parent( HTAnchor * );
char *HTAnchor_address( HTAnchor * );
void HTAnchor_setIndex( HTParentAnchor *, char * );
void HTAnchor_setPrompt( HTParentAnchor *, char * );
char *HTAnchor_title( HTParentAnchor * );
void HTAnchor_setTitle( HTParentAnchor *, char * );
void HTAnchor_setOwner( HTParentAnchor *, char * );
void HTAnchor_setRevTitle( HTParentAnchor *, char * );
void HTAnchor_setCitehost( HTParentAnchor *, char * );
HTAnchor *HTAnchor_followLink( HTChildAnchor * );
LYUCcharset *HTAnchor_getUCInfoStage( HTParentAnchor *, int  );
int HTAnchor_getUCLYhndl( HTParentAnchor *, int  );
LYUCcharset *HTAnchor_setUCInfoStage( HTParentAnchor *, int , int , int  );
LYUCcharset *HTAnchor_resetUCInfoStage( HTParentAnchor *, int , int , int  );
int strcasecomp( char *, char * );
int strncasecomp( char *, char *, int  );
char *HTSACopy( char **, char * );
char *HTSACat( char **, char * );
char *HTSprintf0( char **, char *, ... );
HTStream *HTStreamStack( HTFormat , HTFormat , HTStream *, HTParentAnchor * );
int fputs( char *, FILE * );
int sprintf( char *, char *, ... );
void *realloc( void *, unsigned int  );
char *strchr( char *, char  );
void *calloc( unsigned int , unsigned int  );
void *memset( void *, int , unsigned int  );
char *strrchr( char *, char  );
char *gettext( char * );
void free( void * );
int fflush( FILE * );
short **__ctype_b_loc( void );
void *memcpy( void *, void *, unsigned int  );
unsigned int strlen( char * );
char *strcpy( char *, char * );
int atoi( char * );
unsigned int fwrite( void *, unsigned int , unsigned int , FILE * );
int fprintf( FILE *, char *, ... );
void *malloc( unsigned int  );
void __stack_chk_fail( void );
int fputc( int , FILE * );
int strncmp( char *, char *, unsigned int  );
int ferror( FILE * );
int tolower( int  );
int strcmp( char *, char * );
/*****************************************************************************************/
/******                                                                             ******/
/******                        Forward Var Declarations                             ******/
/******                                                                             ******/
/*****************************************************************************************/
extern struct _IO_FILE  *stderr;
extern BOOLEAN LYShowScrollbar;
extern int LYlines;
extern int LYcols;
extern BOOLEAN dump_output_immediately;
extern BOOLEAN verbose_img;
extern int display_lines;
extern int keypad_mode;
extern BOOLEAN local_host_only;
extern int LYCacheSource;
extern BOOLEAN clickable_images;
extern BOOLEAN nested_tables;
extern BOOLEAN pseudo_inline_alts;
extern BOOLEAN LYUseDefaultRawMode;
extern BOOLEAN LYSelectPopups;
extern BOOLEAN LYNoISMAPifUSEMAP;
extern HTAtom *WWW_SOURCE;
extern char *helpfile;
extern char *indexfile;
extern char *bookmark_page;
extern int LYMultiBookmarks;
extern BOOLEAN no_table_center;
extern BOOLEAN bold_H1;
extern BOOLEAN bold_headers;
extern char *MBM_A_subbookmark[26];
extern char *MBM_A_subdescript[26];
extern BOOLEAN bold_name_anchors;
extern int LYCacheSourceForAborted;
extern BOOLEAN LYCollapseBRs;
extern BOOLEAN LYSeekFragAREAinCur;
extern BOOLEAN LYSeekFragMAPinCur;
extern BOOLEAN force_empty_hrefless_a;
extern char *hidden_link_marker;
extern HTLinkType *HTInternalLink;
extern BOOLEAN can_justify_here;
extern BOOLEAN can_justify_here_saved;
extern BOOLEAN can_justify_this_line;
extern int wait_for_this_stacked_elt;
extern BOOLEAN form_in_htext;
extern BOOLEAN in_DT;
extern HTStructuredClass HTMLPresentation;
extern char *LynxHome;
extern BOOLEAN source_cache_file_error;
extern char *LYToolbarName;
extern int HTCurSelectGroupType;
extern HTkcode kanji_code;
extern int current_char_set;
extern char **p_entity_values;
extern int OL_CONTINUE;
extern int OL_VOID;
extern BOOLEAN LYMapsOnly;
extern bucket hashStyles[8193];
extern int cached_tag_styles[118];
extern int current_tag_style;
extern BOOLEAN force_current_tag_style;
extern BOOLEAN force_classname;
extern char *forced_classname;
extern BOOLEAN psrc_convert_string;
extern BOOLEAN psrc_view;
extern BOOLEAN sgml_in_psrc_was_initialized;
extern BOOLEAN psrc_nested_call;
extern BOOLEAN psrc_first_tag;
extern HT_tagspec *lexeme_start[12];
extern HT_tagspec *lexeme_end[12];
extern int tagname_transform;
extern int attrname_transform;
extern int UCLYhndl_for_unrec;
extern int LATIN1;
extern HTCJKlang HTCJK;
extern BOOLEAN HTPassEightBitRaw;
extern SGML_dtd HTML_dtd;
extern char class_string[256];
extern BOOLEAN WWW_TraceFlag;
extern int WWW_TraceMask;
/*****************************************************************************************/
/******                                                                             ******/
/******                      Inline Function Definitions                            ******/
/******                                                                             ******/
/*****************************************************************************************/
