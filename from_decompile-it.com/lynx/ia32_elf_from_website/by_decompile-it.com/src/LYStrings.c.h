#define __MOD(a,b) a % b
/*****************************************************************************************/
/******                                                                             ******/
/******                            Structure Definitions                            ******/
/******                                                                             ******/
/*****************************************************************************************/
typedef struct _win_st WINDOW;
typedef unsigned long chtype;
typedef chtype attr_t;
struct pdat {
     short _pad_y;
     short _pad_x;
     short _pad_top;
     short _pad_left;
     short _pad_bottom;
     short _pad_right;
  } ;
typedef int wchar_t;
typedef struct {
     attr_t attr;
     wchar_t chars[5];
  } cchar_t;
struct _win_st {
     short _cury;
     short _curx;
     short _maxy;
     short _maxx;
     short _begy;
     short _begx;
     short _flags;
     attr_t _attrs;
     chtype _bkgd;
     _Bool _notimeout;
     _Bool _clear;
     _Bool _leaveok;
     _Bool _scroll;
     _Bool _idlok;
     _Bool _idcok;
     _Bool _immed;
     _Bool _sync;
     _Bool _use_keypad;
     int _delay;
     struct ldat *_line;
     short _regtop;
     short _regbottom;
     int _parx;
     int _pary;
     WINDOW *_parent;
     struct pdat  _pad;
     short _yoffset;
     cchar_t _bkgrnd;
  } ;
typedef enum  { NORECALL = 0, RECALL_URL = 1, RECALL_CMD = 2, RECALL_MAIL = 3, } RecallType;
typedef struct _HTList HTList;
struct _HTList {
     void *object;
     HTList *next;
  } ;
typedef char BOOLEAN;
typedef unsigned int size_t;
typedef struct _EditFieldData EditFieldData;
struct _EditFieldData {
     int sx;
     int sy;
     int dspwdth;
     int strlen;
     int maxlen;
     char pad;
     BOOLEAN hidden;
     BOOLEAN dirty;
     BOOLEAN panon;
     int xpan;
     int pos;
     int margin;
     int current_modifiers;
     int mark;
     char buffer[1024];
     int offset2col[2048];
     int col2offset[2048];
  } ;
typedef struct _IO_FILE FILE;
struct _IO_marker {
     struct _IO_marker *_next;
     struct _IO_FILE *_sbuf;
     int _pos;
  } ;
typedef long __off_t;
typedef void _IO_lock_t;
typedef long long __quad_t;
typedef __quad_t __off64_t;
struct _IO_FILE {
     int _flags;
     char *_IO_read_ptr;
     char *_IO_read_end;
     char *_IO_read_base;
     char *_IO_write_base;
     char *_IO_write_ptr;
     char *_IO_write_end;
     char *_IO_buf_base;
     char *_IO_buf_end;
     char *_IO_save_base;
     char *_IO_backup_base;
     char *_IO_save_end;
     struct _IO_marker *_markers;
     struct _IO_FILE *_chain;
     int _fileno;
     int _flags2;
     __off_t _old_offset;
     unsigned short _cur_column;
     char _vtable_offset;
     char _shortbuf[1];
     _IO_lock_t *_lock;
     __off64_t _offset;
     void *__pad1;
     void *__pad2;
     void *__pad3;
     void *__pad4;
     size_t __pad5;
     int _mode;
     char _unused2[40];
  } ;
typedef struct _HText HText;
typedef struct _HTParentAnchor HTParentAnchor;
typedef struct _HTParentAnchor0 HTParentAnchor0;
typedef struct _HTBTree_top HTBTree;
typedef int (*HTComparer)( void *, void * );
struct _HTBTree_element {
     void *object;
     struct _HTBTree_element *up;
     struct _HTBTree_element *left;
     int left_depth;
     struct _HTBTree_element *right;
     int right_depth;
  } ;
struct _HTBTree_top {
     HTComparer compare;
     struct _HTBTree_element *top;
  } ;
struct _HTParentAnchor0 {
     HTParentAnchor0 *parent;
     char *address;
     HTParentAnchor *info;
     HTBTree *children;
     HTList sources;
     HTList _add_adult;
     short adult_hash;
     BOOLEAN underway;
     char __pad[1];
  } ;
typedef struct _HyperDoc HyperDoc;
struct _HyperDoc  ;
typedef struct {
     char *str;
     int len;
  } bstring;
typedef struct _HTAtom HTAtom;
struct _HTAtom {
     HTAtom *next;
     char *name;
  } ;
typedef HTAtom *HTFormat;
typedef struct _HTChunk HTChunk;
struct _HTChunk {
     int size;
     int growby;
     int allocated;
     char *data;
     int failok;
     HTChunk *next;
  } ;
typedef struct _UCAnchorInfo UCAnchorInfo;
typedef struct _LYUCcharset LYUCcharset;
struct _LYUCcharset {
     int UChndl;
     char *MIMEname;
     int enc;
     int codepage;
     int repertoire;
     int codepoints;
     int cpranges;
     int like8859;
  } ;
struct _UCStageInfo {
     int lock;
     int LYhndl;
     LYUCcharset C;
  } ;
struct _UCAnchorInfo {
     struct _UCStageInfo  s[4];
  } ;
struct _HTParentAnchor {
     HTParentAnchor0 *parent;
     HTList children_notag;
     HyperDoc *document;
     char *address;
     bstring *post_data;
     char *post_content_type;
     char *bookmark;
     HTFormat format;
     char *charset;
     BOOLEAN isIndex;
     char *isIndexAction;
     char *isIndexPrompt;
     char *title;
     char *owner;
     char *RevTitle;
     char *citehost;
     char *style;
     HTList *methods;
     void *protocol;
     char *physical;
     BOOLEAN isISMAPScript;
     BOOLEAN isHEAD;
     BOOLEAN safe;
     char *source_cache_file;
     HTChunk *source_cache_chunk;
     char *FileCache;
     char *SugFname;
     char *cache_control;
     BOOLEAN no_cache;
     BOOLEAN inBASE;
     char *content_type_params;
     char *content_type;
     char *content_language;
     char *content_encoding;
     char *content_base;
     char *content_disposition;
     char *content_location;
     char *content_md5;
     char *message_id;
     char *subject;
     int content_length;
     char *date;
     char *expires;
     char *last_modified;
     char *ETag;
     char *server;
     UCAnchorInfo *UCStages;
     HTList *imaps;
  } ;
typedef struct _line HTLine;
typedef struct {
     unsigned int bits_at_0;
  } HTStyleChange;
struct _line {
     struct _line *next;
     struct _line *prev;
     unsigned short offset;
     unsigned short size;
     HTStyleChange *styles;
     unsigned short numstyles;
     char data[1];
     char __pad[1];
  } ;
typedef struct {
     HTLine base;
     char data[1026];
     char __pad[2];
  } HTLineTemp;
typedef struct _TextAnchor TextAnchor;
typedef struct _FormInfo FormInfo;
typedef struct _OptionType OptionType;
struct _OptionType {
     char *name;
     char *cp_submit_value;
     int value_cs;
     struct _OptionType *next;
  } ;
struct _FormInfo {
     char *name;
     int number;
     int type;
     char *value;
     char *orig_value;
     int size;
     unsigned int maxlength;
     int group;
     int num_value;
     int hrange;
     int lrange;
     OptionType *select_list;
     char *submit_action;
     int submit_method;
     char *submit_enctype;
     char *submit_title;
     BOOLEAN no_cache;
     char *cp_submit_value;
     char *orig_submit_value;
     int size_l;
     int disabled;
     int name_cs;
     int value_cs;
     char *accept_cs;
  } ;
typedef struct {
     char *hl_text;
     short hl_x;
     char __pad[2];
  } HiliteInfo;
typedef struct {
     HiliteInfo *hl_info;
     HiliteInfo hl_base;
     short hl_len;
     char __pad[2];
  } HiliteList;
typedef struct _HTAnchor HTAnchor;
struct _HTAnchor {
     HTParentAnchor0 *parent;
  } ;
typedef HTAtom HTLinkType;
typedef struct {
     HTParentAnchor0 *parent;
     char *tag;
     HTAnchor *dest;
     HTLinkType *type;
     HTList _add_children_notag;
     HTList _add_sources;
  } HTChildAnchor;
struct _TextAnchor {
     struct _TextAnchor *next;
     struct _TextAnchor *prev;
     int sgml_offset;
     int number;
     int line_num;
     short line_pos;
     short extent;
     BOOLEAN show_anchor;
     BOOLEAN inUnderline;
     BOOLEAN expansion_anch;
     char link_type;
     FormInfo *input_field;
     HiliteList lites;
     HTChildAnchor *anchor;
  } ;
typedef struct _HTStyle HTStyle;
typedef long HTFont;
typedef int HTCoord;
typedef int HTColor;
typedef struct {
     short kind;
     HTCoord position;
  } HTTabStop;
struct _HTStyle {
     struct _HTStyle *next;
     char *name;
     int id;
     char *SGMLTag;
     HTFont font;
     HTCoord fontSize;
     HTColor color;
     int superscript;
     HTAnchor *anchor;
     HTCoord indent1st;
     HTCoord leftIndent;
     HTCoord rightIndent;
     short alignment;
     HTCoord lineHt;
     HTCoord descentLine;
     HTTabStop *tabs;
     BOOLEAN wordWrap;
     BOOLEAN freeFormat;
     HTCoord spaceBefore;
     HTCoord spaceAfter;
     int paraFlags;
  } ;
typedef struct _STable_info STable_info;
struct _STable_info  ;
typedef enum  { NOKANJI = 0, EUC = 1, SJIS = 2, JIS = 3, } HTkcode;
typedef enum  { DET_SJIS = 0, DET_EUC = 1, DET_NOTYET = 2, DET_MIXED = 3, } eDetectedKCode;
typedef enum  { SJIS_state_neutral = 0, SJIS_state_in_kanji = 1, SJIS_state_has_bad_code = 2, } eSJIS_status;
typedef enum  { EUC_state_neutral = 0, EUC_state_in_kanji = 1, EUC_state_in_kana = 2, EUC_state_has_bad_code = 3, } eEUC_status;
typedef enum  { S_text = 0, S_esc = 1, S_dollar = 2, S_paren = 3, S_nonascii_text = 4, S_dollar_paren = 5, S_jisx0201_text = 6, } eGridState;
typedef struct _UCTransParams UCTransParams;
struct _UCTransParams {
     BOOLEAN transp;
     BOOLEAN do_cjk;
     BOOLEAN decode_utf8;
     BOOLEAN output_utf8;
     BOOLEAN use_raw_char_in;
     BOOLEAN strip_raw_char_in;
     BOOLEAN pass_160_173_raw;
     BOOLEAN do_8bitraw;
     BOOLEAN trans_to_uni;
     BOOLEAN trans_C0_to_uni;
     BOOLEAN repl_translated_C0;
     BOOLEAN trans_from_uni;
  } ;
typedef struct _HTStream HTStream;
typedef struct _HTStreamClass HTStreamClass;
typedef void *HTError;
struct _HTStreamClass {
     char *name;
     void (*_free)( HTStream * );
     void (*_abort)( HTStream *, HTError  );
     void (*put_character)( HTStream *, char  );
     void (*put_string)( HTStream *, char * );
     void (*put_block)( HTStream *, char *, int  );
  } ;
struct _HTStream {
     HTStreamClass *isa;
  } ;
typedef struct _HTPool HTPool;
typedef HTStyleChange pool_data;
struct _HTPool {
     pool_data data[2042];
     struct _HTPool *prev;
     int used;
  } ;
struct _HText {
     HTParentAnchor *node_anchor;
     HTLine *last_line;
     HTLineTemp temp_line[2];
     int Lines;
     TextAnchor *first_anchor;
     TextAnchor *last_anchor;
     TextAnchor *last_anchor_before_stbl;
     TextAnchor *last_anchor_before_split;
     HTList *forms;
     int last_anchor_number;
     BOOLEAN source;
     BOOLEAN toolbar;
     HTList *tabs;
     HTList *hidden_links;
     int hiddenlinkflag;
     BOOLEAN no_cache;
     char LastChar;
     BOOLEAN IgnoreExcess;
     HTStyle *style;
     int display_on_the_fly;
     int top_of_screen;
     HTLine *top_of_screen_line;
     HTLine *next_line;
     unsigned int permissible_split;
     BOOLEAN in_line_1;
     BOOLEAN stale;
     BOOLEAN page_has_target;
     BOOLEAN has_utf8;
     BOOLEAN had_utf8;
     int first_lineno_last_disp_partial;
     int last_lineno_last_disp_partial;
     STable_info *stbl;
     HTList *enclosed_stbl;
     HTkcode kcode;
     HTkcode specified_kcode;
     eDetectedKCode detected_kcode;
     eSJIS_status SJIS_status;
     eEUC_status EUC_status;
     eGridState state;
     int kanji_buf;
     int in_sjis;
     int halted;
     BOOLEAN have_8bit_chars;
     LYUCcharset *UCI;
     int UCLYhndl;
     UCTransParams T;
     HTStream *target;
     HTStreamClass targetClass;
     HTPool *pool;
     BOOLEAN clickable_images;
     BOOLEAN pseudo_inline_alts;
     BOOLEAN verbose_img;
     BOOLEAN raw_mode;
     BOOLEAN historical_comments;
     BOOLEAN minimal_comments;
     BOOLEAN soft_dquotes;
     short old_dtd;
     short keypad_mode;
     short disp_lines;
     short disp_cols;
  } ;
struct {
     char *name;
     int (*func)( char * );
  } ;
typedef struct {
     char *string;
     int value;
  } Keysym_String_List;
struct {
     char *txt;
     int action;
     unsigned int flag;
  } ;
typedef unsigned long mmask_t;
typedef struct {
     short id;
     int x;
     int y;
     int z;
     mmask_t bstate;
  } MEVENT;
typedef struct {
     unsigned short upper;
     unsigned short lower;
  } unipair_case;
typedef struct term TERMINAL;
typedef struct termtype TERMTYPE;
struct termtype {
     char *term_names;
     char *str_table;
     char *Booleans;
     short *Numbers;
     char **Strings;
     char *ext_str_table;
     char **ext_Names;
     unsigned short num_Booleans;
     unsigned short num_Numbers;
     unsigned short num_Strings;
     unsigned short ext_Booleans;
     unsigned short ext_Numbers;
     unsigned short ext_Strings;
  } ;
typedef unsigned int tcflag_t;
typedef unsigned char cc_t;
typedef unsigned int speed_t;
struct termios {
     tcflag_t c_iflag;
     tcflag_t c_oflag;
     tcflag_t c_cflag;
     tcflag_t c_lflag;
     cc_t c_line;
     cc_t c_cc[32];
     speed_t c_ispeed;
     speed_t c_ospeed;
  } ;
struct term {
     TERMTYPE type;
     short Filedes;
     struct termios  Ottyb;
     struct termios  Nttyb;
     int _baudrate;
     char *_termname;
  } ;
typedef struct {
     char *lname;
     char *target;
     char *l_hightext;
     char *l_hightext2;
     int l_hightext2_offset;
     BOOLEAN inUnderline;
     int lx;
     int ly;
     int type;
     int sgml_offset;
     int anchor_number;
     int anchor_line_num;
     HiliteList list;
     struct _FormInfo *l_form;
  } LinkInfo;
typedef unsigned short LYKeymap_t;
typedef enum  { NOCJK = 0, JAPANESE = 1, CHINESE = 2, KOREAN = 3, TAIPEI = 4, } HTCJKlang;
/*****************************************************************************************/
/******                                                                             ******/
/******                          Function Prototypes                                ******/
/******                                                                             ******/
/*****************************************************************************************/
void cleanup( void );
char *LYVersionDate( void );
int peek_mouse_levent( void );
int fancy_mouse( WINDOW *, int , int * );
HTList *whichRecall( RecallType  );
void LYRemoveFromCloset( HTList * );
void LYCloseCloset( RecallType  );
char *LYFindInCloset( RecallType , char * );
void LYAddToCloset( RecallType , char * );
int XYdist( int , int , int , int , int  );
int set_clicked_link( int , int , int , int  );
char *LYstrncpy( char *, char *, int  );
char *LYmbcs_skip_glyphs( char *, int , BOOLEAN  );
char *LYmbcs_skip_cells( char *, int , BOOLEAN  );
int LYmbcsstrlen( char *, BOOLEAN , BOOLEAN  );
int lookup_tiname( char *, char ** );
char *expand_tiname( char *, size_t , char **, char * );
char *expand_tichar( char *, char **, char * );
int expand_substring( char *, char *, char *, char * );
void unescaped_char( char *, int * );
BOOLEAN unescape_string( char *, char *, char * );
int map_string_to_keysym( char *, int * );
char *skip_keysym( char * );
int setkey_cmd( char * );
int unsetkey_cmd( char * );
int read_keymap_file( void );
void setup_vtXXX_keymap( void );
int lynx_initialize_keymaps( void );
int LYmouse_menu( int , int , int , int  );
int LYgetch_for( int  );
int LYgetch( void );
int LYgetch_choice( void );
int LYgetch_input( void );
int LYgetch_single( void );
void LYLowerCase( char * );
void LYUpperCase( char * );
char *LYReduceBlanks( char * );
char *LYRemoveBlanks( char * );
char *LYSkipBlanks( char * );
char *LYSkipNonBlanks( char * );
char *LYSkipCBlanks( char * );
char *LYSkipCNonBlanks( char * );
void LYTrimLeading( char * );
char *LYTrimNewline( char * );
void LYTrimTrailing( char * );
char *LYElideString( char *, int  );
BOOLEAN LYTrimStartfile( char * );
void LYEscapeStartfile( char ** );
void LYTrimAllStartfile( char * );
void LYSetupEdit( EditFieldData *, char *, int , int  );
int mbcs_glyphs( char *, int  );
int mbcs_skip( char *, int  );
int cell2char( char *, int  );
int LYEditInsert( EditFieldData *, unsigned char *, int , int , BOOLEAN  );
int LYEdit1( EditFieldData *, int , int , BOOLEAN  );
int get_popup_number( char *, int *, int * );
void remember_column( EditFieldData *, int  );
void fill_edited_line( int , int , int  );
void LYRefreshEdit( EditFieldData * );
void reinsertEdit( EditFieldData *, char * );
int caselessCmpList( void *, void * );
int normalCmpList( void *, void * );
char **sortedList( HTList *, BOOLEAN  );
int LYarrayLength( char ** );
int LYarrayWidth( char ** );
void FormatChoiceNum( char *, int , int , char * );
unsigned int options_width( char ** );
void draw_option( WINDOW *, int , int , BOOLEAN , int , int , char * );
int LYhandlePopupList( int , int , int , char **, int , int , int , BOOLEAN  );
int LYgetstr( char *, int , size_t , RecallType  );
char *LYLineeditHelpURL( void );
char *LYstrsep( char **, char * );
char *LYstrstr( char *, char * );
char *LYno_attr_char_case_strstr( char *, char * );
char *LYno_attr_mbcs_case_strstr( char *, char *, BOOLEAN , BOOLEAN , int *, int * );
char *SNACopy( char **, char *, int  );
char *SNACat( char **, char *, int  );
long UniToLowerCase( long  );
int UPPER8( int , int  );
char *LYSafeGets( char **, FILE * );
void LYOpenCmdLogfile( int , char ** );
void LYOpenCmdScript( void );
int LYReadCmdKey( int  );
void LYWriteCmdKey( int  );
void LYCloseCmdLogfile( void );
void HTAlert( char * );
void HTInfoMsg( char * );
void HTUserMsg( char * );
void HTUserMsg2( char *, char * );
void LYSleepReplay( void );
int HText_getNumOfLines( void );
void HTAddSearchQuery( char * );
BOOLEAN HText_hasToolbar( HText * );
void exit_immediately( int  );
FILE *TraceFP( void );
void LYSetNewline( int  );
void repaint_main_statusline( int  );
void LYbox( WINDOW *, BOOLEAN  );
void curses_w_style( WINDOW *, int , int  );
void curses_style( int , int  );
void lynx_nl2crlf( int  );
void LYpaddstr( WINDOW *, int , char * );
void LYsubwindow( WINDOW * );
WINDOW *LYtopwindow( void );
WINDOW *LYstartPopup( int *, int *, int *, int * );
int LYstrExtent2( char *, int  );
int LYstrCells( char * );
void LYmove( int , int  );
void LYrefresh( void );
void lynx_force_repaint( void );
void LYstowCursor( WINDOW *, int , int  );
char *LYGetHiliteStr( int , int  );
int LYGetHilitePos( int , int  );
void convert_to_spaces( char *, BOOLEAN  );
void statusline( char * );
BOOLEAN LYCloseInput( FILE * );
BOOLEAN LYCloseOutput( FILE * );
void size_change( int  );
void LYAddPathToHome( char *, size_t , char * );
FILE *LYNewTxtFile( char * );
void get_clip_release( void );
char *get_clip_grab( void );
int popup_choice( int , int , int , char **, int , int , BOOLEAN  );
void LYSetConfigValue( char *, char * );
HTList *LYcommandList( void );
char *LYKeycodeToString( int , BOOLEAN  );
int LYStringToKeycode( char * );
int lacname_to_lac( char * );
int lecname_to_lec( char * );
int LYReverseKeymap( int  );
void outofmem( char *, char * );
int EditBinding( int  );
void LYTrimHead( char * );
UCode_t UCTransToUni( char , int  );
char *HTEscapeUnsafe( char * );
char *HTUnEscapeSome( char *, char * );
HTList *HTList_new( void );
void HTList_delete( HTList * );
void HTList_addObject( HTList *, void * );
void *HTList_removeFirstObject( HTList * );
int HTList_count( HTList * );
void *HTList_objectAt( HTList *, int  );
int strncasecomp8( char *, char *, int  );
int strcasecomp( char *, char * );
int strncasecomp( char *, char *, int  );
char *HTSACopy( char **, char * );
char *HTSACat( char **, char * );
char *HTSprintf0( char **, char *, ... );
int ungetmouse( void * );
int *__errno_location( void );
int sprintf( char *, char *, ... );
void qsort( void *, unsigned int , unsigned int , void * );
int waddch( WINDOW *, unsigned long  );
int wmove( WINDOW *, int , int  );
void *realloc( void *, unsigned int  );
char *strchr( char *, char  );
void *calloc( unsigned int , unsigned int  );
char *strncpy( char *, char *, unsigned int  );
int toupper( int  );
char *fgets( char *, int , FILE * );
FILE *fopen64( char *, char * );
char *gettext( char * );
void *strtol( char *, char **, int  );
void free( void * );
int getmouse( void * );
short **__ctype_b_loc( void );
int fclose( FILE * );
void *memcpy( void *, void *, unsigned int  );
unsigned int strlen( char * );
void clearerr( FILE * );
int feof( FILE * );
char *strcpy( char *, char * );
int atoi( char * );
int wgetch( WINDOW * );
int fprintf( FILE *, char *, ... );
char *strstr( char *, char * );
void *malloc( unsigned int  );
void __stack_chk_fail( void );
int waddnstr( WINDOW *, char *, int  );
unsigned int sleep( unsigned int  );
int define_key( char *, int  );
int strncmp( char *, char *, unsigned int  );
char *strpbrk( char *, char * );
int ferror( FILE * );
int tolower( int  );
int strcmp( char *, char * );
/*****************************************************************************************/
/******                                                                             ******/
/******                        Forward Var Declarations                             ******/
/******                                                                             ******/
/*****************************************************************************************/
extern struct _IO_FILE  *stdin;
extern struct _IO_FILE  *stderr;
extern TERMINAL *cur_term;
extern char *strnames[];
extern char *strfnames[];
extern BOOLEAN term_letter;
extern HText *HTMainText;
extern HTList *search_queries;
extern BOOLEAN LYShowScrollbar;
extern BOOLEAN LYsb_arrow;
extern int LYsb_begin;
extern int LYsb_end;
extern int LYlines;
extern int LYcols;
extern LinkInfo links[1024];
extern int nlinks;
extern BOOLEAN case_sensitive;
extern BOOLEAN recent_sizechange;
extern char *helpfilepath;
extern char *lynx_cmd_logfile;
extern char *lynx_cmd_script;
extern int display_lines;
extern int keypad_mode;
extern int user_mode;
extern int MessageSecs;
extern FILE *LYTraceLogFP;
extern BOOLEAN textfields_need_activation;
extern WINDOW *LYwin;
extern BOOLEAN mustshow;
extern BOOLEAN term_options;
extern BOOLEAN term_message;
extern LYKeymap_t keymap[661];
extern int current_lineedit;
extern char *LYLineeditHelpURLs[4];
extern int escape_bound;
extern BOOLEAN DisplayCharsetMatchLocale;
extern HTkcode kanji_code;
extern int current_char_set;
extern int LYlowest_eightbit[60];
extern LYUCcharset LYCharSet_UC[60];
extern int s_aedit;
extern int s_aedit_arr;
extern int s_aedit_pad;
extern int s_aedit_sel;
extern int s_forw_backw;
extern int s_hot_paste;
extern int s_menu_active;
extern int s_menu_entry;
extern int s_menu_number;
extern int s_menu_sb;
extern int s_prompt_edit;
extern int s_prompt_edit_arr;
extern int s_prompt_edit_pad;
extern int s_prompt_sel;
extern HTCJKlang HTCJK;
extern BOOLEAN HTPassHighCtrlRaw;
extern BOOLEAN WWW_TraceFlag;
extern int WWW_TraceMask;
/*****************************************************************************************/
/******                                                                             ******/
/******                      Inline Function Definitions                            ******/
/******                                                                             ******/
/*****************************************************************************************/
