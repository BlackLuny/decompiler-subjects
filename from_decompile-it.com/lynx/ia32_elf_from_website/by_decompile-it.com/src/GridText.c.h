#define __MOD(a,b) a % b
/*****************************************************************************************/
/******                                                                             ******/
/******                            Structure Definitions                            ******/
/******                                                                             ******/
/*****************************************************************************************/
typedef unsigned int size_t;
typedef enum  { NORECALL = 0, RECALL_URL = 1, RECALL_CMD = 2, RECALL_MAIL = 3, } RecallType;
typedef char BOOLEAN;
typedef struct _HTPool HTPool;
typedef struct {
     unsigned int bits_at_0;
  } HTStyleChange;
typedef HTStyleChange pool_data;
struct _HTPool {
     pool_data data[2042];
     struct _HTPool *prev;
     int used;
  } ;
typedef struct _HText HText;
typedef struct _HTParentAnchor HTParentAnchor;
typedef struct _HTParentAnchor0 HTParentAnchor0;
typedef struct _HTBTree_top HTBTree;
typedef int (*HTComparer)( void *, void * );
struct _HTBTree_element {
     void *object;
     struct _HTBTree_element *up;
     struct _HTBTree_element *left;
     int left_depth;
     struct _HTBTree_element *right;
     int right_depth;
  } ;
struct _HTBTree_top {
     HTComparer compare;
     struct _HTBTree_element *top;
  } ;
typedef struct _HTList HTList;
struct _HTList {
     void *object;
     HTList *next;
  } ;
struct _HTParentAnchor0 {
     HTParentAnchor0 *parent;
     char *address;
     HTParentAnchor *info;
     HTBTree *children;
     HTList sources;
     HTList _add_adult;
     short adult_hash;
     BOOLEAN underway;
     char __pad[1];
  } ;
typedef struct _HyperDoc HyperDoc;
struct _HyperDoc  ;
typedef struct {
     char *str;
     int len;
  } bstring;
typedef struct _HTAtom HTAtom;
struct _HTAtom {
     HTAtom *next;
     char *name;
  } ;
typedef HTAtom *HTFormat;
typedef struct _HTChunk HTChunk;
struct _HTChunk {
     int size;
     int growby;
     int allocated;
     char *data;
     int failok;
     HTChunk *next;
  } ;
typedef struct _UCAnchorInfo UCAnchorInfo;
typedef struct _LYUCcharset LYUCcharset;
struct _LYUCcharset {
     int UChndl;
     char *MIMEname;
     int enc;
     int codepage;
     int repertoire;
     int codepoints;
     int cpranges;
     int like8859;
  } ;
struct _UCStageInfo {
     int lock;
     int LYhndl;
     LYUCcharset C;
  } ;
struct _UCAnchorInfo {
     struct _UCStageInfo  s[4];
  } ;
struct _HTParentAnchor {
     HTParentAnchor0 *parent;
     HTList children_notag;
     HyperDoc *document;
     char *address;
     bstring *post_data;
     char *post_content_type;
     char *bookmark;
     HTFormat format;
     char *charset;
     BOOLEAN isIndex;
     char *isIndexAction;
     char *isIndexPrompt;
     char *title;
     char *owner;
     char *RevTitle;
     char *citehost;
     char *style;
     HTList *methods;
     void *protocol;
     char *physical;
     BOOLEAN isISMAPScript;
     BOOLEAN isHEAD;
     BOOLEAN safe;
     char *source_cache_file;
     HTChunk *source_cache_chunk;
     char *FileCache;
     char *SugFname;
     char *cache_control;
     BOOLEAN no_cache;
     BOOLEAN inBASE;
     char *content_type_params;
     char *content_type;
     char *content_language;
     char *content_encoding;
     char *content_base;
     char *content_disposition;
     char *content_location;
     char *content_md5;
     char *message_id;
     char *subject;
     int content_length;
     char *date;
     char *expires;
     char *last_modified;
     char *ETag;
     char *server;
     UCAnchorInfo *UCStages;
     HTList *imaps;
  } ;
typedef struct _line HTLine;
struct _line {
     struct _line *next;
     struct _line *prev;
     unsigned short offset;
     unsigned short size;
     HTStyleChange *styles;
     unsigned short numstyles;
     char data[1];
     char __pad[1];
  } ;
typedef struct {
     HTLine base;
     char data[1026];
     char __pad[2];
  } HTLineTemp;
typedef struct _TextAnchor TextAnchor;
typedef struct _FormInfo FormInfo;
typedef struct _OptionType OptionType;
struct _OptionType {
     char *name;
     char *cp_submit_value;
     int value_cs;
     struct _OptionType *next;
  } ;
struct _FormInfo {
     char *name;
     int number;
     int type;
     char *value;
     char *orig_value;
     int size;
     unsigned int maxlength;
     int group;
     int num_value;
     int hrange;
     int lrange;
     OptionType *select_list;
     char *submit_action;
     int submit_method;
     char *submit_enctype;
     char *submit_title;
     BOOLEAN no_cache;
     char *cp_submit_value;
     char *orig_submit_value;
     int size_l;
     int disabled;
     int name_cs;
     int value_cs;
     char *accept_cs;
  } ;
typedef struct {
     char *hl_text;
     short hl_x;
     char __pad[2];
  } HiliteInfo;
typedef struct {
     HiliteInfo *hl_info;
     HiliteInfo hl_base;
     short hl_len;
     char __pad[2];
  } HiliteList;
typedef struct _HTAnchor HTAnchor;
struct _HTAnchor {
     HTParentAnchor0 *parent;
  } ;
typedef HTAtom HTLinkType;
typedef struct {
     HTParentAnchor0 *parent;
     char *tag;
     HTAnchor *dest;
     HTLinkType *type;
     HTList _add_children_notag;
     HTList _add_sources;
  } HTChildAnchor;
struct _TextAnchor {
     struct _TextAnchor *next;
     struct _TextAnchor *prev;
     int sgml_offset;
     int number;
     int line_num;
     short line_pos;
     short extent;
     BOOLEAN show_anchor;
     BOOLEAN inUnderline;
     BOOLEAN expansion_anch;
     char link_type;
     FormInfo *input_field;
     HiliteList lites;
     HTChildAnchor *anchor;
  } ;
typedef struct _HTStyle HTStyle;
typedef long HTFont;
typedef int HTCoord;
typedef int HTColor;
typedef struct {
     short kind;
     HTCoord position;
  } HTTabStop;
struct _HTStyle {
     struct _HTStyle *next;
     char *name;
     int id;
     char *SGMLTag;
     HTFont font;
     HTCoord fontSize;
     HTColor color;
     int superscript;
     HTAnchor *anchor;
     HTCoord indent1st;
     HTCoord leftIndent;
     HTCoord rightIndent;
     short alignment;
     HTCoord lineHt;
     HTCoord descentLine;
     HTTabStop *tabs;
     BOOLEAN wordWrap;
     BOOLEAN freeFormat;
     HTCoord spaceBefore;
     HTCoord spaceAfter;
     int paraFlags;
  } ;
typedef struct _STable_info STable_info;
struct _STable_info  ;
typedef enum  { NOKANJI = 0, EUC = 1, SJIS = 2, JIS = 3, } HTkcode;
typedef enum  { DET_SJIS = 0, DET_EUC = 1, DET_NOTYET = 2, DET_MIXED = 3, } eDetectedKCode;
typedef enum  { SJIS_state_neutral = 0, SJIS_state_in_kanji = 1, SJIS_state_has_bad_code = 2, } eSJIS_status;
typedef enum  { EUC_state_neutral = 0, EUC_state_in_kanji = 1, EUC_state_in_kana = 2, EUC_state_has_bad_code = 3, } eEUC_status;
typedef enum  { S_text = 0, S_esc = 1, S_dollar = 2, S_paren = 3, S_nonascii_text = 4, S_dollar_paren = 5, S_jisx0201_text = 6, } eGridState;
typedef struct _UCTransParams UCTransParams;
struct _UCTransParams {
     BOOLEAN transp;
     BOOLEAN do_cjk;
     BOOLEAN decode_utf8;
     BOOLEAN output_utf8;
     BOOLEAN use_raw_char_in;
     BOOLEAN strip_raw_char_in;
     BOOLEAN pass_160_173_raw;
     BOOLEAN do_8bitraw;
     BOOLEAN trans_to_uni;
     BOOLEAN trans_C0_to_uni;
     BOOLEAN repl_translated_C0;
     BOOLEAN trans_from_uni;
  } ;
typedef struct _HTStream HTStream;
typedef struct _HTStreamClass HTStreamClass;
typedef void *HTError;
struct _HTStreamClass {
     char *name;
     void (*_free)( HTStream * );
     void (*_abort)( HTStream *, HTError  );
     void (*put_character)( HTStream *, char  );
     void (*put_string)( HTStream *, char * );
     void (*put_block)( HTStream *, char *, int  );
  } ;
struct _HTStream {
     HTStreamClass *isa;
  } ;
struct _HText {
     HTParentAnchor *node_anchor;
     HTLine *last_line;
     HTLineTemp temp_line[2];
     int Lines;
     TextAnchor *first_anchor;
     TextAnchor *last_anchor;
     TextAnchor *last_anchor_before_stbl;
     TextAnchor *last_anchor_before_split;
     HTList *forms;
     int last_anchor_number;
     BOOLEAN source;
     BOOLEAN toolbar;
     HTList *tabs;
     HTList *hidden_links;
     int hiddenlinkflag;
     BOOLEAN no_cache;
     char LastChar;
     BOOLEAN IgnoreExcess;
     HTStyle *style;
     int display_on_the_fly;
     int top_of_screen;
     HTLine *top_of_screen_line;
     HTLine *next_line;
     unsigned int permissible_split;
     BOOLEAN in_line_1;
     BOOLEAN stale;
     BOOLEAN page_has_target;
     BOOLEAN has_utf8;
     BOOLEAN had_utf8;
     int first_lineno_last_disp_partial;
     int last_lineno_last_disp_partial;
     STable_info *stbl;
     HTList *enclosed_stbl;
     HTkcode kcode;
     HTkcode specified_kcode;
     eDetectedKCode detected_kcode;
     eSJIS_status SJIS_status;
     eEUC_status EUC_status;
     eGridState state;
     int kanji_buf;
     int in_sjis;
     int halted;
     BOOLEAN have_8bit_chars;
     LYUCcharset *UCI;
     int UCLYhndl;
     UCTransParams T;
     HTStream *target;
     HTStreamClass targetClass;
     HTPool *pool;
     BOOLEAN clickable_images;
     BOOLEAN pseudo_inline_alts;
     BOOLEAN verbose_img;
     BOOLEAN raw_mode;
     BOOLEAN historical_comments;
     BOOLEAN minimal_comments;
     BOOLEAN soft_dquotes;
     short old_dtd;
     short keypad_mode;
     short disp_lines;
     short disp_cols;
  } ;
typedef struct _PerFormInfo PerFormInfo;
struct _PerFormInfo {
     int number;
     int disabled;
     struct _PerFormInfo *next;
     int nfields;
     FormInfo *first_field;
     FormInfo *last_field;
     char *accept_cs;
     char *thisacceptcs;
  } ;
typedef struct {
     char *title;
     char *address;
     bstring *post_data;
     char *post_content_type;
     char *bookmark;
     BOOLEAN isHEAD;
     BOOLEAN safe;
     int link;
     int line;
     BOOLEAN internal_link;
     char *style;
  } DocInfo;
typedef struct _IO_FILE FILE;
struct _IO_marker {
     struct _IO_marker *_next;
     struct _IO_FILE *_sbuf;
     int _pos;
  } ;
typedef long __off_t;
typedef void _IO_lock_t;
typedef long long __quad_t;
typedef __quad_t __off64_t;
struct _IO_FILE {
     int _flags;
     char *_IO_read_ptr;
     char *_IO_read_end;
     char *_IO_read_base;
     char *_IO_write_base;
     char *_IO_write_ptr;
     char *_IO_write_end;
     char *_IO_buf_base;
     char *_IO_buf_end;
     char *_IO_save_base;
     char *_IO_backup_base;
     char *_IO_save_end;
     struct _IO_marker *_markers;
     struct _IO_FILE *_chain;
     int _fileno;
     int _flags2;
     __off_t _old_offset;
     unsigned short _cur_column;
     char _vtable_offset;
     char _shortbuf[1];
     _IO_lock_t *_lock;
     __off64_t _offset;
     void *__pad1;
     void *__pad2;
     void *__pad3;
     void *__pad4;
     size_t __pad5;
     int _mode;
     char _unused2[40];
  } ;
typedef struct _InputFieldData InputFieldData;
struct _InputFieldData {
     char *accept;
     char *align;
     int checked;
     char *iclass;
     int disabled;
     char *error;
     char *height;
     char *id;
     char *lang;
     char *max;
     char *maxlength;
     char *md;
     char *min;
     char *name;
     int size;
     char *src;
     char *type;
     char *value;
     char *width;
     int name_cs;
     int value_cs;
     char *accept_cs;
  } ;
typedef enum  { NO_QUOTE = 0, QUOTE_MULTI = 1, QUOTE_BASE64 = 2, QUOTE_SPECIAL = 3, } QuoteData;
typedef struct {
     char *lname;
     char *target;
     char *l_hightext;
     char *l_hightext2;
     int l_hightext2_offset;
     BOOLEAN inUnderline;
     int lx;
     int ly;
     int type;
     int sgml_offset;
     int anchor_number;
     int anchor_line_num;
     HiliteList list;
     struct _FormInfo *l_form;
  } LinkInfo;
typedef struct _win_st WINDOW;
typedef unsigned long chtype;
typedef chtype attr_t;
struct pdat {
     short _pad_y;
     short _pad_x;
     short _pad_top;
     short _pad_left;
     short _pad_bottom;
     short _pad_right;
  } ;
typedef int wchar_t;
typedef struct {
     attr_t attr;
     wchar_t chars[5];
  } cchar_t;
struct _win_st {
     short _cury;
     short _curx;
     short _maxy;
     short _maxx;
     short _begy;
     short _begx;
     short _flags;
     attr_t _attrs;
     chtype _bkgd;
     _Bool _notimeout;
     _Bool _clear;
     _Bool _leaveok;
     _Bool _scroll;
     _Bool _idlok;
     _Bool _idcok;
     _Bool _immed;
     _Bool _sync;
     _Bool _use_keypad;
     int _delay;
     struct ldat *_line;
     short _regtop;
     short _regbottom;
     int _parx;
     int _pary;
     WINDOW *_parent;
     struct pdat  _pad;
     short _yoffset;
     cchar_t _bkgrnd;
  } ;
typedef enum  { UIP_UNKNOWN = -1, UIP_HISTORY = 0, UIP_DOWNLOAD_OPTIONS = 1, UIP_PRINT_OPTIONS = 2, UIP_SHOWINFO = 3, UIP_LIST_PAGE = 4, UIP_VLINKS = 5, UIP_LYNXCFG = 6, UIP_OPTIONS_MENU = 7, UIP_DIRED_MENU = 8, UIP_PERMIT_OPTIONS = 9, UIP_UPLOAD_OPTIONS = 10, UIP_ADDRLIST_PAGE = 11, UIP_CONFIG_DEF = 12, UIP_TRACELOG = 13, UIP_INSTALL = 14, } UIP_t;
typedef enum  { cftNone = 0, cftCompress = 1, cftGzip = 2, cftBzip2 = 3, cftDeflate = 4, } CompressFileType;
typedef struct {
     int byte_len;
     int cell_len;
  } ht_run_info;
typedef struct _HTProtocol HTProtocol;
struct _HTProtocol {
     char *name;
     int (*load)( char *, HTParentAnchor *, HTFormat , HTStream * );
     HTStream *(*saveStream)( HTParentAnchor * );
  } ;
typedef enum  { NOCJK = 0, JAPANESE = 1, CHINESE = 2, KOREAN = 3, TAIPEI = 4, } HTCJKlang;
/*****************************************************************************************/
/******                                                                             ******/
/******                          Function Prototypes                                ******/
/******                                                                             ******/
/*****************************************************************************************/
BOOLEAN editor_can_position( void );
void edit_temporary_file( char *, char *, char * );
char *LYstrncpy( char *, char *, int  );
void LYLowerCase( char * );
void LYUpperCase( char * );
char *LYReduceBlanks( char * );
char *LYRemoveBlanks( char * );
char *LYSkipBlanks( char * );
void LYTrimLeading( char * );
void LYTrimTrailing( char * );
int LYgetstr( char *, int , size_t , RecallType  );
char *LYno_attr_char_case_strstr( char *, char * );
char *LYno_attr_char_strstr( char *, char * );
char *LYno_attr_mbcs_case_strstr( char *, char *, BOOLEAN , BOOLEAN , int *, int * );
char *LYno_attr_mbcs_strstr( char *, char *, BOOLEAN , BOOLEAN , int *, int * );
char *SNACopy( char **, char *, int  );
void mailform( char *, char *, char *, char * );
void HTAlert( char * );
void HTAlwaysAlert( char *, char * );
void HTInfoMsg( char * );
void HTUserMsg( char * );
void HTUserMsg2( char *, char * );
int HTConfirmDefault( char *, int  );
void LYSleepAlert( void );
void LYSleepMsg( void );
pool_data *ALLOC_IN_POOL( HTPool **, unsigned int  );
HTPool *POOL_NEW( void );
void POOL_FREE( HTPool * );
void *HText_pool_calloc( HText *, unsigned int  );
void ht_justify_cleanup( void );
void HText_halt( void );
BOOLEAN mem_is_avail( size_t , size_t  );
void *LY_check_calloc( size_t , size_t  );
int StyleToCols( HText *, HTLine *, int  );
void LYClearHiText( TextAnchor * );
void LYSetHiText( TextAnchor *, char *, int  );
void LYAddHiText( TextAnchor *, char *, int  );
int LYAdjHiTextPos( TextAnchor *, int  );
char *LYGetHiTextStr( TextAnchor *, int  );
int LYGetHiTextPos( TextAnchor *, int  );
void LYCopyHiText( TextAnchor *, TextAnchor * );
void HText_getChartransInfo( HText * );
void PerFormInfo_free( PerFormInfo * );
void free_form_fields( FormInfo * );
void FormList_delete( HTList * );
void ResetPartialLinenos( HText * );
HText *HText_new( HTParentAnchor * );
HText *HText_new2( HTParentAnchor *, HTStream * );
void HText_free( HText * );
int display_line( HTLine *, HText *, int , char * );
void display_title( HText * );
void display_scrollbar( HText * );
void display_page( HText *, int , char * );
int set_style_by_embedded_chars( char *, char *, unsigned char , unsigned char  );
void move_anchors_in_region( HTLine *, int , TextAnchor **, int *, int , int , int  );
HTLine *insert_blanks_in_line( HTLine *, int , HText *, TextAnchor **, int , int *, int * );
HTStyleChange *skip_matched_and_correct_offsets( HTStyleChange *, HTStyleChange *, unsigned int  );
void split_line( HText *, unsigned int  );
void blank_lines( HText *, int  );
void HText_appendParagraph( HText * );
void HText_setStyle( HText *, HTStyle * );
void HText_appendCharacter( HText *, int  );
void HText_setIgnoreExcess( HText *, BOOLEAN  );
int HText_insertBlanksInStblLines( HText *, int  );
void HText_cancelStbl( HText * );
void HText_startStblTABLE( HText *, short  );
void free_enclosed_stbl( HText * );
int HText_endStblTABLE( HText * );
void HText_startStblTR( HText *, short  );
void HText_startStblTD( HText *, int , int , short , BOOLEAN  );
void HText_endStblTD( HText * );
void HText_startStblCOL( HText *, int , short , BOOLEAN  );
void HText_endStblCOLGROUP( HText * );
void HText_startStblRowGroup( HText *, short  );
void add_link_number( HText *, TextAnchor *, BOOLEAN  );
int HText_beginAnchor( HText *, BOOLEAN , HTChildAnchor * );
BOOLEAN HText_endAnchor0( HText *, int , int  );
void HText_endAnchor( HText *, int  );
BOOLEAN HText_isAnchorBlank( HText *, int  );
void HText_appendText( HText *, char * );
int remove_special_attr_chars( char * );
void HText_endAppend( HText * );
void HText_trimHightext( HText *, BOOLEAN , int  );
void HText_FormDescNumber( int , char ** );
int HTGetRelLinkNum( int , int , int  );
int HTGetLinkInfo( int , int , int *, int *, char **, char ** );
BOOLEAN same_anchor_or_field( int , FormInfo *, int , FormInfo *, BOOLEAN  );
BOOLEAN HText_TAHasMoreLines( int , int  );
int HTGetLinkOrFieldStart( int , int *, int *, int , BOOLEAN  );
BOOLEAN HText_getFirstTargetInLine( HText *, int , BOOLEAN , int *, int *, char **, char * );
int HText_getNumOfBytes( void );
char *HText_getTitle( void );
char *HText_getStyle( void );
char *HText_getSugFname( void );
void HTCheckFnameForCompression( char **, HTParentAnchor *, BOOLEAN  );
char *HText_getLastModified( void );
char *HText_getDate( void );
char *HText_getServer( void );
void HText_pageDisplay( int , char * );
BOOLEAN anchor_is_numbered( TextAnchor * );
int HText_getAbsLineNumber( HText *, int  );
int HText_anchorRelativeTo( HText *, int , int  );
void HText_refresh( HText * );
BOOLEAN HText_canScrollDown( void );
void HText_scrollTop( HText * );
void HText_scrollDown( HText * );
void HText_scrollUp( HText * );
void HText_scrollBottom( HText * );
BOOLEAN HText_select( HText * );
BOOLEAN HText_POSTReplyLoaded( DocInfo * );
BOOLEAN HTFindPoundSelector( char * );
BOOLEAN HText_selectAnchor( HText *, HTChildAnchor * );
int HText_getTopOfScreen( void );
int HText_getPreferredTopLine( HText *, int  );
void HTSearchQueries_free( void );
void HTAddSearchQuery( char * );
int do_www_search( DocInfo * );
void write_offset( FILE *, HTLine * );
void write_hyphen( FILE * );
int TrimmedLength( char * );
void print_wwwfile_to_fd( FILE *, BOOLEAN , BOOLEAN  );
void print_crawl_to_fd( FILE *, char *, char * );
void adjust_search_result( DocInfo *, int , int  );
BOOLEAN anchor_has_target( TextAnchor *, char * );
TextAnchor *line_num_to_anchor( int  );
int line_num_in_text( HText *, HTLine * );
TextAnchor *get_prev_anchor( TextAnchor * );
int www_search_forward( int , DocInfo *, char *, HTLine *, int  );
int www_search_backward( int , DocInfo *, char *, HTLine *, int  );
void www_user_search( int , DocInfo *, char *, int  );
void user_message( char *, char * );
char *HText_getOwner( void );
void HText_setMainTextOwner( char * );
char *HText_getRevTitle( void );
char *HText_getContentBase( void );
char *HText_getContentLocation( void );
char *HText_getMessageID( void );
void HTuncache_current_document( void );
BOOLEAN useSourceCache( void );
BOOLEAN useMemoryCache( void );
BOOLEAN HTreparse_document( void );
BOOLEAN HTcan_reparse_document( void );
void trace_setting_change( char *, int , int  );
BOOLEAN HTdocument_settings_changed( void );
int HTisDocumentSource( void );
char *HTLoadedDocumentURL( void );
BOOLEAN HTLoadedDocumentEightbit( void );
void HText_setNodeAnchorBookmark( char * );
int HText_LastLineSize( HText *, BOOLEAN  );
BOOLEAN HText_LastLineEmpty( HText *, BOOLEAN  );
int HText_LastLineOffset( HText * );
int HText_PreviousLineSize( HText *, BOOLEAN  );
BOOLEAN HText_PreviousLineEmpty( HText *, BOOLEAN  );
int HText_TrueLineSize( HTLine *, HText *, BOOLEAN  );
BOOLEAN HText_TrueEmptyLine( HTLine *, HText *, BOOLEAN  );
int HText_getCurrentColumn( HText * );
void HText_setTabID( HText *, char * );
int HText_getTabIDColumn( HText *, char * );
void HText_AddHiddenLink( HText *, TextAnchor * );
int HText_HiddenLinkCount( HText * );
char *HText_HiddenLinkAt( HText *, int  );
void HText_beginForm( char *, char *, char *, char *, char * );
void HText_endForm( HText * );
void HText_beginSelect( char *, int , BOOLEAN , char * );
int HText_getOptionNum( HText * );
char *HText_skipOptionNumPrefix( char * );
char *HText_setLastOptionValue( HText *, char *, char *, int , BOOLEAN , int , int  );
int HText_beginInput( HText *, BOOLEAN , InputFieldData * );
void HText_endInput( HText * );
double get_trans_q( int , char * );
int find_best_target_cs( char **, int , char * );
void load_a_file( char *, bstring ** );
char *guess_content_type( char * );
void cannot_transcode( BOOLEAN *, char * );
unsigned int check_form_specialchars( char * );
void UpdateBoundary( char **, bstring * );
char *convert_to_base64( char *, int  );
char *escape_or_quote_name( char *, QuoteData , char * );
char *escape_or_quote_value( char *, QuoteData  );
int check_if_base64_needed( int , bstring * );
int HText_SubmitForm( FormInfo *, DocInfo *, char *, char * );
void HText_DisableCurrentForm( void );
void HText_ResetForm( FormInfo * );
BOOLEAN HText_HaveUserChangedForms( HText * );
void HText_activateRadioButton( FormInfo * );
char *stub_HTAnchor_address( HTAnchor * );
BOOLEAN HText_hasToolbar( HText * );
BOOLEAN HText_hasUTF8OutputSet( HText * );
void HText_setKcode( HText *, char *, LYUCcharset * );
BOOLEAN HText_AreDifferent( HTParentAnchor *, char * );
int increment_tagged_htline( HTLine *, TextAnchor *, int *, int *, int , int  );
void insert_new_textarea_anchor( TextAnchor **, HTLine ** );
void update_subsequent_anchors( int , TextAnchor *, HTLine *, int  );
BOOLEAN IsFormsTextarea( FormInfo *, TextAnchor * );
int finish_ExtEditForm( LinkInfo *, TextAnchor *, char *, int  );
int HText_ExtEditForm( LinkInfo * );
void HText_ExpandTextarea( LinkInfo *, int  );
int HText_InsertFile( LinkInfo * );
int GetColumn( void );
BOOLEAN DidWrap( int , int  );
void redraw_part_of_line( HTLine *, char *, int , HText * );
void redraw_lines_of_link( int  );
int HTMainText_Get_UCLYhndl( void );
FILE *TraceFP( void );
void curses_style( int , int  );
void LYstartTargetEmphasis( void );
void LYstopTargetEmphasis( void );
void LYwaddnstr( WINDOW *, char *, size_t  );
int LYstrExtent( char *, int , int  );
int LYstrExtent2( char *, int  );
int LYstrCells( char * );
int LYscreenWidth( void );
void LYclear( void );
void LYclrtoeol( void );
void LYerase( void );
void LYmove( int , int  );
void LYrefresh( void );
void lynx_start_title_color( void );
void lynx_stop_title_color( void );
size_t utf8_length( BOOLEAN , char * );
void LYFreeHilites( int , int  );
void LYSetHilite( int , char * );
void LYAddHilite( int , char *, int  );
char *LYGetHiliteStr( int , int  );
int LYGetHilitePos( int , int  );
void LYhighlight( int , int , char * );
void statusline( char * );
void LYFakeZap( BOOLEAN  );
void LYFreeStringList( HTList * );
void LYFixCursesOn( char * );
BOOLEAN LYCloseInput( FILE * );
BOOLEAN LYCanReadFile( char * );
char *LYPathLeaf( char * );
FILE *LYOpenTemp( char *, char *, char * );
void LYCloseTempFP( FILE * );
int LYRemoveTemp( char * );
BOOLEAN LYIsUIPage3( char *, UIP_t , int  );
char *trimPoundSelector( char * );
void LYSyslog( char * );
void LYFreePostData( DocInfo * );
char *GetFileName( void );
void outofmem( char *, char * );
void printlist( FILE *, BOOLEAN  );
BOOLEAN LYUCTranslateBackFormData( char **, int , int , BOOLEAN  );
void ResetCachedStyles( void );
STable_info *Stbl_startTABLE( short  );
void Stbl_free( STable_info * );
int Stbl_addRowToTable( STable_info *, int , int  );
int Stbl_addCellToTable( STable_info *, int , int , int , int , int , int , int  );
int Stbl_finishCellInTable( STable_info *, int , int , int , int  );
int Stbl_addColInfo( STable_info *, int , short , BOOLEAN  );
int Stbl_finishColGroup( STable_info * );
int Stbl_addRowGroup( STable_info *, short  );
int Stbl_finishTABLE( STable_info * );
short Stbl_getAlignment( STable_info * );
int Stbl_getFixupPositions( STable_info *, int , int *, int * );
int Stbl_getStartLine( STable_info * );
int Stbl_getStartLineDeep( STable_info * );
void Stbl_update_enclosing( STable_info *, int , int  );
void Stbl_set_enclosing( STable_info *, STable_info *, struct _TextAnchor * );
STable_info *Stbl_get_enclosing( STable_info * );
struct _TextAnchor  *Stbl_get_last_anchor_before( STable_info * );
int UCGetLYhndl_byMIME( char * );
BOOLEAN UCCanTranslateFromTo( int , int  );
BOOLEAN UCNeedNotTranslate( int , int  );
void UCSetTransParams( UCTransParams *, int , LYUCcharset *, int , LYUCcharset * );
char *HTEscapeSP( char *, unsigned char  );
char *HTUnEscape( char * );
void HTMake822Word( char **, int  );
BOOLEAN HTSearch( char *, HTParentAnchor * );
HTFormat HTFileFormat( char *, HTAtom **, char ** );
HTFormat HTCharsetFormat( HTFormat , HTParentAnchor *, int  );
void LYGetFileInfo( char *, HTParentAnchor **, HTFormat *, HTAtom **, char **, char **, int * );
CompressFileType HTCompressFileType( char *, char *, int * );
char *HTCompressTypeToSuffix( CompressFileType  );
CompressFileType HTContentToCompressType( HTParentAnchor * );
int SGML_offset( void );
void JISx0201TO0208_EUC( unsigned char , unsigned char , unsigned char *, unsigned char * );
unsigned char *EUC_TO_SJIS1( unsigned char , unsigned char , unsigned char * );
void JISx0201TO0208_SJIS( unsigned char , unsigned char *, unsigned char * );
unsigned char *SJIS_TO_EUC1( unsigned char , unsigned char , unsigned char * );
unsigned char *TO_EUC( unsigned char *, unsigned char * );
void TO_SJIS( unsigned char *, unsigned char * );
HTAtom *HTAtom_for( char * );
BOOLEAN HTAnchor_delete( HTParentAnchor0 * );
void HTAnchor_delete_links( HTParentAnchor * );
void HTAnchor_clearSourceCache( HTParentAnchor * );
void HTAnchor_setDocument( HTParentAnchor *, HyperDoc * );
char *HTAnchor_address( HTAnchor * );
BOOLEAN HTAnchor_isIndex( HTParentAnchor * );
BOOLEAN HTAnchor_isISMAPScript( HTAnchor * );
char *HTAnchor_style( HTParentAnchor * );
char *HTAnchor_title( HTParentAnchor * );
void HTAnchor_setBookmark( HTParentAnchor *, char * );
char *HTAnchor_owner( HTParentAnchor * );
void HTAnchor_setOwner( HTParentAnchor *, char * );
char *HTAnchor_RevTitle( HTParentAnchor * );
char *HTAnchor_SugFname( HTParentAnchor * );
char *HTAnchor_last_modified( HTParentAnchor * );
char *HTAnchor_date( HTParentAnchor * );
char *HTAnchor_server( HTParentAnchor * );
char *HTAnchor_content_base( HTParentAnchor * );
char *HTAnchor_content_location( HTParentAnchor * );
char *HTAnchor_messageID( HTParentAnchor * );
HTAnchor *HTAnchor_followLink( HTChildAnchor * );
void HTAnchor_setProtocol( HTParentAnchor *, void * );
LYUCcharset *HTAnchor_getUCInfoStage( HTParentAnchor *, int  );
int HTAnchor_getUCLYhndl( HTParentAnchor *, int  );
LYUCcharset *HTAnchor_setUCInfoStage( HTParentAnchor *, int , int , int  );
LYUCcharset *HTAnchor_resetUCInfoStage( HTParentAnchor *, int , int , int  );
HTList *HTList_new( void );
void HTList_delete( HTList * );
void HTList_addObject( HTList *, void * );
void HTList_appendObject( HTList *, void * );
BOOLEAN HTList_removeObject( HTList *, void * );
void *HTList_removeObjectAt( HTList *, int  );
void *HTList_removeFirstObject( HTList * );
int HTList_count( HTList * );
void *HTList_objectAt( HTList *, int  );
int strcasecomp( char *, char * );
int strncasecomp( char *, char *, int  );
char *HTSACopy( char **, char * );
char *HTSACat( char **, char * );
char *HTNextField( char ** );
char *HTNextTok( char **, char *, char *, char * );
char *HTSprintf( char **, char *, ... );
char *HTSprintf0( char **, char *, ... );
void HTSABCopy0( bstring **, char * );
void HTSABCat( bstring **, char *, int  );
void HTSABCat0( bstring **, char * );
BOOLEAN HTSABEql( bstring *, bstring * );
void HTSABFree( bstring ** );
bstring *HTBprintf( bstring **, char *, ... );
void trace_bstring( bstring * );
int HTParseFile( HTFormat , HTFormat , HTParentAnchor *, FILE *, HTStream * );
int HTParseMem( HTFormat , HTFormat , HTParentAnchor *, HTChunk *, HTStream * );
int fputs( char *, FILE * );
int sprintf( char *, char *, ... );
int memcmp( void *, void *, unsigned int  );
int waddch( WINDOW *, unsigned long  );
void *realloc( void *, unsigned int  );
double strtod( char *, char ** );
char *strchr( char *, char  );
void *calloc( unsigned int , unsigned int  );
char *strncpy( char *, char *, unsigned int  );
int toupper( int  );
void *memset( void *, int , unsigned int  );
FILE *fopen64( char *, char * );
char *strrchr( char *, char  );
void __assert_fail( char *, char *, unsigned int , char * );
char *gettext( char * );
void free( void * );
short **__ctype_b_loc( void );
void *memcpy( void *, void *, unsigned int  );
unsigned int strlen( char * );
char *strcpy( char *, char * );
int atoi( char * );
int fprintf( FILE *, char *, ... );
char *strncat( char *, char *, unsigned int  );
void *malloc( unsigned int  );
void __stack_chk_fail( void );
int fputc( int , FILE * );
char *strtok( char *, char * );
char *strcat( char *, char * );
int strncmp( char *, char *, unsigned int  );
unsigned int fread( void *, unsigned int , unsigned int , FILE * );
int strcmp( char *, char * );
int stat64( char *, void * );
/*****************************************************************************************/
/******                                                                             ******/
/******                        Forward Var Declarations                             ******/
/******                                                                             ******/
/*****************************************************************************************/
extern HText *HTMainText;
extern HTParentAnchor *HTMainAnchor;
extern char *HTCurSelectGroupSize;
extern HTList *search_queries;
extern BOOLEAN LYShowScrollbar;
extern BOOLEAN LYsb_arrow;
extern int LYsb_begin;
extern int LYsb_end;
extern BOOLEAN ok_justify;
extern int LYlines;
extern int LYcols;
extern LinkInfo links[1024];
extern int nlinks;
extern int nhist;
extern int HTCacheSize;
extern BOOLEAN LYforce_no_cache;
extern BOOLEAN LYtrimInputFields;
extern BOOLEAN case_sensitive;
extern BOOLEAN dump_output_immediately;
extern BOOLEAN is_www_index;
extern BOOLEAN lynx_mode;
extern BOOLEAN more_text;
extern BOOLEAN number_fields_on_left;
extern BOOLEAN number_links_on_left;
extern BOOLEAN recent_sizechange;
extern BOOLEAN verbose_img;
extern char empty_string[1];
extern int display_lines;
extern int keypad_mode;
extern int www_search_result;
extern BOOLEAN no_dotfiles;
extern BOOLEAN show_dotfiles;
extern char *editor;
extern BOOLEAN use_underscore;
extern BOOLEAN no_list;
extern BOOLEAN no_title;
extern BOOLEAN historical_comments;
extern BOOLEAN minimal_comments;
extern BOOLEAN soft_dquotes;
extern int LYCacheSource;
extern BOOLEAN enable_scrollback;
extern BOOLEAN debug_display_partial;
extern BOOLEAN display_partial_flag;
extern BOOLEAN clickable_images;
extern BOOLEAN nested_tables;
extern BOOLEAN pseudo_inline_alts;
extern BOOLEAN crawl;
extern BOOLEAN traversal;
extern BOOLEAN more_links;
extern BOOLEAN LYRawMode;
extern BOOLEAN LYUseDefaultRawMode;
extern char *UCAssume_MIMEcharset;
extern BOOLEAN LYSelectPopups;
extern BOOLEAN LYNoISMAPifUSEMAP;
extern int LYHiddenLinks;
extern int Old_DTD;
extern BOOLEAN dont_wrap_pre;
extern int justify_max_void_percent;
extern BOOLEAN with_backspaces;
extern FILE *LYTraceLogFP;
extern BOOLEAN LYNoCore;
extern HTAtom *WWW_SOURCE;
extern BOOLEAN display_partial;
extern int NumOfLines_partial;
extern WINDOW *LYwin;
extern int LYshiftWin;
extern int LYwideLines;
extern int LYtableCols;
extern BOOLEAN LYCursesON;
extern BOOLEAN mustshow;
extern char *checked_box;
extern char *checked_radio;
extern char *unchecked_box;
extern char *unchecked_radio;
extern int nhist_extra;
extern char star_string[1025];
extern BOOLEAN can_justify_here;
extern BOOLEAN can_justify_this_line;
extern int wait_for_this_stacked_elt;
extern BOOLEAN form_in_htext;
extern BOOLEAN in_DT;
extern char *LYToolbarName;
extern int HTCurSelectGroupType;
extern HTkcode kanji_code;
extern int current_char_set;
extern int LYlowest_eightbit[60];
extern LYUCcharset LYCharSet_UC[60];
extern int last_colorattr_ptr;
extern int s_forw_backw;
extern int s_hot_paste;
extern int s_title;
extern int s_sb_aa;
extern int s_sb_bar;
extern int s_sb_bg;
extern int s_sb_naa;
extern BOOLEAN psrc_view;
extern BOOLEAN LYpsrc;
extern BOOLEAN mark_htext_as_source;
extern BOOLEAN psrcview_no_anchor_numbering;
extern int UCLYhndl_for_unspec;
extern HTFormat HTOutputFormat;
extern HTProtocol HTFile;
extern HTCJKlang HTCJK;
extern BOOLEAN HTPassHighCtrlRaw;
extern BOOLEAN WWW_TraceFlag;
/*****************************************************************************************/
/******                                                                             ******/
/******                      Inline Function Definitions                            ******/
/******                                                                             ******/
/*****************************************************************************************/
