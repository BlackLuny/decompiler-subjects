/*****************************************************************************************/
/******                                                                             ******/
/******                            Structure Definitions                            ******/
/******                                                                             ******/
/*****************************************************************************************/
typedef long __off_t;
typedef void _IO_lock_t;
typedef long long __quad_t;
typedef __quad_t __off64_t;
typedef unsigned int size_t;
typedef char BOOLEAN;
typedef struct _IO_FILE FILE;
typedef struct {
     char *str;
     int len;
  } bstring;
typedef struct {
     char *title;
     char *address;
     bstring *post_data;
     char *post_content_type;
     char *bookmark;
     BOOLEAN isHEAD;
     BOOLEAN safe;
     int link;
     int line;
     BOOLEAN internal_link;
     char *style;
  } DocInfo;
typedef unsigned long long __u_quad_t;
typedef __u_quad_t __dev_t;
typedef unsigned long __ino_t;
typedef unsigned int __mode_t;
typedef unsigned int __nlink_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef long __blksize_t;
typedef __quad_t __blkcnt64_t;
typedef long __time_t;
typedef __u_quad_t __ino64_t;
typedef struct _LYUCcharset LYUCcharset;
typedef struct {
     char *hl_text;
     short hl_x;
     char __pad[2];
  } HiliteInfo;
typedef struct {
     HiliteInfo *hl_info;
     HiliteInfo hl_base;
     short hl_len;
     char __pad[2];
  } HiliteList;
typedef struct _OptionType OptionType;
typedef struct {
     char *lname;
     char *target;
     char *l_hightext;
     char *l_hightext2;
     int l_hightext2_offset;
     BOOLEAN inUnderline;
     int lx;
     int ly;
     int type;
     int sgml_offset;
     int anchor_number;
     int anchor_line_num;
     HiliteList list;
     struct _FormInfo {
       char *name;
       int number;
       int type;
       char *value;
       char *orig_value;
       int size;
       unsigned int maxlength;
       int group;
       int num_value;
       int hrange;
       int lrange;
       OptionType *select_list;
       char *submit_action;
       int submit_method;
       char *submit_enctype;
       char *submit_title;
       BOOLEAN no_cache;
       char *cp_submit_value;
       char *orig_submit_value;
       int size_l;
       int disabled;
       int name_cs;
       int value_cs;
       char *accept_cs;
    } *l_form;
  } LinkInfo;
typedef struct _HText HText;
typedef struct _HTParentAnchor0 HTParentAnchor0;
typedef struct _HTParentAnchor HTParentAnchor;
typedef int (*HTComparer)( void *, void * );
typedef struct _HTBTree_top HTBTree;
typedef struct _HTList HTList;
typedef struct _HyperDoc HyperDoc;
typedef struct _HTAtom HTAtom;
typedef HTAtom *HTFormat;
typedef struct _HTChunk HTChunk;
typedef struct _UCAnchorInfo UCAnchorInfo;
typedef unsigned long chtype;
typedef chtype attr_t;
typedef struct _win_st WINDOW;
typedef int wchar_t;
typedef struct {
     attr_t attr;
     wchar_t chars[5];
  } cchar_t;
typedef unsigned long mmask_t;
typedef struct {
     short id;
     int x;
     int y;
     int z;
     mmask_t bstate;
  } MEVENT;
typedef enum  { NORECALL = 0, RECALL_URL = 1, RECALL_CMD = 2, RECALL_MAIL = 3, } RecallType;
typedef struct {
     char *string;
     int value;
  } Keysym_String_List;
typedef struct _EditFieldData EditFieldData;
typedef struct {
     unsigned short upper;
     unsigned short lower;
  } unipair_case;
typedef enum  { NOCJK = 0, JAPANESE = 1, CHINESE = 2, KOREAN = 3, TAIPEI = 4, } HTCJKlang;
typedef struct termtype TERMTYPE;
typedef unsigned int tcflag_t;
typedef unsigned char cc_t;
typedef unsigned int speed_t;
typedef struct term TERMINAL;
typedef unsigned short LYKeymap_t;
typedef enum  { NOKANJI = 0, EUC = 1, SJIS = 2, JIS = 3, } HTkcode;
typedef __off64_t off_t;
typedef long __suseconds_t;
typedef enum  { ACCEPT_ALWAYS = 0, REJECT_ALWAYS = 1, QUERY_USER = 2, } behaviour_t;
typedef enum  { INVCHECK_QUERY = 0, INVCHECK_STRICT = 1, INVCHECK_LOOSE = 2, } invcheck_behaviour_t;
typedef struct _domain_entry domain_entry;
typedef struct {
     unsigned int bits_at_0;
  } HTStyleChange;
typedef HTStyleChange pool_data;
typedef struct _HTPool HTPool;
typedef struct _line HTLine;
typedef struct {
     HTLine base;
     char data[1026];
     char __pad[2];
  } HTLineTemp;
typedef struct _FormInfo FormInfo;
typedef struct _HTAnchor HTAnchor;
typedef HTAtom HTLinkType;
typedef struct {
     HTParentAnchor0 *parent;
     char *tag;
     HTAnchor *dest;
     HTLinkType *type;
     HTList _add_children_notag;
     HTList _add_sources;
  } HTChildAnchor;
typedef struct _TextAnchor TextAnchor;
typedef long HTFont;
typedef int HTCoord;
typedef int HTColor;
typedef struct {
     short kind;
     HTCoord position;
  } HTTabStop;
typedef struct _HTStyle HTStyle;
typedef struct _STable_info STable_info;
typedef enum  { DET_SJIS = 0, DET_EUC = 1, DET_NOTYET = 2, DET_MIXED = 3, } eDetectedKCode;
typedef enum  { SJIS_state_neutral = 0, SJIS_state_in_kanji = 1, SJIS_state_has_bad_code = 2, } eSJIS_status;
typedef enum  { EUC_state_neutral = 0, EUC_state_in_kanji = 1, EUC_state_in_kana = 2, EUC_state_has_bad_code = 3, } eEUC_status;
typedef enum  { S_text = 0, S_esc = 1, S_dollar = 2, S_paren = 3, S_nonascii_text = 4, S_dollar_paren = 5, S_jisx0201_text = 6, } eGridState;
typedef struct _UCTransParams UCTransParams;
typedef struct _HTStream HTStream;
typedef void *HTError;
typedef struct _HTStreamClass HTStreamClass;
typedef struct _PerFormInfo PerFormInfo;
typedef struct {
     char *name;
     int column;
  } HTTabID;
typedef struct {
     int byte_len;
     int cell_len;
  } ht_run_info;
typedef enum  { cftNone = 0, cftCompress = 1, cftGzip = 2, cftBzip2 = 3, cftDeflate = 4, } CompressFileType;
typedef struct _HTStyleSheet HTStyleSheet;
typedef struct _InputFieldData InputFieldData;
typedef enum  { NO_QUOTE = 0, QUOTE_MULTI = 1, QUOTE_BASE64 = 2, QUOTE_SPECIAL = 3, } QuoteData;
typedef struct {
     int type;
     BOOLEAN first;
     char *name;
     char *value;
     bstring *data;
     QuoteData quote;
  } PostData;
typedef struct _HTProtocol HTProtocol;
typedef enum  { NOT_A_URL_TYPE = 0, UNKNOWN_URL_TYPE = 1, HTTP_URL_TYPE = 2, FILE_URL_TYPE = 3, FTP_URL_TYPE = 4, NCFTP_URL_TYPE = 5, WAIS_URL_TYPE = 6, NEWS_URL_TYPE = 7, NNTP_URL_TYPE = 8, TELNET_URL_TYPE = 9, TN3270_URL_TYPE = 10, RLOGIN_URL_TYPE = 11, GOPHER_URL_TYPE = 12, HTML_GOPHER_URL_TYPE = 13, TELNET_GOPHER_URL_TYPE = 14, INDEX_GOPHER_URL_TYPE = 15, MAILTO_URL_TYPE = 16, BIBP_URL_TYPE = 17, FINGER_URL_TYPE = 18, CSO_URL_TYPE = 19, HTTPS_URL_TYPE = 20, SNEWS_URL_TYPE = 21, PROSPERO_URL_TYPE = 22, AFS_URL_TYPE = 23, DATA_URL_TYPE = 24, LYNXCGI_URL_TYPE = 25, LYNXEXEC_URL_TYPE = 26, LYNXPROG_URL_TYPE = 27, NEWSPOST_URL_TYPE = 28, NEWSREPLY_URL_TYPE = 29, SNEWSPOST_URL_TYPE = 30, SNEWSREPLY_URL_TYPE = 31, LYNXCACHE_URL_TYPE = 32, LYNXCFG_URL_TYPE = 33, LYNXCOMPILE_OPTS_URL_TYPE = 34, LYNXCOOKIE_URL_TYPE = 35, LYNXDIRED_URL_TYPE = 36, LYNXDOWNLOAD_URL_TYPE = 37, LYNXHIST_URL_TYPE = 38, LYNXIMGMAP_URL_TYPE = 39, LYNXKEYMAP_URL_TYPE = 40, LYNXMESSAGES_URL_TYPE = 41, LYNXOPTIONS_URL_TYPE = 42, LYNXPRINT_URL_TYPE = 43, PROXY_URL_TYPE = 44, } UrlTypes;
typedef struct _DocAddress DocAddress;
typedef struct {
     char *name;
     int value;
  } Config_Enum;
typedef struct parse_args_type Config_Type;
typedef struct _lynx_list_item_type lynx_list_item_type;
typedef int (*ParseFunc)( char * );
typedef union {
     lynx_list_item_type **add_value;
     BOOLEAN *set_value;
     int *int_value;
     char **str_value;
     ParseFunc fun_value;
     long def_value;
     HTList **lst_value;
  } ParseUnion;
typedef struct {
     DocInfo hdoc;
     int intern_seq_start;
  } HistInfo;
typedef enum  { LYK_UNKNOWN = 0, LYK_COMMAND = 1, LYK_1 = 2, LYK_2 = 3, LYK_3 = 4, LYK_4 = 5, LYK_5 = 6, LYK_6 = 7, LYK_7 = 8, LYK_8 = 9, LYK_9 = 10, LYK_SOURCE = 11, LYK_RELOAD = 12, LYK_QUIT = 13, LYK_ABORT = 14, LYK_NEXT_PAGE = 15, LYK_PREV_PAGE = 16, LYK_UP_TWO = 17, LYK_DOWN_TWO = 18, LYK_UP_HALF = 19, LYK_DOWN_HALF = 20, LYK_REFRESH = 21, LYK_HOME = 22, LYK_END = 23, LYK_FIRST_LINK = 24, LYK_LAST_LINK = 25, LYK_PREV_LINK = 26, LYK_NEXT_LINK = 27, LYK_LPOS_PREV_LINK = 28, LYK_LPOS_NEXT_LINK = 29, LYK_FASTBACKW_LINK = 30, LYK_FASTFORW_LINK = 31, LYK_UP_LINK = 32, LYK_DOWN_LINK = 33, LYK_RIGHT_LINK = 34, LYK_LEFT_LINK = 35, LYK_HISTORY = 36, LYK_PREV_DOC = 37, LYK_NEXT_DOC = 38, LYK_ACTIVATE = 39, LYK_SUBMIT = 40, LYK_GOTO = 41, LYK_ECGOTO = 42, LYK_HELP = 43, LYK_DWIMHELP = 44, LYK_INDEX = 45, LYK_NOCACHE = 46, LYK_INTERRUPT = 47, LYK_MAIN_MENU = 48, LYK_OPTIONS = 49, LYK_INDEX_SEARCH = 50, LYK_WHEREIS = 51, LYK_PREV = 52, LYK_NEXT = 53, LYK_COMMENT = 54, LYK_EDIT = 55, LYK_INFO = 56, LYK_PRINT = 57, LYK_ADD_BOOKMARK = 58, LYK_DEL_BOOKMARK = 59, LYK_VIEW_BOOKMARK = 60, LYK_VLINKS = 61, LYK_SHELL = 62, LYK_DOWNLOAD = 63, LYK_TRACE_TOGGLE = 64, LYK_TRACE_LOG = 65, LYK_IMAGE_TOGGLE = 66, LYK_INLINE_TOGGLE = 67, LYK_HEAD = 68, LYK_DO_NOTHING = 69, LYK_TOGGLE_HELP = 70, LYK_JUMP = 71, LYK_KEYMAP = 72, LYK_LIST = 73, LYK_TOOLBAR = 74, LYK_HISTORICAL = 75, LYK_MINIMAL = 76, LYK_SOFT_DQUOTES = 77, LYK_RAW_TOGGLE = 78, LYK_COOKIE_JAR = 79, LYK_F_LINK_NUM = 80, LYK_CLEAR_AUTH = 81, LYK_SWITCH_DTD = 82, LYK_ELGOTO = 83, LYK_CHANGE_LINK = 84, LYK_DWIMEDIT = 85, LYK_EDIT_TEXTAREA = 86, LYK_GROW_TEXTAREA = 87, LYK_INSERT_FILE = 88, LYK_EXTERN_LINK = 89, LYK_EXTERN_PAGE = 90, LYK_DIRED_MENU = 91, LYK_CREATE = 92, LYK_REMOVE = 93, LYK_MODIFY = 94, LYK_TAG_LINK = 95, LYK_UPLOAD = 96, LYK_INSTALL = 97, LYK_CHG_CENTER = 98, LYK_CHDIR = 99, LYK_SHIFT_LEFT = 100, LYK_SHIFT_RIGHT = 101, LYK_LINEWRAP_TOGGLE = 102, LYK_PASTE_URL = 103, LYK_TO_CLIPBOARD = 104, LYK_NESTED_TABLES = 105, } LYKeymapCode;
typedef struct {
     LYKeymapCode code;
     char *name;
     char *doc;
  } Kcmd;
typedef struct _JumpDatum JumpDatum;
typedef struct _hashbucket bucket;
typedef struct {
     int color;
     int mono;
     int cattr;
  } HTCharStyle;
typedef __time_t time_t;
typedef __mode_t mode_t;
typedef struct _LYTemp LY_TEMP;
typedef long __fd_mask;
typedef struct {
     __fd_mask fds_bits[32];
  } fd_set;
typedef int __pid_t;
typedef __pid_t pid_t;
typedef int int32_t;
typedef void LYSigHandlerFunc_t( int  );
typedef void (*__sighandler_t)( int  );
typedef union sigval sigval_t;
typedef long __clock_t;
typedef struct siginfo siginfo_t;
typedef struct {
     unsigned long __val[32];
  } __sigset_t;
typedef unsigned int __socklen_t;
typedef __socklen_t socklen_t;
typedef unsigned short sa_family_t;
typedef enum  { UIP_UNKNOWN = -1, UIP_HISTORY = 0, UIP_DOWNLOAD_OPTIONS = 1, UIP_PRINT_OPTIONS = 2, UIP_SHOWINFO = 3, UIP_LIST_PAGE = 4, UIP_VLINKS = 5, UIP_LYNXCFG = 6, UIP_OPTIONS_MENU = 7, UIP_DIRED_MENU = 8, UIP_PERMIT_OPTIONS = 9, UIP_UPLOAD_OPTIONS = 10, UIP_ADDRLIST_PAGE = 11, UIP_CONFIG_DEF = 12, UIP_TRACELOG = 13, UIP_INSTALL = 14, } UIP_t;
typedef struct uipage_entry uip_entry;
typedef struct {
     int value;
     char *LongName;
     char *HtmlName;
  } OptValues;
typedef struct {
     char *tag;
     char *value;
  } PostPair;
typedef enum  { HTL_comm = 0, HTL_tag = 1, HTL_attrib = 2, HTL_attrval = 3, HTL_abracket = 4, HTL_entity = 5, HTL_href = 6, HTL_entire = 7, HTL_badseq = 8, HTL_badtag = 9, HTL_badattr = 10, HTL_sgmlspecial = 11, HTL_num_lexemes = 12, } HTlexeme;
typedef enum  { CONF_NIL = 0, CONF_BOOL = 1, CONF_FUN = 2, CONF_TIME = 3, CONF_ENUM = 4, CONF_INT = 5, CONF_STR = 6, CONF_PRG = 7, CONF_ENV = 8, CONF_ENV2 = 9, CONF_INCLUDE = 10, CONF_ADD_ITEM = 11, CONF_ADD_STRING = 12, CONF_ADD_TRUSTED = 13, } Conf_Types;
typedef BOOLEAN optidx_set_t[207];
typedef struct _VisitedLink VisitedLink;
typedef struct {
     int code;
     LYKeymap_t map;
     LYKeymap_t save;
  } ANY_KEYS;
typedef struct _HTStructured HTStructured;
typedef struct _HTStructuredClass HTStructuredClass;
typedef struct {
     char *name;
     char type;
     char __pad[3];
  } attr;
typedef attr *AttrList;
typedef struct {
     char *name;
     AttrList list;
  } AttrType;
typedef enum  { SGML_EMPTY = 0, SGML_LITTERAL = 1, SGML_CDATA = 2, SGML_SCRIPT = 3, SGML_RCDATA = 4, SGML_MIXED = 5, SGML_ELEMENT = 6, SGML_PCDATA = 7, } SGMLContent;
typedef int TagClass;
typedef int TagFlags;
typedef struct _tag HTTag;
typedef struct _stack_element stack_element;
typedef enum  { HTML_A = 0, HTML_ABBR = 1, HTML_ACRONYM = 2, HTML_ADDRESS = 3, HTML_APPLET = 4, HTML_AREA = 5, HTML_AU = 6, HTML_AUTHOR = 7, HTML_B = 8, HTML_BANNER = 9, HTML_BASE = 10, HTML_BASEFONT = 11, HTML_BDO = 12, HTML_BGSOUND = 13, HTML_BIG = 14, HTML_BLINK = 15, HTML_BLOCKQUOTE = 16, HTML_BODY = 17, HTML_BODYTEXT = 18, HTML_BQ = 19, HTML_BR = 20, HTML_BUTTON = 21, HTML_CAPTION = 22, HTML_CENTER = 23, HTML_CITE = 24, HTML_CODE = 25, HTML_COL = 26, HTML_COLGROUP = 27, HTML_COMMENT = 28, HTML_CREDIT = 29, HTML_DD = 30, HTML_DEL = 31, HTML_DFN = 32, HTML_DIR = 33, HTML_DIV = 34, HTML_DL = 35, HTML_DLC = 36, HTML_DT = 37, HTML_EM = 38, HTML_EMBED = 39, HTML_FIELDSET = 40, HTML_FIG = 41, HTML_FN = 42, HTML_FONT = 43, HTML_FORM = 44, HTML_FRAME = 45, HTML_FRAMESET = 46, HTML_H1 = 47, HTML_H2 = 48, HTML_H3 = 49, HTML_H4 = 50, HTML_H5 = 51, HTML_H6 = 52, HTML_HEAD = 53, HTML_HR = 54, HTML_HTML = 55, HTML_HY = 56, HTML_I = 57, HTML_IFRAME = 58, HTML_IMG = 59, HTML_INPUT = 60, HTML_INS = 61, HTML_ISINDEX = 62, HTML_KBD = 63, HTML_KEYGEN = 64, HTML_LABEL = 65, HTML_LEGEND = 66, HTML_LH = 67, HTML_LI = 68, HTML_LINK = 69, HTML_LISTING = 70, HTML_MAP = 71, HTML_MARQUEE = 72, HTML_MATH = 73, HTML_MENU = 74, HTML_META = 75, HTML_NEXTID = 76, HTML_NOFRAMES = 77, HTML_NOTE = 78, HTML_OBJECT = 79, HTML_OL = 80, HTML_OPTION = 81, HTML_OVERLAY = 82, HTML_P = 83, HTML_PARAM = 84, HTML_PLAINTEXT = 85, HTML_PRE = 86, HTML_Q = 87, HTML_S = 88, HTML_SAMP = 89, HTML_SCRIPT = 90, HTML_SELECT = 91, HTML_SHY = 92, HTML_SMALL = 93, HTML_SPAN = 94, HTML_SPOT = 95, HTML_STRIKE = 96, HTML_STRONG = 97, HTML_STYLE = 98, HTML_SUB = 99, HTML_SUP = 100, HTML_TAB = 101, HTML_TABLE = 102, HTML_TBODY = 103, HTML_TD = 104, HTML_TEXTAREA = 105, HTML_TEXTFLOW = 106, HTML_TFOOT = 107, HTML_TH = 108, HTML_THEAD = 109, HTML_TITLE = 110, HTML_TR = 111, HTML_TT = 112, HTML_U = 113, HTML_UL = 114, HTML_VAR = 115, HTML_WBR = 116, HTML_XMP = 117, HTML_ALT_OBJECT = 118, } HTMLElement;
typedef struct _HT_tagspec HT_tagspec;
typedef struct _HTPresentation HTPresentation;
typedef HTStream *HTConverter( HTPresentation *, HTParentAnchor *, HTStream * );
typedef struct {
     HTTag *tags;
     int number_of_tags;
     char **entity_names;
     size_t number_of_entities;
  } SGML_dtd;
typedef enum  { mediaINT = 1, mediaEXT = 2, mediaCFG = 4, mediaUSR = 8, mediaSYS = 16, mediaOpt1 = 1, mediaOpt2 = 5, mediaOpt3 = 13, mediaOpt4 = 29, mediaALL = 31, } AcceptMedia;
typedef unsigned char LYEditCode;
typedef long UCode_t;
typedef struct {
     char *name;
     unsigned short code;
     char __pad[2];
  } UC_entity_info;
typedef struct _names_pairs names_pairs;
typedef enum  { st_HTML = 0, st_URL = 1, st_other = 2, } CharUtil_st;
typedef struct _LYImageMap LYImageMap;
typedef struct _LYMapElement LYMapElement;
typedef struct _cookie cookie;
typedef enum  { HTSRC_CK_normal = 0, HTSRC_CK_seen_excl = 1, HTSRC_CK_after_tagname = 2, HTSRC_CK_seen_dot = 3, } html_src_check_state;
typedef enum  { CS_invalid = -1, CS__new = 0, CS__0new = 1, CS__0eb = 2, CS__eb = 3, CS__0cb = 4, CS__cb = 5, CS__0ef = 6, CS__ef = 7, CS__0cf = 8, CS__cf = 9, CS__ebc = 10, CS__cbc = 11, } cellstate_t;
typedef struct _STable_cellinfo STable_cellinfo;
typedef struct _STable_rowinfo STable_rowinfo;
typedef struct _STable_states STable_states;
typedef enum _MERIDIAN { MERam = 0, MERpm = 1, MER24 = 2, } MERIDIAN;
typedef enum _DSTMODE { DSTon = 0, DSToff = 1, DSTmaybe = 2, } DSTMODE;
typedef struct _TABLE TABLE;
typedef struct _TIMEINFO TIMEINFO;
typedef union {
     time_t Number;
     enum _MERIDIAN  Meridian;
  } YYSTYPE;
typedef void *iconv_t;
typedef void putc_func_t( HTStream *, char  );
typedef __dev_t dev_t;
typedef __ino64_t ino_t;
typedef struct {
     struct stat {
       __dev_t st_dev;
       unsigned short __pad1;
       __ino_t __st_ino;
       __mode_t st_mode;
       __nlink_t st_nlink;
       __uid_t st_uid;
       __gid_t st_gid;
       __dev_t st_rdev;
       unsigned short __pad2;
       __off64_t st_size;
       __blksize_t st_blksize;
       __blkcnt64_t st_blocks;
       struct timespec {
         __time_t tv_sec;
         long tv_nsec;
      } st_atim;
       struct timespec  st_mtim;
       struct timespec  st_ctim;
       __ino64_t st_ino;
    } file_info;
     char sort_tags;
     char file_name[1];
     char __pad[2];
  } DIRED;
typedef struct _HTSuffix HTSuffix;
typedef __gid_t gid_t;
typedef __uid_t uid_t;
typedef struct __dirstream DIR;
typedef struct _HTBTree_element HTBTElement;
typedef void *voidp;
typedef voidp gzFile;
typedef enum  { ppUnknown = 0, ppBZIP2 = 1, ppCHMOD = 2, ppCOMPRESS = 3, ppCOPY = 4, ppCSWING = 5, ppGZIP = 6, ppINFLATE = 7, ppINSTALL = 8, ppMKDIR = 9, ppMV = 10, ppRLOGIN = 11, ppRM = 12, ppRMDIR = 13, ppSETFONT = 14, ppTAR = 15, ppTELNET = 16, ppTN3270 = 17, ppTOUCH = 18, ppUNCOMPRESS = 19, ppUNZIP = 20, ppUUDECODE = 21, ppZCAT = 22, ppZIP = 23, pp_Last = 24, } ProgramPaths;
typedef struct _connection connection;
typedef enum  { GENERIC_SERVER = 0, MACHTEN_SERVER = 1, UNIX_SERVER = 2, VMS_SERVER = 3, CMS_SERVER = 4, DCTS_SERVER = 5, TCPC_SERVER = 6, PETER_LEWIS_SERVER = 7, NCSA_SERVER = 8, WINDOWS_NT_SERVER = 9, WINDOWS_2K_SERVER = 10, MS_WINDOWS_SERVER = 11, MSDOS_SERVER = 12, APPLESHARE_SERVER = 13, NETPRESENZ_SERVER = 14, DLS_SERVER = 15, } eServerType;
typedef unsigned short uint16_t;
typedef uint16_t in_port_t;
typedef unsigned int uint32_t;
typedef uint32_t in_addr_t;
typedef struct _EntryInfo EntryInfo;
typedef unsigned short PortNumber;
typedef struct sockaddr_storage SockA;
typedef struct {
     struct hostent {
       char *h_name;
       char **h_aliases;
       int h_addrtype;
       int h_length;
       char **h_addr_list;
    } h;
     char rest[128];
  } AlignedHOSTENT;
typedef __sigset_t sigset_t;
typedef enum  { S_text = 0, S_attr = 1, S_attr_gap = 2, S_comment = 3, S_cro = 4, S_doctype = 5, S_dollar = 6, S_dollar_dq = 7, S_dollar_paren = 8, S_dollar_paren_dq = 9, S_dollar_paren_sq = 10, S_dollar_sq = 11, S_dquoted = 12, S_end = 13, S_entity = 14, S_equals = 15, S_ero = 16, S_esc = 17, S_esc_dq = 18, S_esc_sq = 19, S_exclamation = 20, S_in_kanji = 21, S_incro = 22, S_junk_tag = 23, S_litteral = 24, S_marked = 25, S_nonascii_text = 26, S_nonascii_text_dq = 27, S_nonascii_text_sq = 28, S_paren = 29, S_paren_dq = 30, S_paren_sq = 31, S_pcdata = 32, S_pi = 33, S_script = 34, S_sgmlatt = 35, S_sgmlele = 36, S_sgmlent = 37, S_squoted = 38, S_tag = 39, S_tag_gap = 40, S_tagname_slash = 41, S_value = 42, } sgml_state;
typedef struct _HTElement HTElement;
typedef enum  { close_NO = 0, close_error = 1, close_valid = 2, } canclose_t;
typedef char *__gnuc_va_list;
typedef __gnuc_va_list va_list;
typedef enum  { HT_Invalid = 0, HT_Map = 1, HT_Pass = 2, HT_Fail = 3, HT_DefProt = 4, HT_Protect = 5, HT_Progress = 6, HT_InfoMsg = 7, HT_UserMsg = 8, HT_Alert = 9, HT_AlwaysAlert = 10, HT_Redirect = 11, HT_RedirectPerm = 12, HT_PermitRedir = 13, HT_UseProxy = 14, } HTRuleOp;
typedef struct _rule rule;
typedef unsigned char Byte;
typedef Byte Bytef;
typedef unsigned int uInt;
typedef unsigned long uLong;
typedef void *voidpf;
typedef voidpf (*alloc_func)( voidpf , uInt , uInt  );
typedef void (*free_func)( voidpf , voidpf  );
typedef struct z_stream_s z_stream;
typedef enum  { MIME_TRANSPARENT = 0, MIME_CHUNKED = 1, mcCHUNKED_COUNT_DIGIT = 2, mcCHUNKED_COUNT_CR = 3, mcCHUNKED_COUNT_LF = 4, mcCHUNKED_EXTENSION = 5, mcCHUNKED_DATA = 6, mcCHUNKED_DATA_CR = 7, mcCHUNKED_DATA_LF = 8, miBEGINNING_OF_LINE = 9, miA = 10, miACCEPT_RANGES = 11, miAGE = 12, miAL = 13, miALLOW = 14, miALTERNATES = 15, miC = 16, miCACHE_CONTROL = 17, miCO = 18, miCOOKIE = 19, miCON = 20, miCONNECTION = 21, miCONTENT_ = 22, miCONTENT_BASE = 23, miCONTENT_DISPOSITION = 24, miCONTENT_ENCODING = 25, miCONTENT_FEATURES = 26, miCONTENT_L = 27, miCONTENT_LANGUAGE = 28, miCONTENT_LENGTH = 29, miCONTENT_LOCATION = 30, miCONTENT_MD5 = 31, miCONTENT_RANGE = 32, miCONTENT_T = 33, miCONTENT_TRANSFER_ENCODING = 34, miCONTENT_TYPE = 35, miDATE = 36, miE = 37, miETAG = 38, miEXPIRES = 39, miKEEP_ALIVE = 40, miL = 41, miLAST_MODIFIED = 42, miLINK = 43, miLOCATION = 44, miP = 45, miPR = 46, miPRAGMA = 47, miPROXY_AUTHENTICATE = 48, miPUBLIC = 49, miR = 50, miRE = 51, miREFRESH = 52, miRETRY_AFTER = 53, miS = 54, miSAFE = 55, miSE = 56, miSERVER = 57, miSET_COOKIE = 58, miSET_COOKIE1 = 59, miSET_COOKIE2 = 60, miT = 61, miTITLE = 62, miTRANSFER_ENCODING = 63, miU = 64, miUPGRADE = 65, miURI = 66, miV = 67, miVARY = 68, miVIA = 69, miW = 70, miWARNING = 71, miWWW_AUTHENTICATE = 72, miSKIP_GET_VALUE = 73, miGET_VALUE = 74, miJUNK_LINE = 75, miNEWLINE = 76, miCHECK = 77, MIME_NET_ASCII = 78, MIME_IGNORE = 79, } MIME_state;
typedef struct _NNTPAuth NNTPAuth;
typedef enum  { NNTPAUTH_ERROR = 0, NNTPAUTH_OK = 281, NNTPAUTH_CLOSE = 502, } NNTPAuthResult;
typedef struct _CSOfield_info CSOfield_info;
typedef struct _CSOformgen_context CSOformgen_context;
typedef struct {
     char *hostname;
     int portnumber;
     BOOLEAN IsProxy;
     HTList *setups;
     HTList *realms;
  } HTAAServer;
typedef HTList HTAssocList;
typedef struct {
     HTAAServer *server;
     char *ctemplate;
     HTList *valid_schemes;
     HTAssocList **scheme_specifics;
     BOOLEAN retry;
     char __pad[3];
  } HTAASetup;
typedef struct {
     char *realmname;
     char *username;
     char *password;
  } HTAARealm;
typedef enum  { HTAA_UNKNOWN = 0, HTAA_NONE = 1, HTAA_BASIC = 2, HTAA_PUBKEY = 3, HTAA_KERBEROS_V4 = 4, HTAA_KERBEROS_V5 = 5, HTAA_MAX_SCHEMES = 6, } HTAAScheme;
typedef HTList ItemList;
typedef struct {
     char *group_name;
     ItemList *item_list;
  } GroupDef;
typedef struct {
     char *ctemplate;
     char *filename;
     char *uid_name;
     char *gid_name;
     GroupDef *mask_group;
     HTList *valid_schemes;
     HTAssocList *values;
  } HTAAProt;
typedef enum  { LEX_NONE = 0, LEX_EOF = 1, LEX_REC_SEP = 2, LEX_FIELD_SEP = 3, LEX_ITEM_SEP = 4, LEX_OPEN_PAREN = 5, LEX_CLOSE_PAREN = 6, LEX_AT_SIGN = 7, LEX_ALPH_STR = 8, LEX_TMPL_STR = 9, } LexItem;
typedef struct {
     char *prot_filename;
     HTAAProt *prot;
  } HTAAProtCache;
typedef struct {
     char *name;
     int user;
  } USER_DATA;
typedef struct {
     char *name;
     char *value;
  } HTAssoc;
typedef enum  { METHOD_UNKNOWN = 0, METHOD_GET = 1, METHOD_PUT = 2, } HTAAMethod;
typedef HTList AddressDefList;
typedef struct {
     char *name;
     GroupDef *translation;
  } Ref;
typedef HTList UserDefList;
typedef struct {
     UserDefList *user_def_list;
     AddressDefList *address_def_list;
  } Item;
struct _IO_FILE {
     int _flags;
     char *_IO_read_ptr;
     char *_IO_read_end;
     char *_IO_read_base;
     char *_IO_write_base;
     char *_IO_write_ptr;
     char *_IO_write_end;
     char *_IO_buf_base;
     char *_IO_buf_end;
     char *_IO_save_base;
     char *_IO_backup_base;
     char *_IO_save_end;
     struct _IO_marker {
       struct _IO_marker  *_next;
       struct _IO_FILE  *_sbuf;
       int _pos;
    } *_markers;
     struct _IO_FILE  *_chain;
     int _fileno;
     int _flags2;
     __off_t _old_offset;
     unsigned short _cur_column;
     char _vtable_offset;
     char _shortbuf[1];
     _IO_lock_t *_lock;
     __off64_t _offset;
     void *__pad1;
     void *__pad2;
     void *__pad3;
     void *__pad4;
     size_t __pad5;
     int _mode;
     char _unused2[40];
  } ;
struct _LYUCcharset {
     int UChndl;
     char *MIMEname;
     int enc;
     int codepage;
     int repertoire;
     int codepoints;
     int cpranges;
     int like8859;
  } ;
struct _OptionType {
     char *name;
     char *cp_submit_value;
     int value_cs;
     struct _OptionType  *next;
  } ;
struct _HText  ;
struct _HTParentAnchor0 {
     HTParentAnchor0 *parent;
     char *address;
     HTParentAnchor *info;
     HTBTree *children;
     HTList sources;
     HTList _add_adult;
     short adult_hash;
     BOOLEAN underway;
     char __pad[1];
  } ;
struct _HTParentAnchor {
     HTParentAnchor0 *parent;
     HTList children_notag;
     HyperDoc *document;
     char *address;
     bstring *post_data;
     char *post_content_type;
     char *bookmark;
     HTFormat format;
     char *charset;
     BOOLEAN isIndex;
     char *isIndexAction;
     char *isIndexPrompt;
     char *title;
     char *owner;
     char *RevTitle;
     char *citehost;
     char *style;
     HTList *methods;
     void *protocol;
     char *physical;
     BOOLEAN isISMAPScript;
     BOOLEAN isHEAD;
     BOOLEAN safe;
     char *source_cache_file;
     HTChunk *source_cache_chunk;
     char *FileCache;
     char *SugFname;
     char *cache_control;
     BOOLEAN no_cache;
     BOOLEAN inBASE;
     char *content_type_params;
     char *content_type;
     char *content_language;
     char *content_encoding;
     char *content_base;
     char *content_disposition;
     char *content_location;
     char *content_md5;
     char *message_id;
     char *subject;
     int content_length;
     char *date;
     char *expires;
     char *last_modified;
     char *ETag;
     char *server;
     UCAnchorInfo *UCStages;
     HTList *imaps;
  } ;
struct _HTBTree_top {
     HTComparer compare;
     struct _HTBTree_element {
       void *object;
       struct _HTBTree_element  *up;
       struct _HTBTree_element  *left;
       int left_depth;
       struct _HTBTree_element  *right;
       int right_depth;
    } *top;
  } ;
struct _HTList {
     void *object;
     HTList *next;
  } ;
struct _HyperDoc  ;
struct _HTAtom {
     HTAtom *next;
     char *name;
  } ;
struct _HTChunk {
     int size;
     int growby;
     int allocated;
     char *data;
     int failok;
     HTChunk *next;
  } ;
struct _UCAnchorInfo {
     struct _UCStageInfo {
       int lock;
       int LYhndl;
       LYUCcharset C;
    } s[4];
  } ;
struct _win_st {
     short _cury;
     short _curx;
     short _maxy;
     short _maxx;
     short _begy;
     short _begx;
     short _flags;
     attr_t _attrs;
     chtype _bkgd;
     _Bool _notimeout;
     _Bool _clear;
     _Bool _leaveok;
     _Bool _scroll;
     _Bool _idlok;
     _Bool _idcok;
     _Bool _immed;
     _Bool _sync;
     _Bool _use_keypad;
     int _delay;
     struct ldat  *_line;
     short _regtop;
     short _regbottom;
     int _parx;
     int _pary;
     WINDOW *_parent;
     struct pdat {
       short _pad_y;
       short _pad_x;
       short _pad_top;
       short _pad_left;
       short _pad_bottom;
       short _pad_right;
    } _pad;
     short _yoffset;
     cchar_t _bkgrnd;
  } ;
struct _EditFieldData {
     int sx;
     int sy;
     int dspwdth;
     int strlen;
     int maxlen;
     char pad;
     BOOLEAN hidden;
     BOOLEAN dirty;
     BOOLEAN panon;
     int xpan;
     int pos;
     int margin;
     int current_modifiers;
     int mark;
     char buffer[1024];
     int offset2col[2048];
     int col2offset[2048];
  } ;
struct termtype {
     char *term_names;
     char *str_table;
     char *Booleans;
     short *Numbers;
     char **Strings;
     char *ext_str_table;
     char **ext_Names;
     unsigned short num_Booleans;
     unsigned short num_Numbers;
     unsigned short num_Strings;
     unsigned short ext_Booleans;
     unsigned short ext_Numbers;
     unsigned short ext_Strings;
  } ;
struct term {
     TERMTYPE type;
     short Filedes;
     struct termios {
       tcflag_t c_iflag;
       tcflag_t c_oflag;
       tcflag_t c_cflag;
       tcflag_t c_lflag;
       cc_t c_line;
       cc_t c_cc[32];
       speed_t c_ispeed;
       speed_t c_ospeed;
    } Ottyb;
     struct termios  Nttyb;
     int _baudrate;
     char *_termname;
  } ;
struct _domain_entry {
     char *domain;
     behaviour_t bv;
     invcheck_behaviour_t invcheck_bv;
     HTList *cookie_list;
  } ;
struct _HTPool {
     pool_data data[2042];
     struct _HTPool  *prev;
     int used;
  } ;
struct _line {
     struct _line  *next;
     struct _line  *prev;
     unsigned short offset;
     unsigned short size;
     HTStyleChange *styles;
     unsigned short numstyles;
     char data[1];
     char __pad[1];
  } ;
struct _FormInfo  ;
struct _HTAnchor {
     HTParentAnchor0 *parent;
  } ;
struct _TextAnchor {
     struct _TextAnchor  *next;
     struct _TextAnchor  *prev;
     int sgml_offset;
     int number;
     int line_num;
     short line_pos;
     short extent;
     BOOLEAN show_anchor;
     BOOLEAN inUnderline;
     BOOLEAN expansion_anch;
     char link_type;
     FormInfo *input_field;
     HiliteList lites;
     HTChildAnchor *anchor;
  } ;
struct _HTStyle {
     struct _HTStyle  *next;
     char *name;
     int id;
     char *SGMLTag;
     HTFont font;
     HTCoord fontSize;
     HTColor color;
     int superscript;
     HTAnchor *anchor;
     HTCoord indent1st;
     HTCoord leftIndent;
     HTCoord rightIndent;
     short alignment;
     HTCoord lineHt;
     HTCoord descentLine;
     HTTabStop *tabs;
     BOOLEAN wordWrap;
     BOOLEAN freeFormat;
     HTCoord spaceBefore;
     HTCoord spaceAfter;
     int paraFlags;
  } ;
struct _STable_info  ;
struct _UCTransParams {
     BOOLEAN transp;
     BOOLEAN do_cjk;
     BOOLEAN decode_utf8;
     BOOLEAN output_utf8;
     BOOLEAN use_raw_char_in;
     BOOLEAN strip_raw_char_in;
     BOOLEAN pass_160_173_raw;
     BOOLEAN do_8bitraw;
     BOOLEAN trans_to_uni;
     BOOLEAN trans_C0_to_uni;
     BOOLEAN repl_translated_C0;
     BOOLEAN trans_from_uni;
  } ;
struct _HTStream {
     HTStreamClass *isa;
  } ;
struct _HTStreamClass {
     char *name;
     void (*_free)( HTStream * );
     void (*_abort)( HTStream *, HTError  );
     void (*put_character)( HTStream *, char  );
     void (*put_string)( HTStream *, char * );
     void (*put_block)( HTStream *, char *, int  );
  } ;
struct _PerFormInfo {
     int number;
     int disabled;
     struct _PerFormInfo  *next;
     int nfields;
     FormInfo *first_field;
     FormInfo *last_field;
     char *accept_cs;
     char *thisacceptcs;
  } ;
struct _HTStyleSheet {
     char *name;
     HTStyle *styles;
  } ;
struct _InputFieldData {
     char *accept;
     char *align;
     int checked;
     char *iclass;
     int disabled;
     char *error;
     char *height;
     char *id;
     char *lang;
     char *max;
     char *maxlength;
     char *md;
     char *min;
     char *name;
     int size;
     char *src;
     char *type;
     char *value;
     char *width;
     int name_cs;
     int value_cs;
     char *accept_cs;
  } ;
struct _HTProtocol {
     char *name;
     int (*load)( char *, HTParentAnchor *, HTFormat , HTStream * );
     HTStream *(*saveStream)( HTParentAnchor * );
  } ;
struct _DocAddress {
     char *address;
     bstring *post_data;
     char *post_content_type;
     char *bookmark;
     BOOLEAN isHEAD;
     BOOLEAN safe;
     char __pad[2];
  } ;
struct parse_args_type {
     char *name;
     int type;
     long value;
     char *help_string;
  } ;
struct _lynx_list_item_type {
     struct _lynx_list_item_type  *next;
     char *name;
     char *command;
     int always_enabled;
     BOOLEAN override_primary_action;
     int pagelen;
  } ;
struct _JumpDatum {
     char *key;
     char *url;
  } ;
struct _hashbucket {
     char *name;
     int code;
     int color;
     int mono;
     int cattr;
     struct _hashbucket  *next;
  } ;
struct _LYTemp {
     struct _LYTemp  *next;
     char *name;
     BOOLEAN outs;
     FILE *file;
  } ;
union sigval {
     int sival_int;
     void *sival_ptr;
  } ;
struct siginfo {
     int si_signo;
     int si_errno;
     int si_code;
     union {
       int _pad[29];
       struct {
         __pid_t si_pid;
         __uid_t si_uid;
      } _kill;
       struct {
         int si_tid;
         int si_overrun;
         sigval_t si_sigval;
      } _timer;
       struct {
         __pid_t si_pid;
         __uid_t si_uid;
         sigval_t si_sigval;
      } _rt;
       struct {
         __pid_t si_pid;
         __uid_t si_uid;
         int si_status;
         __clock_t si_utime;
         __clock_t si_stime;
      } _sigchld;
       struct {
         void *si_addr;
      } _sigfault;
       struct {
         long si_band;
         int si_fd;
      } _sigpoll;
    } _sifields;
  } ;
struct uipage_entry {
     UIP_t type;
     unsigned int flags;
     char *url;
     HTList *alturls;
     char *file;
  } ;
struct _VisitedLink {
     char *title;
     char *address;
     int level;
     struct _VisitedLink  *next_tree;
     struct _VisitedLink  *prev_latest;
     struct _VisitedLink  *next_latest;
     struct _VisitedLink  *prev_first;
  } ;
struct _HTStructured {
     HTStructuredClass *isa;
     HTParentAnchor *node_anchor;
     HText *text;
     HTStream *target;
     HTStreamClass targetClass;
     HTChildAnchor *CurrentA;
     int CurrentANum;
     char *base_href;
     char *map_address;
     HTChunk title;
     HTChunk object;
     BOOLEAN object_started;
     BOOLEAN object_declare;
     BOOLEAN object_shapes;
     BOOLEAN object_ismap;
     char *object_usemap;
     char *object_id;
     char *object_title;
     char *object_data;
     char *object_type;
     char *object_classid;
     char *object_codebase;
     char *object_codetype;
     char *object_name;
     int objects_mixed_open;
     int objects_figged_open;
     HTChunk option;
     BOOLEAN first_option;
     char *LastOptionValue;
     BOOLEAN LastOptionChecked;
     BOOLEAN select_disabled;
     HTChunk textarea;
     char *textarea_name;
     int textarea_name_cs;
     char *textarea_accept_cs;
     int textarea_cols;
     int textarea_rows;
     int textarea_disabled;
     char *textarea_id;
     HTChunk math;
     HTChunk style_block;
     HTChunk script;
     int List_Nesting_Level;
     int OL_Counter[12];
     char OL_Type[12];
     int Last_OL_Count;
     char Last_OL_Type;
     int Division_Level;
     short DivisionAlignments[800];
     int Underline_Level;
     int Quote_Level;
     BOOLEAN UsePlainSpace;
     BOOLEAN HiddenValue;
     int lastraw;
     char *comment_start;
     char *comment_end;
     HTTag *current_tag;
     BOOLEAN style_change;
     HTStyle *new_style;
     HTStyle *old_style;
     int current_default_alignment;
     BOOLEAN in_word;
     stack_element stack[800];
     stack_element *sp;
     BOOLEAN stack_overrun;
     int skip_stack;
     BOOLEAN inA;
     BOOLEAN inAPPLET;
     BOOLEAN inAPPLETwithP;
     BOOLEAN inBadBASE;
     BOOLEAN inBadHREF;
     BOOLEAN inBadHTML;
     BOOLEAN inBASE;
     BOOLEAN inBoldA;
     BOOLEAN inBoldH;
     BOOLEAN inCAPTION;
     BOOLEAN inCREDIT;
     BOOLEAN inFIG;
     BOOLEAN inFIGwithP;
     BOOLEAN inFONT;
     BOOLEAN inFORM;
     BOOLEAN inLABEL;
     BOOLEAN inP;
     BOOLEAN inPRE;
     BOOLEAN inSELECT;
     BOOLEAN inTABLE;
     BOOLEAN inTEXTAREA;
     BOOLEAN inUnderline;
     BOOLEAN needBoldH;
     char *xinclude;
     LYUCcharset *UCI;
     int UCLYhndl;
     LYUCcharset *inUCI;
     int inUCLYhndl;
     LYUCcharset *outUCI;
     int outUCLYhndl;
     UCTransParams T;
     int tag_charset;
  } ;
struct _HTStructuredClass {
     char *name;
     void (*_free)( HTStructured * );
     void (*_abort)( HTStructured *, HTError  );
     void (*put_character)( HTStructured *, char  );
     void (*put_string)( HTStructured *, char * );
     void (*put_block)( HTStructured *, char *, int  );
     int (*start_element)( HTStructured *, int , BOOLEAN *, char **, int , char ** );
     int (*end_element)( HTStructured *, int , char ** );
     int (*put_entity)( HTStructured *, int  );
  } ;
struct _tag {
     char *name;
     int name_len;
     BOOLEAN can_justify;
     AttrList attributes;
     int number_of_attributes;
     AttrType *attr_types;
     SGMLContent contents;
     TagClass tagclass;
     TagClass contains;
     TagClass icontains;
     TagClass contained;
     TagClass icontained;
     TagClass canclose;
     TagFlags flags;
  } ;
struct _stack_element {
     HTStyle *style;
     int tag_number;
  } ;
struct _HT_tagspec {
     struct _HT_tagspec  *next;
     int style;
     char *class_name;
     HTMLElement element;
     BOOLEAN *present;
     char **value;
     BOOLEAN start;
     char __pad[3];
  } ;
struct _HTPresentation {
     HTAtom *rep;
     HTAtom *rep_out;
     HTConverter *converter;
     char *command;
     char *testcommand;
     float quality;
     float secs;
     float secs_per_byte;
     off_t maxbytes;
     BOOLEAN get_accept;
     int accept_opt;
  } ;
struct _names_pairs {
     char *fullname;
     char *MIMEname;
  } ;
enum _state { S_text = 0, S_esc = 1, S_dollar = 2, S_paren = 3, S_nonascii_text = 4, S_dollar_paren = 5, } ;
enum comment_state { start1 = 0, start2 = 1, end1 = 2, end2 = 3, } ;
enum _parsing_what { P_text = 0, P_utf8 = 1, P_hex = 2, P_decimal = 3, P_named = 4, } ;
struct _LYImageMap {
     char *address;
     char *title;
     HTList *elements;
  } ;
struct _LYMapElement {
     char *address;
     char *title;
  } ;
struct _cookie {
     char *lynxID;
     char *name;
     char *value;
     int version;
     char *comment;
     char *commentURL;
     char *domain;
     int port;
     char *PortList;
     char *path;
     int pathlen;
     int flags;
     time_t expires;
     BOOLEAN quoted;
     char __pad[3];
  } ;
struct _STable_cellinfo {
     int cLine;
     int pos;
     int len;
     int colspan;
     int alignment;
  } ;
enum ended_state { ROW_not_ended = 0, ROW_ended_by_endtr = 1, ROW_ended_by_splitline = 2, } ;
struct _STable_rowinfo {
     int Line;
     int ncells;
     BOOLEAN fixed_line;
     enum ended_state  ended;
     int content;
     int offset;
     int allocated;
     STable_cellinfo *cells;
     int alignment;
  } ;
struct _STable_states {
     cellstate_t prev_state;
     cellstate_t state;
     int lineno;
     int icell_core;
     int x_td;
     int pending_len;
  } ;
struct _TABLE {
     char *name;
     int type;
     time_t value;
  } ;
struct _TIMEINFO {
     time_t time;
     long usec;
     long tzone;
  } ;
struct _HTSuffix {
     char *suffix;
     HTAtom *rep;
     HTAtom *encoding;
     char *desc;
     float quality;
  } ;
struct __dirstream  ;
struct _HTBTree_element  ;
struct _connection {
     struct _connection  *next;
     unsigned long addr;
     int socket;
     BOOLEAN binary;
     char __pad[3];
  } ;
struct _EntryInfo {
     char *filename;
     char *linkname;
     char *type;
     char *date;
     unsigned int size;
     BOOLEAN display;
     char __pad[3];
  } ;
struct sockaddr_storage {
     sa_family_t ss_family;
     unsigned long __ss_align;
     char __ss_padding[120];
  } ;
struct _HTElement {
     HTElement *next;
     HTTag *tag;
  } ;
struct _rule {
     struct _rule  *next;
     HTRuleOp op;
     char *pattern;
     char *equiv;
     char *condition_op;
     char *condition;
  } ;
struct z_stream_s {
     Bytef *next_in;
     uInt avail_in;
     uLong total_in;
     Bytef *next_out;
     uInt avail_out;
     uLong total_out;
     char *msg;
     struct internal_state {
       int dummy;
    } *state;
     alloc_func zalloc;
     free_func zfree;
     voidpf opaque;
     int data_type;
     uLong adler;
     uLong reserved;
  } ;
struct _NNTPAuth {
     char *host;
     char *user;
     char *pass;
  } ;
struct _CSOfield_info {
     struct _CSOfield_info  *next;
     char *name;
     char *attributes;
     char *description;
     int id;
     int lookup;
     int indexed;
     int url;
     int max_size;
     int defreturn;
     int explicit_return;
     int reserved;
     int gpublic;
     char name_buf[16];
     char desc_buf[32];
     char attr_buf[80];
  } ;
struct _CSOformgen_context {
     char *host;
     char *seek;
     CSOfield_info *fld;
     int port;
     int cur_line;
     int cur_off;
     int rep_line;
     int rep_off;
     int public_override;
     int field_select;
  } ;
enum _login_protocol { telnet = 0, rlogin = 1, tn3270 = 2, } ;
enum tokenstate { beginning = 0, before_tag = 1, colon = 2, before_value = 3, value = 4, bracketed_value = 5, quoted_value = 6, escape_in_quoted = 7, done = 8, } ;
struct complex {
     double real;
     double imaginary;
  } ;
struct _HText  ;
struct timeval {
     __time_t tv_sec;
     __suseconds_t tv_usec;
  } ;
struct _HText {
     HTParentAnchor *node_anchor;
     HTLine *last_line;
     HTLineTemp temp_line[2];
     int Lines;
     TextAnchor *first_anchor;
     TextAnchor *last_anchor;
     TextAnchor *last_anchor_before_stbl;
     TextAnchor *last_anchor_before_split;
     HTList *forms;
     int last_anchor_number;
     BOOLEAN source;
     BOOLEAN toolbar;
     HTList *tabs;
     HTList *hidden_links;
     int hiddenlinkflag;
     BOOLEAN no_cache;
     char LastChar;
     BOOLEAN IgnoreExcess;
     HTStyle *style;
     int display_on_the_fly;
     int top_of_screen;
     HTLine *top_of_screen_line;
     HTLine *next_line;
     unsigned int permissible_split;
     BOOLEAN in_line_1;
     BOOLEAN stale;
     BOOLEAN page_has_target;
     BOOLEAN has_utf8;
     BOOLEAN had_utf8;
     int first_lineno_last_disp_partial;
     int last_lineno_last_disp_partial;
     STable_info *stbl;
     HTList *enclosed_stbl;
     HTkcode kcode;
     HTkcode specified_kcode;
     eDetectedKCode detected_kcode;
     eSJIS_status SJIS_status;
     eEUC_status EUC_status;
     eGridState state;
     int kanji_buf;
     int in_sjis;
     int halted;
     BOOLEAN have_8bit_chars;
     LYUCcharset *UCI;
     int UCLYhndl;
     UCTransParams T;
     HTStream *target;
     HTStreamClass targetClass;
     HTPool *pool;
     BOOLEAN clickable_images;
     BOOLEAN pseudo_inline_alts;
     BOOLEAN verbose_img;
     BOOLEAN raw_mode;
     BOOLEAN historical_comments;
     BOOLEAN minimal_comments;
     BOOLEAN soft_dquotes;
     short old_dtd;
     short keypad_mode;
     short disp_lines;
     short disp_cols;
  } ;
struct agroup {
     TextAnchor *anc;
     int prev_anchor_line;
     int anchors_this_line;
     int anchors_this_group;
  } ;
struct trust {
     char *src;
     char *path;
     int type;
     struct trust  *next;
  } ;
struct JumpTable {
     int key;
     int nel;
     char *msg;
     char *file;
     char *shortcut;
     HTList *history;
     JumpDatum *table;
     struct JumpTable  *next;
     char *mp;
  } ;
struct utmp {
     short ut_type;
     pid_t ut_pid;
     char ut_line[32];
     char ut_id[4];
     char ut_user[32];
     char ut_host[256];
     struct exit_status {
       short e_termination;
       short e_exit;
    } ut_exit;
     long ut_session;
     struct timeval  ut_tv;
     int32_t ut_addr_v6[4];
     char __unused[20];
  } ;
struct sigaction {
     union {
       __sighandler_t sa_handler;
       void (*sa_sigaction)( int , siginfo_t *, void * );
    } __sigaction_handler;
     __sigset_t sa_mask;
     int sa_flags;
     void (*sa_restorer)( void );
  } ;
struct winsize {
     unsigned short ws_row;
     unsigned short ws_col;
     unsigned short ws_xpixel;
     unsigned short ws_ypixel;
  } ;
struct addrinfo {
     int ai_flags;
     int ai_family;
     int ai_socktype;
     int ai_protocol;
     socklen_t ai_addrlen;
     struct sockaddr {
       sa_family_t sa_family;
       char sa_data[14];
    } *ai_addr;
     char *ai_canonname;
     struct addrinfo  *ai_next;
  } ;
struct passwd {
     char *pw_name;
     char *pw_passwd;
     __uid_t pw_uid;
     __gid_t pw_gid;
     char *pw_gecos;
     char *pw_dir;
     char *pw_shell;
  } ;
struct config_type {
     char *name;
     int enabled;
     Conf_Types type;
     long value;
     char **strings;
     Config_Enum *table;
     void (*write_it)( FILE *, struct config_type * );
     char *note;
  } ;
struct emap {
     char *name;
     int code;
     char *descr;
  } ;
struct MailcapEntry {
     char *contenttype;
     char *command;
     char *testcommand;
     int needsterminal;
     int copiousoutput;
     int needtofree;
     char *label;
     char *printcommand;
     char *nametemplate;
     float quality;
     long maxbytes;
  } ;
struct cmdlist_s {
     char *cmd;
     int result;
     struct cmdlist_s  *next;
  } ;
struct _STable_info {
     struct _STable_info  *enclosing;
     struct _TextAnchor  *enclosing_last_anchor_before_stbl;
     int startline;
     int nrows;
     int ncols;
     int maxlen;
     int maxpos;
     int allocated_rows;
     int allocated_sumcols;
     int ncolinfo;
     STable_cellinfo *sumcols;
     STable_rowinfo *rows;
     STable_rowinfo rowspans2eog;
     short alignment;
     short rowgroup_align;
     short pending_colgroup_align;
     int pending_colgroup_next;
     STable_states s;
  } ;
struct tm {
     int tm_sec;
     int tm_min;
     int tm_hour;
     int tm_mday;
     int tm_mon;
     int tm_year;
     int tm_wday;
     int tm_yday;
     int tm_isdst;
     long tm_gmtoff;
     char *tm_zone;
  } ;
struct unipair_str {
     unsigned short unicode;
     char *replace_str;
  } ;
struct unimapdesc_str {
     unsigned short entry_ct;
     struct unipair_str  *entries;
     int isdefault;
     int trydefault;
  } ;
struct UC_charset {
     char *MIMEname;
     char *LYNXname;
     unsigned char *unicount;
     unsigned short *unitable;
     int num_uni;
     struct unimapdesc_str  replacedesc;
     int uc_status;
     int LYhndl;
     int GN;
     int lowest_eight;
     int enc;
     int codepage;
  } ;
struct dired_menu {
     int cond;
     char *sfx;
     char *link;
     char *rest;
     char *href;
     struct dired_menu  *next;
  } ;
struct struct_parts {
     char *access;
     char *host;
     char *absolute;
     char *relative;
     char *search;
     char *anchor;
  } ;
struct __dirstream  ;
struct dirent {
     __ino64_t d_ino;
     __off64_t d_off;
     unsigned short d_reclen;
     unsigned char d_type;
     char d_name[256];
     char __pad[1];
  } ;
struct sockaddr_in {
     sa_family_t sin_family;
     in_port_t sin_port;
     struct in_addr {
       in_addr_t s_addr;
    } sin_addr;
     unsigned char sin_zero[8];
  } ;
struct _statuses {
     size_t rehostentlen;
     int h_length;
     int child_errno;
     int child_h_errno;
     BOOLEAN h_errno_valid;
     char __pad[3];
  } ;
struct group {
     char *gr_name;
     char *gr_passwd;
     __gid_t gr_gid;
     char **gr_mem;
  } ;
struct _HyperDoc  ;
struct ldat  ;
/*****************************************************************************************/
/******                                                                             ******/
/******                          Function Prototypes                                ******/
/******                                                                             ******/
/*****************************************************************************************/
void cleanup_sig( int sig );
void cleanup_files( void );
void cleanup( void );
BOOLEAN LYVersionIsRelease( void );
char *LYVersionStatus( void );
char *LYVersionDate( void );
void dt_String( FILE *fp, char *label, char *value );
void dt_Number( FILE *fp0, char *label, long number, char *units );
int LYShowInfo( DocInfo *doc, DocInfo *newdoc, char *owner_address );
BOOLEAN editor_can_position( void );
int edit_current_file( char *newfile, int cur, int lineno );
void edit_temporary_file( char *filename, char *position, char *message );
int peek_mouse_levent( void );
int get_mouse_link( void );
int peek_mouse_link( void );
int fancy_mouse( WINDOW *win, int row, int *position );
HTList *whichRecall( RecallType recall );
void LYRemoveFromCloset( HTList *list );
void LYCloseCloset( RecallType recall );
char *LYFindInCloset( RecallType recall, char *base );
void LYAddToCloset( RecallType recall, char *str );
int XYdist( int x1, int y1, int x2, int y2, int dx2 );
int set_clicked_link( int x, int y, int code, int clicks );
char *LYstrncpy( char *dst, char *src, int n );
char *LYmbcsstrncpy( char *dst, char *src, int n_bytes, int n_glyphs, BOOLEAN utf_flag );
char *LYmbcs_skip_glyphs( char *data, int n_glyphs, BOOLEAN utf_flag );
char *LYmbcs_skip_cells( char *data, int n_cells, BOOLEAN utf_flag );
int LYmbcsstrlen( char *str, BOOLEAN utf_flag, BOOLEAN count_gcells );
void ena_csi( BOOLEAN flag );
int lookup_tiname( char *name, char **names );
char *expand_tiname( char *first, size_t len, char **result, char *final );
char *expand_tichar( char *first, char **result, char *final );
int expand_substring( char *dst, char *first, char *last, char *final );
void unescaped_char( char *parse, int *keysym );
BOOLEAN unescape_string( char *src, char *dst, char *final );
int map_string_to_keysym( char *str, int *keysym );
char *skip_keysym( char *parse );
int setkey_cmd( char *parse );
int unsetkey_cmd( char *parse );
int read_keymap_file( void );
void setup_vtXXX_keymap( void );
int lynx_initialize_keymaps( void );
int LYmouse_menu( int x, int y, int atlink, int code );
int LYgetch_for( int code );
int LYgetch( void );
int LYgetch_choice( void );
int LYgetch_input( void );
int LYgetch_single( void );
void LYLowerCase( char *arg_buffer );
void LYUpperCase( char *arg_buffer );
BOOLEAN LYRemoveNewlines( char *buffer );
char *LYReduceBlanks( char *buffer );
char *LYRemoveBlanks( char *buffer );
char *LYSkipBlanks( char *buffer );
char *LYSkipNonBlanks( char *buffer );
char *LYSkipCBlanks( char *buffer );
char *LYSkipCNonBlanks( char *buffer );
void LYTrimLeading( char *buffer );
char *LYTrimNewline( char *buffer );
void LYTrimTrailing( char *buffer );
char *LYElideString( char *str, int cut_pos );
BOOLEAN LYTrimStartfile( char *buffer );
void LYEscapeStartfile( char **buffer );
void LYTrimAllStartfile( char *buffer );
void LYSetupEdit( EditFieldData *edit, char *old, int maxstr, int maxdsp );
int mbcs_glyphs( char *s, int len );
int mbcs_skip( char *s, int pos );
int cell2char( char *s, int cells );
int LYEditInsert( EditFieldData *edit, unsigned char *s, int len, int map, BOOLEAN maxMessage );
int LYEdit1( EditFieldData *edit, int ch, int action, BOOLEAN maxMessage );
int get_popup_number( char *msg, int *c, int *rel );
void remember_column( EditFieldData *edit, int offset );
void fill_edited_line( int prompting, int length, int ch );
void LYRefreshEdit( EditFieldData *edit );
void reinsertEdit( EditFieldData *edit, char *result );
int caselessCmpList( void *a, void *b );
int normalCmpList( void *a, void *b );
char **sortedList( HTList *list, BOOLEAN ignorecase );
int LYarrayLength( char **list );
int LYarrayWidth( char **list );
void FormatChoiceNum( char *dst, int num_choices, int choice, char *value );
unsigned int options_width( char **list );
void draw_option( WINDOW *win, int entry, int width, BOOLEAN reversed, int num_choices, int number, char *value );
int LYhandlePopupList( int cur_choice, int ly, int lx, char **choices, int width, int i_length, int disabled, BOOLEAN for_mouse );
int LYgetstr( char *inputline, int hidden, size_t bufsize, RecallType recall );
char *LYLineeditHelpURL( void );
char *LYstrsep( char **stringp, char *delim );
char *LYstrstr( char *chptr, char *tarptr );
char *LYno_attr_char_case_strstr( char *chptr, char *tarptr );
char *LYno_attr_char_strstr( char *chptr, char *tarptr );
char *LYno_attr_mbcs_case_strstr( char *chptr, char *tarptr, BOOLEAN utf_flag, BOOLEAN count_gcells, int *nstartp, int *nendp );
char *LYno_attr_mbcs_strstr( char *chptr, char *tarptr, BOOLEAN utf_flag, BOOLEAN count_gcells, int *nstartp, int *nendp );
char *SNACopy( char **dest, char *src, int n );
char *SNACat( char **dest, char *src, int n );
long UniToLowerCase( long upper );
int UPPER8( int ch1, int ch2 );
char *LYSafeGets( char **src, FILE *fp );
void LYOpenCmdLogfile( int argc, char **argv );
BOOLEAN LYHaveCmdScript( void );
void LYOpenCmdScript( void );
int LYReadCmdKey( int mode );
void LYWriteCmdKey( int ch );
void LYCloseCmdLogfile( void );
void terminate_letter( int sig );
void SafeHTUnEscape( char *string );
void remove_tildes( char *string );
void comma_append( char **dst, char *src );
void extract_field( char **dst, char *src, char *keyword );
void extract_subject( char *dst, char *src );
void extract_body( char **dst, char *src );
BOOLEAN trim_comma( char *address );
BOOLEAN convert_explorer( char *address );
int header_prompt( char *label, char **result, unsigned int limit );
void show_addresses( char *addresses );
FILE *LYPipeToMailer( void );
void mailform( char *mailto_address, char *mailto_subject, char *mailto_content, char *mailto_type );
void mailmsg( int cur, char *owner_address, char *filename, char *linkname );
void reply_by_mail( char *mail_address, char *filename, char *title, char *refid );
BOOLEAN LYSystemMail( void );
void HTAlert( char *Msg );
void HTAlwaysAlert( char *extra_prefix, char *Msg );
void HTInfoMsg( char *Msg );
void HTInfoMsg2( char *Msg2, char *Arg );
void HTUserMsg( char *Msg );
void HTUserMsg2( char *Msg2, char *Arg );
void HTProgress( char *Msg );
char *HTProgressUnits( int rate );
char *sprint_bytes( char *s, off_t n, char *was_units );
char *sprint_tbuf( char *s, long t );
void HTReadProgress( off_t bytes, off_t total );
BOOLEAN HTLastConfirmCancelled( void );
int HTForcedPrompt( int option, char *msg, int dft );
int HTConfirmDefault( char *Msg, int Dft );
BOOLEAN HTConfirm( char *Msg );
BOOLEAN confirm_post_resub( char *address, char *title, int if_imgmap, int if_file );
char *HTPrompt( char *Msg, char *deflt );
char *HTPromptPassword( char *Msg );
void HTPromptUsernameAndPassword( char *Msg, char **username, char **password, BOOLEAN IsProxy );
BOOLEAN HTConfirmCookie( domain_entry *de, char *server, char *name, char *value );
int HTConfirmPostRedirect( char *Redirecting_url, int server_status );
void LYSleepAlert( void );
void LYSleepDebug( void );
void LYSleepInfo( void );
void LYSleepMsg( void );
void LYSleepReplay( void );
pool_data *ALLOC_IN_POOL( HTPool **ppoolptr, unsigned int request );
HTPool *POOL_NEW( void );
void POOL_FREE( HTPool *poolptr );
void *HText_pool_calloc( HText *text, unsigned int size );
void ht_justify_cleanup( void );
void mark_justify_start_position( void *text );
void HText_halt( void );
BOOLEAN mem_is_avail( size_t factor, size_t bytes );
void *LY_check_calloc( size_t nmemb, size_t size );
int StyleToCols( HText *text, HTLine *line, int nstyle );
void LYClearHiText( TextAnchor *a );
void LYSetHiText( TextAnchor *a, char *text, int len );
void LYAddHiText( TextAnchor *a, char *text, int x );
int LYAdjHiTextPos( TextAnchor *a, int count );
char *LYGetHiTextStr( TextAnchor *a, int count );
int LYGetHiTextPos( TextAnchor *a, int count );
void LYCopyHiText( TextAnchor *a, TextAnchor *b );
void HText_getChartransInfo( HText *me );
void PerFormInfo_free( PerFormInfo *form );
void free_form_fields( FormInfo *input_field );
void FormList_delete( HTList *forms );
void ResetPartialLinenos( HText *text );
HText *HText_new( HTParentAnchor *anchor );
HText *HText_new2( HTParentAnchor *anchor, HTStream *stream );
void HText_free( HText *self );
int display_line( HTLine *line, HText *text, int scrline, char *target );
void display_title( HText *text );
void display_scrollbar( HText *text );
void display_page( HText *text, int line_number, char *target );
void HText_beginAppend( HText *text );
int set_style_by_embedded_chars( char *s, char *e, unsigned char start_c, unsigned char end_c );
void move_anchors_in_region( HTLine *line, int line_number, TextAnchor **prev_anchor, int *prev_head_processed, int sbyte, int ebyte, int shift );
HTLine *insert_blanks_in_line( HTLine *line, int line_number, HText *text, TextAnchor **prev_anchor, int ninserts, int *oldpos, int *newpos );
HTStyleChange *skip_matched_and_correct_offsets( HTStyleChange *end, HTStyleChange *start, unsigned int split_pos );
void split_line( HText *text, unsigned int split );
void blank_lines( HText *text, int newlines );
void HText_appendParagraph( HText *text );
void HText_setStyle( HText *text, HTStyle *style );
void HText_appendCharacter( HText *text, int ch );
void _internal_HTC( HText *text, int style, int dir );
void HText_setLastChar( HText *text, char ch );
char HText_getLastChar( HText *text );
void HText_setIgnoreExcess( HText *text, BOOLEAN ignore );
int HText_insertBlanksInStblLines( HText *me, int ncols );
void HText_cancelStbl( HText *me );
void HText_startStblTABLE( HText *me, short alignment );
void free_enclosed_stbl( HText *me );
int HText_endStblTABLE( HText *me );
void HText_startStblTR( HText *me, short alignment );
void HText_endStblTR( HText *me );
void HText_startStblTD( HText *me, int colspan, int rowspan, short alignment, BOOLEAN isheader );
void HText_endStblTD( HText *me );
void HText_startStblCOL( HText *me, int span, short alignment, BOOLEAN isgroup );
void HText_endStblCOLGROUP( HText *me );
void HText_startStblRowGroup( HText *me, short alignment );
void add_link_number( HText *text, TextAnchor *a, BOOLEAN save_position );
int HText_beginAnchor( HText *text, BOOLEAN underline, HTChildAnchor *anc );
BOOLEAN HText_endAnchor0( HText *text, int number, int really );
void HText_endAnchor( HText *text, int number );
BOOLEAN HText_isAnchorBlank( HText *text, int number );
void HText_appendText( HText *text, char *str );
int remove_special_attr_chars( char *buf );
void HText_endAppend( HText *text );
void HText_trimHightext( HText *text, BOOLEAN final, int stop_before );
HTParentAnchor *HText_nodeAnchor( HText *text );
HTChildAnchor *HText_childNextNumber( int number, void **prev );
void HText_FormDescNumber( int number, char **desc );
int HTGetRelLinkNum( int num, int rel, int cur );
int HTGetLinkInfo( int number, int want_go, int *go_line, int *linknum, char **hightext, char **lname );
BOOLEAN same_anchor_or_field( int numberA, FormInfo *formA, int numberB, FormInfo *formB, BOOLEAN ta_same );
BOOLEAN HText_TAHasMoreLines( int curlink, int direction );
int HTGetLinkOrFieldStart( int curlink, int *go_line, int *linknum, int direction, BOOLEAN ta_skip );
BOOLEAN HText_getFirstTargetInLine( HText *text, int line_num, BOOLEAN utf_flag, int *offset, int *tLen, char **data, char *target );
int HText_getNumOfLines( void );
int HText_getNumOfBytes( void );
char *HText_getTitle( void );
char *HText_getStyle( void );
char *HText_getSugFname( void );
void HTCheckFnameForCompression( char **fname, HTParentAnchor *anchor, BOOLEAN strip_ok );
char *HText_getLastModified( void );
char *HText_getDate( void );
char *HText_getServer( void );
void HText_pageDisplay( int line_num, char *target );
BOOLEAN HText_pageHasPrevTarget( void );
int HText_closestAnchor( HText *text, int offset );
int HText_locateAnchor( HText *text, int anchor_number );
BOOLEAN anchor_is_numbered( TextAnchor *Anchor_ptr );
int HText_getAbsLineNumber( HText *text, int anchor_number );
int HText_anchorRelativeTo( HText *text, int top_lineno, int anchor_number );
int HText_LinksInLines( HText *text, int line_num, int Lines );
void HText_setStale( HText *text );
void HText_refresh( HText *text );
int HText_sourceAnchors( HText *text );
BOOLEAN HText_canScrollUp( HText *text );
BOOLEAN HText_canScrollDown( void );
void HText_scrollTop( HText *text );
void HText_scrollDown( HText *text );
void HText_scrollUp( HText *text );
void HText_scrollBottom( HText *text );
BOOLEAN HText_select( HText *text );
BOOLEAN HText_POSTReplyLoaded( DocInfo *doc );
BOOLEAN HTFindPoundSelector( char *selector );
BOOLEAN HText_selectAnchor( HText *text, HTChildAnchor *anchor );
void HText_applyStyle( HText *me, HTStyle *style );
void HText_updateStyle( HText *me, HTStyle *style );
HTStyle *HText_selectionStyle( HText *me, HTStyleSheet *sheet );
void HText_replaceSel( HText *me, char *aString, HTStyle *aStyle );
void HTextApplyToSimilar( HText *me, HTStyle *style );
void HTextSelectUnstyled( HText *me, HTStyleSheet *sheet );
void HText_unlinkSelection( HText *me );
HTAnchor *HText_referenceSelected( HText *me );
int HText_getTopOfScreen( void );
int HText_getLines( HText *text );
int HText_getPreferredTopLine( HText *text, int line_number );
HTAnchor *HText_linkSelTo( HText *me, HTAnchor *anchor );
void HTSearchQueries_free( void );
void HTAddSearchQuery( char *query );
int do_www_search( DocInfo *doc );
void write_offset( FILE *fp, HTLine *line );
void write_hyphen( FILE *fp );
int TrimmedLength( char *string );
void print_wwwfile_to_fd( FILE *fp, BOOLEAN is_email, BOOLEAN is_reply );
void print_crawl_to_fd( FILE *fp, char *thelink, char *thetitle );
void adjust_search_result( DocInfo *doc, int tentative_result, int start_line );
BOOLEAN anchor_has_target( TextAnchor *a, char *target );
TextAnchor *line_num_to_anchor( int line_num );
int line_num_in_text( HText *text, HTLine *line );
TextAnchor *get_prev_anchor( TextAnchor *a );
int www_search_forward( int start_line, DocInfo *doc, char *target, HTLine *line, int count );
int www_search_backward( int start_line, DocInfo *doc, char *target, HTLine *line, int count );
void www_user_search( int start_line, DocInfo *doc, char *target, int direction );
void user_message( char *message, char *argument );
char *HText_getOwner( void );
void HText_setMainTextOwner( char *owner );
char *HText_getRevTitle( void );
char *HText_getContentBase( void );
char *HText_getContentLocation( void );
char *HText_getMessageID( void );
void HTuncache_current_document( void );
BOOLEAN useSourceCache( void );
BOOLEAN useMemoryCache( void );
BOOLEAN HTreparse_document( void );
BOOLEAN HTcan_reparse_document( void );
void trace_setting_change( char *name, int prev_setting, int new_setting );
BOOLEAN HTdocument_settings_changed( void );
int HTisDocumentSource( void );
char *HTLoadedDocumentURL( void );
bstring *HTLoadedDocumentPost_data( void );
char *HTLoadedDocumentTitle( void );
BOOLEAN HTLoadedDocumentIsHEAD( void );
BOOLEAN HTLoadedDocumentIsSafe( void );
char *HTLoadedDocumentCharset( void );
BOOLEAN HTLoadedDocumentEightbit( void );
void HText_setNodeAnchorBookmark( char *bookmark );
char *HTLoadedDocumentBookmark( void );
int HText_LastLineSize( HText *text, BOOLEAN IgnoreSpaces );
BOOLEAN HText_LastLineEmpty( HText *text, BOOLEAN IgnoreSpaces );
int HText_LastLineOffset( HText *text );
int HText_PreviousLineSize( HText *text, BOOLEAN IgnoreSpaces );
BOOLEAN HText_PreviousLineEmpty( HText *text, BOOLEAN IgnoreSpaces );
int HText_TrueLineSize( HTLine *line, HText *text, BOOLEAN IgnoreSpaces );
BOOLEAN HText_TrueEmptyLine( HTLine *line, HText *text, BOOLEAN IgnoreSpaces );
void HText_NegateLineOne( HText *text );
BOOLEAN HText_inLineOne( HText *text );
void HText_RemovePreviousLine( HText *text );
int HText_getCurrentColumn( HText *text );
int HText_getMaximumColumn( HText *text );
void HText_setTabID( HText *text, char *name );
int HText_getTabIDColumn( HText *text, char *name );
void HText_AddHiddenLink( HText *text, TextAnchor *textanchor );
int HText_HiddenLinkCount( HText *text );
char *HText_HiddenLinkAt( HText *text, int number );
void HText_beginForm( char *action, char *method, char *enctype, char *title, char *accept_cs );
void HText_endForm( HText *text );
void HText_beginSelect( char *name, int name_cs, BOOLEAN multiple, char *size );
int HText_getOptionNum( HText *text );
char *HText_skipOptionNumPrefix( char *opname );
char *HText_setLastOptionValue( HText *text, char *value, char *submit_value, int order, BOOLEAN checked, int val_cs, int submit_val_cs );
int HText_beginInput( HText *text, BOOLEAN underline, InputFieldData *I );
void HText_endInput( HText *text );
double get_trans_q( int cs_from, char *givenmime );
int find_best_target_cs( char **best_csname, int cs_from, char *acceptstring );
void load_a_file( char *val_used, bstring **result );
char *guess_content_type( char *filename );
void cannot_transcode( BOOLEAN *had_warning, char *target_csname );
unsigned int check_form_specialchars( char *value );
void UpdateBoundary( char **Boundary, bstring *data );
char *convert_to_base64( char *src, int len );
char *escape_or_quote_name( char *name, QuoteData quoting, char *MultipartContentType );
char *escape_or_quote_value( char *value, QuoteData quoting );
int check_if_base64_needed( int submit_method, bstring *data );
int HText_SubmitForm( FormInfo *submit_item, DocInfo *doc, char *link_name, char *link_value );
void HText_DisableCurrentForm( void );
void HText_ResetForm( FormInfo *form );
BOOLEAN HText_HaveUserChangedForms( HText *text );
void HText_activateRadioButton( FormInfo *form );
char *stub_HTAnchor_address( HTAnchor *me );
void HText_setToolbar( HText *text );
BOOLEAN HText_hasToolbar( HText *text );
void HText_setNoCache( HText *text );
BOOLEAN HText_hasNoCacheSet( HText *text );
BOOLEAN HText_hasUTF8OutputSet( HText *text );
void HText_setKcode( HText *text, char *charset, LYUCcharset *p_in );
void HText_setBreakPoint( HText *text );
BOOLEAN HText_AreDifferent( HTParentAnchor *anchor, char *full_address );
int increment_tagged_htline( HTLine *ht, TextAnchor *a, int *lx_val, int *old_val, int incr, int mode );
void insert_new_textarea_anchor( TextAnchor **curr_anchor, HTLine **exit_htline );
void update_subsequent_anchors( int newlines, TextAnchor *start_anchor, HTLine *start_htline, int start_tag );
BOOLEAN IsFormsTextarea( FormInfo *form, TextAnchor *anchor_ptr );
int finish_ExtEditForm( LinkInfo *form_link, TextAnchor *start_anchor, char *ed_temp, int orig_cnt );
int HText_ExtEditForm( LinkInfo *form_link );
void HText_ExpandTextarea( LinkInfo *form_link, int newlines );
int HText_InsertFile( LinkInfo *form_link );
int GetColumn( void );
BOOLEAN DidWrap( int y0, int x0 );
void redraw_part_of_line( HTLine *line, char *str, int len, HText *text );
void redraw_lines_of_link( int cur );
void HTMark_asSource( void );
HTkcode HText_getKcode( HText *text );
void HText_updateKcode( HText *text, HTkcode kcode );
HTkcode HText_getSpecifiedKcode( HText *text );
void HText_updateSpecifiedKcode( HText *text, HTkcode kcode );
int HTMainText_Get_UCLYhndl( void );
int getfile( DocInfo *doc, int *target );
void srcmode_for_next_retrieval( int mode );
int follow_link_number( int c, int cur, DocInfo *doc, int *num );
void add_trusted( char *str, int type );
BOOLEAN exec_ok( char *source, char *linktext, int type );
int fix_httplike_urls( DocInfo *doc, UrlTypes type );
void LYStdinArgs_free( void );
void reset_signals( void );
void exit_immediately( int code );
BOOLEAN GetStdin( char **buf, BOOLEAN marker );
void SetLocale( void );
int main( int argc, char **argv );
void LYRegisterLynxProtocols( void );
void reload_read_cfg( void );
void disable_pausing( void );
void force_dump_mode( void );
int parse_authentication( char *next_arg, char **result );
int anonymous_fun( char *next_arg );
int assume_charset_fun( char *next_arg );
int assume_local_charset_fun( char *next_arg );
int assume_unrec_charset_fun( char *next_arg );
int auth_fun( char *next_arg );
int base_fun( char *next_arg );
int cache_fun( char *next_arg );
int child_fun( char *next_arg );
int child_relaxed_fun( char *next_arg );
int crawl_fun( char *next_arg );
int display_fun( char *next_arg );
int display_charset_fun( char *next_arg );
int dump_output_fun( char *next_arg );
int editor_fun( char *next_arg );
int error_file_fun( char *next_arg );
int exec_fun( char *next_arg );
int get_data_fun( char *next_arg );
int help_fun( char *next_arg );
int hiddenlinks_fun( char *next_arg );
int homepage_fun( char *next_arg );
int mime_header_fun( char *next_arg );
int newschunksize_fun( char *next_arg );
int newsmaxchunk_fun( char *next_arg );
int nobold_fun( char *next_arg );
int nobrowse_fun( char *next_arg );
int nocolor_fun( char *next_arg );
int nopause_fun( char *next_arg );
int nomore_fun( char *next_arg );
int noreverse_fun( char *next_arg );
int nounderline_fun( char *next_arg );
int pauth_fun( char *next_arg );
int post_data_fun( char *next_arg );
char *show_restriction( char *name );
int restrictions_fun( char *next_arg );
int selective_fun( char *next_arg );
int source_fun( char *next_arg );
int traversal_fun( char *next_arg );
int version_fun( char *next_arg );
int width_fun( char *next_arg );
void print_help_strings( char *name, char *help, char *value, BOOLEAN option );
void print_help_and_exit( int exit_status );
int arg_eqs_parse( char *a, char *b, char **c );
BOOLEAN parse_arg( char **argv, unsigned int mask, int *countp );
void FatalProblem( int sig );
int sametext( char *een, char *twee );
void TracelogOpenFailed( void );
BOOLEAN LYReopenTracelog( BOOLEAN *trace_flag_ptr );
void turn_trace_back_on( BOOLEAN *trace_flag_ptr );
FILE *TraceFP( void );
BOOLEAN LYOpenTraceLog( void );
void LYCloseTracelog( void );
void handle_LYK_TRACE_TOGGLE( void );
void LYSetNewline( int value );
int LYGetNewline( void );
void LYChgNewline( int adjust );
BOOLEAN reparse_document( void );
BOOLEAN reparse_or_reload( int *cmd );
void set_address( DocInfo *doc, char *address );
void copy_address( DocInfo *dst, DocInfo *src );
void free_address( DocInfo *doc );
void move_address( DocInfo *dst, DocInfo *src );
BOOLEAN LYMainLoop_pageDisplay( int line_num );
BOOLEAN set_curdoc_link( int nextlink );
void goto_line( int nextline );
void set_curdoc_link_by_mouse( int nextlink );
int do_change_link( void );
void do_check_goto_URL( char *user_input_buffer, char **old_user_input, BOOLEAN *force_load );
BOOLEAN do_check_recall( int ch, char *user_input_buffer, char **old_user_input, int URLTotal, int *URLNum, RecallType recall, BOOLEAN *FirstURLRecall );
void do_cleanup_after_delete( void );
int find_link_near_col( int col, int delta );
int DoTraversal( int c, BOOLEAN *crawl_ok );
int handle_LYK_ACTIVATE( int *c, int cmd, BOOLEAN *try_internal, BOOLEAN *refresh_screen, BOOLEAN *force_load, int real_cmd );
void handle_LYK_ADD_BOOKMARK( BOOLEAN *refresh_screen, int *old_c, int real_c );
void handle_LYK_CLEAR_AUTH( int *old_c, int real_c );
int handle_LYK_COMMAND( char *user_input_buffer );
void handle_LYK_COMMENT( BOOLEAN *refresh_screen, char **owner_address_p, int *old_c, int real_c );
BOOLEAN handle_LYK_COOKIE_JAR( int *cmd );
void handle_LYK_CREATE( void );
void handle_LYK_DEL_BOOKMARK( BOOLEAN *refresh_screen, int *old_c, int real_c );
void handle_LYK_DIRED_MENU( BOOLEAN *refresh_screen, int *old_c, int real_c );
int handle_LYK_DOWNLOAD( int *cmd, int *old_c, int real_c );
void handle_LYK_DOWN_xxx( int *old_c, int real_c, int scroll_by );
void handle_LYK_DOWN_HALF( int *old_c, int real_c );
void handle_LYK_DOWN_LINK( int *follow_col, int *old_c, int real_c );
void handle_LYK_DOWN_TWO( int *old_c, int real_c );
int handle_LYK_DWIMEDIT( int *cmd, int *old_c, int real_c );
int handle_LYK_ECGOTO( int *ch, char *user_input_buffer, char **old_user_input, int *old_c, int real_c );
void handle_LYK_EDIT( int *old_c, int real_c );
void handle_LYK_DWIMHELP( char **cshelpfile );
void handle_LYK_EDIT_TEXTAREA( BOOLEAN *refresh_screen, int *old_c, int real_c );
int handle_LYK_ELGOTO( int *ch, char *user_input_buffer, char **old_user_input, int *old_c, int real_c );
void handle_LYK_EXTERN_LINK( BOOLEAN *refresh_screen );
void handle_LYK_EXTERN_PAGE( BOOLEAN *refresh_screen );
BOOLEAN handle_LYK_FASTBACKW_LINK( int *cmd, int *old_c, int real_c );
void handle_LYK_FASTFORW_LINK( int *old_c, int real_c );
void handle_LYK_FIRST_LINK( void );
BOOLEAN handle_LYK_GOTO( int *ch, char *user_input_buffer, char **old_user_input, RecallType *recall, int *URLTotal, int *URLNum, BOOLEAN *FirstURLRecall, int *old_c, int real_c );
void handle_LYK_GROW_TEXTAREA( BOOLEAN *refresh_screen );
BOOLEAN handle_LYK_HEAD( int *cmd );
void handle_LYK_HELP( char **cshelpfile );
void handle_LYK_HISTORICAL( void );
BOOLEAN handle_LYK_HISTORY( BOOLEAN ForcePush );
BOOLEAN handle_LYK_IMAGE_TOGGLE( int *cmd );
void handle_LYK_INDEX( int *old_c, int real_c );
void handle_LYK_INDEX_SEARCH( BOOLEAN *force_load, BOOLEAN ForcePush, int *old_c, int real_c );
BOOLEAN handle_LYK_INFO( int *cmd );
BOOLEAN handle_LYK_INLINE_TOGGLE( int *cmd );
void handle_LYK_INSERT_FILE( BOOLEAN *refresh_screen, int *old_c, int real_c );
BOOLEAN handle_LYK_JUMP( int c, char *user_input_buffer, char **old_user_input, RecallType *recall, BOOLEAN *FirstURLRecall, int *URLNum, int *URLTotal, int *ch, int *old_c, int real_c );
void handle_LYK_KEYMAP( BOOLEAN *vi_keys_flag, BOOLEAN *emacs_keys_flag, int *old_c, int real_c );
void handle_LYK_LAST_LINK( void );
void handle_LYK_LEFT_LINK( void );
BOOLEAN handle_LYK_LIST( int *cmd );
void handle_LYK_MAIN_MENU( int *old_c, int real_c );
void handle_LYK_MINIMAL( void );
void handle_LYK_MODIFY( BOOLEAN *refresh_screen );
BOOLEAN handle_LYK_NESTED_TABLES( int *cmd );
BOOLEAN handle_LYK_OPTIONS( int *cmd, BOOLEAN *refresh_screen );
void handle_NEXT_DOC( void );
void handle_LYK_NEXT_LINK( int c, int *old_c, int real_c );
void handle_LYK_NEXT_PAGE( int *old_c, int real_c );
BOOLEAN handle_LYK_NOCACHE( int *old_c, int real_c );
void handle_LYK_PREV_LINK( int *arrowup, int *old_c, int real_c );
int handle_PREV_DOC( int *cmd, int *old_c, int real_c );
void handle_LYK_PREV_PAGE( int *old_c, int real_c );
void handle_LYK_PRINT( BOOLEAN *ForcePush, int *old_c, int real_c );
BOOLEAN handle_LYK_QUIT( void );
BOOLEAN handle_LYK_RAW_TOGGLE( int *cmd );
void handle_LYK_RELOAD( int real_cmd );
void handle_LYK_REMOVE( BOOLEAN *refresh_screen );
void handle_LYK_RIGHT_LINK( void );
void handle_LYK_SHELL( BOOLEAN *refresh_screen, int *old_c, int real_c );
void handle_LYK_SOFT_DQUOTES( void );
int wrap_reparse_document( void );
void handle_LYK_SOURCE( char **ownerS_address_p );
void handle_LYK_SWITCH_DTD( void );
void handle_LYK_TAG_LINK( void );
void handle_LYK_TOGGLE_HELP( void );
void handle_LYK_TOOLBAR( BOOLEAN *try_internal, BOOLEAN *force_load, int *old_c, int real_c );
void handle_LYK_TRACE_LOG( BOOLEAN *trace_flag_ptr );
void handle_LYK_UPLOAD( void );
void handle_LYK_UP_xxx( int *arrowup, int *old_c, int real_c, int scroll_by );
void handle_LYK_UP_HALF( int *arrowup, int *old_c, int real_c );
void handle_LYK_UP_LINK( int *follow_col, int *arrowup, int *old_c, int real_c );
void handle_LYK_UP_TWO( int *arrowup, int *old_c, int real_c );
void handle_LYK_VIEW_BOOKMARK( BOOLEAN *refresh_screen, int *old_c, int real_c );
BOOLEAN handle_LYK_VLINKS( int *cmd, BOOLEAN *newdoc_link_is_absolute );
void handle_LYK_WHEREIS( int cmd, BOOLEAN *refresh_screen );
void handle_LYK_digit( int c, BOOLEAN *force_load, char *user_input_buffer, int *old_c, int real_c, BOOLEAN *try_internal );
void handle_LYK_CHDIR( void );
int repeat_to_delta( int n );
void handle_LYK_SHIFT_LEFT( BOOLEAN *flag, int count );
void handle_LYK_SHIFT_RIGHT( BOOLEAN *flag, int count );
BOOLEAN handle_LYK_LINEWRAP_TOGGLE( int *cmd, BOOLEAN *flag );
int mainloop( void );
int are_different( DocInfo *doc1, DocInfo *doc2 );
void HTAddGotoURL( char *url );
void show_main_statusline( LinkInfo curlink, int for_what );
void repaint_main_statusline( int for_what );
void form_noviceline( int disabled );
void exit_immediately_with_error_message( int state, BOOLEAN first_file );
void status_link( char *curlink_name, BOOLEAN show_more, BOOLEAN show_indx );
char *LYDownLoadAddress( void );
int string_to_attr( char *name );
char *attr_to_string( int code );
void LYbox( WINDOW *win, BOOLEAN formfield );
void setStyle( int style, int color, int cattr, int mono );
void setHashStyle( int style, int color, int cattr, int mono, char *element );
void LYAttrset( WINDOW *win, int color, int mono );
void curses_w_style( WINDOW *win, int style, int dir );
void wcurses_css( WINDOW *win, char *name, int dir );
void curses_css( char *name, int dir );
void curses_style( int style, int dir );
int get_color_pair( int n );
int lynx_color_cfg_attr( int code );
int encode_color_attr( int color_attr );
int decode_mono_code( int mono_code );
int LYgetTableAttr( void );
char *LYgetTableString( int code );
void lynx_init_color_pair( int n );
void lynx_map_color( int n );
int lynx_chg_color( int color, int fg, int bg );
void lynx_set_color( int a );
void lynx_standout( int flag );
void lynx_init_colors( void );
void lynx_setup_colors( void );
void LYnoVideo( int a );
void start_curses( void );
void lynx_enable_mouse( int state );
void lynx_nl2crlf( int normal );
void stop_curses( void );
BOOLEAN setup( char *terminal );
int dumbterm( char *terminal );
void LYpaddstr( WINDOW *the_window, int width, char *the_string );
void LYsubwindow( WINDOW *param );
WINDOW *LYtopwindow( void );
WINDOW *LYstartPopup( int *top_y, int *left_x, int *height, int *width );
void LYstartTargetEmphasis( void );
void LYstopTargetEmphasis( void );
void LYtouchline( int row );
void LYwaddnstr( WINDOW *w, char *src, size_t len );
int LYstrExtent( char *string, int len, int maxCells );
int LYstrExtent2( char *string, int len );
int LYstrCells( char *string );
int LYscreenHeight( void );
int LYscreenWidth( void );
void LYnormalColor( void );
void LYclear( void );
void LYclrtoeol( void );
void LYerase( void );
void LYmove( int y, int x );
void LYrefresh( void );
void lynx_force_repaint( void );
void lynx_start_title_color( void );
void lynx_stop_title_color( void );
void lynx_start_link_color( int flag, int pending );
void lynx_stop_link_color( int flag, int pending );
void lynx_stop_target_color( void );
void lynx_start_target_color( void );
void lynx_start_status_color( void );
void lynx_stop_status_color( void );
void lynx_start_h1_color( void );
void lynx_stop_h1_color( void );
void lynx_start_prompt_color( void );
void lynx_stop_prompt_color( void );
void lynx_start_radio_color( void );
void lynx_stop_radio_color( void );
void lynx_stop_all_colors( void );
void lynx_start_bold( void );
void lynx_start_reverse( void );
void lynx_start_underline( void );
void lynx_stop_bold( void );
void lynx_stop_reverse( void );
void lynx_stop_underline( void );
void LYSetDisplayLines( void );
void LYstowCursor( WINDOW *win, int row, int col );
long LYgetattrs( WINDOW *win );
int LYindex2MBM( int n );
int LYMBM2index( int ch );
void show_bookmark_not_defined( void );
char *get_bookmark_filename( char **URL );
char *convert_mosaic_bookmark_file( char *filename_buffer );
void save_bookmark_link( char *address, char *title );
void remove_bookmark_link( int cur, char *cur_bookmark_page );
int select_multi_bookmarks( void );
int select_menu_multi_bookmarks( void );
BOOLEAN LYHaveSubBookmarks( void );
void LYMBM_statusline( char *text );
BOOLEAN havevisible( char *Title );
BOOLEAN have8bit( char *Title );
char *title_convert8bit( char *Title );
void set_default_bookmark_page( char *value );
time_t LYmktime( char *string, BOOLEAN absolute );
LY_TEMP *FindTempfileByName( char *name );
LY_TEMP *FindTempfileByFP( FILE *fp );
char *LYGetEnv( char *name );
size_t utf8_length( BOOLEAN utf_flag, char *data );
void LYFreeHilites( int first, int last );
void LYSetHilite( int cur, char *text );
void LYAddHilite( int cur, char *text, int x );
char *LYGetHiliteStr( int cur, int count );
int LYGetHilitePos( int cur, int count );
BOOLEAN show_whereis_targets( int flag, int cur, int count, char *target, BOOLEAN TargetEmphasisON, BOOLEAN utf_flag );
int find_cached_style( int cur, int flag );
void LYhighlight( int flag, int cur, char *target );
void free_and_clear( char **pointer );
void convert_to_spaces( char *string, BOOLEAN condense );
char *strip_trailing_slash( char *dirname );
void remove_most_blanks( char *buffer );
void statusline( char *text );
char *novice_lines( int lineno );
void toggle_novice_line( void );
void noviceline( int more_flag );
int LYReopenInput( void );
int LYConsoleInputFD( BOOLEAN need_selectable );
void LYFakeZap( BOOLEAN set );
int DontCheck( void );
int HTCheckForInterrupt( void );
BOOLEAN LYisAbsPath( char *path );
BOOLEAN LYisRootPath( char *path );
BOOLEAN LYisLocalFile( char *filename );
BOOLEAN LYisLocalHost( char *filename );
void LYFreeStringList( HTList *list );
void LYLocalhostAliases_free( void );
void LYAddLocalhostAlias( char *alias );
BOOLEAN LYisLocalAlias( char *filename );
UrlTypes LYCheckForProxyURL( char *filename );
BOOLEAN compare_type( char *tst, char *cmp, size_t len );
UrlTypes is_url( char *filename );
void LYFixCursesOn( char *reason );
BOOLEAN LYFixCursesOnForAccess( char *addr, char *physical );
BOOLEAN LYCanDoHEAD( char *address );
BOOLEAN LYCloseInput( FILE *fp );
BOOLEAN LYCloseOutput( FILE *fp );
BOOLEAN LYCanWriteFile( char *filename );
BOOLEAN LYCanReadFile( char *filename );
void remove_backslashes( char *buf );
BOOLEAN inlocaldomain( void );
void LYExtSignal( int sig, LYSigHandlerFunc_t *handler );
BOOLEAN LYToggleSigDfl( int sig, struct sigaction  *where, int to_dfl );
void size_change( int sig );
void HTSugFilenames_free( void );
void HTAddSugFilename( char *fname );
void change_sug_filename( char *fname );
int fmt_tempname( char *result, char *prefix, char *suffix );
int number2arrows( int number );
BOOLEAN strn_dash_equ( char *p1, char *p2, int len );
char *index_to_restriction( int inx );
int find_restriction( char *name, int len );
void parse_restrictions( char *s );
void print_restrictions_to_fd( FILE *fp );
void LYCheckMail( void );
void LYEnsureAbsoluteURL( char **href, char *name, int fixit );
void LYConvertToURL( char **AllocatedString, int fixit );
BOOLEAN LYExpandHostForURL( char **AllocatedString, char *prefix_list, char *suffix_list );
BOOLEAN LYAddSchemeForURL( char **AllocatedString, char *default_scheme );
void LYTrimRelFromAbsPath( char *path );
void LYDoCSI( char *url, char *comment, char **csi );
char *Current_Dir( char *pathname );
char *CheckDir( char *path );
char *HomeEnv( void );
char *Home_Dir( void );
char *LYPathLeaf( char *pathname );
BOOLEAN LYPathOffHomeOK( char *fbuffer, size_t fbuffer_size );
char *FindLeadingTilde( char *pathname, BOOLEAN embedded );
char *LYAbsOrHomePath( char **fname );
char *LYTildeExpand( char **pathname, BOOLEAN embedded );
void LYAddPathToHome( char *fbuffer, size_t fbuffer_size, char *fname );
char *LYAddPathToSave( char *fname );
BOOLEAN IsOurSymlink( char *name );
BOOLEAN IsOurFile( char *name );
FILE *OpenHiddenFile( char *name, char *mode );
FILE *LYNewBinFile( char *name );
FILE *LYNewTxtFile( char *name );
FILE *LYAppendToTxtFile( char *name );
void LYRelaxFilePermissions( char *name );
BOOLEAN LYCachedTemp( char *result, char **cached );
FILE *LYOpenTemp( char *result, char *suffix, char *mode );
FILE *LYReopenTemp( char *name );
FILE *LYOpenTempRewrite( char *fname, char *suffix, char *mode );
FILE *LYOpenScratch( char *result, char *prefix );
void LY_close_temp( LY_TEMP *p );
void LYCloseTemp( char *name );
void LYCloseTempFP( FILE *fp );
int LYRemoveTemp( char *name );
void LYCleanupTemp( void );
void LYRenamedTemp( char *oldname, char *newname );
void LYCheckBibHost( void );
BOOLEAN LYIsUIPage3( char *url, UIP_t type, int flagparam );
void LYRegisterUIPage( char *url, UIP_t type );
void LYUIPages_free( void );
char *wwwName( char *pathname );
BOOLEAN LYValidateFilename( char *result, char *given );
int LYValidateOutput( char *filename );
void LYLocalFileToURL( char **target, char *source );
FILE *InternalPageFP( char *filename, int reuse_flag );
void WriteInternalTitle( FILE *fp0, char *Title );
void BeginInternalPage( FILE *fp0, char *Title, char *HelpURL );
void EndInternalPage( FILE *fp0 );
char *trimPoundSelector( char *address );
void LYTrimPathSep( char *path );
void LYAddPathSep( char **path );
void LYAddPathSep0( char *path );
char *LYLastPathSep( char *path );
void LYTrimHtmlSep( char *path );
void LYAddHtmlSep( char **path );
void LYAddHtmlSep0( char *path );
int LYCopyFile( char *src, char *dst );
int LYSystem( char *command );
char *LYSysShell( void );
char *LYgetXDisplay( void );
void LYsetXDisplay( char *new_display );
void get_clip_release( void );
int clip_grab( void );
char *get_clip_grab( void );
int put_clip( char *s );
void LYmsec_delay( unsigned int msec );
void LYOpenlog( char *banner );
BOOLEAN looks_like_password( char *first, char *last );
void LYSyslog( char *arg );
void LYCloselog( void );
BOOLEAN LYCheckUserAgent( void );
void validate_x_display( void );
void summarize_x_display( char *display_option );
void SetupChosenShowColor( void );
int add_it( char *text, int len );
void addlbl( char *text );
void LYoptions( void );
int widest_choice( char **choices );
void show_choice( char *choice, int width );
int boolean_choice( int cur_choice, int line, int column, char **choices );
void terminate_options( int sig );
void edit_bookmarks( void );
int popup_choice( int cur_choice, int line, int column, char **choices, int i_length, int disabled, BOOLEAN for_mouse );
void PutOptValues( FILE *fp, int value, OptValues *table );
BOOLEAN GetOptValues( OptValues *table, char *value, int *result );
PostPair *break_data( bstring *data );
BOOLEAN isLynxOptionsPage( char *address, char *portion );
int postoptions( DocInfo *newdoc );
char *NewSecureValue( void );
void PutLabel( FILE *fp, char *name, char *value );
char *check_if_write_lynxrc( char **table );
char *will_save_cookies( void );
char *will_save_images( void );
void LYMenuVisitedLinks( FILE *fp0, int disable_all );
int gen_options( char **newfile );
BOOLEAN is_true( char *string );
char *find_colon( char *buffer );
void free_item_list( lynx_list_item_type **ptr );
void free_all_item_lists( void );
void add_item_to_list( char *buffer, lynx_list_item_type **list_ptr, int special );
lynx_list_item_type *find_item_by_number( lynx_list_item_type *list_ptr, char *number );
int match_item_by_name( lynx_list_item_type *ptr, char *name, BOOLEAN only_overriders );
int check_color( char *color, int the_default );
char *lookup_color( int code );
void exit_with_color_syntax( char *error_line );
void parse_color( char *buffer );
int assume_charset_fun( char *value );
int assume_local_charset_fun( char *value );
int assume_unrec_charset_fun( char *value );
int character_set_fun( char *value );
int outgoing_mail_charset_fun( char *value );
int assumed_color_fun( char *buffer );
int color_fun( char *value );
int default_colors_fun( char *value );
int default_bookmark_file_fun( char *value );
int default_cache_size_fun( char *value );
int default_editor_fun( char *value );
int numbers_as_arrows_fun( char *value );
int dired_menu_fun( char *value );
int jumpfile_fun( char *value );
int keymap_fun( char *key );
int localhost_alias_fun( char *value );
int lynxcgi_environment_fun( char *value );
int lynx_sig_file_fun( char *value );
int news_chunk_size_fun( char *value );
int news_max_chunk_fun( char *value );
int news_posting_fun( char *value );
int cern_rulesfile_fun( char *value );
int referer_with_query_fun( char *value );
int suffix_fun( char *value );
int suffix_order_fun( char *value );
int system_editor_fun( char *value );
int viewer_fun( char *value );
int nonrest_sigwinch_fun( char *value );
void html_src_bad_syntax( char *value, char *option_name );
int parse_html_src_spec( HTlexeme lexeme_code, char *value, char *option_name );
int psrcspec_fun( char *s );
int read_htmlsrc_attrname_xform( char *str );
int read_htmlsrc_tagname_xform( char *str );
void free_lynx_cfg( void );
Config_Type *lookup_config( char *name );
char *actual_filename( char *cfg_filename, char *parent_filename, char *dft_filename );
FILE *LYOpenCFG( char *cfg_filename, char *parent_filename, char *dft_filename );
void LYSetConfigValue( char *name, char *value );
void do_read_cfg( char *cfg_filename, char *parent_filename, int nesting_level, FILE *fp0, optidx_set_t *allowed );
void read_cfg( char *cfg_filename, char *parent_filename, int nesting_level, FILE *fp0 );
void extra_cfg_link( FILE *fp, char *href, char *name );
int lynx_cfg_infopage( DocInfo *newdoc );
int lynx_compile_opts( DocInfo *newdoc );
BOOLEAN link_has_target( int cur, char *target );
int check_next_target_in_links( int *cur, char *target );
int check_prev_target_in_links( int *cur, char *target );
BOOLEAN textsearch( DocInfo *cur_doc, char *prev_target, int target_size, int direction );
void trace_history( char *tag );
void LYAddVisitedLink( DocInfo *doc );
BOOLEAN LYwouldPush( char *title, char *docurl );
void LYFreePostData( DocInfo *doc );
void LYFreeDocInfo( DocInfo *doc );
void clean_extra_history( void );
int are_identical( HistInfo *doc, DocInfo *doc1 );
void LYAllocHistory( int entries );
int LYpush( DocInfo *doc, BOOLEAN force_push );
void LYpop( DocInfo *doc );
void LYhist_prev( DocInfo *doc );
void LYhist_prev_register( DocInfo *doc );
int LYhist_next( DocInfo *doc, DocInfo *newdoc );
void LYpop_num( int number, DocInfo *doc );
int showhistory( char **newfile );
BOOLEAN historytarget( DocInfo *newdoc );
int LYShowVisitedLinks( char **newfile );
void to_stack( char *str );
void LYstatusline_messages_on_exit( char **buf );
void LYstore_message2( char *message, char *argument );
void LYstore_message( char *message );
int LYLoadMESSAGES( char *arg, HTParentAnchor *anAnchor, HTFormat format_out, HTStream *sink );
char **options_list( OptionType *opt_ptr );
int change_form_link_ex( int cur, DocInfo *newdoc, BOOLEAN *refresh_screen, BOOLEAN use_last_tfpos, BOOLEAN immediate_submit, BOOLEAN redraw_only );
int change_form_link( int cur, DocInfo *newdoc, BOOLEAN *refresh_screen, BOOLEAN use_last_tfpos, BOOLEAN immediate_submit );
void LYSetLastTFPos( int pos );
int form_getstr( int cur, BOOLEAN use_last_tfpos, BOOLEAN redraw_only );
void show_formlink_statusline( FormInfo *form, int for_what );
void set_environ( int name, char *value, char *no_value );
char *suggested_filename( DocInfo *newdoc );
void SetupFilename( char *filename, char *sug_filename );
int RecallFilename( char *filename, BOOLEAN *first, int *now, int *total, int flag );
BOOLEAN confirm_by_pages( char *prompt, int lines_in_file, int lines_per_page );
void send_file_to_file( DocInfo *newdoc, char *content_base, char *sug_filename );
void send_file_to_mail( DocInfo *newdoc, char *content_base, char *content_location );
void send_file_to_printer( DocInfo *newdoc, char *content_base, char *sug_filename, int printer_number );
void send_file_to_screen( DocInfo *newdoc, char *content_base, BOOLEAN Lpansi );
int printfile( DocInfo *newdoc );
char *subject_translate8bit( char *source );
int print_options( char **newfile, char *printed_url, int lines_in_file );
char *GetFileName( void );
BOOLEAN getBool( char *src );
char *LYputEnum( Config_Enum *table, int value );
BOOLEAN LYgetEnum( Config_Enum *table, char *name, int *result );
int get_assume_charset( char *value );
void put_assume_charset( FILE *fp, struct config_type  *tbl );
int get_display_charset( char *value );
void put_display_charset( FILE *fp, struct config_type  *tbl );
int get_editor( char *value );
void put_editor( FILE *fp, struct config_type  *tbl );
int get_tagsoup( char *value );
void put_tagsoup( FILE *fp, struct config_type  *tbl );
Config_Type *lookup_config( char *name );
int _f( char *c );
int _read_rc( int val );
void read_rc( FILE *fp );
void write_list( FILE *fp, char *list );
void explain_keypad_mode( FILE *fp );
int save_rc( FILE *fp );
BOOLEAN will_save_rc( char *name );
int enable_lynxrc( char *value );
void LYDownload( char *line );
int SuffixIs( char *filename, char *suffix );
int LYdownload_options( char **newfile, char *data_file );
BOOLEAN message_has_content( char *filename, BOOLEAN *nonspaces );
char *LYNewsPost( char *newsgroups, BOOLEAN followup );
void terminate_message( int sig );
HTList *LYcommandList( void );
Kcmd *LYKeycodeToKcmd( LYKeymapCode code );
Kcmd *LYStringToKcmd( char *name );
char *LYKeycodeToString( int c, BOOLEAN upper8 );
int LYStringToKeycode( char *src );
char *pretty_html( int c );
char *format_binding( LYKeymap_t *table, int i );
void print_binding( HTStream *target, int i, BOOLEAN both );
int lacname_to_lac( char *func );
int lecname_to_lec( char *func );
int lkcstring_to_lkc( char *src );
int LYLoadKeymap( char *arg, HTParentAnchor *anAnchor, HTFormat format_out, HTStream *sink );
int remap( char *key, char *func, BOOLEAN for_dired );
void set_any_keys( ANY_KEYS *table, int size );
void reset_any_keys( ANY_KEYS *table, int size );
void set_vms_keys( void );
void set_vi_keys( void );
void reset_vi_keys( void );
void set_emacs_keys( void );
void reset_emacs_keys( void );
void set_numbers_as_arrows( void );
void reset_numbers_as_arrows( void );
char *key_for_func( int func );
char *fmt_keys( int lkc_first, int lkc_second );
int best_reverse_keymap( int lac );
char *key_for_func_ext( int lac, int context_code );
BOOLEAN LYisNonAlnumKeyname( int ch, int KeyName );
int LYReverseKeymap( int KeyName );
void strtolower( char *i );
void actually_set_style( HTStructured *me );
void change_paragraph_style( HTStructured *me, HTStyle *style );
BOOLEAN LYBadHTML( HTStructured *me );
void HTML_put_character( HTStructured *me, char c );
void HTML_put_string( HTStructured *me, char *s );
void HTML_write( HTStructured *me, char *s, int l );
void addClassName( char *prefix, char *actual, int length );
void HTMLSRC_apply_markup( HTStructured *context, HTlexeme lexeme, BOOLEAN start, int tag_charset );
void LYStartArea( HTStructured *obj, char *href, char *alt, char *title, int tag_charset );
void LYHandleFIG( HTStructured *me, BOOLEAN *present, char **value, BOOLEAN isobject, BOOLEAN imagemap, char *id, char *src, BOOLEAN convert, BOOLEAN start, BOOLEAN *intern_flag );
void clear_objectdata( HTStructured *me );
int HTML_start_element( HTStructured *me, int element_number, BOOLEAN *present, char **value, int tag_charset, char **include );
int HTML_end_element( HTStructured *me, int element_number, char **include );
int HTML_put_entity( HTStructured *me, int entity_number );
void HTML_free( HTStructured *me );
void HTML_abort( HTStructured *me, HTError e );
void get_styles( void );
HTStyle *LYstyles( int style_number );
HTStructured *HTML_new( HTParentAnchor *anchor, HTFormat format_out, HTStream *stream );
void CacheThru_do_free( HTStream *me );
void CacheThru_free( HTStream *me );
void CacheThru_abort( HTStream *me, HTError e );
void CacheThru_put_character( HTStream *me, char c_in );
void CacheThru_put_string( HTStream *me, char *str );
void CacheThru_write( HTStream *me, char *str, int l );
HTStream *CacheThru_new( HTParentAnchor *anchor, HTStream *target );
HTStream *HTMLToPlain( HTPresentation *pres, HTParentAnchor *anchor, HTStream *sink );
HTStream *HTMLParsedPresent( HTPresentation *pres, HTParentAnchor *anchor, HTStream *sink );
HTStream *HTMLToC( HTPresentation *pres, HTParentAnchor *anchor, HTStream *sink );
HTStream *HTMLPresent( HTPresentation *pres, HTParentAnchor *anchor, HTStream *sink );
int HTLoadError( HTStream *sink, int number, char *message );
char *MakeNewTitle( char **value, int src_type );
char *MakeNewImageValue( char **value );
char *MakeNewMapValue( char **value, char *mapstr );
void HTFWriter_error( HTStream *me, char *id );
void HTFWriter_put_character( HTStream *me, char c );
void HTFWriter_put_string( HTStream *me, char *s );
void HTFWriter_write( HTStream *me, char *s, int l );
void HTFWriter_free( HTStream *me );
void HTFWriter_abort( HTStream *me, HTError e );
HTStream *HTFWriter_new( FILE *fp );
char *mailcap_substitute( HTParentAnchor *anchor, HTPresentation *pres, char *fnam );
HTStream *HTSaveAndExecute( HTPresentation *pres, HTParentAnchor *anchor, HTStream *sink );
HTStream *HTSaveToFile( HTPresentation *pres, HTParentAnchor *anchor, HTStream *sink );
HTStream *HTCompressed( HTPresentation *pres, HTParentAnchor *anchor, HTStream *sink );
HTStream *HTDumpToStdout( HTPresentation *pres, HTParentAnchor *anchor, HTStream *sink );
void HTFormatInit( void );
void HTPreparsedFormatInit( void );
char *GetCommand( char *s, char **t );
char *Cleanse( char *s );
void TrimCommand( char *command );
int ProcessMailcapEntry( FILE *fp, struct MailcapEntry  *mc, AcceptMedia media );
char *LYSkipQuoted( char *s );
char *LYSkipToken( char *s );
char *LYSkipValue( char *s );
char *LYCopyValue( char *s );
char *LYGetContentType( char *name, char *params );
BOOLEAN LYMailcapUsesPctS( char *controlstring );
int BuildCommand( HTChunk *cmd, char *controlstring, char *TmpFileName, char *params );
int LYTestMailcapCommand( char *testcommand, char *params );
char *LYMakeMailcapCommand( char *command, char *params, char *filename );
int RememberTestResult( int mode, char *cmd, int result );
int PassesTest( struct MailcapEntry  *mc );
int ProcessMailcapFile( char *file, AcceptMedia media );
int ExitWithError( char *txt );
int HTLoadTypesConfigFile( char *fn, AcceptMedia media );
void HTFileInit( void );
int HTGetLine( char *s, int n, FILE *f );
void HTGetWord( char *word, char *line, char stop, char stop2 );
int HTLoadExtensionsConfigFile( char *fn );
HTStyleSheet *DefaultStyle( HTStyle ***result_array );
int LYUpload( char *line );
int LYUpload_options( char **newfile, char *directory );
void no_leak_checking( void );
int LYatexit( void (*function)( void ) );
void LYCompleteExit( void );
void LYexit( int status );
void outofmem( char *fname, char *func );
void LYJumpTable_free( void );
void LYAddJumpShortcut( HTList *historyp, char *shortcut );
BOOLEAN LYJumpInit( char *config );
char *LYJump( int key );
unsigned int LYRead_Jumpfile( struct JumpTable  *jtp );
int LYCompare( void *e1, void *e2 );
int showlist( DocInfo *newdoc, BOOLEAN titles );
void print_refs( FILE *fp, BOOLEAN titles, int refs );
void print_hidden_refs( FILE *fp, int refs, int hidden_links );
void printlist( FILE *fp, BOOLEAN titles );
void remember_alloced( void *ptr );
void add_environment_value( char *env_value );
void add_lynxcgi_environment( char *variable_name );
BOOLEAN can_exec_cgi( char *linktext, char *linkargs );
int LYLoadCGI( char *arg, HTParentAnchor *anAnchor, HTFormat format_out, HTStream *sink );
void final_perror( char *msg, BOOLEAN clean_flag );
void exit_with_perror( char *msg );
BOOLEAN lookup_link( char *target );
void add_to_table( char *target );
void add_to_traverse_list( char *fname, char *prev_link_name );
void dump_traversal_history( void );
void add_to_reject_list( char *target );
BOOLEAN lookup_reject( char *target );
int EditBinding( int xlkc );
BOOLEAN LYRemapEditBinding( int xlkc, int lec, int select_edi );
int LYKeyForEditAction( int lec );
int LYEditKeyForAction( int lac, int *pmodkey );
int LYEditmapDeclared( void );
void HTMLSetCharacterHandling( int i );
void Set_HTCJK( char *inMIMEname, char *outMIMEname );
void HTMLSetRawModeDefault( int i );
void HTMLSetUseDefaultRawMode( int i, BOOLEAN modeflag );
void HTMLSetHaveCJKCharacterSet( int i );
void HTMLSetDisplayCharsetMatchLocale( int i );
int UCGetLYhndl_byAnyName( char *value );
char *HTMLGetEntityName( UCode_t code );
UCode_t HTMLGetEntityUCValue( char *name );
void HTMLUseCharacterSet( int i );
int LYCharSetsDeclared( void );
void LYEntify( char **str, BOOLEAN isTITLE );
void LYTrimHead( char *str );
void LYTrimTail( char *str );
char *LYFindEndOfComment( char *str );
void LYFillLocalFileURL( char **href, char *base );
void LYAddMETAcharsetToFD( FILE *fd, int disp_chndl );
char *LYUppercaseA_OL_String( int seqnum );
char *LYLowercaseA_OL_String( int seqnum );
char *LYUppercaseI_OL_String( int seqnum );
char *LYLowercaseI_OL_String( int seqnum );
void LYZero_OL_Counter( HTStructured *me );
void LYGetChartransInfo( HTStructured *me );
char *UCPutUtf8ToBuffer( char *q, UCode_t code, BOOLEAN terminate );
char **LYUCFullyTranslateString( char **str, int cs_from, int cs_to, BOOLEAN do_ent, BOOLEAN use_lynx_specials, BOOLEAN plain_space, BOOLEAN hidden, BOOLEAN Back, CharUtil_st stype );
BOOLEAN LYUCTranslateHTMLString( char **str, int cs_from, int cs_to, BOOLEAN use_lynx_specials, BOOLEAN plain_space, BOOLEAN hidden, CharUtil_st stype );
BOOLEAN LYUCTranslateBackFormData( char **str, int cs_from, int cs_to, BOOLEAN plain_space );
char *LYParseTagParam( char *from, char *name );
void LYParseRefreshURL( char *content, char **p_seconds, char **p_address );
void LYHandleMETA( HTStructured *me, BOOLEAN *present, char **value, char **include );
void LYHandlePlike( HTStructured *me, BOOLEAN *present, char **value, char **include, int align_idx, BOOLEAN start );
void LYHandleSELECT( HTStructured *me, BOOLEAN *present, char **value, char **include, BOOLEAN start );
int LYLegitimizeHREF( HTStructured *me, char **href, BOOLEAN force_slash, BOOLEAN strip_dots );
void LYCheckForContentBase( HTStructured *me );
void LYCheckForID( HTStructured *me, BOOLEAN *present, char **value, int attribute );
void LYHandleID( HTStructured *me, char *id );
BOOLEAN LYoverride_default_alignment( HTStructured *me );
void LYEnsureDoubleSpace( HTStructured *me );
void LYEnsureSingleSpace( HTStructured *me );
void LYResetParagraphAlignment( HTStructured *me );
BOOLEAN LYCheckForCSI( HTParentAnchor *anchor, char **url );
BOOLEAN LYCommentHacks( HTParentAnchor *anchor, char *comment );
void LYformTitle( char **dst, char *src );
void ImageMapList_free( HTList *theList );
BOOLEAN LYAddImageMap( char *address, char *title, HTParentAnchor *node_anchor );
BOOLEAN LYAddMapElement( char *map, char *address, char *title, HTParentAnchor *node_anchor, BOOLEAN intern_flag );
BOOLEAN LYHaveImageMap( char *address );
void fill_DocAddress( DocAddress *wwwdoc, char *address, HTParentAnchor *anAnchor, HTParentAnchor **punderlying );
HTList *get_the_list( DocAddress *wwwdoc, char *address, HTParentAnchor *anchor, HTParentAnchor **punderlying );
int LYLoadIMGmap( char *arg, HTParentAnchor *anAnchor, HTFormat format_out, HTStream *sink );
void LYPrintImgMaps( FILE *fp );
void MemAllocCopy( char **dest, char *start, char *end );
cookie *newCookie( void );
void freeCookie( cookie *co );
BOOLEAN host_matches( char *A, char *B );
BOOLEAN port_matches( int port, char *list );
int ignore_trailing_slash( char *a );
BOOLEAN is_prefix( char *a, char *b );
domain_entry *find_domain_entry( char *name );
void store_cookie( cookie *co, char *hostname, char *path );
char *scan_cookie_sublist( char *hostname, char *path, int port, HTList *sublist, char *header, BOOLEAN secure );
char *alloc_attr_value( char *value_start, char *value_end );
unsigned int parse_attribute( unsigned int flags, cookie *cur_cookie, int *cookie_len, char *attr_start, int attr_len, char *value, char *address, char *hostname, int port );
void LYProcessSetCookies( char *SetCookie, char *SetCookie2, char *address, char *hostname, char *path, int port );
void LYSetCookie( char *SetCookie, char *SetCookie2, char *address );
char *LYAddCookieHeader( char *hostname, char *path, int port, BOOLEAN secure );
void LYLoadCookies( char *cookie_file );
FILE *NewCookieFile( char *cookie_file );
void LYStoreCookies( char *cookie_file );
int LYHandleCookies( char *arg, HTParentAnchor *anAnchor, HTFormat format_out, HTStream *sink );
void cookie_domain_flag_set( char *domainstr, int flag );
void LYConfigCookies( void );
char *TrimLowercase( char *buffer );
void parse_either( char *attrs, int dft_color, int *monop, int *colorp );
void parse_attributes( char *mono, char *fg, char *bg, int style, char *element );
void parse_style( char *param );
void style_deleteStyleList( void );
void free_colorstylestuff( void );
void initialise_default_stylesheet( void );
void style_initialiseHashTable( void );
void parse_userstyles( void );
void HStyle_addStyle( char *buffer );
int style_readFromFileREC( char *lss_filename, char *parent_filename );
int style_readFromFile( char *filename );
void TrimColorClass( char *tagname, char *styleclassname, int *phcode );
void FastTrimColorClass( char *tag_name, int name_len, char *stylename, char **pstylename_end, int *phcode );
void cache_tag_styles( void );
unsigned int *RefCachedStyle( int y, int x );
BOOLEAN ValidCachedStyle( int y, int x );
unsigned int GetCachedStyle( int y, int x );
void SetCachedStyle( int y, int x, unsigned int value );
void ResetCachedStyles( void );
void FreeCachedStyles( void );
int hash_code( char *string );
int hash_code_lowercase_on_fly( char *string );
int hash_code_aggregate_char( char c, int hash );
int hash_code_aggregate_lower_str( char *string, int hash_was );
int html_src_tag_index( char *tagname );
void append_close_tag( char *tagname, HT_tagspec **head, HT_tagspec **tail );
void append_open_tag( char *tagname, char *classname, HT_tagspec **head, HT_tagspec **tail );
int html_src_parse_tagspec( char *ts, HTlexeme lexeme, BOOLEAN checkonly, BOOLEAN isstart );
void html_src_clean_item( HTlexeme l );
void html_src_clean_data( void );
void html_src_on_lynxcfg_reload( void );
void failed_init( char *tag, int lexeme );
void HTMLSRC_init_caches( BOOLEAN dont_exit );
char *cellstate_s( cellstate_t state );
STable_info *Stbl_startTABLE( short alignment );
void free_rowinfo( STable_rowinfo *me );
void Stbl_free( STable_info *me );
int Stbl_addCellToRow( STable_rowinfo *me, STable_cellinfo *colinfo, int ncolinfo, STable_states *s, int colspan, int alignment, int isheader, int lineno, int *ppos );
int Stbl_reserveCellsInRow( STable_rowinfo *me, int icell, int colspan );
int Stbl_finishCellInRow( STable_rowinfo *me, STable_states *s, int end_td, int lineno, int pos );
int Stbl_reserveCellsInTable( STable_info *me, int icell, int colspan, int rowspan );
void Stbl_cancelRowSpans( STable_info *me );
int Stbl_addRowToTable( STable_info *me, int alignment, int lineno );
int Stbl_finishRowInTable( STable_info *me );
void update_sumcols0( STable_cellinfo *sumcols, STable_rowinfo *lastrow, int pos, int len, int icell, int ispan, int allocated_sumcols );
int get_remaining_colspan( STable_rowinfo *me, STable_cellinfo *colinfo, int ncolinfo, int colspan, int ncols_sofar );
int Stbl_fakeFinishCellInTable( STable_info *me, STable_rowinfo *lastrow, int lineno, int finishing );
int Stbl_addCellToTable( STable_info *me, int colspan, int rowspan, int alignment, int isheader, int lineno, int offset_not_used_yet, int pos );
int Stbl_finishCellInTable( STable_info *me, int end_td, int lineno, int offset, int pos );
int Stbl_addColInfo( STable_info *me, int colspan, short alignment, BOOLEAN isgroup );
int Stbl_finishColGroup( STable_info *me );
int Stbl_addRowGroup( STable_info *me, short alignment );
int Stbl_finishTABLE( STable_info *me );
short Stbl_getAlignment( STable_info *me );
int get_fixup_positions( STable_rowinfo *me, int *oldpos, int *newpos, STable_cellinfo *sumcols );
int Stbl_getFixupPositions( STable_info *me, int lineno, int *oldpos, int *newpos );
int Stbl_getStartLine( STable_info *me );
int Stbl_getStartLineDeep( STable_info *me );
void Stbl_update_enclosing( STable_info *me, int max_width, int last_lineno );
void Stbl_set_enclosing( STable_info *me, STable_info *enclosing, struct _TextAnchor  *enclosing_last_anchor_before_stbl );
STable_info *Stbl_get_enclosing( STable_info *me );
struct _TextAnchor  *Stbl_get_last_anchor_before( STable_info *me );
void date_error( char *s );
time_t ToSeconds( time_t Hours, time_t Minutes, time_t Seconds, MERIDIAN Meridian );
time_t Convert( time_t Month, time_t Day, time_t Year, time_t Hours, time_t Minutes, time_t Seconds, MERIDIAN Meridian, DSTMODE dst );
time_t DSTcorrect( time_t Start, time_t Future );
time_t RelativeMonth( time_t Start, time_t RelMonth );
int LookupWord( char *buff, int length );
int date_lex( void );
int GetTimeInfo( TIMEINFO *Now );
time_t parsedate( char *p, TIMEINFO *now );
int yygrowstack( void );
int date_parse( void );
void set_inverse_transl( int i );
unsigned short *set_translate( int m );
int UC_valid_UC_charset( int UC_charset_hndl );
void UC_con_set_trans( int UC_charset_in_hndl, int Gn, int update_flag );
int con_insert_unipair( unsigned short unicode, unsigned short fontpos, int fordefault );
int con_insert_unipair_str( unsigned short unicode, char *replace_str, int fordefault );
void con_clear_unimap( int fordefault );
void con_clear_unimap_str( int fordefault );
void con_set_default_unimap( void );
int UC_con_set_unimap( int UC_charset_out_hndl, int update_flag );
int UC_con_set_unimap_str( unsigned short ct, struct unipair_str  *list, int fordefault );
int conv_uni_to_pc( long ucs, int usedefault );
int conv_uni_to_str( char *outbuf, int buflen, long ucs, int usedefault );
void UCconsole_map_init( void );
int UCTransUniChar( long unicode, int charset_out );
int UCTransUniCharStr( char *outbuf, int buflen, long unicode, int charset_out, int chk_single_flag );
int UC_MapGN( int UChndl, int update_flag );
int UCTransChar( char ch_in, int charset_in, int charset_out );
UCode_t UCTransJPToUni( char *inbuf, int buflen, int charset_in );
UCode_t UCTransToUni( char ch_in, int charset_in );
int UCReverseTransChar( char ch_out, int charset_in, int charset_out );
int UCTransCharStr( char *outbuf, int buflen, char ch_in, int charset_in, int charset_out, int chk_single_flag );
int UC_FindGN_byMIME( char *UC_MIMEcharset );
int UCGetRawUniMode_byLYhndl( int i );
int getLYhndl_byCP( char *prefix, char *codepage );
int UCGetLYhndl_byMIME( char *value );
void UCreset_allocated_LYCharSets( void );
char **UC_setup_LYCharSets_repl( int UC_charset_in_hndl, unsigned int lowest8 );
int UC_Register_with_LYCharSets( int s, char *UC_MIMEcharset, char *UC_LYNXcharset, int lowest_eightbit );
void UC_Charset_Setup( char *UC_MIMEcharset, char *UC_LYNXcharset, unsigned char *unicount, unsigned short *unitable, int nnuni, struct unimapdesc_str  replacedesc, int lowest_eight, int UC_rawuni, int codepage );
int UC_NoUctb_Register_with_LYCharSets( char *UC_MIMEcharset, char *UC_LYNXcharset, int lowest_eightbit, int UC_rawuni, int codepage );
void UC_Charset_NoUctb_Setup( char *UC_MIMEcharset, char *UC_LYNXcharset, int trydefault, int lowest_eight, int UC_rawuni, int codepage );
void UCInit( void );
int safeUCGetLYhndl_byMIME( char *value );
void LYFindLocaleCharset( void );
BOOLEAN UCCanUniTranslateFrom( int from );
BOOLEAN UCCanTranslateUniTo( int to );
BOOLEAN UCCanTranslateFromTo( int from, int to );
BOOLEAN UCNeedNotTranslate( int from, int to );
void UCSetTransParams( UCTransParams *pT, int cs_in, LYUCcharset *p_in, int cs_out, LYUCcharset *p_out );
void UCTransParams_clear( UCTransParams *pT );
void UCSetBoxChars( int cset, int *pvert_out, int *phori_out, int vert_in, int hori_in );
BOOLEAN UCPutUtf8_charstring( HTStream *target, putc_func_t *myPutc, long code );
BOOLEAN UCConvertUniToUtf8( UCode_t code, char *buffer );
UCode_t UCGetUniFromUtf8String( char **ppuni );
void UCChangeTerminalCodepage( int newcs, LYUCcharset *p );
void format( char **result, char *fmt, char *parm );
char *format_command( char *command, char *param );
char *lookup_external( char *param, BOOLEAN only_overriders );
BOOLEAN run_external( char *param, BOOLEAN only_overriders );
BOOLEAN cannot_stat( char *name );
BOOLEAN ok_stat( char *name, struct stat  *sb );
BOOLEAN ok_lstat( char *name, struct stat  *sb );
BOOLEAN ok_file_or_dir( struct stat  *sb );
int LYExecv( char *path, char **argv, char *msg );
int make_directory( char *path );
int remove_file( char *path );
int remove_directory( char *path );
int touch_file( char *path );
int move_file( char *source, char *target );
BOOLEAN not_already_exists( char *name );
BOOLEAN dir_has_same_owner( struct stat  *info, int owner );
int remove_tagged( void );
int modify_tagged( char *testpath );
int modify_name( char *testpath );
int modify_location( char *testpath );
int local_modify( DocInfo *doc, char **newpath );
int create_file( char *current_location );
int create_directory( char *current_location );
int local_create( DocInfo *doc );
int remove_single( char *testpath );
int local_remove( DocInfo *doc );
long permit_bits( char *string_mode );
int permit_location( char *destpath, char *srcpath, char **newpath );
void tagflag( int flag, int cur );
void showtags( HTList *t );
char *DirectoryOf( char *pathname );
char *match_op( char *prefix, char *data );
char *build_command( char *line, char *dirname, char *arg );
int local_dired( DocInfo *doc );
int dired_options( DocInfo *doc, char **newfile );
char *get_filename( char *prompt, char *buf, size_t bufsize );
void clear_tags( void );
void add_menu_item( char *str );
void reset_dired_menu( void );
char *render_item( char *s, char *path, char *dir, char *buf, int bufsize, BOOLEAN url_syntax );
char *HTStrip( char *s );
void scan( char *name, struct struct_parts  *parts );
char *strchr_or_end( char *string, int ch );
char *HTParsePort( char *host, int *portp );
char *HTParse( char *aName, char *relatedName, int wanted );
char *HTParseAnchor( char *aName );
void HTSimplify( char *filename );
char *HTRelative( char *aName, char *relatedName );
char *HTEscape( char *str, unsigned char mask );
char *HTEscapeUnsafe( char *str );
char *HTEscapeSP( char *str, unsigned char mask );
char from_hex( char c );
char *HTUnEscape( char *str );
char *HTUnEscapeSome( char *str, char *do_trans );
void HTMake822Word( char **str, int quoted );
BOOLEAN HTRegisterProtocol( HTProtocol *protocol );
void HTAccessInit( void );
BOOLEAN override_proxy( char *addr );
int get_physical( char *addr, HTParentAnchor *anchor );
void LYUCPushAssumed( HTParentAnchor *anchor );
int LYUCPopAssumed( void );
int HTLoad( char *addr, HTParentAnchor *anchor, HTFormat format_out, HTStream *sink );
HTStream *HTSaveStream( HTParentAnchor *anchor );
BOOLEAN HTLoadDocument( char *full_address, HTParentAnchor *anchor, HTFormat format_out, HTStream *sink );
BOOLEAN HTLoadAbsolute( DocAddress *docaddr );
BOOLEAN HTLoadRelative( char *relative_name, HTParentAnchor *here );
BOOLEAN HTLoadAnchor( HTAnchor *destination );
char hex( int i );
BOOLEAN HTSearch( char *keywords, HTParentAnchor *here );
BOOLEAN HTSearchAbsolute( char *keywords, char *indexname );
void strip_userid( char *host );
BOOLEAN acceptEncoding( int code );
int HTLoadHTTP( char *arg, HTParentAnchor *anAnchor, HTFormat format_out, HTStream *sink );
char *FormatStr( char **bufp, char *start, char *entry );
char *FormatNum( char **bufp, char *start, int entry );
void LYListFmtParse( char *fmtstr, DIRED *data, char *file, HTStructured *target, char *tail );
void HTSetSuffix5( char *suffix, char *representation, char *encoding, char *desc, double value );
char *HTCacheFileName( char *name );
char *HTURLPath_toFile( char *name, BOOLEAN expand_all, BOOLEAN is_remote );
char *HTnameOfFile_WWW( char *name, BOOLEAN WWW_prefix, BOOLEAN expand_all );
char *WWW_nameOfFile( char *name );
char *HTFileSuffix( HTAtom *rep, char *enc );
HTFormat HTFileFormat( char *filename, HTAtom **pencoding, char **pdesc );
HTFormat HTCharsetFormat( HTFormat format, HTParentAnchor *anchor, int default_LYhndl );
void LYGetFileInfo( char *filename, HTParentAnchor **pfile_anchor, HTFormat *pformat, HTAtom **pencoding, char **pdesc, char **pcharset, int *pfile_cs );
float HTFileValue( char *filename );
CompressFileType HTCompressFileType( char *filename, char *dots, int *rootlen );
char *HTCompressTypeToSuffix( CompressFileType method );
char *HTCompressTypeToEncoding( CompressFileType method );
CompressFileType HTEncodingToCompressType( char *coding );
CompressFileType HTContentTypeToCompressType( char *ct );
CompressFileType HTContentToCompressType( HTParentAnchor *anchor );
BOOLEAN HTEditable( char *filename );
HTStream *HTFileSaveStream( HTParentAnchor *anchor );
void HTDirEntry( HTStructured *target, char *tail, char *entry );
BOOLEAN view_structured( HTFormat format_out );
void HTStructured_doctype( HTStructured *target, HTFormat format_out );
void HTStructured_meta( HTStructured *target, HTFormat format_out );
BOOLEAN HTDirTitles( HTStructured *target, HTParentAnchor *anchor, HTFormat format_out, BOOLEAN tildeIsTop );
void do_readme( HTStructured *target, char *localname );
char *file_type( char *path );
int dired_cmp( void *a, void *b );
int print_local_dir( DIR *dp, char *localname, HTParentAnchor *anchor, HTFormat format_out, HTStream *sink );
int HTStat( char *filename, struct stat  *data );
int decompressAndParse( HTParentAnchor *anchor, HTFormat format_out, HTStream *sink, char *nodename, char *filename, HTAtom *myEncoding, HTFormat format, int *statusp );
int HTLoadFile( char *addr, HTParentAnchor *anchor, HTFormat format_out, HTStream *sink );
char *HTGetProgramPath( ProgramPaths code );
void HTSetProgramPath( ProgramPaths code, char *path );
void HTInitProgramPaths( void );
HTBTree *HTBTree_new( HTComparer comp );
void HTBTElement_free( HTBTElement *element );
void HTBTree_free( HTBTree *tree );
void HTBTElementAndObject_free( HTBTElement *element );
void HTBTreeAndObject_free( HTBTree *tree );
void *HTBTree_search( HTBTree *tree, void *object );
void HTBTree_add( HTBTree *tree, void *object );
HTBTElement *HTBTree_next( HTBTree *tree, HTBTElement *ele );
char *HTVMS_name( char *nn, char *fn );
int next_data_char( void );
int close_connection( connection *con );
void init_help_message_cache( void );
void help_message_cache_add( char *string );
char *help_message_cache_non_empty( void );
char *help_message_cache_contents( void );
int write_cmd( char *cmd );
BOOLEAN find_response( HTList *list );
int response( char *cmd );
int send_cmd_1( char *verb );
int send_cmd_2( char *verb, char *param );
int set_mac_binary( eServerType ServerType );
void get_ftp_pwd( eServerType *ServerType, BOOLEAN *UseList );
void set_unix_dirstyle( eServerType *ServerType, BOOLEAN *UseList );
int get_connection( char *arg, HTParentAnchor *anchor );
void reset_master_socket( void );
void set_master_socket( int value );
int close_master_socket( void );
int get_listen_socket( void );
void set_years_and_date( void );
void free_entryinfo_struct_contents( EntryInfo *entry_info );
BOOLEAN is_ls_date( char *s );
void parse_eplf_line( char *line, EntryInfo *info );
void parse_ls_line( char *line, EntryInfo *entry_info );
void parse_dls_line( char *line, EntryInfo *entry_info, char **pspilledname );
void parse_vms_dir_entry( char *line, EntryInfo *entry_info );
void parse_ms_windows_dir_entry( char *line, EntryInfo *entry_info );
void parse_cms_dir_entry( char *line, EntryInfo *entry_info );
EntryInfo *parse_dir_entry( char *entry, BOOLEAN *first, char **pspilledname );
int compare_EntryInfo_structs( EntryInfo *entry1, EntryInfo *entry2 );
int read_directory( HTParentAnchor *parent, char *address, HTFormat format_out, HTStream *sink );
int setup_connection( char *name, HTParentAnchor *anchor );
int HTFTPLoad( char *name, HTParentAnchor *anchor, HTFormat format_out, HTStream *sink );
void HTClearFTPPassword( void );
int HTInetStatus( char *where );
unsigned int HTCardinal( int *pstatus, char **pp, unsigned int max_value );
char *HTInetString( SockA *soc_in );
BOOLEAN valid_hostname( char *name );
void quench( int sig );
void dump_hostent( char *msgprefix, struct hostent  *phost );
size_t fill_rehostent( char *rehostent, size_t rehostentsize, struct hostent  *phost );
unsigned int readit( int fd, char *buffer, unsigned int length );
struct hostent  *LYGetHostByName( char *str );
struct addrinfo  *HTGetAddrInfo( char *str, int defport );
void get_host_details( void );
char *HTHostName( void );
BOOLEAN HTWasInterrupted( int *status );
void set_timeout( struct timeval  *timeoutp );
int HTDoConnect( char *url, char *protocol, int default_port, int *s );
int HTDoRead( int fildes, void *buf, unsigned int nbyte );
void fake_put_character( void *p, char c );
char *state_name( sgml_state n );
HTElement *pool_alloc( void );
void pool_free( HTElement *e );
void HTMLSRC_apply_markup( HTStream *context, HTlexeme lexeme, BOOLEAN start );
void set_chartrans_handling( HTStream *context, HTParentAnchor *anchor, int chndl );
void change_chartrans_handling( HTStream *context );
void handle_attribute_name( HTStream *context, char *s );
void handle_attribute_value( HTStream *context, char *s );
BOOLEAN put_special_unicodes( HTStream *context, UCode_t code );
void put_pretty_entity( HTStream *context, int term );
void put_pretty_number( HTStream *context );
void handle_entity( HTStream *context, char term );
void handle_comment( HTStream *context );
void handle_identifier( HTStream *context );
void handle_doctype( HTStream *context );
void handle_marked( HTStream *context );
void handle_processing_instruction( HTStream *context );
void handle_sgmlent( HTStream *context );
void handle_sgmlele( HTStream *context );
void handle_sgmlatt( HTStream *context );
BOOLEAN element_valid_within( HTTag *new_tag, HTTag *stacked_tag, BOOLEAN direct );
canclose_t can_close( HTTag *new_tag, HTTag *stacked_tag );
void do_close_stacked( HTStream *context );
int is_on_stack( HTStream *context, HTTag *old_tag );
void end_element( HTStream *context, HTTag *old_tag );
void start_element( HTStream *context );
HTTag *SGMLFindTag( SGML_dtd *dtd, char *s );
void SGML_free( HTStream *context );
void SGML_abort( HTStream *context, HTError e );
void transform_tag( HTStream *context, HTChunk *string );
BOOLEAN ignore_when_empty( HTTag *tag );
void discard_empty( HTStream *context );
BOOLEAN end_if_prettysrc( HTStream *context, HTChunk *string, char end_ch );
void SGML_character( HTStream *context, char c_in );
void SGML_string( HTStream *context, char *str );
void SGML_write( HTStream *context, char *str, int l );
HTStream *SGML_new( SGML_dtd *dtd, HTParentAnchor *anchor, HTStructured *target );
int SGML_offset( void );
void JISx0201TO0208_EUC( unsigned char IHI, unsigned char ILO, unsigned char *OHI, unsigned char *OLO );
int IS_SJIS_STR( unsigned char *str );
unsigned char *SJIS_TO_JIS1( unsigned char HI, unsigned char LO, unsigned char *JCODE );
unsigned char *JIS_TO_SJIS1( unsigned char HI, unsigned char LO, unsigned char *SJCODE );
unsigned char *EUC_TO_SJIS1( unsigned char HI, unsigned char LO, unsigned char *SJCODE );
void JISx0201TO0208_SJIS( unsigned char I, unsigned char *OHI, unsigned char *OLO );
unsigned char *SJIS_TO_EUC1( unsigned char HI, unsigned char LO, unsigned char *data );
unsigned char *SJIS_TO_EUC( unsigned char *src, unsigned char *dst );
unsigned char *EUC_TO_SJIS( unsigned char *src, unsigned char *dst );
unsigned char *EUC_TO_JIS( unsigned char *src, unsigned char *dst, char *toK, char *toA );
unsigned char *repairJIStoEUC( unsigned char *src, unsigned char **dstp );
unsigned char *TO_EUC( unsigned char *jis, unsigned char *euc );
int is_EUC_JP( unsigned char *euc );
void TO_SJIS( unsigned char *arg, unsigned char *sjis );
void TO_JIS( unsigned char *arg, unsigned char *jis );
void HTSwitchDTD( int new_flag );
void HTStartAnchor( HTStructured *obj, char *name, char *href );
void HTStartAnchor5( HTStructured *obj, char *name, char *href, char *linktype, int tag_charset );
void HTStartIsIndex( HTStructured *obj, char *prompt, char *href );
void HTChunkInit( HTChunk *ch, int grow );
HTChunk *HTChunkCreate( int grow );
HTChunk *HTChunkCreateMayFail( int grow, int failok );
HTChunk *HTChunkCreate2( int grow, size_t needed );
void HTChunkClear( HTChunk *ch );
void HTChunkFree( HTChunk *ch );
BOOLEAN HTChunkRealloc( HTChunk *ch, int growby );
void HTChunkPutc( HTChunk *ch, char c );
HTChunk *HTChunkPutc2( HTChunk *ch, char c );
void HTChunkEnsure( HTChunk *ch, int needed );
void HTChunkPutb( HTChunk *ch, char *b, int l );
HTChunk *HTChunkPutb2( HTChunk *ch, char *b, int l );
void HTChunkPutUtf8Char( HTChunk *ch, UCode_t code );
void HTChunkTerminate( HTChunk *ch );
void HTChunkPuts( HTChunk *ch, char *s );
HTChunk *HTChunkPuts2( HTChunk *ch, char *s );
void HTPlain_getChartransInfo( HTStream *me, HTParentAnchor *anchor );
void HTPlain_put_character( HTStream *me, char c );
void HTPlain_put_string( HTStream *me, char *s );
void HTPlain_write( HTStream *me, char *s, int l );
void HTPlain_free( HTStream *me );
void HTPlain_abort( HTStream *me, HTError e );
HTStream *HTPlainPresent( HTPresentation *pres, HTParentAnchor *anchor, HTStream *sink );
void flush_breaks( HTStructured *me );
void HTMLGen_flush( HTStructured *me );
void do_cstyle_flush( HTStructured *me );
void allow_break( HTStructured *me, int new_cleanness, BOOLEAN dlbc );
void HTMLGen_put_character( HTStructured *me, char c );
void HTMLGen_put_string( HTStructured *me, char *s );
void HTMLGen_write( HTStructured *me, char *s, int l );
int HTMLGen_start_element( HTStructured *me, int element_number, BOOLEAN *present, char **value, int charset, char **insert );
int HTMLGen_end_element( HTStructured *me, int element_number, char **insert );
int HTMLGen_put_entity( HTStructured *me, int entity_number );
void HTMLGen_free( HTStructured *me );
void PlainToHTML_free( HTStructured *me );
void HTMLGen_abort( HTStructured *me, HTError e );
void PlainToHTML_abort( HTStructured *me, HTError e );
HTStructured *HTMLGenerator( HTStream *output );
HTStream *HTPlainToHTML( HTPresentation *pres, HTParentAnchor *anchor, HTStream *sink );
HTAtom *HTAtom_for( char *string );
BOOLEAN mime_match( char *name, char *templ );
HTList *HTAtom_templateMatches( char *templ );
unsigned short HASH_FUNCTION( char *cp_address );
HTParentAnchor0 *HTParentAnchor0_new( char *address, unsigned short hash );
HTParentAnchor *HTParentAnchor_new( HTParentAnchor0 *parent );
HTChildAnchor *HTChildAnchor_new( HTParentAnchor0 *parent );
HTChildAnchor *HText_pool_ChildAnchor_new( HTParentAnchor *parent );
BOOLEAN HTSEquivalent( char *s, char *t );
BOOLEAN HTBEquivalent( bstring *s, bstring *t );
int compare_anchors( void *l, void *r );
HTChildAnchor *HTAnchor_findNamedChild( HTParentAnchor0 *parent, char *tag );
HTChildAnchor *HTAnchor_addChild( HTParentAnchor *parent );
HTChildAnchor *HTAnchor_findChildAndLink( HTParentAnchor *parent, char *tag, char *href, HTLinkType *ltype );
HTParentAnchor *HTAnchor_findAddress( DocAddress *newdoc );
HTParentAnchor0 *HTAnchor_findAddress_in_adult_table( DocAddress *newdoc );
HTParentAnchor *HTAnchor_findSimpleAddress( char *url );
BOOLEAN HTAnchor_link( HTChildAnchor *child, HTAnchor *destination, HTLinkType *type );
void deleteLinks( HTChildAnchor *me );
BOOLEAN HTAnchor_delete( HTParentAnchor0 *me );
void HTAnchor_delete_links( HTParentAnchor *me );
void HTParentAnchor_free( HTParentAnchor *me );
void HTAnchor_clearSourceCache( HTParentAnchor *me );
HTParentAnchor *HTAnchor_parent( HTAnchor *me );
void HTAnchor_setDocument( HTParentAnchor *me, HyperDoc *doc );
HyperDoc *HTAnchor_document( HTParentAnchor *me );
char *HTAnchor_address( HTAnchor *me );
void HTAnchor_setFormat( HTParentAnchor *me, HTFormat form );
HTFormat HTAnchor_format( HTParentAnchor *me );
void HTAnchor_setIndex( HTParentAnchor *me, char *address );
void HTAnchor_setPrompt( HTParentAnchor *me, char *prompt );
BOOLEAN HTAnchor_isIndex( HTParentAnchor *me );
BOOLEAN HTAnchor_isISMAPScript( HTAnchor *me );
char *HTAnchor_style( HTParentAnchor *me );
void HTAnchor_setStyle( HTParentAnchor *me, char *style );
char *HTAnchor_title( HTParentAnchor *me );
void HTAnchor_setTitle( HTParentAnchor *me, char *title );
void HTAnchor_appendTitle( HTParentAnchor *me, char *title );
char *HTAnchor_bookmark( HTParentAnchor *me );
void HTAnchor_setBookmark( HTParentAnchor *me, char *bookmark );
char *HTAnchor_owner( HTParentAnchor *me );
void HTAnchor_setOwner( HTParentAnchor *me, char *owner );
char *HTAnchor_RevTitle( HTParentAnchor *me );
void HTAnchor_setRevTitle( HTParentAnchor *me, char *title );
char *HTAnchor_citehost( HTParentAnchor *me );
void HTAnchor_setCitehost( HTParentAnchor *me, char *citehost );
char *HTAnchor_SugFname( HTParentAnchor *me );
char *HTAnchor_content_type_params( HTParentAnchor *me );
char *HTAnchor_content_encoding( HTParentAnchor *me );
char *HTAnchor_content_type( HTParentAnchor *me );
char *HTAnchor_last_modified( HTParentAnchor *me );
char *HTAnchor_date( HTParentAnchor *me );
char *HTAnchor_server( HTParentAnchor *me );
BOOLEAN HTAnchor_safe( HTParentAnchor *me );
char *HTAnchor_content_base( HTParentAnchor *me );
char *HTAnchor_content_location( HTParentAnchor *me );
char *HTAnchor_messageID( HTParentAnchor *me );
BOOLEAN HTAnchor_setMessageID( HTParentAnchor *me, char *messageid );
char *HTAnchor_subject( HTParentAnchor *me );
BOOLEAN HTAnchor_setSubject( HTParentAnchor *me, char *subject );
HTAnchor *HTAnchor_followLink( HTChildAnchor *me );
HTAnchor *HTAnchor_followTypedLink( HTChildAnchor *me, HTLinkType *type );
HTList *HTAnchor_methods( HTParentAnchor *me );
void *HTAnchor_protocol( HTParentAnchor *me );
void HTAnchor_setProtocol( HTParentAnchor *me, void *protocol );
char *HTAnchor_physical( HTParentAnchor *me );
void HTAnchor_setPhysical( HTParentAnchor *me, char *physical );
LYUCcharset *HTAnchor_getUCInfoStage( HTParentAnchor *me, int which_stage );
int HTAnchor_getUCLYhndl( HTParentAnchor *me, int which_stage );
LYUCcharset *HTAnchor_setUCInfoStage( HTParentAnchor *me, int LYhndl, int which_stage, int set_by );
LYUCcharset *HTAnchor_resetUCInfoStage( HTParentAnchor *me, int LYhndl, int which_stage, int set_by );
LYUCcharset *HTAnchor_copyUCInfoStage( HTParentAnchor *me, int to_stage, int from_stage, int set_by );
HTStyle *HTStyleNew( void );
HTStyle *HTStyleNewNamed( char *name );
HTStyle *HTStyleFree( HTStyle *self );
HTStyle *HTStyleNamed( HTStyleSheet *self, char *name );
HTStyleSheet *HTStyleSheetAddStyle( HTStyleSheet *self, HTStyle *style );
HTStyleSheet *HTStyleSheetRemoveStyle( HTStyleSheet *self, HTStyle *style );
HTStyleSheet *HTStyleSheetNew( void );
HTStyleSheet *HTStyleSheetFree( HTStyleSheet *self );
HTList *HTList_new( void );
void HTList_delete( HTList *me );
HTList *HTList_reverse( HTList *start );
HTList *HTList_appendList( HTList *start, HTList *tail );
void HTList_linkObject( HTList *me, void *newObject, HTList *newNode );
void HTList_addObject( HTList *me, void *newObject );
void HTList_appendObject( HTList *me, void *newObject );
void HTList_insertObjectAt( HTList *me, void *newObject, int pos );
BOOLEAN HTList_unlinkObject( HTList *me, void *oldObject );
BOOLEAN HTList_removeObject( HTList *me, void *oldObject );
void *HTList_removeObjectAt( HTList *me, int position );
void *HTList_unlinkLastObject( HTList *me );
void *HTList_removeLastObject( HTList *me );
void *HTList_removeFirstObject( HTList *me );
int HTList_count( HTList *me );
int HTList_indexOf( HTList *me, void *object );
void *HTList_objectAt( HTList *me, int position );
int strcasecomp8( char *a, char *b );
int strncasecomp8( char *a, char *b, int n );
int strcasecomp( char *a, char *b );
int strncasecomp( char *a, char *b, int n );
int strcasecomp_asterisk( char *a, char *b );
char *HTSACopy( char **dest, char *src );
char *HTSACat( char **dest, char *src );
void HTSAFree_extra( char *s );
char *HTSACopy_extra( char **dest, char *src );
char *HTNextField( char **pstr );
char *HTNextTok( char **pstr, char *delims, char *bracks, char *found );
char *HTAlloc( char *ptr, size_t length );
char *StrAllocVsprintf( char **pstr, size_t dst_len, char *fmt, va_list *ap );
char *HTSprintf( char **pstr, char *fmt, ... );
char *HTSprintf0( char **pstr, char *fmt, ... );
char *HTQuoteParameter( char *parameter );
int HTCountCommandArgs( char *command );
char *HTAfterCommandArg( char *command, int number );
void HTAddXpand( char **result, char *command, int number, char *parameter );
void HTAddToCmd( char **result, char *command, int number, char *string );
void HTAddParam( char **result, char *command, int number, char *parameter );
void HTEndParam( char **result, char *command, int number );
void HTSABCopy( bstring **dest, char *src, int len );
void HTSABCopy0( bstring **dest, char *src );
void HTSABCat( bstring **dest, char *src, int len );
void HTSABCat0( bstring **dest, char *src );
BOOLEAN HTSABEql( bstring *a, bstring *b );
void HTSABFree( bstring **ptr );
bstring *HTBprintf( bstring **pstr, char *fmt, ... );
void trace_bstring2( char *text, int size );
void trace_bstring( bstring *data );
int HTAddRule( HTRuleOp op, char *pattern, char *equiv, char *cond_op, char *cond );
void HTClearRules( void );
BOOLEAN rule_cond_ok( rule *r );
char *HTTranslate( char *required );
int HTSetConfiguration( char *config );
int HTLoadRules( char *filename );
void HTSetPresentation( char *representation, char *command, char *testcommand, double quality, double secs, double secs_per_byte, long maxbytes, AcceptMedia media );
void HTSetConversion( char *representation_in, char *representation_out, HTConverter *converter, float quality, float secs, float secs_per_byte, long maxbytes, AcceptMedia media );
void HTInitInput( int file_number );
int HTGetCharacter( void );
int half_match( char *trial_type, char *target );
BOOLEAN failsMailcap( HTPresentation *pres, HTParentAnchor *anchor );
HTPresentation *HTFindPresentation( HTFormat rep_in, HTFormat rep_out, HTPresentation *fill_in, HTParentAnchor *anchor );
HTStream *HTStreamStack( HTFormat rep_in, HTFormat rep_out, HTStream *sink, HTParentAnchor *anchor );
void HTReorderPresentation( HTFormat rep_in, HTFormat rep_out );
void HTFilterPresentations( void );
float HTStackValue( HTFormat rep_in, HTFormat rep_out, float initial_value, long length );
void HTDisplayPartial( void );
void HTFinishDisplayPartial( void );
int HTCopy( HTParentAnchor *anchor, int file_number, void *handle, HTStream *sink );
int HTFileCopy( FILE *fp, HTStream *sink );
int HTMemCopy( HTChunk *chunk, HTStream *sink );
int HTGzFileCopy( gzFile gzfp, HTStream *sink );
char *LynxZError( int status );
int HTZzFileCopy( FILE *zzfp, HTStream *sink );
void HTCopyNoCR( HTParentAnchor *anchor, int file_number, HTStream *sink );
int HTParseSocket( HTFormat rep_in, HTFormat format_out, HTParentAnchor *anchor, int file_number, HTStream *sink );
int HTParseFile( HTFormat rep_in, HTFormat format_out, HTParentAnchor *anchor, FILE *fp, HTStream *sink );
int HTParseMem( HTFormat rep_in, HTFormat format_out, HTParentAnchor *anchor, HTChunk *chunk, HTStream *sink );
int HTCloseGzFile( gzFile gzfp );
int HTParseGzFile( HTFormat rep_in, HTFormat format_out, HTParentAnchor *anchor, gzFile gzfp, HTStream *sink );
int HTParseZzFile( HTFormat rep_in, HTFormat format_out, HTParentAnchor *anchor, FILE *zzfp, HTStream *sink );
void NetToText_put_character( HTStream *me, char net_char );
void NetToText_put_string( HTStream *me, char *s );
void NetToText_put_block( HTStream *me, char *s, int l );
void NetToText_free( HTStream *me );
void NetToText_abort( HTStream *me, HTError e );
HTStream *HTNetToText( HTStream *sink );
void HTErrorStream_put_character( HTStream *me, char c );
void HTErrorStream_put_string( HTStream *me, char *s );
void HTErrorStream_write( HTStream *me, char *s, int l );
void HTErrorStream_free( HTStream *me );
void HTErrorStream_abort( HTStream *me, HTError e );
HTStream *HTErrorStream( void );
void HTMIME_TrimDoubleQuotes( char *value );
BOOLEAN content_is_compressed( HTStream *me );
void dequote( char *url );
char *UncompressedContentType( HTStream *me, CompressFileType method );
int pumpData( HTStream *me );
int dispatchField( HTStream *me );
void HTMIME_put_character( HTStream *me, char c );
void HTMIME_put_string( HTStream *me, char *s );
void HTMIME_write( HTStream *me, char *s, int l );
void HTMIME_free( HTStream *me );
void HTMIME_abort( HTStream *me, HTError e );
HTStream *HTMIMEConvert( HTPresentation *pres, HTParentAnchor *anchor, HTStream *sink );
HTStream *HTNetMIME( HTPresentation *pres, HTParentAnchor *anchor, HTStream *sink );
HTStream *HTMIMERedirect( HTPresentation *pres, HTParentAnchor *anchor, HTStream *sink );
void HTmmdec_base64( char **t, char *s );
void HTmmdec_quote( char **t, char *s );
void HTmmdecode( char **target, char *source );
int HTrjis( char **t, char *s );
int HTmaybekanji( int c1, int c2 );
void free_NNTP_AuthInfo( void );
void load_NNTP_AuthInfo( void );
char *HTGetNewsHost( void );
void HTSetNewsHost( char *value );
BOOLEAN initialize( void );
int response( char *command );
BOOLEAN match( char *unknown, char *ctemplate );
NNTPAuthResult HTHandleAuthInfo( char *host );
char *author_name( char *email );
char *author_address( char *email );
void start_anchor( char *href );
void start_link( char *href, char *rev );
void start_list( int seqnum );
void write_anchor( char *text, char *addr );
void write_anchors( char *text );
void abort_socket( void );
BOOLEAN valid_header( char *line );
void post_article( char *postfile );
char *decode_mime( char **str );
int read_article( HTParentAnchor *thisanchor );
int read_list( char *arg );
int read_group( char *groupName, int first_required, int last_required );
int HTLoadNews( char *arg, HTParentAnchor *anAnchor, HTFormat format_out, HTStream *stream );
void HTClearNNTPAuthInfo( void );
void init_acceptable( void );
char from_hex( char c );
void write_anchor( char *text, char *addr );
void parse_menu( char *arg, HTParentAnchor *anAnchor );
void parse_cso( char *arg, HTParentAnchor *anAnchor );
void display_cso( char *arg, HTParentAnchor *anAnchor );
void display_index( char *arg, HTParentAnchor *anAnchor );
void de_escape( char *command, char *selector );
void free_CSOfields( void );
void interpret_cso_key( char *key, char *buf, int *length, CSOformgen_context *ctx, HTStream *Target );
int parse_cso_field_info( CSOfield_info *blk );
int parse_cso_fields( char *buf, int size );
int generate_cso_form( char *host, int port, char *buf, HTStream *Target );
int generate_cso_report( HTStream *Target );
int HTLoadCSO( char *arg, HTParentAnchor *anAnchor, HTFormat format_out, HTStream *sink );
int HTLoadGopher( char *arg, HTParentAnchor *anAnchor, HTFormat format_out, HTStream *sink );
void do_system( char *command );
int remote_session( char *acc_method, char *host );
int HTLoadTelnet( char *addr, HTParentAnchor *anchor, HTFormat format_out, HTStream *sink );
BOOLEAN initialize( void );
void start_anchor( char *href );
int response( char *command, char *sitename, HTParentAnchor *anAnchor, HTFormat format_out, HTStream *sink );
int HTLoadFinger( char *arg, HTParentAnchor *anAnchor, HTFormat format_out, HTStream *stream );
char from_hex( char c );
void WSRCParser_put_character( HTStream *me, char c );
void give_parameter( HTStream *me, int p );
void WSRC_gen_html( HTStream *me, BOOLEAN source_file );
void WSRCParser_put_string( HTStream *context, char *str );
void WSRCParser_write( HTStream *context, char *str, int l );
void WSRCParser_free( HTStream *me );
void WSRCParser_abort( HTStream *me, HTError e );
HTStream *HTWSRCConvert( HTPresentation *pres, HTParentAnchor *anchor, HTStream *sink );
void HTAAForwardAuth_set( char *scheme_name, char *scheme_specifics );
void HTAAForwardAuth_reset( void );
HTAAServer *HTAAServer_new( char *hostname, int portnumber, BOOLEAN IsProxy );
void HTAAServer_delete( HTAAServer *killme );
HTAAServer *HTAAServer_lookup( char *hostname, int portnumber, BOOLEAN IsProxy );
HTAASetup *HTAASetup_lookup( char *hostname, int portnumber, char *docname, BOOLEAN IsProxy );
HTAASetup *HTAASetup_new( HTAAServer *server, char *ctemplate, HTList *valid_schemes, HTAssocList **scheme_specifics );
void HTAASetup_delete( HTAASetup *killme );
void HTAASetup_updateSpecifics( HTAASetup *setup, HTAssocList **specifics );
HTAARealm *HTAARealm_lookup( HTList *realm_table, char *realmname );
HTAARealm *HTAARealm_new( HTList *realm_table, char *realmname, char *username, char *password );
char *compose_auth_string( HTAAScheme scheme, HTAASetup *setup, BOOLEAN IsProxy );
HTAAScheme HTAA_selectScheme( HTAASetup *setup );
void free_HTAAGlobals( void );
char *HTAA_composeAuth( char *hostname, int portnumber, char *docname, BOOLEAN IsProxy );
BOOLEAN HTAA_shouldRetryWithAuth( char *start_of_headers, int length, int soc, BOOLEAN IsProxy );
void HTClearHTTPAuthInfo( void );
BOOLEAN isNumber( char *s );
int HTAA_getUid( void );
int HTAA_getGid( void );
void HTAA_setIds( HTAAProt *prot, char *ids );
void HTAA_parseProtFile( HTAAProt *prot, FILE *fp );
HTAAProt *HTAAProt_new( char *cur_docname, char *prot_filename, char *ids );
void HTAA_setDefaultProtection( char *cur_docname, char *prot_filename, char *ids );
void HTAA_setCurrentProtection( char *cur_docname, char *prot_filename, char *ids );
HTAAProt *HTAA_getCurrentProtection( void );
HTAAProt *HTAA_getDefaultProtection( void );
void HTAA_clearProtections( void );
void save_gid_info( char *name, int user );
void save_uid_info( char *name, int user );
char *HTAA_UidToName( int uid );
int HTAA_NameToUid( char *name );
char *HTAA_GidToName( int gid );
int HTAA_NameToGid( char *name );
HTAssocList *HTAssocList_new( void );
void HTAssocList_delete( HTAssocList *alist );
void HTAssocList_add( HTAssocList *alist, char *name, char *value );
char *HTAssocList_lookup( HTAssocList *alist, char *name );
void unlex( LexItem lex_item );
LexItem lex( FILE *fp );
char *lex_verbose( LexItem lex_item );
int HTUU_encode( unsigned char *bufin, unsigned int nbytes, char *bufcoded );
int HTUU_decode( char *bufcoded, unsigned char *bufplain, int outbufsize );
HTAAScheme HTAAScheme_enum( char *name );
char *HTAAScheme_name( HTAAScheme scheme );
HTAAMethod HTAAMethod_enum( char *name );
char *HTAAMethod_name( HTAAMethod method );
BOOLEAN HTAAMethod_inList( HTAAMethod method, HTList *list );
BOOLEAN HTAA_templateMatch( char *ctemplate, char *filename );
BOOLEAN HTAA_templateCaseMatch( char *ctemplate, char *filename );
char *HTAA_makeProtectionTemplate( char *docname );
HTList *HTAA_parseArgList( char *str );
void HTAA_setupReader( char *start_of_headers, int length, int soc );
char *HTAA_getUnfoldedLine( void );
void syntax_error( FILE *fp, char *msg, LexItem lex_item );
AddressDefList *parse_address_part( FILE *fp );
UserDefList *parse_user_part( FILE *fp );
Item *parse_item( FILE *fp );
ItemList *parse_item_list( FILE *fp );
GroupDef *HTAA_parseGroupDef( FILE *fp );
void print_item( Item *item );
void print_item_list( ItemList *item_list );
void HTAA_printGroupDef( GroupDef *group_def );
/*****************************************************************************************/
/******                                                                             ******/
/******                        Forward Var Declarations                             ******/
/******                                                                             ******/
/*****************************************************************************************/
static int HTFormNumber;
static int HTFormFields;
static char *HTCurSelectGroup;
static int HTCurSelectGroupCharset;
static char *HTCurSelectedOptionValue;
static BOOLEAN underline_on;
static BOOLEAN bold_on;
static HTStyleChange stylechanges_buffers[2][64];
static int justify_start_position;
static int ht_num_runs;
static ht_run_info ht_runs[1024];
static BOOLEAN this_line_was_split;
static TextAnchor *last_anchor_of_previous_line;
static BOOLEAN have_raw_nbsps;
static char underscore_string[1025];
static int ctrl_chars_on_this_line;
static int utfxtra_on_this_line;
static HTStyle default_style;
static HTList *loaded_texts;
static HTProtocol scm;
static int HTFormMethod;
static char *HTFormAction;
static char *HTFormEnctype;
static char *HTFormTitle;
static char *HTFormAcceptCharset;
static BOOLEAN HTFormDisabled;
static PerFormInfo *HTCurrentForm;
extern BOOLEAN can_justify_here;
extern BOOLEAN can_justify_this_line;
extern int wait_for_this_stacked_elt;
extern BOOLEAN form_in_htext;
extern BOOLEAN in_DT;
extern HText *HTMainText;
extern HTParentAnchor *HTMainAnchor;
extern int HTCurSelectGroupType;
extern char *HTCurSelectGroupSize;
extern HTList *search_queries;
extern char star_string[1025];
extern char *checked_box;
extern char *checked_radio;
extern char *unchecked_box;
extern char *unchecked_radio;
extern int LYCacheSource;
extern BOOLEAN LYShowScrollbar;
extern BOOLEAN LYsb_arrow;
extern int LYsb_begin;
extern int LYsb_end;
extern BOOLEAN ok_justify;
extern int LYlines;
extern int LYcols;
extern LinkInfo links[1024];
extern int nlinks;
extern int nhist;
extern int HTCacheSize;
extern BOOLEAN LYforce_no_cache;
extern BOOLEAN LYtrimInputFields;
extern BOOLEAN case_sensitive;
extern BOOLEAN dump_output_immediately;
extern BOOLEAN is_www_index;
extern BOOLEAN lynx_mode;
extern BOOLEAN more_text;
extern BOOLEAN number_fields_on_left;
extern BOOLEAN number_links_on_left;
extern BOOLEAN recent_sizechange;
extern BOOLEAN verbose_img;
extern char empty_string[1];
extern int display_lines;
extern int keypad_mode;
extern int www_search_result;
extern BOOLEAN no_dotfiles;
extern BOOLEAN show_dotfiles;
extern char *editor;
extern BOOLEAN use_underscore;
extern BOOLEAN no_list;
extern BOOLEAN no_title;
extern BOOLEAN historical_comments;
extern BOOLEAN minimal_comments;
extern BOOLEAN soft_dquotes;
extern BOOLEAN enable_scrollback;
extern BOOLEAN debug_display_partial;
extern BOOLEAN display_partial_flag;
extern BOOLEAN clickable_images;
extern BOOLEAN nested_tables;
extern BOOLEAN pseudo_inline_alts;
extern BOOLEAN crawl;
extern BOOLEAN traversal;
extern BOOLEAN more_links;
extern BOOLEAN LYRawMode;
extern BOOLEAN LYUseDefaultRawMode;
extern char *UCAssume_MIMEcharset;
extern BOOLEAN LYSelectPopups;
extern BOOLEAN LYNoISMAPifUSEMAP;
extern int LYHiddenLinks;
extern int Old_DTD;
extern BOOLEAN dont_wrap_pre;
extern int justify_max_void_percent;
extern BOOLEAN with_backspaces;
extern FILE *LYTraceLogFP;
extern BOOLEAN LYNoCore;
extern HTAtom *WWW_SOURCE;
extern BOOLEAN display_partial;
extern int NumOfLines_partial;
extern WINDOW *LYwin;
extern int LYshiftWin;
extern int LYwideLines;
extern int LYtableCols;
extern BOOLEAN LYCursesON;
extern BOOLEAN mustshow;
extern int nhist_extra;
extern char *LYToolbarName;
extern HTkcode kanji_code;
extern int current_char_set;
extern int LYlowest_eightbit[60];
extern LYUCcharset LYCharSet_UC[60];
extern int last_colorattr_ptr;
extern int s_forw_backw;
extern int s_hot_paste;
extern int s_title;
extern int s_sb_aa;
extern int s_sb_bar;
extern int s_sb_bg;
extern int s_sb_naa;
extern BOOLEAN psrc_view;
extern BOOLEAN LYpsrc;
extern BOOLEAN mark_htext_as_source;
extern BOOLEAN psrcview_no_anchor_numbering;
extern int UCLYhndl_for_unspec;
extern HTFormat HTOutputFormat;
extern HTProtocol HTFile;
extern HTCJKlang HTCJK;
extern BOOLEAN HTPassHighCtrlRaw;
extern BOOLEAN WWW_TraceFlag;
/*****************************************************************************************/
/******                                                                             ******/
/******                      Inline Function Definitions                            ******/
/******                                                                             ******/
/*****************************************************************************************/
