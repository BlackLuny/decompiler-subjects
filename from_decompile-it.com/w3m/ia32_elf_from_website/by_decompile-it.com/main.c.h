/*****************************************************************************************/
/******                                                                             ******/
/******                            Structure Definitions                            ******/
/******                                                                             ******/
/*****************************************************************************************/
typedef long __off_t;
typedef void _IO_lock_t;
typedef long long __quad_t;
typedef __quad_t __off64_t;
typedef unsigned int size_t;
typedef struct _IO_FILE FILE;
typedef unsigned long GC_word;
typedef int __pid_t;
typedef __pid_t pid_t;
typedef struct _Str {
     char *ptr;
     int length;
     int area_size;
  } *Str;
typedef unsigned short Lineprop;
typedef unsigned char Linecolor;
typedef struct _Line Line;
typedef union input_stream {
     struct base_stream {
       struct stream_buffer {
         unsigned char *buf;
         int size;
         int cur;
         int next;
      } stream;
       void *handle;
       char type;
       char iseos;
       int (*read)( void );
       void (*close)( void );
    } base;
     struct file_stream {
       struct stream_buffer  stream;
       struct file_handle {
         FILE *f;
         void (*close)( void );
      } *handle;
       char type;
       char iseos;
       int (*read)( void );
       void (*close)( void );
    } file;
     struct str_stream {
       struct stream_buffer  stream;
       Str handle;
       char type;
       char iseos;
       int (*read)( void );
       void (*close)( void );
    } str;
     struct encoded_stream {
       struct stream_buffer  stream;
       struct ens_handle {
         union input_stream  *is;
         Str s;
         int pos;
         char encoding;
         char __pad[3];
      } *handle;
       char type;
       char iseos;
       int (*read)( void );
       void (*close)( void );
    } ens;
  } *InputStream;
typedef struct {
     int line;
     int pos;
     int invalid;
  } BufferPoint;
typedef struct _ParsedURL ParsedURL;
typedef struct _imageCache ImageCache;
typedef struct _image Image;
typedef struct _anchor Anchor;
typedef struct _anchorList AnchorList;
typedef struct _LinkList LinkList;
typedef struct form_select_option_item FormSelectOptionItem;
typedef unsigned int uint32_t;
typedef uint32_t wc_uint32;
typedef wc_uint32 wc_ces;
typedef struct form_list FormList;
typedef struct _listitem ListItem;
typedef struct _generallist GeneralList;
typedef struct _MapList MapList;
typedef struct {
     BufferPoint *marks;
     int nmark;
     int markmax;
     int prevhseq;
  } HmarkerList;
typedef unsigned char uint8_t;
typedef uint8_t wc_uint8;
typedef struct _textlistitem TextListItem;
typedef struct _textlist TextList;
typedef struct form_item_list FormItemList;
typedef struct _Buffer Buffer;
typedef struct _Event Event;
typedef unsigned long long __u_quad_t;
typedef __u_quad_t __dev_t;
typedef unsigned long __ino_t;
typedef unsigned int __mode_t;
typedef unsigned int __nlink_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef long __blksize_t;
typedef long __blkcnt_t;
typedef long __time_t;
typedef GeneralList HistList;
typedef ListItem HistItem;
typedef struct Hash_sv Hash_sv;
typedef struct {
     HistList *list;
     HistItem *current;
     Hash_sv *hash;
  } Hist;
typedef struct _MapArea MapArea;
typedef unsigned char wc_uchar;
typedef wc_uchar wc_bool;
typedef struct _TabBuffer TabBuffer;
typedef struct _MouseActionMap MouseActionMap;
typedef struct Gpm_Event Gpm_Event;
typedef struct _AlarmEvent AlarmEvent;
typedef long long clen_t;
typedef __time_t time_t;
typedef struct _DownloadList DownloadList;
typedef struct _BufferPos BufferPos;
typedef void (*GC_warn_proc)( char *, GC_word  );
typedef struct {
     wc_uint8 auto_detect;
     wc_bool use_combining;
     wc_bool use_language_tag;
     wc_bool ucs_conv;
     wc_bool pre_conv;
     wc_bool fix_width_conv;
     wc_bool use_gb12345_map;
     wc_bool use_jisx0201;
     wc_bool use_jisc6226;
     wc_bool use_jisx0201k;
     wc_bool use_jisx0212;
     wc_bool use_jisx0213;
     wc_bool strict_iso2022;
     wc_bool gb18030_as_ucs;
     wc_bool no_replace;
     wc_bool use_wide;
  } wc_option;
typedef struct _FuncList FuncList;
typedef struct _MouseAction MouseAction;
typedef struct _TextLine TextLine;
typedef struct _textlinelistitem TextLineListItem;
typedef struct _textlinelist TextLineList;
typedef int __jmp_buf[6];
typedef struct {
     unsigned long __val[32];
  } __sigset_t;
typedef struct __jmp_buf_tag {
     __jmp_buf __jmpbuf;
     int __mask_was_saved;
     __sigset_t __saved_mask;
  } sigjmp_buf[1];
typedef struct {
     unsigned char scheme;
     char is_cgi;
     char encoding;
     InputStream stream;
     char *ext;
     int compression;
     int content_encoding;
     char *guess_type;
     char *url;
     time_t modtime;
  } URLFile;
typedef struct http_request HRequest;
typedef struct {
     char *referer;
     int flag;
  } URLOption;
typedef struct {
     int pos;
     int len;
     int tlen;
     long flag;
     Anchor anchor;
     Str img_alt;
     char fontstat[7];
     short nobr_level;
     Lineprop prev_ctype;
     char init_flag;
     short top_margin;
     short bottom_margin;
     char __pad[2];
  } Breakpoint;
typedef unsigned short table_attr;
typedef struct matrix MAT;
typedef struct vector VEC;
typedef struct form_select_option FormSelectOption;
typedef unsigned int __socklen_t;
typedef __socklen_t socklen_t;
typedef unsigned short sa_family_t;
typedef void (*__sighandler_t)( int  );
typedef union sigval sigval_t;
typedef long __clock_t;
typedef struct siginfo siginfo_t;
typedef struct Hash_si Hash_si;
typedef struct __dirstream DIR;
typedef struct dirent Directory;
typedef struct matrix {
     double *me;
     int dim;
  } *Matrix;
typedef struct vector {
     double *ve;
     int dim;
  } *Vector;
typedef int PERM;
typedef wc_uint32 wc_ccs;
typedef struct {
     wc_ccs ccs;
     wc_uint32 code;
  } wc_wchar_t;
typedef struct {
     char type;
     wc_wchar_t wch;
     unsigned char ch;
     char __pad[3];
  } longchar;
typedef struct regexchar regexchar;
typedef struct regex Regex;
typedef struct {
     wc_ces id;
     char *name;
     char *desc;
  } wc_ces_list;
typedef struct html_tag_info TagInfo;
typedef struct _MenuItem MenuItem;
typedef struct _Menu Menu;
typedef struct _MenuList MenuList;
typedef int Gpm_Handler( Gpm_Event *, void * );
typedef struct _termialImage TerminalImage;
typedef struct {
     wc_ces ces;
     char width;
     char **item;
     char encode;
     char __pad[3];
  } symbol_set;
typedef struct {
     wc_ces charset;
     symbol_set *symbol;
  } charset_symbol_set;
typedef unsigned int tcflag_t;
typedef unsigned char cc_t;
typedef unsigned int speed_t;
typedef struct termios TerminalMode;
typedef unsigned short l_prop;
typedef long __fd_mask;
typedef struct {
     __fd_mask __fds_bits[32];
  } fd_set;
typedef long __suseconds_t;
typedef struct Gpm_Connect Gpm_Connect;
typedef struct scline Screen;
typedef struct _FTP {
     char *host;
     int port;
     char *user;
     char *pass;
     InputStream rf;
     FILE *wf;
     FILE *data;
  } *FTP;
typedef unsigned short uint16_t;
typedef uint16_t in_port_t;
typedef uint32_t in_addr_t;
typedef struct _News News;
typedef struct HashItem_si HashItem_si;
typedef struct Hash_iv Hash_iv;
typedef struct tag_attribute_info TagAttrInfo;
typedef struct base_stream  *BaseStream;
typedef struct stream_buffer  *StreamBuffer;
typedef char *__gnuc_va_list;
typedef __gnuc_va_list va_list;
typedef struct Hash_ss Hash_ss;
typedef struct HashItem_ss HashItem_ss;
typedef struct HashItem_sv HashItem_sv;
typedef struct HashItem_iv HashItem_iv;
typedef struct {
     wc_ccs ccs;
     wc_uchar g;
     wc_bool init;
     char __pad[2];
  } wc_gset;
typedef struct {
     wc_ces id;
     char *name;
     char *desc;
     wc_gset *gset;
     wc_uchar *gset_ext;
     Str (*conv_from)( void );
     void (*push_to)( void );
     Str (*char_conv)( void );
  } wc_ces_info;
typedef uint16_t wc_uint16;
typedef struct {
     wc_uint16 code;
     wc_uint16 code2;
  } wc_map;
typedef struct {
     wc_ccs ccs;
     size_t n;
     wc_map *map;
     wc_wchar_t (*conv)( void );
  } wc_table;
typedef struct {
     wc_ces_info *ces_info;
     wc_uint8 gr;
     wc_uint8 gl;
     wc_uint8 ss;
     wc_ccs g0_ccs;
     wc_ccs g1_ccs;
     wc_ccs design[4];
     wc_table **tlist;
     wc_table **tlistw;
     int state;
     Str tag;
     int ntag;
     wc_uint32 base;
     int shift;
  } wc_status;
typedef wc_uint32 wc_locale;
typedef struct {
     wc_uint16 code;
     wc_uint16 code2;
     wc_uint16 code3;
  } wc_map3;
struct _IO_FILE {
     int _flags;
     char *_IO_read_ptr;
     char *_IO_read_end;
     char *_IO_read_base;
     char *_IO_write_base;
     char *_IO_write_ptr;
     char *_IO_write_end;
     char *_IO_buf_base;
     char *_IO_buf_end;
     char *_IO_save_base;
     char *_IO_backup_base;
     char *_IO_save_end;
     struct _IO_marker {
       struct _IO_marker  *_next;
       struct _IO_FILE  *_sbuf;
       int _pos;
    } *_markers;
     struct _IO_FILE  *_chain;
     int _fileno;
     int _flags2;
     __off_t _old_offset;
     unsigned short _cur_column;
     char _vtable_offset;
     char _shortbuf[1];
     _IO_lock_t *_lock;
     __off64_t _offset;
     void *__pad1;
     void *__pad2;
     void *__pad3;
     void *__pad4;
     size_t __pad5;
     int _mode;
     char _unused2[40];
  } ;
struct _Line {
     char *lineBuf;
     Lineprop *propBuf;
     Linecolor *colorBuf;
     struct _Line  *next;
     struct _Line  *prev;
     int len;
     int width;
     long linenumber;
     long real_linenumber;
     unsigned short usrflags;
     int size;
     int bpos;
     int bwidth;
  } ;
struct _ParsedURL {
     int scheme;
     char *user;
     char *pass;
     char *host;
     int port;
     char *file;
     char *real_file;
     char *query;
     char *label;
     int is_nocache;
  } ;
struct _imageCache {
     char *url;
     ParsedURL *current;
     char *file;
     char *touch;
     pid_t pid;
     char loaded;
     int index;
     short width;
     short height;
  } ;
struct _image {
     char *url;
     char *ext;
     short width;
     short height;
     short xoffset;
     short yoffset;
     short y;
     short rows;
     char *map;
     char ismap;
     int touch;
     ImageCache *cache;
  } ;
struct _anchor {
     char *url;
     char *target;
     char *referer;
     char *title;
     unsigned char accesskey;
     BufferPoint start;
     BufferPoint end;
     int hseq;
     char slave;
     short y;
     short rows;
     Image *image;
  } ;
struct _anchorList {
     Anchor *anchors;
     int nanchor;
     int anchormax;
     int acache;
  } ;
struct _LinkList {
     char *url;
     char *title;
     char *ctype;
     char type;
     struct _LinkList  *next;
  } ;
struct form_select_option_item {
     Str value;
     Str label;
     int checked;
     struct form_select_option_item  *next;
  } ;
struct form_list {
     struct form_item_list {
       int type;
       Str name;
       Str value;
       Str init_value;
       int checked;
       int init_checked;
       int accept;
       int size;
       int rows;
       int maxlength;
       int readonly;
       FormSelectOptionItem *select_option;
       Str label;
       Str init_label;
       int selected;
       int init_selected;
       struct form_list  *parent;
       struct form_item_list  *next;
    } *item;
     struct form_item_list  *lastitem;
     int method;
     Str action;
     char *target;
     char *name;
     wc_ces charset;
     int enctype;
     struct form_list  *next;
     int nitems;
     char *body;
     char *boundary;
     unsigned long length;
  } ;
struct _listitem {
     void *ptr;
     struct _listitem  *next;
     struct _listitem  *prev;
  } ;
struct _generallist {
     ListItem *first;
     ListItem *last;
     short nitem;
     char __pad[2];
  } ;
struct _MapList {
     Str name;
     GeneralList *area;
     struct _MapList  *next;
  } ;
struct _textlistitem {
     char *ptr;
     struct _textlistitem  *next;
     struct _textlistitem  *prev;
  } ;
struct _textlist {
     TextListItem *first;
     TextListItem *last;
     short nitem;
     char __pad[2];
  } ;
struct form_item_list  ;
struct _Buffer {
     char *filename;
     char *buffername;
     Line *firstLine;
     Line *topLine;
     Line *currentLine;
     Line *lastLine;
     struct _Buffer  *nextBuffer;
     struct _Buffer  *linkBuffer[5];
     short width;
     short height;
     char *type;
     char *real_type;
     int allLine;
     short bufferprop;
     int currentColumn;
     short cursorX;
     short cursorY;
     int pos;
     int visualpos;
     short rootX;
     short rootY;
     short COLS;
     short LINES;
     InputStream pagerSource;
     AnchorList *href;
     AnchorList *name;
     AnchorList *img;
     AnchorList *formitem;
     LinkList *linklist;
     FormList *formlist;
     MapList *maplist;
     HmarkerList *hmarklist;
     HmarkerList *imarklist;
     ParsedURL currentURL;
     ParsedURL *baseURL;
     char *baseTarget;
     int real_scheme;
     char *sourcefile;
     struct frameset {
       char attr;
       char dummy;
       char *name;
       ParsedURL *currentURL;
       char **width;
       char **height;
       int col;
       int row;
       int i;
       union frameset_element {
         struct frame_element {
           char attr;
           char dummy;
           char *name;
        } *element;
         struct frame_body {
           char attr;
           char flags;
           char *name;
           char *url;
           ParsedURL *baseURL;
           char *source;
           char *type;
           char *referer;
           struct _anchorList  *nameList;
           FormList *request;
        } *body;
         struct frameset  *set;
      } *frame;
    } *frameset;
     struct frameset_queue {
       struct frameset_queue  *next;
       struct frameset_queue  *back;
       struct frameset  *frameset;
       long linenumber;
       long top_linenumber;
       int pos;
       int currentColumn;
       struct _anchorList  *formitem;
    } *frameQ;
     int *clone;
     size_t trbyte;
     char check_url;
     wc_ces document_charset;
     wc_uint8 auto_detect;
     TextList *document_header;
     FormItemList *form_submit;
     char *savecache;
     char *edit;
     struct mailcap {
       char *type;
       char *viewer;
       int flags;
       char *test;
       char *nametemplate;
       char *edit;
    } *mailcap;
     char *mailcap_source;
     char *header_source;
     char search_header;
     char image_flag;
     char image_loaded;
     char need_reshape;
     Anchor *submit;
     struct _BufferPos {
       long top_linenumber;
       long cur_linenumber;
       int currentColumn;
       int pos;
       int bpos;
       struct _BufferPos  *next;
       struct _BufferPos  *prev;
    } *undo;
     struct _AlarmEvent {
       int sec;
       short status;
       int cmd;
       void *data;
    } *event;
  } ;
struct _Event {
     int cmd;
     void *data;
     struct _Event  *next;
  } ;
struct Hash_sv {
     int size;
     struct HashItem_sv {
       char *key;
       void *value;
       struct HashItem_sv  *next;
    } **tab;
  } ;
struct _MapArea {
     char *url;
     char *target;
     char *alt;
     char shape;
     short *coords;
     int ncoords;
     short center_x;
     short center_y;
  } ;
struct _TabBuffer {
     struct _TabBuffer  *nextTab;
     struct _TabBuffer  *prevTab;
     Buffer *currentBuffer;
     Buffer *firstBuffer;
     short x1;
     short x2;
     short y;
     char __pad[2];
  } ;
struct _MouseActionMap {
     void (*func)( void );
     char *data;
  } ;
enum Gpm_Etype { GPM_MOVE = 1, GPM_DRAG = 2, GPM_DOWN = 4, GPM_UP = 8, GPM_SINGLE = 16, GPM_DOUBLE = 32, GPM_TRIPLE = 64, GPM_MFLAG = 128, GPM_HARD = 256, GPM_ENTER = 512, GPM_LEAVE = 1024, } ;
enum Gpm_Margin { GPM_TOP = 1, GPM_BOT = 2, GPM_LFT = 4, GPM_RGT = 8, } ;
struct Gpm_Event {
     unsigned char buttons;
     unsigned char modifiers;
     unsigned short vc;
     short dx;
     short dy;
     short x;
     short y;
     enum Gpm_Etype  type;
     int clicks;
     enum Gpm_Margin  margin;
     short wdx;
     short wdy;
  } ;
struct _AlarmEvent  ;
struct _DownloadList {
     pid_t pid;
     char *url;
     char *save;
     char *lock;
     clen_t size;
     time_t time;
     int ok;
     struct _DownloadList  *next;
     struct _DownloadList  *prev;
  } ;
struct _BufferPos  ;
struct _FuncList {
     char *id;
     void (*func)( void );
  } ;
struct _MouseAction {
     char *menu_str;
     char *lastline_str;
     int menu_width;
     int lastline_width;
     int in_action;
     int cursorX;
     int cursorY;
     MouseActionMap default_map[3];
     MouseActionMap anchor_map[3];
     MouseActionMap active_map[3];
     MouseActionMap tab_map[3];
     MouseActionMap *menu_map[3];
     MouseActionMap *lastline_map[3];
  } ;
struct _TextLine {
     Str line;
     short pos;
     char __pad[2];
  } ;
struct _textlinelistitem {
     TextLine *ptr;
     struct _textlinelistitem  *next;
     struct _textlinelistitem  *prev;
  } ;
struct _textlinelist {
     TextLineListItem *first;
     TextLineListItem *last;
     short nitem;
     char __pad[2];
  } ;
struct http_request {
     char command;
     char flag;
     char *referer;
     FormList *request;
  } ;
struct matrix  ;
struct vector  ;
struct form_select_option {
     FormSelectOptionItem *first;
     FormSelectOptionItem *last;
  } ;
union sigval {
     int sival_int;
     void *sival_ptr;
  } ;
struct siginfo {
     int si_signo;
     int si_errno;
     int si_code;
     union {
       int _pad[29];
       struct {
         __pid_t si_pid;
         __uid_t si_uid;
      } _kill;
       struct {
         int si_tid;
         int si_overrun;
         sigval_t si_sigval;
      } _timer;
       struct {
         __pid_t si_pid;
         __uid_t si_uid;
         sigval_t si_sigval;
      } _rt;
       struct {
         __pid_t si_pid;
         __uid_t si_uid;
         int si_status;
         __clock_t si_utime;
         __clock_t si_stime;
      } _sigchld;
       struct {
         void *si_addr;
      } _sigfault;
       struct {
         long si_band;
         int si_fd;
      } _sigpoll;
    } _sifields;
  } ;
struct Hash_si {
     int size;
     struct HashItem_si {
       char *key;
       int value;
       struct HashItem_si  *next;
    } **tab;
  } ;
struct __dirstream  ;
struct dirent {
     __ino_t d_ino;
     __off_t d_off;
     unsigned short d_reclen;
     unsigned char d_type;
     char d_name[256];
     char __pad[1];
  } ;
struct regexchar {
     union {
       longchar *pattern;
       struct regex {
         regexchar re[64];
         longchar storage[256];
         char *position;
         char *lposition;
         struct regex  *alt_regex;
      } *sub;
    } p;
     unsigned char mode;
     char __pad[3];
  } ;
struct regex  ;
struct html_tag_info {
     char *name;
     unsigned char *accept_attribute;
     unsigned char max_attribute;
     unsigned char flag;
     char __pad[2];
  } ;
struct _MenuItem {
     int type;
     char *label;
     int *variable;
     int value;
     void (*func)( void );
     struct _Menu {
       struct _Menu  *parent;
       int cursorX;
       int cursorY;
       int x;
       int y;
       int width;
       int height;
       int nitem;
       MenuItem *item;
       int initial;
       int select;
       int offset;
       int active;
       int (*keymap[128])( char  );
       int keyselect[128];
    } *popup;
     char *keys;
     char *data;
  } ;
struct _Menu  ;
struct _MenuList {
     char *id;
     Menu *menu;
     MenuItem *item;
  } ;
struct _termialImage {
     ImageCache *cache;
     short x;
     short y;
     short sx;
     short sy;
     short width;
     short height;
  } ;
struct termios {
     tcflag_t c_iflag;
     tcflag_t c_oflag;
     tcflag_t c_cflag;
     tcflag_t c_lflag;
     cc_t c_line;
     cc_t c_cc[32];
     speed_t c_ispeed;
     speed_t c_ospeed;
  } ;
struct Gpm_Connect {
     unsigned short eventMask;
     unsigned short defaultMask;
     unsigned short minMod;
     unsigned short maxMod;
     int pid;
     int vc;
  } ;
struct scline {
     char **lineimage;
     l_prop *lineprop;
     short isdirty;
     short eol;
  } ;
struct _News {
     char *host;
     int port;
     char *mode;
     InputStream rf;
     FILE *wf;
  } ;
struct HashItem_si  ;
struct Hash_iv {
     int size;
     struct HashItem_iv {
       int key;
       void *value;
       struct HashItem_iv  *next;
    } **tab;
  } ;
struct tag_attribute_info {
     char *name;
     unsigned char vtype;
     unsigned char flag;
     char __pad[2];
  } ;
struct Hash_ss {
     int size;
     struct HashItem_ss {
       char *key;
       char *value;
       struct HashItem_ss  *next;
    } **tab;
  } ;
struct HashItem_ss  ;
struct HashItem_sv  ;
struct HashItem_iv  ;
struct complex {
     double real;
     double imaginary;
  } ;
struct stat {
     __dev_t st_dev;
     unsigned short __pad1;
     __ino_t st_ino;
     __mode_t st_mode;
     __nlink_t st_nlink;
     __uid_t st_uid;
     __gid_t st_gid;
     __dev_t st_rdev;
     unsigned short __pad2;
     __off_t st_size;
     __blksize_t st_blksize;
     __blkcnt_t st_blocks;
     struct timespec {
       __time_t tv_sec;
       long tv_nsec;
    } st_atim;
     struct timespec  st_mtim;
     struct timespec  st_ctim;
     unsigned long __unused4;
     unsigned long __unused5;
  } ;
struct parsed_tagarg {
     char *arg;
     char *value;
     struct parsed_tagarg  *next;
  } ;
struct auth_cookie  ;
struct cookie {
     ParsedURL url;
     Str name;
     Str value;
     time_t expires;
     Str path;
     Str domain;
     Str comment;
     Str commentURL;
     struct portlist {
       unsigned short port;
       struct portlist  *next;
    } *portl;
     char version;
     char flag;
     struct cookie  *next;
  } ;
struct compression_decoder {
     int type;
     char *ext;
     char *mime_type;
     int auxbin_p;
     char *cmd;
     char *name;
     char *encoding;
     char *encodings[4];
  } ;
struct utimbuf {
     __time_t actime;
     __time_t modtime;
  } ;
struct auth_param {
     char *name;
     Str val;
  } ;
struct http_auth {
     int pri;
     char *scheme;
     struct auth_param  *param;
     Str (*cred)( struct http_auth *, Str , Str , ParsedURL *, HRequest *, FormList * );
  } ;
struct readbuffer {
     Str line;
     Lineprop cprop;
     short pos;
     Str prevchar;
     long flag;
     long flag_stack[10];
     int flag_sp;
     int status;
     unsigned char end_tag;
     short table_level;
     short nobr_level;
     Anchor anchor;
     Str img_alt;
     char fontstat[7];
     char fontstat_stack[5][7];
     int fontstat_sp;
     Lineprop prev_ctype;
     Breakpoint bp;
     struct cmdtable {
       char *cmdname;
       int cmd;
    } *tag_stack[10];
     int tag_sp;
     short top_margin;
     short bottom_margin;
  } ;
struct link_stack {
     int cmd;
     short offset;
     short pos;
     struct link_stack  *next;
  } ;
struct html_feed_environ {
     struct readbuffer  *obuf;
     TextLineList *buf;
     FILE *f;
     Str tagbuf;
     int limit;
     int maxlimit;
     struct environment {
       unsigned char env;
       int type;
       int count;
       char indent;
       char __pad[3];
    } *envs;
     int nenv;
     int envc;
     int envc_real;
     char *title;
     int blank_lines;
  } ;
struct parsed_tag {
     unsigned char tagid;
     unsigned char *attrid;
     char **value;
     unsigned char *map;
     char need_reconstruct;
     char __pad[3];
  } ;
struct table {
     int row;
     int col;
     int maxrow;
     int maxcol;
     int max_rowsize;
     int border_mode;
     int total_width;
     int total_height;
     int tabcontentssize;
     int indent;
     int cellspacing;
     int cellpadding;
     int vcellpadding;
     int vspace;
     int flag;
     Str caption;
     Str id;
     GeneralList ***tabdata;
     table_attr **tabattr;
     table_attr trattr;
     Str **tabidvalue;
     Str *tridvalue;
     short tabwidth[50];
     short minimum_width[50];
     short fixed_width[50];
     struct table_cell {
       short col[20];
       short colspan[20];
       short index[20];
       short maxcell;
       short icell;
       short eindex[20];
       short necell;
       short width[20];
       short minimum_width[20];
       short fixed_width[20];
    } cell;
     short *tabheight;
     struct table_in {
       struct table  *ptr;
       short col;
       short row;
       short cell;
       short indent;
       TextLineList *buf;
    } *tables;
     short ntable;
     short tables_size;
     TextList *suspended_data;
     struct table_linfo {
       Lineprop prev_ctype;
       char prev_spaces;
       Str prevchar;
       short length;
       char __pad[2];
    } linfo;
     MAT *matrix;
     VEC *vector;
     int sloppy_width;
  } ;
struct table_mode {
     unsigned int pre_mode;
     char indent_level;
     char caption;
     short nobr_offset;
     char nobr_level;
     short anchor_offset;
     unsigned char end_tag;
     char __pad[3];
  } ;
struct auth_pass {
     int bad;
     int is_proxy;
     Str host;
     int port;
     Str realm;
     Str uname;
     Str pwd;
     struct auth_pass  *next;
  } ;
struct passwd {
     char *pw_name;
     char *pw_passwd;
     __uid_t pw_uid;
     __gid_t pw_gid;
     char *pw_gecos;
     char *pw_dir;
     char *pw_shell;
  } ;
struct addrinfo {
     int ai_flags;
     int ai_family;
     int ai_socktype;
     int ai_protocol;
     socklen_t ai_addrlen;
     struct sockaddr {
       sa_family_t sa_family;
       char sa_data[14];
    } *ai_addr;
     char *ai_canonname;
     struct addrinfo  *ai_next;
  } ;
struct sigaction {
     union {
       __sighandler_t sa_handler;
       void (*sa_sigaction)( int , siginfo_t *, void * );
    } __sigaction_handler;
     __sigset_t sa_mask;
     int sa_flags;
     void (*sa_restorer)( void );
  } ;
struct __dirstream  ;
struct pre_form {
     char *url;
     Regex *re_url;
     char *name;
     char *action;
     struct pre_form_item {
       int type;
       char *name;
       char *value;
       int checked;
       struct pre_form_item  *next;
    } *item;
     struct pre_form  *next;
  } ;
struct rc_search_table {
     struct param_ptr {
       char *name;
       int type;
       int inputtype;
       void *varptr;
       char *comment;
       void *select;
    } *param;
     short uniq_pos;
     char __pad[2];
  } ;
struct sel_c {
     int value;
     char *cvalue;
     char *text;
  } ;
struct param_section {
     char *name;
     struct param_ptr  *params;
  } ;
struct w3m_term_info {
     char *term;
     char *title_str;
     int mouse_flag;
  } ;
struct winsize {
     unsigned short ws_row;
     unsigned short ws_col;
     unsigned short ws_xpixel;
     unsigned short ws_ypixel;
  } ;
struct timeval {
     __time_t tv_sec;
     __suseconds_t tv_usec;
  } ;
struct table2 {
     char *item1;
     char *item2;
  } ;
struct sockaddr_in {
     sa_family_t sin_family;
     in_port_t sin_port;
     struct in_addr {
       in_addr_t s_addr;
    } sin_addr;
     unsigned char sin_zero[8];
  } ;
struct hostent {
     char *h_name;
     char **h_aliases;
     int h_addrtype;
     int h_length;
     char **h_addr_list;
  } ;
struct sockaddr_storage {
     sa_family_t ss_family;
     unsigned long __ss_align;
     char __ss_padding[120];
  } ;
struct tm {
     int tm_sec;
     int tm_min;
     int tm_hour;
     int tm_mday;
     int tm_mon;
     int tm_year;
     int tm_wday;
     int tm_yday;
     int tm_isdst;
     long tm_gmtoff;
     char *tm_zone;
  } ;
struct MatchingContext2 {
     int label;
     Regex *regex;
     char *lastpos;
     struct MatchingContext1 {
       int label;
       regexchar *re;
       char *lastpos;
       char *str;
       int iter_limit;
       int n_any;
       int firstp;
       char *end_p;
       Regex *sub_regex;
       struct MatchingContext1  *sub_ctx;
       struct MatchingContext2  *ctx2;
    } *ctx;
     struct MatchingContext2  *ctx2;
     char *str;
     int n_any;
     int firstp;
  } ;
/*****************************************************************************************/
/******                                                                             ******/
/******                          Function Prototypes                                ******/
/******                                                                             ******/
/*****************************************************************************************/
void fversion( FILE *f );
void fusage( FILE *f, int err );
void wrap_GC_warn_proc( char *msg, GC_word arg );
void sig_chld( int signo );
Str make_optional_header_string( char *s );
int main( int argc, char **argv, char **envp );
void keyPressEventProc( int c );
void pushEvent( int cmd, void *data );
void dump_source( Buffer *buf );
void dump_head( Buffer *buf );
void dump_extra( Buffer *buf );
void do_dump( Buffer *buf );
void nulcmd( void );
void pcmap( void );
void escKeyProc( int c, int esc, unsigned char *map );
void escmap( void );
void escbmap( void );
void escdmap( char c );
void multimap( void );
void tmpClearBuffer( Buffer *buf );
void pushBuffer( Buffer *buf );
void delBuffer( Buffer *buf );
void repBuffer( Buffer *oldbuf, Buffer *buf );
void intTrap( int _dummy );
void resize_hook( int _dummy );
void resize_screen( void );
void SigPipe( int _dummy );
void nscroll( int n, int mode );
void pgFore( void );
void pgBack( void );
void lup1( void );
void ldown1( void );
void ctrCsrV( void );
void ctrCsrH( void );
void rdrwSc( void );
void clear_mark( Line *l );
int srchcore( char *str, int (*func)( Buffer *, char * ) );
void disp_srchresult( int result, char *prompt, char *str );
int dispincsrch( int ch, Str buf, Lineprop *prop );
void isrch( int (*func)( Buffer *, char * ), char *prompt );
void srch( int (*func)( Buffer *, char * ), char *prompt );
void srchfor( void );
void isrchfor( void );
void srchbak( void );
void isrchbak( void );
void srch_nxtprv( int reverse );
void srchnxt( void );
void srchprv( void );
void shiftvisualpos( Buffer *buf, int shift );
void shiftl( void );
void shiftr( void );
void col1R( void );
void col1L( void );
void setEnv( void );
void pipeBuf( void );
void pipesh( void );
void readsh( void );
void execsh( void );
void ldfile( void );
void ldhelp( void );
void cmd_loadfile( char *fn );
void _movL( int n );
void movL( void );
void movL1( void );
void _movD( int n );
void movD( void );
void movD1( void );
void _movU( int n );
void movU( void );
void movU1( void );
void _movR( int n );
void movR( void );
void movR1( void );
int prev_nonnull_line( Line *line );
void movLW( void );
int next_nonnull_line( Line *line );
void movRW( void );
void _quitfm( int confirm );
void quitfm( void );
void qquitfm( void );
void selBuf( void );
void susp( void );
void _goLine( char *l );
void goLine( void );
void goLineF( void );
void goLineL( void );
void linbeg( void );
void linend( void );
int cur_real_linenumber( Buffer *buf );
void editBf( void );
void editScr( void );
void _mark( void );
void nextMk( void );
void prevMk( void );
void reMark( void );
Buffer *loadNormalBuf( Buffer *buf, int renderframe );
Buffer *loadLink( char *url, char *target, char *referer, FormList *request );
void gotoLabel( char *label );
void followA( void );
void bufferA( void );
void followI( void );
FormItemList *save_submit_formlist( FormItemList *src );
Str conv_form_encoding( Str val, FormItemList *fi, Buffer *buf );
void query_from_followform( Str *query, FormItemList *fi, int multipart );
void submitForm( void );
void followForm( void );
void _followForm( int submit );
void topA( void );
void lastA( void );
void nextA( void );
void prevA( void );
void nextVA( void );
void prevVA( void );
void _nextA( int visited );
void _prevA( int visited );
void nextX( int d, int dy );
void nextY( int d );
void nextL( void );
void nextLU( void );
void nextR( void );
void nextRD( void );
void nextD( void );
void nextU( void );
void nextBf( void );
void prevBf( void );
int checkBackBuffer( Buffer *buf );
void backBf( void );
void deletePrevBuf( void );
void cmd_loadURL( char *url, ParsedURL *current, char *referer, FormList *request );
void goURL0( char *prompt, int relative );
void goURL( void );
void gorURL( void );
void cmd_loadBuffer( Buffer *buf, int prop, int linkid );
void ldBmark( void );
void adBmark( void );
void ldOpt( void );
void setOpt( void );
void msgs( void );
void pginfo( void );
void follow_map( struct parsed_tagarg  *arg );
void linkMn( void );
void anchorMn( Anchor *(*menu_func)( Buffer * ), int go );
void accessKey( void );
void listMn( void );
void movlistMn( void );
void linkLst( void );
void cooLst( void );
void ldHist( void );
void svA( void );
void svI( void );
void svBuf( void );
void svSrc( void );
void _peekURL( int only_img );
void peekURL( void );
void peekIMG( void );
Str currentURL( void );
void curURL( void );
void vwSrc( void );
void reload( void );
void reshape( void );
void _docCSet( wc_ces charset );
void change_charset( struct parsed_tagarg  *arg );
void docCSet( void );
void defCSet( void );
void chkURLBuffer( Buffer *buf );
void chkURL( void );
void chkWORD( void );
void chkNMIDBuffer( Buffer *buf );
void chkNMID( void );
void rFrame( void );
void invoke_browser( char *url );
void extbrz( void );
void linkbrz( void );
void curlno( void );
void dispI( void );
void stopI( void );
int mouse_scroll_line( void );
TabBuffer *posTab( int x, int y );
void do_mouse_action( int btn, int x, int y );
void process_mouse( int btn, int x, int y );
void msToggle( void );
void mouse( void );
int gpm_process_mouse( Gpm_Event *event, void *data );
void movMs( void );
void menuMs( void );
void tabMs( void );
void closeTMs( void );
void dispVer( void );
void wrapToggle( void );
int is_wordchar( int c, char *badchars );
char *getCurWord( Buffer *buf, int *spos, int *epos, char *badchars );
char *GetWord( Buffer *buf );
void execdict( char *word );
void dictword( void );
void dictwordat( void );
void set_buffer_environ( Buffer *buf );
char *searchKeyData( void );
int searchKeyNum( void );
void deleteFiles( void );
void w3m_exit( int i );
void execCmd( void );
void SigAlarm( int _dummy );
void setAlarm( void );
AlarmEvent *setAlarmEvent( AlarmEvent *event, int sec, short status, int cmd, void *data );
void reinit( void );
void defKey( void );
TabBuffer *newTab( void );
void _newT( void );
void newT( void );
TabBuffer *numTab( int n );
void calcTabPos( void );
TabBuffer *deleteTab( TabBuffer *tab );
void closeT( void );
void nextT( void );
void prevT( void );
void followTab( TabBuffer *tab );
void tabA( void );
void tabURL0( TabBuffer *tab, char *prompt, int relative );
void tabURL( void );
void tabrURL( void );
void moveTab( TabBuffer *t, TabBuffer *t2, int right );
void tabR( void );
void tabL( void );
void addDownloadList( pid_t pid, char *url, char *save, char *lock, clen_t size );
int checkDownloadList( void );
char *convert_size3( clen_t size );
Buffer *DownloadListBuffer( void );
void download_action( struct parsed_tagarg  *arg );
void stopDownload( void );
void ldDL( void );
void save_buffer_position( Buffer *buf );
void resetPos( BufferPos *b );
void undoPos( void );
void redoPos( void );
void KeyAbort( int _dummy );
void UFhalfclose( URLFile *f );
int currentLn( Buffer *buf );
Buffer *loadSomething( URLFile *f, char *path, Buffer *(*loadproc)( URLFile *, Buffer * ), Buffer *defaultbuf );
int dir_exist( char *path );
int is_dump_text_type( char *type );
int is_text_type( char *type );
int is_plain_text_type( char *type );
int is_html_type( char *type );
void check_compression( char *path, URLFile *uf );
char *compress_application_type( int compression );
char *uncompressed_file_type( char *path, char **ext );
int setModtime( char *path, time_t modtime );
void examineFile( char *path, URLFile *uf );
int check_command( char *cmd, int auxbin_p );
char *acceptableEncoding( void );
Str convertLine( URLFile *uf, Str line, int mode, wc_ces *charset, wc_ces doc_charset );
Buffer *loadFile( char *path );
int matchattr( char *p, char *attr, int len, Str *value );
char *xface2xpm( char *xface );
void readHeader( URLFile *uf, Buffer *newBuf, int thru, ParsedURL *pu );
char *checkHeader( Buffer *buf, char *field );
char *checkContentType( Buffer *buf );
int skip_auth_token( char **pp );
Str extract_auth_val( char **q );
Str qstr_unquote( Str s );
char *extract_auth_param( char *q, struct auth_param  *auth );
Str get_auth_param( struct auth_param  *auth, char *name );
Str AuthBasicCred( struct http_auth  *ha, Str uname, Str pw, ParsedURL *pu, HRequest *hr, FormList *request );
struct http_auth  *findAuthentication( struct http_auth  *hauth, Buffer *buf, char *auth_field );
void getAuthCookie( struct http_auth  *hauth, char *auth_header, TextList *extra_header, ParsedURL *pu, HRequest *hr, FormList *request, Str *uname, Str *pwd );
int same_url_p( ParsedURL *pu1, ParsedURL *pu2 );
int checkRedirection( ParsedURL *pu );
Buffer *loadGeneralFile( char *path, ParsedURL *current, char *referer, int flag, FormList *request );
char *has_hidden_link( struct readbuffer  *obuf, int cmd );
void push_link( int cmd, int offset, int pos );
int is_period_char( unsigned char *ch );
int is_beginning_char( unsigned char *ch );
int is_word_char( unsigned char *ch );
int is_combining_char( unsigned char *ch );
int is_boundary( unsigned char *ch1, unsigned char *ch2 );
void set_breakpoint( struct readbuffer  *obuf, int tag_length );
void back_to_breakpoint( struct readbuffer  *obuf );
void append_tags( struct readbuffer  *obuf );
void push_tag( struct readbuffer  *obuf, char *cmdname, int cmd );
void push_nchars( struct readbuffer  *obuf, int width, char *str, int len, Lineprop mode );
void check_breakpoint( struct readbuffer  *obuf, int pre_mode, char *ch );
void push_char( struct readbuffer  *obuf, int pre_mode, char ch );
void push_spaces( struct readbuffer  *obuf, int pre_mode, int width );
void proc_mchar( struct readbuffer  *obuf, int pre_mode, int width, char **str, Lineprop mode );
void push_render_image( Str str, int width, int limit, struct html_feed_environ  *h_env );
int sloppy_parse_line( char **str );
void passthrough( struct readbuffer  *obuf, char *str, int back );
void fillline( struct readbuffer  *obuf, int indent );
void flushline( struct html_feed_environ  *h_env, struct readbuffer  *obuf, int indent, int force, int width );
void do_blankline( struct html_feed_environ  *h_env, struct readbuffer  *obuf, int indent, int indent_incr, int width );
void purgeline( struct html_feed_environ  *h_env );
int close_effect0( struct readbuffer  *obuf, int cmd );
void close_anchor( struct html_feed_environ  *h_env, struct readbuffer  *obuf );
void save_fonteffect( struct html_feed_environ  *h_env, struct readbuffer  *obuf );
void restore_fonteffect( struct html_feed_environ  *h_env, struct readbuffer  *obuf );
Str process_title( struct parsed_tag  *tag );
Str process_n_title( struct parsed_tag  *tag );
void feed_title( char *str );
Str process_img( struct parsed_tag  *tag, int width );
Str process_anchor( struct parsed_tag  *tag, char *tagbuf );
Str process_input( struct parsed_tag  *tag );
Str process_select( struct parsed_tag  *tag );
Str process_n_select( void );
void feed_select( char *str );
void process_option( void );
Str process_textarea( struct parsed_tag  *tag, int width );
Str process_n_textarea( void );
void feed_textarea( char *str );
Str process_hr( struct parsed_tag  *tag, int width, int indent_width );
char *check_charset( char *p );
char *check_accept_charset( char *ac );
Str process_form_int( struct parsed_tag  *tag, int fid );
Str process_form( struct parsed_tag  *tag );
Str process_n_form( void );
void clear_ignore_p_flag( int cmd, struct readbuffer  *obuf );
void set_alignment( struct readbuffer  *obuf, struct parsed_tag  *tag );
void process_idattr( struct readbuffer  *obuf, int cmd, struct parsed_tag  *tag );
int ul_type( struct parsed_tag  *tag, int default_type );
int getMetaRefreshParam( char *q, Str *refresh_uri );
int HTMLtagproc1( struct parsed_tag  *tag, struct html_feed_environ  *h_env );
Str textlist_feed( void );
int ex_efct( int ex );
void HTMLlineproc2body( Buffer *buf, Str (*feed)( void ), int llimit );
void addLink( Buffer *buf, struct parsed_tag  *tag );
void HTMLlineproc2( Buffer *buf, TextLineList *tl );
Str file_feed( void );
void HTMLlineproc3( Buffer *buf, InputStream stream );
void proc_escape( struct readbuffer  *obuf, char **str_return );
int need_flushline( struct html_feed_environ  *h_env, struct readbuffer  *obuf, Lineprop mode );
int table_width( struct html_feed_environ  *h_env, int table_level );
void HTMLlineproc0( char *line, struct html_feed_environ  *h_env, int internal );
void addnewline2( Buffer *buf, char *line, Lineprop *prop, Linecolor *color, int pos, int nlines );
void addnewline( Buffer *buf, char *line, Lineprop *prop, Linecolor *color, int pos, int width, int nlines );
Buffer *loadHTMLBuffer( URLFile *f, Buffer *newBuf );
char *convert_size( clen_t size, int usefloat );
char *convert_size2( clen_t size1, clen_t size2, int usefloat );
void showProgress( clen_t *linelen, clen_t *trbyte );
void init_henv( struct html_feed_environ  *h_env, struct readbuffer  *obuf, struct environment  *envs, int nenv, TextLineList *buf, int limit, int indent );
void completeHTMLstream( struct html_feed_environ  *h_env, struct readbuffer  *obuf );
void print_internal_information( struct html_feed_environ  *henv );
void loadHTMLstream( URLFile *f, Buffer *newBuf, FILE *src, int internal );
Buffer *loadHTMLString( Str page );
Str loadGopherDir( URLFile *uf, ParsedURL *pu, wc_ces *charset );
Buffer *loadBuffer( URLFile *uf, Buffer *newBuf );
Buffer *loadImageBuffer( URLFile *uf, Buffer *newBuf );
Str conv_symbol( Line *l );
void _saveBuffer( Buffer *buf, Line *l, FILE *f, int cont );
void saveBuffer( Buffer *buf, FILE *f, int cont );
void saveBufferBody( Buffer *buf, FILE *f, int cont );
Buffer *loadcmdout( char *cmd, Buffer *(*loadproc)( URLFile *, Buffer * ), Buffer *defaultbuf );
Buffer *getshell( char *cmd );
Buffer *getpipe( char *cmd );
Buffer *openPagerBuffer( InputStream stream, Buffer *buf );
Buffer *openGeneralPagerBuffer( InputStream stream );
Line *getNextPage( Buffer *buf, int plen );
int save2tmp( URLFile uf, char *tmpf );
int doExternal( URLFile uf, char *path, char *type, Buffer **bufp, Buffer *defaultbuf );
int _MoveFile( char *path1, char *path2 );
int _doFileCopy( char *tmpf, char *defstr, int download );
int doFileMove( char *tmpf, char *defstr );
int doFileSave( URLFile uf, char *defstr );
int checkCopyFile( char *path1, char *path2 );
int checkSaveFile( InputStream stream, char *path2 );
int checkOverWrite( char *path );
char *inputAnswer( char *prompt );
void uncompress_stream( URLFile *uf, char **src );
FILE *lessopen_stream( char *path );
char *guess_filename( char *file );
char *guess_save_name( Buffer *buf, char *path );
Buffer *newBuffer( int width );
Buffer *nullBuffer( void );
void clearBuffer( Buffer *buf );
void discardBuffer( Buffer *buf );
Buffer *namedBuffer( Buffer *first, char *name );
Buffer *deleteBuffer( Buffer *first, Buffer *delbuf );
Buffer *replaceBuffer( Buffer *first, Buffer *delbuf, Buffer *newbuf );
Buffer *nthBuffer( Buffer *firstbuf, int n );
void writeBufferName( Buffer *buf, int n );
void gotoLine( Buffer *buf, int n );
void gotoRealLine( Buffer *buf, int n );
Buffer *listBuffer( Buffer *top, Buffer *current );
Buffer *selectBuffer( Buffer *firstbuf, Buffer *currentbuf, char *selectchar );
void reshapeBuffer( Buffer *buf );
void copyBuffer( Buffer *a, Buffer *b );
Buffer *prevBuffer( Buffer *first, Buffer *buf );
int writeBufferCache( Buffer *buf );
int readBufferCache( Buffer *buf );
void effect_anchor_start( void );
void effect_anchor_end( void );
void effect_image_start( void );
void effect_image_end( void );
void effect_form_start( void );
void effect_form_end( void );
void effect_mark_start( void );
void effect_mark_end( void );
void effect_active_start( void );
void effect_active_end( void );
void effect_visited_start( void );
void effect_visited_end( void );
void fmTerm( void );
void fmInit( void );
Str make_lastline_link( Buffer *buf, char *title, char *url );
Str make_lastline_message( Buffer *buf );
void displayBuffer( Buffer *buf, int mode );
void drawAnchorCursor0( Buffer *buf, AnchorList *al, int hseq, int prevhseq, int tline, int eline, int active );
void drawAnchorCursor( Buffer *buf );
void redrawNLine( Buffer *buf, int n );
Line *redrawLine( Buffer *buf, Line *l, int i );
Line *redrawLineImage( Buffer *buf, Line *l, int i );
int redrawLineRegion( Buffer *buf, Line *l, int i, int bpos, int epos );
void do_effects( Lineprop m );
void do_color( Linecolor c );
void addChar( char c, Lineprop mode );
void addMChar( char *p, Lineprop mode, size_t len );
void record_err_message( char *s );
Buffer *message_list_panel( void );
void message( char *s, int return_x, int return_y );
void disp_err_message( char *s, int redraw_current );
void disp_message_nsec( char *s, int redraw_current, int sec, int purge, int mouse );
void disp_message( char *s, int redraw_current );
void disp_message_nomouse( char *s, int redraw_current );
void set_delayed_message( char *s );
void cursorUp0( Buffer *buf, int n );
void cursorUp( Buffer *buf, int n );
void cursorDown0( Buffer *buf, int n );
void cursorDown( Buffer *buf, int n );
void cursorUpDown( Buffer *buf, int n );
void cursorRight( Buffer *buf, int n );
void cursorLeft( Buffer *buf, int n );
void cursorHome( Buffer *buf );
void arrangeCursor( Buffer *buf );
void arrangeLine( Buffer *buf );
void cursorXY( Buffer *buf, int x, int y );
void restorePosition( Buffer *buf, Buffer *orig );
int columnSkip( Buffer *buf, int offset );
int columnPos( Line *line, int column );
Line *lineSkip( Buffer *buf, Line *line, int offset, int last );
Line *currentLineSkip( Buffer *buf, Line *line, int offset, int last );
int gethtmlcmd( char **s );
int parse_ansi_color( char **str, Lineprop *effect, Linecolor *color );
Str checkType( Str s, Lineprop **oprop, Linecolor **ocolor );
int nextColumn( int n, char *p, Lineprop *pr );
int calcPosition( char *l, Lineprop *pr, int len, int pos, int bpos, int mode );
int columnLen( Line *line, int column );
char *lastFileName( char *path );
char *mybasename( char *s );
char *mydirname( char *s );
int next_status( char c, int *status );
int read_token( Str buf, char **instr, int *status, int pre, int append );
Str correct_irrtag( int status );
void add_auth_pass_entry( struct auth_pass  *ent, int netrc, int override );
struct auth_pass  *find_auth_pass_entry( char *host, int port, char *realm, char *uname, int is_proxy );
int find_auth_user_passwd( ParsedURL *pu, char *realm, Str *uname, Str *pwd, int is_proxy );
void add_auth_user_passwd( ParsedURL *pu, char *realm, Str uname, Str pwd, int is_proxy );
void invalidate_auth_user_passwd( ParsedURL *pu, char *realm, Str uname, Str pwd, int is_proxy );
Str next_token( Str arg );
void parsePasswd( FILE *fp, int netrc );
FILE *openSecretFile( char *fname );
void loadPasswd( void );
char *last_modified( Buffer *buf );
Str romanNum2( int l, int n );
Str romanNumeral( int n );
Str romanAlphabet( int n );
void reset_signals( void );
void close_all_fds_except( int i, int f );
void setup_child( int child, int i, int f );
pid_t open_pipe_rw( FILE **fr, FILE **fw );
void myExec( char *command );
void mySystem( char *command, int background );
Str myExtCommand( char *cmd, char *arg, int redirect );
Str myEditor( char *cmd, char *file, int line );
char *expandName( char *name );
char *file_to_url( char *file );
char *url_unquote_conv( char *url, wc_ces charset );
Str tmpfname( int type, char *ext );
int get_day( char **s );
int get_month( char **s );
int get_year( char **s );
int get_time( char **s, int *hour, int *min, int *sec );
int get_zone( char **s, int *z_hour, int *z_min );
time_t mymktime( char *timestr );
char *FQDN( char *host );
void (*mySignal)( int  )( int signal_number, void (*action)( int  ) );
void set_mark( Line *l, int pos, int epos );
void init_migemo( void );
int open_migemo( char *migemo_command );
char *migemostr( char *str );
char *conv_search_string( char *str, wc_ces f_ces );
int forwardSearch( Buffer *buf, char *str );
int backwardSearch( Buffer *buf, char *str );
char *inputLineHistSearch( char *prompt, char *def_str, int flag, Hist *hist, int (*incrfunc)( int , Str , Lineprop * ) );
void addPasswd( char *p, Lineprop *pr, int len, int offset, int limit );
void addStr( char *p, Lineprop *pr, int len, int offset, int limit );
void ins_char( Str str );
void _esc( void );
void insC( void );
void delC( void );
void _mvL( void );
void _mvLw( void );
void _mvRw( void );
void _mvR( void );
void _bs( void );
void _bsw( void );
void _enter( void );
void insertself( char c );
void _quo( void );
void _mvB( void );
void _mvE( void );
void killn( void );
void killb( void );
void _inbrk( void );
void _compl( void );
void _rcompl( void );
void _tcompl( void );
void next_compl( int next );
void _dcompl( void );
void _rdcompl( void );
void next_dcompl( int next );
Str escape_spaces( Str s );
Str unescape_spaces( Str s );
Str doComplete( Str ifn, int *status, int next );
void _prev( void );
void _next( void );
int setStrType( Str str, Lineprop *prop );
int terminated( unsigned char c );
void _editor( void );
int LUfactor( Matrix A, int *indexarray );
int LUsolve( Matrix A, int *indexarray, Vector b, Vector x );
Matrix LUinverse( Matrix A, int *indexarray, Matrix out );
int Usolve( Matrix mat, Vector b, Vector out, double diag );
int Lsolve( Matrix mat, Vector b, Vector out, double diag );
Matrix new_matrix( int n );
Vector new_vector( int n );
double weight( int x );
double weight2( int a );
int bsearch_2short( short e1, short *ent1, short e2, short *ent2, int base, short *indexarray, int nent );
int bsearch_double( double e, double *ent, short *indexarray, int nent );
int ceil_at_intervals( int x, int step );
int floor_at_intervals( int x, int step );
int table_colspan( struct table  *t, int row, int col );
int table_rowspan( struct table  *t, int row, int col );
int minimum_cellspacing( int border_mode );
int table_border_width( struct table  *t );
struct table  *newTable( void );
void check_row( struct table  *t, int row );
void pushdata( struct table  *t, int row, int col, char *data );
void suspend_or_pushdata( struct table  *tbl, char *line );
int visible_length( char *str );
int visible_length_plain( char *str );
int maximum_visible_length( char *str, int offset );
int maximum_visible_length_plain( char *str, int offset );
void align( TextLine *lbuf, int width, int mode );
void print_item( struct table  *t, int row, int col, int width, Str buf );
void print_sep( struct table  *t, int row, int type, int maxcol, Str buf );
int get_spec_cell_width( struct table  *tbl, int row, int col );
void do_refill( struct table  *tbl, int row, int col, int maxlimit );
int table_rule_width( struct table  *t );
void check_cell_width( short *tabwidth, short *cellwidth, short *col, short *colspan, short maxcell, short *indexarray, int space, int dir );
void check_minimum_width( struct table  *t, short *tabwidth );
void check_maximum_width( struct table  *t );
void set_integered_width( struct table  *t, double *dwidth, short *iwidth );
double correlation_coefficient( double sxx, double syy, double sxy );
double correlation_coefficient2( double sxx, double syy, double sxy );
double recalc_width( double old, double swidth, int cwidth, double sxx, double syy, double sxy, int is_inclusive );
int check_compressible_cell( struct table  *t, MAT *minv, double *newwidth, double *swidth, short *cwidth, double totalwidth, double *Sxx, int icol, int icell, double sxx, int corr );
int check_table_width( struct table  *t, double *newwidth, MAT *minv, int itr );
void check_table_height( struct table  *t );
int get_table_width( struct table  *t, short *orgwidth, short *cellwidth, int flag );
void renderCoTable( struct table  *tbl, int maxlimit );
void make_caption( struct table  *t, struct html_feed_environ  *h_env );
void renderTable( struct table  *t, int max_width, struct html_feed_environ  *h_env );
struct table  *begin_table( int border, int spacing, int padding, int vspace );
void end_table( struct table  *tbl );
void check_minimum0( struct table  *t, int min );
int setwidth0( struct table  *t, struct table_mode  *mode );
void setwidth( struct table  *t, struct table_mode  *mode );
void addcontentssize( struct table  *t, int width );
void clearcontentssize( struct table  *t, struct table_mode  *mode );
void begin_cell( struct table  *t, struct table_mode  *mode );
void check_rowcol( struct table  *tbl, struct table_mode  *mode );
int skip_space( struct table  *t, char *line, struct table_linfo  *linfo, int checkminimum );
void feed_table_inline_tag( struct table  *tbl, char *line, struct table_mode  *mode, int width );
void feed_table_block_tag( struct table  *tbl, char *line, struct table_mode  *mode, int indent, int cmd );
void table_close_select( struct table  *tbl, struct table_mode  *mode, int width );
void table_close_textarea( struct table  *tbl, struct table_mode  *mode, int width );
void table_close_anchor0( struct table  *tbl, struct table_mode  *mode );
int feed_table_tag( struct table  *tbl, char *line, struct table_mode  *mode, int width, struct parsed_tag  *tag );
int feed_table( struct table  *tbl, char *line, struct table_mode  *mode, int width, int internal );
void feed_table1( struct table  *tbl, Str tok, struct table_mode  *mode, int width );
void pushTable( struct table  *tbl, struct table  *tbl1 );
int correct_table_matrix( struct table  *t, int col, int cspan, int a, double b );
void correct_table_matrix2( struct table  *t, int col, int cspan, double s, double b );
void correct_table_matrix3( struct table  *t, int col, char *flags, double s, double b );
void correct_table_matrix4( struct table  *t, int col, int cspan, char *flags, double s, double b );
void set_table_matrix0( struct table  *t, int maxwidth );
void check_relative_width( struct table  *t, int maxwidth );
void set_table_matrix( struct table  *t, int width );
void writeLocalCookie( void );
Str localCookie( void );
Str loadLocalDir( char *dname );
int check_local_cgi( char *file, int status );
void set_environ( char *var, char *value );
void set_cgi_environ( char *name, char *fn, char *req_uri );
Str checkPath( char *fn, char *path );
int cgi_filename( char *uri, char **fn, char **name, char **path_info );
FILE *localcgi_post( char *uri, char *qstr, FormList *request, char *referer );
struct form_list  *newFormList( char *action, char *method, char *charset, char *enctype, char *target, char *name, struct form_list  *_next );
struct form_item_list  *formList_addInput( struct form_list  *fl, struct parsed_tag  *tag );
char *form2str( FormItemList *fi );
int formtype( char *typestr );
void formRecheckRadio( Anchor *a, Buffer *buf, FormItemList *fi );
void formResetBuffer( Buffer *buf, AnchorList *formitem );
int form_update_line( Line *line, char **str, int spos, int epos, int width, int newline, int password );
void formUpdateBuffer( Anchor *a, Buffer *buf, FormItemList *form );
Str textfieldrep( Str s, int width );
void form_fputs_decode( Str s, FILE *f );
void input_textarea( FormItemList *fi );
void do_internal( char *action, char *data );
void addSelectOption( FormSelectOption *fso, Str value, Str label, int chk );
void chooseSelectOption( FormItemList *fi, FormSelectOptionItem *item );
void updateSelectOption( FormItemList *fi, FormSelectOptionItem *item );
int formChooseOptionByMenu( struct form_item_list  *fi, int x, int y );
void form_write_data( FILE *f, char *boundary, char *name, char *value );
void form_write_from_file( FILE *f, char *boundary, char *name, char *filename, char *file );
struct pre_form  *add_pre_form( struct pre_form  *prev, char *url, char *name, char *action );
struct pre_form_item  *add_pre_form_item( struct pre_form  *pf, struct pre_form_item  *prev, int type, char *name, char *value, char *checked );
void loadPreForm( void );
void preFormUpdateBuffer( Buffer *buf );
MapList *searchMapList( Buffer *buf, char *name );
int inMapArea( MapArea *a, int x, int y );
int nearestMapArea( MapList *ml, int x, int y );
int searchMapArea( Buffer *buf, MapList *ml, Anchor *a_img );
MapArea *retrieveCurrentMapArea( Buffer *buf );
int getMapXY( Buffer *buf, Anchor *a, int *x, int *y );
Anchor *retrieveCurrentMap( Buffer *buf );
MapArea *follow_map_menu( Buffer *buf, char *name, Anchor *a_img, int x, int y );
MapArea *newMapArea( char *url, char *target, char *alt, char *shape, char *coords );
void append_map_info( Buffer *buf, Str tmp, FormItemList *fi );
void append_link_info( Buffer *buf, Str html, LinkList *link );
void append_frame_info( Buffer *buf, Str html, struct frameset  *set, int level );
Buffer *page_info_panel( Buffer *buf );
void KeyAbort( int _dummy );
int parseFrameSetLength( char *s, char ***ret );
struct frameset  *newFrameSet( struct parsed_tag  *tag );
struct frame_body  *newFrame( struct parsed_tag  *tag, Buffer *buf );
void unloadFrame( struct frame_body  *b );
void deleteFrame( struct frame_body  *b );
void addFrameSetElement( struct frameset  *f, union frameset_element  element );
void deleteFrameSet( struct frameset  *f );
void deleteFrameSetElement( union frameset_element  e );
struct frame_body  *copyFrame( struct frame_body  *ob );
struct frameset  *copyFrameSet( struct frameset  *of );
void flushFrameSet( struct frameset  *fs );
void pushFrameTree( struct frameset_queue  **fqpp, struct frameset  *fs, Buffer *buf );
struct frameset  *popFrameTree( struct frameset_queue  **fqpp );
void resetFrameElement( union frameset_element  *f_element, Buffer *buf, char *referer, FormList *request );
struct frameset  *frame_download_source( struct frame_body  *b, ParsedURL *currentURL, ParsedURL *baseURL, int flag );
int createFrameFile( struct frameset  *f, FILE *f1, Buffer *current, int level, int force_reload );
Buffer *renderFrame( Buffer *Cbuf, int force_reload );
union frameset_element  *search_frame( struct frameset  *fset, char *name );
int compare_table( struct rc_search_table  *a, struct rc_search_table  *b );
void create_option_search_table( void );
struct param_ptr  *search_param( char *name );
void show_params( FILE *fp );
int str_to_bool( char *value, int old );
int str_to_color( char *value );
int set_param( char *name, char *value );
int set_param_option( char *option );
char *get_param_option( char *name );
void interpret_rc( FILE *f );
void parse_proxy( void );
void parse_cookie( void );
void sync_with_option( void );
void init_rc( void );
Str to_str( struct param_ptr  *p );
Buffer *load_option_panel( void );
void panel_set_option( struct parsed_tagarg  *arg );
char *rcFile( char *base );
char *auxbinFile( char *base );
char *etcFile( char *base );
char *confFile( char *base );
void new_menu( Menu *menu, MenuItem *item );
void geom_menu( Menu *menu, int x, int y, int mselect );
void draw_all_menu( Menu *menu );
void draw_menu( Menu *menu );
void draw_menu_item( Menu *menu, int mselect );
int select_menu( Menu *menu, int mselect );
void goto_menu( Menu *menu, int mselect, int down );
void up_menu( Menu *menu, int n );
void down_menu( Menu *menu, int n );
int action_menu( Menu *menu );
void popup_menu( Menu *parent, Menu *menu );
void guess_menu_xy( Menu *parent, int width, int *x, int *y );
void new_option_menu( Menu *menu, char **label, int *variable, void (*func)( void ) );
void set_menu_frame( void );
int mEsc( char c );
int mEscB( char c );
int mEscD( char c );
int mNull( char c );
int mSelect( char c );
int mDown( char c );
int mUp( char c );
int mLast( char c );
int mTop( char c );
int mNext( char c );
int mPrev( char c );
int mFore( char c );
int mBack( char c );
int mLineU( char c );
int mLineD( char c );
int mOk( char c );
int mCancel( char c );
int mClose( char c );
int mSusp( char c );
int menuForwardSearch( Menu *menu, char *str, int from );
int menu_search_forward( Menu *menu, int from );
int mSrchF( char c );
int menuBackwardSearch( Menu *menu, char *str, int from );
int menu_search_backward( Menu *menu, int from );
int mSrchB( char c );
int menu_search_next_previous( Menu *menu, int from, int reverse );
int mSrchN( char c );
int mSrchP( char c );
int mMouse_scroll_line( void );
int process_mMouse( int btn, int x, int y );
int mMouse( char c );
int gpm_process_menu_mouse( Gpm_Event *event, void *data );
void popupMenu( int x, int y, Menu *menu );
void mainMenu( int x, int y );
void mainMn( void );
void selMn( void );
void initSelectMenu( void );
void smChBuf( void );
int smDelBuf( char c );
void tabMn( void );
void initSelTabMenu( void );
void smChTab( void );
int smDelTab( char c );
void optionMenu( int x, int y, char **label, int *variable, int initial, void (*func)( void ) );
void interpret_menu( FILE *mf );
void initMenu( void );
int setMenuItem( MenuItem *item, char *type, char *line );
int addMenuList( MenuList **mlist, char *id );
int getMenuN( MenuList *list, char *id );
LinkList *link_menu( Buffer *buf );
Anchor *accesskey_menu( Buffer *buf );
int lmGoto( char c );
int lmSelect( char c );
Anchor *list_menu( Buffer *buf );
int mailcapMatch( struct mailcap  *mcap, char *type );
struct mailcap  *searchMailcap( struct mailcap  *table, char *type );
int matchMailcapAttr( char *p, char *attr, int len, Str *value );
int extractMailcapEntry( char *mcap_entry, struct mailcap  *mcap );
struct mailcap  *loadMailcap( char *filename );
void initMailcap( void );
char *acceptableMimeTypes( void );
struct mailcap  *searchExtViewer( char *type );
Str quote_mailcap( char *s, int flag );
Str unquote_mailcap_loop( char *qstr, char *type, char *name, char *attr, int *mc_stat, int flag0 );
Str unquote_mailcap( char *qstr, char *type, char *name, char *attr, int *mc_stat );
void initImage( void );
int getCharSize( void );
void termImage( void );
int openImgdisplay( void );
void closeImgdisplay( void );
void addImage( ImageCache *cache, int x, int y, int sx, int sy, int w, int h );
void syncImage( void );
void drawImage( void );
void clearImage( void );
void deleteImage( Buffer *buf );
void getAllImage( Buffer *buf );
void showImageProgress( Buffer *buf );
void loadImage( Buffer *buf, int flag );
ImageCache *getImage( Image *image, ParsedURL *current, int flag );
int getImageSize( ImageCache *cache );
void encode_symbol( symbol_set *s );
char **get_symbol( wc_ces charset, int *width );
char **set_symbol( int width );
void push_symbol( Str str, char symbol, int width, int n );
char *conv_entity( unsigned int c );
void writestr( char *s );
int set_tty( void );
void ttymode_set( int mode, int imode );
void ttymode_reset( int mode, int imode );
void set_cc( int spec, int val );
void close_tty( void );
char *ttyname_tty( void );
void reset_tty( void );
void reset_exit( int _dummy );
void error_dump( int _dummy );
void set_int( void );
void setgraphchar( void );
void getTCstr( void );
void setlinescols( void );
void setupscreen( void );
int initscr( void );
int write1( char c );
void move( int line, int column );
int need_redraw( char *c1, l_prop pr1, char *c2, l_prop pr2 );
void addch( char c );
void addmch( char *pc, size_t len );
void wrap( void );
void touch_column( int col );
void touch_line( void );
void standout( void );
void standend( void );
void toggle_stand( void );
void bold( void );
void boldend( void );
void underline( void );
void underlineend( void );
void graphstart( void );
void graphend( void );
int graph_ok( void );
void setfcolor( int color );
char *color_seq( int colmode );
void setbcolor( int color );
char *bcolor_seq( int colmode );
void refresh( void );
void clear( void );
void clrtoeol( void );
void clrtoeol_with_bcolor( void );
void clrtoeolx( void );
void clrtobot_eol( void (*clrtoeol)( void ) );
void clrtobot( void );
void clrtobotx( void );
void addstr( char *s );
void addnstr( char *s, int n );
void addnstr_sup( char *s, int n );
void crmode( void );
void nocrmode( void );
void term_echo( void );
void term_noecho( void );
void term_raw( void );
void term_cooked( void );
void term_cbreak( void );
void term_title( char *s );
char getch( void );
char wgetch( void *p );
int do_getch( void );
void bell( void );
void skip_escseq( void );
int sleep_till_anykey( int sec, int purge );
void mouse_init( void );
void mouse_end( void );
void mouse_active( void );
void mouse_inactive( void );
void flush_tty( void );
void touch_cursor( void );
struct table2  *loadMimeTypes( char *filename );
void initMimeTypes( void );
char *DefaultFile( int scheme );
void KeyAbort( int _dummy );
void write_from_file( int sock, char *file );
ParsedURL *baseURL( Buffer *buf );
int openSocket( char *hostname, char *remoteport_name, unsigned short remoteport_num );
char *copyPath( char *orgpath, int length, int option );
void parseURL( char *url, ParsedURL *p_url, ParsedURL *current );
void copyParsedURL( ParsedURL *p, ParsedURL *q );
void parseURL2( char *url, ParsedURL *pu, ParsedURL *current );
Str _parsedURL2Str( ParsedURL *pu, int pass );
Str parsedURL2Str( ParsedURL *pu );
int getURLScheme( char **url );
char *otherinfo( ParsedURL *target, ParsedURL *current, char *referer );
Str HTTPrequestMethod( HRequest *hr );
Str HTTPrequestURI( ParsedURL *pu, HRequest *hr );
Str HTTPrequest( ParsedURL *pu, ParsedURL *current, HRequest *hr, TextList *extra );
void init_stream( URLFile *uf, int scheme, InputStream stream );
URLFile openURL( char *url, ParsedURL *pu, ParsedURL *current, URLOption *option, FormList *request, TextList *extra_header, URLFile *ouf, HRequest *hr, unsigned char *status );
void add_index_file( ParsedURL *pu, URLFile *uf );
char *guessContentTypeFromTable( struct table2  *table, char *filename );
char *guessContentType( char *filename );
TextList *make_domain_list( char *domain_list );
int domain_match( char *pat, char *domain );
int check_no_proxy( char *domain );
char *filename_extension( char *path, int is_url );
struct table2  *loadURIMethods( char *filename );
void initURIMethods( void );
Str searchURIMethods( ParsedURL *pu );
void chkExternalURIBuffer( Buffer *buf );
ParsedURL *schemeToProxy( int scheme );
void KeyAbort( int _dummy );
Str ftp_command( FTP ftp, char *cmd, char *arg, int *status );
void ftp_close( FTP ftp );
int ftp_login( FTP ftp );
int ftp_pasv( FTP ftp );
time_t ftp_modtime( FTP ftp, char *path );
int ftp_quit( FTP ftp );
void closeFTPdata( FILE *f );
void closeFTP( void );
InputStream openFTPStream( ParsedURL *pu, URLFile *uf );
Str loadFTPDir( ParsedURL *pu, wc_ces *charset );
void disconnectFTP( void );
int ex_ftpdir_name_size_date( char *line, char **name, char **link, char **date, char **sizep );
Str size_int2str( clen_t size );
unsigned char c2e( char x );
int ha2d( char x, char y );
Str decodeB( char **ww );
Str decodeU( char **ww );
Str decodeQ( char **ww );
Str decodeQP( char **ww );
Str decodeWord( char **ow, wc_ces *charset );
Str decodeMIME( Str orgstr, wc_ces *charset );
Str encodeB( char *a );
longchar set_longchar( char *str );
char *regexCompile( char *ex, int igncase );
Regex *newRegex0( char **ex, int igncase, Regex *regex, char **msg, int level );
Regex *newRegex( char *ex, int igncase, Regex *regex, char **msg );
int regexMatch( char *str, int len, int firstp );
int RegexMatch( Regex *re, char *str, int len, int firstp );
void MatchedPosition( Regex *re, char **first, char **last );
void matchedPosition( char **first, char **last );
int regmatch_sub_anytime( struct MatchingContext2  *c, Regex *regex, regexchar *pat2, char *str, char *end_p, int iter_limit, int firstp );
int regmatch_iter( struct MatchingContext1  *c, regexchar *re, char *str, char *end_p, int firstp );
int regmatch( regexchar *re, char *str, char *end_p, int firstp, char **lastpos );
int regmatch1( regexchar *re, longchar *c );
int matchWhich( longchar *pattern, longchar *c, int igncase );
int match_longchar( longchar *a, longchar *b, int ignore );
int match_range_longchar( longchar *a, longchar *b, longchar *c, int ignore );
void KeyAbort( int _dummy );
Str news_command( News *news, char *cmd, char *arg, int *status );
void news_close( News *news );
int news_open( News *news );
void news_quit( News *news );
char *name_from_address( char *str, int n );
char *html_quote_s( char *str );
void add_news_message( Str str, int index, char *date, char *name, char *subject, char *mid, char *scheme, char *group );
InputStream openNewsStream( ParsedURL *pu );
Str loadNewsgroup( ParsedURL *pu, wc_ces *charset );
void closeNews( void );
void disconnectNews( void );
void setKeymap( char *p, int lineno, int verbose );
void interpret_keymap( FILE *kf, struct stat  *current, int force );
void initKeymap( int force );
int getFuncList( char *id );
char *getKeyData( int key );
int getKey2( char **str );
int getKey( char *s );
char *getWord( char **str );
char *getQWord( char **str );
void setMouseAction0( char **str, int *width, MouseActionMap **map, char *p );
void setMouseAction1( MouseActionMap **map, int width, char *p );
void setMouseAction2( MouseActionMap *map, char *p );
void interpret_mouse_action( FILE *mf );
void initMouseAction( void );
int total_dot_number( char *p, char *ep, int max_count );
char *domain_match( char *host, char *domain );
struct portlist  *make_portlist( Str port );
Str portlist2str( struct portlist  *first );
int port_match( struct portlist  *first, int port );
void check_expired_cookies( void );
Str make_cookie( struct cookie  *cookie );
int match_cookie( ParsedURL *pu, struct cookie  *cookie, char *domainname );
struct cookie  *get_cookie_info( Str domain, Str path, Str name );
Str find_cookie( ParsedURL *pu );
int add_cookie( ParsedURL *pu, Str name, Str value, time_t expires, Str domain, Str path, int flag, Str comment, int version, Str port, Str commentURL );
struct cookie  *nth_cookie( int n );
void save_cookies( void );
Str readcol( char **p );
void load_cookies( void );
void initCookie( void );
Buffer *cookie_list_panel( void );
void set_cookie_flag( struct parsed_tagarg  *arg );
int check_cookie_accept_domain( char *domain );
Buffer *historyBuffer( Hist *hist );
void loadHistory( Hist *hist );
void saveHistory( Hist *hist, size_t size );
Hist *newHist( void );
Hist *copyHist( Hist *hist );
HistItem *unshiftHist( Hist *hist, char *ptr );
HistItem *pushHist( Hist *hist, char *ptr );
HistItem *pushHashHist( Hist *hist, char *ptr );
HistItem *getHashHist( Hist *hist, char *ptr );
char *lastHist( Hist *hist );
char *nextHist( Hist *hist );
char *prevHist( Hist *hist );
void print_headers( Buffer *buf, int len );
void internal_get( char *url, int flag, FormList *request );
void get( TextList *argv );
void post( TextList *argv );
void set( TextList *argv );
void show( TextList *argv );
void quit( TextList *argv );
void help( TextList *argv );
void set_column( TextList *argv );
void show_column( TextList *argv );
void call_command_function( char *str );
int backend( void );
char *readline( char *prompt );
TextList *split( char *p );
AnchorList *putAnchor( AnchorList *al, char *url, char *target, Anchor **anchor_return, char *referer, char *title, unsigned char key, int line, int pos );
Anchor *registerHref( Buffer *buf, char *url, char *target, char *referer, char *title, unsigned char key, int line, int pos );
Anchor *registerName( Buffer *buf, char *url, int line, int pos );
Anchor *registerImg( Buffer *buf, char *url, char *title, int line, int pos );
Anchor *registerForm( Buffer *buf, FormList *flist, struct parsed_tag  *tag, int line, int pos );
int onAnchor( Anchor *a, int line, int pos );
Anchor *retrieveAnchor( AnchorList *al, int line, int pos );
Anchor *retrieveCurrentAnchor( Buffer *buf );
Anchor *retrieveCurrentImg( Buffer *buf );
Anchor *retrieveCurrentForm( Buffer *buf );
Anchor *searchAnchor( AnchorList *al, char *str );
Anchor *searchURLLabel( Buffer *buf, char *url );
Anchor *_put_anchor_news( Buffer *buf, char *p1, char *p2, int line, int pos );
Anchor *_put_anchor_all( Buffer *buf, char *p1, char *p2, int line, int pos );
void reseq_anchor0( AnchorList *al, short *seqmap );
void reseq_anchor( Buffer *buf );
char *reAnchorPos( Buffer *buf, Line *l, char *p1, char *p2, Anchor *(*anchorproc)( Buffer *, char *, char *, int , int  ) );
void reAnchorWord( Buffer *buf, Line *l, int spos, int epos );
char *reAnchorAny( Buffer *buf, char *re, Anchor *(*anchorproc)( Buffer *, char *, char *, int , int  ) );
char *reAnchor( Buffer *buf, char *re );
char *reAnchorNews( Buffer *buf, char *re );
char *reAnchorNewsheader( Buffer *buf );
HmarkerList *putHmarker( HmarkerList *ml, int line, int pos, int seq );
Anchor *closest_next_anchor( AnchorList *a, Anchor *an, int x, int y );
Anchor *closest_prev_anchor( AnchorList *a, Anchor *an, int x, int y );
void shiftAnchorPosition( AnchorList *al, HmarkerList *hl, int line, int pos, int shift );
void addMultirowsImg( Buffer *buf, AnchorList *al );
void addMultirowsForm( Buffer *buf, AnchorList *al );
char *getAnchorText( Buffer *buf, AnchorList *al, Anchor *a );
Buffer *link_list_panel( Buffer *buf );
int noConv( char *oval, char **str );
int toNumber( char *oval, int *num );
int toLength( char *oval, int *len );
int toAlign( char *oval, int *align );
int toVAlign( char *oval, int *valign );
struct parsed_tag  *parse_tag( char **s, int internal );
int parsedtag_set_value( struct parsed_tag  *tag, int id, char *value );
int parsedtag_get_value( struct parsed_tag  *tag, int id, void *value );
Str parsedtag2str( struct parsed_tag  *tag );
void do_update( BaseStream base );
int buffer_read( StreamBuffer sb, char *obuf, int count );
void init_buffer( BaseStream base, char *buf, int bufsize );
void init_base_stream( BaseStream base, int bufsize );
void init_str_stream( BaseStream base, Str s );
InputStream newInputStream( int des );
InputStream newFileStream( FILE *f, void (*closep)( void ) );
InputStream newStrStream( Str s );
InputStream newEncodedStream( InputStream is, char encoding );
int ISclose( InputStream stream );
int ISgetc( InputStream stream );
int ISundogetc( InputStream stream );
Str StrISgets( InputStream stream );
Str StrmyISgets( InputStream stream );
int ISread( InputStream stream, Str buf, int count );
int ISfileno( InputStream stream );
int ISeos( InputStream stream );
void basic_close( int *handle );
int basic_read( int *handle, char *buf, int len );
void file_close( struct file_handle  *handle );
int file_read( struct file_handle  *handle, char *buf, int len );
int str_read( Str handle, char *buf, int len );
void ens_close( struct ens_handle  *handle );
int ens_read( struct ens_handle  *handle, char *buf, int len );
Str Strnew( void );
Str Strnew_size( int n );
Str Strnew_charp( char *p );
Str Strnew_m_charp( char *p, ... );
Str Strnew_charp_n( char *p, int n );
Str Strdup( Str s );
void Strclear( Str s );
void Strfree( Str x );
void Strcopy( Str x, Str y );
void Strcopy_charp( Str x, char *y );
void Strcopy_charp_n( Str x, char *y, int n );
void Strcat_charp_n( Str x, char *y, int n );
void Strcat( Str x, Str y );
void Strcat_charp( Str x, char *y );
void Strcat_m_charp( Str x, ... );
void Strgrow( Str x );
Str Strsubstr( Str s, int beg, int len );
void Strlower( Str s );
void Strupper( Str s );
void Strchop( Str s );
void Strinsert_char( Str s, int pos, char c );
void Strinsert_charp( Str s, int pos, char *p );
void Strdelete( Str s, int pos, int n );
void Strtruncate( Str s, int pos );
void Strshrink( Str s, int n );
void Strremovefirstspaces( Str s );
void Strremovetrailingspaces( Str s );
Str Stralign_left( Str s, int width );
Str Stralign_right( Str s, int width );
Str Stralign_center( Str s, int width );
Str Sprintf( char *fmt, ... );
Str Strfgets( FILE *f );
Str Strfgetall( FILE *f );
clen_t strtoclen( char *s );
char *allocStr( char *s, int len );
int strCmp( void *s1, void *s2 );
char *currentdir( void );
char *cleanupName( char *name );
char *expandPath( char *name );
int strcasematch( char *s1, char *s2 );
int strcasemstr( char *str, char **srch, char **ret_ptr );
char *remove_space( char *str );
int non_null( char *s );
void cleanup_line( Str s, int mode );
int getescapechar( char **str );
char *getescapecmd( char **s );
char *html_quote( char *str );
char *html_unquote( char *str );
char *url_quote( char *str );
char *file_quote( char *str );
char *file_unquote( char *str );
Str Str_form_quote( Str x );
Str Str_url_unquote( Str x, int is_form, int safe );
char *shell_quote( char *str );
char *w3m_dir( char *name, char *dft );
char *w3m_auxbin_dir( void );
char *w3m_lib_dir( void );
char *w3m_etc_dir( void );
char *w3m_conf_dir( void );
char *w3m_help_dir( void );
ListItem *newListItem( void *s, ListItem *n, ListItem *p );
GeneralList *newGeneralList( void );
void pushValue( GeneralList *tl, void *s );
void *popValue( GeneralList *tl );
void *rpopValue( GeneralList *tl );
void delValue( GeneralList *tl, ListItem *it );
GeneralList *appendGeneralList( GeneralList *tl, GeneralList *tl2 );
TextLine *newTextLine( Str line, int pos );
void appendTextLine( TextLineList *tl, Str line, int pos );
char *tag_get_value( struct parsed_tagarg  *t, char *arg );
int tag_exists( struct parsed_tagarg  *t, char *arg );
struct parsed_tagarg  *cgistr2tagarg( char *cgistr );
unsigned int hashfunc( char *s );
Hash_si *newHash_si( int size );
HashItem_si *lookupHash_si( Hash_si *t, char *key, int *hashval_return );
void putHash_si( Hash_si *t, char *key, int value );
int getHash_si( Hash_si *t, char *key, int failval );
Hash_ss *newHash_ss( int size );
HashItem_ss *lookupHash_ss( Hash_ss *t, char *key, int *hashval_return );
void putHash_ss( Hash_ss *t, char *key, char *value );
char *getHash_ss( Hash_ss *t, char *key, char *failval );
Hash_sv *newHash_sv( int size );
HashItem_sv *lookupHash_sv( Hash_sv *t, char *key, int *hashval_return );
void putHash_sv( Hash_sv *t, char *key, void *value );
void *getHash_sv( Hash_sv *t, char *key, void *failval );
Hash_iv *newHash_iv( int size );
HashItem_iv *lookupHash_iv( Hash_iv *t, int key, int *hashval_return );
void putHash_iv( Hash_iv *t, int key, void *value );
void *getHash_iv( Hash_iv *t, int key, void *failval );
void wc_char_conv_init( wc_ces f_ces, wc_ces t_ces );
Str wc_char_conv( char c );
wc_ces wc_guess_charset( char *charset, wc_ces orig );
wc_ces wc_guess_charset_short( char *charset, wc_ces orig );
wc_ces wc_guess_locale_charset( char *locale, wc_ces orig );
wc_ces wc_charset_to_ces( char *charset );
wc_ces wc_charset_short_to_ces( char *charset );
wc_ces wc_locale_to_ces( char *locale );
char *wc_ces_to_charset( wc_ces ces );
char *wc_ces_to_charset_desc( wc_ces ces );
wc_ces wc_guess_8bit_charset( wc_ces orig );
wc_bool wc_check_ces( wc_ces ces );
int wc_ces_list_cmp( void *a, void *b );
wc_ces_list *wc_get_ces_list( void );
Str wc_Str_conv( Str is, wc_ces f_ces, wc_ces t_ces );
Str wc_Str_conv_strict( Str is, wc_ces f_ces, wc_ces t_ces );
Str wc_conv_to_ces( Str is, wc_ces ces );
Str wc_Str_conv_with_detect( Str is, wc_ces *f_ces, wc_ces hint, wc_ces t_ces );
void wc_push_end( Str os, wc_status *st );
void wc_create_detect_map( wc_ces ces, wc_bool esc );
wc_ces wc_auto_detect( char *is, size_t len, wc_ces hint );
Str wc_conv_from_hz( Str is, wc_ces ces );
void wc_push_to_hz( Str os, wc_wchar_t cc, wc_status *st );
void wc_push_to_hz_end( Str os, wc_status *st );
void wtf_push_iso2022( Str os, wc_ccs ccs, wc_uint32 code );
Str wc_conv_from_iso2022( Str is, wc_ces ces );
int wc_parse_iso2022_esc( wc_uchar **ptr, wc_status *st );
void wc_push_to_iso2022( Str os, wc_wchar_t cc, wc_status *st );
void wc_push_to_iso2022_end( Str os, wc_status *st );
void wc_push_iso2022_esc( Str os, wc_ccs ccs, wc_uchar g, wc_uint8 invoke, wc_status *st );
void wc_push_to_euc( Str os, wc_wchar_t cc, wc_status *st );
void wc_push_to_eucjp( Str os, wc_wchar_t cc, wc_status *st );
void wc_push_to_euctw( Str os, wc_wchar_t cc, wc_status *st );
void wc_push_to_iso8859( Str os, wc_wchar_t cc, wc_status *st );
void wc_create_gmap( wc_status *st );
Str wc_char_conv_from_iso2022( wc_uchar c, wc_status *st );
wc_wchar_t wc_jisx0201k_to_jisx0208( wc_wchar_t cc );
wc_wchar_t wc_jisx0212_to_jisx0213( wc_wchar_t cc );
wc_wchar_t wc_jisx0213_to_jisx0212( wc_wchar_t cc );
wc_ccs wc_jisx0208_or_jisx02131( wc_uint16 code );
wc_ccs wc_jisx0212_or_jisx02132( wc_uint16 code );
wc_wchar_t wc_johab_to_ksx1001( wc_wchar_t cc );
wc_wchar_t wc_ksx1001_to_johab( wc_wchar_t cc );
wc_wchar_t wc_ucs_to_johab( wc_uint32 ucs );
wc_uint32 wc_johab1_to_N( wc_uint32 code );
wc_uint32 wc_N_to_johab1( wc_uint32 code );
wc_wchar_t wc_johab_to_cs128w( wc_wchar_t cc );
wc_wchar_t wc_cs128w_to_johab( wc_wchar_t cc );
Str wc_conv_from_johab( Str is, wc_ces ces );
void wc_push_to_johab( Str os, wc_wchar_t cc, wc_status *st );
Str wc_char_conv_from_johab( wc_uchar c, wc_status *st );
void wc_putc_init( wc_ces f_ces, wc_ces t_ces );
void wc_putc( char *c, FILE *f );
void wc_putc_end( FILE *f );
void wc_putc_clear_status( void );
int map_cmp( void *a, void *b );
int map3_cmp( void *a, void *b );
int map_range_cmp( void *a, void *b );
int map2_range_cmp( void *a, void *b );
int map3_range_cmp( void *a, void *b );
wc_map *wc_map_search( wc_uint16 code, wc_map *map, size_t n );
wc_map3 *wc_map3_search( wc_uint16 c1, wc_uint16 c2, wc_map3 *map, size_t n );
wc_map *wc_map_range_search( wc_uint16 code, wc_map *map, int n );
wc_map *wc_map2_range_search( wc_uint16 code, wc_map *map, size_t n );
wc_map3 *wc_map3_range_search( wc_uint16 code, wc_map3 *map, size_t n );
wc_wchar_t wc_sjis_to_jis( wc_wchar_t cc );
wc_wchar_t wc_jis_to_sjis( wc_wchar_t cc );
wc_wchar_t wc_sjis_ext_to_cs94w( wc_wchar_t cc );
wc_wchar_t wc_cs94w_to_sjis_ext( wc_wchar_t cc );
wc_uint32 wc_sjis_ext1_to_N( wc_uint32 c );
wc_uint32 wc_sjis_ext2_to_N( wc_uint32 c );
Str wc_conv_from_sjis( Str is, wc_ces ces );
Str wc_conv_from_sjisx0213( Str is, wc_ces ces );
void wc_push_to_sjis( Str os, wc_wchar_t cc, wc_status *st );
void wc_push_to_sjisx0213( Str os, wc_wchar_t cc, wc_status *st );
Str wc_char_conv_from_sjis( wc_uchar c, wc_status *st );
Str wc_char_conv_from_sjisx0213( wc_uchar c, wc_status *st );
void wc_input_init( wc_ces ces, wc_status *st );
void wc_output_init( wc_ces ces, wc_status *st );
wc_bool wc_ces_has_ccs( wc_ccs ccs, wc_status *st );
wc_wchar_t ucs_cs94_conv( wc_ccs ccs, wc_uint16 c );
wc_wchar_t ucs_viet_conv( wc_ccs ccs, wc_uint16 c );
wc_wchar_t ucs_cp1258_conv( wc_ccs ccs, wc_uint16 c );
wc_wchar_t ucs_cns11643_conv( wc_ccs cs, wc_uint16 c );
wc_wchar_t ucs_big5_conv( wc_ccs cs, wc_uint16 c );
wc_wchar_t ucs_johab2_conv( wc_ccs cs, wc_uint16 c );
wc_wchar_t ucs_johab3_conv( wc_ccs cs, wc_uint16 c );
wc_wchar_t ucs_sjis_ext_conv( wc_ccs cs, wc_uint16 c );
wc_wchar_t ucs_gbk_conv( wc_ccs cs, wc_uint16 c );
wc_wchar_t ucs_uhc_conv( wc_ccs cs, wc_uint16 c );
wc_wchar_t ucs_hkscs_conv( wc_ccs cs, wc_uint16 c );
wc_table *wc_get_ucs_table( wc_ccs ccs );
wc_wchar_t wc_ucs_to_any( wc_uint32 ucs, wc_table *t );
wc_uint32 wc_any_to_ucs( wc_wchar_t cc );
wc_wchar_t wc_any_to_any( wc_wchar_t cc, wc_table *t );
wc_wchar_t wc_ucs_to_any_list( wc_uint32 ucs, wc_table **tlist );
wc_wchar_t wc_any_to_any_ces( wc_wchar_t cc, wc_status *st );
wc_wchar_t wc_any_to_iso2022( wc_wchar_t cc, wc_status *st );
wc_wchar_t wc_ucs_to_iso2022( wc_uint32 ucs );
wc_wchar_t wc_ucs_to_iso2022w( wc_uint32 ucs );
wc_ccs wc_ucs_to_ccs( wc_uint32 ucs );
wc_bool wc_is_ucs_wide( wc_uint32 ucs );
wc_bool wc_is_ucs_combining( wc_uint32 ucs );
wc_bool wc_is_ucs_hangul( wc_uint32 ucs );
wc_uint32 wc_ucs_precompose( wc_uint32 ucs1, wc_uint32 ucs2 );
wc_uint32 wc_ucs_to_fullwidth( wc_uint32 ucs );
int wc_ucs_put_tag( char *p );
char *wc_ucs_get_tag( int ntag );
void wtf_push_ucs( Str os, wc_uint32 ucs, wc_status *st );
wc_wchar_t wc_uhc_to_cs128w( wc_wchar_t cc );
wc_wchar_t wc_cs128w_to_uhc( wc_wchar_t cc );
wc_uint32 wc_uhc_to_N( wc_uint32 c );
Str wc_conv_from_uhc( Str is, wc_ces ces );
void wc_push_to_uhc( Str os, wc_wchar_t cc, wc_status *st );
Str wc_char_conv_from_uhc( wc_uchar c, wc_status *st );
Str wc_conv_from_utf7( Str is, wc_ces ces );
void wc_push_ucs_to_utf7( Str os, wc_uint32 ucs, wc_status *st );
int wc_push_tag_to_utf7( Str os, int ntag, wc_status *st );
void wc_push_to_utf7( Str os, wc_wchar_t cc, wc_status *st );
void wc_push_to_utf7_end( Str os, wc_status *st );
Str wc_char_conv_from_utf7( wc_uchar c, wc_status *st );
size_t wc_ucs_to_utf8( wc_uint32 ucs, wc_uchar *utf8 );
wc_uint32 wc_utf8_to_ucs( wc_uchar *utf8 );
Str wc_conv_from_utf8( Str is, wc_ces ces );
int wc_push_tag_to_utf8( Str os, int ntag );
void wc_push_to_utf8( Str os, wc_wchar_t cc, wc_status *st );
void wc_push_to_utf8_end( Str os, wc_status *st );
Str wc_char_conv_from_utf8( wc_uchar c, wc_status *st );
wc_uint32 wc_tcvn5712_precompose( wc_uchar c1, wc_uchar c2 );
wc_wchar_t wc_tcvn57123_to_tcvn5712( wc_wchar_t cc );
wc_uint32 wc_cp1258_precompose( wc_uchar c1, wc_uchar c2 );
Str wc_conv_from_viet( Str is, wc_ces ces );
void wc_push_to_viet( Str os, wc_wchar_t cc, wc_status *st );
Str wc_char_conv_from_viet( wc_uchar c, wc_status *st );
void wtf_init( wc_ces ces1, wc_ces ces2 );
int wtf_strwidth( wc_uchar *p );
size_t wtf_len( wc_uchar *p );
void wtf_push( Str os, wc_ccs ccs, wc_uint32 code );
void wtf_push_unknown( Str os, wc_uchar *p, size_t len );
wc_wchar_t wtf_parse1( wc_uchar **p );
wc_wchar_t wtf_parse( wc_uchar **p );
wc_ccs wtf_get_ccs( wc_uchar *p );
wc_uint32 wtf_get_code( wc_uchar *p );
wc_bool wtf_is_hangul( wc_uchar *p );
char *wtf_conv_fit( char *s, wc_ces ces );
wc_wchar_t wc_big5_to_cs94w( wc_wchar_t cc );
wc_wchar_t wc_cs94w_to_big5( wc_wchar_t cc );
Str wc_conv_from_big5( Str is, wc_ces ces );
void wc_push_to_big5( Str os, wc_wchar_t cc, wc_status *st );
Str wc_char_conv_from_big5( wc_uchar c, wc_status *st );
wc_bool wc_is_combining( wc_wchar_t cc );
wc_wchar_t wc_gbk_ext_to_cs128w( wc_wchar_t cc );
wc_wchar_t wc_cs128w_to_gbk_ext( wc_wchar_t cc );
wc_ccs wc_gbk_or_gbk_ext( wc_uint16 code );
wc_uint32 wc_gb18030_to_ucs( wc_wchar_t cc );
wc_wchar_t wc_ucs_to_gb18030( wc_uint32 ucs );
Str wc_conv_from_gb18030( Str is, wc_ces ces );
void wc_push_to_gb18030( Str os, wc_wchar_t cc, wc_status *st );
Str wc_char_conv_from_gb18030( wc_uchar c, wc_status *st );
wc_ccs wc_gb2312_or_gbk( wc_uint16 code );
wc_wchar_t wc_gbk_to_cs128w( wc_wchar_t cc );
wc_wchar_t wc_cs128w_to_gbk( wc_wchar_t cc );
wc_uint32 wc_gbk_to_N( wc_uint32 c );
Str wc_conv_from_gbk( Str is, wc_ces ces );
void wc_push_to_gbk( Str os, wc_wchar_t cc, wc_status *st );
Str wc_char_conv_from_gbk( wc_uchar c, wc_status *st );
wc_wchar_t wc_hkscs_to_cs128w( wc_wchar_t cc );
wc_wchar_t wc_cs128w_to_hkscs( wc_wchar_t cc );
wc_uint32 wc_hkscs_to_N( wc_uint32 c );
Str wc_conv_from_hkscs( Str is, wc_ces ces );
void wc_push_to_hkscs( Str os, wc_wchar_t cc, wc_status *st );
Str wc_char_conv_from_hkscs( wc_uchar c, wc_status *st );
Str wc_conv_from_priv1( Str is, wc_ces ces );
Str wc_char_conv_from_priv1( wc_uchar c, wc_status *st );
Str wc_conv_from_ascii( Str is, wc_ces ces );
void wc_push_to_raw( Str os, wc_wchar_t cc, wc_status *st );
/*****************************************************************************************/
/******                                                                             ******/
/******                        Forward Var Declarations                             ******/
/******                                                                             ******/
/*****************************************************************************************/
static Event *CurrentEvent;
static Event *LastEvent;
static AlarmEvent DefaultAlarm;
static AlarmEvent *CurrentAlarm;
static int need_resize_screen;
static char *MarkString;
static char *SearchString;
static int display_ok;
static int add_download_list;
static int check_target;
static GC_warn_proc orig_GC_warn_proc;
extern int REV_LB[5];
extern int Tabstop;
extern int ShowEffect;
extern int PagerMax;
extern char SearchHeader;
extern char *DefaultType;
extern char RenderFrame;
extern char PermitSaveToPipe;
extern char fmInitialized;
extern char *HTTP_proxy;
extern char *GOPHER_proxy;
extern char *FTP_proxy;
extern char *NO_proxy;
extern TextList *NO_proxy_domains;
extern char use_proxy;
extern int Do_not_use_ti_te;
extern char *NNTP_server;
extern char *NNTP_mode;
extern char *CurrentDir;
extern int CurrentPid;
extern TabBuffer *CurrentTab;
extern TabBuffer *FirstTab;
extern TabBuffer *LastTab;
extern int open_tab_blank;
extern int open_tab_dl_list;
extern int close_tab_back;
extern int nTab;
extern int TabCols;
extern DownloadList *FirstDL;
extern DownloadList *LastDL;
extern int CurrentKey;
extern char *CurrentKeyData;
extern char *CurrentCmdData;
extern char *w3m_reqlog;
extern int w3m_debug;
extern int w3m_dump;
extern int w3m_halfload;
extern Str header_string;
extern int override_content_type;
extern int useColor;
extern int confirm_on_quit;
extern int use_mark;
extern int vi_prec_num;
extern int label_topline;
extern int nextpage_topline;
extern char *displayTitleTerm;
extern int DecodeURL;
extern int showLineNum;
extern int show_srch_str;
extern int activeImage;
extern int displayImage;
extern char *Editor;
extern char *Mailer;
extern char *ExtBrowser;
extern char *ExtBrowser2;
extern char *ExtBrowser3;
extern int do_download;
extern char *AcceptLang;
extern int WrapDefault;
extern int WrapSearch;
extern int squeezeBlankLine;
extern char *BookmarkFile;
extern Str proxy_auth_cookie;
extern int UseDictCommand;
extern char *DictCommand;
extern int DefaultURLString;
extern int migemo_active;
extern TextList *fileToDelete;
extern Hist *LoadHist;
extern Hist *SaveHist;
extern Hist *URLHist;
extern Hist *ShellHist;
extern Hist *TextHist;
extern int UseHistory;
extern int URLHistSize;
extern int SaveURLHist;
extern wc_ces InnerCharset;
extern wc_ces DisplayCharset;
extern wc_ces DocumentCharset;
extern wc_ces SystemCharset;
extern wc_ces BookmarkCharset;
extern char FollowLocale;
extern char UseContentCharset;
extern char UseGraphicChar;
extern char *config_file;
extern int use_mouse;
extern int reverse_mouse;
extern int relative_wheel_scroll;
extern int fixed_wheel_scroll_count;
extern int relative_wheel_scroll_ratio;
extern MouseAction mouse_action;
extern int use_cookie;
extern int accept_cookie;
extern int clear_buffer;
extern double pixel_per_char;
extern int set_pixel_per_char;
extern double pixel_per_line;
extern int set_pixel_per_line;
extern int w3m_backend;
extern TextList *backend_batch_commands;
extern int (*searchRoutine)( Buffer *, char * );
extern sigjmp_buf IntReturn;
extern int show_params_p;
extern int prec_num;
extern int prev_key;
extern int on_target;
extern int LINES;
extern int COLS;
extern FuncList w3mFuncList[151];
extern unsigned char GlobalKeymap[128];
extern unsigned char EscKeymap[128];
extern unsigned char EscBKeymap[128];
extern unsigned char EscDKeymap[128];
extern char *w3m_version;
extern unsigned char MYCTYPE_MAP[256];
extern wc_option WcOption;
/*****************************************************************************************/
/******                                                                             ******/
/******                      Inline Function Definitions                            ******/
/******                                                                             ******/
/*****************************************************************************************/
