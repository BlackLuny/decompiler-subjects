// fn8B17_67BF
// Return size: 0
void fn8B17_67BF()
fn8B17_67BF_entry:
	// succ:  l8B17_67BF
l8B17_67BF:
fn8B17_67BF_exit:


// fn00401037
// Return size: 0
void fn00401037()
fn00401037_entry:
	// succ:  l00401037
l00401037:
	esp = fp
	edx = edx + 0x00000001
	SZO = cond(edx)
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	edi = edi ^ eax
	SZO = cond(edi)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	edx = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[eax + 0x00000008:word32]
	goto l00401042_thunk_fn00401163
	// succ:  l00401042_thunk_fn00401163
l00401037:
l00401042_thunk_fn00401163:
	call fn00401163 (retsize: 0;)
	return
	// succ:  fn00401037_exit
fn00401037_exit:


// fn0040104F
// Return size: 0
void fn0040104F()
fn0040104F_entry:
	// succ:  l0040104F
l0040104F:
	esp = fp
	esp = esp + 0x00000004
	edi = edi | esi
	SZO = cond(edi)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ecx = eax
	edx = edx + 0x00000001
	SZO = cond(edx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[fs:0x00000018:word32]
	edi = edi | eax
	SZO = cond(edi)
	C = false
	ecx = ecx | edi
	SZO = cond(ecx)
	C = false
	// succ:  l0040112E
l0040112E:
	esi = esi + eax
	SCZO = cond(esi)
	ebx = ebx + edx
	SCZO = cond(ebx)
	esi = esi + 0x00000001
	SZO = cond(esi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edx = edx - eax
	SCZO = cond(edx)
	ecx = ecx - edi
	SCZO = cond(ecx)
	edx = eax
	ecx = edi
	// succ:  l0040113B_thunk_fn004013CC
l0040113B_thunk_fn004013CC:
	call fn004013CC (retsize: 0;)
	return
	// succ:  fn0040104F_exit
fn0040104F_exit:


// fn00401071
// Return size: 0
void fn00401071()
fn00401071_entry:
	// succ:  l00401071
l00401071:
	edx = edi
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	ebx = ebx - edi
	SCZO = cond(ebx)
	goto l0040107A_thunk_fn00401225
	// succ:  l0040107A_thunk_fn00401225
fn00401071_exit:


// fn00401094
// Return size: 0
void fn00401094()
fn00401094_entry:
	// succ:  l00401094
l00401094:
	esp = fp
	bl = bl ^ dl
	SZO = cond(bl)
	C = false
	cl = cl - 0x01
	SZO = cond(cl)
	esi = esi + 0x00000001
	SZO = cond(esi)
	cl = 0x84
	bh = bh + 0x01
	SZO = cond(bh)
	edx = edx + 0x00000001
	SZO = cond(edx)
	goto l00401397
	// succ:  l00401397
l00401094:
l004010CD:
	esi = eax
	call fn0040104F (retsize: 4;)
	// succ:  l004010CF l004010E0_thunk_fn004010E5
l004010E0_thunk_fn004010E5:
	call fn004010E5 (retsize: 0;)
	return
	// succ:  fn00401094_exit
l004010EA:
	ebx = edi
	bl = bl | ch
	SZO = cond(bl)
	C = false
	bl = bl ^ ch
	SZO = cond(bl)
	C = false
	dl = dl - 0x01
	SZO = cond(dl)
	ecx = esi
	ch = ch + 0x01
	SZO = cond(ch)
	goto l004010CD
	// succ:  l004010CD
l00401397:
	edi = edi - eax
	SCZO = cond(edi)
	ecx = edi
	ch = ch | ah
	SZO = cond(ch)
	C = false
	bh = bh - dh
	SCZO = cond(bh)
	dl = bl
	bh = 0x30
	goto l004010EA
	// succ:  l004010EA
fn00401094_exit:


// fn004010CF
// Return size: 0
void fn004010CF()
fn004010CF_entry:
	// succ:  l004010CF
l004010CF:
	ch = ch - 0x01
	SZO = cond(ch)
	esi = ecx
	esi = esi ^ ecx
	SZO = cond(esi)
	C = false
	edi = edi - esi
	SCZO = cond(edi)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ecx = ecx - edx
	SCZO = cond(ecx)
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	ecx = ecx | eax
	SZO = cond(ecx)
	C = false
	ecx = ecx + edx
	SCZO = cond(ecx)
	call fn0040104F (retsize: 4;)
	// succ:  l004010E0_thunk_fn004010E5
l004010E0_thunk_fn004010E5:
	call fn004010E5 (retsize: 0;)
	return
	// succ:  fn004010CF_exit
fn004010CF_exit:


// fn004010E5
// Return size: 0
void fn004010E5()
fn004010E5_entry:
	// succ:  l004010E5
l004010E5:
	esp = fp
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	goto l004010E6_thunk_fn8B17_67BF
	// succ:  l004010E6_thunk_fn8B17_67BF
l004010E5:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l004010E5_thunk_fn8B17_67BF
l004010E5_thunk_fn8B17_67BF:
	call fn8B17_67BF (retsize: 0;)
	return
	// succ:  fn004010E5_exit
l004010E6_thunk_fn8B17_67BF:
	call fn8B17_67BF (retsize: 0;)
	return
	// succ:  fn004010E5_exit
fn004010E5_exit:


// fn00401163
// Return size: 6
void fn00401163()
fn00401163_entry:
	// succ:  l00401163
l00401163:
	esp = fp
	ecx = ecx | ebx
	SZO = cond(ecx)
	C = false
	goto l00401163_thunk_fn00401164
	// succ:  l00401163_thunk_fn00401164
l00401163:
l00401163_thunk_fn00401164:
	call fn00401164 (retsize: 6;)
	return
	// succ:  fn00401163_exit
fn00401163_exit:


// fn00401164
// Return size: 6
void fn00401164()
fn00401164_entry:
	// succ:  l00401164
l00401164:
	esp = fp
	return
	// succ:  fn00401164_exit
l00401164:
	edx = edx + 0x00000001
	SZO = cond(edx)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	esi = eax
	edi = esi
	esi = esi + 0x00000001
	SZO = cond(esi)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	branch Test(ULE,CZ) TMP!
fn00401164_exit:


// fn00401185
// Return size: 0
void fn00401185()
fn00401185_entry:
	// succ:  l00401185
l00401185:
	esp = fp
	Mem0[esp - 0x0000000C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi - ebx
	SCZO = cond(esi)
	edx = edx ^ edi
	SZO = cond(edx)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	ebx = ebx + ecx
	SCZO = cond(ebx)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	edi = edi + 0x00000001
	SZO = cond(edi)
	edi = edi + ebx
	SCZO = cond(edi)
	edx = edx ^ ebx
	SZO = cond(edx)
	C = false
	// succ:  l00401196_thunk_fn0040123D
l00401196_thunk_fn0040123D:
	call fn0040123D (retsize: 0;)
	return
	// succ:  fn00401185_exit
fn00401185_exit:


// fn004011C9
// Return size: 0
void fn004011C9()
fn004011C9_entry:
	goto l004011C9
	// succ:  l004011C9
l0040107A_thunk_fn00401225:
	call fn00401225 (retsize: 0;)
	return
	// succ:  fn004011C9_exit
l004011C9:
	esp = fp
	Mem0[esp - 0x00000020:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l004011C9_thunk_fn004011CA
l004011C9_thunk_fn004011CA:
	call fn004011CA (retsize: 0;)
	return
	// succ:  fn004011C9_exit
fn004011C9_exit:


// fn004011CA
// Return size: 0
void fn004011CA()
fn004011CA_entry:
	// succ:  l004011CA
l004011CA:
	esp = fp
	esp = esp + 0x00000001
	SZO = cond(esp)
	al = al & 0xE0
	SZO = cond(al)
	C = false
	ecx = esi
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	esi = esi + eax
	SCZO = cond(esi)
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	esi = eax
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	goto l004011D7_thunk_fn00401071
	// succ:  l004011D7_thunk_fn00401071
l004011CA:
	ecx = esi
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	esi = esi + eax
	SCZO = cond(esi)
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	esi = eax
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	// succ:  l004011D3_thunk_fn00401071
l004011D3_thunk_fn00401071:
	call fn00401071 (retsize: 0;)
	return
	// succ:  fn004011CA_exit
l004011D7_thunk_fn00401071:
	call fn00401071 (retsize: 0;)
	return
	// succ:  fn004011CA_exit
fn004011CA_exit:


// fn004011E3
// Return size: 0
void fn004011E3()
fn004011E3_entry:
	// succ:  l004011E3
l004011E3:
	esp = fp
	edi = edi - eax
	SCZO = cond(edi)
	esi = esi | edi
	SZO = cond(esi)
	C = false
	edx = edx + esi
	SCZO = cond(edx)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	esi = esi | edi
	SZO = cond(esi)
	C = false
	edi = edi ^ esi
	SZO = cond(edi)
	C = false
	branch Test(LT,SO) l004011EE_thunk_fn004012F0
	goto l004011F4
	// succ:  l004011F4 l004011EE_thunk_fn004012F0
l004011E3:
l004011EE_thunk_fn004012F0:
	call fn004012F0 (retsize: 0;)
	return
	// succ:  fn004011E3_exit
l004011F4:
	ebx = ebx
	branch Test(GE,SO) l004011F6_thunk_fn004012F0
	goto l004011FC
	// succ:  l004011FC l004011F6_thunk_fn004012F0
l004011F6_thunk_fn004012F0:
	call fn004012F0 (retsize: 0;)
	return
	// succ:  fn004011E3_exit
l004011FC:
	eax = 0x06DAA18D
	// succ:  l004011FC_thunk_fn00401201
l004011FC_thunk_fn00401201:
	call fn00401201 (retsize: 0;)
	return
	// succ:  fn004011E3_exit
fn004011E3_exit:


// fn00401201
// Return size: 0
void fn00401201()
fn00401201_entry:
	// succ:  l00401201
l00401201:
	esp = fp
	bh = bh - 0x01
	SZO = cond(bh)
	edi = edx
	dh = dh - 0x01
	SZO = cond(dh)
	bl = bl ^ ah
	SZO = cond(bl)
	C = false
	bh = ~bh
	dl = ch
	edx = edx | edi
	SZO = cond(edx)
	C = false
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	branch Test(PE,P) l00401211_thunk_fn00401094
	goto l00401217
	// succ:  l00401217 l00401211_thunk_fn00401094
l00401201:
l00401211_thunk_fn00401094:
	call fn00401094 (retsize: 0;)
	return
	// succ:  fn00401201_exit
l00401217:
	edx = edx
	branch Test(PO,P) l00401219_thunk_fn00401094
	goto l0040121F
	// succ:  l0040121F l00401219_thunk_fn00401094
l00401219_thunk_fn00401094:
	call fn00401094 (retsize: 0;)
	return
	// succ:  fn00401201_exit
l0040121F:
fn00401201_exit:


// fn00401225
// Return size: 0
void fn00401225()
fn00401225_entry:
	// succ:  l00401225
l00401225:
	esp = fp
	ebx = ebx + edi
	SCZO = cond(ebx)
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	edx = edx + edi
	SCZO = cond(edx)
	ecx = ecx | edx
	SZO = cond(ecx)
	C = false
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[eax:word32]
	ebx = ebx - esi
	SCZO = cond(ebx)
	ecx = ecx + edx
	SCZO = cond(ecx)
	goto l00401265
	// succ:  l00401265
l00401225:
l00401265:
	ebx = ebx - ecx
	SCZO = cond(ebx)
	// succ:  l00401265_thunk_fn00401266
l00401265_thunk_fn00401266:
	call fn00401266 (retsize: 0;)
	return
	// succ:  fn00401225_exit
fn00401225_exit:


// fn0040123D
// Return size: 0
void fn0040123D()
fn0040123D_entry:
	goto l0040123D
	// succ:  l0040123D
l00401008:
	edx = edx + edi
	SCZO = cond(edx)
	eax = eax | edi
	SZO = cond(eax)
	C = false
	ecx = ecx | edi
	SZO = cond(ecx)
	C = false
	esi = ebx
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ebx = ebx | eax
	SZO = cond(ebx)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	// succ:  l00401085
l00401085:
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	edx = edx - 0x00000001
	SZO = cond(edx)
	edx = edx - ecx
	SCZO = cond(edx)
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	edx = edx | edi
	SZO = cond(edx)
	C = false
	// succ:  l0040108F_thunk_fn00401471
l0040108F_thunk_fn00401471:
	call fn00401471 (retsize: 0;)
	return
	// succ:  fn0040123D_exit
l004011A3:
	return
	// succ:  fn0040123D_exit
l004011A4:
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx + ecx
	SCZO = cond(edx)
	ebx = ebx | edx
	SZO = cond(ebx)
	C = false
	ecx = ecx | eax
	SZO = cond(ecx)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	edx = edx - edi
	SCZO = cond(edx)
	eax = esi
	ebx = eax
	branch Test(SG,S) l00401008
	// succ:  l004011BA l00401008
l004011BA:
	branch Test(UGT,CZ) l004011BC
	// succ:  l004011BC
l004011BC:
	branch Test(NS,S) l00401008
	// succ:  l004011C2 l00401008
l004011C2:
	esp = 0xA32068DF
	v20 = Mem0[ecx - 0x00000071:byte] & dh
	Mem0[ecx - 0x00000071:byte] = v20
	SZO = cond(Mem0[ecx - 0x00000071:byte])
	C = false
	// succ:  l004011C7_thunk_fn004011CA
l004011C7_thunk_fn004011CA:
	call fn004011CA (retsize: 0;)
	return
	// succ:  fn0040123D_exit
l0040123D:
	esp = fp
	edi = edi | esi
	SZO = cond(edi)
	C = false
	goto l0040123E
	// succ:  l0040123E
l0040123D:
l0040124D:
	branch Test(LT,SO) l004011A3
	// succ:  l00401253 l004011A3
l00401253:
	ebx = ebx
	branch Test(NE,Z) l00401257
	// succ:  l00401257
l00401257:
	branch Test(GE,SO) l004011A3
	// succ:  l0040125D l004011A3
l0040125D:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	esp = esp - 0x0000749D
	al = __inb(0x32)
	v15 = eax
	eax = ebx
	ebx = v15
	ebp = ebp + Mem0[ebx:word32]
	SCZO = cond(ebp)
	// succ:  l00401264_thunk_fn00401266
l00401264_thunk_fn00401266:
	call fn00401266 (retsize: 0;)
	return
	// succ:  fn0040123D_exit
fn0040123D_exit:


// fn00401266
// Return size: 0
void fn00401266()
fn00401266_entry:
	// succ:  l00401266
l00401266:
	esp = fp
	rLoc1 = Mem0[edi + 0x00000049:real32]
	esi = esi ^ ecx
	SZO = cond(esi)
	C = false
	esi = esi | edi
	SZO = cond(esi)
	C = false
	ebx = ebx + esi
	SCZO = cond(ebx)
	goto l0040126F_thunk_fn00401279
	// succ:  l0040126F_thunk_fn00401279
l00401266:
	edi = edi + 0x00000001
	SZO = cond(edi)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	esi = esi ^ ecx
	SZO = cond(esi)
	C = false
	esi = esi | edi
	SZO = cond(esi)
	C = false
	ebx = ebx + esi
	SCZO = cond(ebx)
	// succ:  l0040126C_thunk_fn00401279
l0040126C_thunk_fn00401279:
	call fn00401279 (retsize: 0;)
	return
	// succ:  fn00401266_exit
l0040126F_thunk_fn00401279:
	call fn00401279 (retsize: 0;)
	return
	// succ:  fn00401266_exit
fn00401266_exit:


// fn00401279
// Return size: 0
void fn00401279()
fn00401279_entry:
	goto l00401279
	// succ:  l00401279
l0040123C:
	eax = __indw(0x0B)
l00401279:
	ebx = ebx - ecx
	SCZO = cond(ebx)
	edi = edi - 0x00000001
	SZO = cond(edi)
	esi = esi - edi
	SCZO = cond(esi)
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi ^ ecx
	SZO = cond(esi)
	C = false
	edi = eax
	edi = edi - eax
	SCZO = cond(edi)
	esi = eax
	branch Test(SG,S) l004012B4
	// succ:  l00401289 l004012B4
l00401289:
	v13 = ax
	ax = ax
	ax = v13
	branch Test(NS,S) l004012B4
	// succ:  l0040128E l004012B4
l0040128E:
	cl = 0xD5
	branch Test(GE,SO) l0040123C
	// succ:  l00401292 l0040123C
l00401292:
	Mem0[ecx - 0x00000027:word16] = ds
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	goto l00401296
	// succ:  l00401296
l004012B2_thunk_fn004012B7:
	call fn004012B7 (retsize: 0;)
	return
	// succ:  fn00401279_exit
l004012B4:
	esi = esi - 0x00000001
	SZO = cond(esi)
	esi = esi + eax
	SCZO = cond(esi)
	// succ:  l004012B5_thunk_fn004012B7
l004012B5_thunk_fn004012B7:
	call fn004012B7 (retsize: 0;)
	return
	// succ:  fn00401279_exit
l004012C4_thunk_fn00401037:
	call fn00401037 (retsize: 0;)
	return
	// succ:  fn00401279_exit
fn00401279_exit:


// fn00401296
// Return size: 0
void fn00401296()
fn00401296_entry:
	// succ:  l00401296
l00401296:
	esp = fp
	ecx = ecx | edx
	SZO = cond(ecx)
	C = false
	esi = esi | edx
	SZO = cond(esi)
	C = false
	esi = esi | edi
	SZO = cond(esi)
	C = false
	edi = edi | ecx
	SZO = cond(edi)
	C = false
	edx = edx + ebx
	SCZO = cond(edx)
	edx = edx - 0x00000001
	SZO = cond(edx)
	eax = eax - 0xEEEEEEEE
	SCZO = cond(eax)
	edi = edi + 0x00000001
	SZO = cond(edi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	edx = edx ^ edi
	SZO = cond(edx)
	C = false
	call fn00401185 (retsize: 4;)
	Z = __arpl(Mem0[ebx + 0x0000002F:word16], bx, &Mem0[ebx + 0x0000002F:word16])
	eax = 0xF0034E8F
	// succ:  l004012B2_thunk_fn004012B7
l004012B2_thunk_fn004012B7:
	call fn004012B7 (retsize: 0;)
	return
	// succ:  fn00401296_exit
fn00401296_exit:


// fn004012B7
// Return size: 0
void fn004012B7()
fn004012B7_entry:
	// succ:  l004012B7
l004012B7:
	esi = esi + ecx
	SCZO = cond(esi)
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	esi = esi - edi
	SCZO = cond(esi)
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	ebx = edi
	ecx = ecx | eax
	SZO = cond(ecx)
	C = false
	branch Test(SG,S) TMP!
fn004012B7_exit:


// fn004012D6
// Return size: 0
void fn004012D6()
fn004012D6_entry:
	goto l004012D6
	// succ:  l004012D6
l004010FC:
	ecx = edx
	edx = edx - ecx
	SCZO = cond(edx)
	esi = esi + ecx
	SCZO = cond(esi)
	edi = eax
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	edi = edi - esi
	SCZO = cond(edi)
	eax = eax & 0xEEEEEEEE
	SZO = cond(eax)
	C = false
	// succ:  l0040110C_thunk_fn00401433
l0040110C_thunk_fn00401433:
	call fn00401433 (retsize: 0;)
	return
	// succ:  fn004012D6_exit
l004012D6:
	esp = fp
	esi = esi ^ ecx
	SZO = cond(esi)
	C = false
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	ebx = ebx - esi
	SCZO = cond(ebx)
	esi = esi | eax
	SZO = cond(esi)
	C = false
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	esi = esi | eax
	SZO = cond(esi)
	C = false
	ecx = ecx + eax
	SCZO = cond(ecx)
	goto l00401305
	// succ:  l00401305
l004012D6:
l00401305:
	ebx = ebx ^ edi
	SZO = cond(ebx)
	C = false
	edx = edx | esi
	SZO = cond(edx)
	C = false
	ecx = ecx - esi
	SCZO = cond(ecx)
	ebx = ebx - edx
	SCZO = cond(ebx)
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	esi = esi + ebx
	SCZO = cond(esi)
	branch Test(ULE,CZ) l004010FC
	// succ:  l00401317 l004010FC
l00401317:
	al = al
	v14 = ax
	ax = ax
	ax = v14
	branch Test(UGT,CZ) l004010FC
	// succ:  l00401322 l004010FC
l00401322:
	SZO = cond(eax & 0xEDD53F29)
	C = false
	// succ:  l00401322_thunk_fn00401327
l00401322_thunk_fn00401327:
	call fn00401327 (retsize: 0;)
	return
	// succ:  fn004012D6_exit
fn004012D6_exit:


// fn004012F0
// Return size: 0
void fn004012F0()
fn004012F0_entry:
	// succ:  l004012F0
l004012F0:
	esp = fp
	edi = edi + ecx
	SCZO = cond(edi)
	edx = edx - ebx
	SCZO = cond(edx)
	ecx = ecx + edx
	SCZO = cond(ecx)
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx + 0x00000001
	SZO = cond(edx)
	edi = edi - 0x00000001
	SZO = cond(edi)
	ebx = ebx + edi
	SCZO = cond(ebx)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	edx = edx + 0x00000001
	SZO = cond(edx)
	goto l004012FC_thunk_fn00401327
	// succ:  l004012FC_thunk_fn00401327
l004012F0:
l004012FC_thunk_fn00401327:
	call fn00401327 (retsize: 0;)
	return
	// succ:  fn004012F0_exit
fn004012F0_exit:


// fn00401327
// Return size: 0
void fn00401327()
fn00401327_entry:
	// succ:  l00401327
l00401327:
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	esi = esi + 0x00000001
	SZO = cond(esi)
	edx = edx + ebx
	SCZO = cond(edx)
	edx = edx ^ edi
	SZO = cond(edx)
	C = false
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[eax + 0x00000090:word32]
	esi = esi | ecx
	SZO = cond(esi)
	C = false
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	ebx = ebx + ecx
	SCZO = cond(ebx)
	// succ:  l004013AD
l004013AD:
	edi = edi + eax
	SCZO = cond(edi)
	esi = esi + edx
	SCZO = cond(esi)
	esi = esi ^ edi
	SZO = cond(esi)
	C = false
	ecx = ecx + esi
	SCZO = cond(ecx)
	ebx = ebx + ecx
	SCZO = cond(ebx)
	ebx = ebx - eax
	SCZO = cond(ebx)
	edx = edx - esi
	SCZO = cond(edx)
	edx = edx + edi
	SCZO = cond(edx)
	esi = esi + ebx
	SCZO = cond(esi)
	edx = edx - 0x00000001
	SZO = cond(edx)
	call fn004011C9 (retsize: 4;)
	ds = Mem0[esp:selector]
	esp = esp + 0x00000002
	edx = 0x58BFFD4F
	D = false
	// succ:  l004013CB_thunk_fn004013CC
l004013CB_thunk_fn004013CC:
	call fn004013CC (retsize: 0;)
	return
	// succ:  fn00401327_exit
fn00401327_exit:


// fn00401341
// Return size: 0
void fn00401341()
fn00401341_entry:
	// succ:  l00401341
l00401341:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = ebx
	ebx = v3
	ax = eax
	v7 = eax
	eax = eax
	eax = v7
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi - eax
	SCZO = cond(edi)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ecx = ecx - ebx
	SCZO = cond(ecx)
	call fn00401455 (retsize: 4;)
	__outb(dx, al)
	v16 = Mem0[ebp + 0x086E76B1:byte] ^ bl
	Mem0[ebp + 0x086E76B1:byte] = v16
	SZO = cond(Mem0[ebp + 0x086E76B1:byte])
	C = false
	v19 = (Mem0[ecx + 0x01E9241C:byte] & 0x01 << cl) != 0x00
	Mem0[ecx + 0x01E9241C:byte] = __ror(Mem0[ecx + 0x01E9241C:byte], cl)
	C = v19
	// succ:  l0040135B_thunk_fn00401361
l0040135B_thunk_fn00401361:
	call fn00401361 (retsize: 0;)
	return
	// succ:  fn00401341_exit
fn00401341_exit:


// fn0040135C
// Return size: 0
void fn0040135C()
fn0040135C_entry:
	// succ:  l0040135C
l0040135C:
	esp = fp
	Mem0[esp:word32] = ebx
fn0040135C_exit:


// fn00401361
// Return size: 0
void fn00401361()
fn00401361_entry:
	// succ:  l00401361
l00401361:
	esp = fp
	v5 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v5
	SCZO = cond(v5)
	bh = bh + dl
	SCZO = cond(bh)
	goto l00401363_thunk_fn00401365
	// succ:  l00401363_thunk_fn00401365
l00401361:
	call fn00401365 (retsize: 0;)
	return
	// succ:  l00401361_thunk_fn00401365 fn00401361_exit
l00401361_thunk_fn00401365:
	call fn00401365 (retsize: 0;)
	return
	// succ:  fn00401361_exit
l00401363_thunk_fn00401365:
	call fn00401365 (retsize: 0;)
	return
	// succ:  fn00401361_exit
fn00401361_exit:


// fn00401365
// Return size: 0
void fn00401365()
fn00401365_entry:
	goto l00401365
	// succ:  l00401365
l00401118:
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[eax + 0x00000030:word32]
	esi = esi + 0x00000001
	SZO = cond(esi)
	esi = esi ^ ecx
	SZO = cond(esi)
	C = false
	ecx = ecx ^ edx
	SZO = cond(ecx)
	C = false
	esi = esi ^ edi
	SZO = cond(esi)
	C = false
	edi = edi + edx
	SCZO = cond(edi)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	// succ:  l00401125_thunk_fn004011E3
l00401125_thunk_fn004011E3:
	call fn004011E3 (retsize: 0;)
	return
	// succ:  fn00401365_exit
l00401365:
	branch Test(GE,SO) l00401367
	// succ:  l00401367
l00401367:
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	edi = edi - eax
	SCZO = cond(edi)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	goto l00401118
	// succ:  l00401118
fn00401365_exit:


// fn00401377
// Return size: 0
void fn00401377()
fn00401377_entry:
	goto l00401377
	// succ:  l00401377
l0040101E:
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	edi = ecx
	ebx = ebx | edx
	SZO = cond(ebx)
	C = false
	ecx = ecx - ebx
	SCZO = cond(ecx)
	esi = esi + 0x00000001
	SZO = cond(esi)
	edx = edx + 0x00000001
	SZO = cond(edx)
	call fn00401341 (retsize: 4;)
	eax = eax + 0x463AEECA
	SCZO = cond(eax)
	C = __aaa(al, ah, &al, &ah)
	// succ:  l00401036_thunk_fn00401037
l00401036_thunk_fn00401037:
	call fn00401037 (retsize: 0;)
	return
	// succ:  fn00401377_exit
l00401377:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	esi = esi - edx
	SCZO = cond(esi)
	ecx = edi
	edx = edx - edi
	SCZO = cond(edx)
	edx = edx + edi
	SCZO = cond(edx)
	ebx = ebx - edx
	SCZO = cond(ebx)
	ecx = ecx + ebx
	SCZO = cond(ecx)
	edx = ebx
	esi = esi + ebx
	SCZO = cond(esi)
	edx = edx | eax
	SZO = cond(edx)
	C = false
	goto l0040101E
	// succ:  l0040101E
fn00401377_exit:


// fn004013CC
// Return size: 6
void fn004013CC()
fn004013CC_entry:
	goto l004013CC
	// succ:  l004013CC
l0040114A:
	edi = edi - 0x00000001
	SZO = cond(edi)
	ecx = ecx | edi
	SZO = cond(ecx)
	C = false
	edx = edx + edi
	SCZO = cond(edx)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ebx = ebx - ecx
	SCZO = cond(ebx)
	edx = edx | eax
	SZO = cond(edx)
	C = false
	edi = edi + ecx
	SCZO = cond(edi)
	esi = esi - eax
	SCZO = cond(esi)
	call fn0040135C (retsize: 4;)
	ds = Mem0[esp:selector]
	esp = esp + 0x00000002
	SCZO = cond(bl - Mem0[ecx + 0x0B89B9DB:byte])
	// succ:  l0040115E_thunk_fn00401164
l0040115E_thunk_fn00401164:
	call fn00401164 (retsize: 6;)
	return
	// succ:  fn004013CC_exit
l004013CC:
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ecx = ecx ^ eax
	SZO = cond(ecx)
	C = false
	ecx = ecx - edi
	SCZO = cond(ecx)
	edx = edx | esi
	SZO = cond(edx)
	C = false
	edx = edx - 0x00000001
	SZO = cond(edx)
	edi = edi + edx
	SCZO = cond(edi)
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = eax
	esi = esi - 0x00000001
	SZO = cond(esi)
	goto l0040114A
	// succ:  l0040114A
fn004013CC_exit:


// fn004013E3
// Return size: 0
void fn004013E3()
fn004013E3_entry:
	// succ:  l004013E3
l004013E3:
	Mem0[esp:word32] = eax
	branch Test(ULE,CZ) l004013E8
	// succ:  l004013E8
l004013E8:
	bl = bl
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	ch = ch + bh
	SCZO = cond(ch)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	bh = bh - 0x01
	SZO = cond(bh)
	dh = dh | cl
	SZO = cond(dh)
	C = false
	edi = edi - eax
	SCZO = cond(edi)
	bh = bh + 0x01
	SZO = cond(bh)
	branch Test(EQ,Z) l004013F7_thunk_fn00401201
	goto l004013FD
	// succ:  l004013FD l004013F7_thunk_fn00401201
l004013F7_thunk_fn00401201:
	call fn00401201 (retsize: 0;)
	return
	// succ:  fn004013E3_exit
l004013FD:
fn004013E3_exit:


// fn0040140A
// Return size: 0
void fn0040140A()
fn0040140A_entry:
	// succ:  l0040140A
l0040140A:
	edx = edi
	ebx = ebx + eax
	SCZO = cond(ebx)
	esi = eax
	edi = edi + edx
	SCZO = cond(edi)
	esi = esi - ebx
	SCZO = cond(esi)
	ebx = eax
	edi = edi + 0x00000001
	SZO = cond(edi)
	ecx = ecx + eax
	SCZO = cond(ecx)
	ebx = edi
	esi = ebx
	branch Test(ULT,C) l0040141D_thunk_fn004012D6
	goto l00401423
	// succ:  l00401423 l0040141D_thunk_fn004012D6
l0040141D_thunk_fn004012D6:
	call fn004012D6 (retsize: 0;)
	return
	// succ:  fn0040140A_exit
l00401423:
fn0040140A_exit:


// fn00401433
// Return size: 0
void fn00401433()
fn00401433_entry:
	goto l00401433
	// succ:  l00401433
l004010A9:
	ecx = ecx | ebx
	SZO = cond(ecx)
	C = false
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	edi = edi - edx
	SCZO = cond(edi)
	edx = edx + 0x00000001
	SZO = cond(edx)
	ebx = ebx + edi
	SCZO = cond(ebx)
	ecx = edi
	ebx = edi
	esi = esi + 0x00000001
	SZO = cond(esi)
	branch Test(ULT,C) l004010B7_thunk_fn00401296
	goto l004010BD
	// succ:  l004010BD l004010B7_thunk_fn00401296
l004010B7_thunk_fn00401296:
	call fn00401296 (retsize: 0;)
	return
	// succ:  fn00401433_exit
l004010BD:
	v13 = bl
	bl = bl
	bl = v13
	branch Test(UGE,C) l004010BF_thunk_fn00401296
	goto l004010C5
	// succ:  l004010C5 l004010BF_thunk_fn00401296
l004010BF_thunk_fn00401296:
	call fn00401296 (retsize: 0;)
	return
	// succ:  fn00401433_exit
l004010C5:
	ebx = 0x64724F4E
	eax = eax & 0xF08B9802
	SZO = cond(eax)
	C = false
l00401433:
	esp = fp
	ecx = ecx | edx
	SZO = cond(ecx)
	C = false
	edx = edx ^ esi
	SZO = cond(edx)
	C = false
	edi = edi | esi
	SZO = cond(edi)
	C = false
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	ebx = edx
	edi = edi - eax
	SCZO = cond(edi)
	branch Test(PE,P) l004010A9
	goto l00401445
	// succ:  l00401445 l004010A9
l00401433:
l00401445:
	// succ:  l0040144A
l0040144A:
fn00401433_exit:


// fn00401455
// Return size: 0
void fn00401455()
fn00401455_entry:
	// succ:  l00401455
l00401455:
	esp = fp
	Mem0[esp - 0x00000018:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi - ebx
	SCZO = cond(esi)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
	edi = edi + eax
	SCZO = cond(edi)
	cl = 0xC7
	dl = dl - ah
	SCZO = cond(dl)
fn00401455_exit:


// fn00401463
// Return size: 0
void fn00401463()
fn00401463_entry:
	// succ:  l00401463
l00401463:
	esp = fp
	ax = __aam(al)
	branch Test(PE,P) l00401466
	goto l00401467
	// succ:  l00401467 l00401466
l00401463:
l00401466:
l00401467:
fn00401463_exit:


// fn00401471
// Return size: 0
void fn00401471()
fn00401471_entry:
	// succ:  l00401471
l00401471:
	esp = fp
	call fn004023F4 (retsize: 4;)
	esp = esp - 0x00000001
	SZO = cond(esp)
	al = al ^ 0x3A
	SZO = cond(al)
	C = false
	esp = esp | Mem0[ebx + 0xBCA30B3C:word32]
	SZO = cond(esp)
	C = false
	ds_edi = Mem0[ebp - 0x00000036 + ecx * 0x00000008:segptr32]
	__cli()
	__cli()
	esp = Mem0[esi + 0xFAFA7A3B:word32]
	__cli()
	dh = dh | Mem0[edx + 0xFAFADA38:byte]
	SZO = cond(dh)
	C = false
	esp = esp | Mem0[ebx + 0xBBA30BFB:word32]
	SZO = cond(esp)
	C = false
	Mem0[edi:byte] = __in(edx)
	edi = edi + 0x00000001
	SZO = cond(eax & 0xA9FAFADA)
	C = false
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	esp = esp - 0xFFFF90D3
	bl = 0x1A
	C = !C
	esp = esp | Mem0[ebx + 0xCADD7CBD:word32]
	SZO = cond(esp)
	C = false
	__cli()
	__cli()
	Mem0[edi:byte] = __in(edx)
	edi = edi + 0x00000001
	Mem0[edx - 0x00000006:int16] = (int16) rArg0
	__cli()
	esp = esp | Mem0[ebx + 0xA30BF5BC:word32]
	SZO = cond(esp)
	C = false
	ebp = 0xFA5AE06C
	__cli()
	v18 = Mem0[eax - 0x00000038:byte]
	Mem0[eax - 0x00000038:byte] = dh
	dh = v18
	SZO = cond(eax & 0xEFF5E5AD)
	C = false
	branch Test(LT,SO) l004014C8_thunk_fn00401463
	goto l004014CA
	// succ:  l004014CA l004014C8_thunk_fn00401463
l00401471:
l004014C8_thunk_fn00401463:
	call fn00401463 (retsize: 0;)
	return
	// succ:  fn00401471_exit
l004014CA:
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	__cli()
	__cli()
	edx = edx + 0x00000001
	SZO = cond(edx)
	eax = eax & 0x3745CABD
	SZO = cond(eax)
	C = false
	al = al & Mem0[ebp + 0x00000079:byte]
	SZO = cond(al)
	C = false
	eax = eax | ebx
	SZO = cond(eax)
	C = false
	branch Test(UGT,CZ) l004014DC
	// succ:  l004014DA l004014DC
l004014DA:
	SCZO = cond(Mem0[esi:byte] - Mem0[edi:byte])
	esi = esi + 0x00000001
	edi = edi + 0x00000001
	SCZO = cond(eax - 0x0B77C30B)
	goto l004014E0
	// succ:  l004014E0
l004014DC:
	eax = eax | ebx
	SZO = cond(eax)
	C = false
	branch Test(UGT,CZ) l004014EB
	// succ:  l004014E0 l004014EB
l004014E0:
	return
	return
	// succ:  fn00401471_exit fn00401471_exit
l004014EB:
	__cli()
	__cli()
	al = al ^ 0x42
	SZO = cond(al)
	C = false
	di = di + 0x0001
	SZO = cond(di)
	v23 = eax
	eax = ebp
	ebp = v23
	edx = edx + 0x00000001
	SZO = cond(edx)
	ecx = Mem0[eax - 0x00000005:word32]
	return
	// succ:  fn00401471_exit
fn00401471_exit:


// fn00402127
// Return size: 0
void fn00402127()
fn00402127_entry:
	// succ:  l00402127
l00402127:
	esp = fp
	Mem0[esp:word32] = eax
	ah = ah
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi + 0x00000001
	SZO = cond(esi)
	bh = bh - 0x00 - C
	SCZO = cond(bh)
	bh = bh + 0x75 + C
	SCZO = cond(bh)
	esi = esi - 0x00000001
	SZO = cond(esi)
	eax = eax + 0x00000008
	SCZO = cond(eax)
	// succ:  l00402138_thunk_fn004029B9
l00402138_thunk_fn004029B9:
	call fn004029B9 (retsize: 0;)
	return
	// succ:  fn00402127_exit
fn00402127_exit:


// fn00402144
// Return size: 0
void fn00402144()
fn00402144_entry:
	// succ:  l00402144
l00402144:
	Mem0[esp - 0x00000034:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	cl = cl + 0x01
	SZO = cond(cl)
	cl = cl + 0x28
	SCZO = cond(cl)
	ch = -ch
	SCZO = cond(ch)
	C = ch == 0x00
	cl = cl ^ ah
	SZO = cond(cl)
	C = false
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	ch = ch + 0x65 + C
	SCZO = cond(ch)
	cl = cl ^ ah
	SZO = cond(cl)
	C = false
	branch Test(SG,S) l00402158_thunk_fn0040225A
	goto l0040215E
	// succ:  l0040215E l00402158_thunk_fn0040225A
l00402158_thunk_fn0040225A:
	call fn0040225A (retsize: 0;)
	return
	// succ:  fn00402144_exit
l0040215E:
fn00402144_exit:


// fn0040216F
// Return size: 0
void fn0040216F()
fn0040216F_entry:
	// succ:  l0040216F
l0040216F:
	esp = fp
	Mem0[esp:word32] = ecx
	v4 = bh
	bh = bh
	bh = v4
fn0040216F_exit:


// fn00402199
// Return size: 0
void fn00402199()
fn00402199_entry:
	// succ:  l00402199
l00402199:
	esp = fp
	ebx = ebx + 0x00000A99
	SCZO = cond(ebx)
	al = 0x86
	cl = cl - 0x01
	SZO = cond(cl)
	edx = eax
	dh = dh + 0x01
	SZO = cond(dh)
	ch = 0xEC
	edx = edx + esi
	SCZO = cond(edx)
	cl = cl + 0x01
	SZO = cond(cl)
	ch = ~ch
	al = dh
	branch Test(LT,SO) l004021B1_thunk_fn00402B7D
	goto l004021B7
	// succ:  l004021B7 l004021B1_thunk_fn00402B7D
l00402199:
l004021B1_thunk_fn00402B7D:
	call fn00402B7D (retsize: 0;)
	return
	// succ:  fn00402199_exit
l004021B7:
	cl = cl
	branch Test(GE,SO) l004021B9_thunk_fn00402B7D
	goto l004021BF
	// succ:  l004021BF l004021B9_thunk_fn00402B7D
l004021B9_thunk_fn00402B7D:
	call fn00402B7D (retsize: 0;)
	return
	// succ:  fn00402199_exit
l004021BF:
	esp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00402199_exit
fn00402199_exit:


// fn004021C6
// Return size: 0
void fn004021C6()
fn004021C6_entry:
	// succ:  l004021C6
l004021C6:
	esp = fp
	esi = esi | eax
	SZO = cond(esi)
	C = false
	edi = edi + 0x00000001
	SZO = cond(edi)
	bl = bl + 0x85 + C
	SCZO = cond(bl)
	bl = bl + 0x0E
	SCZO = cond(bl)
	bh = bh + 0xB9
	SCZO = cond(bh)
	bl = dl
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	bl = ~bl
	bl = ~bl
	call fn00402616 (retsize: 4;)
l004021C6:
fn004021C6_exit:


// fn004021E5
// Return size: 0
void fn004021E5()
fn004021E5_entry:
	// succ:  l004021E5
l004021E5:
	esp = esp + 0x00000004
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	dl = ~dl
	bh = bh - ch
	SCZO = cond(bh)
	edi = ecx
	ebx = ebx + edi
	SCZO = cond(ebx)
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	ebx = edi
	dl = dl + 0x75 + C
	SCZO = cond(dl)
	edx = (word32) al
	branch Test(EQ,Z) l00402296
	// succ:  l00402203 l00402296
l00402203:
	branch Test(NE,Z) l00402205
	// succ:  l00402205
l00402205:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	branch Test(NE,Z) l00402296
	// succ:  l0040220D l00402296
l0040220D:
	es = Mem0[esp:selector]
	esp = esp + 0x00000002
	SCZO = cond(bh - dh)
	// succ:  l0040220E_thunk_fn00402211
l0040220E_thunk_fn00402211:
	call fn00402211 (retsize: 0;)
	return
	// succ:  fn004021E5_exit
l00402296:
	edi = edi + edx
	SCZO = cond(edi)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bh = bh - cl
	SCZO = cond(bh)
	bh = ~bh
	ebx = edx
	bl = bl + 0x82
	SCZO = cond(bl)
	branch Test(SG,S) l004022A5_thunk_fn00402AC0
	goto l004022AB
	// succ:  l004022AB l004022A5_thunk_fn00402AC0
l004022A5_thunk_fn00402AC0:
	call fn00402AC0 (retsize: 6;)
	return
	// succ:  fn004021E5_exit
l004022AB:
fn004021E5_exit:


// fn00402211
// Return size: 0
void fn00402211()
fn00402211_entry:
	// succ:  l00402211
l00402211:
	esp = fp
	Mem0[esp - 0x00000010:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh ^ ah
	SZO = cond(bh)
	C = false
	al = al + 0xC8 + C
	SCZO = cond(al)
	edi = edi + 0x00000001
	SZO = cond(edi)
	al = dl
	esi = esi | ecx
	SZO = cond(esi)
	C = false
	ah = ah + 0x01
	SZO = cond(ah)
	ah = 0x74
	edi = edi + esi
	SCZO = cond(edi)
	call fn00402380 (retsize: 4;)
	dh = dh + Mem0[0x3089C34F:byte]
	SCZO = cond(dh)
	C = false
	// succ:  l00402230_thunk_fn00402231
l00402230_thunk_fn00402231:
	call fn00402231 (retsize: 0;)
	return
	// succ:  fn00402211_exit
fn00402211_exit:


// fn00402231
// Return size: 0
void fn00402231()
fn00402231_entry:
	// succ:  l00402231
l00402231:
	esp = fp
	Mem0[esp:word32] = ebx
	si = esi
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	cl = cl + 0xCE + C
	SCZO = cond(cl)
	ch = ch | al
	SZO = cond(ch)
	C = false
	ch = ch + 0x01
	SZO = cond(ch)
	bl = bl - ah
	SCZO = cond(bl)
	edi = edi + 0x00000001
	SZO = cond(edi)
	edx = edx - ebx
	SCZO = cond(edx)
	branch Test(LE,SZO) l00402BFA
	// succ:  l0040224C l00402BFA
l0040224C:
	v16 = dh
	dh = dh
	dh = v16
	branch Test(GT,SZO) l00402BFA
	// succ:  l00402254 l00402BFA
l00402254:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ds
	__outb(0x67, al)
	ecx = 0xCA2BCC36
	// succ:  l00402257_thunk_fn0040225C
l00402257_thunk_fn0040225C:
	call fn0040225C (retsize: 0;)
	return
	// succ:  fn00402231_exit
l00402BFA:
	ebx = ebx - edx
	SCZO = cond(ebx)
	bh = bh + 0x01
	SZO = cond(bh)
	dl = dh
	ch = ch + 0xE3 + C
	SCZO = cond(ch)
	Mem0[esp - 0x00000008:word32] = eax
	ecx = ebx
	edi = edx
	dh = dh - cl
	SCZO = cond(dh)
	dl = dl + al
	SCZO = cond(dl)
	edi = esi
fn00402231_exit:


// fn0040225A
// Return size: 0
void fn0040225A()
fn0040225A_entry:
	// succ:  l0040225A
l0040225A:
	esp = fp
	ecx = ecx - edx
	SCZO = cond(ecx)
	goto l0040225C
	// succ:  l0040225C
l0040225A:
fn0040225A_exit:


// fn0040225C
// Return size: 0
void fn0040225C()
fn0040225C_entry:
	// succ:  l0040225C
l0040225C:
	esp = fp
	edi = esi
	cl = cl - ch
	SCZO = cond(cl)
	cl = cl + 0x01
	SZO = cond(cl)
	cl = 0x92
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	cl = ~cl
	edi = edi - eax
	SCZO = cond(edi)
	// succ:  l00402269_thunk_fn00402E92
l00402269_thunk_fn00402E92:
	call fn00402E92 (retsize: 0;)
	return
	// succ:  fn0040225C_exit
fn0040225C_exit:


// fn004022B9
// Return size: 0
void fn004022B9()
fn004022B9_entry:
	// succ:  l004022B9
l004022B9:
	esp = fp
	Mem0[esp - 0x00000010:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = ecx
	ebx = edx
	edi = edi + esi
	SCZO = cond(edi)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	bl = bl | ch
	SZO = cond(bl)
	C = false
	edi = esi
fn004022B9_exit:


// fn004022F4
// Return size: 4
void fn004022F4()
fn004022F4_entry:
	// succ:  l004022F4
l004022F4:
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	edx = edx + edi
	SCZO = cond(edx)
	dl = dl - 0x01
	SZO = cond(dl)
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	ecx = edx
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	ch = 0x91
	// succ:  l00402D9A
l00402D9A:
	esi = esi - ecx
	SCZO = cond(esi)
	bh = bh - 0x01
	SZO = cond(bh)
	dl = dl - 0x01
	SZO = cond(dl)
	bh = 0xB7
	ch = ch ^ bl
	SZO = cond(ch)
	C = false
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	dh = dl
	ch = 0x9A
	call fn004027D5 (retsize: 4;)
	esp = esp + 0xFFFFFFFA
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	al = al + Mem0[ebp + 0x805B5C0C:byte] + C
	SCZO = cond(al)
	// succ:  l00402DB5
l00402DB5:
	return
	// succ:  fn004022F4_exit
fn004022F4_exit:


// fn00402349
// Return size: 0
void fn00402349()
fn00402349_entry:
	// succ:  l00402349
l00402349:
	esp = fp
	bh = bh - al
	SCZO = cond(bh)
	edx = edx - ecx
	SCZO = cond(edx)
	call fn004025FE (retsize: 4;)
	goto l0040234B_thunk_fn0040234C
	// succ:  l0040234B_thunk_fn0040234C
l00402349:
l0040234B_thunk_fn0040234C:
	call fn0040234C (retsize: 0;)
	return
	// succ:  fn00402349_exit
fn00402349_exit:


// fn0040234C
// Return size: 0
void fn0040234C()
fn0040234C_entry:
	// succ:  l0040234C
l0040234C:
	esp = fp
	v4 = Mem0[edx:word32] << 0x00000001
	Mem0[edx:word32] = v4
	SCZO = cond(v4)
l0040234C:
	cl = cl ^ dh
	SZO = cond(cl)
	C = false
	ch = ch + 0x01
	SZO = cond(ch)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000040
	bl = bl - 0x22 - C
	SCZO = cond(bl)
	ch = -ch
	SCZO = cond(ch)
	C = ch == 0x00
	eax = eax ^ esi
	SZO = cond(eax)
	C = false
fn0040234C_exit:


// fn0040235F
// Return size: 0
void fn0040235F()
fn0040235F_entry:
	// succ:  l0040235F
l0040235F:
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l9826_C5AC
l9826_C5AC:
fn0040235F_exit:


// fn00402366
// Return size: 0
void fn00402366()
fn00402366_entry:
	// succ:  l00402366
l00402366:
	esp = fp
	v3 = (dh & 0x01 << 0x08 - 0x0C) != 0x00
	dh = __rol(dh, 0x0C)
	C = v3
	ch = ~ch
	ch = ~ch
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	cl = cl + 0x01
	SZO = cond(cl)
	ecx = ecx ^ eax
	SZO = cond(ecx)
	C = false
	ch = -ch
	SCZO = cond(ch)
	C = ch == 0x00
	edi = edi - esi
	SCZO = cond(edi)
l00402366:
fn00402366_exit:


// fn00402380
// Return size: 0
void fn00402380()
fn00402380_entry:
	// succ:  l00402380
l00402380:
	esp = fp
	Mem0[esp:word32] = eax
	cx = cx
	v5 = ch
	ch = ch
	ch = v5
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	bl = ~bl
	ecx = ecx >>u 0x0000000F
	SCZO = cond(ecx)
	bh = bh - ah
	SCZO = cond(bh)
	edi = edi - 0x00000001
	SZO = cond(edi)
	branch Test(EQ,Z) l004025C0
	// succ:  l00402399 l004025C0
l00402399:
	si = si
	branch Test(NE,Z) l004025C0
	// succ:  l004023A2 l004025C0
l004023A2:
	__hlt()
l004025C0:
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bl = 0x63
	dh = dh - 0x01
	SZO = cond(dh)
	eax = eax + 0x00000001
	SZO = cond(eax)
	ah = ~ah
	bl = bl - dl
	SCZO = cond(bl)
	al = ~al
	ah = ah ^ bh
	SZO = cond(ah)
	C = false
	eax = eax + ebx
	SCZO = cond(eax)
	bh = bh - 0x01
	SZO = cond(bh)
	branch Test(ULT,C) l00402E08
	goto l004025D8
	// succ:  l004025D8 l004025D2_thunk_fn00402E08
l004025D2_thunk_fn00402E08:
	call fn00402E08 (retsize: 0;)
	return
	// succ:  fn00402380_exit
l004025D8:
	v21 = ah
	ah = ah
	ah = v21
	branch Test(UGE,C) l00402E08
	goto l004025E0
	// succ:  l004025E0 l004025DA_thunk_fn00402E08
l004025DA_thunk_fn00402E08:
	call fn00402E08 (retsize: 0;)
	return
	// succ:  fn00402380_exit
l004025E0:
	eax = eax & Mem0[edx + 0x4F1E78DF:word32]
	SZO = cond(eax)
	C = false
	call fn00402947 (retsize: 4;)
	// succ:  l004025E0_thunk_fn004025E5 l004025F5_thunk_fn004025FA
l004025E0_thunk_fn004025E5:
	call fn004025E5 (retsize: 0;)
	return
	// succ:  fn00402380_exit
l004025F5_thunk_fn004025FA:
	call fn004025FA (retsize: 0;)
	return
	// succ:  fn00402380_exit
fn00402380_exit:


// fn004023A9
// Return size: 0
void fn004023A9()
fn004023A9_entry:
	// succ:  l004023A9
l004023A9:
	esp = fp
	cl = cl | bh
	SZO = cond(cl)
	C = false
	ch = ch ^ dh
	SZO = cond(ch)
	C = false
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	ch = ch - 0x01
	SZO = cond(ch)
	ch = ch - 0x01
	SZO = cond(ch)
	ch = ch ^ bh
	SZO = cond(ch)
	C = false
	ch = ch - 0xBA - C
	SCZO = cond(ch)
	call fn00402EDA (retsize: 4;)
	SCZO = cond(eax - ebx)
	eax = Mem0[esi:word32]
	esi = esi + 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = 0x648D830B
	goto l004023C2_thunk_fn004023C7
	// succ:  l004023C2_thunk_fn004023C7
l004023A9:
l004023C2_thunk_fn004023C7:
	call fn004023C7 (retsize: 0;)
	return
	// succ:  fn004023A9_exit
fn004023A9_exit:


// fn004023C5
// Return size: 0
void fn004023C5()
fn004023C5_entry:
	// succ:  l004023C5
l004023C5:
	esp = fp
	esp = esp + 0x00000004
	// succ:  l004023C5_thunk_fn004023C7
l004023C5_thunk_fn004023C7:
	call fn004023C7 (retsize: 0;)
	return
	// succ:  fn004023C5_exit
fn004023C5_exit:


// fn004023C7
// Return size: 0
void fn004023C7()
fn004023C7_entry:
	// succ:  l004023C7
l004023C7:
	esp = fp
	al = al & 0x04
	SZO = cond(al)
	C = false
	bl = bl + 0x01
	SZO = cond(bl)
	bl = cl
	bh = bh + 0x60
	SCZO = cond(bh)
	bl = bl - 0x35 - C
	SCZO = cond(bl)
	edi = edi - 0x00000001
	SZO = cond(edi)
	goto l004023D4_thunk_fn00402529
	// succ:  l004023D4_thunk_fn00402529
l004023C7:
	bl = bl + 0x01
	SZO = cond(bl)
	bl = cl
	bh = bh + 0x60
	SCZO = cond(bh)
	bl = bl - 0x35 - C
	SCZO = cond(bl)
	edi = edi - 0x00000001
	SZO = cond(edi)
	goto l004023D4_thunk_fn00402529
	// succ:  l004023D4_thunk_fn00402529
l004023D4_thunk_fn00402529:
	call fn00402529 (retsize: 0;)
	return
	// succ:  fn004023C7_exit
l004023D4_thunk_fn00402529:
	call fn00402529 (retsize: 0;)
	return
	// succ:  fn004023C7_exit
fn004023C7_exit:


// fn004023DD
// Return size: 0
void fn004023DD()
fn004023DD_entry:
	// succ:  l004023DD
l004023DD:
	esp = fp
	cl = ~cl
	Mem0[ebx:byte] = dl
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ch = ch + 0xE4
	SCZO = cond(ch)
	cl = cl ^ bl
	SZO = cond(cl)
	C = false
	edi = edi + ebx
	SCZO = cond(edi)
	call fn00402633 (retsize: 4;)
	Mem0[edi:word32] = __in(edx)
	edi = edi + 0x00000004
	ebx = 0xDDF60F3D
	goto l004023F1_thunk_fn004023F6
	// succ:  l004023F1_thunk_fn004023F6
l004023DD:
l004023F1_thunk_fn004023F6:
	call fn004023F6 (retsize: 0;)
	return
	// succ:  fn004023DD_exit
fn004023DD_exit:


// fn004023F4
// Return size: 0
void fn004023F4()
fn004023F4_entry:
	// succ:  l004023F4
l004023F4:
	esp = fp
	ch = -ch
	SCZO = cond(ch)
	C = ch == 0x00
	// succ:  l004023F4_thunk_fn004023F6
l004023F4_thunk_fn004023F6:
	call fn004023F6 (retsize: 0;)
	return
	// succ:  fn004023F4_exit
l0040240A_thunk_fn00402349:
	call fn00402349 (retsize: 0;)
	return
	// succ:  fn004023F4_exit
fn004023F4_exit:


// fn004023F6
// Return size: 0
void fn004023F6()
fn004023F6_entry:
	// succ:  l004023F6
l004023F6:
	esp = fp
	ch = ch + 0xB7
	SCZO = cond(ch)
	ecx = edi
	bh = ~bh
	ecx = ecx - ebx
	SCZO = cond(ecx)
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	dh = dh - bh
	SCZO = cond(dh)
	dh = dh - 0x7D - C
	SCZO = cond(dh)
	eax = eax + ecx
	SCZO = cond(eax)
	ebx = ebx ^ ecx
	SZO = cond(ebx)
	C = false
	// succ:  l0040240A_thunk_fn00402349 l0040240A_thunk_fn00402349
l004023F6:
	ch = ch + 0xB7
	SCZO = cond(ch)
	ecx = edi
	bh = ~bh
	ecx = ecx - ebx
	SCZO = cond(ecx)
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	dh = dh - bh
	SCZO = cond(dh)
	dh = dh - 0x7D - C
	SCZO = cond(dh)
	eax = eax + ecx
	SCZO = cond(eax)
	ebx = ebx ^ ecx
	SZO = cond(ebx)
	C = false
l0040240A_thunk_fn00402349:
	call fn00402349 (retsize: 0;)
	return
	// succ:  fn004023F6_exit
fn004023F6_exit:


// fn00402417
// Return size: 0
void fn00402417()
fn00402417_entry:
	// succ:  l00402417
l00402417:
	esi = eax
	bh = bh + 0x52 + C
	SCZO = cond(bh)
	ebx = ebx - edx
	SCZO = cond(ebx)
	edi = edi - edx
	SCZO = cond(edi)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bh = bh - 0x01
	SZO = cond(bh)
	bh = ~bh
	eax = eax | eax
	SZO = cond(eax)
	C = false
	branch Test(NE,Z) l00402427_thunk_fn0040298E
	goto l0040242D
	// succ:  l0040242D l00402427_thunk_fn0040298E
l00402427_thunk_fn0040298E:
	call fn0040298E (retsize: 0;)
	return
	// succ:  fn00402417_exit
l0040242D:
	esi = esi + 0x00000001
	SZO = cond(esi)
	branch Test(PE,P) l0040242E_thunk_fn00402A9B
	goto l00402434
	// succ:  l00402434 l0040242E_thunk_fn00402A9B
l0040242E_thunk_fn00402A9B:
	call fn00402A9B (retsize: 0;)
	return
	// succ:  fn00402417_exit
l00402434:
	al = al
fn00402417_exit:


// fn00402443
// Return size: 0
void fn00402443()
fn00402443_entry:
	// succ:  l00402443
l00402443:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = edx
	edx = v3
	v5 = cx
	cx = cx
	cx = v5
	ecx = ecx
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx + edi
	SCZO = cond(ebx)
	dh = dh + 0x01
	SZO = cond(dh)
	edx = ecx
fn00402443_exit:


// fn00402488
// Return size: 0
void fn00402488()
fn00402488_entry:
	// succ:  l00402488
l00402488:
	esp = fp
	Mem0[esp:word32] = edi
	v4 = ax
	ax = ax
	ax = v4
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi - 0x00000001
	SZO = cond(edi)
	cl = cl + 0x5E + C
	SCZO = cond(cl)
	ch = ch ^ bh
	SZO = cond(ch)
	C = false
	ch = ch - 0x01
	SZO = cond(ch)
	branch Test(PE,P) l00402497_thunk_fn00402A7C
	goto l0040249D
	// succ:  l0040249D l00402497_thunk_fn00402A7C
l00402497_thunk_fn00402A7C:
	call fn00402A7C (retsize: 0;)
	return
	// succ:  fn00402488_exit
l0040249D:
	branch Test(NS,S) l0040249F
	// succ:  l0040249F
l0040249F:
	v14 = ah
	ah = ah
	ah = v14
	branch Test(PO,P) l004024A1_thunk_fn00402A7C
	goto l004024A7
	// succ:  l004024A7 l004024A1_thunk_fn00402A7C
l004024A1_thunk_fn00402A7C:
	call fn00402A7C (retsize: 0;)
	return
	// succ:  fn00402488_exit
l004024A7:
	v17 = Mem0[esp:word32] ^ ebx
	Mem0[esp:word32] = v17
	SZO = cond(Mem0[esp:word32])
	C = false
	Mem0[0x648D4959:word32] = eax
	// succ:  l004024AA_thunk_fn004024AF
l004024AA_thunk_fn004024AF:
	call fn004024AF (retsize: 0;)
	return
	// succ:  fn00402488_exit
fn00402488_exit:


// fn004024AD
// Return size: 0
void fn004024AD()
fn004024AD_entry:
	// succ:  l004024AD
l004024AD:
	esp = fp
	esp = esp + 0x00000004
	// succ:  l004024AD_thunk_fn004024AF
l004024AD_thunk_fn004024AF:
	call fn004024AF (retsize: 0;)
	return
	// succ:  fn004024AD_exit
l004024BC_thunk_fn004023DD:
	call fn004023DD (retsize: 0;)
	return
	// succ:  fn004024AD_exit
fn004024AD_exit:


// fn004024AF
// Return size: 0
void fn004024AF()
fn004024AF_entry:
	// succ:  l004024AF
l004024AF:
	esp = fp
	al = al & 0x04
	SZO = cond(al)
	C = false
	cl = ~cl
	cl = 0xE4
	ch = ch + 0x38
	SCZO = cond(ch)
	edi = edi + edx
	SCZO = cond(edi)
	ch = ch ^ bl
	SZO = cond(ch)
	C = false
	// succ:  l004024BC_thunk_fn004023DD l004024BC_thunk_fn004023DD
l004024AF:
	cl = ~cl
	cl = 0xE4
	ch = ch + 0x38
	SCZO = cond(ch)
	edi = edi + edx
	SCZO = cond(edi)
	ch = ch ^ bl
	SZO = cond(ch)
	C = false
l004024BC_thunk_fn004023DD:
	call fn004023DD (retsize: 0;)
	return
	// succ:  fn004024AF_exit
fn004024AF_exit:


// fn00402508
// Return size: 0
void fn00402508()
fn00402508_entry:
	goto l00402508
	// succ:  l00402508
l004022D5:
	esi = esi + 0x00000001
	SZO = cond(esi)
	bh = bh + bl
	SCZO = cond(bh)
	bl = bl + 0xD7 + C
	SCZO = cond(bl)
	bl = bl - 0x01
	SZO = cond(bl)
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	branch Test(LE,SZO) l004022E0_thunk_fn004021C6
	goto l004022E6
	// succ:  l004022E6 l004022E0_thunk_fn004021C6
l004022E0_thunk_fn004021C6:
	call fn004021C6 (retsize: 0;)
	return
	// succ:  fn00402508_exit
l004022E6:
l00402508:
	bl = ~bl
	edi = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[eax + 0x00000010:word32]
	bh = bh - cl
	SCZO = cond(bh)
	bh = bh | ah
	SZO = cond(bh)
	C = false
	bl = bl + ah
	SCZO = cond(bl)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bl = bl | bh
	SZO = cond(bl)
	C = false
	esi = esi | eax
	SZO = cond(esi)
	C = false
	bl = dl
	goto l004022D5
	// succ:  l004022D5
fn00402508_exit:


// fn00402529
// Return size: 0
void fn00402529()
fn00402529_entry:
	// succ:  l00402529
l00402529:
	esp = fp
	bh = bh - 0x01
	SZO = cond(bh)
	ebx = ebx - ecx
	SCZO = cond(ebx)
	bl = bl + al
	SCZO = cond(bl)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bh = bh - 0x03 - C
	SCZO = cond(bh)
	bl = dh
	eax = Mem0[eax:word32]
	edi = edi + ecx
	SCZO = cond(edi)
	goto l004026B9
	// succ:  l004026B9
l00402529:
l004026B9:
	bl = 0xB7
	ebx = edi
	edi = ecx
	edi = eax
	bl = bl | ah
	SZO = cond(bl)
	C = false
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	bh = bh - ch
	SCZO = cond(bh)
	bh = ch
	bh = 0xC6
	call fn00402DD0 (retsize: 4;)
	esi = esi - 0x00000001
	SZO = cond(esi)
	v17 = Mem0[esi:byte]
	Mem0[edi:byte] = v17
	esi = esi + 0x00000001
	edi = edi + 0x00000001
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = 0xFB2BEB9E
	// succ:  l004026D3_thunk_fn004026D8
l004026D3_thunk_fn004026D8:
	call fn004026D8 (retsize: 0;)
	return
	// succ:  fn00402529_exit
fn00402529_exit:


// fn00402550
// Return size: 0
void fn00402550()
fn00402550_entry:
	// succ:  l00402550
l00402550:
	// succ:  l00402558
l00402558:
	bh = bh - 0xF6 - C
	SCZO = cond(bh)
	ebx = ebx + edx
	SCZO = cond(ebx)
	ebx = esi
	edx = eax
	dh = dh + 0xBA
	SCZO = cond(dh)
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	edi = edi - eax
	SCZO = cond(edi)
	eax = eax ^ ebx
	SZO = cond(eax)
	C = false
	esi = ecx
	branch Test(PE,P) l0040256C_thunk_fn004028D7
	goto l00402572
	// succ:  l00402572 l0040256C_thunk_fn004028D7
l0040256C_thunk_fn004028D7:
	call fn004028D7 (retsize: 0;)
	return
	// succ:  fn00402550_exit
l00402572:
	al = al
	// succ:  l00402579
l00402579:
	branch Test(PO,P) l00402579_thunk_fn004028D7
	goto l0040257F
	// succ:  l0040257F l00402579_thunk_fn004028D7
l00402579_thunk_fn004028D7:
	call fn004028D7 (retsize: 0;)
	return
	// succ:  fn00402550_exit
l0040257F:
	esp = 0xFEF970D0
	// succ:  l0040257F_thunk_fn00402584
l0040257F_thunk_fn00402584:
	call fn00402584 (retsize: 6;)
	return
	// succ:  fn00402550_exit
fn00402550_exit:


// fn00402583
// Return size: 6
void fn00402583()
fn00402583_entry:
	// succ:  l00402583
l00402583:
	bh = bh + 0x01
	SZO = cond(bh)
	call fn00402BB9 (retsize: 4;)
	// succ:  l00402583_thunk_fn00402584
l00402583_thunk_fn00402584:
	call fn00402584 (retsize: 6;)
	return
	// succ:  fn00402583_exit
fn00402583_exit:


// fn00402584
// Return size: 6
void fn00402584()
fn00402584_entry:
	// succ:  l00402584
l00402584:
	esp = fp
	Mem0[ebx:word32] = 0xFEDE8AD9
	SCZO = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00402584_exit
l00402584:
	ebx = ebx - ecx
	SCZO = cond(ebx)
	bl = dh
	bh = bh - 0x01
	SZO = cond(bh)
	bl = bl + 0x01
	SZO = cond(bl)
	edi = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[edx + 0x00000008:word32]
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bl = bl - dl
	SCZO = cond(bl)
	bh = cl
fn00402584_exit:


// fn004025A3
// Return size: 0
void fn004025A3()
fn004025A3_entry:
	// succ:  l004025A3
l004025A3:
	esp = fp
	bl = ~bl
	bh = bh ^ ch
	SZO = cond(bh)
	C = false
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	bl = bl + ah
	SCZO = cond(bl)
	bl = bl + 0x01
	SZO = cond(bl)
	bh = bh - 0x99 - C
	SCZO = cond(bh)
	edi = edi + ecx
	SCZO = cond(edi)
	esi = esi + eax
	SCZO = cond(esi)
	esi = ebx
	call fn004022B9 (retsize: 4;)
l004025A3:
fn004025A3_exit:


// fn004025E5
// Return size: 0
void fn004025E5()
fn004025E5_entry:
	// succ:  l004025E5
l004025E5:
	esp = fp
	edi = edi - 0x00000001
	SZO = cond(edi)
	ch = ch - bl
	SCZO = cond(ch)
	cl = cl + 0x01
	SZO = cond(cl)
	ecx = ecx ^ ebx
	SZO = cond(ecx)
	C = false
	edx = ecx
	dl = al
	edx = edx - ebx
	SCZO = cond(edx)
	edx = edx - 0x00000001
	SZO = cond(edx)
	cl = cl + dh
	SCZO = cond(cl)
	call fn00402947 (retsize: 4;)
	goto l004025F5_thunk_fn004025FA
	// succ:  l004025F5_thunk_fn004025FA
l004025E5:
	ch = ch - bl
	SCZO = cond(ch)
	cl = cl + 0x01
	SZO = cond(cl)
	ecx = ecx ^ ebx
	SZO = cond(ecx)
	C = false
	edx = ecx
	dl = al
	edx = edx - ebx
	SCZO = cond(edx)
	edx = edx - 0x00000001
	SZO = cond(edx)
	cl = cl + dh
	SCZO = cond(cl)
l004025F5_thunk_fn004025FA:
	call fn004025FA (retsize: 0;)
	return
	// succ:  fn004025E5_exit
fn004025E5_exit:


// fn004025FA
// Return size: 0
void fn004025FA()
fn004025FA_entry:
	// succ:  l004025FA
l004025FA:
	esp = fp
	eax = (int32) ax
	call Mem0[0x24448FE5:ptr32] (retsize: 4;)
	goto l004025FB_thunk_fn00402601
	// succ:  l004025FB_thunk_fn00402601
l004025FA:
	eax = (int32) ax
	call Mem0[0x24448FE5:ptr32] (retsize: 4;)
	goto l004025FB_thunk_fn00402601
	// succ:  l004025FB_thunk_fn00402601
l004025FB_thunk_fn00402601:
	call fn00402601 (retsize: 0;)
	return
	// succ:  fn004025FA_exit
l004025FB_thunk_fn00402601:
	call fn00402601 (retsize: 0;)
	return
	// succ:  fn004025FA_exit
fn004025FA_exit:


// fn004025FE
// Return size: 0
void fn004025FE()
fn004025FE_entry:
	// succ:  l004025FE
l004025FE:
	esp = fp
	Mem0[esp - 0x00000020:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	call fn00402CC4 (retsize: 4;)
	// succ:  l004025FE_thunk_fn00402601 l0040260B_thunk_fn00402610
l004025FE_thunk_fn00402601:
	call fn00402601 (retsize: 0;)
	return
	// succ:  fn004025FE_exit
l0040260B_thunk_fn00402610:
	call fn00402610 (retsize: 0;)
	return
	// succ:  fn004025FE_exit
fn004025FE_exit:


// fn00402601
// Return size: 0
void fn00402601()
fn00402601_entry:
	// succ:  l00402601
l00402601:
	esp = fp
	ecx = ecx - 0x00000001
	branch Test(NE,Z) && ecx != 0x00000000 l00402583
	goto l00402603
	// succ:  l00402603 l00402601_thunk_fn00402583
l00402601:
	ah = ah - 0x77 - C
	SCZO = cond(ah)
	dh = dl
	esi = esi + 0x00000001
	SZO = cond(esi)
	ebx = ebx + edi
	SCZO = cond(ebx)
	edx = edx + 0x00000001
	SZO = cond(edx)
l00402601_thunk_fn00402583:
	call fn00402583 (retsize: 0;)
	return
	// succ:  fn00402601_exit
l00402603:
	rArg0 = rArg0 / Mem0[edi - 0x00000076:real64]
fn00402601_exit:


// fn00402610
// Return size: 0
void fn00402610()
fn00402610_entry:
	// succ:  l00402610
l00402610:
	esp = fp
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	v7 = Mem0[eax + eax:word32] - ebx - C
	Mem0[eax + eax:word32] = v7
	SCZO = cond(v7)
l00402610:
fn00402610_exit:


// fn00402616
// Return size: 0
void fn00402616()
fn00402616_entry:
	// succ:  l00402616
l00402616:
	esp = fp
	esp = esp + 0x00000004
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	bh = bh | ch
	SZO = cond(bh)
	C = false
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	edx = edx + ecx
	SCZO = cond(edx)
	cl = cl | ch
	SZO = cond(cl)
	C = false
	cl = 0x05
	ecx = ecx + ebx
	SCZO = cond(ecx)
	cl = cl ^ ah
	SZO = cond(cl)
	C = false
	// succ:  l0040276E
l0040276E:
	bl = bl + 0x01
	SZO = cond(bl)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bh = bh + 0x01
	SZO = cond(bh)
	bh = bh + ch
	SCZO = cond(bh)
	cl = cl + 0x45
	SCZO = cond(cl)
	bh = bh - ch
	SCZO = cond(bh)
	cl = cl - 0xEC - C
	SCZO = cond(cl)
	bl = 0x33
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	bl = bh
	// succ:  l00402783_thunk_fn00402EBF
l00402783_thunk_fn00402EBF:
	call fn00402EBF (retsize: 0;)
	return
	// succ:  fn00402616_exit
fn00402616_exit:


// fn00402633
// Return size: 0
void fn00402633()
fn00402633_entry:
	// succ:  l00402633
l00402633:
	esp = fp
	Mem0[esp - 0x00000018:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	cl = cl - 0x01
	SZO = cond(cl)
	cl = cl + al
	SCZO = cond(cl)
	ch = ~ch
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	cl = dh
	ecx = ecx ^ esi
	SZO = cond(ecx)
	C = false
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ch = ch - 0x01
	SZO = cond(ch)
	cl = cl - 0x68 - C
	SCZO = cond(cl)
	// succ:  l00402D28
l00402D28:
	esi = esi + 0x00000001
	SZO = cond(esi)
	cl = ~cl
	cl = cl - 0x01 - C
	SCZO = cond(cl)
	ch = ch - al
	SCZO = cond(ch)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ch = -ch
	SCZO = cond(ch)
	C = ch == 0x00
	edi = edi + ebx
	SCZO = cond(edi)
	ch = ch + 0x4D
	SCZO = cond(ch)
	cl = cl ^ ch
	SZO = cond(cl)
	C = false
	call fn00402488 (retsize: 4;)
	esp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = esp
	D = true
fn00402633_exit:


// fn00402676
// Return size: 0
void fn00402676()
fn00402676_entry:
	call fn00402C64 (retsize: 0;)
	return
	// succ:  l00402676 fn00402676_exit
l00402676:
	al = al + 0x01
	SZO = cond(al)
	edx = edx - 0x00000001
	SZO = cond(edx)
	ch = ch | bh
	SZO = cond(ch)
	C = false
	eax = eax | esi
	SZO = cond(eax)
	C = false
	al = al + cl
	SCZO = cond(al)
	eax = eax ^ ecx
	SZO = cond(eax)
	C = false
	cl = cl - 0xFA - C
	SCZO = cond(cl)
	cl = cl + 0x4C + C
	SCZO = cond(cl)
	cl = 0x15
	branch Test(PE,P) l00402689_thunk_fn00402199
	goto l00402689_thunk_fn0040268F
	// succ:  l00402689_thunk_fn0040268F l00402689_thunk_fn00402199
fn00402676_exit:


// fn0040268F
// Return size: 0
void fn0040268F()
fn0040268F_entry:
	// succ:  l0040268F
l0040268F:
	esp = fp
	branch Test(NS,S) l00402691
	goto l00402691
	// succ:  l00402691
l0040268F:
l00402691:
	v4 = bh
	bh = bh
	bh = v4
	branch Test(PO,P) l00402693_thunk_fn00402199
	goto l00402699
	// succ:  l00402699 l00402693_thunk_fn00402199
l00402693_thunk_fn00402199:
	call fn00402199 (retsize: 0;)
	return
	// succ:  fn0040268F_exit
l00402699:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ds
	ds = Mem0[esp:selector]
	esp = esp + 0x00000002
	dh = dh | ch
	SZO = cond(dh)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
l0040269E:
	goto l0040269E
	// succ:  l0040269E
fn0040268F_exit:


// fn0040269F
// Return size: 0
void fn0040269F()
fn0040269F_entry:
	// succ:  l0040269F
l0040269F:
	esp = fp
	al = al + 0x01
	SZO = cond(al)
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	edi = edi | esi
	SZO = cond(edi)
	C = false
	dh = ~dh
	eax = eax + 0x00000001
	SZO = cond(eax)
	ah = ah - bl
	SCZO = cond(ah)
	eax = eax - ebx
	SCZO = cond(eax)
	edx = edx + 0x00000001
	SZO = cond(edx)
	goto l004026AD_thunk_fn00402B41
	// succ:  l004026AD_thunk_fn00402B41
l0040269F:
l004026AD_thunk_fn00402B41:
	call fn00402B41 (retsize: 0;)
	return
	// succ:  fn0040269F_exit
fn0040269F_exit:


// fn004026D6
// Return size: 0
void fn004026D6()
fn004026D6_entry:
	// succ:  l004026D6
l004026D6:
	esp = fp
	edi = edi - ebx
	SCZO = cond(edi)
	goto l004026D6_thunk_fn004026D8
	// succ:  l004026D6_thunk_fn004026D8
l004026D6:
l004026D6_thunk_fn004026D8:
	call fn004026D8 (retsize: 0;)
	return
	// succ:  fn004026D6_exit
l004026E3_thunk_fn004028BA:
	call fn004028BA (retsize: 0;)
	return
	// succ:  fn004026D6_exit
fn004026D6_exit:


// fn004026D8
// Return size: 0
void fn004026D8()
fn004026D8_entry:
	// succ:  l004026D8
l004026D8:
	esp = fp
	ah = ah - cl
	SCZO = cond(ah)
	al = al - dh
	SCZO = cond(al)
	dh = dh + 0x17 + C
	SCZO = cond(dh)
	cl = cl + 0x01
	SZO = cond(cl)
	dl = ~dl
	// succ:  l004026E3_thunk_fn004028BA l004026E3_thunk_fn004028BA
l004026D8:
	ah = ah - cl
	SCZO = cond(ah)
	al = al - dh
	SCZO = cond(al)
	dh = dh + 0x17 + C
	SCZO = cond(dh)
	cl = cl + 0x01
	SZO = cond(cl)
	dl = ~dl
l004026E3_thunk_fn004028BA:
	call fn004028BA (retsize: 0;)
	return
	// succ:  fn004026D8_exit
fn004026D8_exit:


// fn004026EF
// Return size: 0
void fn004026EF()
fn004026EF_entry:
	// succ:  l004026EF
l004026EF:
	esp = fp
	Mem0[esp:word32] = esi
	// succ:  l004026F7
l004026F7:
	esp = esp - 0x00000002
	Mem0[esp:word16] = di
	di = Mem0[esp:word16]
	esp = esp + 0x00000002
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = ~bh
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	bh = bh ^ al
	SZO = cond(bh)
	C = false
	bl = dh
	esi = esi + edx
	SCZO = cond(esi)
	ebx = eax
	call fn00402AF6 (retsize: 4;)
	rArg0 = rArg0 / (real64) Mem0[edx + 0xD1F6FC66:word16]
	// succ:  l0040270D_thunk_fn00402713
l0040270D_thunk_fn00402713:
	call fn00402713 (retsize: 0;)
	return
	// succ:  fn004026EF_exit
fn004026EF_exit:


// fn00402711
// Return size: 0
void fn00402711()
fn00402711_entry:
	// succ:  l00402711
l00402711:
	esp = fp
	cl = ~cl
	goto l00402711_thunk_fn00402713
	// succ:  l00402711_thunk_fn00402713
l00402711:
l00402711_thunk_fn00402713:
	call fn00402713 (retsize: 0;)
	return
	// succ:  fn00402711_exit
l0040271F_thunk_fn00402366:
	call fn00402366 (retsize: 0;)
	return
	// succ:  fn00402711_exit
fn00402711_exit:


// fn00402713
// Return size: 0
void fn00402713()
fn00402713_entry:
	// succ:  l00402713
l00402713:
	esp = fp
	cl = cl + 0x01
	SZO = cond(cl)
	cl = cl | ah
	SZO = cond(cl)
	C = false
	cl = 0xE0
	edi = edi - 0x00000001
	SZO = cond(edi)
	cl = cl - 0x01
	SZO = cond(cl)
	cl = cl + 0x51
	SCZO = cond(cl)
	// succ:  l0040271F_thunk_fn00402366 l0040271F_thunk_fn00402366
l00402713:
	cl = cl + 0x01
	SZO = cond(cl)
	cl = cl | ah
	SZO = cond(cl)
	C = false
	cl = 0xE0
	edi = edi - 0x00000001
	SZO = cond(edi)
	cl = cl - 0x01
	SZO = cond(cl)
	cl = cl + 0x51
	SCZO = cond(cl)
l0040271F_thunk_fn00402366:
	call fn00402366 (retsize: 0;)
	return
	// succ:  fn00402713_exit
fn00402713_exit:


// fn004027B5
// Return size: 6
void fn004027B5()
fn004027B5_entry:
	// succ:  l004027B5
l004027B5:
	esp = fp
	Mem0[esp - 0x0000000C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l004027B5_thunk_fn004027B6
l004027B5_thunk_fn004027B6:
	call fn004027B6 (retsize: 6;)
	return
	// succ:  fn004027B5_exit
fn004027B5_exit:


// fn004027B6
// Return size: 6
void fn004027B6()
fn004027B6_entry:
	// succ:  l004027B6
l004027B6:
	esp = fp
	esp = esp + 0x00000001
	SZO = cond(esp)
	al = al & 0xF4
	SZO = cond(al)
	C = false
	bl = bl - cl
	SCZO = cond(bl)
	bl = dl
	bh = bh + 0x4B
	SCZO = cond(bh)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	bh = bh - al
	SCZO = cond(bh)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	bh = 0xBE
	call fn00402C8C (retsize: 4;)
	__outdw(edx, eax)
	esi = esi + 0x00000004
	eax = eax | 0x8DE06F6E
	SZO = cond(eax)
	C = false
	goto l004027D1_thunk_fn004027D6
	// succ:  l004027D1_thunk_fn004027D6
l004027B6:
	bl = bl - cl
	SCZO = cond(bl)
	bl = dl
	bh = bh + 0x4B
	SCZO = cond(bh)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	bh = bh - al
	SCZO = cond(bh)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	bh = 0xBE
	call fn00402C8C (retsize: 4;)
	__outdw(edx, eax)
	esi = esi + 0x00000004
	eax = eax | 0x8DE06F6E
	SZO = cond(eax)
	C = false
	goto l004027D1_thunk_fn004027D6
	// succ:  l004027D1_thunk_fn004027D6
l004027D1_thunk_fn004027D6:
	call fn004027D6 (retsize: 6;)
	return
	// succ:  fn004027B6_exit
l004027D1_thunk_fn004027D6:
	call fn004027D6 (retsize: 6;)
	return
	// succ:  fn004027B6_exit
fn004027B6_exit:


// fn004027D5
// Return size: 6
void fn004027D5()
fn004027D5_entry:
	// succ:  l004027D5
l004027D5:
	esp = fp
	esp = esp + 0x00000004
	call fn0040299E (retsize: 4;)
	// succ:  l004027D5_thunk_fn004027D6 l004027ED_in_fn004027D5
l004027D5_thunk_fn004027D6:
	call fn004027D6 (retsize: 6;)
	return
	// succ:  fn004027D5_exit
l004027ED_in_fn004027D5:
	__outb(0x43, al)
	SCZO = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004027D5_exit
fn004027D5_exit:


// fn004027D6
// Return size: 6
void fn004027D6()
fn004027D6_entry:
	// succ:  l004027D6
l004027D6:
	esp = fp
	al = al & 0x04
	SZO = cond(al)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	bl = ~bl
	esi = esi + edi
	SCZO = cond(esi)
	ch = ch + 0x6E
	SCZO = cond(ch)
	ebx = ebx + ecx
	SCZO = cond(ebx)
	ecx = ecx - esi
	SCZO = cond(ecx)
	dl = dl | bh
	SZO = cond(dl)
	C = false
	call fn0040299E (retsize: 4;)
	goto l004027ED
	// succ:  l004027ED
l004027D6:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	bl = ~bl
	esi = esi + edi
	SCZO = cond(esi)
	ch = ch + 0x6E
	SCZO = cond(ch)
	ebx = ebx + ecx
	SCZO = cond(ebx)
	ecx = ecx - esi
	SCZO = cond(ecx)
	dl = dl | bh
	SZO = cond(dl)
	C = false
l004027ED:
	__outb(0x43, al)
	SCZO = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004027D6_exit
fn004027D6_exit:


// fn004027F2
// Return size: 0
void fn004027F2()
fn004027F2_entry:
	goto l004027F2
	// succ:  l004027F2
l0040245F:
	ah = ah + 0x03 + C
	SCZO = cond(ah)
	eax = eax ^ edi
	SZO = cond(eax)
	C = false
	al = al - 0x85 - C
	SCZO = cond(al)
	dl = 0xB7
	esi = esi + 0x00000001
	SZO = cond(esi)
	cl = cl + 0x01
	SZO = cond(cl)
	ch = ch + 0xB8
	SCZO = cond(ch)
	edi = edx
	edx = edx + 0x00000001
	SZO = cond(edx)
	branch Test(SG,S) l00402886
	// succ:  l00402478 l00402886
l00402478:
	// succ:  l0040247D
l0040247D:
	branch Test(NS,S) l00402886
	// succ:  l00402483 l00402886
l00402483:
	Mem0[0xE7B5F453:word32] = eax
	// succ:  l00402483_thunk_fn00402488
l00402483_thunk_fn00402488:
	call fn00402488 (retsize: 0;)
	return
	// succ:  fn004027F2_exit
l00402689_thunk_fn00402199:
	call fn00402199 (retsize: 0;)
	return
	// succ:  fn004027F2_exit
l00402689_thunk_fn0040268F:
	call fn0040268F (retsize: 0;)
	return
	// succ:  fn004027F2_exit l00402689_thunk_fn0040268F
l00402689_thunk_fn0040268F:
	call fn0040268F (retsize: 0;)
	return
	// succ:  fn004027F2_exit
l004027F2:
	esp = fp
	dl = dl - 0x01
	SZO = cond(dl)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edx = edx + ecx
	SCZO = cond(edx)
	ecx = ecx ^ ebx
	SZO = cond(ecx)
	C = false
	ebx = eax
	esi = eax
	edi = edi + 0x00000001
	SZO = cond(edi)
	ch = ch - 0x1D - C
	SCZO = cond(ch)
	goto l0040245F
	// succ:  l0040245F
l004027F2:
l00402886:
	dl = dl ^ al
	SZO = cond(dl)
	C = false
	// succ:  l00402886_thunk_fn00402887
l00402886_thunk_fn00402887:
	call fn00402887 (retsize: 0;)
	return
	// succ:  fn004027F2_exit
fn004027F2_exit:


// fn0040280D
// Return size: 0
void fn0040280D()
fn0040280D_entry:
	// succ:  l0040280D
l0040280D:
	esp = fp
	esp = esp + 0x00000004
	dh = 0x34
	ecx = ecx ^ edx
	SZO = cond(ecx)
	C = false
	edi = ecx
	cl = ~cl
	cl = cl + bh
	SCZO = cond(cl)
	ah = ah - 0xFD - C
	SCZO = cond(ah)
	dh = dh - 0x01
	SZO = cond(dh)
	branch Test(PE,P) l00402820_thunk_fn0040269F
	goto l00402826
	// succ:  l00402826 l00402820_thunk_fn0040269F
l00402820_thunk_fn0040269F:
	call fn0040269F (retsize: 0;)
	return
	// succ:  fn0040280D_exit
l00402826:
	branch Test(NS,S) l00402828
	// succ:  l00402828
l00402828:
	branch Test(PO,P) l00402828_thunk_fn0040269F
	goto l0040282E
	// succ:  l0040282E l00402828_thunk_fn0040269F
l00402828_thunk_fn0040269F:
	call fn0040269F (retsize: 0;)
	return
	// succ:  fn0040280D_exit
l0040282E:
	rArg0 = rArg0 - Mem0[ebp + 0x8F3A980F:real64]
	// succ:  l0040282E_thunk_fn00402834
l0040282E_thunk_fn00402834:
	call fn00402834 (retsize: 0;)
	return
	// succ:  fn0040280D_exit
fn0040280D_exit:


// fn00402833
// Return size: 0
void fn00402833()
fn00402833_entry:
	// succ:  l00402833
l00402833:
	esp = fp
	Mem0[esp - 0x00000024:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00402833_thunk_fn00402834
l00402833_thunk_fn00402834:
	call fn00402834 (retsize: 0;)
	return
	// succ:  fn00402833_exit
fn00402833_exit:


// fn00402834
// Return size: 0
void fn00402834()
fn00402834_entry:
	// succ:  l00402834
l00402834:
	esp = fp
	esp = esp + 0x00000001
	SZO = cond(esp)
	al = al & 0xDC
	SZO = cond(al)
	C = false
	ch = ~ch
	esi = esi + edx
	SCZO = cond(esi)
	eax = Mem0[edx:word32]
	cl = cl + 0x01
	SZO = cond(cl)
	ebx = ebx - esi
	SCZO = cond(ebx)
	dh = dh ^ cl
	SZO = cond(dh)
	C = false
	bl = bl + 0x04 + C
	SCZO = cond(bl)
	goto l00402846_thunk_fn004022F4
	// succ:  l00402846_thunk_fn004022F4
l00402834:
	ch = ~ch
	esi = esi + edx
	SCZO = cond(esi)
	eax = Mem0[edx:word32]
	cl = cl + 0x01
	SZO = cond(cl)
	ebx = ebx - esi
	SCZO = cond(ebx)
	dh = dh ^ cl
	SZO = cond(dh)
	C = false
	bl = bl + 0x04 + C
	SCZO = cond(bl)
	// succ:  l00402840_thunk_fn004022F4
l00402840_thunk_fn004022F4:
	call fn004022F4 (retsize: 0;)
	return
	// succ:  fn00402834_exit
l00402846_thunk_fn004022F4:
	call fn004022F4 (retsize: 0;)
	return
	// succ:  fn00402834_exit
fn00402834_exit:


// fn00402887
// Return size: 0
void fn00402887()
fn00402887_entry:
	// succ:  l00402887
l00402887:
	esp = fp
	dh = dh << 0x01
	SCZO = cond(dh)
	rArg0 = rArg0 + Mem0[eax + 0xF2334DC6:real64]
	al = bl
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	al = al + 0x8C + C
	SCZO = cond(al)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	dh = dh | bh
	SZO = cond(dh)
	C = false
	dl = ~dl
	goto l0040289B_thunk_fn00402C64
	// succ:  l0040289B_thunk_fn00402C64
l00402887:
	ah = -ah
	SCZO = cond(ah)
	C = ah == 0x00
	dh = dh + 0x4D
	SCZO = cond(dh)
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	al = bl
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	al = al + 0x8C + C
	SCZO = cond(al)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	dh = dh | bh
	SZO = cond(dh)
	C = false
	dl = ~dl
	// succ:  l00402898_thunk_fn00402C64
l00402898_thunk_fn00402C64:
	call fn00402C64 (retsize: 0;)
	return
	// succ:  fn00402887_exit
l0040289B_thunk_fn00402C64:
	call fn00402C64 (retsize: 0;)
	return
	// succ:  fn00402887_exit
fn00402887_exit:


// fn004028A4
// Return size: 0
void fn004028A4()
fn004028A4_entry:
	// succ:  l004028A4
l004028A4:
	esp = fp
	dl = dl + 0x3A
	SCZO = cond(dl)
	edx = edx - 0x00000001
	SZO = cond(edx)
	dh = dh + 0x38
	SCZO = cond(dh)
	bl = bl - 0x0D - C
	SCZO = cond(bl)
	edx = edx - 0x00000001
	SZO = cond(edx)
	dl = dl | ch
	SZO = cond(dl)
	C = false
	call fn0040297E (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	Z = __arpl(Mem0[edx - 0x00000030:word16], bx, &Mem0[edx - 0x00000030:word16])
	goto l004028B7_thunk_fn004028BA
	// succ:  l004028B7_thunk_fn004028BA
l004028A4:
l004028B7_thunk_fn004028BA:
	call fn004028BA (retsize: 0;)
	return
	// succ:  fn004028A4_exit
fn004028A4_exit:


// fn004028BA
// Return size: 0
void fn004028BA()
fn004028BA_entry:
	// succ:  l004028BA
l004028BA:
	esp = fp
	ah = ~ah
	dh = dl
	ah = dl
	al = al + 0xAC
	SCZO = cond(al)
	edx = edx + edi
	SCZO = cond(edx)
	ebx = ebx - 0x00000A99
	SCZO = cond(ebx)
	ch = ch + 0x45
	SCZO = cond(ch)
	call fn0040280D (retsize: 4;)
	v14 = Mem0[esi + eax * 0x02:byte] << 0x01
	Mem0[esi + eax * 0x02:byte] = v14
	SCZO = cond(v14)
l004028BA:
fn004028BA_exit:


// fn004028D7
// Return size: 0
void fn004028D7()
fn004028D7_entry:
	goto l004028D7
	// succ:  l004028D7
l00402745:
	ecx = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ds_ecx = Mem0[eax + 0x0000000B:segptr32]
l0040278C:
	al = al + 0x01
	SZO = cond(al)
	edx = edx + 0x00000001
	SZO = cond(edx)
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	al = al + dh
	SCZO = cond(al)
	dh = dh | al
	SZO = cond(dh)
	C = false
	dl = dl ^ dh
	SZO = cond(dl)
	C = false
	dh = 0xAB
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	edx = edx ^ edi
	SZO = cond(edx)
	C = false
	branch Test(ULE,CZ) l0040279D_thunk_fn00402E2C
	goto l004027A3
	// succ:  l004027A3 l0040279D_thunk_fn00402E2C
l0040279D_thunk_fn00402E2C:
	call fn00402E2C (retsize: 0;)
	return
	// succ:  fn004028D7_exit
l004027A3:
	esp = esp - 0x00000002
	Mem0[esp:word16] = cx
	cx = Mem0[esp:word16]
	esp = esp + 0x00000002
	branch Test(UGT,CZ) l004027A7_thunk_fn00402E2C
	goto l004027AD
	// succ:  l004027AD l004027A7_thunk_fn00402E2C
l004027A7_thunk_fn00402E2C:
	call fn00402E2C (retsize: 0;)
	return
	// succ:  fn004028D7_exit
l004027AD:
	esp = esp - 0x00000004
	Mem0[esp:word32] = cs
	C = __aaa(al, ah, &al, &ah)
	eax = Mem0[0x040D1B03:word32]
	branch Test(OV,O) l00402745
	// succ:  l004027B4_thunk_fn004027B6 l00402745
l004027B4_thunk_fn004027B6:
	call fn004027B6 (retsize: 6;)
	return
	// succ:  fn004028D7_exit l004027B4_thunk_fn004027B6
l004027B4_thunk_fn004027B6:
	call fn004027B6 (retsize: 6;)
	return
	// succ:  fn004028D7_exit
l004028D7:
	esp = fp
	dl = ~dl
	eax = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[ecx:word32]
	edi = edi - edx
	SCZO = cond(edi)
	eax = ebx
	edi = edi | esi
	SZO = cond(edi)
	C = false
	edx = edx ^ esi
	SZO = cond(edx)
	C = false
	bl = ~bl
	branch Test(OV,O) l0040278C
	goto l004028E7_thunk_fn004028ED
	// succ:  l004028E7_thunk_fn004028ED l0040278C
l004028D7:
l004028E7_thunk_fn004028ED:
	call fn004028ED (retsize: 0;)
	return
	// succ:  fn004028D7_exit
fn004028D7_exit:


// fn004028ED
// Return size: 0
void fn004028ED()
fn004028ED_entry:
	// succ:  l004028ED
l004028ED:
	v3 = ch
	ch = ch
	ch = v3
fn004028ED_exit:


// fn004028FE
// Return size: 0
void fn004028FE()
fn004028FE_entry:
	// succ:  l004028FE
l004028FE:
	esp = fp
	bh = ~bh
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	esi = ecx
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh - 0x01
	SZO = cond(bh)
	goto l00402907_thunk_fn004028A4
	// succ:  l00402907_thunk_fn004028A4
l004028FE:
l00402907_thunk_fn004028A4:
	call fn004028A4 (retsize: 0;)
	return
	// succ:  fn004028FE_exit
fn004028FE_exit:


// fn0040292D
// Return size: 0
void fn0040292D()
fn0040292D_entry:
	// succ:  l0040292D
l0040292D:
	esp = fp
	Mem0[esp - 0x00000034:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi ^ eax
	SZO = cond(edi)
	C = false
	edi = edi - ecx
	SCZO = cond(edi)
	eax = eax + edx
	SCZO = cond(eax)
	edi = edi | esi
	SZO = cond(edi)
	C = false
	edi = edi - edx
	SCZO = cond(edi)
	edi = edi + 0x00000001
	SZO = cond(edi)
	eax = eax + ebx
	SCZO = cond(eax)
	call fn004026EF (retsize: 4;)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = es
	esp = esp + Mem0[eax - 0x00000077:word32] + C
	SCZO = cond(esp)
	// succ:  l00402945_thunk_fn00402948
l00402945_thunk_fn00402948:
	call fn00402948 (retsize: 0;)
	return
	// succ:  fn0040292D_exit
fn0040292D_exit:


// fn00402947
// Return size: 0
void fn00402947()
fn00402947_entry:
	// succ:  l00402947
l00402947:
	esp = fp
	Mem0[esp:word32] = ecx
fn00402947_exit:


// fn00402948
// Return size: 0
void fn00402948()
fn00402948_entry:
	// succ:  l00402948
l00402948:
	esp = fp
	al = al | 0x24
	SZO = cond(al)
	C = false
	goto l0040294A_thunk_fn0040294F
	// succ:  l0040294A_thunk_fn0040294F
l00402948:
	call fn0040294F (retsize: 0;)
	return
	// succ:  l00402948_thunk_fn0040294F fn00402948_exit
l00402948_thunk_fn0040294F:
	call fn0040294F (retsize: 0;)
	return
	// succ:  fn00402948_exit
l0040294A_thunk_fn0040294F:
	call fn0040294F (retsize: 0;)
	return
	// succ:  fn00402948_exit
fn00402948_exit:


// fn0040294F
// Return size: 0
void fn0040294F()
fn0040294F_entry:
	// succ:  l0040294F
l0040294F:
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	edx = edx + 0x00000001
	SZO = cond(edx)
	ecx = ecx | esi
	SZO = cond(ecx)
	C = false
	call fn00402DE9 (retsize: 4;)
	v8 = eax
	eax = edi
	edi = v8
	branch Test(LE,SZO) l00402975
	// succ:  l0040295C l00402975
l0040295C:
	__outb(dx, al)
	esp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ch = ah
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	esi = esi - ebx
	SCZO = cond(esi)
	ah = ah - 0x01
	SZO = cond(ah)
	edx = edx | esi
	SZO = cond(edx)
	C = false
	cl = cl + 0x01
	SZO = cond(cl)
	ch = -ch
	SCZO = cond(ch)
	C = ch == 0x00
	ah = ah + 0x01
	SZO = cond(ah)
	bl = bl + 0xF2 + C
	SCZO = cond(bl)
	dh = dh ^ bl
	SZO = cond(dh)
	C = false
	goto l00402DB5_in_fn0040294F
	// succ:  l00402DB5_in_fn0040294F
l00402975:
	v10 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v10
	SCZO = cond(v10)
l00402DB5_in_fn0040294F:
	return
	// succ:  fn0040294F_exit
fn0040294F_exit:


// fn0040297E
// Return size: 0
void fn0040297E()
fn0040297E_entry:
	// succ:  l0040297E
l0040297E:
	esp = fp
	Mem0[esp:word32] = edi
	v4 = dl
	dl = dl
	dl = v4
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	al = al + 0x9F + C
	SCZO = cond(al)
	call fn00402211 (retsize: 4;)
	// succ:  l00402986_thunk_fn00402989 l00402991_thunk_fn00402996
l00402986_thunk_fn00402989:
	call fn00402989 (retsize: 0;)
	return
	// succ:  fn0040297E_exit
l00402991_thunk_fn00402996:
	call fn00402996 (retsize: 0;)
	return
	// succ:  fn0040297E_exit
fn0040297E_exit:


// fn00402989
// Return size: 0
void fn00402989()
fn00402989_entry:
	// succ:  l00402989
l00402989:
	esp = fp
	ah = ah ^ ch
	SZO = cond(ah)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ebx = ebx + eax
	SCZO = cond(ebx)
	goto l0040298C_thunk_fn0040298E
	// succ:  l0040298C_thunk_fn0040298E
l00402989:
	ah = ah ^ ch
	SZO = cond(ah)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ebx = ebx + eax
	SCZO = cond(ebx)
	goto l0040298C_thunk_fn0040298E
	// succ:  l0040298C_thunk_fn0040298E
l0040298C_thunk_fn0040298E:
	call fn0040298E (retsize: 0;)
	return
	// succ:  fn00402989_exit
l0040298C_thunk_fn0040298E:
	call fn0040298E (retsize: 0;)
	return
	// succ:  fn00402989_exit
fn00402989_exit:


// fn0040298E
// Return size: 0
void fn0040298E()
fn0040298E_entry:
	// succ:  l0040298E
l0040298E:
	esp = fp
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	bh = dh
	call fn00402211 (retsize: 4;)
	goto l00402991_thunk_fn00402996
	// succ:  l00402991_thunk_fn00402996
l0040298E:
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	bh = dh
l00402991_thunk_fn00402996:
	call fn00402996 (retsize: 0;)
	return
	// succ:  fn0040298E_exit
fn0040298E_exit:


// fn00402996
// Return size: 0
void fn00402996()
fn00402996_entry:
	// succ:  l00402996
l00402996:
	esp = fp
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx | Mem0[edx:word32]
	SZO = cond(ebx)
	C = false
	eax = eax - 0xAB3BCA47
	SCZO = cond(eax)
	goto l00402999_thunk_fn0040299E
	// succ:  l00402999_thunk_fn0040299E
l00402996:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx | Mem0[edx:word32]
	SZO = cond(ebx)
	C = false
	eax = eax - 0xAB3BCA47
	SCZO = cond(eax)
	goto l00402999_thunk_fn0040299E
	// succ:  l00402999_thunk_fn0040299E
l00402999_thunk_fn0040299E:
	call fn0040299E (retsize: 0;)
	return
	// succ:  fn00402996_exit
l00402999_thunk_fn0040299E:
	call fn0040299E (retsize: 0;)
	return
	// succ:  fn00402996_exit
fn00402996_exit:


// fn0040299E
// Return size: 0
void fn0040299E()
fn0040299E_entry:
	// succ:  l0040299E
l0040299E:
	esp = fp
	esp = esp + 0x00000004
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	dl = dl + 0xA6
	SCZO = cond(dl)
	ch = ~ch
	dl = dl - 0x5D - C
	SCZO = cond(dl)
	edx = edx + 0x00000001
	SZO = cond(edx)
	call fn00402E6F (retsize: 4;)
	esp = esp + 0xFFFFFFFA
	branch Test(GE,SO) l004029B2_thunk_fn00402989
	goto l004029B4
	// succ:  l004029B4 l004029B2_thunk_fn00402989
l004029B2_thunk_fn00402989:
	call fn00402989 (retsize: 0;)
	return
	// succ:  fn0040299E_exit
l004029B4:
	rArg0 = rArg0 - Mem0[ecx:real32]
	eax = eax - 0xDF0ADB98 - C
	SCZO = cond(eax)
	// succ:  l004029B6_thunk_fn004029BB
l004029B6_thunk_fn004029BB:
	call fn004029BB (retsize: 0;)
	return
	// succ:  fn0040299E_exit
fn0040299E_exit:


// fn004029B9
// Return size: 0
void fn004029B9()
fn004029B9_entry:
	// succ:  l004029B9
l004029B9:
	esp = fp
	bl = bl | bh
	SZO = cond(bl)
	C = false
	goto l004029B9_thunk_fn004029BB
	// succ:  l004029B9_thunk_fn004029BB
l004029B9:
l004029B9_thunk_fn004029BB:
	call fn004029BB (retsize: 0;)
	return
	// succ:  fn004029B9_exit
fn004029B9_exit:


// fn004029BB
// Return size: 0
void fn004029BB()
fn004029BB_entry:
	// succ:  l004029BB
l004029BB:
	esp = fp
	bh = bh + 0x01
	SZO = cond(bh)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bl = bl + dl
	SCZO = cond(bl)
	ebx = ebx + esi
	SCZO = cond(ebx)
	edi = edi + eax
	SCZO = cond(edi)
	bh = bh | al
	SZO = cond(bh)
	C = false
	call fn004023C5 (retsize: 4;)
l004029BB:
	bh = bh + 0x01
	SZO = cond(bh)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bl = bl + dl
	SCZO = cond(bl)
	ebx = ebx + esi
	SCZO = cond(ebx)
	edi = edi + eax
	SCZO = cond(edi)
	bh = bh | al
	SZO = cond(bh)
	C = false
	call fn004023C5 (retsize: 4;)
fn004029BB_exit:


// fn004029D0
// Return size: 0
void fn004029D0()
fn004029D0_entry:
	// succ:  l004029D0
l004029D0:
	esp = fp
	bh = bh - 0x52 - C
	SCZO = cond(bh)
	bh = bh - al
	SCZO = cond(bh)
	edx = edx + ebx
	SCZO = cond(edx)
	bh = 0xD2
	call fn004029DE (retsize: 4;)
	goto l004029D9_thunk_fn004029DE
	// succ:  l004029D9_thunk_fn004029DE
l004029D0:
l004029D9_thunk_fn004029DE:
	call fn004029DE (retsize: 0;)
	return
	// succ:  fn004029D0_exit
fn004029D0_exit:


// fn004029DE
// Return size: 0
void fn004029DE()
fn004029DE_entry:
	// succ:  l004029DE
l004029DE:
	esp = fp
	esi = esi + 0x00000001
	SZO = cond(esi)
	bh = bh + ch
	SCZO = cond(bh)
	call fn00402BDB (retsize: 4;)
	v11 = Mem0[ebx + 0x3B71258E + ecx * 4:real64] - rArg0
	Mem0[ebx + 0x3B71258E + ecx * 4:real64] = v11
	// succ:  l004029E6_thunk_fn004029ED
l004029E6_thunk_fn004029ED:
	call fn004029ED (retsize: 0;)
	return
	// succ:  fn004029DE_exit
fn004029DE_exit:


// fn004029ED
// Return size: 0
void fn004029ED()
fn004029ED_entry:
	goto l004029ED
	// succ:  l004029ED
l004024F1:
	bl = ch
	edi = ebx
	esi = esi + 0x00000001
	SZO = cond(esi)
	bl = ~bl
	bl = bl - 0x9E - C
	SCZO = cond(bl)
	bl = bl ^ al
	SZO = cond(bl)
	C = false
	call fn00402127 (retsize: 4;)
	branch Test(UGT,CZ) l00402550
	goto l00402504
	// succ:  l00402504 l00402502_thunk_fn00402550
l00402502_thunk_fn00402550:
	call fn00402550 (retsize: 0;)
	return
	// succ:  fn004029ED_exit
l00402504:
	edi = edi - 0x00000001
	SZO = cond(edi)
	SCZO = cond(Mem0[esi:word32] - Mem0[edi:word32])
	esi = esi + 0x00000004
	edi = edi + 0x00000004
l004029ED:
	esp = fp
	Mem0[esp - 0x00000010:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = bl ^ al
	SZO = cond(bl)
	C = false
	bl = bl + dl
	SCZO = cond(bl)
	eax = eax + 0x00000078
	edi = edi ^ esi
	SZO = cond(edi)
	C = false
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	edi = edi | esi
	SZO = cond(edi)
	C = false
	edi = edi | edx
	SZO = cond(edi)
	C = false
	goto l004024F1
	// succ:  l004024F1
fn004029ED_exit:


// fn00402A0D
// Return size: 0
void fn00402A0D()
fn00402A0D_entry:
	// succ:  l00402A0D
l00402A0D:
	esp = fp
	ecx = ecx ^ edx
	SZO = cond(ecx)
	C = false
	ch = 0x66
	cl = cl | bl
	SZO = cond(cl)
	C = false
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ch = ch ^ ah
	SZO = cond(ch)
	C = false
	ch = ch ^ dh
	SZO = cond(ch)
	C = false
	call fn00402D07 (retsize: 4;)
	al = al & 0x1A
	SZO = cond(al)
	C = false
	al = __inb(0x80)
	goto l00402A21_thunk_fn00402A24
	// succ:  l00402A21_thunk_fn00402A24
l00402A0D:
l00402A21_thunk_fn00402A24:
	call fn00402A24 (retsize: 0;)
	return
	// succ:  fn00402A0D_exit
fn00402A0D_exit:


// fn00402A23
// Return size: 0
void fn00402A23()
fn00402A23_entry:
	// succ:  l00402A23
l00402A23:
	dh = dh + 0x4C
	SCZO = cond(dh)
	// succ:  l00402A23_thunk_fn00402A24
l00402A23_thunk_fn00402A24:
	call fn00402A24 (retsize: 0;)
	return
	// succ:  fn00402A23_exit
fn00402A23_exit:


// fn00402A24
// Return size: 0
void fn00402A24()
fn00402A24_entry:
	// succ:  l00402A24
l00402A24:
	esp = fp
	Mem0[ebx - 0x00000036 + ebp:byte] = 0x80
	v8 = Mem0[esi + edi * 0x00000008:word32] >> cl
	Mem0[esi + edi * 0x00000008:word32] = v8
	SCZO = cond(v8)
l00402A24:
	ecx = ecx - edx
	SCZO = cond(ecx)
	bl = bl + 0x3C + C
	SCZO = cond(bl)
	ch = ch - 0x01
	SZO = cond(ch)
	ch = ch + 0xB1 + C
	SCZO = cond(ch)
	edx = edx - ecx
	SCZO = cond(edx)
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	ch = ch + 0xFD + C
	SCZO = cond(ch)
	cl = cl + 0x86
	SCZO = cond(cl)
	branch Test(ULE,CZ) l00402A3A_thunk_fn004027F2
	goto l00402A40
	// succ:  l00402A40 l00402A3A_thunk_fn004027F2
l00402A3A_thunk_fn004027F2:
	call fn004027F2 (retsize: 0;)
	return
	// succ:  fn00402A24_exit
l00402A40:
	dx = edx
	ch = ch
	branch Test(UGT,CZ) l00402A45_thunk_fn004027F2
	goto l00402A4B
	// succ:  l00402A4B l00402A45_thunk_fn004027F2
l00402A45_thunk_fn004027F2:
	call fn004027F2 (retsize: 0;)
	return
	// succ:  fn00402A24_exit
l00402A4B:
fn00402A24_exit:


// fn00402A52
// Return size: 0
void fn00402A52()
fn00402A52_entry:
	goto l00402A52
	// succ:  l00402A52
l00402275:
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	dl = dl | ah
	SZO = cond(dl)
	C = false
	dh = al
	eax = eax ^ 0x95E60F71
	SZO = cond(eax)
	C = false
	dh = dh - ah
	SCZO = cond(dh)
	dl = dl - 0x46 - C
	SCZO = cond(dl)
	dl = dl - 0x20 - C
	SCZO = cond(dl)
	cl = bl
	goto l0040284F
	// succ:  l0040284F
l00402652:
	cl = cl - 0x2F - C
	SCZO = cond(cl)
	edi = edi | esi
	SZO = cond(edi)
	C = false
	dl = dl - cl
	SCZO = cond(dl)
	ch = ch | cl
	SZO = cond(ch)
	C = false
	dh = cl
	edx = ecx
	ecx = ecx ^ edx
	SZO = cond(ecx)
	C = false
	branch Test(ULT,C) l00402275
	// succ:  l00402667 l00402275
l00402667:
	bl = bl
	branch Test(UGE,C) l00402275
	// succ:  l0040266F l00402275
l0040266F:
	C = !C
	eax = eax - 0x00000001
	SZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ds
	al = __inb(0xDA)
	es = Mem0[esp:selector]
	esp = esp + 0x00000002
	// succ:  l00402675_thunk_fn00402676
l00402675_thunk_fn00402676:
	call fn00402676 (retsize: 0;)
	return
	// succ:  fn00402A52_exit
l0040284F:
	edx = edx + 0x00000001
	SZO = cond(edx)
	dl = dl + 0xC7 + C
	SCZO = cond(dl)
	dh = dh + 0xC9 + C
	SCZO = cond(dh)
	edx = edx + 0x00000001
	SZO = cond(edx)
	dl = ah
	dh = dh - 0xE3 - C
	SCZO = cond(dh)
	// succ:  l0040285C_thunk_fn004025E5
l0040285C_thunk_fn004025E5:
	call fn004025E5 (retsize: 0;)
	return
	// succ:  fn00402A52_exit
l00402A52:
	esp = fp
	ah = ah + 0xD6 + C
	SCZO = cond(ah)
	ch = ch + al
	SCZO = cond(ch)
	edx = edx + 0x00000001
	SZO = cond(edx)
	dh = dh + 0xCB
	SCZO = cond(dh)
	dh = dh ^ ch
	SZO = cond(dh)
	C = false
	eax = 0x95E603DD
	edi = edi + edx
	SCZO = cond(edi)
	ch = ch - 0x57 - C
	SCZO = cond(ch)
	branch Test(PE,P) l00402652
	goto l00402A6D
	// succ:  l00402A6D l00402652
l00402A52:
l00402A6D:
	esi = esi
	v15 = dx
	dx = dx
	dx = v15
	branch Test(PO,P) l00402652
	// succ:  l00402A78 l00402652
l00402A78:
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = 0xCA8B0271
	// succ:  l00402A79_thunk_fn00402A7E
l00402A79_thunk_fn00402A7E:
	call fn00402A7E (retsize: 0;)
	return
	// succ:  fn00402A52_exit
fn00402A52_exit:


// fn00402A7C
// Return size: 0
void fn00402A7C()
fn00402A7C_entry:
	// succ:  l00402A7C
l00402A7C:
	esp = fp
	ecx = edx
	goto l00402A7C_thunk_fn00402A7E
	// succ:  l00402A7C_thunk_fn00402A7E
l00402A7C:
l00402A7C_thunk_fn00402A7E:
	call fn00402A7E (retsize: 0;)
	return
	// succ:  fn00402A7C_exit
fn00402A7C_exit:


// fn00402A7E
// Return size: 0
void fn00402A7E()
fn00402A7E_entry:
	// succ:  l00402A7E
l00402A7E:
	esp = fp
	ch = 0xD7
	cl = cl + 0x7D
	SCZO = cond(cl)
	cl = cl ^ bl
	SZO = cond(cl)
	C = false
	cl = cl + 0x01
	SZO = cond(cl)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ch = bh
	ch = ch ^ al
	SZO = cond(ch)
	C = false
	ch = 0x9E
	edi = edi - 0x00000001
	SZO = cond(edi)
	call fn0040216F (retsize: 4;)
	edx = 0x8FADB517
l00402A7E:
	ch = 0xD7
	cl = cl + 0x7D
	SCZO = cond(cl)
	cl = cl ^ bl
	SZO = cond(cl)
	C = false
	cl = cl + 0x01
	SZO = cond(cl)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ch = bh
	ch = ch ^ al
	SZO = cond(ch)
	C = false
	ch = 0x9E
	edi = edi - 0x00000001
	SZO = cond(edi)
	call fn0040216F (retsize: 4;)
	edx = 0x8FADB517
fn00402A7E_exit:


// fn00402A9B
// Return size: 0
void fn00402A9B()
fn00402A9B_entry:
	goto l00402A9B
	// succ:  l00402A9B
l00402866:
	ebx = ebx - edi
	SCZO = cond(ebx)
	bh = ~bh
	bl = bl | ch
	SZO = cond(bl)
	C = false
	eax = ecx
	bl = bl + 0x44 + C
	SCZO = cond(bl)
	bh = bh ^ al
	SZO = cond(bh)
	C = false
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	bh = ~bh
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	call fn00402D7F (retsize: 4;)
	SCZO = cond(Mem0[esp + 0x00000062 + edi * 0x04:byte] - 0x91)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	esp = esp - 0xFFFF85D0
	// succ:  l00402883_thunk_fn00402887
l00402883_thunk_fn00402887:
	call fn00402887 (retsize: 0;)
	return
	// succ:  fn00402A9B_exit
l00402A9B:
	esp = fp
	bl = bl + 0x4D + C
	SCZO = cond(bl)
	bh = bh + 0xEF
	SCZO = cond(bh)
	ebx = esi
	bh = bh + 0x02
	SCZO = cond(bh)
	bl = ch
	bh = bh + 0xC3
	SCZO = cond(bh)
	branch Test(PE,P) l00402866
	goto l00402AB1
	// succ:  l00402AB1 l00402866
l00402A9B:
l00402AB1:
	esi = esi
	branch Test(ULT,C) l00402AB5
	// succ:  l00402AB5
l00402AB5:
	branch Test(PO,P) l00402866
	// succ:  l00402ABB l00402866
l00402ABB:
	__outb(edx, al)
	esi = esi + 0x00000001
	SZO = cond(Mem0[ebx + esi * 0x00000002:word32] & edi)
	C = false
	// succ:  l00402ABD_thunk_fn00402AC0
l00402ABD_thunk_fn00402AC0:
	call fn00402AC0 (retsize: 0;)
	return
	// succ:  fn00402A9B_exit
fn00402A9B_exit:


// fn00402AC0
// Return size: 6
void fn00402AC0()
fn00402AC0_entry:
	// succ:  l00402AC0
l00402AC0:
	esp = fp
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bh = bh ^ cl
	SZO = cond(bh)
	C = false
	bh = bh - 0x01
	SZO = cond(bh)
	bl = ah
	bl = bl - 0x41 - C
	SCZO = cond(bl)
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	branch Test(ULT,C) l00402ACD_thunk_fn00402D47
	goto l00402AD3
	// succ:  l00402AD3 l00402ACD_thunk_fn00402D47
l00402AC0:
l00402ACD_thunk_fn00402D47:
	call fn00402D47 (retsize: 6;)
	return
	// succ:  fn00402AC0_exit
l00402AD3:
	// succ:  l00402AD9
l00402AD9:
	branch Test(UGE,C) l00402AD9_thunk_fn00402D47
	goto l00402ADF
	// succ:  l00402ADF l00402AD9_thunk_fn00402D47
l00402AD9_thunk_fn00402D47:
	call fn00402D47 (retsize: 6;)
	return
	// succ:  fn00402AC0_exit
l00402ADF:
fn00402AC0_exit:


// fn00402AE3
// Return size: 6
void fn00402AE3()
fn00402AE3_entry:
	// succ:  l00402AE3
l00402AE3:
	esp = fp
	edi = edi - 0x00000001
	SZO = cond(edi)
	edi = edi + esi
	SCZO = cond(edi)
	edi = edi + 0x00000001
	SZO = cond(edi)
	edi = edi - edx
	SCZO = cond(edi)
	esi = esi + ecx
	SCZO = cond(esi)
	esi = esi + edi
	SCZO = cond(esi)
	call fn0040292D (retsize: 4;)
	C = __aaa(al, ah, &al, &ah)
	return
	// succ:  fn00402AE3_exit
l00402AE3:
fn00402AE3_exit:


// fn00402AF6
// Return size: 0
void fn00402AF6()
fn00402AF6_entry:
	// succ:  l00402AF6
l00402AF6:
	esp = fp
	Mem0[esp - 0x00000014:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bh = bh + 0x7B + C
	SCZO = cond(bh)
	esi = esi - 0x00000001
	SZO = cond(esi)
	edi = edi + ebx
	SCZO = cond(edi)
	eax = eax ^ 0xFFFFFEC8
	SZO = cond(eax)
	C = false
	bl = bl | cl
	SZO = cond(bl)
	C = false
	call fn004027B5 (retsize: 4;)
	esp = esp + 0xFFFFFFFA
	edx = edx + 0x00000001
	SZO = cond(edx)
	edi = edi + 0x00000001
	SZO = cond(edi)
	esp = esp - 0x00000001
	SZO = cond(esp)
	esi = esi + 0x00000001
	SZO = cond(esi)
	Mem0[fs:eax - 0x00000071 + ecx * 0x0002:word16] = (word16) FPUF << 8
	// succ:  l00402B12_thunk_fn00402B17
l00402B12_thunk_fn00402B17:
	call fn00402B17 (retsize: 0;)
	return
	// succ:  fn00402AF6_exit
fn00402AF6_exit:


// fn00402B16
// Return size: 0
void fn00402B16()
fn00402B16_entry:
	// succ:  l00402B16
l00402B16:
	Mem0[esp - 0x00000020:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00402B16_thunk_fn00402B17
l00402B16_thunk_fn00402B17:
	call fn00402B17 (retsize: 0;)
	return
	// succ:  fn00402B16_exit
fn00402B16_exit:


// fn00402B17
// Return size: 0
void fn00402B17()
fn00402B17_entry:
	// succ:  l00402B17
l00402B17:
	esp = fp
	esp = esp + 0x00000001
	SZO = cond(esp)
	al = al & 0xE0
	SZO = cond(al)
	C = false
	esi = esi + ecx
	SCZO = cond(esi)
	edi = edi - eax
	SCZO = cond(edi)
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	bh = cl
	bh = 0xA0
	ebx = ebx | eax
	SZO = cond(ebx)
	C = false
	bh = bh - 0x01
	SZO = cond(bh)
	bh = bh - dl
	SCZO = cond(bh)
	esi = ebx
	branch Test(LT,SO) l00402B2C_thunk_fn00402417
	goto l00402B2C_thunk_fn00402B32
	// succ:  l00402B2C_thunk_fn00402B32 l00402B2C_thunk_fn00402417
l00402B17:
	esi = esi + ecx
	SCZO = cond(esi)
	edi = edi - eax
	SCZO = cond(edi)
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	bh = cl
	bh = 0xA0
	ebx = ebx | eax
	SZO = cond(ebx)
	C = false
	bh = bh - 0x01
	SZO = cond(bh)
	bh = bh - dl
	SCZO = cond(bh)
	esi = ebx
	branch Test(LT,SO) l00402417
	goto l00402B29_thunk_fn00402B32
	// succ:  l00402B29_thunk_fn00402B32 l00402B29_thunk_fn00402417
l00402B29_thunk_fn00402417:
	call fn00402417 (retsize: 0;)
	return
	// succ:  fn00402B17_exit
l00402B29_thunk_fn00402B32:
	call fn00402B32 (retsize: 0;)
	return
	// succ:  fn00402B17_exit
l00402B2C_thunk_fn00402417:
	call fn00402417 (retsize: 0;)
	return
	// succ:  fn00402B17_exit
l00402B2C_thunk_fn00402B32:
	call fn00402B32 (retsize: 0;)
	return
	// succ:  fn00402B17_exit l00402B2C_thunk_fn00402B32
l00402B2C_thunk_fn00402B32:
	call fn00402B32 (retsize: 0;)
	return
	// succ:  fn00402B17_exit
fn00402B17_exit:


// fn00402B32
// Return size: 0
void fn00402B32()
fn00402B32_entry:
	// succ:  l00402B32
l00402B32:
fn00402B32_exit:


// fn00402B41
// Return size: 0
void fn00402B41()
fn00402B41_entry:
	// succ:  l00402B41
l00402B41:
	esp = fp
	cl = cl - dh
	SCZO = cond(cl)
	dl = dl + 0x01
	SZO = cond(dl)
	eax = eax - ecx
	SCZO = cond(eax)
	dh = ch
	dl = ~dl
	ah = ah + 0x01
	SZO = cond(ah)
	dh = dh - 0x01
	SZO = cond(dh)
	branch Test(ULT,C) l00402B4F_thunk_fn00402A52
	goto l00402B55
	// succ:  l00402B55 l00402B4F_thunk_fn00402A52
l00402B41:
l00402B4F_thunk_fn00402A52:
	call fn00402A52 (retsize: 0;)
	return
	// succ:  fn00402B41_exit
l00402B55:
	ecx = ecx
	branch Test(UGE,C) l00402B57_thunk_fn00402A52
	goto l00402B5D
	// succ:  l00402B5D l00402B57_thunk_fn00402A52
l00402B57_thunk_fn00402A52:
	call fn00402A52 (retsize: 0;)
	return
	// succ:  fn00402B41_exit
l00402B5D:
	ecx = ecx ^ Mem0[eax + 0xC08A6EAB:word32]
	SZO = cond(ecx)
	C = false
	// succ:  l00402B5D_thunk_fn00402B63
l00402B5D_thunk_fn00402B63:
	call fn00402B63 (retsize: 0;)
	return
	// succ:  fn00402B41_exit
fn00402B41_exit:


// fn00402B63
// Return size: 0
void fn00402B63()
fn00402B63_entry:
	// succ:  l00402B63
l00402B63:
	esp = fp
	cl = cl + 0xE2
	SCZO = cond(cl)
	dh = dh + 0xC8 + C
	SCZO = cond(dh)
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	ah = ah - al
	SCZO = cond(ah)
	edx = edx - 0x00000001
	SZO = cond(edx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ch = ch - 0xFC - C
	SCZO = cond(ch)
	ch = 0x54
	goto l00402B74_thunk_fn004026D6
	// succ:  l00402B74_thunk_fn004026D6
l00402B63:
l00402B74_thunk_fn004026D6:
	call fn004026D6 (retsize: 0;)
	return
	// succ:  fn00402B63_exit
fn00402B63_exit:


// fn00402B7D
// Return size: 0
void fn00402B7D()
fn00402B7D_entry:
	// succ:  l00402B7D
l00402B7D:
	esp = fp
	dl = dl + 0xD1
	SCZO = cond(dl)
	ah = ah | dh
	SZO = cond(ah)
	C = false
	cl = cl + 0x71
	SCZO = cond(cl)
	edx = ecx
	eax = eax ^ edi
	SZO = cond(eax)
	C = false
	al = al | bh
	SZO = cond(al)
	C = false
	branch Test(ULE,CZ) l00402B8B_thunk_fn00402B63
	goto l00402B8D
	// succ:  l00402B8D l00402B8B_thunk_fn00402B63
l00402B7D:
l00402B8B_thunk_fn00402B63:
	call fn00402B63 (retsize: 0;)
	return
	// succ:  fn00402B7D_exit
l00402B8D:
	ch = ch
	branch Test(UGT,CZ) l00402B8F_thunk_fn00402B63
	goto l00402B91
	// succ:  l00402B91 l00402B8F_thunk_fn00402B63
l00402B8F_thunk_fn00402B63:
	call fn00402B63 (retsize: 0;)
	return
	// succ:  fn00402B7D_exit
l00402B91:
	eax = eax + Mem0[edi + 0x00000069:word32] + C
	SCZO = cond(eax)
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	SCZO = cond(edx - ecx)
fn00402B7D_exit:


// fn00402BB9
// Return size: 0
void fn00402BB9()
fn00402BB9_entry:
	// succ:  l00402BB9
l00402BB9:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = edi
	edi = v3
	v5 = cl
	cl = cl
	cl = v5
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bl = ah
	bh = bh - cl
	SCZO = cond(bh)
	bh = bh + 0x01
	SZO = cond(bh)
	bh = bh - 0xE6 - C
	SCZO = cond(bh)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	call fn004029ED (retsize: 4;)
	al = Mem0[0x56C6C6BF:byte]
	__outb(0x54, al)
	al = __inb(dx)
	// succ:  l00402BDA_thunk_fn00402BDB
l00402BDA_thunk_fn00402BDB:
	call fn00402BDB (retsize: 0;)
	return
	// succ:  fn00402BB9_exit
fn00402BB9_exit:


// fn00402BDB
// Return size: 0
void fn00402BDB()
fn00402BDB_entry:
	// succ:  l00402BDB
l00402BDB:
	esp = fp
	Mem0[esp - 0x00000028:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	dl = dl - 0x01
	SZO = cond(dl)
	al = al + 0x4F + C
	SCZO = cond(al)
	cl = cl | ch
	SZO = cond(cl)
	C = false
	dl = dl + 0x7C + C
	SCZO = cond(dl)
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	ah = ah - dl
	SCZO = cond(ah)
	dh = dh + cl
	SCZO = cond(dh)
	// succ:  l00402BEF_thunk_fn004028FE
l00402BEF_thunk_fn004028FE:
	call fn004028FE (retsize: 0;)
	return
	// succ:  fn00402BDB_exit
fn00402BDB_exit:


// fn00402C1B
// Return size: 0
void fn00402C1B()
fn00402C1B_entry:
	// succ:  l00402C1B
l00402C1B:
	esp = fp
	Mem0[esp:word32] = esi
	cx = ecx
	esp = esp - 0x00000002
	Mem0[esp:word16] = bx
	bx = Mem0[esp:word16]
	esp = esp + 0x00000002
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	dh = Mem0[esi:byte]
	cl = cl - 0x84 - C
	SCZO = cond(cl)
	ch = ~ch
	ecx = ecx + ebx
	SCZO = cond(ecx)
	// succ:  l00402C2F_thunk_fn00402A0D
l00402C2F_thunk_fn00402A0D:
	call fn00402A0D (retsize: 0;)
	return
	// succ:  fn00402C1B_exit
fn00402C1B_exit:


// fn00402C64
// Return size: 0
void fn00402C64()
fn00402C64_entry:
	goto l00402C64
	// succ:  l00402C64
l00402328:
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	al = al + 0x8A + C
	SCZO = cond(al)
	dh = dh + 0x01
	SZO = cond(dh)
	eax = eax + 0x00000001
	SZO = cond(eax)
	ah = ~ah
	ch = ~ch
	branch Test(ULE,CZ) l00402676
	goto l00402339
	// succ:  l00402339 l00402333_thunk_fn00402676
l00402333_thunk_fn00402676:
	call fn00402676 (retsize: 0;)
	return
	// succ:  fn00402C64_exit
l00402339:
	eax = eax
	branch Test(UGT,CZ) l00402676
	goto l00402341
	// succ:  l00402341 l0040233B_thunk_fn00402676
l0040233B_thunk_fn00402676:
	call fn00402676 (retsize: 0;)
	return
	// succ:  fn00402C64_exit
l00402341:
	__outb(dx, al)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000003
	edx_eax = (int64) eax
	__outw(dx, ax)
	__cli()
	eax = Mem0[0x2BF82A32:word32]
	// succ:  l00402347_thunk_fn0040234C
l00402347_thunk_fn0040234C:
	call fn0040234C (retsize: 0;)
	return
	// succ:  fn00402C64_exit
l00402C64:
	ecx = esi
	al = al - ch
	SCZO = cond(al)
	dh = dh + 0x01
	SZO = cond(dh)
	ch = ch - 0x01
	SZO = cond(ch)
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	ah = ~ah
	ch = ch - 0x01
	SZO = cond(ch)
	ah = ah - 0xBD - C
	SCZO = cond(ah)
	goto l00402328
	// succ:  l00402328
fn00402C64_exit:


// fn00402C8C
// Return size: 0
void fn00402C8C()
fn00402C8C_entry:
	// succ:  l00402C8C
l00402C8C:
	esp = fp
	Mem0[esp - 0x00000028:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = bl | cl
	SZO = cond(bl)
	C = false
	bl = 0x6B
	esi = esi + ebx
	SCZO = cond(esi)
	bl = bl ^ ch
	SZO = cond(bl)
	C = false
	bl = bl + 0x54 + C
	SCZO = cond(bl)
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	bh = bh + bl
	SCZO = cond(bh)
	eax = ~eax
fn00402C8C_exit:


// fn00402CC4
// Return size: 0
void fn00402CC4()
fn00402CC4_entry:
	// succ:  l00402CC4
l00402CC4:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = ebx
	ebx = v3
	// succ:  l00402CCD
l00402CCD:
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx - esi
	SCZO = cond(edx)
	edx = ebx
	bh = bh + 0x01
	SZO = cond(bh)
	ah = ah - cl
	SCZO = cond(ah)
	eax = ebx
	edi = edi ^ esi
	SZO = cond(edi)
	C = false
	call fn00402D63 (retsize: 4;)
	bh = bh + cl + C
	SCZO = cond(bh)
	branch Test(GE,SO) l00402CE1_thunk_fn00402CE7
	goto l00402CE3
	// succ:  l00402CE3 l00402CE1_thunk_fn00402CE7
l00402CE1_thunk_fn00402CE7:
	call fn00402CE7 (retsize: 0;)
	return
	// succ:  fn00402CC4_exit
l00402CE3:
	// succ:  l00402CE3_thunk_fn00402CE4
l00402CE3_thunk_fn00402CE4:
	call fn00402CE4 (retsize: 0;)
	return
	// succ:  fn00402CC4_exit
fn00402CC4_exit:


// fn00402CE4
// Return size: 0
void fn00402CE4()
fn00402CE4_entry:
	// succ:  l00402CE4
l00402CE4:
	esi = esi + 0x00000001
	SZO = cond(esi)
	bl = bl - 0xFC - C
	SCZO = cond(bl)
	// succ:  l00402CE5_thunk_fn00402CE7
l00402CE5_thunk_fn00402CE7:
	call fn00402CE7 (retsize: 0;)
	return
	// succ:  fn00402CE4_exit
fn00402CE4_exit:


// fn00402CE7
// Return size: 0
void fn00402CE7()
fn00402CE7_entry:
	// succ:  l00402CE7
l00402CE7:
	esp = fp
	D = false
	ah = ah + 0x01
	SZO = cond(ah)
	cl = ~cl
	ecx = ecx | esi
	SZO = cond(ecx)
	C = false
	bl = bl + 0x2F
	SCZO = cond(bl)
	ah = ah - cl
	SCZO = cond(ah)
	branch Test(EQ,Z) l00402CF3_thunk_fn004029D0
	goto l00402CF3_thunk_fn00402CF9
	// succ:  l00402CF3_thunk_fn00402CF9 l00402CF3_thunk_fn004029D0
l00402CE7:
	ah = ah + 0x01
	SZO = cond(ah)
	cl = ~cl
	ecx = ecx | esi
	SZO = cond(ecx)
	C = false
	bl = bl + 0x2F
	SCZO = cond(bl)
	ah = ah - cl
	SCZO = cond(ah)
	branch Test(EQ,Z) l00402CF3_thunk_fn004029D0
	// succ:  l00402CF2_thunk_fn00402CF9 l00402CF3_thunk_fn004029D0
l00402CF2_thunk_fn00402CF9:
	call fn00402CF9 (retsize: 0;)
	return
	// succ:  fn00402CE7_exit
l00402CF3_thunk_fn004029D0:
	call fn004029D0 (retsize: 0;)
	return
	// succ:  fn00402CE7_exit
l00402CF3_thunk_fn004029D0:
	call fn004029D0 (retsize: 0;)
	return
	// succ:  fn00402CE7_exit
l00402CF3_thunk_fn00402CF9:
	call fn00402CF9 (retsize: 0;)
	return
	// succ:  fn00402CE7_exit l00402CF3_thunk_fn00402CF9
l00402CF3_thunk_fn00402CF9:
	call fn00402CF9 (retsize: 0;)
	return
	// succ:  fn00402CE7_exit
fn00402CE7_exit:


// fn00402CF9
// Return size: 0
void fn00402CF9()
fn00402CF9_entry:
	// succ:  l00402CF9
l00402CF9:
fn00402CF9_exit:


// fn00402D07
// Return size: 0
void fn00402D07()
fn00402D07_entry:
	// succ:  l00402D07
l00402D07:
	esp = fp
	esp = esp + 0x00000004
	ecx = eax
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ecx = ecx + edi
	SCZO = cond(ecx)
	ch = ch | ah
	SZO = cond(ch)
	C = false
	ecx = ecx | edx
	SZO = cond(ecx)
	C = false
	dh = dh ^ 0x00
	SZO = cond(dh)
	C = false
	edi = edi ^ eax
	SZO = cond(edi)
	C = false
	ch = ch - 0x01
	SZO = cond(ch)
	ch = ~ch
	// succ:  l00402D1D_thunk_fn00402711
l00402D1D_thunk_fn00402711:
	call fn00402711 (retsize: 0;)
	return
	// succ:  fn00402D07_exit
fn00402D07_exit:


// fn00402D47
// Return size: 6
void fn00402D47()
fn00402D47_entry:
	// succ:  l00402D47
l00402D47:
	esp = fp
	ebx = (word32) ah
	edi = edi ^ eax
	SZO = cond(edi)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	esi = esi - eax
	SCZO = cond(esi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	eax = eax >>u 0x00000010
	SCZO = cond(eax)
	goto l00402D58_thunk_fn00402AE3
	// succ:  l00402D58_thunk_fn00402AE3
l00402D47:
l00402D58_thunk_fn00402AE3:
	call fn00402AE3 (retsize: 6;)
	return
	// succ:  fn00402D47_exit
fn00402D47_exit:


// fn00402D63
// Return size: 0
void fn00402D63()
fn00402D63_entry:
	// succ:  l00402D63
l00402D63:
	esp = fp
	Mem0[esp - 0x00000020:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx | esi
	SZO = cond(edx)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	esi = esi + eax
	SCZO = cond(esi)
	bh = bh - 0x01
	SZO = cond(bh)
	dh = dh - bl
	SCZO = cond(dh)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00003000
fn00402D63_exit:


// fn00402D7F
// Return size: 0
void fn00402D7F()
fn00402D7F_entry:
	goto l00402D7F
	// succ:  l00402D7F
l0040290E:
	bh = bh - cl
	SCZO = cond(bh)
	bh = bh - dl
	SCZO = cond(bh)
	esi = esi | eax
	SZO = cond(esi)
	C = false
	bl = bl - 0x01
	SZO = cond(bl)
	ebx = edx
	bh = 0x31
	bl = 0x99
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bh = bh + 0x01
	SZO = cond(bh)
	bl = bl ^ bh
	SZO = cond(bl)
	C = false
	call fn00402E42 (retsize: 4;)
	branch Test(SG,S) l00402927_thunk_fn004028ED
	goto l00402929
	// succ:  l00402929 l00402927_thunk_fn004028ED
l00402927_thunk_fn004028ED:
	call fn004028ED (retsize: 0;)
	return
	// succ:  fn00402D7F_exit
l00402929:
	v20 = Mem0[fs:ebx + 0x0000007F:word32] + ebp + C
	Mem0[fs:ebx + 0x0000007F:word32] = v20
	SCZO = cond(v20)
	// succ:  l00402929_thunk_fn0040292D
l00402929_thunk_fn0040292D:
	call fn0040292D (retsize: 0;)
	return
	// succ:  fn00402D7F_exit
l00402D7F:
	esp = fp
	esp = esp + 0x00000004
	edi = edi + edx
	SCZO = cond(edi)
	bh = bh | al
	SZO = cond(bh)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bh = bh + 0x34 + C
	SCZO = cond(bh)
	edi = edi + ecx
	SCZO = cond(edi)
	edi = edi + 0x00000001
	SZO = cond(edi)
	eax = eax + Mem0[eax + 0x0000003C:word32]
	SCZO = cond(eax)
	goto l0040290E
	// succ:  l0040290E
fn00402D7F_exit:


// fn00402DD0
// Return size: 0
void fn00402DD0()
fn00402DD0_entry:
	// succ:  l00402DD0
l00402DD0:
	esp = fp
	esp = esp + 0x00000004
	bl = bl - 0x01
	SZO = cond(bl)
	bl = ~bl
	ebx = edi
	// succ:  l00402DD8_thunk_fn00402DDA
l00402DD8_thunk_fn00402DDA:
	call fn00402DDA (retsize: 0;)
	return
	// succ:  fn00402DD0_exit
fn00402DD0_exit:


// fn00402DDA
// Return size: 0
void fn00402DDA()
fn00402DDA_entry:
	// succ:  l00402DDA
l00402DDA:
	esp = fp
	bh = bh - 0x82 - C
	SCZO = cond(bh)
	bl = bl + 0x01
	SZO = cond(bl)
	goto l00402DDF_thunk_fn00402F11
	// succ:  l00402DDF_thunk_fn00402F11
l00402DDA:
	bh = bh - 0x82 - C
	SCZO = cond(bh)
	bl = bl + 0x01
	SZO = cond(bl)
	goto l00402DDF_thunk_fn00402F11
	// succ:  l00402DDF_thunk_fn00402F11
l00402DDF_thunk_fn00402F11:
	call fn00402F11 (retsize: 0;)
	return
	// succ:  fn00402DDA_exit
l00402DDF_thunk_fn00402F11:
	call fn00402F11 (retsize: 0;)
	return
	// succ:  fn00402DDA_exit
fn00402DDA_exit:


// fn00402DE9
// Return size: 0
void fn00402DE9()
fn00402DE9_entry:
	// succ:  l00402DE9
l00402DE9:
	esp = fp
	esp = esp + 0x00000004
	ch = ch + dh
	SCZO = cond(ch)
	edi = ecx
	edx = eax
	dl = dl + 0x22 + C
	SCZO = cond(dl)
	edx = edx | esi
	SZO = cond(edx)
	C = false
	dh = dh + 0xDE
	SCZO = cond(dh)
	call fn00402C1B (retsize: 4;)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	branch Test(OV,O) l00402E01_thunk_fn00402DDA
	goto l00402E03
	// succ:  l00402E03 l00402E01_thunk_fn00402DDA
l00402E01_thunk_fn00402DDA:
	call fn00402DDA (retsize: 0;)
	return
	// succ:  fn00402DE9_exit
l00402E03:
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	v17 = eax
	eax = esp
	esp = v17
	C = !C
	ch = 0x75
	// succ:  l00402E06_thunk_fn00402E08
l00402E06_thunk_fn00402E08:
	call fn00402E08 (retsize: 0;)
	return
	// succ:  fn00402DE9_exit
fn00402DE9_exit:


// fn00402E08
// Return size: 0
void fn00402E08()
fn00402E08_entry:
	goto l00402E08
	// succ:  l00402E08
l00402543:
	dh = ~dh
	eax = eax ^ edx
	SZO = cond(eax)
	C = false
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
	eax = eax + 0x00000001
	SZO = cond(eax)
	dh = 0xCF
	ebx = ebx + esi
	SCZO = cond(ebx)
	ah = ah - al
	SCZO = cond(ah)
	// succ:  l0040254E_thunk_fn00402550
l0040254E_thunk_fn00402550:
	call fn00402550 (retsize: 0;)
	return
	// succ:  fn00402E08_exit
l00402E08:
	dl = dl - 0x01
	SZO = cond(dl)
	esi = esi + ecx
	SCZO = cond(esi)
	al = al + 0x4D + C
	SCZO = cond(al)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	ecx = ecx << 0x0000000F
	SCZO = cond(ecx)
	ah = ~ah
	branch Test(PE,P) l00402543
	// succ:  l00402E1C l00402543
l00402E1C:
	v13 = dl
	dl = dl
	dl = v13
	branch Test(PO,P) l00402543
	// succ:  l00402E24 l00402543
l00402E24:
	v14 = (Mem0[eax + 0x20B633BC:byte] & 0x01 << 0x08 - 0x01) != 0x00
	Mem0[eax + 0x20B633BC:byte] = __rol(Mem0[eax + 0x20B633BC:byte], 0x01)
	C = v14
	C = __aaa(al, ah, &al, &ah)
	C = true
	// succ:  l00402E2B_thunk_fn00402E2C
l00402E2B_thunk_fn00402E2C:
	call fn00402E2C (retsize: 0;)
	return
	// succ:  fn00402E08_exit
fn00402E08_exit:


// fn00402E2C
// Return size: 0
void fn00402E2C()
fn00402E2C_entry:
	// succ:  l00402E2C
l00402E2C:
	esp = fp
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = bl + 0x01
	SZO = cond(bl)
	dh = ~dh
	bh = bh | dl
	SZO = cond(bh)
	C = false
	bl = bl ^ al
	SZO = cond(bl)
	C = false
	ebx = ebx - ecx
	SCZO = cond(ebx)
	dh = 0x06
	call fn00402443 (retsize: 4;)
	al = al - 0x7C
	SCZO = cond(al)
	al = al | 0x21
	SZO = cond(al)
	C = false
	goto l00402E40_thunk_fn00402E42
	// succ:  l00402E40_thunk_fn00402E42
l00402E2C:
l00402E40_thunk_fn00402E42:
	call fn00402E42 (retsize: 0;)
	return
	// succ:  fn00402E2C_exit
fn00402E2C_exit:


// fn00402E42
// Return size: 0
void fn00402E42()
fn00402E42_entry:
	// succ:  l00402E42
l00402E42:
	esp = fp
	Mem0[esp - 0x00000018:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh - 0xEE - C
	SCZO = cond(bh)
	edi = edi - 0x00000001
	SZO = cond(edi)
	edx = eax + 0x000000F8
	edi = edi | eax
	SZO = cond(edi)
	C = false
	bl = bl + 0x01
	SZO = cond(bl)
	bl = bl | dl
	SZO = cond(bl)
	C = false
	bl = bl - 0x01
	SZO = cond(bl)
	branch Test(EQ,Z) l00402E58_thunk_fn00402583
	goto l00402E5E
	// succ:  l00402E5E l00402E58_thunk_fn00402583
l00402E58_thunk_fn00402583:
	call fn00402583 (retsize: 0;)
	return
	// succ:  fn00402E42_exit
l00402E5E:
	// succ:  l00402E63
l00402E63:
	dh = dh
	branch Test(NE,Z) l00402E65_thunk_fn00402583
	goto l00402E6B
	// succ:  l00402E6B l00402E65_thunk_fn00402583
l00402E65_thunk_fn00402583:
	call fn00402583 (retsize: 0;)
	return
	// succ:  fn00402E42_exit
l00402E6B:
	edi = Mem0[eax + 0x448F977F:word32] *s 0x00000024
	SCZO = cond(edi)
	// succ:  l00402E6B_thunk_fn00402E72
l00402E6B_thunk_fn00402E72:
	call fn00402E72 (retsize: 6;)
	return
	// succ:  fn00402E42_exit
fn00402E42_exit:


// fn00402E6F
// Return size: 6
void fn00402E6F()
fn00402E6F_entry:
	// succ:  l00402E6F
l00402E6F:
	esp = fp
	Mem0[esp - 0x00000010:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	call fn00402231 (retsize: 4;)
	// succ:  l00402E6F_thunk_fn00402E72 l00402E87_thunk_fn00402E8C
l00402E6F_thunk_fn00402E72:
	call fn00402E72 (retsize: 6;)
	return
	// succ:  fn00402E6F_exit
l00402E87_thunk_fn00402E8C:
	call fn00402E8C (retsize: 6;)
	return
	// succ:  fn00402E6F_exit
fn00402E6F_exit:


// fn00402E72
// Return size: 6
void fn00402E72()
fn00402E72_entry:
	// succ:  l00402E72
l00402E72:
	esp = fp
	__lock()
	esi = esi ^ edi
	SZO = cond(esi)
	C = false
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	dl = dl + 0xA2
	SCZO = cond(dl)
	ch = ch | bh
	SZO = cond(ch)
	C = false
	bh = bh - 0x14 - C
	SCZO = cond(bh)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	call eax (retsize: 4;)
	dh = ch
	cl = cl + 0xF8
	SCZO = cond(cl)
	call fn00402231 (retsize: 4;)
	goto l00402E87_thunk_fn00402E8C
	// succ:  l00402E87_thunk_fn00402E8C
l00402E72:
	esi = esi ^ edi
	SZO = cond(esi)
	C = false
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	dl = dl + 0xA2
	SCZO = cond(dl)
	ch = ch | bh
	SZO = cond(ch)
	C = false
	bh = bh - 0x14 - C
	SCZO = cond(bh)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	call eax (retsize: 4;)
	dh = ch
	cl = cl + 0xF8
	SCZO = cond(cl)
l00402E87_thunk_fn00402E8C:
	call fn00402E8C (retsize: 6;)
	return
	// succ:  fn00402E72_exit
fn00402E72_exit:


// fn00402E88
// Return size: 0
void fn00402E88()
fn00402E88_entry:
	// succ:  l00402E88
l00402E88:
	esp = fp
	v3 = Mem0[esi:word32]
	Mem0[edi:word32] = v3
	esi = esi + 0x00000004
	edi = edi + 0x00000004
l00402E88:
fn00402E88_exit:


// fn00402E8C
// Return size: 6
void fn00402E8C()
fn00402E8C_entry:
	// succ:  l00402E8C
l00402E8C:
	esp = fp
	bl = bl + cl
	SCZO = cond(bl)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	v8 = eax
	eax = eax
	eax = v8
	v11 = Mem0[ebx:word32] - ecx
	Mem0[ebx:word32] = v11
	SCZO = cond(v11)
	goto l00402E91_thunk_fn00402E93
	// succ:  l00402E91_thunk_fn00402E93
l00402E8C:
l00402E91_thunk_fn00402E93:
	call fn00402E93 (retsize: 6;)
	return
	// succ:  fn00402E8C_exit
fn00402E8C_exit:


// fn00402E92
// Return size: 6
void fn00402E92()
fn00402E92_entry:
	// succ:  l00402E92
l00402E92:
	ecx = ecx | ebx
	SZO = cond(ecx)
	C = false
	// succ:  l00402E92_thunk_fn00402E93
l00402E92_thunk_fn00402E93:
	call fn00402E93 (retsize: 6;)
	return
	// succ:  fn00402E92_exit
l00402EAA_thunk_fn004023A9:
	call fn004023A9 (retsize: 0;)
	return
	// succ:  fn00402E92_exit
l00402EB0:
fn00402E92_exit:


// fn00402E93
// Return size: 6
void fn00402E93()
fn00402E93_entry:
	// succ:  l00402E93
l00402E93:
	esp = fp
	return
	// succ:  fn00402E93_exit
l00402E93:
	cl = cl + 0x3F + C
	SCZO = cond(cl)
	dh = dh + 0xAF
	SCZO = cond(dh)
	cl = ch
	cl = dh
	ecx = ecx | edi
	SZO = cond(ecx)
	C = false
	ch = ch - 0x3A - C
	SCZO = cond(ch)
	edi = edi - esi
	SCZO = cond(edi)
	ch = ch + 0x80
	SCZO = cond(ch)
	ch = 0x4D
	branch Test(EQ,Z) l00402EAA_thunk_fn004023A9
fn00402E93_exit:


// fn00402EBF
// Return size: 0
void fn00402EBF()
fn00402EBF_entry:
	// succ:  l00402EBF
l00402EBF:
	esp = fp
	esi = esi + edx
	SCZO = cond(esi)
	ebx = ebx - ecx
	SCZO = cond(ebx)
	edx = edx + 0x00000000
	SCZO = cond(edx)
	ch = ch - 0x01
	SZO = cond(ch)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ecx = ecx | ebx
	SZO = cond(ecx)
	C = false
	call fn00402EFA (retsize: 4;)
	branch Test(PE,P) l00402F4F
	goto l00402ED5
	// succ:  l00402ED5 l00402F4F
l00402EBF:
l00402ED5:
	eax = (int32) ax
	v14 = Mem0[esi:word32]
	Mem0[edi:word32] = v14
	esi = esi + 0x00000004
	edi = edi + 0x00000004
	Mem0[ebp + 0x24648D79:word16] = ss
	// succ:  l00402ED7_thunk_fn00402EDD
l00402ED7_thunk_fn00402EDD:
	call fn00402EDD (retsize: 0;)
	return
	// succ:  fn00402EBF_exit
l00402F4F:
	v19 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v19
	SCZO = cond(v19)
	v20 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v20
	SCZO = cond(v20)
	v21 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v21
	SCZO = cond(v21)
	v22 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v22
	SCZO = cond(v22)
	v23 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v23
	SCZO = cond(v23)
	v24 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v24
	SCZO = cond(v24)
	v25 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v25
	SCZO = cond(v25)
	v26 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v26
	SCZO = cond(v26)
	v27 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v27
	SCZO = cond(v27)
	v28 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v28
	SCZO = cond(v28)
	v29 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v29
	SCZO = cond(v29)
	v30 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v30
	SCZO = cond(v30)
	v31 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v31
	SCZO = cond(v31)
	v32 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v32
	SCZO = cond(v32)
	v33 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v33
	SCZO = cond(v33)
	v34 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v34
	SCZO = cond(v34)
	v35 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v35
	SCZO = cond(v35)
	v36 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v36
	SCZO = cond(v36)
	v37 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v37
	SCZO = cond(v37)
	v38 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v38
	SCZO = cond(v38)
	v39 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v39
	SCZO = cond(v39)
	v40 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v40
	SCZO = cond(v40)
	v41 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v41
	SCZO = cond(v41)
	v42 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v42
	SCZO = cond(v42)
	v43 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v43
	SCZO = cond(v43)
	v44 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v44
	SCZO = cond(v44)
	v45 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v45
	SCZO = cond(v45)
	v46 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v46
	SCZO = cond(v46)
	v47 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v47
	SCZO = cond(v47)
	v48 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v48
	SCZO = cond(v48)
	v49 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v49
	SCZO = cond(v49)
	v50 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v50
	SCZO = cond(v50)
	v51 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v51
	SCZO = cond(v51)
	v52 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v52
	SCZO = cond(v52)
	v53 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v53
	SCZO = cond(v53)
	v54 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v54
	SCZO = cond(v54)
	v55 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v55
	SCZO = cond(v55)
	v56 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v56
	SCZO = cond(v56)
	v57 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v57
	SCZO = cond(v57)
	v58 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v58
	SCZO = cond(v58)
	v59 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v59
	SCZO = cond(v59)
	v60 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v60
	SCZO = cond(v60)
	v61 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v61
	SCZO = cond(v61)
	v62 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v62
	SCZO = cond(v62)
	v63 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v63
	SCZO = cond(v63)
	v64 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v64
	SCZO = cond(v64)
	v65 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v65
	SCZO = cond(v65)
	v66 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v66
	SCZO = cond(v66)
	v67 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v67
	SCZO = cond(v67)
	v68 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v68
	SCZO = cond(v68)
	v69 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v69
	SCZO = cond(v69)
	v70 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v70
	SCZO = cond(v70)
	v71 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v71
	SCZO = cond(v71)
	v72 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v72
	SCZO = cond(v72)
	v73 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v73
	SCZO = cond(v73)
	v74 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v74
	SCZO = cond(v74)
	v75 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v75
	SCZO = cond(v75)
	v76 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v76
	SCZO = cond(v76)
	v77 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v77
	SCZO = cond(v77)
	v78 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v78
	SCZO = cond(v78)
	v79 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v79
	SCZO = cond(v79)
	v80 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v80
	SCZO = cond(v80)
	// succ:  l00402FCB
l00402FCB:
	v81 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v81
	SCZO = cond(v81)
	v82 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v82
	SCZO = cond(v82)
	v83 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v83
	SCZO = cond(v83)
	v84 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v84
	SCZO = cond(v84)
	v85 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v85
	SCZO = cond(v85)
	v86 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v86
	SCZO = cond(v86)
	v87 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v87
	SCZO = cond(v87)
	v88 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v88
	SCZO = cond(v88)
	v89 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v89
	SCZO = cond(v89)
	v90 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v90
	SCZO = cond(v90)
	v91 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v91
	SCZO = cond(v91)
	v92 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v92
	SCZO = cond(v92)
	v93 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v93
	SCZO = cond(v93)
	v94 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v94
	SCZO = cond(v94)
	v95 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v95
	SCZO = cond(v95)
	// succ:  l00402FE9
l00402FE9:
	v96 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v96
	SCZO = cond(v96)
	v97 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v97
	SCZO = cond(v97)
	v98 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v98
	SCZO = cond(v98)
	v99 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v99
	SCZO = cond(v99)
	v100 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v100
	SCZO = cond(v100)
	v101 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v101
	SCZO = cond(v101)
	v102 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v102
	SCZO = cond(v102)
	v103 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v103
	SCZO = cond(v103)
	v104 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v104
	SCZO = cond(v104)
	v105 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v105
	SCZO = cond(v105)
	v106 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v106
	SCZO = cond(v106)
	v108 = Mem0[esi - 0x00000072:byte] + dl
	Mem0[esi - 0x00000072:byte] = v108
	SCZO = cond(v108)
	Mem0[edi:byte] = __in(edx)
	edi = edi + 0x00000001
	SZO = cond(eax & 0x810000B1)
	C = false
	// succ:  l00403004
l00403004:
	branch Test(SG,S) l00402FCB
	// succ:  l0040300A l00402FCB
l0040300A:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	v110 = Mem0[eax:byte] & al
	Mem0[eax:byte] = v110
	SZO = cond(Mem0[eax:byte])
	C = false
	eax = eax - Mem0[ebx + 0x4B7A7D00:word32] - C
	SCZO = cond(eax)
	al = al & 0xAE
	SZO = cond(al)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[edi:word32]
	int3()
	ebx = ebx ^ esp
	SZO = cond(ebx)
	C = false
	bh = bh & bh
	SZO = cond(bh)
	C = false
	SZO = cond(edi & ebp)
	C = false
	v113 = Mem0[ebx + 0xFF28B03A:byte] + dh
	Mem0[ebx + 0xFF28B03A:byte] = v113
	SCZO = cond(v113)
	v114 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v114
	SCZO = cond(v114)
	branch ecx == 0x00000000 l00402FE9
	// succ:  l00403028 l00402FE9
l00403028:
	ebp = ebp + 0x00000001
	SZO = cond(ebp)
	branch Test(NE,Z) l00403004
	// succ:  l0040302B l00403004
l0040302B:
	SZO = cond(esi & esp)
	C = false
	eax = __indw(0x54)
	v116 = eax
	eax = ecx
	ecx = v116
	ch = 0x00
	branch Test(NS,S) l00403035
	// succ:  l00403032_1 l00403035
l00403032_1:
	eax = Mem0[eax:word32]
	// succ:  l00403035
l00403035:
	v117 = Mem0[ebx:byte] + bh
	Mem0[ebx:byte] = v117
	SCZO = cond(v117)
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	cl = cl + bl
	SCZO = cond(cl)
fn00402EBF_exit:


// fn00402EDA
// Return size: 0
void fn00402EDA()
fn00402EDA_entry:
	// succ:  l00402EDA
l00402EDA:
	esp = fp
	esp = esp + 0x00000004
	// succ:  l00402EDA_thunk_fn00402EDD
l00402EDA_thunk_fn00402EDD:
	call fn00402EDD (retsize: 0;)
	return
	// succ:  fn00402EDA_exit
fn00402EDA_exit:


// fn00402EDD
// Return size: 0
void fn00402EDD()
fn00402EDD_entry:
	// succ:  l00402EDD
l00402EDD:
	esp = fp
	al = al + 0xF6
	SCZO = cond(al)
	rLoc1 = Mem0[ebx:real64]
	__cli()
	ecx = ebx
	dl = dh
	ch = ch ^ dh
	SZO = cond(ch)
	C = false
	edi = edi - edx
	SCZO = cond(edi)
	ecx = ecx ^ eax
	SZO = cond(ecx)
	C = false
	cl = cl - 0x43 - C
	SCZO = cond(cl)
	cl = cl ^ al
	SZO = cond(cl)
	C = false
	call fn004024AD (retsize: 4; FPU: 1;)
	dh = 0xC2
	branch Test(SG,S) l00402EF9_thunk_fn00402E88
	goto l00402EF9_thunk_fn00402EFB
	// succ:  l00402EF9_thunk_fn00402EFB l00402EF9_thunk_fn00402E88
l00402EDD:
	ch = -ch
	SCZO = cond(ch)
	C = ch == 0x00
	edi = edi + edx
	SCZO = cond(edi)
	ecx = ebx
	dl = dh
	ch = ch ^ dh
	SZO = cond(ch)
	C = false
	edi = edi - edx
	SCZO = cond(edi)
	ecx = ecx ^ eax
	SZO = cond(ecx)
	C = false
	cl = cl - 0x43 - C
	SCZO = cond(cl)
	cl = cl ^ al
	SZO = cond(cl)
	C = false
	call fn004024AD (retsize: 4;)
	dh = 0xC2
	branch Test(SG,S) l00402EF9_thunk_fn00402E88
	// succ:  l00402EF8_thunk_fn00402EFB l00402EF9_thunk_fn00402E88
l00402EF8_thunk_fn00402EFB:
	call fn00402EFB (retsize: 0;)
	return
	// succ:  fn00402EDD_exit
l00402EF9_thunk_fn00402E88:
	call fn00402E88 (retsize: 0;)
	return
	// succ:  fn00402EDD_exit
l00402EF9_thunk_fn00402E88:
	call fn00402E88 (retsize: 0;)
	return
	// succ:  fn00402EDD_exit
l00402EF9_thunk_fn00402EFB:
	call fn00402EFB (retsize: 0;)
	return
	// succ:  fn00402EDD_exit l00402EF9_thunk_fn00402EFB
l00402EF9_thunk_fn00402EFB:
	call fn00402EFB (retsize: 0;)
	return
	// succ:  fn00402EDD_exit
fn00402EDD_exit:


// fn00402EFA
// Return size: 0
void fn00402EFA()
fn00402EFA_entry:
	// succ:  l00402EFA
l00402EFA:
	esp = fp
	esp = esp + 0x00000004
	// succ:  l00402EFA_thunk_fn00402EFE
l00402EFA_thunk_fn00402EFE:
	call fn00402EFE (retsize: 0;)
	return
	// succ:  fn00402EFA_exit
fn00402EFA_exit:


// fn00402EFB
// Return size: 0
void fn00402EFB()
fn00402EFB_entry:
	// succ:  l00402EFB
l00402EFB:
	al = al & 0x04
	SZO = cond(al)
	C = false
	call fn00402833 (retsize: 4;)
	// succ:  l00402EFB_thunk_fn00402EFE l00402F08_thunk_fn00402F0D
l00402EFB_thunk_fn00402EFE:
	call fn00402EFE (retsize: 0;)
	return
	// succ:  fn00402EFB_exit
l00402F08_thunk_fn00402F0D:
	call fn00402F0D (retsize: 0;)
	return
	// succ:  fn00402EFB_exit
fn00402EFB_exit:


// fn00402EFE
// Return size: 0
void fn00402EFE()
fn00402EFE_entry:
	// succ:  l00402EFE
l00402EFE:
	esp = fp
	bl = bl - 0x01
	SZO = cond(bl)
	cl = 0xE4
	edi = edi - 0x00000001
	SZO = cond(edi)
	bh = bh - cl
	SCZO = cond(bh)
	bl = bl + 0x65
	SCZO = cond(bl)
	call fn00402833 (retsize: 4;)
	goto l00402F08_thunk_fn00402F0D
	// succ:  l00402F08_thunk_fn00402F0D
l00402EFE:
	bl = bl - 0x01
	SZO = cond(bl)
	cl = 0xE4
	edi = edi - 0x00000001
	SZO = cond(edi)
	bh = bh - cl
	SCZO = cond(bh)
	bl = bl + 0x65
	SCZO = cond(bl)
l00402F08_thunk_fn00402F0D:
	call fn00402F0D (retsize: 0;)
	return
	// succ:  fn00402EFE_exit
fn00402EFE_exit:


// fn00402F0D
// Return size: 0
void fn00402F0D()
fn00402F0D_entry:
	// succ:  l00402F0D
l00402F0D:
	esp = fp
	cl = 0x6E
l00402F0D:
	cl = 0x6E
fn00402F0D_exit:


// fn00402F11
// Return size: 0
void fn00402F11()
fn00402F11_entry:
	// succ:  l00402F11
l00402F11:
	esp = fp
	bl = bl ^ dl
	SZO = cond(bl)
	C = false
	bl = dh
	edi = edx
	eax = eax + ecx
	SCZO = cond(eax)
	edi = edi - 0x00000001
	SZO = cond(edi)
	bl = bl + 0xE7 + C
	SCZO = cond(bl)
	goto l00402F1D_thunk_fn004025A3
	// succ:  l00402F1D_thunk_fn004025A3
l00402F11:
l00402F1D_thunk_fn004025A3:
	call fn004025A3 (retsize: 0;)
	return
	// succ:  fn00402F11_exit
fn00402F11_exit:


