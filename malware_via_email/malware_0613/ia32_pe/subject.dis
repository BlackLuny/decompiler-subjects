// fn00401212
// Return size: 0
void fn00401212()
fn00401212_entry:
	goto l00401212
	// succ:  l00401212
l00401045:
	ecx = edx
	ebx = ebx - edi
	SCZO = cond(ebx)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ebx = ebx ^ ecx
	SZO = cond(ebx)
	C = false
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ecx = ecx + edi
	SCZO = cond(ecx)
	ebx = esi
	ecx = ecx - eax
	SCZO = cond(ecx)
	edx = edx - eax
	SCZO = cond(edx)
	branch Test(LE,SZO) l00401231
	// succ:  l0040105B l00401231
l0040105B:
	si = si
	edi = edi
	branch Test(GT,SZO) l00401231
	// succ:  l00401066 l00401231
l00401066:
	rArg0 = rArg0 + Mem0[ecx:real32]
	Z = __arpl(dx, bx, &dx)
	v29 = Mem0[ecx + 0x0AD18AC6:word32] | ecx
	Mem0[ecx + 0x0AD18AC6:word32] = v29
	SZO = cond(Mem0[ecx + 0x0AD18AC6:word32])
	C = false
l0040119E:
	ecx = ecx | esi
	SZO = cond(ecx)
	C = false
	edx = edx - edi
	SCZO = cond(edx)
l004011FA:
	ebx = ebx - esi
	SCZO = cond(ebx)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edx = edx | edi
	SZO = cond(edx)
	C = false
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	edx = edx | ebx
	SZO = cond(edx)
	C = false
	esi = esi - edi
	SCZO = cond(esi)
	branch Test(EQ,Z) l0040119E
	// succ:  l00401206 l0040119E
l00401206:
	// succ:  l0040120B
l0040120B:
l00401212:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	ecx = ebx
	edx = edx | edi
	SZO = cond(edx)
	C = false
	edi = eax
	edx = edx | ebx
	SZO = cond(edx)
	C = false
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	edx = edx + 0x00000001
	SZO = cond(edx)
	branch Test(OV,O) l00401045
	// succ:  l00401225 l00401045
l00401225:
	branch Test(ULT,C) l00401227
	// succ:  l00401227
l00401227:
	branch Test(NO,O) l00401045
	// succ:  l0040122D l00401045
l0040122D:
	D = true
	branch Test(NS,S) l0040129B
	// succ:  l00401231 l0040129B
l00401231:
	ecx = ecx ^ esi
	SZO = cond(ecx)
	C = false
	ebx = ebx - esi
	SCZO = cond(ebx)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	edi = edi + eax
	SCZO = cond(edi)
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	edx = edx + edi
	SCZO = cond(edx)
	edx = edx + 0x00000001
	SZO = cond(edx)
	branch Test(ULT,C) l00401264
	// succ:  l0040123F l00401264
l0040123F:
	di = edi
	v17 = ch
	ch = ch
	ch = v17
	branch Test(UGE,C) l00401264
	// succ:  l00401246 l00401264
l00401246:
	v19 = Mem0[ecx + 0xFFE646E6:word32] + ebp
	Mem0[ecx + 0xFFE646E6:word32] = v19
	SCZO = cond(v19)
	branch Test(PE,P) l0040128F
	// succ:  l0040124E l0040128F
l0040124E:
	edx = edx + 0x00000001
	SZO = cond(edx)
	ecx = ecx + edi
	SCZO = cond(ecx)
	esi = esi ^ edi
	SZO = cond(esi)
	C = false
	edx = edx - 0x00000001
	SZO = cond(edx)
	branch Test(ULT,C) l004011FA
	// succ:  l00401257 l004011FA
l00401257:
	v21 = bh
	bh = bh
	bh = v21
	v23 = si
	si = si
	si = v23
	branch Test(UGE,C) l004011FA
	// succ:  l0040125E l004011FA
l0040125E:
	eax = eax - 0x7FDA223E
	SCZO = cond(eax)
	__outdw(edx, eax)
	esi = esi - 0x00000004
	// succ:  l00401264
l00401264:
l0040128F:
	ax = Mem0[eax:byte] *s al
	SCZO = cond(ax)
	SCZDOP = Mem0[esp:word32]
	esp = esp + 0x00000004
	__outb(edx, al)
	esi = esi + 0x00000001
	ebp = ebp + 0x00000001
	SZO = cond(ebp)
	C = false
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = dh
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	// succ:  l0040129B
l0040129B:
fn00401212_exit:


