Unknown library function GetCurrentThreadId
Unknown library function GetModuleHandleA
Unknown library function GetOEMCP
COMPUTED JUMP at 0x4010dc, pDest = r24
assgn    9 *32* %pc := m[0x411024]
is readonly
assgn   15 *32* %pc := m[0x411104]
is readonly
assgn   20 *32* %pc := m[0x411034]
is readonly
assgn   27 *32* %pc := m[0x411024]
is readonly
assgn   33 *32* %pc := m[0x4110b0]
is readonly
assgn   37 *32* %pc := m[0x411114]
is readonly
assgn   44 *32* %pc := m[0x411018]
is readonly
assgn   50 *32* %pc := m[0x411018]
is readonly
assgn   56 *32* %pc := m[0x411024]
is readonly
after removing matching assigns (t[WILDSTR]).
after removing matching assigns (%pc).
in proc _start adding addrExp r28{0} - 4 to local table
in proc _start adding addrExp r28{0} - 40 to local table
in proc _start adding addrExp r28{0} - 40 to local table
in proc _start adding addrExp r28{0} - 44 to local table
in proc _start adding addrExp r28{0} - 12 to local table
in proc _start adding addrExp r28{0} - 44 to local table
in proc _start adding addrExp r28{0} - 8 to local table
in proc _start adding addrExp r28{0} - 44 to local table
in proc _start adding addrExp r28{0} - 48 to local table
in proc _start adding addrExp r28{0} - 48 to local table
TYPE DIFFERENCE (could be OK): At address 0xffffffd0 existing type unsigned int but added type HANDLE
in proc _start adding addrExp r28{0} - 52 to local table
in proc _start adding addrExp r28{0} - 52 to local table
in proc _start adding addrExp r28{0} - 28 to local table
in proc _start adding addrExp r28{0} - 44 to local table
in proc _start adding addrExp r28{0} - 48 to local table
in proc _start adding addrExp r28{0} - 48 to local table
in proc _start adding addrExp r28{0} - 52 to local table
in proc _start adding addrExp r28{0} - 52 to local table
in proc _start adding addrExp r28{0} - 56 to local table
in proc _start adding addrExp r28{0} - 56 to local table
finding final parameters for _start
potential param r28
found new parameter r28
local eax has type HANDLE that doesn't agree with type of define __size32 of a library, why?
local esp has type __size32 that doesn't agree with type of define void of a library, why?
dest is not lib
call:   10 {*32* eax, *v* ecx, *v* edx, *v* esp} := CALL GetCurrentThreadId(
              )
              Reaching definitions: r28=r28{0} - 40,   r29=r28{0} - 4,   m[r28{0} - 4]=r29{0},   m[r28{0} - 40]=%pc,
                tmp1=r28{0} - 4,   %flags=ADDFLAGS32( r28{0} - 4, -32, r28{0} - 36 ),
                %ZF=ADDFLAGS32( r28{0} - 4, -32, r28{0} - 36 ),   %CF=ADDFLAGS32( r28{0} - 4, -32, r28{0} - 36 )
              Live variables:  in proc _start
dest is not lib
call:   16 {*HANDLE* eax_1, *v* ecx, *v* edx, *v* esp} := CALL GetModuleHandleA(
              )
              Reaching definitions: r24=r24{10},   r25=r25{10},   r26=r26{10},   r28=r28{0} - 44,   r29=r28{0} - 4,
                m[r28{0} - 4]=r29{0},   m[r28{0} - 40]=0x42f16c,   m[r28{0} - 44]=%pc,   tmp1=r28{0} - 4,
                %flags=ADDFLAGS32( r28{0} - 4, -32, r28{0} - 36 ),   %ZF=ADDFLAGS32( r28{0} - 4, -32, r28{0} - 36 ),
                %CF=ADDFLAGS32( r28{0} - 4, -32, r28{0} - 36 )
              Live variables: eax_1 in proc _start
result:    0 *HANDLE* eax_1 := -
dest is not lib
call:   21 {*32* eax, *v* ecx, *v* edx, *v* esp} := CALL GetCommandLineA(
              )
              Reaching definitions: r24=r24{16},   r25=r25{16},   r26=r26{16},   r28=r28{0} - 44,   r29=r28{0} - 4,
                m[r28{0} - 4]=r29{0},   m[r28{0} - 12]=r24{16},   m[r28{0} - 40]=0x42f16c,   m[r28{0} - 44]=%pc,
                tmp1=r28{0} - 4,   %flags=ADDFLAGS32( r28{0} - 4, -32, r28{0} - 36 ),
                %ZF=ADDFLAGS32( r28{0} - 4, -32, r28{0} - 36 ),   %CF=ADDFLAGS32( r28{0} - 4, -32, r28{0} - 36 )
              Live variables:  in proc _start
dest is not lib
call:   28 {*32* eax, *v* ecx, *v* edx, *v* esp} := CALL GetCurrentThreadId(
              )
              Reaching definitions: r24=r24{21},   r25=r25{21},   r26=r26{21},   r28=r28{0} - 48,   r29=r28{0} - 4,
                m[r28{0} - 4]=r29{0},   m[r28{0} - 8]=r24{21},   m[r28{0} - 12]=r24{16},   m[r28{0} - 40]=0x42f16c,
                m[r28{0} - 44]=0x42f176,   m[r28{0} - 48]=%pc,   tmp1=r28{0} - 4,
                %flags=ADDFLAGS32( r28{0} - 4, -32, r28{0} - 36 ),   %ZF=ADDFLAGS32( r28{0} - 4, -32, r28{0} - 36 ),
                %CF=ADDFLAGS32( r28{0} - 4, -32, r28{0} - 36 )
              Live variables:  in proc _start
dest is not lib
call:   34 {*32* eax, *v* ecx, *v* edx, *v* esp} := CALL GetCommandLineW(
              )
              Reaching definitions: r24=r24{28},   r25=r25{28},   r26=r26{28},   r28=r28{0} - 52,   r29=r28{0} - 4,
                m[r28{0} - 4]=r29{0},   m[r28{0} - 8]=r24{21},   m[r28{0} - 12]=r24{16},   m[r28{0} - 40]=0x42f16c,
                m[r28{0} - 44]=0x42f176,   m[r28{0} - 48]=r24{16},   m[r28{0} - 52]=%pc,   tmp1=r28{0} - 4,
                %flags=ADDFLAGS32( r28{0} - 4, -32, r28{0} - 36 ),   %ZF=ADDFLAGS32( r28{0} - 4, -32, r28{0} - 36 ),
                %CF=ADDFLAGS32( r28{0} - 4, -32, r28{0} - 36 )
              Live variables:  in proc _start
dest is not lib
call:   38 {*32* eax, *v* ecx, *v* edx, *v* esp} := CALL GetProcAddress(
                *HANDLE* local0 := eax_1
                *c** local1 := "ZwOpenJobObject"
              )
              Reaching definitions: r24=r24{34},   r25=r25{34},   r26=r26{34},   r28=r28{0} - 52,   r29=r28{0} - 4,
                m[r28{0} - 4]=r29{0},   m[r28{0} - 8]=r24{21},   m[r28{0} - 12]=r24{16},   m[r28{0} - 40]=0x42f16c,
                m[r28{0} - 44]=0x42f176,   m[r28{0} - 48]=r24{16},   m[r28{0} - 52]=%pc,   tmp1=r28{0} - 4,
                %flags=ADDFLAGS32( r28{0} - 4, -32, r28{0} - 36 ),   %ZF=ADDFLAGS32( r28{0} - 4, -32, r28{0} - 36 ),
                %CF=ADDFLAGS32( r28{0} - 4, -32, r28{0} - 36 )
              Live variables: eax in proc _start
result:    0 *32* eax := -
dest is not lib
call:   45 {*32* eax, *v* ecx, *v* edx, *v* esp} := CALL GetOEMCP(
              )
              Reaching definitions: r24=r24{38},   r25=r25{38},   r26=r26{38},   r28=r28{0} - 48,   r29=r28{0} - 4,
                m[r28{0} - 4]=r29{0},   m[r28{0} - 8]=r24{21},   m[r28{0} - 12]=r24{16},   m[r28{0} - 28]=r24{38},
                m[r28{0} - 40]=0x42f16c,   m[r28{0} - 44]=0,   m[r28{0} - 48]=%pc,   m[r28{0} - 52]=%pc,
                tmp1=r28{0} - 4,   %flags=ADDFLAGS32( r28{0} - 4, -32, r28{0} - 36 ),
                %ZF=ADDFLAGS32( r28{0} - 4, -32, r28{0} - 36 ),   %CF=ADDFLAGS32( r28{0} - 4, -32, r28{0} - 36 )
              Live variables:  in proc _start
dest is not lib
call:   51 {*32* eax, *v* ecx, *v* edx, *v* esp} := CALL GetOEMCP(
              )
              Reaching definitions: r24=r24{45},   r25=r25{45},   r26=r26{45},   r28=r28{0} - 52,   r29=r28{0} - 4,
                m[r28{0} - 4]=r29{0},   m[r28{0} - 8]=r24{21},   m[r28{0} - 12]=r24{16},   m[r28{0} - 28]=r24{38},
                m[r28{0} - 40]=0x42f16c,   m[r28{0} - 44]=0,   m[r28{0} - 48]=0,   m[r28{0} - 52]=%pc,
                tmp1=r28{0} - 4,   %flags=ADDFLAGS32( r28{0} - 4, -32, r28{0} - 36 ),
                %ZF=ADDFLAGS32( r28{0} - 4, -32, r28{0} - 36 ),   %CF=ADDFLAGS32( r28{0} - 4, -32, r28{0} - 36 )
              Live variables:  in proc _start
dest is not lib
call:   57 {*32* eax, *v* ecx, *v* edx, *v* esp} := CALL GetCurrentThreadId(
              )
              Reaching definitions: r24=r24{51},   r25=r25{51},   r26=r26{51},   r28=r28{0} - 56,   r29=r28{0} - 4,
                m[r28{0} - 4]=r29{0},   m[r28{0} - 8]=r24{21},   m[r28{0} - 12]=r24{16},   m[r28{0} - 28]=r24{38},
                m[r28{0} - 40]=0x42f16c,   m[r28{0} - 44]=0,   m[r28{0} - 48]=0,   m[r28{0} - 52]=0,
                m[r28{0} - 56]=%pc,   tmp1=r28{0} - 4,   %flags=ADDFLAGS32( r28{0} - 4, -32, r28{0} - 36 ),
                %ZF=ADDFLAGS32( r28{0} - 4, -32, r28{0} - 36 ),   %CF=ADDFLAGS32( r28{0} - 4, -32, r28{0} - 36 )
              Live variables: eax,  ecx,  edx in proc _start
result:    0 *32* eax := -
result:    0 *v* ecx := -
result:    0 *v* edx := -
