Using options:
00406468: error: Rewriting x86 opcode 'illegal' is not supported yet.
004065A0: error: INT services are not supported by Win32Platform
00406A39: error: Rewriting x86 opcode 'illegal' is not supported yet.
004065A0: error: INT services are not supported by Win32Platform
004069CE: error: Rewriting x86 opcode 'illegal' is not supported yet.
004069FA: error: 'or' is not an x86 string instruction.
004066A9: error: Rewriting x86 opcode 'aas' is not supported yet.
004066AF: error: INT services are not supported by Win32Platform
004066E3: error: Rewriting x86 opcode 'illegal' is not supported yet.
004066A9: error: Rewriting x86 opcode 'aas' is not supported yet.
0040626C: error: Rewriting x86 opcode 'illegal' is not supported yet.
0040626C: error: Rewriting x86 opcode 'illegal' is not supported yet.
004069D0: error: Rewriting x86 opcode 'illegal' is not supported yet.
004069D0: error: Rewriting x86 opcode 'illegal' is not supported yet.
004065EA: error: Rewriting x86 opcode 'illegal' is not supported yet.
004065EA: error: Rewriting x86 opcode 'illegal' is not supported yet.
00406183: error: Rewriting x86 opcode 'illegal' is not supported yet.
004061F3: error: Only word sizes 1, 2, 4, 8, and 16 bytes are supported.
malware_via_email/malware_1046/ia32_pe/subject.exe: error: An internal error occurred while decompiling.
    Only word sizes 1, 2, 4, 8, and 16 bytes are supported.
       at Decompiler.Core.Types.PrimitiveType.CreateWord(Int32 byteSize)
   at Decompiler.Arch.X86.OperandRewriter.EffectiveAddressExpression(MemoryOperand mem, X86State state)
   at Decompiler.Arch.X86.OperandRewriter.CreateMemoryAccess(Address addrInstruction, MemoryOperand mem, DataType dt, X86State state)
   at Decompiler.Arch.X86.OperandRewriter.Transform(Address addrInstruction, MachineOperand op, PrimitiveType opWidth, X86State state)
   at Decompiler.Arch.X86.X86Rewriter.RewriteFst(Boolean pop)
   at Decompiler.Arch.X86.X86Rewriter.<GetEnumerator>d__1.MoveNext()
   at Decompiler.Scanning.BlockWorkitem.ProcessInternal()
   at Decompiler.Scanning.BlockWorkitem.Process()
   at Decompiler.Scanning.Scanner.ProcessQueue()
   at Decompiler.Scanning.Scanner.ScanProcedure(Address addr, String procedureName, ProcessorState state)
   at Decompiler.Scanning.EntryPointWorkitem.Process()
   at Decompiler.Scanning.Scanner.ProcessQueue()
   at Decompiler.Scanning.Scanner.ScanImage()
   at Decompiler.DecompilerDriver.ScanPrograms()
   at Decompiler.DecompilerDriver.Decompile(String filename)
