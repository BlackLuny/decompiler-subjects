// fn00401007
// Return size: 0
void fn00401007()
fn00401007_entry:
	// succ:  l00401007
l00401007:
	edx = esi
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	dl = 0x3D
	esi = esi - 0x00000001
	SZO = cond(esi)
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	bl = bl | ah
	SZO = cond(bl)
	C = false
	edi = edi | esi
	SZO = cond(edi)
	C = false
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	// succ:  l0040113C
l0040113C:
	dh = dh + dl
	SCZO = cond(dh)
	ebx = ebx ^ edi
	SZO = cond(ebx)
	C = false
	edi = edi + edx
	SCZO = cond(edi)
	esi = esi + 0x00000001
	SZO = cond(esi)
	edi = edi | ecx
	SZO = cond(edi)
	C = false
	dh = 0x25
	call fn0040103A (retsize: 4;)
	esi = esi + Mem0[esp + ecx * 0x00000008:word32] + C
	SCZO = cond(esi)
	ax = __aam(al)
	eax = eax + 0x00000001
	SZO = cond(eax)
	v19 = Mem0[ebx + 0x0000002B:byte] & al
	Mem0[ebx + 0x0000002B:byte] = v19
	SZO = cond(Mem0[ebx + 0x0000002B:byte])
	C = false
	// succ:  l00401152_thunk_fn00401155
l00401152_thunk_fn00401155:
	call fn00401155 (retsize: 0;)
	return
	// succ:  fn00401007_exit
fn00401007_exit:


// fn00401022
// Return size: 0
void fn00401022()
fn00401022_entry:
	// succ:  l00401022
l00401022:
	edi = edi + 0x00000001
	SZO = cond(edi)
	edx = edx + eax
	SCZO = cond(edx)
	edx = ecx
	edi = edi + 0x00000001
	SZO = cond(edi)
	edi = edi | edx
	SZO = cond(edi)
	C = false
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
	edx = edx + ebx
	SCZO = cond(edx)
	edx = edx + 0x00000001
	SZO = cond(edx)
	call fn004010BE (retsize: 4;)
	dh = dh - al - C
	SCZO = cond(dh)
	v18 = Mem0[esi:word32] >> 0x0000005E
	Mem0[esi:word32] = v18
	SCZO = cond(v18)
	cl = 0x87
	// succ:  l00401039_thunk_fn0040103B
l00401039_thunk_fn0040103B:
	call fn0040103B (retsize: 0;)
	return
	// succ:  fn00401022_exit
fn00401022_exit:


// fn0040103A
// Return size: 0
void fn0040103A()
fn0040103A_entry:
	// succ:  l0040103A
l0040103A:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = edi
	edi = v3
	// succ:  l0040103A_thunk_fn0040103B
l0040103A_thunk_fn0040103B:
	call fn0040103B (retsize: 0;)
	return
	// succ:  fn0040103A_exit
fn0040103A_exit:


// fn0040103B
// Return size: 0
void fn0040103B()
fn0040103B_entry:
	// succ:  l0040103B
l0040103B:
	esp = fp
	SCZO = cond(al - 0x24)
	dx = dx
	v6 = edi
	edi = edi
	edi = v6
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	ebx = ebx + esi
	SCZO = cond(ebx)
	bl = bh
	bl = 0xB0
	call fn004010DC (retsize: 4;)
	__outdw(edx, eax)
	esi = esi + 0x00000004
	SZO = cond(Mem0[ecx - 0x00000035:byte] & ah)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	Mem0[gs:esp - 0x00000014:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	goto l00401055_thunk_fn0040105A
	// succ:  l00401055_thunk_fn0040105A
l0040103B:
	dx = dx
	v19 = edi
	edi = edi
	edi = v19
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	ebx = ebx + esi
	SCZO = cond(ebx)
	bl = bh
	bl = 0xB0
	call fn004010DC (retsize: 4;)
	__outdw(edx, eax)
	esi = esi + 0x00000004
	SZO = cond(Mem0[ecx - 0x00000035:byte] & ah)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	Mem0[gs:esp - 0x00000014:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	goto l00401055_thunk_fn0040105A
	// succ:  l00401055_thunk_fn0040105A
l00401055_thunk_fn0040105A:
	call fn0040105A (retsize: 0;)
	return
	// succ:  fn0040103B_exit
l00401055_thunk_fn0040105A:
	call fn0040105A (retsize: 0;)
	return
	// succ:  fn0040103B_exit
fn0040103B_exit:


// fn00401056
// Return size: 0
void fn00401056()
fn00401056_entry:
	// succ:  l00401056
l00401056:
	esp = fp
	Mem0[esp - 0x00000014:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00401056_thunk_fn0040105A
l00401056_thunk_fn0040105A:
	call fn0040105A (retsize: 0;)
	return
	// succ:  fn00401056_exit
fn00401056_exit:


// fn0040105A
// Return size: 0
void fn0040105A()
fn0040105A_entry:
	// succ:  l0040105A
l0040105A:
	esp = fp
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	edx = edx - edi
	SCZO = cond(edx)
	eax = ebx
	ecx = ecx - ebx
	SCZO = cond(ecx)
	edi = edi - 0x00000001
	SZO = cond(edi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	ecx = edx
	branch Test(ULE,CZ) l00401068_thunk_fn004010F6
	goto l00401068_thunk_fn0040106E
	// succ:  l00401068_thunk_fn0040106E l00401068_thunk_fn004010F6
l0040105A:
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	edx = edx - edi
	SCZO = cond(edx)
	eax = ebx
	ecx = ecx - ebx
	SCZO = cond(ecx)
	edi = edi - 0x00000001
	SZO = cond(edi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	ecx = edx
	branch Test(ULE,CZ) l004010F6
	goto l00401068_thunk_fn0040106E
	// succ:  l00401068_thunk_fn0040106E l00401068_thunk_fn004010F6
l00401068_thunk_fn0040106E:
	call fn0040106E (retsize: 0;)
	return
	// succ:  fn0040105A_exit l00401068_thunk_fn0040106E
l00401068_thunk_fn0040106E:
	call fn0040106E (retsize: 0;)
	return
	// succ:  fn0040105A_exit
l00401068_thunk_fn0040106E:
	call fn0040106E (retsize: 0;)
	return
	// succ:  fn0040105A_exit
l00401068_thunk_fn004010F6:
	call fn004010F6 (retsize: 0;)
	return
	// succ:  fn0040105A_exit
l00401068_thunk_fn004010F6:
	call fn004010F6 (retsize: 0;)
	return
	// succ:  fn0040105A_exit
fn0040105A_exit:


// fn0040106E
// Return size: 0
void fn0040106E()
fn0040106E_entry:
	// succ:  l0040106E
l0040106E:
	// succ:  l00401074
l00401074:
fn0040106E_exit:


// fn0040107E
// Return size: 0
void fn0040107E()
fn0040107E_entry:
	// succ:  l0040107E
l0040107E:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	edx = edx ^ esi
	SZO = cond(edx)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	edx = edi
	edx = edx | eax
	SZO = cond(edx)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	edi = edi | eax
	SZO = cond(edi)
	C = false
	esi = esi - edi
	SCZO = cond(esi)
	branch Test(LT,SO) l00401154
	// succ:  l00401095 l00401154
l00401095:
	v13 = bh
	bh = bh
	bh = v13
l00401154:
	ebx = ebx - eax
	SCZO = cond(ebx)
	// succ:  l00401154_thunk_fn00401155
l00401154_thunk_fn00401155:
	call fn00401155 (retsize: 0;)
	return
	// succ:  fn0040107E_exit
fn0040107E_exit:


// fn004010A4
// Return size: 0
void fn004010A4()
fn004010A4_entry:
	// succ:  l004010A4
l004010A4:
	esp = fp
	Mem0[esp - 0x0000002C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi + ecx
	SCZO = cond(esi)
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	esi = esi - edx
	SCZO = cond(esi)
	edi = edi + ecx
	SCZO = cond(edi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	esi = esi + 0x00000001
	SZO = cond(esi)
	edi = edi + 0x00000001
	SZO = cond(edi)
	edi = edi | ecx
	SZO = cond(edi)
	C = false
	call fn00401056 (retsize: 4;)
	ebp = ebp & Mem0[ecx:word32]
	SZO = cond(ebp)
	C = false
	ecx = ecx - 0x00000001
	branch Test(EQ,Z) && ecx != 0x00000000 l004010BC_thunk_fn004010D3
	// succ:  l004010BC_thunk_fn004010BE l004010BC_thunk_fn004010D3
l004010BC_thunk_fn004010BE:
	call fn004010BE (retsize: 0;)
	return
	// succ:  fn004010A4_exit l004010BC_thunk_fn004010BE
l004010BC_thunk_fn004010BE:
	call fn004010BE (retsize: 0;)
	return
	// succ:  fn004010A4_exit
l004010BC_thunk_fn004010D3:
	call fn004010D3 (retsize: 0;)
	return
	// succ:  fn004010A4_exit
fn004010A4_exit:


// fn004010BE
// Return size: 0
void fn004010BE()
fn004010BE_entry:
	// succ:  l004010BE
l004010BE:
	esp = fp
	esp = esp + 0x00000004
	edx = edx | ebx
	SZO = cond(edx)
	C = false
	edx = eax
	ebx = ebx + edx
	SCZO = cond(ebx)
	edi = edi - 0x00000001
	SZO = cond(edi)
	ebx = ebx - edi
	SCZO = cond(ebx)
	ebx = edi
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	edx = edx + ebx
	SCZO = cond(edx)
	bh = bh + dh
	SCZO = cond(bh)
fn004010BE_exit:


// fn004010D3
// Return size: 0
void fn004010D3()
fn004010D3_entry:
	// succ:  l004010D3
l004010D3:
	esp = fp
	goto l004010D3_thunk_fn00401007
	// succ:  l004010D3_thunk_fn00401007
l004010D3:
	call fn00401007 (retsize: 0;)
	return
	// succ:  l004010D3_thunk_fn00401007 fn004010D3_exit
l004010D3_thunk_fn00401007:
	call fn00401007 (retsize: 0;)
	return
	// succ:  fn004010D3_exit
l004010D3_thunk_fn00401007:
	call fn00401007 (retsize: 0;)
	return
	// succ:  fn004010D3_exit
fn004010D3_exit:


// fn004010DC
// Return size: 0
void fn004010DC()
fn004010DC_entry:
	// succ:  l004010DC
l004010DC:
	esp = fp
	Mem0[esp - 0x00000028:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx ^ ebx
	SZO = cond(edx)
	C = false
	esi = esi | edx
	SZO = cond(esi)
	C = false
	edx = edx | ebx
	SZO = cond(edx)
	C = false
	edi = ecx
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	bl = bl | dh
	SZO = cond(bl)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	esi = esi + ecx
	SCZO = cond(esi)
	// succ:  l00401116
l00401116:
	ebx = ebx - esi
	SCZO = cond(ebx)
	edx = edx + esi
	SCZO = cond(edx)
	esi = ebx
	edi = edi | esi
	SZO = cond(edi)
	C = false
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	edx = edx | eax
	SZO = cond(edx)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	edi = edi - 0x00000001
	SZO = cond(edi)
	call fn004010A4 (retsize: 4;)
	eax = __indw(0x94)
	v14 = eax
	eax = ebx
	ebx = v14
	ch = 0x19
	al = al & Mem0[ebx:byte]
	SZO = cond(al)
	C = false
fn004010DC_exit:


// fn004010F6
// Return size: 0
void fn004010F6()
fn004010F6_entry:
	// succ:  l004010F6
l004010F6:
	esi = esi | edi
	SZO = cond(esi)
	C = false
	ecx = ecx ^ esi
	SZO = cond(ecx)
	C = false
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ebx = ebx + ecx
	SCZO = cond(ebx)
	ebx = edx
	esi = ebx
	edi = edi | edx
	SZO = cond(edi)
	C = false
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	ecx = ecx - eax
	SCZO = cond(ecx)
	edi = edi - 0x00000001
	SZO = cond(edi)
	branch Test(ULE,CZ) TMP!
fn004010F6_exit:


// fn0040112F
// Return size: 0
void fn0040112F()
fn0040112F_entry:
	// succ:  l0040112F
l0040112F:
	esi = esi + ebx
	SCZO = cond(esi)
	goto l00401130
	// succ:  l00401130
l0040116A:
	call fn00402765 (retsize: 4;)
	v13 = Mem0[ebp + 0x1CD04DA0:real64] / rArg0
	Mem0[ebp + 0x1CD04DA0:real64] = v13
	v14 = Mem0[ecx + 0x58792560:word32] - eax
	Mem0[ecx + 0x58792560:word32] = v14
	SCZO = cond(v14)
	eax = eax & 0x7B25D87B
	SZO = cond(eax)
	C = false
	al = al + 0xEC
	SCZO = cond(al)
	al = al | 0x0F
	SZO = cond(al)
	C = false
	al = al & 0x24
	SZO = cond(al)
	C = false
	eax = eax + 0xA72A51DD + C
	SCZO = cond(eax)
	// succ:  l246435AC
l246435AC:
fn0040112F_exit:


// fn00401155
// Return size: 0
void fn00401155()
fn00401155_entry:
	// succ:  l00401155
l00401155:
	esp = fp
	rArg0 = rArg0 * Mem0[ebx + 0x0BF733D8:real32]
	__cli()
	esi = esi + 0x00000001
	SZO = cond(esi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	edi = edi | eax
	SZO = cond(edi)
	C = false
	goto l00401160_thunk_fn00401022
	// succ:  l00401160_thunk_fn00401022
l00401155:
	ebx = eax
	esi = esi ^ edi
	SZO = cond(esi)
	C = false
	edi = edi | edx
	SZO = cond(edi)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	edi = edi | eax
	SZO = cond(edi)
	C = false
	// succ:  l0040115D_thunk_fn00401022
l0040115D_thunk_fn00401022:
	call fn00401022 (retsize: 0;)
	return
	// succ:  fn00401155_exit
l00401160_thunk_fn00401022:
	call fn00401022 (retsize: 0;)
	return
	// succ:  fn00401155_exit
fn00401155_exit:


// fn00401E35
// Return size: 0
void fn00401E35()
fn00401E35_entry:
	// succ:  l00401E35
l00401E35:
	esp = fp
	esp = esp + 0x00000004
	edi = edi + 0x00000001
	SZO = cond(edi)
	eax = ~eax
	ebx = ebx - ecx
	SCZO = cond(ebx)
	bh = bh | cl
	SZO = cond(bh)
	C = false
	ebx = ebx + edx
	SCZO = cond(ebx)
	call fn00402BEC (retsize: 4;)
	C = true
	SCZDOP = Mem0[esp:word32]
	esp = esp + 0x00000004
	v16 = Mem0[ebp + 0x4B6805BF:byte] & bl
	Mem0[ebp + 0x4B6805BF:byte] = v16
	SZO = cond(Mem0[ebp + 0x4B6805BF:byte])
	C = false
	// succ:  l00401E49_thunk_fn00401E4E
l00401E49_thunk_fn00401E4E:
	call fn00401E4E (retsize: 0;)
	return
	// succ:  fn00401E35_exit
fn00401E35_exit:


// fn00401E4E
// Return size: 0
void fn00401E4E()
fn00401E4E_entry:
	// succ:  l00401E4E
l00401E4E:
	esp = fp
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bh = bh - cl
	SCZO = cond(bh)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	eax = Mem0[edx:word32]
	ecx = ecx ^ edi
	SZO = cond(ecx)
	C = false
	bl = 0x2D
	edx = edx + esi
	SCZO = cond(edx)
	goto l00401E5D_thunk_fn004023E7
	// succ:  l00401E5D_thunk_fn004023E7
l00401E4E:
	bh = bh - cl
	SCZO = cond(bh)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	eax = Mem0[edx:word32]
	ecx = ecx ^ edi
	SZO = cond(ecx)
	C = false
	bl = 0x2D
	edx = edx + esi
	SCZO = cond(edx)
	goto l00401E5D_thunk_fn004023E7
	// succ:  l00401E5D_thunk_fn004023E7
l00401E5D_thunk_fn004023E7:
	call fn004023E7 (retsize: 0;)
	return
	// succ:  fn00401E4E_exit
l00401E5D_thunk_fn004023E7:
	call fn004023E7 (retsize: 0;)
	return
	// succ:  fn00401E4E_exit
fn00401E4E_exit:


// fn00401E68
// Return size: 0
void fn00401E68()
fn00401E68_entry:
	// succ:  l00401E68
l00401E68:
	esp = fp
	edi = edi + ecx
	SCZO = cond(edi)
	bh = bh | al
	SZO = cond(bh)
	C = false
	bh = al
	edi = edi | esi
	SZO = cond(edi)
	C = false
	bl = bl ^ ch
	SZO = cond(bl)
	C = false
	bh = 0x88
	bh = bh ^ ch
	SZO = cond(bh)
	C = false
	ebx = ebx - ecx
	SCZO = cond(ebx)
	call fn0040242A (retsize: 4;)
	esi = 0xE77DAE0C
	v14 = eax
	eax = edi
	edi = v14
	v16 = Mem0[esi:word32]
	Mem0[edi:word32] = v16
	esi = esi + 0x00000004
	edi = edi + 0x00000004
	goto l00401E83_thunk_fn00401E84
	// succ:  l00401E83_thunk_fn00401E84
l00401E68:
l00401E83_thunk_fn00401E84:
	call fn00401E84 (retsize: 0;)
	return
	// succ:  fn00401E68_exit
fn00401E68_exit:


// fn00401E84
// Return size: 0
void fn00401E84()
fn00401E84_entry:
	// succ:  l00401E84
l00401E84:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = edx
	edx = v3
	v5 = bl
	bl = bl
	bl = v5
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi + esi
	SCZO = cond(edi)
	edi = edi | esi
	SZO = cond(edi)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	branch Test(OV,O) l00401E8F_thunk_fn00401F98
	goto l00401E95
	// succ:  l00401E95 l00401E8F_thunk_fn00401F98
l00401E8F_thunk_fn00401F98:
	call fn00401F98 (retsize: 0;)
	return
	// succ:  fn00401E84_exit
l00401E95:
	// succ:  l00401E9B
l00401E9B:
	branch Test(NO,O) l00401E9B_thunk_fn00401F98
	goto l00401EA1
	// succ:  l00401EA1 l00401E9B_thunk_fn00401F98
l00401E9B_thunk_fn00401F98:
	call fn00401F98 (retsize: 0;)
	return
	// succ:  fn00401E84_exit
l00401EA1:
	v13 = eax
	eax = edx
	edx = v13
	eax = eax - 0x00000001
	SZO = cond(eax)
	branch Test(ULT,C) l00401EA5_thunk_fn00401EB3
	goto l00401EA7
	// succ:  l00401EA7 l00401EA5_thunk_fn00401EB3
l00401EA5_thunk_fn00401EB3:
	call fn00401EB3 (retsize: 0;)
	return
	// succ:  fn00401E84_exit
l00401EA7:
	v15 = Mem0[esi:word32] | esp
	Mem0[esi:word32] = v15
	SZO = cond(Mem0[esi:word32])
	C = false
	// succ:  l00401EA7_thunk_fn00401EA9
l00401EA7_thunk_fn00401EA9:
	call fn00401EA9 (retsize: 0;)
	return
	// succ:  fn00401E84_exit
fn00401E84_exit:


// fn00401EA9
// Return size: 0
void fn00401EA9()
fn00401EA9_entry:
	// succ:  l00401EA9
l00401EA9:
	esp = fp
	dl = dl ^ dh
	SZO = cond(dl)
	C = false
	bh = bh | al
	SZO = cond(bh)
	C = false
	ah = ch
	eax = edi
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
	goto l00401EB1_thunk_fn00401EB3
	// succ:  l00401EB1_thunk_fn00401EB3
l00401EA9:
l00401EB1_thunk_fn00401EB3:
	call fn00401EB3 (retsize: 0;)
	return
	// succ:  fn00401EA9_exit
l00402A77_thunk_fn004026FD:
	call fn004026FD (retsize: 0;)
	return
	// succ:  fn00401EA9_exit
fn00401EA9_exit:


// fn00401EB3
// Return size: 0
void fn00401EB3()
fn00401EB3_entry:
	// succ:  l00401EB3
l00401EB3:
	esp = fp
	dh = dh ^ bl
	SZO = cond(dh)
	C = false
	bl = bl + al
	SCZO = cond(bl)
	esi = esi | ecx
	SZO = cond(esi)
	C = false
	dh = dh | dl
	SZO = cond(dh)
	C = false
	goto l00401EBB_thunk_fn00402A68
	// succ:  l00401EBB_thunk_fn00402A68
l00401EB3:
	dh = dh ^ bl
	SZO = cond(dh)
	C = false
	bl = bl + al
	SCZO = cond(bl)
	esi = esi | ecx
	SZO = cond(esi)
	C = false
	dh = dh | dl
	SZO = cond(dh)
	C = false
	// succ:  l00401EB9_thunk_fn00402A68
l00401EB9_thunk_fn00402A68:
	call fn00402A68 (retsize: 0;)
	return
	// succ:  fn00401EB3_exit
l00401EBB_thunk_fn00402A68:
	call fn00402A68 (retsize: 0;)
	return
	// succ:  fn00401EB3_exit
fn00401EB3_exit:


// fn00401EC7
// Return size: 0
void fn00401EC7()
fn00401EC7_entry:
	// succ:  l00401EC7
l00401EC7:
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	cl = dh
	dh = cl
	ecx = ecx - edx
	SCZO = cond(ecx)
	esi = esi - 0x00000001
	SZO = cond(esi)
	bh = ch
	edi = edi + 0x00000001
	SZO = cond(edi)
	call fn00402851 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	SCZO = cond(edx - eax)
	edi = edi - 0x00000001
	SZO = cond(edi)
	SCZO = cond(eax - Mem0[edi:word32])
	edi = edi + 0x00000004
	// succ:  l00401EDC_thunk_fn00401EDD
l00401EDC_thunk_fn00401EDD:
	call fn00401EDD (retsize: 0;)
	return
	// succ:  fn00401EC7_exit
fn00401EC7_exit:


// fn00401EDD
// Return size: 0
void fn00401EDD()
fn00401EDD_entry:
	// succ:  l00401EDD
l00401EDD:
	esp = fp
	edx = edx - ebx
	SCZO = cond(edx)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	eax = eax + esi
	SCZO = cond(eax)
	esi = esi + ecx
	SCZO = cond(esi)
	eax = eax - edx
	SCZO = cond(eax)
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	edi = edi + eax
	SCZO = cond(edi)
	goto l00401EEB_thunk_fn00401EED
	// succ:  l00401EEB_thunk_fn00401EED
l00401EDD:
	edx = edx - ebx
	SCZO = cond(edx)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	eax = eax + esi
	SCZO = cond(eax)
	esi = esi + ecx
	SCZO = cond(esi)
	eax = eax - edx
	SCZO = cond(eax)
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	edi = edi + eax
	SCZO = cond(edi)
	goto l00401EEB_thunk_fn00401EED
	// succ:  l00401EEB_thunk_fn00401EED
l00401EEB_thunk_fn00401EED:
	call fn00401EED (retsize: 0;)
	return
	// succ:  fn00401EDD_exit
l00401EEB_thunk_fn00401EED:
	call fn00401EED (retsize: 0;)
	return
	// succ:  fn00401EDD_exit
fn00401EDD_exit:


// fn00401EED
// Return size: 0
void fn00401EED()
fn00401EED_entry:
	// succ:  l00401EED
l00401EED:
	esp = fp
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	goto l00402290
	// succ:  l00402290
l00401EED:
l00402290:
	dl = dl | cl
	SZO = cond(dl)
	C = false
	ebx = ebx ^ ecx
	SZO = cond(ebx)
	C = false
	al = 0x12
	esi = ecx
	eax = eax - 0x00000001
	SZO = cond(eax)
	dl = dl - ah
	SCZO = cond(dl)
	bl = bl + ch
	SCZO = cond(bl)
	al = 0xC6
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	branch Test(PE,P) l004022A1_thunk_fn004021DC
	goto l004022A7
	// succ:  l004022A7 l004022A1_thunk_fn004021DC
l004022A1_thunk_fn004021DC:
	call fn004021DC (retsize: 0;)
	return
	// succ:  fn00401EED_exit
l004022A7:
	ebx = ebx
	branch Test(PO,P) l004022A9_thunk_fn004021DC
	goto l004022AF
	// succ:  l004022AF l004022A9_thunk_fn004021DC
l004022A9_thunk_fn004021DC:
	call fn004021DC (retsize: 0;)
	return
	// succ:  fn00401EED_exit
l004022AF:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ds
	v18 = Mem0[ebx + 0xF0AE05BC:byte] >> 0x03
	Mem0[ebx + 0xF0AE05BC:byte] = v18
	SCZO = cond(v18)
	// succ:  l004022B1_thunk_fn004022B8
l004022B1_thunk_fn004022B8:
	call fn004022B8 (retsize: 0;)
	return
	// succ:  fn00401EED_exit
fn00401EED_exit:


// fn00401EFB
// Return size: 0
void fn00401EFB()
fn00401EFB_entry:
	// succ:  l00401EFB
l00401EFB:
	esp = fp
	Mem0[esp:word32] = ecx
	v4 = cx
	cx = cx
	cx = v4
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	al = 0xBA
	ah = 0x49
	ch = -ch
	SCZO = cond(ch)
	C = ch == 0x00
	eax = eax - edi
	SCZO = cond(eax)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	// succ:  l00401F0C_thunk_fn00402530
l00401F0C_thunk_fn00402530:
	call fn00402530 (retsize: 0;)
	return
	// succ:  fn00401EFB_exit
fn00401EFB_exit:


// fn00401F31
// Return size: 0
void fn00401F31()
fn00401F31_entry:
	// succ:  l00401F31
l00401F31:
	esp = fp
	edi = ecx
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	esi = esi + edx
	SCZO = cond(esi)
	edi = edi | esi
	SZO = cond(edi)
	C = false
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bl = bl ^ dl
	SZO = cond(bl)
	C = false
	bh = bh - ah
	SCZO = cond(bh)
	eax = Mem0[eax:word32]
	esi = esi + ebx
	SCZO = cond(esi)
	call fn00402B5F (retsize: 4;)
	ss = Mem0[esp:selector]
	esp = esp + 0x00000002
	ecx = ecx - 0x00000001
	branch Test(NE,Z) && ecx != 0x00000000 l00401F49_thunk_fn00401FC5
	goto l00401F4B
	// succ:  l00401F4B l00401F49_thunk_fn00401FC5
l00401F31:
l00401F49_thunk_fn00401FC5:
	call fn00401FC5 (retsize: 0;)
	return
	// succ:  fn00401F31_exit
l00401F4B:
	int3()
	// succ:  l00401F4B_thunk_fn00401F4D
l00401F4B_thunk_fn00401F4D:
	call fn00401F4D (retsize: 0;)
	return
	// succ:  fn00401F31_exit
fn00401F31_exit:


// fn00401F4D
// Return size: 0
void fn00401F4D()
fn00401F4D_entry:
	// succ:  l00401F4D
l00401F4D:
	esp = fp
	esp = esp + 0x00000004
	Mem0[ecx:byte] = al
	dh = dl
	dh = 0xE3
	dh = 0x6D
	esi = esi - 0x00000001
	SZO = cond(esi)
	call fn00402317 (retsize: 4;)
	dl = dl + 0x66
	SCZO = cond(dl)
	Mem0[edi:byte] = al
	edi = edi + 0x00000001
	// succ:  l00401F62_thunk_fn00401F63
l00401F62_thunk_fn00401F63:
	call fn00401F63 (retsize: 0;)
	return
	// succ:  fn00401F4D_exit
fn00401F4D_exit:


// fn00401F63
// Return size: 0
void fn00401F63()
fn00401F63_entry:
	// succ:  l00401F63
l00401F63:
	esp = fp
	edi = edi + esi
	SCZO = cond(edi)
	eax = eax | esi
	SZO = cond(eax)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	esi = esi - 0x00000001
	SZO = cond(esi)
	ebx = ebx - edx
	SCZO = cond(ebx)
	bl = bl + bh
	SCZO = cond(bl)
	dh = dh - bl
	SCZO = cond(dh)
	call fn00402616 (retsize: 4;)
	goto l00401F6F_thunk_fn00401F74
	// succ:  l00401F6F_thunk_fn00401F74
l00401F63:
	edi = edi + esi
	SCZO = cond(edi)
	eax = eax | esi
	SZO = cond(eax)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	esi = esi - 0x00000001
	SZO = cond(esi)
	ebx = ebx - edx
	SCZO = cond(ebx)
	bl = bl + bh
	SCZO = cond(bl)
	dh = dh - bl
	SCZO = cond(dh)
	call fn00402616 (retsize: 4;)
	// succ:  l00401F6F_thunk_fn00401F73
l00401F6F_thunk_fn00401F73:
	call fn00401F73 (retsize: 0;)
	return
	// succ:  fn00401F63_exit
l00401F6F_thunk_fn00401F74:
	call fn00401F74 (retsize: 0;)
	return
	// succ:  fn00401F63_exit
fn00401F63_exit:


// fn00401F73
// Return size: 0
void fn00401F73()
fn00401F73_entry:
	// succ:  l00401F73
l00401F73:
	call fn00401F74 (retsize: 0;)
	return
	// succ:  l00401F74 fn00401F73_exit
fn00401F73_exit:


// fn00401F74
// Return size: 0
void fn00401F74()
fn00401F74_entry:
	// succ:  l00401F74
l00401F74:
	esp = fp
	branch Test(GE,SO) l00401F74_thunk_fn00401F73
	goto l00401F74_thunk_fn00401F76
	// succ:  l00401F74_thunk_fn00401F76 l00401F74_thunk_fn00401F73
l00401F74:
	branch Test(GE,SO) l00401F73
	goto l00401F74_thunk_fn00401F76
	// succ:  l00401F74_thunk_fn00401F76 l00401F74_thunk_fn00401F73
l00401F74_thunk_fn00401F73:
	call fn00401F73 (retsize: 0;)
	return
	// succ:  fn00401F74_exit
l00401F74_thunk_fn00401F73:
	call fn00401F73 (retsize: 0;)
	return
	// succ:  fn00401F74_exit
l00401F74_thunk_fn00401F76:
	call fn00401F76 (retsize: 0;)
	return
	// succ:  fn00401F74_exit l00401F74_thunk_fn00401F76
l00401F74_thunk_fn00401F76:
	call fn00401F76 (retsize: 0;)
	return
	// succ:  fn00401F74_exit
l00401F74_thunk_fn00401F76:
	call fn00401F76 (retsize: 0;)
	return
	// succ:  fn00401F74_exit
fn00401F74_exit:


// fn00401F76
// Return size: 0
void fn00401F76()
fn00401F76_entry:
	call fn00401F73 (retsize: 0;)
	return
	// succ:  l00401F76 fn00401F76_exit
l00401F76:
	v3 = (Mem0[edi:word32] & 0x00000001 << 0x20 - 0x01) != 0x00000000
	Mem0[edi:word32] = __rol(Mem0[edi:word32], 0x01)
	C = v3
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ch = ch - Mem0[esi + 0xDAF6406A:byte]
	SCZO = cond(ch)
	// succ:  l00401F79_thunk_fn00401F7F
l00401F79_thunk_fn00401F7F:
	call fn00401F7F (retsize: 0;)
	return
	// succ:  fn00401F76_exit
fn00401F76_exit:


// fn00401F7B
// Return size: 0
void fn00401F7B()
fn00401F7B_entry:
	// succ:  l00401F7B
l00401F7B:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000040
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	call fn00401EFB (retsize: 4;)
	// succ:  l00401F7D_thunk_fn00401F7F l00401F8B_thunk_fn00401F90
l00401F7B:
l00401F7D_thunk_fn00401F7F:
	call fn00401F7F (retsize: 0;)
	return
	// succ:  fn00401F7B_exit
l00401F8B_thunk_fn00401F90:
	call fn00401F90 (retsize: 0;)
	return
	// succ:  fn00401F7B_exit
fn00401F7B_exit:


// fn00401F7F
// Return size: 0
void fn00401F7F()
fn00401F7F_entry:
	// succ:  l00401F7F
l00401F7F:
	esp = fp
	edi = edi - 0x00000001
	SZO = cond(edi)
	eax = ebx
	dl = bl
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	cl = cl + al
	SCZO = cond(cl)
	esi = esi - 0x00000001
	SZO = cond(esi)
	call fn00401EFB (retsize: 4;)
	goto l00401F8B_thunk_fn00401F90
	// succ:  l00401F8B_thunk_fn00401F90
l00401F7F:
	edi = edi - 0x00000001
	SZO = cond(edi)
	eax = ebx
	dl = bl
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	cl = cl + al
	SCZO = cond(cl)
	esi = esi - 0x00000001
	SZO = cond(esi)
l00401F8B_thunk_fn00401F90:
	call fn00401F90 (retsize: 0;)
	return
	// succ:  fn00401F7F_exit
fn00401F7F_exit:


// fn00401F90
// Return size: 0
void fn00401F90()
fn00401F90_entry:
	// succ:  l00401F90
l00401F90:
	esp = fp
	Mem0[esi + 0x06A85109:word32] = 0xF933AABA
	goto l00401F90_thunk_fn00401F9A
	// succ:  l00401F90_thunk_fn00401F9A
l00401F90:
	Mem0[esi + 0x06A85109:word32] = 0xF933AABA
	goto l00401F90_thunk_fn00401F9A
	// succ:  l00401F90_thunk_fn00401F9A
l00401F90_thunk_fn00401F9A:
	call fn00401F9A (retsize: 0;)
	return
	// succ:  fn00401F90_exit
l00401F90_thunk_fn00401F9A:
	call fn00401F9A (retsize: 0;)
	return
	// succ:  fn00401F90_exit
fn00401F90_exit:


// fn00401F98
// Return size: 0
void fn00401F98()
fn00401F98_entry:
	// succ:  l00401F98
l00401F98:
	esp = fp
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	goto l00401F98_thunk_fn00401F9A
	// succ:  l00401F98_thunk_fn00401F9A
l00401F98:
l00401F98_thunk_fn00401F9A:
	call fn00401F9A (retsize: 0;)
	return
	// succ:  fn00401F98_exit
fn00401F98_exit:


// fn00401F9A
// Return size: 0
void fn00401F9A()
fn00401F9A_entry:
	// succ:  l00401F9A
l00401F9A:
	esp = fp
	esi = ebx
	edi = edi - 0x00000001
	SZO = cond(edi)
	esi = esi | edi
	SZO = cond(esi)
	C = false
	eax = eax + edx
	SCZO = cond(eax)
	edi = edi + 0x00000001
	SZO = cond(edi)
	edi = edi | edx
	SZO = cond(edi)
	C = false
	goto l00401FA2_thunk_fn00401FA4
	// succ:  l00401FA2_thunk_fn00401FA4
l00401F9A:
	esi = ebx
	edi = edi - 0x00000001
	SZO = cond(edi)
	esi = esi | edi
	SZO = cond(esi)
	C = false
	eax = eax + edx
	SCZO = cond(eax)
	edi = edi + 0x00000001
	SZO = cond(edi)
	edi = edi | edx
	SZO = cond(edi)
	C = false
	goto l00401FA2_thunk_fn00401FA4
	// succ:  l00401FA2_thunk_fn00401FA4
l00401FA2_thunk_fn00401FA4:
	call fn00401FA4 (retsize: 0;)
	return
	// succ:  fn00401F9A_exit
l00401FA2_thunk_fn00401FA4:
	call fn00401FA4 (retsize: 0;)
	return
	// succ:  fn00401F9A_exit
fn00401F9A_exit:


// fn00401FA3
// Return size: 0
void fn00401FA3()
fn00401FA3_entry:
	// succ:  l00401FA3
l00401FA3:
	esp = fp
	__cli()
	call fn004023C3 (retsize: 4;)
	goto l00401FA4_thunk_fn00401FA9
	// succ:  l00401FA4_thunk_fn00401FA9
l00401FA3:
l00401FA4_thunk_fn00401FA9:
	call fn00401FA9 (retsize: 0;)
	return
	// succ:  fn00401FA3_exit
fn00401FA3_exit:


// fn00401FA4
// Return size: 0
void fn00401FA4()
fn00401FA4_entry:
	// succ:  l00401FA4
l00401FA4:
	esp = fp
	call fn004023C3 (retsize: 4;)
	goto l00401FA4_thunk_fn00401FA9
	// succ:  l00401FA4_thunk_fn00401FA9
l00401FA4:
l00401FA4_thunk_fn00401FA9:
	call fn00401FA9 (retsize: 0;)
	return
	// succ:  fn00401FA4_exit
fn00401FA4_exit:


// fn00401FA9
// Return size: 0
void fn00401FA9()
fn00401FA9_entry:
	// succ:  l00401FA9
l00401FA9:
	esp = fp
	C = __aaa(al, ah, &al, &ah)
	edx = edx + 0x00000001
	SZO = cond(edx)
l00401FA9:
	C = __aaa(al, ah, &al, &ah)
	edx = edx + 0x00000001
	SZO = cond(edx)
fn00401FA9_exit:


// fn00401FB1
// Return size: 0
void fn00401FB1()
fn00401FB1_entry:
	// succ:  l00401FB1
l00401FB1:
	esp = fp
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	al = al ^ bl
	SZO = cond(al)
	C = false
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	eax = eax | edx
	SZO = cond(eax)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	call fn00402786 (retsize: 4;)
	SZO = cond(Mem0[0xB76336A2:word32] & edx)
	C = false
	goto l00401FC1_thunk_fn00401FC5
	// succ:  l00401FC1_thunk_fn00401FC5
l00401FB1:
l00401FC1_thunk_fn00401FC5:
	call fn00401FC5 (retsize: 0;)
	return
	// succ:  fn00401FB1_exit
l00401FD5_thunk_fn00401FDB:
	call fn00401FDB (retsize: 0;)
	return
	// succ:  fn00401FB1_exit l00401FD5_thunk_fn00401FDB
l00401FD5_thunk_fn00401FDB:
	call fn00401FDB (retsize: 0;)
	return
	// succ:  fn00401FB1_exit
l00401FD5_thunk_fn004029C2:
	call fn004029C2 (retsize: 0;)
	return
	// succ:  fn00401FB1_exit
fn00401FB1_exit:


// fn00401FC5
// Return size: 0
void fn00401FC5()
fn00401FC5_entry:
	// succ:  l00401FC5
l00401FC5:
	esp = fp
	Z = __arpl(Mem0[edi + 0xFB0211D4:word16], bx, &Mem0[edi + 0xFB0211D4:word16])
	goto l00401FC5_thunk_fn00401FCB
	// succ:  l00401FC5_thunk_fn00401FCB
l00401FC5:
	ax = __aam(al)
	goto l00401FC7_thunk_fn00401FC9
	// succ:  l00401FC7_thunk_fn00401FC9
l00401FC5_thunk_fn00401FCB:
	call fn00401FCB (retsize: 0;)
	return
	// succ:  fn00401FC5_exit
l00401FC7_thunk_fn00401FC9:
	call fn00401FC9 (retsize: 0;)
	return
	// succ:  fn00401FC5_exit
fn00401FC5_exit:


// fn00401FC9
// Return size: 0
void fn00401FC9()
fn00401FC9_entry:
	// succ:  l00401FC9
l00401FC9:
	esp = fp
	bh = bh + bl
	SCZO = cond(bh)
	goto l00401FC9_thunk_fn00401FCB
	// succ:  l00401FC9_thunk_fn00401FCB
l00401FC9:
	bh = bh + bl
	SCZO = cond(bh)
	bl = 0x1E
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[edx + 0x00000008:word32]
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bl = bl - dh
	SCZO = cond(bl)
	ebx = ebx - eax
	SCZO = cond(ebx)
	branch Test(SG,S) l00401FD5_thunk_fn004029C2
l00401FC9_thunk_fn00401FCB:
	call fn00401FCB (retsize: 0;)
	return
	// succ:  fn00401FC9_exit
l00402000_thunk_fn00401FA3:
	call fn00401FA3 (retsize: 0;)
	return
	// succ:  fn00401FC9_exit
l00402000_thunk_fn00402002:
	call fn00402002 (retsize: 0;)
	return
	// succ:  fn00401FC9_exit l00402000_thunk_fn00402002
l00402000_thunk_fn00402002:
	call fn00402002 (retsize: 0;)
	return
	// succ:  fn00401FC9_exit
fn00401FC9_exit:


// fn00401FCB
// Return size: 0
void fn00401FCB()
fn00401FCB_entry:
	// succ:  l00401FCB
l00401FCB:
	esp = fp
	bl = 0x1E
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[edx + 0x00000008:word32]
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bl = bl - dh
	SCZO = cond(bl)
	ebx = ebx - eax
	SCZO = cond(ebx)
	branch Test(SG,S) l00401FD5_thunk_fn004029C2
	// succ:  l00401FD5_thunk_fn00401FDB l00401FD5_thunk_fn004029C2 l00401FD5_thunk_fn00401FDB l00401FD5_thunk_fn004029C2
l00401FCB:
	bl = 0x1E
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[edx + 0x00000008:word32]
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bl = bl - dh
	SCZO = cond(bl)
	ebx = ebx - eax
	SCZO = cond(ebx)
	branch Test(SG,S) l00401FD5_thunk_fn004029C2
	goto l00401FD5_thunk_fn00401FDB
	// succ:  l00401FD5_thunk_fn00401FDB l00401FD5_thunk_fn004029C2
l00401FD5_thunk_fn00401FDB:
	call fn00401FDB (retsize: 0;)
	return
	// succ:  fn00401FCB_exit l00401FD5_thunk_fn00401FDB
l00401FD5_thunk_fn00401FDB:
	call fn00401FDB (retsize: 0;)
	return
	// succ:  fn00401FCB_exit
l00401FD5_thunk_fn00401FDB:
	call fn00401FDB (retsize: 0;)
	return
	// succ:  fn00401FCB_exit
l00401FD5_thunk_fn004029C2:
	call fn004029C2 (retsize: 0;)
	return
	// succ:  fn00401FCB_exit
l00401FD5_thunk_fn004029C2:
	call fn004029C2 (retsize: 0;)
	return
	// succ:  fn00401FCB_exit
fn00401FCB_exit:


// fn00401FDB
// Return size: 0
void fn00401FDB()
fn00401FDB_entry:
	// succ:  l00401FDB
l00401FDB:
	esp = esp - 0x00000002
	Mem0[esp:word16] = di
	di = Mem0[esp:word16]
	esp = esp + 0x00000002
	branch Test(NS,S) l00401FDF_thunk_fn004029C2
	goto l00401FE5
	// succ:  l00401FE5 l00401FDF_thunk_fn004029C2
l00401FDF_thunk_fn004029C2:
	call fn004029C2 (retsize: 0;)
	return
	// succ:  fn00401FDB_exit
l00401FE5:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	eax = Mem0[ebp + 0x47A7CD36:word32]
	// succ:  l00401FE6_thunk_fn00401FEC
l00401FE6_thunk_fn00401FEC:
	call fn00401FEC (retsize: 0;)
	return
	// succ:  fn00401FDB_exit
fn00401FDB_exit:


// fn00401FEC
// Return size: 0
void fn00401FEC()
fn00401FEC_entry:
	// succ:  l00401FEC
l00401FEC:
	esp = fp
	esi = esi + 0x00000001
	SZO = cond(esi)
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	ecx = ecx - ebx
	SCZO = cond(ecx)
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	cl = ch
	ch = ch | bh
	SZO = cond(ch)
	C = false
	edx = edx ^ esi
	SZO = cond(edx)
	C = false
	bl = bl + ch
	SCZO = cond(bl)
	call fn004025EF (retsize: 4;)
	branch Test(SG,S) l00402000_thunk_fn00401FA3
	// succ:  l00402000_thunk_fn00402002 l00402000_thunk_fn00401FA3 l00402000_thunk_fn00402002 l00402000_thunk_fn00401FA3
l00401FEC:
	esi = esi + 0x00000001
	SZO = cond(esi)
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	ecx = ecx - ebx
	SCZO = cond(ecx)
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	cl = ch
	ch = ch | bh
	SZO = cond(ch)
	C = false
	edx = edx ^ esi
	SZO = cond(edx)
	C = false
	bl = bl + ch
	SCZO = cond(bl)
	call fn004025EF (retsize: 4;)
	branch Test(SG,S) l00402000_thunk_fn00401FA3
l00402000_thunk_fn00401FA3:
	call fn00401FA3 (retsize: 0;)
	return
	// succ:  fn00401FEC_exit
l00402000_thunk_fn00402002:
	call fn00402002 (retsize: 0;)
	return
	// succ:  fn00401FEC_exit
fn00401FEC_exit:


// fn00402002
// Return size: 0
void fn00402002()
fn00402002_entry:
	// succ:  l00402002
l00402002:
fn00402002_exit:


// fn00402021
// Return size: 4
void fn00402021()
fn00402021_entry:
	// succ:  l00402021
l00402021:
	esp = fp
	bh = bh ^ ah
	SZO = cond(bh)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	edi = edi - 0x00000001
	SZO = cond(edi)
	bh = 0xEA
	bl = bl ^ ch
	SZO = cond(bl)
	C = false
	esi = esi + ecx
	SCZO = cond(esi)
	bl = bl ^ dl
	SZO = cond(bl)
	C = false
	bh = ah
	bl = bl + cl
	SCZO = cond(bl)
	esi = esi | ecx
	SZO = cond(esi)
	C = false
	call fn00401E35 (retsize: 4;)
	Mem0[0x106D6EF0:byte] = al
	v16 = (Mem0[edi + 0x03F02444:word32] & 0x00000001 << 0x01) != 0x00000000
	Mem0[edi + 0x03F02444:word32] = __ror(Mem0[edi + 0x03F02444:word32], 0x01)
	C = v16
	goto l0040203D_thunk_fn00402043
	// succ:  l0040203D_thunk_fn00402043
l00402021:
l0040203D_thunk_fn00402043:
	call fn00402043 (retsize: 4;)
	return
	// succ:  fn00402021_exit
fn00402021_exit:


// fn0040203E
// Return size: 4
void fn0040203E()
fn0040203E_entry:
	// succ:  l0040203E
l0040203E:
	esp = fp
	Mem0[esp - 0x00000010:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx + edi
	SCZO = cond(edx)
	// succ:  l00402042_thunk_fn00402043
l00402042_thunk_fn00402043:
	call fn00402043 (retsize: 4;)
	return
	// succ:  fn0040203E_exit
l00402053_thunk_fn00402B45:
	call fn00402B45 (retsize: 4;)
	return
	// succ:  fn0040203E_exit
fn0040203E_exit:


// fn00402043
// Return size: 4
void fn00402043()
fn00402043_entry:
	// succ:  l00402043
l00402043:
	esp = fp
	al = Mem0[ebx + (uint32) al:byte]
	esi = esi + 0x00000001
	SZO = cond(esi)
	dl = cl
	ebx = ebx ^ 0x2CB5B4AD
	SZO = cond(ebx)
	C = false
	esi = esi ^ edi
	SZO = cond(esi)
	C = false
	ah = ah - cl
	SCZO = cond(ah)
	dh = 0x93
	// succ:  l00402053_thunk_fn00402B45 l00402053_thunk_fn00402B45
l00402043:
	esi = esi + 0x00000001
	SZO = cond(esi)
	dl = cl
	ebx = ebx ^ 0x2CB5B4AD
	SZO = cond(ebx)
	C = false
	esi = esi ^ edi
	SZO = cond(esi)
	C = false
	ah = ah - cl
	SCZO = cond(ah)
	dh = 0x93
l00402053_thunk_fn00402B45:
	call fn00402B45 (retsize: 4;)
	return
	// succ:  fn00402043_exit
fn00402043_exit:


// fn0040205C
// Return size: 0
void fn0040205C()
fn0040205C_entry:
	// succ:  l0040205C
l0040205C:
	esp = fp
	Mem0[esp - 0x00000014:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = bl - al
	SCZO = cond(bl)
	esi = esi + 0x00000001
	SZO = cond(esi)
	bh = 0x7D
	bh = 0xF7
	esi = edi
	bh = bh - dh
	SCZO = cond(bh)
	edi = edi + ecx
	SCZO = cond(edi)
	bh = bh ^ al
	SZO = cond(bh)
	C = false
	edi = edi + 0x00000001
	SZO = cond(edi)
	goto l00402940
	// succ:  l00402940
l004028C4:
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	bl = bl + ah
	SCZO = cond(bl)
	esi = esi + edx
	SCZO = cond(esi)
	bh = bh ^ ch
	SZO = cond(bh)
	C = false
	bh = dl
	esi = ebx
	branch Test(OV,O) l004028D0_thunk_fn00401F31
	goto l004028D6
	// succ:  l004028D6 l004028D0_thunk_fn00401F31
l004028D0_thunk_fn00401F31:
	call fn00401F31 (retsize: 0;)
	return
	// succ:  fn0040205C_exit
l004028D6:
	v24 = bh
	bh = bh
	bh = v24
	branch Test(NO,O) l004028D8_thunk_fn00401F31
	goto l004028DE
	// succ:  l004028DE l004028D8_thunk_fn00401F31
l004028D8_thunk_fn00401F31:
	call fn00401F31 (retsize: 0;)
	return
	// succ:  fn0040205C_exit
l004028DE:
	v25 = Mem0[edi + 0x51F0483F:word32]
	Mem0[edi + 0x51F0483F:word32] = eax
	eax = v25
	edi = edi | edx
	SZO = cond(edi)
	C = false
	// succ:  l004028E4_thunk_fn004028E6
l004028E4_thunk_fn004028E6:
	call fn004028E6 (retsize: 0;)
	return
	// succ:  fn0040205C_exit
l00402940:
	bl = ch
	ebx = ebx ^ ecx
	SZO = cond(ebx)
	C = false
	eax = eax + 0x00000008
	SCZO = cond(eax)
	bh = 0x5F
	edi = edi + ebx
	SCZO = cond(edi)
	bh = bh ^ ah
	SZO = cond(bh)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bl = bl - ch
	SCZO = cond(bl)
	branch Test(SG,S) l004028C4
	// succ:  l00402956 l004028C4
l00402956:
	ax = ax
	branch Test(NS,S) l004028C4
	// succ:  l0040295F l004028C4
l0040295F:
	ebp = ebp - eax - C
	SCZO = cond(ebp)
	dh = dh + Mem0[(ebx + 0x00000050) + eax * 0x04:byte] + C
	SCZO = cond(dh)
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	call fn00402578 (retsize: 4;)
	// succ:  l00402965_thunk_fn00402966 l00402989_thunk_fn0040298E
l00402965_thunk_fn00402966:
	call fn00402966 (retsize: 0;)
	return
	// succ:  fn0040205C_exit
l00402989_thunk_fn0040298E:
	call fn0040298E (retsize: 0;)
	return
	// succ:  fn0040205C_exit
fn0040205C_exit:


// fn00402098
// Return size: 0
void fn00402098()
fn00402098_entry:
	goto l00402098
	// succ:  l00402098
l00401F18:
	bh = dl
	bh = bh | cl
	SZO = cond(bh)
	C = false
	esi = esi | ecx
	SZO = cond(esi)
	C = false
	bh = bh + dh
	SCZO = cond(bh)
	bl = bl + dh
	SCZO = cond(bl)
	bl = bl - dl
	SCZO = cond(bl)
	call fn0040205C (retsize: 4;)
	ds = Mem0[esp:selector]
	esp = esp + 0x00000002
	__outdw(edx, eax)
	esi = esi + 0x00000004
	eax = eax - 0xC419C9BD - C
	SCZO = cond(eax)
	v23 = Mem0[esi:word32]
	Mem0[edi:word32] = v23
	esi = esi + 0x00000004
	edi = edi + 0x00000004
	// succ:  l00401F30_thunk_fn00401F31
l00401F30_thunk_fn00401F31:
	call fn00401F31 (retsize: 0;)
	return
	// succ:  fn00402098_exit
l00402098:
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	edi = edi + 0x00000001
	SZO = cond(edi)
	bh = bh | ah
	SZO = cond(bh)
	C = false
	bh = bh + ch
	SCZO = cond(bh)
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	ebx = ebx - edi
	SCZO = cond(ebx)
	bl = bl + bh
	SCZO = cond(bl)
	eax = eax + 0x00000078
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	branch Test(SG,S) l00401F18
	// succ:  l004020B2 l00401F18
l004020B2:
	branch Test(LE,SZO) l004020B4
	// succ:  l004020B4
l004020B4:
	branch Test(EQ,Z) l004020B6
	// succ:  l004020B6
l004020B6:
	branch Test(NS,S) l00401F18
	// succ:  l004020BC l00401F18
l004020BC:
	C = __daa(al, &al)
	ebx = ebx << cl
	SCZO = cond(ebx)
	dl = dl - Mem0[ebx + 0xFA814E4E:byte]
	SCZO = cond(dl)
fn00402098_exit:


// fn004020C1
// Return size: 0
void fn004020C1()
fn004020C1_entry:
	// succ:  l004020C1
l004020C1:
	esp = fp
	esi = esi - 0x00000001
	SZO = cond(esi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	SCZO = cond(edx - 0x52D8CBDB)
	branch Test(NE,Z) l004020C9_thunk_fn0040216C
	goto l004020CF
	// succ:  l004020CF l004020C9_thunk_fn0040216C
l004020C1:
l004020C9_thunk_fn0040216C:
	call fn0040216C (retsize: 0;)
	return
	// succ:  fn004020C1_exit
l004020CF:
	esi = esi - 0x00000001
	SZO = cond(esi)
	bh = ah
	dh = 0x4B
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ch = ch | bh
	SZO = cond(ch)
	C = false
	ecx = ecx - edx
	SCZO = cond(ecx)
	branch Test(OV,O) l004020D9_thunk_fn00402518
	goto l004020DF
	// succ:  l004020DF l004020D9_thunk_fn00402518
l004020D9_thunk_fn00402518:
	call fn00402518 (retsize: 4;)
	return
	// succ:  fn004020C1_exit
l004020DF:
	esp = esp - 0x00000002
	Mem0[esp:word16] = dx
	dx = Mem0[esp:word16]
	esp = esp + 0x00000002
	branch Test(NO,O) l004020E3_thunk_fn00402518
	goto l004020E9
	// succ:  l004020E9 l004020E3_thunk_fn00402518
l004020E3_thunk_fn00402518:
	call fn00402518 (retsize: 4;)
	return
	// succ:  fn004020C1_exit
l004020E9:
	al = al ^ 0xB3
	SZO = cond(al)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = cs
	edx = edx + 0x00000001
	SZO = cond(edx)
	dl = 0x77
	ah = FPUF
	return
	// succ:  fn004020C1_exit
fn004020C1_exit:


// fn004020F1
// Return size: 4
void fn004020F1()
fn004020F1_entry:
	// succ:  l004020F1
l004020F1:
	esp = fp
	Mem0[esp - 0x0000000C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh ^ bl
	SZO = cond(bh)
	C = false
	bh = bh | dl
	SZO = cond(bh)
	C = false
	eax = eax ^ 0xFFFFFEC8
	SZO = cond(eax)
	C = false
	edi = edi - esi
	SCZO = cond(edi)
	bl = bl ^ dh
	SZO = cond(bl)
	C = false
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	bl = dh
	branch Test(EQ,Z) l00402106_thunk_fn00402021
	goto l0040210C
	// succ:  l0040210C l00402106_thunk_fn00402021
l00402106_thunk_fn00402021:
	call fn00402021 (retsize: 4;)
	return
	// succ:  fn004020F1_exit
l0040210C:
	ah = ah
	branch Test(NE,Z) l0040210E_thunk_fn00402021
	goto l0040210E_thunk_fn00402114
	// succ:  l0040210E_thunk_fn00402114 l0040210E_thunk_fn00402021
l0040210E_thunk_fn00402021:
	call fn00402021 (retsize: 4;)
	return
	// succ:  fn004020F1_exit
l0040210E_thunk_fn00402114:
	call fn00402114 (retsize: 0;)
	return
	// succ:  fn004020F1_exit l0040210E_thunk_fn00402114
l0040210E_thunk_fn00402114:
	call fn00402114 (retsize: 0;)
	return
	// succ:  fn004020F1_exit
fn004020F1_exit:


// fn00402114
// Return size: 0
void fn00402114()
fn00402114_entry:
	// succ:  l00402114
l00402114:
	esp = fp
	v4 = Mem0[edx + 0x2DEF4232:word32] ^ 0xD302F32B
	Mem0[edx + 0x2DEF4232:word32] = v4
	SZO = cond(Mem0[edx + 0x2DEF4232:word32])
	C = false
	goto l00402114_thunk_fn0040211E
	// succ:  l00402114_thunk_fn0040211E
l00402114:
l00402114_thunk_fn0040211E:
	call fn0040211E (retsize: 0;)
	return
l00402119:
	// succ:  fn00402114_exit
fn00402114_exit:


// fn0040211E
// Return size: 0
void fn0040211E()
fn0040211E_entry:
	// succ:  l0040211E
l0040211E:
	esp = fp
	dh = dh | al
	SZO = cond(dh)
	C = false
	dl = dl + ch
	SCZO = cond(dl)
	dh = dh + al
	SCZO = cond(dh)
	edx = edx - 0x00000001
	SZO = cond(edx)
	dh = 0x09
	ah = ~ah
	branch Test(OV,O) l00402129_thunk_fn00402ABB
	goto l00402129_thunk_fn0040212F
	// succ:  l00402129_thunk_fn0040212F l00402129_thunk_fn00402ABB
l0040211E:
	dh = dh | al
	SZO = cond(dh)
	C = false
	dl = dl + ch
	SCZO = cond(dl)
	dh = dh + al
	SCZO = cond(dh)
	edx = edx - 0x00000001
	SZO = cond(edx)
	dh = 0x09
	ah = ~ah
	branch Test(OV,O) l00402ABB
	goto l00402129_thunk_fn0040212F
	// succ:  l00402129_thunk_fn0040212F l00402129_thunk_fn00402ABB
l00402129_thunk_fn0040212F:
	call fn0040212F (retsize: 0;)
	return
	// succ:  fn0040211E_exit l00402129_thunk_fn0040212F
l00402129_thunk_fn0040212F:
	call fn0040212F (retsize: 0;)
	return
	// succ:  fn0040211E_exit
l00402129_thunk_fn0040212F:
	call fn0040212F (retsize: 0;)
	return
	// succ:  fn0040211E_exit
l00402129_thunk_fn00402ABB:
	call fn00402ABB (retsize: 0;)
	return
	// succ:  fn0040211E_exit
l00402129_thunk_fn00402ABB:
	call fn00402ABB (retsize: 0;)
	return
	// succ:  fn0040211E_exit
fn0040211E_exit:


// fn0040212F
// Return size: 0
void fn0040212F()
fn0040212F_entry:
	// succ:  l0040212F
l0040212F:
	edi = edi
	branch Test(NO,O) l00402ABB
	goto l00402137
	// succ:  l00402137 l00402131_thunk_fn00402ABB
l00402131_thunk_fn00402ABB:
	call fn00402ABB (retsize: 0;)
	return
	// succ:  fn0040212F_exit
l00402137:
fn0040212F_exit:


// fn0040213B
// Return size: 0
void fn0040213B()
fn0040213B_entry:
	// succ:  l0040213B
l0040213B:
	esp = fp
	ebx = ebx + eax
	SCZO = cond(ebx)
	esi = ecx
	edx = edx ^ ebx
	SZO = cond(edx)
	C = false
	ch = ch + ah
	SCZO = cond(ch)
	dh = dh - bh
	SCZO = cond(dh)
	edi = edi + 0x00000001
	SZO = cond(edi)
	dl = 0xCA
	cl = cl | al
	SZO = cond(cl)
	C = false
	ebx = ebx + ecx
	SCZO = cond(ebx)
	goto l004024C0
	// succ:  l004024C0
l0040213B:
l004024C0:
	edx = edx + esi
	SCZO = cond(edx)
	ebx = ebx | eax
	SZO = cond(ebx)
	C = false
	Mem0[esp - 0x00000008:word32] = eax
	ch = ch ^ bl
	SZO = cond(ch)
	C = false
	dh = dh + cl
	SCZO = cond(dh)
	ch = ch ^ bh
	SZO = cond(ch)
	C = false
	ebx = ebx + eax
	SCZO = cond(ebx)
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
	edi = edi - ecx
	SCZO = cond(edi)
	ecx = ecx + esi
	SCZO = cond(ecx)
	// succ:  l004024D6_thunk_fn00401FEC
l004024D6_thunk_fn00401FEC:
	call fn00401FEC (retsize: 0;)
	return
	// succ:  fn0040213B_exit
fn0040213B_exit:


// fn00402158
// Return size: 0
void fn00402158()
fn00402158_entry:
	// succ:  l00402158
l00402158:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = esi
	esi = v3
	esp = esp - 0x00000002
	Mem0[esp:word16] = di
	di = Mem0[esp:word16]
	esp = esp + 0x00000002
	eax = eax
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx + ebx
	SCZO = cond(edx)
	dh = dh + bh
	SCZO = cond(dh)
	ah = ah - cl
	SCZO = cond(ah)
	edx = edi
	al = al | cl
	SZO = cond(al)
	C = false
	// succ:  l0040216A_thunk_fn0040216C
l0040216A_thunk_fn0040216C:
	call fn0040216C (retsize: 0;)
	return
	// succ:  fn00402158_exit
l00402197_thunk_fn00401FB1:
	call fn00401FB1 (retsize: 0;)
	return
	// succ:  fn00402158_exit
fn00402158_exit:


// fn0040216C
// Return size: 0
void fn0040216C()
fn0040216C_entry:
	// succ:  l0040216C
l0040216C:
	esp = fp
	al = 0xBF
	ah = ah + ch
	SCZO = cond(ah)
	branch Test(PE,P) l00402170_thunk_fn004028AC
	goto l00402170_thunk_fn00402176
	// succ:  l00402170_thunk_fn00402176 l00402170_thunk_fn004028AC
l0040216C:
	al = 0xBF
	ah = ah + ch
	SCZO = cond(ah)
	branch Test(PE,P) l00402170_thunk_fn004028AC
	goto l00402170_thunk_fn00402176
	// succ:  l00402170_thunk_fn00402176 l00402170_thunk_fn004028AC
l00402170_thunk_fn00402176:
	call fn00402176 (retsize: 0;)
	return
	// succ:  fn0040216C_exit l00402170_thunk_fn00402176
l00402170_thunk_fn00402176:
	call fn00402176 (retsize: 0;)
	return
	// succ:  fn0040216C_exit
l00402170_thunk_fn00402176:
	call fn00402176 (retsize: 0;)
	return
	// succ:  fn0040216C_exit
l00402170_thunk_fn004028AC:
	call fn004028AC (retsize: 0;)
	return
	// succ:  fn0040216C_exit
l00402170_thunk_fn004028AC:
	call fn004028AC (retsize: 0;)
	return
	// succ:  fn0040216C_exit
fn0040216C_exit:


// fn00402176
// Return size: 0
void fn00402176()
fn00402176_entry:
	goto l00402176
	// succ:  l00402176
l00402113:
	v13 = Mem0[ecx + 0xEF4232B2:word32] + 0x00000001
	Mem0[ecx + 0xEF4232B2:word32] = v13
	SZO = cond(v13)
l00402176:
	al = al
	branch Test(PO,P) l00402178_thunk_fn004028AC
	goto l0040217E
	// succ:  l0040217E l00402178_thunk_fn004028AC
l00402178_thunk_fn004028AC:
	call fn004028AC (retsize: 0;)
	return
	// succ:  fn00402176_exit
l0040217E:
	C = __das(al, &al)
	v7 = Mem0[edi:word32] & esp
	Mem0[edi:word32] = v7
	SZO = cond(Mem0[edi:word32])
	C = false
	esi = Mem0[ebx + 0x0000001C:word32]
	branch Test(NE,Z) l00402113
	// succ:  l00402186 l00402113
l00402186:
	al = al & 0x04
	SZO = cond(al)
	C = false
	// succ:  l00402186_thunk_fn00402189
l00402186_thunk_fn00402189:
	call fn00402189 (retsize: 0;)
	return
	// succ:  fn00402176_exit
fn00402176_exit:


// fn00402185
// Return size: 0
void fn00402185()
fn00402185_entry:
	// succ:  l00402185
l00402185:
	esp = fp
	esp = esp + 0x00000004
	// succ:  l00402185_thunk_fn00402189
l00402185_thunk_fn00402189:
	call fn00402189 (retsize: 0;)
	return
	// succ:  fn00402185_exit
fn00402185_exit:


// fn00402189
// Return size: 0
void fn00402189()
fn00402189_entry:
	// succ:  l00402189
l00402189:
	esp = fp
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bh = bh ^ cl
	SZO = cond(bh)
	C = false
	al = al + ch
	SCZO = cond(al)
	al = al + ch
	SCZO = cond(al)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax ^ ecx
	SZO = cond(eax)
	C = false
	al = al + dl
	SCZO = cond(al)
	eax = eax + edi
	SCZO = cond(eax)
	// succ:  l00402197_thunk_fn00401FB1 l00402197_thunk_fn00401FB1
l00402189:
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bh = bh ^ cl
	SZO = cond(bh)
	C = false
	al = al + ch
	SCZO = cond(al)
	al = al + ch
	SCZO = cond(al)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax ^ ecx
	SZO = cond(eax)
	C = false
	al = al + dl
	SCZO = cond(al)
	eax = eax + edi
	SCZO = cond(eax)
l00402197_thunk_fn00401FB1:
	call fn00401FB1 (retsize: 0;)
	return
	// succ:  fn00402189_exit
fn00402189_exit:


// fn004021C0
// Return size: 0
void fn004021C0()
fn004021C0_entry:
	// succ:  l004021C0
l004021C0:
	esp = fp
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	esi = esi - edx
	SCZO = cond(esi)
	esi = esi + ecx
	SCZO = cond(esi)
	esi = esi | ecx
	SZO = cond(esi)
	C = false
	dh = dh | ah
	SZO = cond(dh)
	C = false
	edx = edx ^ esi
	SZO = cond(edx)
	C = false
	edx = edx + 0x00000001
	SZO = cond(edx)
	dh = dh - cl
	SCZO = cond(dh)
	call fn00402AA0 (retsize: 4;)
	dh = dh | Mem0[edx - 0x00000048:byte]
	SZO = cond(dh)
	C = false
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	SCZDOP = Mem0[esp:word32]
	esp = esp + 0x00000004
	es = Mem0[ecx + 0xC72AFA2A + esi * 0x0008:selector]
	goto l004021D9_thunk_fn004021E0
	// succ:  l004021D9_thunk_fn004021E0
l004021C0:
l004021D9_thunk_fn004021E0:
	call fn004021E0 (retsize: 0;)
	return
	// succ:  fn004021C0_exit
fn004021C0_exit:


// fn004021DC
// Return size: 0
void fn004021DC()
fn004021DC_entry:
	// succ:  l004021DC
l004021DC:
	esp = fp
	bh = bh - dl
	SCZO = cond(bh)
	al = al - bh
	SCZO = cond(al)
	goto l004021DE_thunk_fn004021E0
	// succ:  l004021DE_thunk_fn004021E0
l004021DC:
l004021DE_thunk_fn004021E0:
	call fn004021E0 (retsize: 0;)
	return
	// succ:  fn004021DC_exit
fn004021DC_exit:


// fn004021E0
// Return size: 0
void fn004021E0()
fn004021E0_entry:
	// succ:  l004021E0
l004021E0:
	esp = fp
	ecx = ecx >>u 0x0000000F
	SCZO = cond(ecx)
	esi = esi - 0x00000001
	SZO = cond(esi)
	dl = dl ^ cl
	SZO = cond(dl)
	C = false
	al = al ^ cl
	SZO = cond(al)
	C = false
	branch Test(ULT,C) l004021E8_thunk_fn00402966
	goto l004021E8_thunk_fn004021EE
	// succ:  l004021E8_thunk_fn004021EE l004021E8_thunk_fn00402966
l004021E0:
	ecx = ecx >>u 0x0000000F
	SCZO = cond(ecx)
	esi = esi - 0x00000001
	SZO = cond(esi)
	dl = dl ^ cl
	SZO = cond(dl)
	C = false
	al = al ^ cl
	SZO = cond(al)
	C = false
	branch Test(ULT,C) l004021E8_thunk_fn00402966
	goto l004021E8_thunk_fn004021EE
	// succ:  l004021E8_thunk_fn004021EE l004021E8_thunk_fn00402966
l004021E8_thunk_fn004021EE:
	call fn004021EE (retsize: 0;)
	return
	// succ:  fn004021E0_exit l004021E8_thunk_fn004021EE
l004021E8_thunk_fn004021EE:
	call fn004021EE (retsize: 0;)
	return
	// succ:  fn004021E0_exit
l004021E8_thunk_fn004021EE:
	call fn004021EE (retsize: 0;)
	return
	// succ:  fn004021E0_exit
l004021E8_thunk_fn00402966:
	call fn00402966 (retsize: 0;)
	return
	// succ:  fn004021E0_exit
l004021E8_thunk_fn00402966:
	call fn00402966 (retsize: 0;)
	return
	// succ:  fn004021E0_exit
fn004021E0_exit:


// fn004021EE
// Return size: 0
void fn004021EE()
fn004021EE_entry:
	// succ:  l004021EE
l004021EE:
	// succ:  l004021F3
l004021F3:
	v3 = ch
	ch = ch
	ch = v3
	branch Test(UGE,C) l004021F5_thunk_fn00402966
	goto l004021FB
	// succ:  l004021FB l004021F5_thunk_fn00402966
l004021F5_thunk_fn00402966:
	call fn00402966 (retsize: 0;)
	return
	// succ:  fn004021EE_exit
l004021FB:
fn004021EE_exit:


// fn00402200
// Return size: 0
void fn00402200()
fn00402200_entry:
	// succ:  l00402200
l00402200:
	esp = fp
	dl = dl - dh
	SCZO = cond(dl)
	ah = al
	ebx = 0x2CB5B813
	eax = eax | ebx
	SZO = cond(eax)
	C = false
	ah = ah | bl
	SZO = cond(ah)
	C = false
	edx = edx - 0x00000001
	SZO = cond(edx)
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	esi = esi - 0x00000001
	SZO = cond(esi)
	ah = ah - dh
	SCZO = cond(ah)
	dl = 0xB6
	goto l00402899
	// succ:  l00402899
l00402200:
l00402899:
	dl = dl ^ ah
	SZO = cond(dl)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	eax = eax + ebx
	SCZO = cond(eax)
	edx = edx - 0x00000001
	SZO = cond(edx)
	ah = -ah
	SCZO = cond(ah)
	C = ah == 0x00
	al = cl
	call fn0040203E (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	v17 = Mem0[ebp + 0xD00BBCEE:byte] + al + C
	Mem0[ebp + 0xD00BBCEE:byte] = v17
	SCZO = cond(v17)
	// succ:  l004028A8_thunk_fn004028AE
l004028A8_thunk_fn004028AE:
	call fn004028AE (retsize: 0;)
	return
	// succ:  fn00402200_exit
fn00402200_exit:


// fn00402247
// Return size: 0
void fn00402247()
fn00402247_entry:
	// succ:  l00402247
l00402247:
	Mem0[esp - 0x00000028:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = bl ^ ch
	SZO = cond(bl)
	C = false
	bh = bh - ah
	SCZO = cond(bh)
	esi = esi + 0x00000001
	SZO = cond(esi)
	bl = bl ^ al
	SZO = cond(bl)
	C = false
	bh = bh | al
	SZO = cond(bh)
	C = false
	edi = edi + 0x00000001
	SZO = cond(edi)
	ebx = ebx - edi
	SCZO = cond(ebx)
	edi = edi + 0x00000001
	SZO = cond(edi)
	esi = edx
	branch Test(SG,S) l0040244A
	goto l00402260
	// succ:  l00402260 l0040225A_thunk_fn00402265
l0040225A_thunk_fn00402265:
	call fn00402265 (retsize: 0;)
	return
	// succ:  fn00402247_exit
l00402260:
	v16 = dl
	dl = dl
	dl = v16
	branch Test(NS,S) l0040244A
fn00402247_exit:


// fn00402265
// Return size: 0
void fn00402265()
fn00402265_entry:
	// succ:  l00402265
l00402265:
	esp = fp
	v4 = Mem0[eax:word32] + eax
	Mem0[eax:word32] = v4
	SCZO = cond(v4)
	al = al + dl
	SCZO = cond(al)
	goto l00402267_thunk_fn00402269
	// succ:  l00402267_thunk_fn00402269
l00402265:
	// succ:  l00402268 l0040244A
l00402267_thunk_fn00402269:
	call fn00402269 (retsize: 0;)
	return
	// succ:  fn00402265_exit
l00402268:
	v9 = Mem0[esi:byte] >> 0x01
	Mem0[esi:byte] = v9
	SCZO = cond(v9)
	// succ:  l00402268_thunk_fn00402269
l00402268_thunk_fn00402269:
	call fn00402269 (retsize: 0;)
	return
	// succ:  fn00402265_exit
l0040244A:
	bh = 0xB1
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	bh = 0xD8
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	ebx = ebx | eax
	SZO = cond(ebx)
	C = false
	esi = esi + edi
	SCZO = cond(esi)
	esi = esi ^ edi
	SZO = cond(esi)
	C = false
	call fn00402463 (retsize: 4;)
	eax = Mem0[eax + 0xF720ECE1:word32]
	// succ:  l0040245D_thunk_fn00402463
l0040245D_thunk_fn00402463:
	call fn00402463 (retsize: 0;)
	return
	// succ:  fn00402265_exit
fn00402265_exit:


// fn00402269
// Return size: 0
void fn00402269()
fn00402269_entry:
	// succ:  l00402269
l00402269:
	esp = fp
	Mem0[ebx + 0x3E9E68CB:word32] = edx
	goto l00402269_thunk_fn00402270
	// succ:  l00402269_thunk_fn00402270
l00402269:
	Mem0[ebx + 0x3E9E68CB:word32] = edx
	v5 = Mem0[esp:word32]
	Mem0[esp:word32] = ecx
	ecx = v5
	goto l00402270_thunk_fn00402279
	// succ:  l00402270_thunk_fn00402279
l00402269_thunk_fn00402270:
	call fn00402270 (retsize: 0;)
	return
	// succ:  fn00402269_exit
l00402270_thunk_fn00402279:
	call fn00402279 (retsize: 0;)
	return
	// succ:  fn00402269_exit
fn00402269_exit:


// fn00402270
// Return size: 0
void fn00402270()
fn00402270_entry:
	// succ:  l00402270
l00402270:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = ecx
	ecx = v3
	// succ:  l00402273_thunk_fn00402279
l00402273_thunk_fn00402279:
	call fn00402279 (retsize: 0;)
	return
	// succ:  fn00402270_exit
fn00402270_exit:


// fn00402279
// Return size: 0
void fn00402279()
fn00402279_entry:
	// succ:  l00402279
l00402279:
fn00402279_exit:


// fn004022B8
// Return size: 0
void fn004022B8()
fn004022B8_entry:
	// succ:  l004022B8
l004022B8:
	esp = fp
	__fldcw(Mem0[ebx:word16])
l004022B8:
	esi = esi - ecx
	SCZO = cond(esi)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	ebx = ebx - edx
	SCZO = cond(ebx)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	esi = esi ^ edi
	SZO = cond(esi)
	C = false
	ebx = ebx + edx
	SCZO = cond(ebx)
	bh = bh | ah
	SZO = cond(bh)
	C = false
fn004022B8_exit:


// fn004022CB
// Return size: 0
void fn004022CB()
fn004022CB_entry:
	// succ:  l004022CB
l004022CB:
	esp = fp
	branch Test(OV,O) l004022CB_thunk_fn00402265
	goto l004022CD
	// succ:  l004022CD l004022CB_thunk_fn00402265
l004022CB:
l004022CB_thunk_fn00402265:
	call fn00402265 (retsize: 0;)
	return
	// succ:  fn004022CB_exit
l004022CD:
	rArg0 = rArg0 * (real64) Mem0[eax:word16]
	dh = 0xB0
	edx = 0xD00BF033
	// succ:  l004022D1_thunk_fn004022D6
l004022D1_thunk_fn004022D6:
	call fn004022D6 (retsize: 0;)
	return
	// succ:  fn004022CB_exit
fn004022CB_exit:


// fn004022D2
// Return size: 0
void fn004022D2()
fn004022D2_entry:
	// succ:  l004022D2
l004022D2:
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	edx = edx | eax
	SZO = cond(edx)
	C = false
	// succ:  l004022D4_thunk_fn004022D6
l004022D4_thunk_fn004022D6:
	call fn004022D6 (retsize: 0;)
	return
	// succ:  fn004022D2_exit
fn004022D2_exit:


// fn004022D6
// Return size: 0
void fn004022D6()
fn004022D6_entry:
	// succ:  l004022D6
l004022D6:
	esp = fp
	edx = edi
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	esi = esi - 0x00000001
	SZO = cond(esi)
	edx = edx - eax
	SCZO = cond(edx)
	dl = 0x33
	dh = dh - ch
	SCZO = cond(dh)
	branch Test(ULE,CZ) l004022E1_thunk_fn0040274F
	goto l004022E1_thunk_fn004022E7
	// succ:  l004022E1_thunk_fn004022E7 l004022E1_thunk_fn0040274F
l004022D6:
	edx = edi
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	esi = esi - 0x00000001
	SZO = cond(esi)
	edx = edx - eax
	SCZO = cond(edx)
	dl = 0x33
	dh = dh - ch
	SCZO = cond(dh)
	branch Test(ULE,CZ) l0040274F
	goto l004022E1_thunk_fn004022E7
	// succ:  l004022E1_thunk_fn004022E7 l004022E1_thunk_fn0040274F
l004022E1_thunk_fn004022E7:
	call fn004022E7 (retsize: 0;)
	return
	// succ:  fn004022D6_exit l004022E1_thunk_fn004022E7
l004022E1_thunk_fn004022E7:
	call fn004022E7 (retsize: 0;)
	return
	// succ:  fn004022D6_exit
l004022E1_thunk_fn004022E7:
	call fn004022E7 (retsize: 0;)
	return
	// succ:  fn004022D6_exit
l004022E1_thunk_fn0040274F:
	call fn0040274F (retsize: 0;)
	return
	// succ:  fn004022D6_exit
l004022E1_thunk_fn0040274F:
	call fn0040274F (retsize: 0;)
	return
	// succ:  fn004022D6_exit
fn004022D6_exit:


// fn004022E7
// Return size: 0
void fn004022E7()
fn004022E7_entry:
	// succ:  l004022E7
l004022E7:
	branch Test(EQ,Z) l004022E9
	// succ:  l004022E9
l004022E9:
	branch Test(UGT,CZ) l0040274F
	goto l004022EF
	// succ:  l004022EF l004022E9_thunk_fn0040274F
l004022E9_thunk_fn0040274F:
	call fn0040274F (retsize: 0;)
	return
	// succ:  fn004022E7_exit
l004022EF:
	v5 = Mem0[eax:word32] + eax
	Mem0[eax:word32] = v5
	SCZO = cond(v5)
fn004022E7_exit:


// fn004022F4
// Return size: 0
void fn004022F4()
fn004022F4_entry:
	// succ:  l004022F4
l004022F4:
	esp = fp
	ah = Mem0[edi:byte]
	dh = cl
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	edx = edx ^ edi
	SZO = cond(edx)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	dh = 0xB9
	esi = esi + 0x00000001
	SZO = cond(esi)
	edx = ecx
	esi = esi - 0x00000001
	SZO = cond(esi)
	branch Test(PE,P) l00402303_thunk_fn00402A31
	goto l00402309
	// succ:  l00402309 l00402303_thunk_fn00402A31
l004022F4:
l00402303_thunk_fn00402A31:
	call fn00402A31 (retsize: 0;)
	return
	// succ:  fn004022F4_exit
l00402309:
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	branch Test(PO,P) l0040230B_thunk_fn00402A31
	goto l00402311
	// succ:  l00402311 l0040230B_thunk_fn00402A31
l0040230B_thunk_fn00402A31:
	call fn00402A31 (retsize: 0;)
	return
	// succ:  fn004022F4_exit
l00402311:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	v17 = Mem0[esi:word16] - (real64) rArg0
	Mem0[esi:word16] = v17
	dh = 0x8E
	// succ:  l00402314_thunk_fn00402317
l00402314_thunk_fn00402317:
	call fn00402317 (retsize: 0;)
	return
	// succ:  fn004022F4_exit
fn004022F4_exit:


// fn00402317
// Return size: 0
void fn00402317()
fn00402317_entry:
	// succ:  l00402317
l00402317:
	esp = fp
	Mem0[esp - 0x00000034:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx - edi
	SCZO = cond(edx)
	dh = dh | dl
	SZO = cond(dh)
	C = false
	dh = 0x48
	edx = edx + edi
	SCZO = cond(edx)
	edx = edx - 0x00000001
	SZO = cond(edx)
	esi = esi - 0x00000001
	SZO = cond(esi)
	dl = bh
	branch Test(EQ,Z) l004029AA
	// succ:  l0040232D l004029AA
l0040232D:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	v13 = edx
	edx = edx
	edx = v13
	branch Test(NE,Z) l004029AA
	// succ:  l00402337 l004029AA
l00402337:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	C = true
	ecx = ecx & ebp
	SZO = cond(ecx)
	C = false
	Mem0[edi:word32] = 0xDC24448F
	esi = esi - 0x00000001
	SZO = cond(esi)
	esi = esi | eax
	SZO = cond(esi)
	C = false
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	dl = dl + cl
	SCZO = cond(dl)
	esi = esi + 0x00000001
	SZO = cond(esi)
	esi = ebx
	call fn00402AF5 (retsize: 4;)
	// succ:  l0040234B_thunk_fn00402350
l0040234B_thunk_fn00402350:
	call fn00402350 (retsize: 0;)
	return
	// succ:  fn00402317_exit
l004029AA:
	esi = esi | eax
	SZO = cond(esi)
	C = false
	esi = edi
	edx = edx + 0x00000001
	SZO = cond(edx)
	esi = esi + edx
	SCZO = cond(esi)
	esi = edi
	dl = dl | ah
	SZO = cond(dl)
	C = false
	edx = edx + edi
	SCZO = cond(edx)
	edx = edx ^ ebx
	SZO = cond(edx)
	C = false
	call fn00402992 (retsize: 4;)
	v20 = Mem0[ecx - 0x00000021:word32] | edx
	Mem0[ecx - 0x00000021:word32] = v20
	SZO = cond(Mem0[ecx - 0x00000021:word32])
	C = false
	cl = Mem0[ebx:byte]
	// succ:  l004029C1_thunk_fn004029C3
l004029C1_thunk_fn004029C3:
	call fn004029C3 (retsize: 0;)
	return
	// succ:  fn00402317_exit
fn00402317_exit:


// fn0040233D
// Return size: 0
void fn0040233D()
fn0040233D_entry:
	// succ:  l0040233D
l0040233D:
	esp = fp
	Mem0[esp - 0x00000024:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi - 0x00000001
	SZO = cond(esi)
	esi = esi | eax
	SZO = cond(esi)
	C = false
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	dl = dl + cl
	SCZO = cond(dl)
	esi = esi + 0x00000001
	SZO = cond(esi)
	esi = ebx
	call fn00402AF5 (retsize: 4;)
	// succ:  l0040234B_thunk_fn00402350
l0040234B_thunk_fn00402350:
	call fn00402350 (retsize: 0;)
	return
	// succ:  fn0040233D_exit
fn0040233D_exit:


// fn00402350
// Return size: 0
void fn00402350()
fn00402350_entry:
	// succ:  l00402350
l00402350:
	esp = fp
	v3 = Mem0[0x426EB4AA:byte] ^ 0x33
	Mem0[0x426EB4AA:byte] = v3
	SZO = cond(Mem0[0x426EB4AA:byte])
	C = false
	goto l00402350_thunk_fn00402357
	// succ:  l00402350_thunk_fn00402357
l00402350:
	v6 = Mem0[0x426EB4AA:byte] ^ 0x33
	Mem0[0x426EB4AA:byte] = v6
	SZO = cond(Mem0[0x426EB4AA:byte])
	C = false
	// succ:  l00402350_thunk_fn00402355
l00402350_thunk_fn00402355:
	call fn00402355 (retsize: 0;)
	return
	// succ:  fn00402350_exit
l00402350_thunk_fn00402357:
	call fn00402357 (retsize: 0;)
	return
	// succ:  fn00402350_exit
fn00402350_exit:


// fn00402355
// Return size: 0
void fn00402355()
fn00402355_entry:
	// succ:  l00402355
l00402355:
	esp = fp
	edx = edx + 0x00000001
	SZO = cond(edx)
	eax = eax ^ esi
	SZO = cond(eax)
	C = false
	goto l00402356_thunk_fn00402357
	// succ:  l00402356_thunk_fn00402357
l00402355:
	Mem0[ebx:byte] = 0xC3
	edi = edi + ecx
	SCZO = cond(edi)
	edi = edi + 0x00000001
	SZO = cond(edi)
	al = al - bh
	SCZO = cond(al)
	edx = edx + eax
	SCZO = cond(edx)
	esi = esi - edx
	SCZO = cond(esi)
	bh = bh ^ dh
	SZO = cond(bh)
	C = false
	esi = edx
	call fn00402185 (retsize: 4;)
l00402356_thunk_fn00402357:
	call fn00402357 (retsize: 0;)
	return
	// succ:  fn00402355_exit
fn00402355_exit:


// fn00402357
// Return size: 0
void fn00402357()
fn00402357_entry:
	// succ:  l00402357
l00402357:
	esp = fp
	Mem0[ebx:byte] = 0xC3
	edi = edi + ecx
	SCZO = cond(edi)
	edi = edi + 0x00000001
	SZO = cond(edi)
	al = al - bh
	SCZO = cond(al)
	edx = edx + eax
	SCZO = cond(edx)
	esi = esi - edx
	SCZO = cond(esi)
	bh = bh ^ dh
	SZO = cond(bh)
	C = false
	esi = edx
	call fn00402185 (retsize: 4;)
l00402357:
	eax = eax | ebx
	SZO = cond(eax)
	C = false
	edi = edi + ecx
	SCZO = cond(edi)
	edi = edi + 0x00000001
	SZO = cond(edi)
	al = al - bh
	SCZO = cond(al)
	edx = edx + eax
	SCZO = cond(edx)
	esi = esi - edx
	SCZO = cond(esi)
	bh = bh ^ dh
	SZO = cond(bh)
	C = false
	esi = edx
	call fn00402185 (retsize: 4;)
fn00402357_exit:


// fn00402372
// Return size: 0
void fn00402372()
fn00402372_entry:
	// succ:  l00402372
l00402372:
	dh = 0xD8
	esi = esi - 0x00000001
	SZO = cond(esi)
	eax = eax | edx
	SZO = cond(eax)
	C = false
	bh = bh | al
	SZO = cond(bh)
	C = false
	bh = bh + bl
	SCZO = cond(bh)
	ecx = ecx + 0x000002CE
	SCZO = cond(ecx)
	dh = cl
	bl = bl + al
	SCZO = cond(bl)
	ah = ch
	// succ:  l00402668
l00402668:
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	eax = ecx
	bh = bh - ch
	SCZO = cond(bh)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	ebx = ecx
	edx = edx + 0x00000001
	SZO = cond(edx)
	dh = dh ^ bh
	SZO = cond(dh)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	dl = dl - ch
	SCZO = cond(dl)
	bl = bl - ch
	SCZO = cond(bl)
	branch Test(EQ,Z) l0040267A_thunk_fn00402BA1
	goto l00402680
	// succ:  l00402680 l0040267A_thunk_fn00402BA1
l0040267A_thunk_fn00402BA1:
	call fn00402BA1 (retsize: 0;)
	return
	// succ:  fn00402372_exit
l00402680:
fn00402372_exit:


// fn00402392
// Return size: 0
void fn00402392()
fn00402392_entry:
	// succ:  l00402392
l00402392:
	esp = fp
	esp = esp + 0x00000004
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	dh = 0xF0
	edi = edi - 0x00000001
	SZO = cond(edi)
	dl = dl ^ ah
	SZO = cond(dl)
	C = false
	edx = edx ^ edi
	SZO = cond(edx)
	C = false
	edx = (word32) al
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	// succ:  l004023A5_thunk_fn004028E6
l004023A5_thunk_fn004028E6:
	call fn004028E6 (retsize: 0;)
	return
	// succ:  fn00402392_exit
fn00402392_exit:


// fn004023C3
// Return size: 4
void fn004023C3()
fn004023C3_entry:
	goto l004023C3
	// succ:  l004023C3
l004022B7:
	ebx = ebx + ecx
	SCZO = cond(ebx)
	call fn004020F1 (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	// succ:  l004022B7_thunk_fn004022B8 l004022C6_thunk_fn004022CB
l004022B7_thunk_fn004022B8:
	call fn004022B8 (retsize: 0;)
	return
	// succ:  fn004023C3_exit
l004022C6_thunk_fn004022CB:
	call fn004022CB (retsize: 0;)
	return
	// succ:  fn004023C3_exit
l004023C3:
	esp = fp
	esp = esp + 0x00000004
	esi = esi - edi
	SCZO = cond(esi)
	eax = eax + ebx
	SCZO = cond(eax)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bh = bh - bl
	SCZO = cond(bh)
	bh = bh + ch
	SCZO = cond(bh)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	bh = bh + ah
	SCZO = cond(bh)
	branch Test(EQ,Z) l004022B7
	// succ:  l004023DA l004022B7
l004023DA:
	v15 = cl
	cl = cl
	cl = v15
	branch Test(NE,Z) l004022B7
	// succ:  l004023E2 l004022B7
l004023E2:
	edi = Mem0[eax + 0x4A2F3557:word32] *s 0xD8034CB1
	SCZO = cond(edi)
	// succ:  l004023E2_thunk_fn004023E7
l004023E2_thunk_fn004023E7:
	call fn004023E7 (retsize: 0;)
	return
	// succ:  fn004023C3_exit
fn004023C3_exit:


// fn004023E7
// Return size: 0
void fn004023E7()
fn004023E7_entry:
	// succ:  l004023E7
l004023E7:
	esp = fp
	edx = edx - 0x00000001
	SZO = cond(edx)
	cl = 0x4C
	ebx = ebx + eax
	SCZO = cond(ebx)
	bl = bl + bh
	SCZO = cond(bl)
	cl = cl + ah
	SCZO = cond(cl)
	bl = bl | ch
	SZO = cond(bl)
	C = false
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	ecx = ecx | edx
	SZO = cond(ecx)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	ch = ch + bh
	SCZO = cond(ch)
	branch Test(OV,O) l004023FA_thunk_fn00401EC7
	goto l004023FA_thunk_fn00402400
	// succ:  l004023FA_thunk_fn00402400 l004023FA_thunk_fn00401EC7
l004023E7:
	bl = bl + bh
	SCZO = cond(bl)
	cl = cl + ah
	SCZO = cond(cl)
	bl = bl | ch
	SZO = cond(bl)
	C = false
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	ecx = ecx | edx
	SZO = cond(ecx)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	ch = ch + bh
	SCZO = cond(ch)
	branch Test(OV,O) l00401EC7
	goto l004023F5_thunk_fn00402400
	// succ:  l004023F5_thunk_fn00402400 l004023F5_thunk_fn00401EC7
l004023F5_thunk_fn00401EC7:
	call fn00401EC7 (retsize: 0;)
	return
	// succ:  fn004023E7_exit
l004023F5_thunk_fn00402400:
	call fn00402400 (retsize: 0;)
	return
	// succ:  fn004023E7_exit
l004023FA_thunk_fn00401EC7:
	call fn00401EC7 (retsize: 0;)
	return
	// succ:  fn004023E7_exit
l004023FA_thunk_fn00402400:
	call fn00402400 (retsize: 0;)
	return
	// succ:  fn004023E7_exit l004023FA_thunk_fn00402400
l004023FA_thunk_fn00402400:
	call fn00402400 (retsize: 0;)
	return
	// succ:  fn004023E7_exit
fn004023E7_exit:


// fn00402400
// Return size: 0
void fn00402400()
fn00402400_entry:
	// succ:  l00402400
l00402400:
	branch Test(UGT,CZ) l00402402
	// succ:  l00402402
l00402402:
	branch Test(NO,O) l00401EC7
	goto l00402408
	// succ:  l00402408 l00402402_thunk_fn00401EC7
l00402402_thunk_fn00401EC7:
	call fn00401EC7 (retsize: 0;)
	return
	// succ:  fn00402400_exit
l00402408:
	edx = edx - ecx
	SCZO = cond(edx)
	C = false
	Mem0[edi - 0x00000009:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00402400_exit
fn00402400_exit:


// fn0040242A
// Return size: 0
void fn0040242A()
fn0040242A_entry:
	// succ:  l0040242A
l0040242A:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = ebx
	ebx = v3
	v5 = dl
	dl = dl
	dl = v5
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bl = cl
	bh = cl
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ebx = ebx + esi
	SCZO = cond(ebx)
	bl = bl - dl
	SCZO = cond(bl)
	// succ:  l0040243E_thunk_fn00401FC9
l0040243E_thunk_fn00401FC9:
	call fn00401FC9 (retsize: 0;)
	return
	// succ:  fn0040242A_exit
fn0040242A_exit:


// fn00402463
// Return size: 0
void fn00402463()
fn00402463_entry:
	// succ:  l00402463
l00402463:
	esp = fp
	Mem0[esp:word32] = edi
fn00402463_exit:


// fn0040247C
// Return size: 0
void fn0040247C()
fn0040247C_entry:
	// succ:  l0040247C
l0040247C:
	esp = fp
	Mem0[esp - 0x00000010:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax + ecx
	SCZO = cond(eax)
	eax = esi
	ah = ah ^ bh
	SZO = cond(ah)
	C = false
	bh = 0xCD
	edx = edx + 0x00000001
	SZO = cond(edx)
	dl = dl + dh
	SCZO = cond(dl)
	// succ:  l0040248B_thunk_fn00402C14
l0040248B_thunk_fn00402C14:
	call fn00402C14 (retsize: 0;)
	return
	// succ:  fn0040247C_exit
fn0040247C_exit:


// fn004024E1
// Return size: 0
void fn004024E1()
fn004024E1_entry:
	// succ:  l004024E1
l004024E1:
	edi = edi ^ esi
	SZO = cond(edi)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	bl = dh
	cl = cl - dh
	SCZO = cond(cl)
	bl = bl - cl
	SCZO = cond(bl)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bh = bh ^ ch
	SZO = cond(bh)
	C = false
	ecx = ecx + edi
	SCZO = cond(ecx)
	cl = cl ^ dl
	SZO = cond(cl)
	C = false
	ecx = ecx + esi
	SCZO = cond(ecx)
fn004024E1_exit:


// fn00402518
// Return size: 4
void fn00402518()
fn00402518_entry:
	// succ:  l00402518
l00402518:
	esp = fp
	al = al - dl
	SCZO = cond(al)
	goto l00402518_thunk_fn00402519
	// succ:  l00402518_thunk_fn00402519
l00402518:
l00402518_thunk_fn00402519:
	call fn00402519 (retsize: 4;)
	return
	// succ:  fn00402518_exit
fn00402518_exit:


// fn00402519
// Return size: 4
void fn00402519()
fn00402519_entry:
	goto l00402519
	// succ:  l00402519
l0040240F:
	eax = eax | ebx
	SZO = cond(eax)
	C = false
	edi = edi + eax
	SCZO = cond(edi)
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	bl = bl + cl
	SCZO = cond(bl)
	edx = edx | edi
	SZO = cond(edx)
	C = false
	ecx = eax
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	cl = cl + dl
	SCZO = cond(cl)
	dh = dh ^ cl
	SZO = cond(dh)
	C = false
	return
	// succ:  fn00402519_exit
l00402519:
	esp = fp
	return
	// succ:  fn00402519_exit
l00402519:
	esi = esi + eax
	SCZO = cond(esi)
	dl = dl - bh
	SCZO = cond(dl)
	dl = dl ^ cl
	SZO = cond(dl)
	C = false
	eax = ebx
	eax = eax - 0x00000001
	SZO = cond(eax)
	al = cl
	edx = edx + 0x00000001
	SZO = cond(edx)
	goto l0040240F
	// succ:  l0040240F
fn00402519_exit:


// fn00402530
// Return size: 0
void fn00402530()
fn00402530_entry:
	// succ:  l00402530
l00402530:
	esp = fp
	eax = eax - 0x00000001
	SZO = cond(eax)
	eax = eax - 0x00000001
	SZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00003000
	ah = -ah
	SCZO = cond(ah)
	C = ah == 0x00
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	eax = eax ^ esi
	SZO = cond(eax)
	C = false
	ecx = ecx ^ edx
	SZO = cond(ecx)
	C = false
	ebx = ebx ^ edi
	SZO = cond(ebx)
	C = false
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	branch Test(ULT,C) l00402BC9
	goto l00402549
	// succ:  l00402549 l00402543_thunk_fn00402BC9
l00402530:
l00402543_thunk_fn00402BC9:
	call fn00402BC9 (retsize: 0;)
	return
	// succ:  fn00402530_exit
l00402549:
	ecx = ecx
	ch = ch
	branch Test(UGE,C) l00402BC9
	goto l00402553
	// succ:  l00402553 l0040254D_thunk_fn00402BC9
l0040254D_thunk_fn00402BC9:
	call fn00402BC9 (retsize: 0;)
	return
	// succ:  fn00402530_exit
l00402553:
	ds = Mem0[esp:selector]
	esp = esp + 0x00000002
	edi = edi - 0x00000001
	SZO = cond(edi)
	SCZO = cond(Mem0[esi:byte] - Mem0[edi:byte])
	esi = esi + 0x00000001
	edi = edi + 0x00000001
	al = Mem0[esi:byte]
	esi = esi + 0x00000001
	// succ:  l00402556_thunk_fn00402557
l00402556_thunk_fn00402557:
	call fn00402557 (retsize: 0;)
	return
	// succ:  fn00402530_exit
l0040256C_thunk_fn004021C0:
	call fn004021C0 (retsize: 0;)
	return
	// succ:  fn00402530_exit
fn00402530_exit:


// fn00402557
// Return size: 0
void fn00402557()
fn00402557_entry:
	// succ:  l00402557
l00402557:
	esp = fp
	dl = dl ^ al
	SZO = cond(dl)
	C = false
	dh = dh ^ ch
	SZO = cond(dh)
	C = false
	ah = ah ^ 0xEE
	SZO = cond(ah)
	C = false
	edx = eax
	dh = ah
	dl = dl - bh
	SCZO = cond(dl)
	edx = edi
	edx = edx + edi
	SCZO = cond(edx)
	esi = esi - eax
	SCZO = cond(esi)
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	// succ:  l0040256C_thunk_fn004021C0 l0040256C_thunk_fn004021C0
l00402557:
	dl = dl ^ al
	SZO = cond(dl)
	C = false
	dh = dh ^ ch
	SZO = cond(dh)
	C = false
	ah = ah ^ 0xEE
	SZO = cond(ah)
	C = false
	edx = eax
	dh = ah
	dl = dl - bh
	SCZO = cond(dl)
	edx = edi
	edx = edx + edi
	SCZO = cond(edx)
	esi = esi - eax
	SCZO = cond(esi)
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
l0040256C_thunk_fn004021C0:
	call fn004021C0 (retsize: 0;)
	return
	// succ:  fn00402557_exit
fn00402557_exit:


// fn00402578
// Return size: 0
void fn00402578()
fn00402578_entry:
	// succ:  l00402578
l00402578:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = edi
	edi = v3
	di = di
	si = si
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = bl - dl
	SCZO = cond(bl)
	edi = edi - 0x00000001
	SZO = cond(edi)
	bh = 0xCB
	call fn004026B7 (retsize: 4;)
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[ebx + 0xB2255C19:word32] *s 0xFFFFFFAD
	SCZO = cond(ecx)
	// succ:  l0040258D_thunk_fn00402594
l0040258D_thunk_fn00402594:
	call fn00402594 (retsize: 0;)
	return
	// succ:  fn00402578_exit
fn00402578_exit:


// fn00402594
// Return size: 0
void fn00402594()
fn00402594_entry:
	// succ:  l00402594
l00402594:
	esp = fp
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	cl = cl + dh
	SCZO = cond(cl)
	esi = ebx
	ebx = ebx + ecx
	SCZO = cond(ebx)
	esi = esi | eax
	SZO = cond(esi)
	C = false
	goto l004025A0_thunk_fn004024E1
	// succ:  l004025A0_thunk_fn004024E1
l00402594:
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	cl = cl + dh
	SCZO = cond(cl)
	esi = ebx
	ebx = ebx + ecx
	SCZO = cond(ebx)
	esi = esi | eax
	SZO = cond(esi)
	C = false
	// succ:  l0040259E_thunk_fn004024E1
l0040259E_thunk_fn004024E1:
	call fn004024E1 (retsize: 0;)
	return
	// succ:  fn00402594_exit
l004025A0_thunk_fn004024E1:
	call fn004024E1 (retsize: 0;)
	return
	// succ:  fn00402594_exit
fn00402594_exit:


// fn004025AC
// Return size: 0
void fn004025AC()
fn004025AC_entry:
	// succ:  l004025AC
l004025AC:
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	al = 0x83
	edx = edx + 0x00000001
	SZO = cond(edx)
	edx = edx + 0x00000001
	SZO = cond(edx)
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	// succ:  l004025B4_thunk_fn004025B6
l004025B4_thunk_fn004025B6:
	call fn004025B6 (retsize: 0;)
	return
	// succ:  fn004025AC_exit
fn004025AC_exit:


// fn004025B6
// Return size: 0
void fn004025B6()
fn004025B6_entry:
	// succ:  l004025B6
l004025B6:
	esp = fp
	eax = eax - 0x00000001
	SZO = cond(eax)
	edx = edx - edi
	SCZO = cond(edx)
	eax = eax + 0x00000001
	SZO = cond(eax)
	goto l004025BA_thunk_fn004022F4
	// succ:  l004025BA_thunk_fn004022F4
l004025B6:
	eax = eax - 0x00000001
	SZO = cond(eax)
	edx = edx - edi
	SCZO = cond(edx)
	eax = eax + 0x00000001
	SZO = cond(eax)
	goto l004025BA_thunk_fn004022F4
	// succ:  l004025BA_thunk_fn004022F4
l004025BA_thunk_fn004022F4:
	call fn004022F4 (retsize: 0;)
	return
	// succ:  fn004025B6_exit
l004025BA_thunk_fn004022F4:
	call fn004022F4 (retsize: 0;)
	return
	// succ:  fn004025B6_exit
fn004025B6_exit:


// fn004025EF
// Return size: 0
void fn004025EF()
fn004025EF_entry:
	// succ:  l004025EF
l004025EF:
	esp = fp
	Mem0[esp - 0x00000020:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx - esi
	SCZO = cond(edx)
	ch = ch - dh
	SCZO = cond(ch)
	ecx = eax
	edi = edi | eax
	SZO = cond(edi)
	C = false
	edx = edx | eax
	SZO = cond(edx)
	C = false
	ah = ah - dh
	SCZO = cond(ah)
	branch Test(SG,S) l004025FF_thunk_fn00402355
	goto l00402605
	// succ:  l00402605 l004025FF_thunk_fn00402355
l004025FF_thunk_fn00402355:
	call fn00402355 (retsize: 0;)
	return
	// succ:  fn004025EF_exit
l00402605:
	edx = edx
	dh = dh
	branch Test(NS,S) l00402609_thunk_fn00402355
	goto l0040260F
	// succ:  l0040260F l00402609_thunk_fn00402355
l00402609_thunk_fn00402355:
	call fn00402355 (retsize: 0;)
	return
	// succ:  fn004025EF_exit
l0040260F:
	esp = esp & Mem0[edx + 0x00000074:word32]
	SZO = cond(esp)
	C = false
	SCZO = cond(Mem0[esi:byte] - Mem0[edi:byte])
	esi = esi + 0x00000001
	edi = edi + 0x00000001
	ecx = ecx - 0x00000001
	branch Test(NE,Z) && ecx != 0x00000000 l00402613_thunk_fn004025B6
	goto l00402615
	// succ:  l00402615 l00402613_thunk_fn004025B6
l00402613_thunk_fn004025B6:
	call fn004025B6 (retsize: 0;)
	return
	// succ:  fn004025EF_exit
l00402615:
	branch Test(NO,O) TMP!
fn004025EF_exit:


// fn00402616
// Return size: 0
void fn00402616()
fn00402616_entry:
	// succ:  l00402616
l00402616:
	esp = fp
	Mem0[esp - 0x0000000C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	cl = 0x4E
	ah = cl
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	dh = 0xDB
	dl = bl
	al = al + ch
	SCZO = cond(al)
	branch Test(ULT,C) TMP!
fn00402616_exit:


// fn00402638
// Return size: 0
void fn00402638()
fn00402638_entry:
	// succ:  l00402638
l00402638:
	esp = fp
	dl = ch
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	dh = dh ^ cl
	SZO = cond(dh)
	C = false
	dl = dl - ah
	SCZO = cond(dl)
	edx = edx + esi
	SCZO = cond(edx)
	dl = al
	call fn00402B81 (retsize: 4;)
	Mem0[ecx:int64] = (int64) rArg0
l00402638:
fn00402638_exit:


// fn0040268C
// Return size: 0
void fn0040268C()
fn0040268C_entry:
	// succ:  l0040268C
l0040268C:
	esp = fp
	ebx = ebx - ecx
	SCZO = cond(ebx)
	bl = bl - cl
	SCZO = cond(bl)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edx = eax + 0x000000F8
	bh = bh ^ al
	SZO = cond(bh)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bl = bl - dl
	SCZO = cond(bl)
	branch Test(ULT,C) l0040269C_thunk_fn00401E68
	goto l004026A2
	// succ:  l004026A2 l0040269C_thunk_fn00401E68
l0040268C:
l0040269C_thunk_fn00401E68:
	call fn00401E68 (retsize: 0;)
	return
	// succ:  fn0040268C_exit
l004026A2:
	// succ:  l004026A8
l004026A8:
	branch Test(UGE,C) l004026A8_thunk_fn00401E68
	goto l004026AE
	// succ:  l004026AE l004026A8_thunk_fn00401E68
l004026A8_thunk_fn00401E68:
	call fn00401E68 (retsize: 0;)
	return
	// succ:  fn0040268C_exit
l004026AE:
	__outdw(edx, eax)
	esi = esi + 0x00000004
	Mem0[edx + 0x00000067:word32] = ecx
	dl = dl | ah
	SZO = cond(dl)
	C = false
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	esi = esi + eax
	SCZO = cond(esi)
	// succ:  l004026B5_thunk_fn004026B7
l004026B5_thunk_fn004026B7:
	call fn004026B7 (retsize: 0;)
	return
	// succ:  fn0040268C_exit
fn0040268C_exit:


// fn004026B7
// Return size: 0
void fn004026B7()
fn004026B7_entry:
	// succ:  l004026B7
l004026B7:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = eax
	eax = v3
	branch Test(SG,S) l004026BC
	// succ:  l004026BC
l004026BC:
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	bl = bl + bh
	SCZO = cond(bl)
	bh = bh ^ ah
	SZO = cond(bh)
	C = false
	bh = bh ^ cl
	SZO = cond(bh)
	C = false
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bl = bl - cl
	SCZO = cond(bl)
	branch Test(ULT,C) l004026CB_thunk_fn00402800
	goto l004026D1
	// succ:  l004026D1 l004026CB_thunk_fn00402800
l004026CB_thunk_fn00402800:
	call fn00402800 (retsize: 0;)
	return
	// succ:  fn004026B7_exit
l004026D1:
	branch Test(NE,Z) l004026D3
	// succ:  l004026D3
l004026D3:
	v16 = ch
	ch = ch
	ch = v16
	branch Test(UGE,C) l004026D5_thunk_fn00402800
	goto l004026DB
	// succ:  l004026DB l004026D5_thunk_fn00402800
l004026D5_thunk_fn00402800:
	call fn00402800 (retsize: 0;)
	return
	// succ:  fn004026B7_exit
l004026DB:
	__outb(edx, al)
	esi = esi + 0x00000001
	Mem0[edi:byte] = al
	edi = edi + 0x00000001
	v21 = Mem0[esi:word32]
	Mem0[edi:word32] = v21
	esi = esi + 0x00000004
	edi = edi + 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	eax = eax - 0x0424648D - C
	SCZO = cond(eax)
	// succ:  l004026E2_thunk_fn004026E7
l004026E2_thunk_fn004026E7:
	call fn004026E7 (retsize: 0;)
	return
	// succ:  fn004026B7_exit
fn004026B7_exit:


// fn004026E3
// Return size: 0
void fn004026E3()
fn004026E3_entry:
	// succ:  l004026E3
l004026E3:
	esp = fp
	esp = esp + 0x00000004
	call fn00402158 (retsize: 4;)
	// succ:  l004026E3_thunk_fn004026E7 l004026F1_thunk_fn004026F6
l004026E3_thunk_fn004026E7:
	call fn004026E7 (retsize: 0;)
	return
	// succ:  fn004026E3_exit
l004026F1_thunk_fn004026F6:
	call fn004026F6 (retsize: 0;)
	return
	// succ:  fn004026E3_exit
fn004026E3_exit:


// fn004026E7
// Return size: 0
void fn004026E7()
fn004026E7_entry:
	// succ:  l004026E7
l004026E7:
	esp = fp
	eax = eax - ebx
	SCZO = cond(eax)
	eax = eax - ebx
	SCZO = cond(eax)
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	edx = eax
	ah = ah - ch
	SCZO = cond(ah)
	call fn00402158 (retsize: 4;)
	goto l004026F1_thunk_fn004026F6
	// succ:  l004026F1_thunk_fn004026F6
l004026E7:
	eax = eax - ebx
	SCZO = cond(eax)
	eax = eax - ebx
	SCZO = cond(eax)
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	edx = eax
	ah = ah - ch
	SCZO = cond(ah)
l004026F1_thunk_fn004026F6:
	call fn004026F6 (retsize: 0;)
	return
	// succ:  fn004026E7_exit
fn004026E7_exit:


// fn004026F6
// Return size: 0
void fn004026F6()
fn004026F6_entry:
	// succ:  l004026F6
l004026F6:
	esp = fp
	__lock()
l004026F6:
	__lock()
fn004026F6_exit:


// fn004026FD
// Return size: 0
void fn004026FD()
fn004026FD_entry:
	// succ:  l004026FD
l004026FD:
	esp = fp
	ah = ah - cl
	SCZO = cond(ah)
	eax = eax - esi
	SCZO = cond(eax)
	dh = al
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	bh = 0xE0
	bh = bl
	dl = ch
	esi = esi - 0x00000001
	SZO = cond(esi)
	edx = edx + edi
	SCZO = cond(edx)
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	branch Test(ULT,C) l00402710_thunk_fn00402200
	goto l00402716
	// succ:  l00402716 l00402710_thunk_fn00402200
l004026FD:
l00402710_thunk_fn00402200:
	call fn00402200 (retsize: 0;)
	return
	// succ:  fn004026FD_exit
l00402716:
	// succ:  l0040271B
l0040271B:
	branch Test(UGE,C) l0040271B_thunk_fn00402200
	goto l00402721
	// succ:  l00402721 l0040271B_thunk_fn00402200
l0040271B_thunk_fn00402200:
	call fn00402200 (retsize: 0;)
	return
	// succ:  fn004026FD_exit
l00402721:
	v18 = eax
	eax = ebx
	ebx = v18
fn004026FD_exit:


// fn00402727
// Return size: 0
void fn00402727()
fn00402727_entry:
	// succ:  l00402727
l00402727:
	esp = esp + 0x00000004
	bl = bl ^ bh
	SZO = cond(bl)
	C = false
	edx = edx + 0x0000002C
	SCZO = cond(edx)
	ch = ch ^ dl
	SZO = cond(ch)
	C = false
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	edi = edi - 0x00000001
	SZO = cond(edi)
	bh = bh - dl
	SCZO = cond(bh)
	esi = esi + edi
	SCZO = cond(esi)
	branch Test(LT,SO) l0040286A
	// succ:  l00402742 l0040286A
l00402742:
l0040286A:
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	cl = cl | bl
	SZO = cond(cl)
	C = false
	cl = cl - al
	SCZO = cond(cl)
	ch = -ch
	SCZO = cond(ch)
	C = ch == 0x00
	bl = bl ^ ah
	SZO = cond(bl)
	C = false
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	// succ:  l00402875_thunk_fn00401E4E
l00402875_thunk_fn00401E4E:
	call fn00401E4E (retsize: 0;)
	return
	// succ:  fn00402727_exit
fn00402727_exit:


// fn0040274F
// Return size: 4
void fn0040274F()
fn0040274F_entry:
	goto l0040274F
	// succ:  l0040274F
l004024B4:
l004024FF:
	esi = esi + 0x00000001
	SZO = cond(esi)
	dh = dh + ah
	SCZO = cond(dh)
	dl = dl + dh
	SCZO = cond(dl)
	esi = esi + 0x00000001
	SZO = cond(esi)
	esi = esi + ecx
	SCZO = cond(esi)
	edx = edx | eax
	SZO = cond(edx)
	C = false
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	call fn00401F4D (retsize: 4;)
	branch Test(PE,P) l004024B4
	// succ:  l00402512 l004024B4
l00402512:
	cl = 0x36
	v22 = eax
	eax = edx
	edx = v22
	ecx = ecx - Mem0[gs:ebx + 0x0000002A:word32] - C
	SCZO = cond(ecx)
	// succ:  l00402515_thunk_fn00402519
l00402515_thunk_fn00402519:
	call fn00402519 (retsize: 4;)
	return
	// succ:  fn0040274F_exit
l0040274F:
	dh = dh ^ cl
	SZO = cond(dh)
	C = false
	al = ah
	edx = edx - 0x00000001
	SZO = cond(edx)
	edx = edx + eax
	SCZO = cond(edx)
	dl = dl + bh
	SCZO = cond(dl)
	esi = esi - edi
	SCZO = cond(esi)
	edx = edx | edi
	SZO = cond(edx)
	C = false
	goto l004024FF
	// succ:  l004024FF
fn0040274F_exit:


// fn00402765
// Return size: 0
void fn00402765()
fn00402765_entry:
	// succ:  l00402765
l00402765:
	esp = fp
	ecx = ecx - eax
	SCZO = cond(ecx)
	ch = bl
	bh = bh ^ bl
	SZO = cond(bh)
	C = false
	dh = dh | dl
	SZO = cond(dh)
	C = false
	ecx = ecx ^ eax
	SZO = cond(ecx)
	C = false
	dh = dh | ch
	SZO = cond(dh)
	C = false
	edi = edi + esi
	SCZO = cond(edi)
	ecx = ebx
	dh = dh + bl
	SCZO = cond(dh)
	esi = esi - ecx
	SCZO = cond(esi)
	// succ:  l00402779_thunk_fn00401F7B
l00402779_thunk_fn00401F7B:
	call fn00401F7B (retsize: 0;)
	return
	// succ:  fn00402765_exit
fn00402765_exit:


// fn00402786
// Return size: 0
void fn00402786()
fn00402786_entry:
	// succ:  l00402786
l00402786:
	esp = fp
	Mem0[esp - 0x00000010:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh - ah
	SCZO = cond(bh)
	al = al ^ bh
	SZO = cond(al)
	C = false
	dh = 0x37
	eax = eax - 0x00000001
	SZO = cond(eax)
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	call fn0040233D (retsize: 4;)
	es = Mem0[esp:selector]
	esp = esp + 0x00000002
fn00402786_exit:


// fn0040279F
// Return size: 0
void fn0040279F()
fn0040279F_entry:
	// succ:  l0040279F
l0040279F:
	esp = fp
	esi = esi - edx
	SCZO = cond(esi)
	bh = 0x4E
	esi = esi - edi
	SCZO = cond(esi)
	bh = 0xC6
	bh = al
	bl = bl | bh
	SZO = cond(bl)
	C = false
	bh = 0xD9
	esi = esi - edi
	SCZO = cond(esi)
	goto l004027AF_thunk_fn0040268C
	// succ:  l004027AF_thunk_fn0040268C
l0040279F:
l004027AF_thunk_fn0040268C:
	call fn0040268C (retsize: 0;)
	return
	// succ:  fn0040279F_exit
fn0040279F_exit:


// fn00402800
// Return size: 0
void fn00402800()
fn00402800_entry:
	// succ:  l00402800
l00402800:
	esp = fp
	bl = bl | ch
	SZO = cond(bl)
	C = false
	bl = bl + al
	SCZO = cond(bl)
	eax = eax + Mem0[eax + 0x0000003C:word32]
	SCZO = cond(eax)
	esi = esi | edi
	SZO = cond(esi)
	C = false
	bl = bl | cl
	SZO = cond(bl)
	C = false
	bh = 0xEC
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	branch Test(ULE,CZ) l0040280E_thunk_fn0040279F
	goto l00402810
	// succ:  l00402810 l0040280E_thunk_fn0040279F
l00402800:
l0040280E_thunk_fn0040279F:
	call fn0040279F (retsize: 0;)
	return
	// succ:  fn00402800_exit
l00402810:
	bl = bl
	branch Test(UGT,CZ) l00402812_thunk_fn0040279F
	goto l00402814
	// succ:  l00402814 l00402812_thunk_fn0040279F
l00402812_thunk_fn0040279F:
	call fn0040279F (retsize: 0;)
	return
	// succ:  fn00402800_exit
l00402814:
	esp = esp - 0x00000004
	Mem0[esp:word32] = SCZDOP
	al = al & 0xFD
	SZO = cond(al)
	C = false
	esp = esp - 0x00000001
	SZO = cond(esp)
	v17 = eax
	eax = ecx
	ecx = v17
	// succ:  l00402819_thunk_fn0040281A
l00402819_thunk_fn0040281A:
	call fn0040281A (retsize: 0;)
	return
	// succ:  fn00402800_exit
fn00402800_exit:


// fn0040281A
// Return size: 0
void fn0040281A()
fn0040281A_entry:
	// succ:  l0040281A
l0040281A:
	esp = fp
	bh = bh ^ al
	SZO = cond(bh)
	C = false
	bh = bh | ah
	SZO = cond(bh)
	C = false
	bl = bl ^ ch
	SZO = cond(bl)
	C = false
	bh = bh ^ ah
	SZO = cond(bh)
	C = false
	ebx = ecx
	edi = edi + edx
	SCZO = cond(edi)
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	call fn00402270 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0000004F
	C = true
	C = __das(al, &al)
	edx = edx + Mem0[eax + 0xDD8AFB2B:word32] + C
	SCZO = cond(edx)
	goto l00402832_thunk_fn00402838
	// succ:  l00402832_thunk_fn00402838
l0040281A:
l00402832_thunk_fn00402838:
	call fn00402838 (retsize: 0;)
	return
	// succ:  fn0040281A_exit
fn0040281A_exit:


// fn00402834
// Return size: 0
void fn00402834()
fn00402834_entry:
	// succ:  l00402834
l00402834:
	esp = fp
	edi = edi - ebx
	SCZO = cond(edi)
	bl = ch
	goto l00402836_thunk_fn00402838
	// succ:  l00402836_thunk_fn00402838
l00402834:
l00402836_thunk_fn00402838:
	call fn00402838 (retsize: 0;)
	return
	// succ:  fn00402834_exit
l00402844_thunk_fn0040281A:
	call fn0040281A (retsize: 0;)
	return
	// succ:  fn00402834_exit
l00402844_thunk_fn00402846:
	call fn00402846 (retsize: 0;)
	return
	// succ:  fn00402834_exit l00402844_thunk_fn00402846
l00402844_thunk_fn00402846:
	call fn00402846 (retsize: 0;)
	return
	// succ:  fn00402834_exit
fn00402834_exit:


// fn00402838
// Return size: 0
void fn00402838()
fn00402838_entry:
	// succ:  l00402838
l00402838:
	esp = fp
	bh = bh ^ bl
	SZO = cond(bh)
	C = false
	eax = eax | eax
	SZO = cond(eax)
	C = false
	branch Test(NE,Z) l0040283C_thunk_fn00401EED
	goto l0040283C_thunk_fn00402842
	// succ:  l0040283C_thunk_fn00402842 l0040283C_thunk_fn00401EED
l00402838:
	bh = bh ^ bl
	SZO = cond(bh)
	C = false
	eax = eax | eax
	SZO = cond(eax)
	C = false
	branch Test(NE,Z) l0040283C_thunk_fn00401EED
	goto l0040283C_thunk_fn00402842
	// succ:  l0040283C_thunk_fn00402842 l0040283C_thunk_fn00401EED
l0040283C_thunk_fn00401EED:
	call fn00401EED (retsize: 0;)
	return
	// succ:  fn00402838_exit
l0040283C_thunk_fn00401EED:
	call fn00401EED (retsize: 0;)
	return
	// succ:  fn00402838_exit
l0040283C_thunk_fn00402842:
	call fn00402842 (retsize: 0;)
	return
	// succ:  fn00402838_exit l0040283C_thunk_fn00402842
l0040283C_thunk_fn00402842:
	call fn00402842 (retsize: 0;)
	return
	// succ:  fn00402838_exit
l0040283C_thunk_fn00402842:
	call fn00402842 (retsize: 0;)
	return
	// succ:  fn00402838_exit
fn00402838_exit:


// fn00402842
// Return size: 0
void fn00402842()
fn00402842_entry:
	// succ:  l00402842
l00402842:
	edi = edi + 0x00000001
	SZO = cond(edi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	branch Test(OV,O) l00402844_thunk_fn0040281A
	goto l00402844_thunk_fn00402846
	// succ:  l00402844_thunk_fn00402846 l00402844_thunk_fn0040281A
fn00402842_exit:


// fn00402846
// Return size: 0
void fn00402846()
fn00402846_entry:
	// succ:  l00402846
l00402846:
	esp = fp
	dl = dl
	branch Test(NO,O) l00402848_thunk_fn0040281A
	goto l0040284A
	// succ:  l0040284A l00402848_thunk_fn0040281A
l00402846:
l00402848_thunk_fn0040281A:
	call fn0040281A (retsize: 0;)
	return
	// succ:  fn00402846_exit
l0040284A:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	edx = edx - 0x00000001
	SZO = cond(edx)
	__outb(0x42, al)
	ebx = 0x648DD00B
	al = al & 0x04
	SZO = cond(al)
	C = false
	cl = cl - bl
	SCZO = cond(cl)
	bh = 0xC2
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	cl = cl - dh
	SCZO = cond(cl)
	edx = edx + 0x00000001
	SZO = cond(edx)
	call eax (retsize: 4;)
	// succ:  l00402860_thunk_fn0040213B
l00402860_thunk_fn0040213B:
	call fn0040213B (retsize: 0;)
	return
	// succ:  fn00402846_exit
fn00402846_exit:


// fn00402851
// Return size: 0
void fn00402851()
fn00402851_entry:
	// succ:  l00402851
l00402851:
	esp = fp
	esp = esp + 0x00000004
	cl = cl - bl
	SCZO = cond(cl)
	bh = 0xC2
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	cl = cl - dh
	SCZO = cond(cl)
	edx = edx + 0x00000001
	SZO = cond(edx)
	call eax (retsize: 4;)
	// succ:  l00402860_thunk_fn0040213B
l00402860_thunk_fn0040213B:
	call fn0040213B (retsize: 0;)
	return
	// succ:  fn00402851_exit
fn00402851_exit:


// fn0040287E
// Return size: 0
void fn0040287E()
fn0040287E_entry:
	// succ:  l0040287E
l0040287E:
	esp = fp
	Mem0[esp - 0x00000018:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx | ecx
	SZO = cond(edx)
	C = false
	esi = esi + edi
	SCZO = cond(esi)
	edx = edx - 0x00000001
	SZO = cond(edx)
	ah = bl
	bh = bh + dl
	SCZO = cond(bh)
	edi = edi + 0x00000001
	SZO = cond(edi)
	// succ:  l004029DC
l004029DC:
	esi = esi - 0x00000001
	SZO = cond(esi)
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	edi = edi + edx
	SCZO = cond(edi)
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi + edx
	SCZO = cond(edi)
	edx = edx + esi
	SCZO = cond(edx)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bl = 0x8A
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	call fn00402392 (retsize: 4;)
	esp = esp + 0x00000001
	SZO = cond(esp)
	v16 = eax
	eax = ecx
	ecx = v16
	ebx = ebx & Mem0[ebx + 0xCC24448F:word32]
	SZO = cond(ebx)
	C = false
	esi = esi | ecx
	SZO = cond(esi)
	C = false
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	eax = eax + ecx
	SCZO = cond(eax)
	esi = esi | edx
	SZO = cond(esi)
	C = false
fn0040287E_exit:


// fn004028AC
// Return size: 0
void fn004028AC()
fn004028AC_entry:
	// succ:  l004028AC
l004028AC:
	esp = fp
	edx = edx | eax
	SZO = cond(edx)
	C = false
	goto l004028AC_thunk_fn004028AE
	// succ:  l004028AC_thunk_fn004028AE
l004028AC:
l004028AC_thunk_fn004028AE:
	call fn004028AE (retsize: 0;)
	return
	// succ:  fn004028AC_exit
fn004028AC_exit:


// fn004028AE
// Return size: 0
void fn004028AE()
fn004028AE_entry:
	// succ:  l004028AE
l004028AE:
	esp = fp
	edx = edx - 0x00000001
	SZO = cond(edx)
	al = al + ah
	SCZO = cond(al)
	dl = dl - al
	SCZO = cond(dl)
	eax = eax ^ edi
	SZO = cond(eax)
	C = false
	dh = ch
	edx = edx | edi
	SZO = cond(edx)
	C = false
	goto l004028B9_thunk_fn004025AC
	// succ:  l004028B9_thunk_fn004025AC
l004028AE:
	edx = edx - 0x00000001
	SZO = cond(edx)
	al = al + ah
	SCZO = cond(al)
	dl = dl - al
	SCZO = cond(dl)
	eax = eax ^ edi
	SZO = cond(eax)
	C = false
	dh = ch
	edx = edx | edi
	SZO = cond(edx)
	C = false
	// succ:  l004028B7_thunk_fn004025AC
l004028B7_thunk_fn004025AC:
	call fn004025AC (retsize: 0;)
	return
	// succ:  fn004028AE_exit
l004028B9_thunk_fn004025AC:
	call fn004025AC (retsize: 0;)
	return
	// succ:  fn004028AE_exit
fn004028AE_exit:


// fn004028E6
// Return size: 0
void fn004028E6()
fn004028E6_entry:
	// succ:  l004028E6
l004028E6:
	esp = fp
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	esi = edx
	edi = edi - 0x00000001
	SZO = cond(edi)
	bh = 0xF2
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	bl = al
l004028E6:
fn004028E6_exit:


// fn004028F5
// Return size: 0
void fn004028F5()
fn004028F5_entry:
	// succ:  l004028F5
l004028F5:
	esp = fp
	eax = Mem0[ecx:word32]
	v6 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v6
	SCZO = cond(v6)
	goto l004028FA
	// succ:  l004028FA
l004028F5:
	goto l00402A84
	// succ:  l00402A84
l004028FA:
	v8 = eax
	eax = edi
	edi = v8
	branch Test(PO,P) l004028FA
	// succ:  l004028FD l004028FA
l004028FD:
	esi = edx
	v13 = (Mem0[edx + 0x00000046:word32] & 0x00000001 << 0x20 - 0x01) != 0x00000000
	Mem0[edx + 0x00000046:word32] = __rol(Mem0[edx + 0x00000046:word32], 0x01)
	C = v13
	dh = dh ^ cl
	SZO = cond(dh)
	C = false
	edx = edi
	dh = bh
	edx = edx - 0x00000001
	SZO = cond(edx)
	// succ:  l00402909_thunk_fn00402638
l00402909_thunk_fn00402638:
	call fn00402638 (retsize: 0;)
	return
	// succ:  fn004028F5_exit
l00402A84:
	bh = al
	ebx = (word32) ah
	edi = esi
	esi = esi + 0x00000001
	SZO = cond(esi)
	edi = edi + 0x00000001
	SZO = cond(edi)
	edi = ecx
	edi = edi + 0x00000001
	SZO = cond(edi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	eax = eax >>u 0x00000010
	SCZO = cond(eax)
	edi = esi
	call fn00401E84 (retsize: 4;)
	v21 = (Mem0[edi + 0x8FCB5A05:byte] & 0x01 << 0x08 - 0x44) != 0x00
	Mem0[edi + 0x8FCB5A05:byte] = __rol(Mem0[edi + 0x8FCB5A05:byte], 0x44)
	C = v21
	// succ:  l00402A9B_thunk_fn00402AA2
l00402A9B_thunk_fn00402AA2:
	call fn00402AA2 (retsize: 0;)
	return
	// succ:  fn004028F5_exit
fn004028F5_exit:


// fn0040291A
// Return size: 0
void fn0040291A()
fn0040291A_entry:
	// succ:  l0040291A
l0040291A:
	esp = fp
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	bl = bl + cl
	SCZO = cond(bl)
	al = al - dh
	SCZO = cond(al)
	call fn0040247C (retsize: 4;)
	edi = edi + 0x00000001
	SZO = cond(edi)
	branch Test(EQ,Z) l00402926_thunk_fn004028F5
	goto l00402928
	// succ:  l00402928 l00402926_thunk_fn004028F5
l0040291A:
l00402926_thunk_fn004028F5:
	call fn004028F5 (retsize: 0;)
	return
	// succ:  fn0040291A_exit
l00402928:
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
fn0040291A_exit:


// fn0040292D
// Return size: 0
void fn0040292D()
fn0040292D_entry:
	// succ:  l0040292D
l0040292D:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = edi
	edi = v3
fn0040292D_exit:


// fn00402966
// Return size: 0
void fn00402966()
fn00402966_entry:
	// succ:  l00402966
l00402966:
	esp = fp
	dl = cl
	eax = eax - 0x00000001
	SZO = cond(eax)
	dl = dl + bh
	SCZO = cond(dl)
	bl = cl
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	al = al | ah
	SZO = cond(al)
	C = false
	call fn0040292D (retsize: 4;)
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	SCZO = cond(ebp - Mem0[esi - 0x0000003E:word32])
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ebx = ebx + edx
	SCZO = cond(ebx)
	eax = ecx
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	ebx = esi
	call fn00402578 (retsize: 4;)
l00402966:
	dl = cl
	eax = eax - 0x00000001
	SZO = cond(eax)
	dl = dl + bh
	SCZO = cond(dl)
	bl = cl
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	al = al | ah
	SZO = cond(al)
	C = false
	call fn0040292D (retsize: 4;)
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	SCZO = cond(ebp - Mem0[esi - 0x0000003E:word32])
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ebx = ebx + edx
	SCZO = cond(ebx)
	eax = ecx
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	ebx = esi
fn00402966_exit:


// fn0040298E
// Return size: 0
void fn0040298E()
fn0040298E_entry:
	// succ:  l0040298E
l0040298E:
	esp = fp
	goto l0040298E_thunk_fn0040291A
	// succ:  l0040298E_thunk_fn0040291A
l0040298E:
	goto l0040298E_thunk_fn0040291A
	// succ:  l0040298E_thunk_fn0040291A
l0040298E_thunk_fn0040291A:
	call fn0040291A (retsize: 0;)
	return
	// succ:  fn0040298E_exit
l0040298E_thunk_fn0040291A:
	call fn0040291A (retsize: 0;)
	return
	// succ:  fn0040298E_exit
fn0040298E_exit:


// fn00402992
// Return size: 0
void fn00402992()
fn00402992_entry:
	// succ:  l00402992
l00402992:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = edi
	edi = v3
fn00402992_exit:


// fn004029C2
// Return size: 0
void fn004029C2()
fn004029C2_entry:
	// succ:  l004029C2
l004029C2:
	esp = fp
	esi = esi | eax
	SZO = cond(esi)
	C = false
	goto l004029C2_thunk_fn004029C3
	// succ:  l004029C2_thunk_fn004029C3
l004029C2:
l004029C2_thunk_fn004029C3:
	call fn004029C3 (retsize: 0;)
	return
	// succ:  fn004029C2_exit
fn004029C2_exit:


// fn004029C3
// Return size: 0
void fn004029C3()
fn004029C3_entry:
	// succ:  l004029C3
l004029C3:
	esp = fp
	__lock()
	bl = bl - dh
	SCZO = cond(bl)
	edi = edi + 0x00000001
	SZO = cond(edi)
	edi = edx
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	edi = edi - 0x00000001
	SZO = cond(edi)
	ebx = esi
	edi = ecx
	goto l004029D0_thunk_fn00402098
	// succ:  l004029D0_thunk_fn00402098
l004029C3:
	bl = bl - dh
	SCZO = cond(bl)
	edi = edi + 0x00000001
	SZO = cond(edi)
	edi = edx
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	edi = edi - 0x00000001
	SZO = cond(edi)
	ebx = esi
	edi = ecx
	// succ:  l004029CD_thunk_fn00402098
l004029CD_thunk_fn00402098:
	call fn00402098 (retsize: 0;)
	return
	// succ:  fn004029C3_exit
l004029D0_thunk_fn00402098:
	call fn00402098 (retsize: 0;)
	return
	// succ:  fn004029C3_exit
fn004029C3_exit:


// fn004029F7
// Return size: 0
void fn004029F7()
fn004029F7_entry:
	// succ:  l004029F7
l004029F7:
	Mem0[esp - 0x00000034:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi | ecx
	SZO = cond(esi)
	C = false
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	eax = eax + ecx
	SCZO = cond(eax)
	esi = esi | edx
	SZO = cond(esi)
	C = false
	call fn00402247 (retsize: 4;)
	Mem0[0x7F49FBF0:byte] = al
	al = al & 0x73
	SZO = cond(al)
	C = false
	bh = bh ^ cl
	SZO = cond(bh)
	C = false
	bl = bl + ah
	SCZO = cond(bl)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bh = 0x4B
	edx = edx + ecx
	SCZO = cond(edx)
	edi = edi - 0x00000001
	SZO = cond(edi)
	bh = 0x46
	branch Test(LT,SO) l00402A1D_thunk_fn00402594
	goto l00402A23
	// succ:  l00402A23 l00402A1D_thunk_fn00402594
l00402A1D_thunk_fn00402594:
	call fn00402594 (retsize: 0;)
	return
	// succ:  fn004029F7_exit
l00402A23:
fn004029F7_exit:


// fn00402A31
// Return size: 0
void fn00402A31()
fn00402A31_entry:
	goto l00402A31
	// succ:  l00402A31
l0040211A:
	esi = esi - ebx
	SCZO = cond(esi)
	dl = dl + bl
	SCZO = cond(dl)
	// succ:  l0040211C_thunk_fn0040211E
l0040211C_thunk_fn0040211E:
	call fn0040211E (retsize: 0;)
	return
	// succ:  fn00402A31_exit
l00402A31:
	esp = fp
	dh = dl
	dl = dh
	dh = 0x5F
	edx = edx + 0x00000001
	SZO = cond(edx)
	edx = edx ^ ebx
	SZO = cond(edx)
	C = false
	v9 = (ah & 0x01 << 0x08 - 0x18) != 0x00
	ah = __rol(ah, 0x18)
	C = v9
	edx = edx - 0x00000001
	SZO = cond(edx)
	edx = edx + edi
	SCZO = cond(edx)
	esi = esi ^ edi
	SZO = cond(esi)
	C = false
	goto l0040211A
	// succ:  l0040211A
l00402A31:
fn00402A31_exit:


// fn00402A4B
// Return size: 0
void fn00402A4B()
fn00402A4B_entry:
	// succ:  l00402A4B
l00402A4B:
	esp = fp
	ecx = ecx - 0x000002CE
	SCZO = cond(ecx)
	eax = eax ^ ebx
	SZO = cond(eax)
	C = false
	ebx = ebx + edi
	SCZO = cond(ebx)
	ah = 0xC7
	eax = eax ^ esi
	SZO = cond(eax)
	C = false
	edx = edx + 0x00000001
	SZO = cond(edx)
	bl = ch
	edx = ebx
	goto l00402A5E_thunk_fn00401EA9
	// succ:  l00402A5E_thunk_fn00401EA9
l00402A4B:
l00402A5E_thunk_fn00401EA9:
	call fn00401EA9 (retsize: 0;)
	return
	// succ:  fn00402A4B_exit
fn00402A4B_exit:


// fn00402A68
// Return size: 0
void fn00402A68()
fn00402A68_entry:
	// succ:  l00402A68
l00402A68:
	dl = dl + al
	SCZO = cond(dl)
	esi = esi | eax
	SZO = cond(esi)
	C = false
	ebx = eax
	ah = 0xCD
	bl = bl + ah
	SCZO = cond(bl)
	bl = bl + ah
	SCZO = cond(bl)
	edx = edx + 0x00000001
	SZO = cond(edx)
	eax = eax | edx
	SZO = cond(eax)
	C = false
	goto l00402A77_thunk_fn004026FD
	// succ:  l00402A77_thunk_fn004026FD
fn00402A68_exit:


// fn00402AA0
// Return size: 0
void fn00402AA0()
fn00402AA0_entry:
	// succ:  l00402AA0
l00402AA0:
	esp = fp
	Mem0[esp - 0x00000034:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00402AA0_thunk_fn00402AA2
l00402AA0_thunk_fn00402AA2:
	call fn00402AA2 (retsize: 0;)
	return
	// succ:  fn00402AA0_exit
fn00402AA0_exit:


// fn00402AA2
// Return size: 0
void fn00402AA2()
fn00402AA2_entry:
	// succ:  l00402AA2
l00402AA2:
	esp = fp
	al = al & 0xCC
	SZO = cond(al)
	C = false
	edx = edx - eax
	SCZO = cond(edx)
	ah = ah - 0xC9
	SCZO = cond(ah)
	dl = 0xEC
	edx = edx + ecx
	SCZO = cond(edx)
	edx = edx | edi
	SZO = cond(edx)
	C = false
	dh = dh ^ ch
	SZO = cond(dh)
	C = false
	goto l00402AB1_thunk_fn004022D2
	// succ:  l00402AB1_thunk_fn004022D2
l00402AA2:
	edx = edx - eax
	SCZO = cond(edx)
	ah = ah - 0xC9
	SCZO = cond(ah)
	dl = 0xEC
	edx = edx + ecx
	SCZO = cond(edx)
	edx = edx | edi
	SZO = cond(edx)
	C = false
	dh = dh ^ ch
	SZO = cond(dh)
	C = false
l00402AB1_thunk_fn004022D2:
	call fn004022D2 (retsize: 0;)
	return
	// succ:  fn00402AA2_exit
fn00402AA2_exit:


// fn00402ABB
// Return size: 0
void fn00402ABB()
fn00402ABB_entry:
	// succ:  l00402ABB
l00402ABB:
	dl = 0x37
	dl = dl - ah
	SCZO = cond(dl)
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	dh = 0x18
	dl = dl + cl
	SCZO = cond(dl)
	dh = dh ^ ch
	SZO = cond(dh)
	C = false
	dl = 0xE5
	dl = 0x2C
fn00402ABB_exit:


// fn00402AD6
// Return size: 0
void fn00402AD6()
fn00402AD6_entry:
	// succ:  l00402AD6
l00402AD6:
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx + eax
	SCZO = cond(ebx)
	esi = esi + 0x00000001
	SZO = cond(esi)
	ah = ah ^ dh
	SZO = cond(ah)
	C = false
	ebx = ebx - edx
	SCZO = cond(ebx)
	ebx = ebx | edx
	SZO = cond(ebx)
	C = false
	bl = bl ^ al
	SZO = cond(bl)
	C = false
	ebx = edi
	branch Test(LT,SO) l00402AE4_thunk_fn00401EDD
	goto l00402AEA
	// succ:  l00402AEA l00402AE4_thunk_fn00401EDD
l00402AE4_thunk_fn00401EDD:
	call fn00401EDD (retsize: 0;)
	return
	// succ:  fn00402AD6_exit
l00402AEA:
fn00402AD6_exit:


// fn00402AF5
// Return size: 0
void fn00402AF5()
fn00402AF5_entry:
	// succ:  l00402AF5
l00402AF5:
	esp = fp
	esp = esp + 0x00000004
	bl = bl + ch
	SCZO = cond(bl)
	edx = edx | ecx
	SZO = cond(edx)
	C = false
	ah = -ah
	SCZO = cond(ah)
	C = ah == 0x00
	edx = esi
	bl = bl + bh
	SCZO = cond(bl)
	branch Test(ULE,CZ) TMP!
fn00402AF5_exit:


// fn00402B1C
// Return size: 0
void fn00402B1C()
fn00402B1C_entry:
	// succ:  l00402B1C
l00402B1C:
	esp = fp
	esi = esi + ecx
	SCZO = cond(esi)
	esi = esi + 0x00000001
	SZO = cond(esi)
	edx = edx - 0xAD273425
	SCZO = cond(edx)
	esi = esi - 0x00000001
	SZO = cond(esi)
	esi = eax
	esi = esi | edi
	SZO = cond(esi)
	C = false
	esi = ebx
	esi = esi - 0x00000001
	SZO = cond(esi)
	esi = esi ^ ecx
	SZO = cond(esi)
	C = false
	esi = esi - ecx
	SCZO = cond(esi)
	branch Test(SG,S) l00402B31_thunk_fn004020C1
	goto l00402B37
	// succ:  l00402B37 l00402B31_thunk_fn004020C1
l00402B1C:
l00402B31_thunk_fn004020C1:
	call fn004020C1 (retsize: 0;)
	return
	// succ:  fn00402B1C_exit
l00402B37:
	branch Test(GT,SZO) l00402B39
	// succ:  l00402B39
l00402B39:
	branch Test(NS,S) l00402B39_thunk_fn004020C1
	goto l00402B3F
	// succ:  l00402B3F l00402B39_thunk_fn004020C1
l00402B39_thunk_fn004020C1:
	call fn004020C1 (retsize: 0;)
	return
	// succ:  fn00402B1C_exit
l00402B3F:
	v15 = Mem0[cs:edi + 0x8B021A86:word32] - ebp - C
	Mem0[cs:edi + 0x8B021A86:word32] = v15
	SCZO = cond(v15)
	// succ:  l00402B3F_thunk_fn00402B46
l00402B3F_thunk_fn00402B46:
	call fn00402B46 (retsize: 4;)
	return
	// succ:  fn00402B1C_exit
fn00402B1C_exit:


// fn00402B45
// Return size: 4
void fn00402B45()
fn00402B45_entry:
	// succ:  l00402B45
l00402B45:
	esp = fp
	eax = ebx
	call fn004026E3 (retsize: 4;)
	goto l00402B45_thunk_fn00402B46
	// succ:  l00402B45_thunk_fn00402B46
l00402B45:
l00402B45_thunk_fn00402B46:
	call fn00402B46 (retsize: 4;)
	return
	// succ:  fn00402B45_exit
fn00402B45_exit:


// fn00402B46
// Return size: 4
void fn00402B46()
fn00402B46_entry:
	// succ:  l00402B46
l00402B46:
	esp = fp
	return
	// succ:  fn00402B46_exit
l00402B46:
	al = al ^ cl
	SZO = cond(al)
	C = false
	dl = 0xFD
	edx = ebx
	dl = bh
	ah = cl
	dl = dl ^ ah
	SZO = cond(dl)
	C = false
fn00402B46_exit:


// fn00402B5F
// Return size: 0
void fn00402B5F()
fn00402B5F_entry:
	goto l00402B5F
	// succ:  l00402B5F
l004021A3:
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	bl = cl
	edi = edi + 0x00000001
	SZO = cond(edi)
	bh = bh - bl
	SCZO = cond(bh)
	ebx = ebx | edx
	SZO = cond(ebx)
	C = false
	esi = esi | edx
	SZO = cond(esi)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	bl = 0x4F
	esi = esi + 0x00000001
	SZO = cond(esi)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
l00402B5F:
	esp = fp
	Mem0[esp - 0x00000010:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	esi = esi + 0x00000001
	SZO = cond(esi)
	bh = bh + al
	SCZO = cond(bh)
	edi = edi - 0x00000001
	SZO = cond(edi)
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	branch Test(EQ,Z) l004021A3
	// succ:  l00402B71 l004021A3
l00402B71:
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	v15 = al
	al = al
	al = v15
	branch Test(NE,Z) l004021A3
	// succ:  l00402B7B l004021A3
l00402B7B:
	Mem0[0xBAD5DFB5:word32] = eax
	v17 = Mem0[ecx + 0x01E92434:word32] & ecx
	Mem0[ecx + 0x01E92434:word32] = v17
	SZO = cond(Mem0[ecx + 0x01E92434:word32])
	C = false
	// succ:  l00402B80_thunk_fn00402B86
l00402B80_thunk_fn00402B86:
	call fn00402B86 (retsize: 0;)
	return
	// succ:  fn00402B5F_exit
fn00402B5F_exit:


// fn00402B81
// Return size: 0
void fn00402B81()
fn00402B81_entry:
	// succ:  l00402B81
l00402B81:
	esp = fp
	Mem0[esp:word32] = esi
fn00402B81_exit:


// fn00402B86
// Return size: 0
void fn00402B86()
fn00402B86_entry:
	// succ:  l00402B86
l00402B86:
	esp = fp
	v5 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v5
	SCZO = cond(v5)
	v9 = Mem0[edi:byte] + cl
	Mem0[edi:byte] = v9
	SCZO = cond(v9)
	// succ:  l00402B88_thunk_fn00402B8A
l00402B88_thunk_fn00402B8A:
	call fn00402B8A (retsize: 0;)
	return
	// succ:  fn00402B86_exit
fn00402B86_exit:


// fn00402B8A
// Return size: 0
void fn00402B8A()
fn00402B8A_entry:
	goto l00402B8A
	// succ:  l00402B8A
l00402222:
	esi = edx
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	dh = bh
	edx = ebx
	esi = esi - edx
	SCZO = cond(esi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	esi = ebx
	esi = edi
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	branch Test(LT,SO) l00402233_thunk_fn00402B1C
	goto l00402239
	// succ:  l00402239 l00402233_thunk_fn00402B1C
l00402233_thunk_fn00402B1C:
	call fn00402B1C (retsize: 0;)
	return
	// succ:  fn00402B8A_exit
l00402239:
	branch Test(NS,S) l0040223B
	// succ:  l0040223B
l0040223B:
	esi = esi
	branch Test(GE,SO) l0040223D_thunk_fn00402B1C
	goto l00402243
	// succ:  l00402243 l0040223D_thunk_fn00402B1C
l0040223D_thunk_fn00402B1C:
	call fn00402B1C (retsize: 0;)
	return
	// succ:  fn00402B8A_exit
l00402243:
	SCZO = cond(Mem0[ecx - 0x00000063:word32] - ecx)
l00402B8A:
	eax = eax
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	dh = dh + dl
	SCZO = cond(dh)
	esi = esi - 0x00000001
	SZO = cond(esi)
	edx = edx | eax
	SZO = cond(edx)
	C = false
	edx = edx ^ esi
	SZO = cond(edx)
	C = false
	dh = cl
	goto l00402222
	// succ:  l00402222
fn00402B8A_exit:


// fn00402BA1
// Return size: 0
void fn00402BA1()
fn00402BA1_entry:
	// succ:  l00402BA1
l00402BA1:
	esp = fp
	ah = 0xD8
	edx = edx | ebx
	SZO = cond(edx)
	C = false
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	al = al | dl
	SZO = cond(al)
	C = false
	al = al | cl
	SZO = cond(al)
	C = false
	eax = eax + 0x00000001
	SZO = cond(eax)
	eax = eax + ebx
	SCZO = cond(eax)
	eax = ebx
	dh = dh | ch
	SZO = cond(dh)
	C = false
	ebx = ebx | eax
	SZO = cond(ebx)
	C = false
	branch Test(LT,SO) l00402BB4_thunk_fn00402A4B
	goto l00402BBA
	// succ:  l00402BBA l00402BB4_thunk_fn00402A4B
l00402BA1:
l00402BB4_thunk_fn00402A4B:
	call fn00402A4B (retsize: 0;)
	return
	// succ:  fn00402BA1_exit
l00402BBA:
	branch Test(NS,S) l00402BBC
	// succ:  l00402BBC
l00402BBC:
	branch Test(GE,SO) l00402BBC_thunk_fn00402A4B
	goto l00402BC2
	// succ:  l00402BC2 l00402BBC_thunk_fn00402A4B
l00402BBC_thunk_fn00402A4B:
	call fn00402A4B (retsize: 0;)
	return
	// succ:  fn00402BA1_exit
l00402BC2:
	ebp = ebp & ebp
	SZO = cond(ebp)
	C = false
	esp = 0xC453AAF2
	// succ:  l00402BC4_thunk_fn00402BC9
l00402BC4_thunk_fn00402BC9:
	call fn00402BC9 (retsize: 0;)
	return
	// succ:  fn00402BA1_exit
fn00402BA1_exit:


// fn00402BC9
// Return size: 0
void fn00402BC9()
fn00402BC9_entry:
	// succ:  l00402BC9
l00402BC9:
	cl = cl + bh
	SCZO = cond(cl)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	dl = bh
	call fn00402BD3 (retsize: 4;)
	// succ:  l00402BCE_thunk_fn00402BD3
l00402BCE_thunk_fn00402BD3:
	call fn00402BD3 (retsize: 0;)
	return
	// succ:  fn00402BC9_exit
fn00402BC9_exit:


// fn00402BD3
// Return size: 0
void fn00402BD3()
fn00402BD3_entry:
	// succ:  l00402BD3
l00402BD3:
	esp = fp
	esi = esi ^ ecx
	SZO = cond(esi)
	C = false
	ch = ch ^ dh
	SZO = cond(ch)
	C = false
	ah = ah - ch
	SCZO = cond(ah)
	edx = eax
	bh = bh - dl
	SCZO = cond(bh)
	ecx = ecx ^ eax
	SZO = cond(ecx)
	C = false
	// succ:  l00402BDF_thunk_fn00401F63
l00402BDF_thunk_fn00401F63:
	call fn00401F63 (retsize: 0;)
	return
	// succ:  fn00402BD3_exit
fn00402BD3_exit:


// fn00402BEC
// Return size: 0
void fn00402BEC()
fn00402BEC_entry:
	// succ:  l00402BEC
l00402BEC:
	esp = fp
	Mem0[esp - 0x0000000C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edi = esi
	bh = bh | ah
	SZO = cond(bh)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bh = bh | cl
	SZO = cond(bh)
	C = false
	bh = bh ^ dh
	SZO = cond(bh)
	C = false
	edi = esi
	branch Test(EQ,Z) l00402BFD_thunk_fn00402834
	goto l00402C03
	// succ:  l00402C03 l00402BFD_thunk_fn00402834
l00402BFD_thunk_fn00402834:
	call fn00402834 (retsize: 0;)
	return
	// succ:  fn00402BEC_exit
l00402C03:
	branch Test(NE,Z) l00402C05
	// succ:  l00402C05
l00402C05:
	// succ:  l00402C0A
l00402C0A:
	branch Test(NE,Z) l00402C0A_thunk_fn00402834
	goto l00402C10
	// succ:  l00402C10 l00402C0A_thunk_fn00402834
l00402C0A_thunk_fn00402834:
	call fn00402834 (retsize: 0;)
	return
	// succ:  fn00402BEC_exit
l00402C10:
	eax = eax | 0xB4DF5A2B
	SZO = cond(eax)
	C = false
	// succ:  l00402C10_thunk_fn00402C15
l00402C10_thunk_fn00402C15:
	call fn00402C15 (retsize: 0;)
	return
	// succ:  fn00402BEC_exit
fn00402BEC_exit:


// fn00402C14
// Return size: 0
void fn00402C14()
fn00402C14_entry:
	// succ:  l00402C14
l00402C14:
	esp = fp
	ah = 0x78
	goto l00402C14_thunk_fn00402C15
	// succ:  l00402C14_thunk_fn00402C15
l00402C14:
l00402C14_thunk_fn00402C15:
	call fn00402C15 (retsize: 0;)
	return
	// succ:  fn00402C14_exit
fn00402C14_exit:


// fn00402C15
// Return size: 0
void fn00402C15()
fn00402C15_entry:
	// succ:  l00402C15
l00402C15:
	esp = fp
	branch Test(SG,S) TMP!
l00402C15:
	eax = eax - ebx
	SCZO = cond(eax)
	bh = bh ^ al
	SZO = cond(bh)
	C = false
	bl = dh
	bh = bh + dl
	SCZO = cond(bh)
	dh = ch
	bl = ch
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[ecx:word32]
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	al = al | ch
	SZO = cond(al)
	C = false
	call fn0040287E (retsize: 4;)
fn00402C15_exit:


// fn00402C35
// Return size: 0
void fn00402C35()
fn00402C35_entry:
	goto l00402C35
	// succ:  l00402C35
l004027B9:
	dh = cl
	ah = ah + 0x4C
	SCZO = cond(ah)
	dh = bh
	dl = dl ^ ch
	SZO = cond(dl)
	C = false
	dl = cl
	esi = esi + 0x00000001
	SZO = cond(esi)
	dh = dh - al
	SCZO = cond(dh)
	esi = esi + 0x00000001
	SZO = cond(esi)
	edx = esi
	dh = bl
	branch Test(ULT,C) l004027CC_thunk_fn00402557
	goto l004027D2
	// succ:  l004027D2 l004027CC_thunk_fn00402557
l004027CC_thunk_fn00402557:
	call fn00402557 (retsize: 0;)
	return
	// succ:  fn00402C35_exit
l004027D2:
l00402C35:
	esp = esp + 0x00000004
	dl = dl | bl
	SZO = cond(dl)
	C = false
	edx = edx | ecx
	SZO = cond(edx)
	C = false
	esi = esi | edi
	SZO = cond(esi)
	C = false
	esi = esi - edi
	SCZO = cond(esi)
	dh = dh ^ dl
	SZO = cond(dh)
	C = false
	goto l00402C42
	// succ:  l00402C42
fn00402C35_exit:


