// fn00400FCA
// Return size: 0
void fn00400FCA()
fn00400FCA_entry:
	// succ:  l00400FCA
l00400FCA:
	esp = fp
	v5 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v5
	SCZO = cond(v5)
	v7 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v7
	SCZO = cond(v7)
	v8 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v8
	SCZO = cond(v8)
	v9 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v9
	SCZO = cond(v9)
	v10 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v10
	SCZO = cond(v10)
	v11 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v11
	SCZO = cond(v11)
	v12 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v12
	SCZO = cond(v12)
	v13 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v13
	SCZO = cond(v13)
	v14 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v14
	SCZO = cond(v14)
	v15 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v15
	SCZO = cond(v15)
	v16 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v16
	SCZO = cond(v16)
	v17 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v17
	SCZO = cond(v17)
	v18 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v18
	SCZO = cond(v18)
	v19 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v19
	SCZO = cond(v19)
	v20 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v20
	SCZO = cond(v20)
	v21 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v21
	SCZO = cond(v21)
	v22 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v22
	SCZO = cond(v22)
	v23 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v23
	SCZO = cond(v23)
	v24 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v24
	SCZO = cond(v24)
	v25 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v25
	SCZO = cond(v25)
	v26 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v26
	SCZO = cond(v26)
	v27 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v27
	SCZO = cond(v27)
	v28 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v28
	SCZO = cond(v28)
	v29 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v29
	SCZO = cond(v29)
	v30 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v30
	SCZO = cond(v30)
	v31 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v31
	SCZO = cond(v31)
	v32 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v32
	SCZO = cond(v32)
	SZO = cond(eax & 0x52453D5C)
	C = false
	branch Test(SG,S) l00401005_thunk_fn00401012
	// succ:  l00401005_thunk_fn00401007 l00401005_thunk_fn00401012
l00401005_thunk_fn00401007:
	call fn00401007 (retsize: 0;)
	return
	// succ:  fn00400FCA_exit l00401005_thunk_fn00401007
l00401005_thunk_fn00401007:
	call fn00401007 (retsize: 0;)
	return
	// succ:  fn00400FCA_exit
l00401005_thunk_fn00401012:
	call fn00401012 (retsize: 0;)
	return
	// succ:  fn00400FCA_exit
fn00400FCA_exit:


// fn00401006
// Return size: 0
void fn00401006()
fn00401006_entry:
	// succ:  l00401006
l00401006:
	edi = edi | eax
	SZO = cond(edi)
	C = false
	// succ:  l00401006_thunk_fn00401007
l00401006_thunk_fn00401007:
	call fn00401007 (retsize: 0;)
	return
	// succ:  fn00401006_exit
l0040101D_thunk_fn00400FCA:
	call fn00400FCA (retsize: 0;)
	return
	// succ:  fn00401006_exit
l0040101D_thunk_fn0040101F:
	call fn0040101F (retsize: 0;)
	return
	// succ:  fn00401006_exit l0040101D_thunk_fn0040101F
l0040101D_thunk_fn0040101F:
	call fn0040101F (retsize: 0;)
	return
	// succ:  fn00401006_exit
fn00401006_exit:


// fn00401007
// Return size: 0
void fn00401007()
fn00401007_entry:
	// succ:  l00401007
l00401007:
	esp = fp
	C = false
	edx = edx - ecx
	SCZO = cond(edx)
	edi = edi | ecx
	SZO = cond(edi)
	C = false
	edi = edi - esi
	SCZO = cond(edi)
	edi = edi - 0x00000001
	SZO = cond(edi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	eax = Mem0[eax + 0x00000008:word32]
	goto l00401010_thunk_fn00401013
	// succ:  l00401010_thunk_fn00401013
l00401007:
	edx = edx - ecx
	SCZO = cond(edx)
	edi = edi | ecx
	SZO = cond(edi)
	C = false
	edi = edi - esi
	SCZO = cond(edi)
	edi = edi - 0x00000001
	SZO = cond(edi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	eax = Mem0[eax + 0x00000008:word32]
	// succ:  l0040100F_thunk_fn00401012
l0040100F_thunk_fn00401012:
	call fn00401012 (retsize: 0;)
	return
	// succ:  fn00401007_exit
l00401010_thunk_fn00401013:
	call fn00401013 (retsize: 0;)
	return
	// succ:  fn00401007_exit
fn00401007_exit:


// fn00401012
// Return size: 0
void fn00401012()
fn00401012_entry:
	// succ:  l00401012
l00401012:
	esp = fp
	v5 = Mem0[ebx + 0x42D803CF:byte] | cl
	Mem0[ebx + 0x42D803CF:byte] = v5
	SZO = cond(Mem0[ebx + 0x42D803CF:byte])
	C = false
	goto l00401012_thunk_fn00401013
	// succ:  l00401012_thunk_fn00401013
l00401012:
	ecx = edi
	ebx = ebx + eax
	SCZO = cond(ebx)
	edx = edx + 0x00000001
	SZO = cond(edx)
	call fn0040114C (retsize: 4;)
	branch Test(ULT,C) l0040101D_thunk_fn00400FCA
l00401012_thunk_fn00401013:
	call fn00401013 (retsize: 0;)
	return
	// succ:  fn00401012_exit
fn00401012_exit:


// fn00401013
// Return size: 0
void fn00401013()
fn00401013_entry:
	// succ:  l00401013
l00401013:
	esp = fp
	ecx = edi
	ebx = ebx + eax
	SCZO = cond(ebx)
	edx = edx + 0x00000001
	SZO = cond(edx)
	call fn0040114C (retsize: 4;)
	branch Test(ULT,C) l0040101D_thunk_fn00400FCA
	// succ:  l0040101D_thunk_fn0040101F l0040101D_thunk_fn00400FCA l0040101D_thunk_fn0040101F l0040101D_thunk_fn00400FCA
l00401013:
	call fn0040114C (retsize: 4;)
	branch Test(ULT,C) l0040101D_thunk_fn00400FCA
	// succ:  l00401018_thunk_fn0040101F l0040101D_thunk_fn00400FCA
l00401018_thunk_fn0040101F:
	call fn0040101F (retsize: 0;)
	return
	// succ:  fn00401013_exit
l0040101D_thunk_fn00400FCA:
	call fn00400FCA (retsize: 0;)
	return
	// succ:  fn00401013_exit
l0040101D_thunk_fn00400FCA:
	call fn00400FCA (retsize: 0;)
	return
	// succ:  fn00401013_exit
l0040101D_thunk_fn0040101F:
	call fn0040101F (retsize: 0;)
	return
	// succ:  fn00401013_exit l0040101D_thunk_fn0040101F
l0040101D_thunk_fn0040101F:
	call fn0040101F (retsize: 0;)
	return
	// succ:  fn00401013_exit
fn00401013_exit:


// fn0040101F
// Return size: 0
void fn0040101F()
fn0040101F_entry:
	// succ:  l0040101F
l0040101F:
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = 0xD82B469A
	// succ:  l00401025_thunk_fn00401375
l00401025_thunk_fn00401375:
	call fn00401375 (retsize: 0;)
	return
	// succ:  fn0040101F_exit
fn0040101F_exit:


// fn0040102A
// Return size: 6
void fn0040102A()
fn0040102A_entry:
	// succ:  l0040102A
l0040102A:
	esp = fp
	Mem0[esp - 0x00000020:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	cl = cl + 0x36
	SCZO = cond(cl)
	cl = cl - 0x01
	SZO = cond(cl)
	dh = dh - 0xF9 - C
	SCZO = cond(dh)
	dl = dl + 0x55 + C
	SCZO = cond(dl)
	ch = 0xCB
	esi = esi ^ ecx
	SZO = cond(esi)
	C = false
	esi = esi | eax
	SZO = cond(esi)
	C = false
	ecx = ecx - eax
	SCZO = cond(ecx)
	edi = edi + 0x00000001
	SZO = cond(edi)
	// succ:  l00401042_thunk_fn00401244
l00401042_thunk_fn00401244:
	call fn00401244 (retsize: 6;)
	return
	// succ:  fn0040102A_exit
fn0040102A_exit:


// fn0040104C
// Return size: 0
void fn0040104C()
fn0040104C_entry:
	// succ:  l0040104C
l0040104C:
	esp = fp
	Mem0[esp - 0x00000028:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = eax
	ebx = ebx + eax
	SCZO = cond(ebx)
	ebx = ebx - eax
	SCZO = cond(ebx)
	ecx = ecx - edx
	SCZO = cond(ecx)
	ecx = ecx ^ edx
	SZO = cond(ecx)
	C = false
	edi = eax
	eax = eax - 0xEEEEEEEE
	SCZO = cond(eax)
	edx = edx + ecx
	SCZO = cond(edx)
	branch Test(PE,P) l00401228
	// succ:  l00401069 l00401228
l00401069:
	ah = ah
	branch Test(PO,P) l00401228
	// succ:  l00401071 l00401228
l00401071:
	v14 = Mem0[eax + 0x5DD8B20C:word32] + ebp
	Mem0[eax + 0x5DD8B20C:word32] = v14
	SCZO = cond(v14)
	// succ:  l00401071_thunk_fn00401077
l00401071_thunk_fn00401077:
	call fn00401077 (retsize: 0;)
	return
	// succ:  fn0040104C_exit
l00401228:
	ecx = ecx - edi
	SCZO = cond(ecx)
	edx = esi
	esi = esi + edx
	SCZO = cond(esi)
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	ebx = esi
	esi = esi | eax
	SZO = cond(esi)
	C = false
	edi = edx
	ecx = edi
	call fn004011F8 (retsize: 4;)
	eax = eax + 0x00000001
	SZO = cond(eax)
	v24 = Mem0[ebx:word32] | esp
	Mem0[ebx:word32] = v24
	SZO = cond(Mem0[ebx:word32])
	C = false
	Mem0[ecx:real32] = rArg0
	C = __das(al, &al)
	al = Mem0[esi:byte]
	esi = esi + 0x00000001
	// succ:  l00401243_thunk_fn00401244
l00401243_thunk_fn00401244:
	call fn00401244 (retsize: 6;)
	return
	// succ:  fn0040104C_exit
fn0040104C_exit:


// fn00401077
// Return size: 0
void fn00401077()
fn00401077_entry:
	// succ:  l00401077
l00401077:
	esp = fp
	dl = dl ^ ch
	SZO = cond(dl)
	C = false
	ch = ~ch
	edi = edi - 0x00000001
	SZO = cond(edi)
	bh = bh ^ cl
	SZO = cond(bh)
	C = false
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	bl = bl - cl
	SCZO = cond(bl)
	bh = bh + 0x01
	SZO = cond(bh)
	branch Test(EQ,Z) l00401084_thunk_fn00401280
	goto l00401084_thunk_fn0040108A
	// succ:  l00401084_thunk_fn0040108A l00401084_thunk_fn00401280
l00401077:
	dl = dl ^ ch
	SZO = cond(dl)
	C = false
	ch = ~ch
	edi = edi - 0x00000001
	SZO = cond(edi)
	bh = bh ^ cl
	SZO = cond(bh)
	C = false
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	bl = bl - cl
	SCZO = cond(bl)
	bh = bh + 0x01
	SZO = cond(bh)
	branch Test(EQ,Z) l00401280
	goto l00401084_thunk_fn0040108A
	// succ:  l00401084_thunk_fn0040108A l00401084_thunk_fn00401280
l00401084_thunk_fn0040108A:
	call fn0040108A (retsize: 0;)
	return
	// succ:  fn00401077_exit l00401084_thunk_fn0040108A
l00401084_thunk_fn0040108A:
	call fn0040108A (retsize: 0;)
	return
	// succ:  fn00401077_exit
l00401084_thunk_fn0040108A:
	call fn0040108A (retsize: 0;)
	return
	// succ:  fn00401077_exit
l00401084_thunk_fn00401280:
	call fn00401280 (retsize: 0;)
	return
	// succ:  fn00401077_exit
l00401084_thunk_fn00401280:
	call fn00401280 (retsize: 0;)
	return
	// succ:  fn00401077_exit
fn00401077_exit:


// fn0040108A
// Return size: 0
void fn0040108A()
fn0040108A_entry:
	// succ:  l0040108A
l0040108A:
	edx = edx
	bx = bx
	branch Test(NE,Z) l00401280
	goto l00401095
	// succ:  l00401095 l0040108F_thunk_fn00401280
l0040108F_thunk_fn00401280:
	call fn00401280 (retsize: 0;)
	return
	// succ:  fn0040108A_exit
l00401095:
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	ds = Mem0[esp:selector]
	esp = esp + 0x00000002
fn0040108A_exit:


// fn0040109B
// Return size: 0
void fn0040109B()
fn0040109B_entry:
	// succ:  l0040109B
l0040109B:
	esp = fp
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	edx = edx - edi
	SCZO = cond(edx)
	esi = edx
	ecx = ecx + ebx
	SCZO = cond(ecx)
	esi = esi - edi
	SCZO = cond(esi)
	edx = edx ^ edi
	SZO = cond(edx)
	C = false
	ebx = ebx ^ edi
	SZO = cond(ebx)
	C = false
	ebx = ecx
	goto l004010AB_thunk_fn00401165
	// succ:  l004010AB_thunk_fn00401165
l0040109B:
l004010AB_thunk_fn00401165:
	call fn00401165 (retsize: 0;)
	return
	// succ:  fn0040109B_exit
fn0040109B_exit:


// fn004010D2
// Return size: 4
void fn004010D2()
fn004010D2_entry:
	// succ:  l004010D2
l004010D2:
	esp = fp
	Mem0[esp - 0x0000000C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx + edi
	SCZO = cond(edx)
	edi = edi + eax
	SCZO = cond(edi)
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	edx = esi
	eax = eax | eax
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l004010E3
	// succ:  l004010E2 l004010E3
l004010E2:
	return
	// succ:  fn004010D2_exit
l004010E3:
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	call fn004012B1 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = cs
	al = Mem0[0xDF045657:byte]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	branch Test(ULT,C) TMP!
l004010F1_thunk_fn004010FE:
	call fn004010FE (retsize: 0;)
	return
	// succ:  fn004010D2_exit
fn004010D2_exit:


// fn004010FE
// Return size: 0
void fn004010FE()
fn004010FE_entry:
	// succ:  l004010FE
l004010FE:
	esp = fp
	ch = ch - 0x01
	SZO = cond(ch)
	goto l00401100_thunk_fn00401077
	// succ:  l00401100_thunk_fn00401077
l004010FE:
l00401100_thunk_fn00401077:
	call fn00401077 (retsize: 0;)
	return
	// succ:  fn004010FE_exit
fn004010FE_exit:


// fn0040110D
// Return size: 0
void fn0040110D()
fn0040110D_entry:
	// succ:  l0040110D
l0040110D:
	esp = fp
	esp = esp + 0x00000004
	esi = esi ^ ecx
	SZO = cond(esi)
	C = false
	ebx = ebx - edx
	SCZO = cond(ebx)
	ecx = esi
	eax = Mem0[eax + 0x00000090:word32]
	ecx = ecx ^ edi
	SZO = cond(ecx)
	C = false
	ebx = ebx ^ edi
	SZO = cond(ebx)
	C = false
	edx = edx - 0x00000001
	SZO = cond(edx)
	edx = edx - edi
	SCZO = cond(edx)
l00401124_thunk_fn0040109B:
	call fn0040109B (retsize: 0;)
	return
	// succ:  fn0040110D_exit
fn0040110D_exit:


// fn0040114C
// Return size: 0
void fn0040114C()
fn0040114C_entry:
	// succ:  l0040114C
l0040114C:
	esp = fp
	Mem0[esp - 0x00000018:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx | edi
	SZO = cond(edx)
	C = false
	edi = edi + eax
	SCZO = cond(edi)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edx = edx + edi
	SCZO = cond(edx)
	esi = esi + 0x00000001
	SZO = cond(esi)
	edi = edi - edx
	SCZO = cond(edi)
	ecx = esi
fn0040114C_exit:


// fn00401165
// Return size: 0
void fn00401165()
fn00401165_entry:
	// succ:  l00401165
l00401165:
	esp = fp
	esi = esi + 0x00000001
	SZO = cond(esi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	ecx = ecx + edi
	SCZO = cond(ecx)
	edx = edx + ebx
	SCZO = cond(edx)
	eax = Mem0[eax:word32]
	esi = ebx
	edx = edx - ecx
	SCZO = cond(edx)
	edi = edi + ebx
	SCZO = cond(edi)
	goto l00401173_thunk_fn004012C7
	// succ:  l00401173_thunk_fn004012C7
l00401165:
l00401173_thunk_fn004012C7:
	call fn004012C7 (retsize: 0;)
	return
	// succ:  fn00401165_exit
fn00401165_exit:


// fn0040119F
// Return size: 6
void fn0040119F()
fn0040119F_entry:
	// succ:  l0040119F
l0040119F:
	esp = fp
	edi = eax
	esi = esi - 0x00000001
	SZO = cond(esi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	edi = ebx
	ebx = ebx + esi
	SCZO = cond(ebx)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ecx = ecx - esi
	SCZO = cond(ecx)
	ebx = ebx + edx
	SCZO = cond(ebx)
	ecx = ecx ^ ebx
	SZO = cond(ecx)
	C = false
	goto l004011AE_thunk_fn00401314
	// succ:  l004011AE_thunk_fn00401314
l0040119F:
l004011AE_thunk_fn00401314:
	call fn00401314 (retsize: 6;)
	return
	// succ:  fn0040119F_exit
fn0040119F_exit:


// fn004011BB
// Return size: 0
void fn004011BB()
fn004011BB_entry:
	// succ:  l004011BB
l004011BB:
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = esi
	esi = v3
	// succ:  l004011C3
l004011C3:
fn004011BB_exit:


// fn004011DC
// Return size: 0
void fn004011DC()
fn004011DC_entry:
	// succ:  l004011DC
l004011DC:
	esp = fp
	dh = dh - 0x01
	SZO = cond(dh)
	dh = dh + 0x01
	SZO = cond(dh)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edi = edi | eax
	SZO = cond(edi)
	C = false
	esi = esi | edi
	SZO = cond(esi)
	C = false
	ch = ch + dh
	SCZO = cond(ch)
	edi = edi ^ esi
	SZO = cond(edi)
	C = false
	esi = eax
	bh = bh + 0x81
	SCZO = cond(bh)
	call fn0040102A (retsize: 4;)
	esp = esp + 0xFFFFFFFA
	eax = (int32) ax
	bl = 0x4B
	al = al + 0x81 + C
	SCZO = cond(al)
	goto l004011F6_thunk_fn004011F8
	// succ:  l004011F6_thunk_fn004011F8
l004011DC:
l004011F6_thunk_fn004011F8:
	call fn004011F8 (retsize: 0;)
	return
	// succ:  fn004011DC_exit
fn004011DC_exit:


// fn004011F8
// Return size: 0
void fn004011F8()
fn004011F8_entry:
	// succ:  l004011F8
l004011F8:
	esp = fp
	Mem0[esp - 0x00000010:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edi = edi - 0x00000001
	SZO = cond(edi)
	edx = edx + eax
	SCZO = cond(edx)
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	call fn004010D2 (retsize: 4;)
	cl = cl & ah
	SZO = cond(cl)
	C = false
	dl = 0x82
	v14 = Mem0[edx + 0x03EC8B55:word32] + ecx + C
	Mem0[edx + 0x03EC8B55:word32] = v14
	SCZO = cond(v14)
fn004011F8_exit:


// fn0040120E
// Return size: 0
void fn0040120E()
fn0040120E_entry:
	// succ:  l0040120E
l0040120E:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	esi = esi + ecx
	SCZO = cond(esi)
	goto l00401212
	// succ:  l00401212
l0040121D_thunk_fn00401296:
	call fn00401296 (retsize: 0;)
	return
	// succ:  fn0040120E_exit
fn0040120E_exit:


// fn00401244
// Return size: 6
void fn00401244()
fn00401244_entry:
	// succ:  l00401244
l00401244:
	esp = fp
	ecx = ebx
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	esi = edi
	edx = edi
	esi = esi | eax
	SZO = cond(esi)
	C = false
	ecx = ecx - eax
	SCZO = cond(ecx)
	ecx = ecx + edx
	SCZO = cond(ecx)
	eax = Mem0[fs:0x00000030:word32]
	edi = edi + ecx
	SCZO = cond(edi)
	edi = edi | esi
	SZO = cond(edi)
	C = false
	goto l0040125B_thunk_fn0040119F
	// succ:  l0040125B_thunk_fn0040119F
l00401244:
	ecx = ebx
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	esi = edi
	edx = edi
	esi = esi | eax
	SZO = cond(esi)
	C = false
	ecx = ecx - eax
	SCZO = cond(ecx)
	ecx = ecx + edx
	SCZO = cond(ecx)
	eax = Mem0[fs:0x00000030:word32]
	edi = edi + ecx
	SCZO = cond(edi)
	edi = edi | esi
	SZO = cond(edi)
	C = false
	goto l0040125B_thunk_fn0040119F
	// succ:  l0040125B_thunk_fn0040119F
l0040125B_thunk_fn0040119F:
	call fn0040119F (retsize: 6;)
	return
	// succ:  fn00401244_exit
l0040125B_thunk_fn0040119F:
	call fn0040119F (retsize: 6;)
	return
	// succ:  fn00401244_exit
fn00401244_exit:


// fn00401264
// Return size: 0
void fn00401264()
fn00401264_entry:
	// succ:  l00401264
l00401264:
	esp = fp
	esp = esp + 0x00000004
	eax = eax - 0x00000001
	SZO = cond(eax)
	edx = edx + 0x00000001
	SZO = cond(edx)
	ebx = ecx
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	esi = esi | eax
	SZO = cond(esi)
	C = false
	edx = esi
	edi = edi - eax
	SCZO = cond(edi)
fn00401264_exit:


// fn00401280
// Return size: 0
void fn00401280()
fn00401280_entry:
	// succ:  l00401280
l00401280:
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bh = bh - 0x01
	SZO = cond(bh)
	bl = bl - ch
	SCZO = cond(bl)
	edx = edx + esi
	SCZO = cond(edx)
	dh = dh + 0xFE + C
	SCZO = cond(dh)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edx = edx ^ edi
	SZO = cond(edx)
	C = false
	call fn004012F5 (retsize: 4;)
	ah = 0x94
	Mem0[edi:word16] = fs
	// succ:  l00401294_thunk_fn00401296
l00401294_thunk_fn00401296:
	call fn00401296 (retsize: 0;)
	return
	// succ:  fn00401280_exit
fn00401280_exit:


// fn00401296
// Return size: 0
void fn00401296()
fn00401296_entry:
	goto l00401296
	// succ:  l00401296
l004010B8:
	edi = edi - 0x00000001
	SZO = cond(edi)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ecx = ecx + edi
	SCZO = cond(ecx)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	esi = edx
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	branch Test(ULE,CZ) l004010F2
	// succ:  l004010C5 l004010F2
l004010C5:
l004010F2:
	edx = edx | esi
	SZO = cond(edx)
	C = false
l00401296:
	edi = edi - 0x00000001
	SZO = cond(edi)
	edx = edx ^ ecx
	SZO = cond(edx)
	C = false
	edi = edi + 0x00000001
	SZO = cond(edi)
	edx = edx + ebx
	SCZO = cond(edx)
	esi = esi + 0x00000001
	SZO = cond(esi)
	edx = edx | edi
	SZO = cond(edx)
	C = false
	branch Test(LE,SZO) l004010B8
	// succ:  l004012A5 l004010B8
l004012A5:
	edi = edi
	branch Test(GT,SZO) l004010B8
	// succ:  l004012AD l004010B8
l004012AD:
	C = __das(al, &al)
	ebp = 0x448F0A7E
	al = al & 0xE0
	SZO = cond(al)
	C = false
	edi = edi - edx
	SCZO = cond(edi)
	edi = edi + 0x00000001
	SZO = cond(edi)
	edx = edx + edi
	SCZO = cond(edx)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	edi = edx
	call fn0040132D (retsize: 4;)
	Mem0[ebx + 0x0000002A:word32] = edi
	ds = Mem0[esp:selector]
	esp = esp + 0x00000002
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx - edx
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SZO = cond(edx)
	ebx = ebx - edi
	SCZO = cond(ebx)
	edi = edi + esi
	SCZO = cond(edi)
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	esi = esi | edi
	SZO = cond(esi)
	C = false
	edi = edx
	// succ:  l004012D2_thunk_fn00401006
l004012D2_thunk_fn00401006:
	call fn00401006 (retsize: 0;)
	return
	// succ:  fn00401296_exit
fn00401296_exit:


// fn004012B1
// Return size: 0
void fn004012B1()
fn004012B1_entry:
	// succ:  l004012B1
l004012B1:
	esp = fp
	Mem0[esp - 0x00000020:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi - edx
	SCZO = cond(edi)
	edi = edi + 0x00000001
	SZO = cond(edi)
	edx = edx + edi
	SCZO = cond(edx)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	edi = edx
	call fn0040132D (retsize: 4;)
	Mem0[ebx + 0x0000002A:word32] = edi
	ds = Mem0[esp:selector]
	esp = esp + 0x00000002
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l004012C6_thunk_fn004012C7
l004012C6_thunk_fn004012C7:
	call fn004012C7 (retsize: 0;)
	return
	// succ:  fn004012B1_exit
fn004012B1_exit:


// fn004012C7
// Return size: 0
void fn004012C7()
fn004012C7_entry:
	// succ:  l004012C7
l004012C7:
	esp = fp
	ecx = ecx - edx
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SZO = cond(edx)
	ebx = ebx - edi
	SCZO = cond(ebx)
	edi = edi + esi
	SCZO = cond(edi)
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	esi = esi | edi
	SZO = cond(esi)
	C = false
	edi = edx
	goto l004012D4_thunk_fn00401006
	// succ:  l004012D4_thunk_fn00401006
l004012C7:
	ecx = ecx - edx
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SZO = cond(edx)
	ebx = ebx - edi
	SCZO = cond(ebx)
	edi = edi + esi
	SCZO = cond(edi)
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	esi = esi | edi
	SZO = cond(esi)
	C = false
	edi = edx
	goto l004012D4_thunk_fn00401006
	// succ:  l004012D4_thunk_fn00401006
l004012D4_thunk_fn00401006:
	call fn00401006 (retsize: 0;)
	return
	// succ:  fn004012C7_exit
l004012D4_thunk_fn00401006:
	call fn00401006 (retsize: 0;)
	return
	// succ:  fn004012C7_exit
fn004012C7_exit:


// fn004012F5
// Return size: 0
void fn004012F5()
fn004012F5_entry:
	// succ:  l004012F5
l004012F5:
	esp = fp
	Mem0[esp - 0x0000002C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ch = ch | dl
	SZO = cond(ch)
	C = false
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	edi = edi + edx
	SCZO = cond(edi)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	edx = eax
	bh = bh + 0x01
	SZO = cond(bh)
	ebx = ebx + edx
	SCZO = cond(ebx)
	// succ:  l00401307_thunk_fn004011DC
l00401307_thunk_fn004011DC:
	call fn004011DC (retsize: 0;)
	return
	// succ:  fn004012F5_exit
fn004012F5_exit:


// fn00401314
// Return size: 6
void fn00401314()
fn00401314_entry:
	// succ:  l00401314
l00401314:
	esp = fp
	ebx = ebx | eax
	SZO = cond(ebx)
	C = false
	edx = esi
	edx = edx + ecx
	SCZO = cond(edx)
	ecx = ecx ^ ebx
	SZO = cond(ecx)
	C = false
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	call fn0040110D (retsize: 4;)
	branch Test(UGE,C) l00401325_thunk_fn0040139D
	goto l00401327
	// succ:  l00401327 l00401325_thunk_fn0040139D
l00401314:
l00401325_thunk_fn0040139D:
	call fn0040139D (retsize: 6;)
	return
	// succ:  fn00401314_exit
l00401327:
	__outb(0x70, al)
	SCZO = cond(ah - Mem0[0x0C87D50A:byte])
	// succ:  l00401329_thunk_fn0040132F
l00401329_thunk_fn0040132F:
	call fn0040132F (retsize: 0;)
	return
	// succ:  fn00401314_exit
fn00401314_exit:


// fn0040132D
// Return size: 0
void fn0040132D()
fn0040132D_entry:
	// succ:  l0040132D
l0040132D:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = ecx
	ecx = v3
fn0040132D_exit:


// fn0040132F
// Return size: 0
void fn0040132F()
fn0040132F_entry:
	goto l0040132F
	// succ:  l0040132F
l00401130:
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx | edx
	SZO = cond(ebx)
	C = false
	// succ:  l00401134
l00401134:
	edx = edx ^ esi
	SZO = cond(edx)
	C = false
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	eax = ebx
	eax = eax - 0x00000001
	SZO = cond(eax)
	edx = edx + 0x00000001
	SZO = cond(edx)
	edi = edi + ebx
	SCZO = cond(edi)
	call fn00401264 (retsize: 4;)
	branch Test(UGE,C) l00401134
	// succ:  l00401146 l00401134
l00401146:
	v14 = Mem0[esi:word32]
	Mem0[edi:word32] = v14
	esi = esi + 0x00000004
	edi = edi + 0x00000004
	branch Test(GE,SO) TMP!
l0040132F:
	esp = fp
	al = al & 0xF3
	SZO = cond(al)
	C = false
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi - 0x00000001
	SZO = cond(esi)
	ebx = ebx + eax
	SCZO = cond(ebx)
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	ebx = ebx + ecx
	SCZO = cond(ebx)
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	goto l00401130
	// succ:  l00401130
l0040132F:
fn0040132F_exit:


// fn0040134A
// Return size: 0
void fn0040134A()
fn0040134A_entry:
	goto l0040134A
	// succ:  l0040134A
l004012DD:
	edx = edx | esi
	SZO = cond(edx)
	C = false
	edx = edx + 0x00000001
	SZO = cond(edx)
	ecx = ecx ^ edx
	SZO = cond(ecx)
	C = false
	edi = edi ^ eax
	SZO = cond(edi)
	C = false
	edi = edi + ebx
	SCZO = cond(edi)
	esi = esi + 0x00000001
	SZO = cond(esi)
	edi = edi - 0x00000001
	SZO = cond(edi)
	ebx = ebx + edi
	SCZO = cond(ebx)
	edx = edx - edi
	SCZO = cond(edx)
	call fn0040104C (retsize: 4;)
	goto l8FB5C628
	// succ:  l8FB5C628
l0040134A:
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = edi
	edi = v3
	ah = ah
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx ^ ebx
	SZO = cond(edx)
	C = false
	eax = eax & 0xEEEEEEEE
	SZO = cond(eax)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	esi = esi + ecx
	SCZO = cond(esi)
	esi = edx
	ebx = ebx - edi
	SCZO = cond(ebx)
	branch Test(OV,O) l004012DD
	// succ:  l00401365 l004012DD
l00401365:
	ebx = ebx
	esp = esp - 0x00000002
	Mem0[esp:word16] = dx
	dx = Mem0[esp:word16]
	esp = esp + 0x00000002
	branch Test(NO,O) l004012DD
	// succ:  l00401371 l004012DD
l00401371:
	v16 = Mem0[edx:word32] + eax + C
	Mem0[edx:word32] = v16
	SCZO = cond(v16)
	al = al - 0x7A
	SCZO = cond(al)
	// succ:  l00401373_thunk_fn00401375
l00401373_thunk_fn00401375:
	call fn00401375 (retsize: 0;)
	return
	// succ:  fn0040134A_exit
l8FB5C628:
fn0040134A_exit:


// fn00401375
// Return size: 0
void fn00401375()
fn00401375_entry:
	// succ:  l00401375
l00401375:
	esp = fp
	call fn00402A9C (retsize: 4;)
l00401375:
	call fn00402A9C (retsize: 4;)
fn00401375_exit:


// fn0040139D
// Return size: 6
void fn0040139D()
fn0040139D_entry:
	// succ:  l0040139D
l0040139D:
	esp = fp
	ebp = Mem0[edi:word32] *s 0xFFFFFFBD
	SCZO = cond(ebp)
	v6 = Mem0[esp + eax * 0x00000004:word32]
	Mem0[esp + eax * 0x00000004:word32] = eax
	eax = v6
	return
	// succ:  fn0040139D_exit
l0040139D:
fn0040139D_exit:


// fn0040205B
// Return size: 0
void fn0040205B()
fn0040205B_entry:
	// succ:  l0040205B
l0040205B:
	esp = fp
	al = al + 0x27 + C
	SCZO = cond(al)
	dl = dl + 0x01
	SZO = cond(dl)
	dh = dh - cl
	SCZO = cond(dh)
	ah = ah - cl
	SCZO = cond(ah)
	ah = ah + 0x01
	SZO = cond(ah)
	dh = dh + 0x34
	SCZO = cond(dh)
	call fn0040223A (retsize: 4;)
	ds_ecx = Mem0[0xEB3548CC:segptr32]
	goto l0040206E_thunk_fn00402074
	// succ:  l0040206E_thunk_fn00402074
l0040205B:
l0040206E_thunk_fn00402074:
	call fn00402074 (retsize: 0;)
	return
	// succ:  fn0040205B_exit
fn0040205B_exit:


// fn00402074
// Return size: 0
void fn00402074()
fn00402074_entry:
	// succ:  l00402074
l00402074:
	esp = fp
	bh = ~bh
	esi = esi + 0x00000001
	SZO = cond(esi)
	bl = bl - 0x0D - C
	SCZO = cond(bl)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	esi = esi + edi
	SCZO = cond(esi)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bh = bh ^ ch
	SZO = cond(bh)
	C = false
	goto l00402081_thunk_fn00402936
	// succ:  l00402081_thunk_fn00402936
l00402074:
l00402081_thunk_fn00402936:
	call fn00402936 (retsize: 0;)
	return
	// succ:  fn00402074_exit
fn00402074_exit:


// fn0040208B
// Return size: 0
void fn0040208B()
fn0040208B_entry:
	// succ:  l0040208B
l0040208B:
	esp = fp
	eax = eax - ebx
	SCZO = cond(eax)
	edx = edx + 0x00000001
	SZO = cond(edx)
	ebx = ebx - esi
	SCZO = cond(ebx)
	ah = ah + 0xE5 + C
	SCZO = cond(ah)
	esi = esi + 0x00000001
	SZO = cond(esi)
	ebx = eax
	ah = ah | bh
	SZO = cond(ah)
	C = false
	call fn004027E0 (retsize: 4;)
l0040208B:
fn0040208B_exit:


// fn004020A3
// Return size: 0
void fn004020A3()
fn004020A3_entry:
	// succ:  l004020A3
l004020A3:
	esp = fp
	Mem0[esp:word32] = esi
	v4 = bl
	bl = bl
	bl = v4
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi + esi
	SCZO = cond(edi)
	bh = bh + 0xB9 + C
	SCZO = cond(bh)
	bh = bl
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	bl = bl - cl
	SCZO = cond(bl)
	call fn00402B5A (retsize: 4;)
	esp = esp + 0xFFFFFFFA
	edx = 0x86559340
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	ah = FPUF
	dh = dh & dh
	SZO = cond(dh)
	C = false
	// succ:  l004020C0_thunk_fn004020C2
l004020C0_thunk_fn004020C2:
	call fn004020C2 (retsize: 0;)
	return
	// succ:  fn004020A3_exit
fn004020A3_exit:


// fn004020C1
// Return size: 0
void fn004020C1()
fn004020C1_entry:
	// succ:  l004020C1
l004020C1:
	esp = fp
	al = ~al
	goto l004020C1_thunk_fn004020C2
	// succ:  l004020C1_thunk_fn004020C2
l004020C1:
l004020C1_thunk_fn004020C2:
	call fn004020C2 (retsize: 0;)
	return
	// succ:  fn004020C1_exit
l004020D1_thunk_fn00402807:
	call fn00402807 (retsize: 0;)
	return
	// succ:  fn004020C1_exit
fn004020C1_exit:


// fn004020C2
// Return size: 0
void fn004020C2()
fn004020C2_entry:
	// succ:  l004020C2
l004020C2:
	esp = fp
	v4 = Mem0[ebx:byte] >>u 0x01
	Mem0[ebx:byte] = v4
	SCZO = cond(v4)
	v6 = (Mem0[eax + 0x0000004A:word32] & 0x00000001 << 0x01) != 0x00000000
	Mem0[eax + 0x0000004A:word32] = __ror(Mem0[eax + 0x0000004A:word32], 0x01)
	C = v6
	al = al - 0x01
	SZO = cond(al)
	edx = edx ^ esi
	SZO = cond(edx)
	C = false
	ah = ch
	dh = dh + bl
	SCZO = cond(dh)
	dl = dl ^ bh
	SZO = cond(dl)
	C = false
	// succ:  l004020D1_thunk_fn00402807 l004020D1_thunk_fn00402807
l004020C2:
	edx = edx - ecx
	SCZO = cond(edx)
	eax = eax - 0x00000001
	SZO = cond(eax)
	edx = edx - 0x00000001
	SZO = cond(edx)
	al = al - 0x01
	SZO = cond(al)
	edx = edx ^ esi
	SZO = cond(edx)
	C = false
	ah = ch
	dh = dh + bl
	SCZO = cond(dh)
	dl = dl ^ bh
	SZO = cond(dl)
	C = false
l004020D1_thunk_fn00402807:
	call fn00402807 (retsize: 0;)
	return
	// succ:  fn004020C2_exit
fn004020C2_exit:


// fn00402125
// Return size: 0
void fn00402125()
fn00402125_entry:
	// succ:  l00402125
l00402125:
	branch Test(NE,Z) l00402125_thunk_fn00402509
	goto l0040212B
	// succ:  l0040212B l00402125_thunk_fn00402509
l00402125_thunk_fn00402509:
	call fn00402509 (retsize: 0;)
	return
	// succ:  fn00402125_exit
l0040212B:
	esi = esi + edx
	SCZO = cond(esi)
	bl = bl | al
	SZO = cond(bl)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	bh = bh + 0x01
	SZO = cond(bh)
	edi = edi - edx
	SCZO = cond(edi)
fn00402125_exit:


// fn00402140
// Return size: 0
void fn00402140()
fn00402140_entry:
	// succ:  l00402140
l00402140:
	bh = bh + 0x52
	SCZO = cond(bh)
	bl = bl - 0x01
	SZO = cond(bl)
	ebx = ebx ^ edi
	SZO = cond(ebx)
	C = false
	dl = bh
	bh = dh
	ah = ah - bh
	SCZO = cond(ah)
	al = dl
	ah = ah - 0x6B - C
	SCZO = cond(ah)
	edi = edi ^ 0xE1D2C968
	SZO = cond(edi)
	C = false
	eax = eax - 0x00000001
	SZO = cond(eax)
	call fn0040246D (retsize: 4;)
	ah = ah + Mem0[edi:byte]
	SCZO = cond(ah)
	eax = eax | 0x9D17B07F
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 0x03DFDF80)
	// succ:  l00402165_thunk_fn0040216A
l00402165_thunk_fn0040216A:
	call fn0040216A (retsize: 0;)
	return
	// succ:  fn00402140_exit
fn00402140_exit:


// fn00402166
// Return size: 0
void fn00402166()
fn00402166_entry:
	// succ:  l00402166
l00402166:
	esp = fp
	bh = bh - 0xDF - C
	SCZO = cond(bh)
	edi = edi + edx
	SCZO = cond(edi)
	goto l00402169_thunk_fn0040216A
	// succ:  l00402169_thunk_fn0040216A
l00402166:
l00402169_thunk_fn0040216A:
	call fn0040216A (retsize: 0;)
	return
	// succ:  fn00402166_exit
fn00402166_exit:


// fn0040216A
// Return size: 0
void fn0040216A()
fn0040216A_entry:
	// succ:  l0040216A
l0040216A:
	esp = fp
	__cli()
	bh = bh + 0x01
	SZO = cond(bh)
	edi = edi + esi
	SCZO = cond(edi)
	bl = bl - ah
	SCZO = cond(bl)
	bh = bh + 0x01
	SZO = cond(bh)
	bl = bl - cl
	SCZO = cond(bl)
	bl = bl + al
	SCZO = cond(bl)
	bh = ~bh
	branch Test(EQ,Z) l00402179_thunk_fn00402616
	goto l00402179_thunk_fn0040217F
	// succ:  l00402179_thunk_fn0040217F l00402179_thunk_fn00402616
l0040216A:
	bh = bh + 0x01
	SZO = cond(bh)
	edi = edi + esi
	SCZO = cond(edi)
	bl = bl - ah
	SCZO = cond(bl)
	bh = bh + 0x01
	SZO = cond(bh)
	bl = bl - cl
	SCZO = cond(bl)
	bl = bl + al
	SCZO = cond(bl)
	bh = ~bh
	branch Test(EQ,Z) l00402616
	// succ:  l00402178_thunk_fn0040217F l00402178_thunk_fn00402616
l00402178_thunk_fn0040217F:
	call fn0040217F (retsize: 0;)
	return
	// succ:  fn0040216A_exit
l00402178_thunk_fn00402616:
	call fn00402616 (retsize: 0;)
	return
	// succ:  fn0040216A_exit
l00402179_thunk_fn0040217F:
	call fn0040217F (retsize: 0;)
	return
	// succ:  fn0040216A_exit l00402179_thunk_fn0040217F
l00402179_thunk_fn0040217F:
	call fn0040217F (retsize: 0;)
	return
	// succ:  fn0040216A_exit
l00402179_thunk_fn00402616:
	call fn00402616 (retsize: 0;)
	return
	// succ:  fn0040216A_exit
fn0040216A_exit:


// fn0040217F
// Return size: 0
void fn0040217F()
fn0040217F_entry:
	// succ:  l0040217F
l0040217F:
	branch Test(EQ,Z) l00402181
	// succ:  l00402181
l00402181:
	esi = esi
	branch Test(NE,Z) l00402616
	goto l00402189
	// succ:  l00402189 l00402183_thunk_fn00402616
l00402183_thunk_fn00402616:
	call fn00402616 (retsize: 0;)
	return
	// succ:  fn0040217F_exit
l00402189:
	ebp = 0x80652AD7
fn0040217F_exit:


// fn0040218D
// Return size: 0
void fn0040218D()
fn0040218D_entry:
	// succ:  l0040218D
l0040218D:
	dh = dh + 0x8F + C
	SCZO = cond(dh)
	goto l0040218E
	// succ:  l0040218E
l0040219D_thunk_fn004029D4:
	call fn004029D4 (retsize: 0;)
	return
	// succ:  fn0040218D_exit
l004021A5:
l004029E0_thunk_fn00402DD0:
	call fn00402DD0 (retsize: 4;)
	return
	// succ:  fn0040218D_exit
fn0040218D_exit:


// fn004021A0
// Return size: 0
void fn004021A0()
fn004021A0_entry:
	// succ:  l004021A0
l004021A0:
	ch = Mem0[edi:byte]
	v6 = Mem0[eax:byte] | al
	Mem0[eax:byte] = v6
	SZO = cond(Mem0[eax:byte])
	C = false
	dl = dl + dh
	SCZO = cond(dl)
	goto l004021A4_thunk_fn004021A6
	// succ:  l004021A4_thunk_fn004021A6
fn004021A0_exit:


// fn004021A6
// Return size: 0
void fn004021A6()
fn004021A6_entry:
	// succ:  l004021A6
l004021A6:
	esp = fp
	branch Test(PO,P) l004021A6_thunk_fn004029D4
	goto l004021AC
	// succ:  l004021AC l004021A6_thunk_fn004029D4
l004021A6:
l004021A6_thunk_fn004029D4:
	call fn004029D4 (retsize: 0;)
	return
	// succ:  fn004021A6_exit
l004021AC:
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	branch Test(GE,SO) l004021AE_thunk_fn0040222D
	goto l004021B0
	// succ:  l004021B0 l004021AE_thunk_fn0040222D
l004021AE_thunk_fn0040222D:
	call fn0040222D (retsize: 0;)
	return
	// succ:  fn004021A6_exit
l004021B0:
	cl = cl - Mem0[ebx:byte] - C
	SCZO = cond(cl)
	branch Test(LE,SZO) TMP!
l004021B2_thunk_fn004021B7:
	call fn004021B7 (retsize: 0;)
	return
	// succ:  fn004021A6_exit
fn004021A6_exit:


// fn004021B3
// Return size: 0
void fn004021B3()
fn004021B3_entry:
	goto l004021B3
	// succ:  l004021B3
l004021A4_thunk_fn004021A6:
	call fn004021A6 (retsize: 0;)
	return
	// succ:  fn004021B3_exit
l004021B3:
	esp = fp
	esi = esi + ebx
	SCZO = cond(esi)
	goto l004021B4
	// succ:  l004021B4
l004021B3:
l004021B4_thunk_fn004021B7:
	call fn004021B7 (retsize: 0;)
	return
	// succ:  fn004021B3_exit
fn004021B3_exit:


// fn004021B7
// Return size: 0
void fn004021B7()
fn004021B7_entry:
	// succ:  l004021B7
l004021B7:
	esp = fp
	edi = edi - ecx
	SCZO = cond(edi)
	bh = bh + 0x22 + C
	SCZO = cond(bh)
	bh = bh + dl
	SCZO = cond(bh)
	bh = bh - 0x01
	SZO = cond(bh)
	edx = eax + 0x000000F8
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	esi = esi + ebx
	SCZO = cond(esi)
	call fn004020A3 (retsize: 4;)
	branch Test(GE,SO) l004021CF_thunk_fn004021A0
	goto l004021CF_thunk_fn004021D1
	// succ:  l004021CF_thunk_fn004021D1 l004021CF_thunk_fn004021A0
l004021B7:
	edi = edi - ecx
	SCZO = cond(edi)
	bh = bh + 0x22 + C
	SCZO = cond(bh)
	bh = bh + dl
	SCZO = cond(bh)
	bh = bh - 0x01
	SZO = cond(bh)
	edx = eax + 0x000000F8
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	esi = esi + ebx
	SCZO = cond(esi)
	call fn004020A3 (retsize: 4;)
	branch Test(GE,SO) l004021A0
	goto l004021CF_thunk_fn004021D1
	// succ:  l004021CF_thunk_fn004021D1 l004021CF_thunk_fn004021A0
l004021CF_thunk_fn004021A0:
	call fn004021A0 (retsize: 0;)
	return
	// succ:  fn004021B7_exit
l004021CF_thunk_fn004021A0:
	call fn004021A0 (retsize: 0;)
	return
	// succ:  fn004021B7_exit
l004021CF_thunk_fn004021D1:
	call fn004021D1 (retsize: 0;)
	return
	// succ:  fn004021B7_exit l004021CF_thunk_fn004021D1
l004021CF_thunk_fn004021D1:
	call fn004021D1 (retsize: 0;)
	return
	// succ:  fn004021B7_exit
l004021CF_thunk_fn004021D1:
	call fn004021D1 (retsize: 0;)
	return
	// succ:  fn004021B7_exit
fn004021B7_exit:


// fn004021D1
// Return size: 0
void fn004021D1()
fn004021D1_entry:
	// succ:  l004021D1
l004021D1:
	SCZO = cond(al - Mem0[edi:byte])
	edi = edi + 0x00000001
	Mem0[ebp + 0xFE042464:byte] = 0xC7
	// succ:  l004021D2_thunk_fn004021D9
l004021D2_thunk_fn004021D9:
	call fn004021D9 (retsize: 0;)
	return
	// succ:  fn004021D1_exit
fn004021D1_exit:


// fn004021D3
// Return size: 0
void fn004021D3()
fn004021D3_entry:
	// succ:  l004021D3
l004021D3:
	esp = fp
	esp = esp + 0x00000004
	bh = bh + 0x01
	SZO = cond(bh)
	// succ:  l004021D7_thunk_fn004021D9
l004021D7_thunk_fn004021D9:
	call fn004021D9 (retsize: 0;)
	return
	// succ:  fn004021D3_exit
fn004021D3_exit:


// fn004021D9
// Return size: 0
void fn004021D9()
fn004021D9_entry:
	// succ:  l004021D9
l004021D9:
	esp = fp
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bh = 0xD0
	bl = ~bl
	bl = bl + 0x01
	SZO = cond(bl)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	dl = dl | bh
	SZO = cond(dl)
	C = false
	bl = bl + 0x01
	SZO = cond(bl)
	eax = ebx
	branch Test(ULE,CZ) l004021E7_thunk_fn00402140
	goto l004021E7_thunk_fn004021ED
	// succ:  l004021E7_thunk_fn004021ED l004021E7_thunk_fn00402140
l004021D9:
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bh = 0xD0
	bl = ~bl
	bl = bl + 0x01
	SZO = cond(bl)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	dl = dl | bh
	SZO = cond(dl)
	C = false
	bl = bl + 0x01
	SZO = cond(bl)
	eax = ebx
	branch Test(ULE,CZ) l00402140
	goto l004021E7_thunk_fn004021ED
	// succ:  l004021E7_thunk_fn004021ED l004021E7_thunk_fn00402140
l004021E7_thunk_fn00402140:
	call fn00402140 (retsize: 0;)
	return
	// succ:  fn004021D9_exit
l004021E7_thunk_fn00402140:
	call fn00402140 (retsize: 0;)
	return
	// succ:  fn004021D9_exit
l004021E7_thunk_fn004021ED:
	call fn004021ED (retsize: 0;)
	return
	// succ:  fn004021D9_exit l004021E7_thunk_fn004021ED
l004021E7_thunk_fn004021ED:
	call fn004021ED (retsize: 0;)
	return
	// succ:  fn004021D9_exit
l004021E7_thunk_fn004021ED:
	call fn004021ED (retsize: 0;)
	return
	// succ:  fn004021D9_exit
fn004021D9_exit:


// fn004021ED
// Return size: 0
void fn004021ED()
fn004021ED_entry:
	// succ:  l004021ED
l004021ED:
	v3 = al
	al = al
	al = v3
	branch Test(UGT,CZ) l00402140
	goto l004021F5
	// succ:  l004021F5 l004021EF_thunk_fn00402140
l004021EF_thunk_fn00402140:
	call fn00402140 (retsize: 0;)
	return
	// succ:  fn004021ED_exit
l004021F5:
	dh = dh | Mem0[ecx - 0x0000004F:byte]
	SZO = cond(dh)
	C = false
	Mem0[0xD980CFFE:word32] = eax
	// succ:  l004021F8_thunk_fn004021FD
l004021F8_thunk_fn004021FD:
	call fn004021FD (retsize: 0;)
	return
	// succ:  fn004021ED_exit
fn004021ED_exit:


// fn004021F9
// Return size: 0
void fn004021F9()
fn004021F9_entry:
	// succ:  l004021F9
l004021F9:
	esp = fp
	bh = bh - 0x01
	SZO = cond(bh)
	cl = cl - 0x58 - C
	SCZO = cond(cl)
	goto l004021FB_thunk_fn004021FD
	// succ:  l004021FB_thunk_fn004021FD
l004021F9:
l004021FB_thunk_fn004021FD:
	call fn004021FD (retsize: 0;)
	return
	// succ:  fn004021F9_exit
l004022D5_thunk_fn004020C1:
	call fn004020C1 (retsize: 0;)
	return
	// succ:  fn004021F9_exit
fn004021F9_exit:


// fn004021FD
// Return size: 0
void fn004021FD()
fn004021FD_entry:
	// succ:  l004021FD
l004021FD:
	esp = fp
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	al = ~al
	dh = 0x02
	cl = cl + 0xFE + C
	SCZO = cond(cl)
	dl = dl + 0x01
	SZO = cond(dl)
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	branch Test(EQ,Z) l00402209_thunk_fn00402C3B
	goto l00402209_thunk_fn0040220F
	// succ:  l00402209_thunk_fn0040220F l00402209_thunk_fn00402C3B
l004021FD:
	al = ~al
	dh = 0x02
	cl = cl + 0xFE + C
	SCZO = cond(cl)
	dl = dl + 0x01
	SZO = cond(dl)
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	branch Test(EQ,Z) l00402C3B
	// succ:  l00402208_thunk_fn0040220F l00402208_thunk_fn00402C3B
l00402208_thunk_fn0040220F:
	call fn0040220F (retsize: 0;)
	return
	// succ:  fn004021FD_exit
l00402208_thunk_fn00402C3B:
	call fn00402C3B (retsize: 0;)
	return
	// succ:  fn004021FD_exit
l00402209_thunk_fn0040220F:
	call fn0040220F (retsize: 0;)
	return
	// succ:  fn004021FD_exit l00402209_thunk_fn0040220F
l00402209_thunk_fn0040220F:
	call fn0040220F (retsize: 0;)
	return
	// succ:  fn004021FD_exit
l00402209_thunk_fn00402C3B:
	call fn00402C3B (retsize: 0;)
	return
	// succ:  fn004021FD_exit
fn004021FD_exit:


// fn0040220F
// Return size: 0
void fn0040220F()
fn0040220F_entry:
	// succ:  l0040220F
l0040220F:
	bx = bx
	branch Test(NE,Z) l00402C3B
	goto l00402218
	// succ:  l00402218 l00402212_thunk_fn00402C3B
l00402212_thunk_fn00402C3B:
	call fn00402C3B (retsize: 0;)
	return
	// succ:  fn0040220F_exit
l00402218:
	eax = __indw(0x18)
	v6 = (Mem0[esi + 0x00000056:word32] & 0x00000001 << 0x01) != 0x00000000
	Mem0[esi + 0x00000056:word32] = __rcr(Mem0[esi + 0x00000056:word32], 0x01, C)
	C = v6
	v9 = (Mem0[edi + 0x00000003:word32] & 0x00000001 << 0x20 - 0x01) != 0x00000000
	Mem0[edi + 0x00000003:word32] = __rol(Mem0[edi + 0x00000003:word32], 0x01)
	C = v9
	// succ:  l0040221D_thunk_fn0040221F
l0040221D_thunk_fn0040221F:
	call fn0040221F (retsize: 0;)
	return
	// succ:  fn0040220F_exit
fn0040220F_exit:


// fn0040221F
// Return size: 0
void fn0040221F()
fn0040221F_entry:
	// succ:  l0040221F
l0040221F:
	esp = fp
	ebx = ebx + esi
	SCZO = cond(ebx)
	esi = esi + edx
	SCZO = cond(esi)
	ebx = ebx | edx
	SZO = cond(ebx)
	C = false
	bl = bl - 0x01
	SZO = cond(bl)
	edi = eax
	bh = bh - ah
	SCZO = cond(bh)
	bh = bh - 0x99 - C
	SCZO = cond(bh)
	goto l0040222B_thunk_fn0040222D
	// succ:  l0040222B_thunk_fn0040222D
l0040221F:
	rArg0 = rArg0 + (real64) Mem0[ebx:word16]
l0040222B_thunk_fn0040222D:
	call fn0040222D (retsize: 0;)
	return
	// succ:  fn0040221F_exit
fn0040221F_exit:


// fn0040222D
// Return size: 0
void fn0040222D()
fn0040222D_entry:
	// succ:  l0040222D
l0040222D:
	esp = fp
	edx_eax = (int64) eax
	edx = edx + ecx
	SCZO = cond(edx)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	call fn00402798 (retsize: 4;)
	al = al | 0x93
	SZO = cond(al)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	v11 = Mem0[cs:esp:word32]
	Mem0[cs:esp:word32] = eax
	eax = v11
	ebx = ebx
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	dh = dh | dl
	SZO = cond(dh)
	C = false
	ah = 0xA0
	eax = eax | edx
	SZO = cond(eax)
	C = false
	goto l00402246_thunk_fn0040256A
	// succ:  l00402246_thunk_fn0040256A
l0040222D:
	edx = edx + ecx
	SCZO = cond(edx)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	call fn00402798 (retsize: 4;)
	al = al | 0x93
	SZO = cond(al)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	v17 = Mem0[cs:esp:word32]
	Mem0[cs:esp:word32] = eax
	eax = v17
	ebx = ebx
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	dh = dh | dl
	SZO = cond(dh)
	C = false
	ah = 0xA0
	eax = eax | edx
	SZO = cond(eax)
	C = false
	goto l00402246_thunk_fn0040256A
	// succ:  l00402246_thunk_fn0040256A
l00402246_thunk_fn0040256A:
	call fn0040256A (retsize: 0;)
	return
	// succ:  fn0040222D_exit
l00402246_thunk_fn0040256A:
	call fn0040256A (retsize: 0;)
	return
	// succ:  fn0040222D_exit
fn0040222D_exit:


// fn0040223A
// Return size: 0
void fn0040223A()
fn0040223A_entry:
	// succ:  l0040223A
l0040223A:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = eax
	eax = v3
	ebx = ebx
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	dh = dh | dl
	SZO = cond(dh)
	C = false
	goto l00402241
	// succ:  l00402241
l00402246_thunk_fn0040256A:
	call fn0040256A (retsize: 0;)
	return
	// succ:  fn0040223A_exit
fn0040223A_exit:


// fn00402285
// Return size: 0
void fn00402285()
fn00402285_entry:
	// succ:  l00402285
l00402285:
	esp = fp
	ebx = ebx | edx
	SZO = cond(ebx)
	C = false
	ebx = ebx + edx
	SCZO = cond(ebx)
	branch Test(ULT,C) l00402373
	// succ:  l0040228F l00402373
l0040228F:
	v8 = ah
	ah = ah
	ah = v8
	// succ:  l00402296
l00402296:
	branch Test(UGE,C) l00402373
	// succ:  l0040229C l00402373
l0040229C:
	ecx = ecx - 0x00000001
	branch Test(EQ,Z) && ecx != 0x00000000 TMP!
l00402373:
	edi = ebx
	esi = eax
	ch = ch | cl
	SZO = cond(ch)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	dl = dl + 0x7E
	SCZO = cond(dl)
	cl = cl - ah
	SCZO = cond(cl)
	edi = edi + 0x00000001
	SZO = cond(edi)
	branch Test(OV,O) l00402380_thunk_fn004028C4
	goto l00402386
	// succ:  l00402386 l00402380_thunk_fn004028C4
l00402380_thunk_fn004028C4:
	call fn004028C4 (retsize: 0;)
	return
	// succ:  fn00402285_exit
l00402386:
	eax = eax
	edx = edx
	branch Test(NO,O) l0040238A_thunk_fn004028C4
	goto l00402390
	// succ:  l00402390 l0040238A_thunk_fn004028C4
l0040238A_thunk_fn004028C4:
	call fn004028C4 (retsize: 0;)
	return
	// succ:  fn00402285_exit
l00402390:
fn00402285_exit:


// fn004022A1
// Return size: 0
void fn004022A1()
fn004022A1_entry:
	// succ:  l004022A1
l004022A1:
	esp = fp
	esp = esp + 0x00000004
	bh = 0x70
	eax = ~eax
	bl = ~bl
	bl = ~bl
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bl = bl + dh
	SCZO = cond(bl)
	bl = bl + 0x26 + C
	SCZO = cond(bl)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	call fn00402828 (retsize: 4;)
	ss = ax
	int3()
	// succ:  l004022BF_thunk_fn004022C0
l004022BF_thunk_fn004022C0:
	call fn004022C0 (retsize: 0;)
	return
	// succ:  fn004022A1_exit
fn004022A1_exit:


// fn004022C0
// Return size: 0
void fn004022C0()
fn004022C0_entry:
	// succ:  l004022C0
l004022C0:
	al = al - 0x01
	SZO = cond(al)
	al = al + dl
	SCZO = cond(al)
	dl = dl - 0x9D - C
	SCZO = cond(dl)
	eax = eax + edx
	SCZO = cond(eax)
	al = al | ah
	SZO = cond(al)
	C = false
	dh = dh ^ bl
	SZO = cond(dh)
	C = false
	edx = edx - esi
	SCZO = cond(edx)
	bh = bh ^ 0x8E
	SZO = cond(bh)
	C = false
	edx = edx + 0x00000001
	SZO = cond(edx)
	dl = dl + 0x01
	SZO = cond(dl)
	goto l004022D5_thunk_fn004020C1
	// succ:  l004022D5_thunk_fn004020C1
fn004022C0_exit:


// fn0040230E
// Return size: 0
void fn0040230E()
fn0040230E_entry:
	// succ:  l0040230E
l0040230E:
	dh = dh | ch
	SZO = cond(dh)
	C = false
	bh = ~bh
	dl = dl + al
	SCZO = cond(dl)
	ah = -ah
	SCZO = cond(ah)
	C = ah == 0x00
	dl = 0xE1
	edx = edx + ebx
	SCZO = cond(edx)
	eax = ecx
	al = al - 0x01
	SZO = cond(al)
	al = al - 0x31 - C
	SCZO = cond(al)
	// succ:  l00402320
l00402320:
	branch Test(PE,P) l00402B96
	// succ:  l00402327 l00402B96
l00402327:
	v16 = ecx
	ecx = ecx
	ecx = v16
	esp = esp - 0x00000002
	Mem0[esp:word16] = ax
	ax = Mem0[esp:word16]
	esp = esp + 0x00000002
	branch Test(PO,P) l00402B96
	// succ:  l00402333 l00402B96
l00402333:
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	goto l00402320
	// succ:  l00402320
l00402B96:
	dl = dl + 0x1B + C
	SCZO = cond(dl)
	edx = edx - eax
	SCZO = cond(edx)
	dl = dl + 0x01
	SZO = cond(dl)
	ah = ah + 0x48 + C
	SCZO = cond(ah)
	eax = eax | esi
	SZO = cond(eax)
	C = false
	dh = dh ^ ah
	SZO = cond(dh)
	C = false
	eax = eax + esi
	SCZO = cond(eax)
	edx = edx - 0x00000001
	SZO = cond(edx)
	edx = edx + esi
	SCZO = cond(edx)
	ah = ah - 0x31 - C
	SCZO = cond(ah)
	// succ:  l00402BAC_thunk_fn00402C5D
l00402BAC_thunk_fn00402C5D:
	call fn00402C5D (retsize: 0;)
	return
	// succ:  fn0040230E_exit
fn0040230E_exit:


// fn0040241F
// Return size: 0
void fn0040241F()
fn0040241F_entry:
	// succ:  l0040241F
l0040241F:
	esp = fp
	eax = eax | edx
	SZO = cond(eax)
	C = false
	ah = ah | ch
	SZO = cond(ah)
	C = false
	dh = dl
	ebx = ebx + esi
	SCZO = cond(ebx)
	esi = esi - edi
	SCZO = cond(esi)
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	dh = ~dh
	branch Test(ULT,C) l00402507
	goto l00402433
	// succ:  l00402433 l00402507
l0040241F:
l00402433:
	bl = bl
	branch Test(UGE,C) l00402507
	// succ:  l0040243B l00402507
l0040243B:
	v17 = Mem0[eax + 0x00000067 + ecx:byte] - ah - C
	Mem0[eax + 0x00000067 + ecx:byte] = v17
	SCZO = cond(v17)
	// succ:  l0040243B_thunk_fn0040243F
l0040243B_thunk_fn0040243F:
	call fn0040243F (retsize: 0;)
	return
	// succ:  fn0040241F_exit
l00402507:
	bl = bl - 0x01
	SZO = cond(bl)
	// succ:  l00402507_thunk_fn00402509
l00402507_thunk_fn00402509:
	call fn00402509 (retsize: 0;)
	return
	// succ:  fn0040241F_exit
fn0040241F_exit:


// fn0040243F
// Return size: 0
void fn0040243F()
fn0040243F_entry:
	// succ:  l0040243F
l0040243F:
	esp = fp
	ebp = 0xF6D98A47
	ax = __aam(al)
	edi = edi - 0x00000001
	SZO = cond(edi)
	bl = bl - 0x01
	SZO = cond(bl)
l0040243F:
fn0040243F_exit:


// fn00402453
// Return size: 0
void fn00402453()
fn00402453_entry:
	// succ:  l00402453
l00402453:
	esp = fp
	dl = dl + 0x01
	SZO = cond(dl)
	dl = dl + 0xBC + C
	SCZO = cond(dl)
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	al = al ^ ah
	SZO = cond(al)
	C = false
	edx = edx - ebx
	SCZO = cond(edx)
	dh = bh
	eax = eax - ebx
	SCZO = cond(eax)
l00402453:
fn00402453_exit:


// fn0040246D
// Return size: 0
void fn0040246D()
fn0040246D_entry:
	// succ:  l0040246D
l0040246D:
	esp = fp
	esp = esp + 0x00000004
	bl = bl - dl
	SCZO = cond(bl)
	bh = bh - 0xE4 - C
	SCZO = cond(bh)
	dl = ~dl
	edx = ebx
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ebx = ebx + edi
	SCZO = cond(ebx)
	ebx = ebx - edx
	SCZO = cond(ebx)
	bl = bl + 0x87
	SCZO = cond(bl)
	dl = dh
	call fn00402E0A (retsize: 4;)
	__lock()
	branch Test(ULE,CZ) l0040248A_thunk_fn0040243F
	goto l0040248C
	// succ:  l0040248C l0040248A_thunk_fn0040243F
l0040248A_thunk_fn0040243F:
	call fn0040243F (retsize: 0;)
	return
	// succ:  fn0040246D_exit
l0040248C:
	C = __daa(al, &al)
	SCZO = ah
	rArg0 = rArg0 * (real64) Mem0[edi + 0x02EC2444:word32]
	// succ:  l0040248E_thunk_fn00402494
l0040248E_thunk_fn00402494:
	call fn00402494 (retsize: 0;)
	return
	// succ:  fn0040246D_exit
fn0040246D_exit:


// fn0040248F
// Return size: 0
void fn0040248F()
fn0040248F_entry:
	// succ:  l0040248F
l0040248F:
	Mem0[esp - 0x00000014:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = bl + cl
	SCZO = cond(bl)
	// succ:  l00402493_thunk_fn00402494
l00402493_thunk_fn00402494:
	call fn00402494 (retsize: 0;)
	return
	// succ:  fn0040248F_exit
fn0040248F_exit:


// fn00402494
// Return size: 0
void fn00402494()
fn00402494_entry:
	// succ:  l00402494
l00402494:
	esp = fp
	rLoc1 = Mem0[eax + 0xD98BA2DB:real32]
	bl = bl - 0x01
	SZO = cond(bl)
	dh = cl
	edi = edx
	branch Test(LT,SO) l004024A0_thunk_fn00402674
	goto l004024A0_thunk_fn004024A6
	// succ:  l004024A0_thunk_fn004024A6 l004024A0_thunk_fn00402674
l00402494:
	bl = bl - 0xA2 - C
	SCZO = cond(bl)
	ebx = ecx
	bl = bl - 0x01
	SZO = cond(bl)
	dh = cl
	edi = edx
	branch Test(LT,SO) l00402674
	// succ:  l0040249F_thunk_fn004024A6 l0040249F_thunk_fn00402674
l0040249F_thunk_fn004024A6:
	call fn004024A6 (retsize: 0;)
	return
	// succ:  fn00402494_exit
l0040249F_thunk_fn00402674:
	call fn00402674 (retsize: 0;)
	return
	// succ:  fn00402494_exit
l004024A0_thunk_fn004024A6:
	call fn004024A6 (retsize: 0;)
	return
	// succ:  fn00402494_exit l004024A0_thunk_fn004024A6
l004024A0_thunk_fn004024A6:
	call fn004024A6 (retsize: 0;)
	return
	// succ:  fn00402494_exit
l004024A0_thunk_fn00402674:
	call fn00402674 (retsize: 0;)
	return
	// succ:  fn00402494_exit
fn00402494_exit:


// fn004024A6
// Return size: 0
void fn004024A6()
fn004024A6_entry:
	// succ:  l004024A6
l004024A6:
	v3 = ch
	ch = ch
	ch = v3
	branch Test(GE,SO) l00402674
	goto l004024AE
	// succ:  l004024AE l004024A8_thunk_fn00402674
l004024A8_thunk_fn00402674:
	call fn00402674 (retsize: 0;)
	return
	// succ:  fn004024A6_exit
l004024AE:
	al = al ^ 0x75
	SZO = cond(al)
	C = false
	v9 = Mem0[edi + 0xD8F64A2B:byte]
	Mem0[edi + 0xD8F64A2B:byte] = ch
	ch = v9
	edx = edx - edi
	SCZO = cond(edx)
	edx = edx + edi
	SCZO = cond(edx)
	eax = eax + edi
	SCZO = cond(eax)
	Mem0[ecx:byte] = bl
	dl = dl + 0x77 + C
	SCZO = cond(dl)
	ah = ah - 0x6B - C
	SCZO = cond(ah)
	eax = eax - 0x00000001
	SZO = cond(eax)
	branch Test(ULE,CZ) l00402D17
	// succ:  l004024CB l00402D17
l004024CB:
l00402D17:
	al = bl
	eax = eax - 0x00000001
	SZO = cond(eax)
	al = al - 0x0E - C
	SCZO = cond(al)
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	dl = dl ^ bl
	SZO = cond(dl)
	C = false
	dh = dh - 0x01
	SZO = cond(dh)
	eax = eax - 0x00000001
	SZO = cond(eax)
	dh = dh + 0xA4
	SCZO = cond(dh)
	dl = dl + 0x5A + C
	SCZO = cond(dl)
	al = al + bh
	SCZO = cond(al)
	// succ:  l00402D2C_thunk_fn00402A77
l00402D2C_thunk_fn00402A77:
	call fn00402A77 (retsize: 0;)
	return
	// succ:  fn004024A6_exit
fn004024A6_exit:


// fn004024EE
// Return size: 6
void fn004024EE()
fn004024EE_entry:
	goto l004024EE
	// succ:  l004024EE
l0040210C:
	bl = bl + dl
	SCZO = cond(bl)
	bh = bh + 0x0C + C
	SCZO = cond(bh)
	ebx = ebx + edx
	SCZO = cond(ebx)
	bh = bh + 0x7B
	SCZO = cond(bh)
	bh = bh + cl
	SCZO = cond(bh)
	bh = bh - 0x01
	SZO = cond(bh)
	goto l00402AD2
	// succ:  l00402AD2
l004024EE:
	esp = fp
	bh = bh + al
	SCZO = cond(bh)
	bl = ch
	esi = esi - edx
	SCZO = cond(esi)
	ebx = edx
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	eax = ecx
	esi = esi | eax
	SZO = cond(esi)
	C = false
	goto l0040210C
	// succ:  l0040210C
l004024EE:
l00402AD2:
	ebx = ebx - edx
	SCZO = cond(ebx)
	bh = bh - 0x01
	SZO = cond(bh)
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	bl = bl - ch
	SCZO = cond(bl)
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	bh = bh + 0x01
	SZO = cond(bh)
	bl = bl - 0xF8 - C
	SCZO = cond(bl)
	bh = bh ^ ch
	SZO = cond(bh)
	C = false
	eax = eax + Mem0[eax + 0x0000003C:word32]
	SCZO = cond(eax)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	call fn0040285A (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	return
	// succ:  fn004024EE_exit
fn004024EE_exit:


// fn00402509
// Return size: 0
void fn00402509()
fn00402509_entry:
	// succ:  l00402509
l00402509:
	esp = fp
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	dh = 0x71
	ah = ah + 0x5B
	SCZO = cond(ah)
	ebx = ebx - eax
	SCZO = cond(ebx)
	eax = eax + 0x00000001
	SZO = cond(eax)
	bl = 0xDB
	edx = edx | eax
	SZO = cond(edx)
	C = false
	branch Test(SG,S) l00402516_thunk_fn0040208B
	goto l0040251C
	// succ:  l0040251C l00402516_thunk_fn0040208B
l00402516_thunk_fn0040208B:
	call fn0040208B (retsize: 0;)
	return
	// succ:  fn00402509_exit
l0040251C:
	// succ:  l00402522
l00402522:
	// succ:  l00402527
l00402527:
	branch Test(NS,S) l00402527_thunk_fn0040208B
	goto l0040252D
	// succ:  l0040252D l00402527_thunk_fn0040208B
l00402527_thunk_fn0040208B:
	call fn0040208B (retsize: 0;)
	return
	// succ:  fn00402509_exit
l0040252D:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0xADAFC94B
	Mem0[0x80C0FE3B:word32] = eax
	// succ:  l00402532_thunk_fn00402537
l00402532_thunk_fn00402537:
	call fn00402537 (retsize: 0;)
	return
	// succ:  fn00402509_exit
fn00402509_exit:


// fn00402534
// Return size: 0
void fn00402534()
fn00402534_entry:
	// succ:  l00402534
l00402534:
	esp = fp
	al = al + 0x01
	SZO = cond(al)
	ah = ah + 0x86
	SCZO = cond(ah)
	goto l00402536_thunk_fn00402537
	// succ:  l00402536_thunk_fn00402537
l00402534:
l00402536_thunk_fn00402537:
	call fn00402537 (retsize: 0;)
	return
	// succ:  fn00402534_exit
fn00402534_exit:


// fn00402537
// Return size: 0
void fn00402537()
fn00402537_entry:
	// succ:  l00402537
l00402537:
	esp = fp
	es_eax = Mem0[esi + 0xC202C60B:segptr32]
	edx = edx + 0x00000001
	SZO = cond(edx)
	al = al - cl
	SCZO = cond(al)
	eax = eax | edi
	SZO = cond(eax)
	C = false
	eax = eax + 0x00000001
	SZO = cond(eax)
	dh = dh - 0x01
	SZO = cond(dh)
	al = al | dl
	SZO = cond(al)
	C = false
	goto l00402547_thunk_fn0040230E
	// succ:  l00402547_thunk_fn0040230E
l00402537:
	eax = eax | esi
	SZO = cond(eax)
	C = false
	al = al + dl
	SCZO = cond(al)
	edx = edx + 0x00000001
	SZO = cond(edx)
	al = al - cl
	SCZO = cond(al)
	eax = eax | edi
	SZO = cond(eax)
	C = false
	eax = eax + 0x00000001
	SZO = cond(eax)
	dh = dh - 0x01
	SZO = cond(dh)
	al = al | dl
	SZO = cond(al)
	C = false
	// succ:  l00402543_thunk_fn0040230E
l00402543_thunk_fn0040230E:
	call fn0040230E (retsize: 0;)
	return
	// succ:  fn00402537_exit
l00402547_thunk_fn0040230E:
	call fn0040230E (retsize: 0;)
	return
	// succ:  fn00402537_exit
fn00402537_exit:


// fn0040256A
// Return size: 0
void fn0040256A()
fn0040256A_entry:
	// succ:  l0040256A
l0040256A:
	esp = fp
	edx = edx - eax
	SCZO = cond(edx)
	al = al + bh
	SCZO = cond(al)
	al = 0x61
	ah = ah + 0xE9
	SCZO = cond(ah)
	eax = eax - ebx
	SCZO = cond(eax)
	eax = eax - esi
	SCZO = cond(eax)
	branch Test(LE,SZO) l00402577_thunk_fn00402E2A
	goto l0040257D
	// succ:  l0040257D l00402577_thunk_fn00402E2A
l0040256A:
l00402577_thunk_fn00402E2A:
	call fn00402E2A (retsize: 0;)
	return
	// succ:  fn0040256A_exit
l0040257D:
	branch Test(SG,S) l0040257F
	// succ:  l0040257F
l0040257F:
	branch Test(GT,SZO) l0040257F_thunk_fn00402E2A
	goto l00402585
	// succ:  l00402585 l0040257F_thunk_fn00402E2A
l0040257F_thunk_fn00402E2A:
	call fn00402E2A (retsize: 0;)
	return
	// succ:  fn0040256A_exit
l00402585:
	v14 = Mem0[eax:byte] >>u cl
	Mem0[eax:byte] = v14
	SCZO = cond(v14)
	edi = edi - 0x00000001
	SZO = cond(edi)
fn0040256A_exit:


// fn004025AA
// Return size: 0
void fn004025AA()
fn004025AA_entry:
	// succ:  l004025AA
l004025AA:
	esp = fp
	ebx = ebx ^ ecx
	SZO = cond(ebx)
	C = false
	edx = eax
	ah = ah + ch
	SCZO = cond(ah)
	edi = edi - ecx
	SCZO = cond(edi)
	dl = dl + bh
	SCZO = cond(dl)
	edi = edi - 0x00000001
	SZO = cond(edi)
	bl = bl + dh
	SCZO = cond(bl)
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	edi = 0xE1D2C5FA
	call fn004021D3 (retsize: 4;)
	v18 = Mem0[eax + 0x0000000B:word32] + esi + C
	Mem0[eax + 0x0000000B:word32] = v18
	SCZO = cond(v18)
	eax = eax + 0x00000001
	SZO = cond(eax)
	ah = FPUF
	goto l004025C7_thunk_fn004025C8
	// succ:  l004025C7_thunk_fn004025C8
l004025AA:
l004025C7_thunk_fn004025C8:
	call fn004025C8 (retsize: 0;)
	return
	// succ:  fn004025AA_exit
fn004025AA_exit:


// fn004025C8
// Return size: 0
void fn004025C8()
fn004025C8_entry:
	// succ:  l004025C8
l004025C8:
	esp = fp
	Mem0[esp - 0x00000014:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = 0x2D
	eax = eax + 0x00000078
	bl = bl + 0x01
	SZO = cond(bl)
	edi = edi - 0x00000001
	SZO = cond(edi)
	bh = bh + 0x36 + C
	SCZO = cond(bh)
	bl = bl + 0xD3 + C
	SCZO = cond(bl)
	edi = edi - 0x00000001
	SZO = cond(edi)
	// succ:  l004025DB_thunk_fn00402074
l004025DB_thunk_fn00402074:
	call fn00402074 (retsize: 0;)
	return
	// succ:  fn004025C8_exit
fn004025C8_exit:


// fn00402616
// Return size: 0
void fn00402616()
fn00402616_entry:
	// succ:  l00402616
l00402616:
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi - 0x00000001
	SZO = cond(edi)
	edi = edi + 0x00000001
	SZO = cond(edi)
	bh = bh + 0x10 + C
	SCZO = cond(bh)
	bh = bh - 0xD6 - C
	SCZO = cond(bh)
	bh = bh - 0x01
	SZO = cond(bh)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	bl = bl | dh
	SZO = cond(bl)
	C = false
	bh = bh + 0x01
	SZO = cond(bh)
	branch Test(ULE,CZ) l00402629_thunk_fn0040221F
	goto l0040262F
	// succ:  l0040262F l00402629_thunk_fn0040221F
l00402629_thunk_fn0040221F:
	call fn0040221F (retsize: 0;)
	return
	// succ:  fn00402616_exit
l0040262F:
	branch Test(LE,SZO) l00402631
	// succ:  l00402631
l00402631:
	dh = dh
	branch Test(UGT,CZ) l00402633_thunk_fn0040221F
	goto l00402639
	// succ:  l00402639 l00402633_thunk_fn0040221F
l00402633_thunk_fn0040221F:
	call fn0040221F (retsize: 0;)
	return
	// succ:  fn00402616_exit
l00402639:
	esi = esi - 0x00000001
	SZO = cond(esi)
	al = Mem0[esi:byte]
	esi = esi + 0x00000001
	branch Test(PE,P) l0040263B_thunk_fn00402692
	goto l0040263D
	// succ:  l0040263D l0040263B_thunk_fn00402692
l0040263B_thunk_fn00402692:
	call fn00402692 (retsize: 0;)
	return
	// succ:  fn00402616_exit
l0040263D:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
fn00402616_exit:


// fn00402641
// Return size: 0
void fn00402641()
fn00402641_entry:
	// succ:  l00402641
l00402641:
	esp = fp
	bh = bh - bl
	SCZO = cond(bh)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bh = ~bh
	bh = bh + cl
	SCZO = cond(bh)
	edi = edi - 0x00000001
	SZO = cond(edi)
	bh = 0x68
	ebx = ebx - ecx
	SCZO = cond(ebx)
	bh = bh + bl
	SCZO = cond(bh)
	call fn00402CFB (retsize: 4;)
l00402641:
fn00402641_exit:


// fn00402659
// Return size: 0
void fn00402659()
fn00402659_entry:
	// succ:  l00402659
l00402659:
	esp = fp
	eax = eax - 0x00000001
	SZO = cond(eax)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	ebx = ebx + edi
	SCZO = cond(ebx)
	ah = ah ^ ch
	SZO = cond(ah)
	C = false
	al = ~al
	ah = ah - dh
	SCZO = cond(ah)
	edi = edi - eax
	SCZO = cond(edi)
	bl = bl ^ cl
	SZO = cond(bl)
	C = false
	goto l00402668_thunk_fn00402758
	// succ:  l00402668_thunk_fn00402758
l00402659:
l00402668_thunk_fn00402758:
	call fn00402758 (retsize: 0;)
	return
	// succ:  fn00402659_exit
fn00402659_exit:


// fn0040266F
// Return size: 0
void fn0040266F()
fn0040266F_entry:
	// succ:  l0040266F
l0040266F:
	eax = (int32) ax
	esp = esp - 0x00000004
	Mem0[esp:word32] = es
	v8 = Mem0[edx + 0x2BF50228:word32] + ecx
	Mem0[edx + 0x2BF50228:word32] = v8
	SCZO = cond(v8)
	// succ:  l00402671_thunk_fn00402677
l00402671_thunk_fn00402677:
	call fn00402677 (retsize: 0;)
	return
	// succ:  fn0040266F_exit
fn0040266F_exit:


// fn00402674
// Return size: 0
void fn00402674()
fn00402674_entry:
	// succ:  l00402674
l00402674:
	dh = dh + ch
	SCZO = cond(dh)
	edi = edi - edx
	SCZO = cond(edi)
	call fn00402B74 (retsize: 4;)
	// succ:  l00402676_thunk_fn00402677 l00402683_thunk_fn00402688
l00402676_thunk_fn00402677:
	call fn00402677 (retsize: 0;)
	return
	// succ:  fn00402674_exit
l00402683_thunk_fn00402688:
	call fn00402688 (retsize: 0;)
	return
	// succ:  fn00402674_exit
fn00402674_exit:


// fn00402677
// Return size: 0
void fn00402677()
fn00402677_entry:
	// succ:  l00402677
l00402677:
	esp = fp
	__cli()
	dl = dl - 0xBB - C
	SCZO = cond(dl)
	dh = dh ^ dl
	SZO = cond(dh)
	C = false
	edi = edi ^ esi
	SZO = cond(edi)
	C = false
	dl = 0xEF
	bh = bh | al
	SZO = cond(bh)
	C = false
	call fn00402B74 (retsize: 4;)
	goto l00402683_thunk_fn00402688
	// succ:  l00402683_thunk_fn00402688
l00402677:
	dl = dl - 0xBB - C
	SCZO = cond(dl)
	dh = dh ^ dl
	SZO = cond(dh)
	C = false
	edi = edi ^ esi
	SZO = cond(edi)
	C = false
	dl = 0xEF
	bh = bh | al
	SZO = cond(bh)
	C = false
l00402683_thunk_fn00402688:
	call fn00402688 (retsize: 0;)
	return
	// succ:  fn00402677_exit
fn00402677_exit:


// fn00402688
// Return size: 0
void fn00402688()
fn00402688_entry:
	// succ:  l00402688
l00402688:
	esp = fp
	bh = 0x63
l00402688:
	bh = 0x63
fn00402688_exit:


// fn00402690
// Return size: 0
void fn00402690()
fn00402690_entry:
	// succ:  l00402690
l00402690:
	esp = fp
	cl = cl + 0x01
	SZO = cond(cl)
	call fn004029B3 (retsize: 4;)
	// succ:  l00402690_thunk_fn00402692 l004026A4_thunk_fn004026A9
l00402690:
l00402690_thunk_fn00402692:
	call fn00402692 (retsize: 0;)
	return
	// succ:  fn00402690_exit
l004026A4_thunk_fn004026A9:
	call fn004026A9 (retsize: 0;)
	return
	// succ:  fn00402690_exit
fn00402690_exit:


// fn00402692
// Return size: 0
void fn00402692()
fn00402692_entry:
	// succ:  l00402692
l00402692:
	esp = fp
	cl = cl - 0x01
	SZO = cond(cl)
	ch = ch + 0x01
	SZO = cond(ch)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000040
	ecx = ecx - eax
	SCZO = cond(ecx)
	ebx = ebx + esi
	SCZO = cond(ebx)
	al = al + 0x3B + C
	SCZO = cond(al)
	ch = ch + 0xD2 + C
	SCZO = cond(ch)
	al = 0x6A
	call fn004029B3 (retsize: 4;)
	goto l004026A4_thunk_fn004026A9
	// succ:  l004026A4_thunk_fn004026A9
l00402692:
	cl = cl - 0x01
	SZO = cond(cl)
	ch = ch + 0x01
	SZO = cond(ch)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000040
	ecx = ecx - eax
	SCZO = cond(ecx)
	ebx = ebx + esi
	SCZO = cond(ebx)
	al = al + 0x3B + C
	SCZO = cond(al)
	ch = ch + 0xD2 + C
	SCZO = cond(ch)
	al = 0x6A
l004026A4_thunk_fn004026A9:
	call fn004026A9 (retsize: 0;)
	return
	// succ:  fn00402692_exit
fn00402692_exit:


// fn004026A9
// Return size: 0
void fn004026A9()
fn004026A9_entry:
	// succ:  l004026A9
l004026A9:
	esp = fp
	ecx = ecx - 0x00000001
	branch Test(EQ,Z) && ecx != 0x00000000 l004026A9_thunk_fn0040266F
	goto l004026A9_thunk_fn004026AB
	// succ:  l004026A9_thunk_fn004026AB l004026A9_thunk_fn0040266F
l004026A9:
	ecx = ecx - 0x00000001
	branch Test(EQ,Z) && ecx != 0x00000000 l0040266F
	goto l004026A9_thunk_fn004026AB
	// succ:  l004026A9_thunk_fn004026AB l004026A9_thunk_fn0040266F
l004026A9_thunk_fn0040266F:
	call fn0040266F (retsize: 0;)
	return
	// succ:  fn004026A9_exit
l004026A9_thunk_fn0040266F:
	call fn0040266F (retsize: 0;)
	return
	// succ:  fn004026A9_exit
l004026A9_thunk_fn004026AB:
	call fn004026AB (retsize: 0;)
	return
	// succ:  fn004026A9_exit l004026A9_thunk_fn004026AB
l004026A9_thunk_fn004026AB:
	call fn004026AB (retsize: 0;)
	return
	// succ:  fn004026A9_exit
l004026A9_thunk_fn004026AB:
	call fn004026AB (retsize: 0;)
	return
	// succ:  fn004026A9_exit
fn004026A9_exit:


// fn004026AB
// Return size: 0
void fn004026AB()
fn004026AB_entry:
	// succ:  l004026AB
l004026AB:
	al = al - 0xBC
	SCZO = cond(al)
	// succ:  l004026AB_thunk_fn004026AD
l004026AB_thunk_fn004026AD:
	call fn004026AD (retsize: 0;)
	return
	// succ:  fn004026AB_exit
fn004026AB_exit:


// fn004026AD
// Return size: 0
void fn004026AD()
fn004026AD_entry:
	goto l004026AD
	// succ:  l004026AD
l00402551:
	bl = bl + 0x01
	SZO = cond(bl)
	bl = bl + bh
	SCZO = cond(bl)
	bh = bh - 0x01
	SZO = cond(bh)
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	edi = edi + ebx
	SCZO = cond(edi)
	edi = edx
	ebx = ebx - edx
	SCZO = cond(ebx)
	call fn00402C7C (retsize: 4;)
	SCZO = cond(bh - Mem0[eax + 0x6B2C1800:byte])
	// succ:  l00402564_thunk_fn0040256A
l00402564_thunk_fn0040256A:
	call fn0040256A (retsize: 0;)
	return
	// succ:  fn004026AD_exit
l004026AD:
	esp = fp
	bl = bl | cl
	SZO = cond(bl)
	C = false
	edi = edi ^ eax
	SZO = cond(edi)
	C = false
	bl = bl | dl
	SZO = cond(bl)
	C = false
	ebx = ebx - eax
	SCZO = cond(ebx)
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	eax = Mem0[eax:word32]
	ebx = ebx - ecx
	SCZO = cond(ebx)
	branch Test(LT,SO) l00402551
	goto l004026C1
	// succ:  l004026C1 l00402551
l004026AD:
l004026C1:
	cl = cl
	branch Test(GE,SO) l00402551
	// succ:  l004026C9 l00402551
l004026C9:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	esp = esp - 0xFFFFEC80
	// succ:  l004026C9_thunk_fn004026CD
l004026C9_thunk_fn004026CD:
	call fn004026CD (retsize: 0;)
	return
	// succ:  fn004026AD_exit
fn004026AD_exit:


// fn004026CD
// Return size: 0
void fn004026CD()
fn004026CD_entry:
	// succ:  l004026CD
l004026CD:
	esp = fp
	ebx = (word32) ah
	edi = edi - 0x00000001
	SZO = cond(edi)
	edi = ebx
	esi = esi + 0x00000001
	SZO = cond(esi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	edi = edi + 0x00000001
	SZO = cond(edi)
	esi = esi - eax
	SCZO = cond(esi)
	goto l004026D8_thunk_fn00402846
	// succ:  l004026D8_thunk_fn00402846
l004026CD:
l004026D8_thunk_fn00402846:
	call fn00402846 (retsize: 0;)
	return
	// succ:  fn004026CD_exit
fn004026CD_exit:


// fn00402700
// Return size: 0
void fn00402700()
fn00402700_entry:
	// succ:  l00402700
l00402700:
	esp = fp
	Mem0[esp:word32] = edx
	ax = ax
fn00402700_exit:


// fn0040271E
// Return size: 0
void fn0040271E()
fn0040271E_entry:
	goto l0040271E
	// succ:  l0040271E
l004026E5:
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[eax + 0x00000010:word32]
	bl = bh
	bl = bl ^ dh
	SZO = cond(bl)
	C = false
	bl = bl | bh
	SZO = cond(bl)
	C = false
	bl = bl - al
	SCZO = cond(bl)
	ebx = ebx + ecx
	SCZO = cond(ebx)
	// succ:  l004026F4_thunk_fn00402166
l004026F4_thunk_fn00402166:
	call fn00402166 (retsize: 0;)
	return
	// succ:  fn0040271E_exit
l0040271E:
	esp = fp
	edi = edi + 0x00000001
	SZO = cond(edi)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bl = ~bl
	ebx = edi
	bh = bh + 0x1D + C
	SCZO = cond(bh)
	bh = bh + 0xB9
	SCZO = cond(bh)
	edi = edi + eax
	SCZO = cond(edi)
	goto l004026E5
	// succ:  l004026E5
l0040271E:
fn0040271E_exit:


// fn00402758
// Return size: 0
void fn00402758()
fn00402758_entry:
	// succ:  l00402758
l00402758:
	esp = fp
	eax = eax - edx
	SCZO = cond(eax)
	al = al + 0xE7
	SCZO = cond(al)
	goto l0040275A_thunk_fn0040275D
	// succ:  l0040275A_thunk_fn0040275D
l00402758:
l0040275A_thunk_fn0040275D:
	call fn0040275D (retsize: 0;)
	return
	// succ:  fn00402758_exit
fn00402758_exit:


// fn0040275C
// Return size: 0
void fn0040275C()
fn0040275C_entry:
	// succ:  l0040275C
l0040275C:
	esp = fp
	__outb(0x2B, al)
	goto l0040275C_thunk_fn0040275D
	// succ:  l0040275C_thunk_fn0040275D
l0040275C:
l0040275C_thunk_fn0040275D:
	call fn0040275D (retsize: 0;)
	return
	// succ:  fn0040275C_exit
fn0040275C_exit:


// fn0040275D
// Return size: 0
void fn0040275D()
fn0040275D_entry:
	// succ:  l0040275D
l0040275D:
	esp = fp
	edx = edx - edi
	SCZO = cond(edx)
	ah = -ah
	SCZO = cond(ah)
	C = ah == 0x00
	al = al - 0x59 - C
	SCZO = cond(al)
	ah = ah + 0x01
	SZO = cond(ah)
	edi = edi - ebx
	SCZO = cond(edi)
	bh = bh - ch
	SCZO = cond(bh)
	edi = edi | edx
	SZO = cond(edi)
	C = false
	goto l0040276C_thunk_fn00402E7B
	// succ:  l0040276C_thunk_fn00402E7B
l0040275D:
	al = Mem0[ebx + (uint32) al:byte]
	ah = -ah
	SCZO = cond(ah)
	C = ah == 0x00
	al = al - 0x59 - C
	SCZO = cond(al)
	ah = ah + 0x01
	SZO = cond(ah)
	edi = edi - ebx
	SCZO = cond(edi)
	bh = bh - ch
	SCZO = cond(bh)
	edi = edi | edx
	SZO = cond(edi)
	C = false
l0040276C_thunk_fn00402E7B:
	call fn00402E7B (retsize: 0;)
	return
	// succ:  fn0040275D_exit
fn0040275D_exit:


// fn00402778
// Return size: 0
void fn00402778()
fn00402778_entry:
	// succ:  l00402778
l00402778:
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = eax
	eax = v3
	// succ:  l00402780
l00402780:
fn00402778_exit:


// fn00402798
// Return size: 0
void fn00402798()
fn00402798_entry:
	// succ:  l00402798
l00402798:
	esp = fp
	Mem0[esp:word32] = eax
fn00402798_exit:


// fn004027B2
// Return size: 0
void fn004027B2()
fn004027B2_entry:
	// succ:  l004027B2
l004027B2:
	esp = fp
	branch Test(SG,S) l004027B2_thunk_fn0040275C
	goto l004027B4
	// succ:  l004027B4 l004027B2_thunk_fn0040275C
l004027B2:
l004027B2_thunk_fn0040275C:
	call fn0040275C (retsize: 0;)
	return
	// succ:  fn004027B2_exit
l004027B4:
	__outb(dx, al)
	edx = edx_eax % Mem0[esi + 0x00000023:word32]
	eax = edx_eax / Mem0[esi + 0x00000023:word32]
	SCZO = cond(eax)
	// succ:  l004027B5_thunk_fn004027B8
l004027B5_thunk_fn004027B8:
	call fn004027B8 (retsize: 0;)
	return
	// succ:  fn004027B2_exit
fn004027B2_exit:


// fn004027B8
// Return size: 0
void fn004027B8()
fn004027B8_entry:
	// succ:  l004027B8
l004027B8:
	bh = bh + 0x01
	SZO = cond(bh)
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	edx = edx - ecx
	SCZO = cond(edx)
	dh = dh - 0x5F - C
	SCZO = cond(dh)
	dl = dl + 0x68 + C
	SCZO = cond(dl)
	branch Test(LE,SZO) l004027C6_thunk_fn00402659
	goto l004027CC
	// succ:  l004027CC l004027C6_thunk_fn00402659
l004027C6_thunk_fn00402659:
	call fn00402659 (retsize: 0;)
	return
	// succ:  fn004027B8_exit
l004027CC:
	// succ:  l004027D1
l004027D1:
	branch Test(NO,O) l004027D3
	// succ:  l004027D3
l004027D3:
	branch Test(GT,SZO) l004027D3_thunk_fn00402659
	goto l004027D9
	// succ:  l004027D9 l004027D3_thunk_fn00402659
l004027D3_thunk_fn00402659:
	call fn00402659 (retsize: 0;)
	return
	// succ:  fn004027B8_exit
l004027D9:
	bl = bl << 0x01
	SCZO = cond(bl)
	al = Mem0[0x332C5F0A:byte]
	Mem0[esp - 0x00000010:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh - 0x2A - C
	SCZO = cond(bh)
	ecx = ecx >>u 0x0000000F
	SCZO = cond(ecx)
	dl = dl ^ al
	SZO = cond(dl)
	C = false
	bl = bl | bh
	SZO = cond(bl)
	C = false
	eax = eax ^ ecx
	SZO = cond(eax)
	C = false
	bl = bl + 0x01
	SZO = cond(bl)
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	branch Test(ULT,C) l00402C01
	// succ:  l004027F6_thunk_fn004027FC l004027F6_thunk_fn00402C01
l004027F6_thunk_fn004027FC:
	call fn004027FC (retsize: 0;)
	return
	// succ:  fn004027B8_exit
l004027F6_thunk_fn00402C01:
	call fn00402C01 (retsize: 0;)
	return
	// succ:  fn004027B8_exit
fn004027B8_exit:


// fn004027E0
// Return size: 0
void fn004027E0()
fn004027E0_entry:
	// succ:  l004027E0
l004027E0:
	esp = fp
	Mem0[esp - 0x00000010:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh - 0x2A - C
	SCZO = cond(bh)
	ecx = ecx >>u 0x0000000F
	SCZO = cond(ecx)
	dl = dl ^ al
	SZO = cond(dl)
	C = false
	bl = bl | bh
	SZO = cond(bl)
	C = false
	eax = eax ^ ecx
	SZO = cond(eax)
	C = false
	bl = bl + 0x01
	SZO = cond(bl)
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	branch Test(ULT,C) l004027F6_thunk_fn00402C01
	// succ:  l004027F6_thunk_fn004027FC l004027F6_thunk_fn00402C01
l004027F6_thunk_fn004027FC:
	call fn004027FC (retsize: 0;)
	return
	// succ:  fn004027E0_exit l004027F6_thunk_fn004027FC
l004027F6_thunk_fn004027FC:
	call fn004027FC (retsize: 0;)
	return
	// succ:  fn004027E0_exit
l004027F6_thunk_fn00402C01:
	call fn00402C01 (retsize: 0;)
	return
	// succ:  fn004027E0_exit
fn004027E0_exit:


// fn004027FC
// Return size: 0
void fn004027FC()
fn004027FC_entry:
	// succ:  l004027FC
l004027FC:
fn004027FC_exit:


// fn00402807
// Return size: 0
void fn00402807()
fn00402807_entry:
	// succ:  l00402807
l00402807:
	esp = fp
	dh = dl
	edx = edx - 0x00000001
	SZO = cond(edx)
	ah = ah + 0x61 + C
	SCZO = cond(ah)
	dl = dl + bh
	SCZO = cond(dl)
	al = al ^ cl
	SZO = cond(al)
	C = false
	v13 = (bh & 0x01 << 0x08 - 0x10) != 0x00
	bh = __rol(bh, 0x10)
	C = v13
	eax = eax - edx
	SCZO = cond(eax)
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	ah = ah + 0x3C
	SCZO = cond(ah)
	dl = dl | dh
	SZO = cond(dl)
	C = false
	call fn00402CE0 (retsize: 4;)
	eax = eax - 0xBA33AB64
	SCZO = cond(eax)
	branch Test(NS,S) l00402827_thunk_fn004027B2
	goto l00402827_thunk_fn00402829
	// succ:  l00402827_thunk_fn00402829 l00402827_thunk_fn004027B2
l00402807:
l00402827_thunk_fn004027B2:
	call fn004027B2 (retsize: 0;)
	return
	// succ:  fn00402807_exit
l00402827_thunk_fn00402829:
	call fn00402829 (retsize: 0;)
	return
	// succ:  fn00402807_exit l00402827_thunk_fn00402829
l00402827_thunk_fn00402829:
	call fn00402829 (retsize: 0;)
	return
	// succ:  fn00402807_exit
fn00402807_exit:


// fn00402828
// Return size: 0
void fn00402828()
fn00402828_entry:
	// succ:  l00402828
l00402828:
	esp = fp
	Mem0[esp:word32] = edx
	// succ:  l00402828_thunk_fn00402829
l00402828_thunk_fn00402829:
	call fn00402829 (retsize: 0;)
	return
	// succ:  fn00402828_exit
fn00402828_exit:


// fn00402829
// Return size: 0
void fn00402829()
fn00402829_entry:
	// succ:  l00402829
l00402829:
	esp = fp
	al = al + 0x24 + C
	SCZO = cond(al)
	esp = esp - 0x00000002
	Mem0[esp:word16] = di
	di = Mem0[esp:word16]
	esp = esp + 0x00000002
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh ^ dh
	SZO = cond(bh)
	C = false
	esi = esi | eax
	SZO = cond(esi)
	C = false
	esi = esi ^ edi
	SZO = cond(esi)
	C = false
	bl = bl + 0x09 + C
	SCZO = cond(bl)
	esi = esi - eax
	SCZO = cond(esi)
	eax = eax | eax
	SZO = cond(eax)
	C = false
	goto l0040283D_thunk_fn00402125
	// succ:  l0040283D_thunk_fn00402125
l00402829:
	esp = esp - 0x00000002
	Mem0[esp:word16] = di
	di = Mem0[esp:word16]
	esp = esp + 0x00000002
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh ^ dh
	SZO = cond(bh)
	C = false
	esi = esi | eax
	SZO = cond(esi)
	C = false
	esi = esi ^ edi
	SZO = cond(esi)
	C = false
	bl = bl + 0x09 + C
	SCZO = cond(bl)
	esi = esi - eax
	SCZO = cond(esi)
	eax = eax | eax
	SZO = cond(eax)
	C = false
	// succ:  l00402839_thunk_fn00402125
l00402839_thunk_fn00402125:
	call fn00402125 (retsize: 0;)
	return
	// succ:  fn00402829_exit
l0040283D_thunk_fn00402125:
	call fn00402125 (retsize: 0;)
	return
	// succ:  fn00402829_exit
fn00402829_exit:


// fn00402846
// Return size: 0
void fn00402846()
fn00402846_entry:
	// succ:  l00402846
l00402846:
	esp = fp
	eax = eax >>u 0x00000010
	SCZO = cond(eax)
	edi = edi - ecx
	SCZO = cond(edi)
	esi = esi - edx
	SCZO = cond(esi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	eax = eax + edx
	SCZO = cond(eax)
	goto l00402A63
	// succ:  l00402A63
l00402846:
l00402A63:
	esi = esi - 0x00000001
	SZO = cond(esi)
	esi = esi + ecx
	SCZO = cond(esi)
	edi = edi | ecx
	SZO = cond(edi)
	C = false
	esi = esi + edx
	SCZO = cond(esi)
	eax = eax + ebx
	SCZO = cond(eax)
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	call fn00402EAD (retsize: 4;)
	v12 = eax
	eax = ebx
	ebx = v12
	edx = 0xF18A9CF5
	// succ:  l00402A74_thunk_fn00402A77
l00402A74_thunk_fn00402A77:
	call fn00402A77 (retsize: 0;)
	return
	// succ:  fn00402846_exit
fn00402846_exit:


// fn0040285A
// Return size: 0
void fn0040285A()
fn0040285A_entry:
	// succ:  l0040285A
l0040285A:
	esp = fp
	esp = esp + 0x00000004
	edi = edi + 0x00000001
	SZO = cond(edi)
	bh = ~bh
	edi = edx
	bh = bh + 0x51
	SCZO = cond(bh)
	ebx = esi
	// succ:  l00402868_thunk_fn004021B3
l00402868_thunk_fn004021B3:
	call fn004021B3 (retsize: 0;)
	return
	// succ:  fn0040285A_exit
fn0040285A_exit:


// fn00402874
// Return size: 0
void fn00402874()
fn00402874_entry:
	// succ:  l00402874
l00402874:
	esp = fp
	dl = ~dl
	eax = eax + 0x00000001
	SZO = cond(eax)
	al = al | ah
	SZO = cond(al)
	C = false
	bl = bl - 0x01
	SZO = cond(bl)
	bl = bl + 0x01
	SZO = cond(bl)
	dh = ~dh
	branch Test(SG,S) l00402C9A
	goto l00402885
	// succ:  l00402885 l00402C9A
l00402874:
l00402885:
l00402C9A:
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	goto l00402C9B
	// succ:  l00402C9B
fn00402874_exit:


// fn00402894
// Return size: 0
void fn00402894()
fn00402894_entry:
	goto l00402894
	// succ:  l00402894
l004023FA:
	bl = al
	dh = dh - bh
	SCZO = cond(dh)
	al = al ^ ah
	SZO = cond(al)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	ah = ah + bh
	SCZO = cond(ah)
	dl = dl - 0x01
	SZO = cond(dl)
	dh = dh + 0xB0
	SCZO = cond(dh)
	branch Test(ULE,CZ) l00402408_thunk_fn00402874
	goto l0040240E
	// succ:  l0040240E l00402408_thunk_fn00402874
l00402408_thunk_fn00402874:
	call fn00402874 (retsize: 0;)
	return
	// succ:  fn00402894_exit
l0040240E:
l00402894:
	ecx = ecx + 0x00000BC3
	SCZO = cond(ecx)
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	eax = eax - ebx
	SCZO = cond(eax)
	edx = edx ^ ecx
	SZO = cond(edx)
	C = false
	bl = bl + 0x01
	SZO = cond(bl)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ah = ah + bh
	SCZO = cond(ah)
	dl = dl + 0x9E
	SCZO = cond(dl)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	eax = eax + edi
	SCZO = cond(eax)
	branch Test(LE,SZO) l004023FA
	// succ:  l004028B2 l004023FA
l004028B2:
fn00402894_exit:


// fn004028C4
// Return size: 0
void fn004028C4()
fn004028C4_entry:
	// succ:  l004028C4
l004028C4:
	esp = fp
	bh = ~bh
	al = ~al
	dh = dh | cl
	SZO = cond(dh)
	C = false
	ch = ch - 0xC6 - C
	SCZO = cond(ch)
	dh = ~dh
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	dl = dl - 0xE2 - C
	SCZO = cond(dl)
	dl = dl + 0x01
	SZO = cond(dl)
	goto l004028D8_thunk_fn0040241F
	// succ:  l004028D8_thunk_fn0040241F
l004028C4:
l004028D8_thunk_fn0040241F:
	call fn0040241F (retsize: 0;)
	return
	// succ:  fn004028C4_exit
fn004028C4_exit:


// fn004028E2
// Return size: 6
void fn004028E2()
fn004028E2_entry:
	// succ:  l004028E2
l004028E2:
	Mem0[esp:word32] = eax
	// succ:  l004028EB
l004028EB:
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = bl + dl
	SCZO = cond(bl)
	ebx = eax
	bh = bh | ch
	SZO = cond(bh)
	C = false
	edi = edi + edx
	SCZO = cond(edi)
	bl = bl - 0x01
	SZO = cond(bl)
	branch Test(SG,S) l004028F6_thunk_fn004024EE
	goto l004028FC
	// succ:  l004028FC l004028F6_thunk_fn004024EE
l004028F6_thunk_fn004024EE:
	call fn004024EE (retsize: 6;)
	return
	// succ:  fn004028E2_exit
l004028FC:
fn004028E2_exit:


// fn00402936
// Return size: 0
void fn00402936()
fn00402936_entry:
	// succ:  l00402936
l00402936:
	esp = fp
	eax = eax + 0x00000008
	SCZO = cond(eax)
	edi = edi ^ esi
	SZO = cond(edi)
	C = false
	esi = esi + eax
	SCZO = cond(esi)
	bh = ch
	bh = bh - 0x01
	SZO = cond(bh)
	bl = bl + 0x0F
	SCZO = cond(bl)
	bl = bl - dl
	SCZO = cond(bl)
	goto l00402946_thunk_fn004026AD
	// succ:  l00402946_thunk_fn004026AD
l00402936:
l00402946_thunk_fn004026AD:
	call fn004026AD (retsize: 0;)
	return
	// succ:  fn00402936_exit
fn00402936_exit:


// fn00402996
// Return size: 0
void fn00402996()
fn00402996_entry:
	goto l00402996
	// succ:  l00402996
l004023B7:
	bl = bl + 0xBE
	SCZO = cond(bl)
	edi = edi | esi
	SZO = cond(edi)
	C = false
	bh = bh ^ dl
	SZO = cond(bh)
	C = false
	dh = dh + 0x01
	SZO = cond(dh)
	edx = (word32) al
	bh = bh - dl
	SCZO = cond(bh)
	// succ:  l004023C5_thunk_fn00402C23
l004023C5_thunk_fn00402C23:
	call fn00402C23 (retsize: 0;)
	return
	// succ:  fn00402996_exit
l00402996:
	esp = fp
	ebx = ebx ^ ecx
	SZO = cond(ebx)
	C = false
	bl = bl + 0x23 + C
	SCZO = cond(bl)
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	dh = dh + ch
	SCZO = cond(dh)
	dh = dh + 0x01
	SZO = cond(dh)
	esi = esi | edi
	SZO = cond(esi)
	C = false
	edi = edi + 0x00000001
	SZO = cond(edi)
	bh = bh | cl
	SZO = cond(bh)
	C = false
	bl = bh
	goto l004023B7
	// succ:  l004023B7
l00402996:
fn00402996_exit:


// fn004029B3
// Return size: 0
void fn004029B3()
fn004029B3_entry:
	// succ:  l004029B3
l004029B3:
	esp = fp
	esp = esp + 0x00000004
	al = al + 0x17 + C
	SCZO = cond(al)
	ch = -ch
	SCZO = cond(ch)
	C = ch == 0x00
	al = al - 0x01
	SZO = cond(al)
	bl = bl - bh
	SCZO = cond(bl)
	al = al ^ dl
	SZO = cond(al)
	C = false
	ch = ch | dh
	SZO = cond(ch)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00003000
	edx = edx - 0x00000001
	SZO = cond(edx)
	// succ:  l004029CA_thunk_fn004021F9
l004029CA_thunk_fn004021F9:
	call fn004021F9 (retsize: 0;)
	return
	// succ:  fn004029B3_exit
fn004029B3_exit:


// fn004029D4
// Return size: 0
void fn004029D4()
fn004029D4_entry:
	// succ:  l004029D4
l004029D4:
	bl = bl + 0x65 + C
	SCZO = cond(bl)
	bh = ah
	bl = bl - cl
	SCZO = cond(bl)
	bh = bh + 0x01
	SZO = cond(bh)
	eax = eax + 0x00000001
	SZO = cond(eax)
	bh = bh + dh
	SCZO = cond(bh)
	branch Test(LE,SZO) TMP!
fn004029D4_exit:


// fn00402A77
// Return size: 0
void fn00402A77()
fn00402A77_entry:
	// succ:  l00402A77
l00402A77:
	esp = fp
	dh = cl
	al = al + 0xB2
	SCZO = cond(al)
	eax = eax + ecx
	SCZO = cond(eax)
	dl = dl ^ cl
	SZO = cond(dl)
	C = false
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	esi = esi + 0x00000001
	SZO = cond(esi)
	ah = 0x09
	branch Test(PE,P) l00402A85_thunk_fn0040205B
	goto l00402A85_thunk_fn00402A8B
	// succ:  l00402A85_thunk_fn00402A8B l00402A85_thunk_fn0040205B
l00402A77:
	al = al + 0xB2
	SCZO = cond(al)
	eax = eax + ecx
	SCZO = cond(eax)
	dl = dl ^ cl
	SZO = cond(dl)
	C = false
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	esi = esi + 0x00000001
	SZO = cond(esi)
	ah = 0x09
	branch Test(PE,P) l00402A85_thunk_fn0040205B
	// succ:  l00402A83_thunk_fn00402A8B l00402A85_thunk_fn0040205B
l00402A83_thunk_fn00402A8B:
	call fn00402A8B (retsize: 0;)
	return
	// succ:  fn00402A77_exit
l00402A85_thunk_fn0040205B:
	call fn0040205B (retsize: 0;)
	return
	// succ:  fn00402A77_exit
l00402A85_thunk_fn0040205B:
	call fn0040205B (retsize: 0;)
	return
	// succ:  fn00402A77_exit
l00402A85_thunk_fn00402A8B:
	call fn00402A8B (retsize: 0;)
	return
	// succ:  fn00402A77_exit l00402A85_thunk_fn00402A8B
l00402A85_thunk_fn00402A8B:
	call fn00402A8B (retsize: 0;)
	return
	// succ:  fn00402A77_exit
fn00402A77_exit:


// fn00402A8B
// Return size: 0
void fn00402A8B()
fn00402A8B_entry:
	// succ:  l00402A8B
l00402A8B:
	ebx = ebx
fn00402A8B_exit:


// fn00402A9C
// Return size: 0
void fn00402A9C()
fn00402A9C_entry:
	// succ:  l00402A9C
l00402A9C:
	esp = fp
	edi = edi - 0x00000001
	SZO = cond(edi)
	dl = dl + 0x01
	SZO = cond(dl)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	edi = edi + ecx
	SCZO = cond(edi)
	ch = 0x56
	dh = dh + al
	SCZO = cond(dh)
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	edx = edx ^ ecx
	SZO = cond(edx)
	C = false
	eax = eax + 0x00000001
	SZO = cond(eax)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	// succ:  l00402AAC_thunk_fn00402690
l00402AAC_thunk_fn00402690:
	call fn00402690 (retsize: 0;)
	return
	// succ:  fn00402A9C_exit
fn00402A9C_exit:


// fn00402AF2
// Return size: 0
void fn00402AF2()
fn00402AF2_entry:
	// succ:  l00402AF2
l00402AF2:
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = ecx
	ecx = v3
	bx = bx
	eax = eax
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	dh = cl
	bl = bl - 0x01
	SZO = cond(bl)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	branch Test(EQ,Z) l00402B01_thunk_fn00402996
	goto l00402B07
	// succ:  l00402B07 l00402B01_thunk_fn00402996
l00402B01_thunk_fn00402996:
	call fn00402996 (retsize: 0;)
	return
	// succ:  fn00402AF2_exit
l00402B07:
	// succ:  l00402B0D
l00402B0D:
	si = si
	branch Test(NE,Z) l00402B10_thunk_fn00402996
	goto l00402B16
	// succ:  l00402B16 l00402B10_thunk_fn00402996
l00402B10_thunk_fn00402996:
	call fn00402996 (retsize: 0;)
	return
	// succ:  fn00402AF2_exit
l00402B16:
	v16 = Mem0[ebp + 0x6D570968:byte] + dh
	Mem0[ebp + 0x6D570968:byte] = v16
	SCZO = cond(v16)
	// succ:  lDBF6_F90A
lDBF6_F90A:
fn00402AF2_exit:


// fn00402B1D
// Return size: 6
void fn00402B1D()
fn00402B1D_entry:
	// succ:  l00402B1D
l00402B1D:
	esp = fp
	bh = bh | cl
	SZO = cond(bh)
	C = false
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bh = 0x82
	bh = bh + 0x01
	SZO = cond(bh)
	edi = edi - 0x00000001
	SZO = cond(edi)
	bh = bh ^ ch
	SZO = cond(bh)
	C = false
	bh = bh + 0x2E
	SCZO = cond(bh)
	esi = esi - 0x00000001
	SZO = cond(esi)
	bh = dh
	bh = bh + bl
	SCZO = cond(bh)
	call fn00402D8F (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	SCZO = cond(eax - 0x1B5AC0AB)
	D = true
	v16 = Mem0[edx:byte] + ch + C
	Mem0[edx:byte] = v16
	SCZO = cond(v16)
	SCZO = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00402B1D_exit
l00402B1D:
fn00402B1D_exit:


// fn00402B5A
// Return size: 6
void fn00402B5A()
fn00402B5A_entry:
	// succ:  l00402B5A
l00402B5A:
	esp = fp
	esp = esp + 0x00000004
	bl = bl + bh
	SCZO = cond(bl)
	bl = ~bl
	edi = edi + ebx
	SCZO = cond(edi)
	bh = bh | ah
	SZO = cond(bh)
	C = false
	bh = ah
	bh = bh - cl
	SCZO = cond(bh)
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[edx + 0x00000008:word32]
	// succ:  l00402B6D_thunk_fn00402B1D
l00402B6D_thunk_fn00402B1D:
	call fn00402B1D (retsize: 6;)
	return
	// succ:  fn00402B5A_exit
fn00402B5A_exit:


// fn00402B74
// Return size: 0
void fn00402B74()
fn00402B74_entry:
	// succ:  l00402B74
l00402B74:
	esp = fp
	esp = esp + 0x00000004
	al = al | bh
	SZO = cond(al)
	C = false
	al = al ^ ah
	SZO = cond(al)
	C = false
	ebx = edi
	bl = 0x43
	ebx = ebx + ecx
	SCZO = cond(ebx)
	ah = ah + 0xD1
	SCZO = cond(ah)
	eax = eax ^ edx
	SZO = cond(eax)
	C = false
	bl = bl - dl
	SCZO = cond(bl)
	// succ:  l00402B89_thunk_fn004025AA
l00402B89_thunk_fn004025AA:
	call fn004025AA (retsize: 0;)
	return
	// succ:  fn00402B74_exit
fn00402B74_exit:


// fn00402BB8
// Return size: 0
void fn00402BB8()
fn00402BB8_entry:
	// succ:  l00402BB8
l00402BB8:
	Mem0[esp - 0x00000020:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edi
	eax = eax | esi
	SZO = cond(eax)
	C = false
	eax = eax ^ esi
	SZO = cond(eax)
	C = false
	ah = ah + dh
	SCZO = cond(ah)
	al = 0x6F
	eax = eax | ecx
	SZO = cond(eax)
	C = false
	call fn00402700 (retsize: 4;)
	// succ:  l3927_1074
l3927_1074:
fn00402BB8_exit:


// fn00402C01
// Return size: 0
void fn00402C01()
fn00402C01_entry:
	// succ:  l00402C01
l00402C01:
	bh = bh + ch
	SCZO = cond(bh)
	al = al + 0x6C
	SCZO = cond(al)
	dh = dh + 0x07
	SCZO = cond(dh)
	ah = ah + cl
	SCZO = cond(ah)
	ecx = ecx << 0x0000000F
	SCZO = cond(ecx)
	bl = bl + 0x6F + C
	SCZO = cond(bl)
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	dh = dh ^ ah
	SZO = cond(dh)
	C = false
	ah = ah + 0xD7 + C
	SCZO = cond(ah)
	call fn00402D36 (retsize: 4;)
	ecx = ecx - 0x00000001
	branch Test(EQ,Z) && ecx != 0x00000000 l00402C99
	// succ:  l00402C1F l00402C99
l00402C1F:
	ebx = ebx + Mem0[ecx:word32] + C
	SCZO = cond(ebx)
	bl = bl << 0x01
	SCZO = cond(bl)
	// succ:  l00402C21_thunk_fn00402C23
l00402C21_thunk_fn00402C23:
	call fn00402C23 (retsize: 0;)
	return
	// succ:  fn00402C01_exit
l00402C99:
	esi = esi - esi
	SCZO = cond(esi)
fn00402C01_exit:


// fn00402C23
// Return size: 0
void fn00402C23()
fn00402C23_entry:
	goto l00402C23
	// succ:  l00402C23
l00402337:
	bl = bl - 0x01
	SZO = cond(bl)
	edi = edx
	bl = bl - ch
	SCZO = cond(bl)
	bh = bh + bl
	SCZO = cond(bh)
	bl = bl - 0x26 - C
	SCZO = cond(bl)
	ebx = ebx - esi
	SCZO = cond(ebx)
	bl = bl ^ dh
	SZO = cond(bl)
	C = false
	bl = bl - 0x01
	SZO = cond(bl)
	// succ:  l00402348_thunk_fn004026CD
l00402348_thunk_fn004026CD:
	call fn004026CD (retsize: 0;)
	return
	// succ:  fn00402C23_exit
l00402C23:
	esp = fp
	bl = bl - 0xF7 - C
	SCZO = cond(bl)
	bh = bh - bl
	SCZO = cond(bh)
	bl = bl - 0x01
	SZO = cond(bl)
	bl = al
	bl = bl + al
	SCZO = cond(bl)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	goto l00402337
	// succ:  l00402337
l00402C23:
fn00402C23_exit:


// fn00402C3B
// Return size: 0
void fn00402C3B()
fn00402C3B_entry:
	goto l00402C3B
	// succ:  l00402C3B
l00402275:
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	ch = ch + ah
	SCZO = cond(ch)
	ah = ah - 0x19 - C
	SCZO = cond(ah)
	al = al + 0x01
	SZO = cond(al)
	cl = cl | ah
	SZO = cond(cl)
	C = false
	call fn00402285 (retsize: 4;)
	// succ:  l00402280_thunk_fn00402285
l00402280_thunk_fn00402285:
	call fn00402285 (retsize: 0;)
	return
	// succ:  fn00402C3B_exit
l00402C3B:
	dh = dh + 0x21 + C
	SCZO = cond(dh)
	eax = eax - edx
	SCZO = cond(eax)
	dl = ch
	ch = ~ch
	dl = bh
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	branch Test(OV,O) l00402275
	// succ:  l00402C4D l00402275
l00402C4D:
	ah = ah
	v15 = dx
	dx = dx
	dx = v15
	branch Test(NO,O) l00402275
	// succ:  l00402C58 l00402275
l00402C58:
	ebp = Mem0[0x803915A2:word32] *s 0x57B01CEF
	SCZO = cond(ebp)
	// succ:  l00402C58_thunk_fn00402C5D
l00402C58_thunk_fn00402C5D:
	call fn00402C5D (retsize: 0;)
	return
	// succ:  fn00402C3B_exit
fn00402C3B_exit:


// fn00402C5D
// Return size: 0
void fn00402C5D()
fn00402C5D_entry:
	// succ:  l00402C5D
l00402C5D:
	esp = fp
	bh = bh - 0x1C
	SCZO = cond(bh)
	al = 0x57
	eax = eax + 0x00000001
	SZO = cond(eax)
	al = al + 0x18 + C
	SCZO = cond(al)
	edx = edx | esi
	SZO = cond(edx)
	C = false
	al = al - 0x01
	SZO = cond(al)
	dh = dh + cl
	SCZO = cond(dh)
	al = al - 0x8F - C
	SCZO = cond(al)
	goto l00402C6F_thunk_fn004022C0
	// succ:  l00402C6F_thunk_fn004022C0
l00402C5D:
	eax = eax + 0x00000001
	SZO = cond(eax)
	al = al + 0x18 + C
	SCZO = cond(al)
	edx = edx | esi
	SZO = cond(edx)
	C = false
	al = al - 0x01
	SZO = cond(al)
	dh = dh + cl
	SCZO = cond(dh)
	al = al - 0x8F - C
	SCZO = cond(al)
	// succ:  l00402C67_thunk_fn004022C0
l00402C67_thunk_fn004022C0:
	call fn004022C0 (retsize: 0;)
	return
	// succ:  fn00402C5D_exit
l00402C6F_thunk_fn004022C0:
	call fn004022C0 (retsize: 0;)
	return
	// succ:  fn00402C5D_exit
fn00402C5D_exit:


// fn00402C7C
// Return size: 0
void fn00402C7C()
fn00402C7C_entry:
	// succ:  l00402C7C
l00402C7C:
	esp = fp
	Mem0[esp - 0x00000034:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	ebx = ebx + eax
	SCZO = cond(ebx)
	bl = ~bl
	eax = eax + ecx
	SCZO = cond(eax)
	esi = esi + 0x00000001
	SZO = cond(esi)
	bl = bl - dh
	SCZO = cond(bl)
	// succ:  l00402C8D_thunk_fn0040271E
l00402C8D_thunk_fn0040271E:
	call fn0040271E (retsize: 0;)
	return
	// succ:  fn00402C7C_exit
fn00402C7C_exit:


// fn00402CE0
// Return size: 0
void fn00402CE0()
fn00402CE0_entry:
	// succ:  l00402CE0
l00402CE0:
	esp = fp
	esp = esp + 0x00000004
	edx = edx + 0x00000001
	SZO = cond(edx)
	ah = ah + 0xBC
	SCZO = cond(ah)
	ah = ah + 0x01
	SZO = cond(ah)
	eax = eax - edi
	SCZO = cond(eax)
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	// succ:  l00402D76
l00402D76:
	al = 0x8F
	eax = ebx
	eax = eax + 0x00000001
	SZO = cond(eax)
	al = al + dh
	SCZO = cond(al)
	edx = edx + 0x00000001
	SZO = cond(edx)
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	eax = eax ^ ecx
	SZO = cond(eax)
	C = false
	ah = ah | dl
	SZO = cond(ah)
	C = false
fn00402CE0_exit:


// fn00402CFB
// Return size: 0
void fn00402CFB()
fn00402CFB_entry:
	// succ:  l00402CFB
l00402CFB:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = edx
	edx = v3
	bl = bl
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh + al
	SCZO = cond(bh)
	edi = edi - esi
	SCZO = cond(edi)
	eax = eax ^ 0xFFFFFEC8
	SZO = cond(eax)
	C = false
	bh = bh - dl
	SCZO = cond(bh)
	esi = esi - 0x00000001
	SZO = cond(esi)
	call fn00402DAE (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	bl = 0xCF
fn00402CFB_exit:


// fn00402D36
// Return size: 0
void fn00402D36()
fn00402D36_entry:
	// succ:  l00402D36
l00402D36:
	esp = fp
	Mem0[esp - 0x00000024:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	al = al - 0x01
	SZO = cond(al)
	dh = dh | cl
	SZO = cond(dh)
	C = false
	ah = ah + 0x90
	SCZO = cond(ah)
	bl = dl
	bl = bl + 0x01
	SZO = cond(bl)
	bl = bh
	bl = bl - 0x01
	SZO = cond(bl)
	bh = bh + ah
	SCZO = cond(bh)
	bl = al
fn00402D36_exit:


// fn00402D57
// Return size: 0
void fn00402D57()
fn00402D57_entry:
	// succ:  l00402D57
l00402D57:
	esp = fp
	ah = ah - dl
	SCZO = cond(ah)
	edx = ebx
	ah = ah - 0x01
	SZO = cond(ah)
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	ah = -ah
	SCZO = cond(ah)
	C = ah == 0x00
	al = al - 0xC9 - C
	SCZO = cond(al)
	edi = edi - 0x00000001
	SZO = cond(edi)
	dh = ~dh
	edx = edx + ecx
	SCZO = cond(edx)
	dh = dh - 0x1C - C
	SCZO = cond(dh)
	goto l00402D6C_thunk_fn00402453
	// succ:  l00402D6C_thunk_fn00402453
l00402D57:
l00402D6C_thunk_fn00402453:
	call fn00402453 (retsize: 0;)
	return
	// succ:  fn00402D57_exit
fn00402D57_exit:


// fn00402D8F
// Return size: 4
void fn00402D8F()
fn00402D8F_entry:
	// succ:  l00402D8F
l00402D8F:
	esp = fp
	Mem0[esp - 0x00000014:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh - 0x33 - C
	SCZO = cond(bh)
	bl = bl + dh
	SCZO = cond(bl)
	bh = bh - 0x01
	SZO = cond(bh)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bh = dh
	bh = bh + ah
	SCZO = cond(bh)
	bh = bh + 0x01
	SZO = cond(bh)
	call fn004025C8 (retsize: 4;)
	__lock()
	esp = esp + ebx + C
	SCZO = cond(esp)
	SZO = cond(edi & ebp)
	C = false
	eax = eax - 0x648D6F98 - C
	SCZO = cond(eax)
	// succ:  l00402DAB_thunk_fn00402DB0
l00402DAB_thunk_fn00402DB0:
	call fn00402DB0 (retsize: 4;)
	return
	// succ:  fn00402D8F_exit
fn00402D8F_exit:


// fn00402DAE
// Return size: 4
void fn00402DAE()
fn00402DAE_entry:
	// succ:  l00402DAE
l00402DAE:
	esp = fp
	esp = esp + 0x00000004
	call fn004022A1 (retsize: 4;)
	// succ:  l00402DAE_thunk_fn00402DB0 l00402DC5_thunk_fn00402DCA
l00402DAE_thunk_fn00402DB0:
	call fn00402DB0 (retsize: 4;)
	return
	// succ:  fn00402DAE_exit
l00402DC5_thunk_fn00402DCA:
	call fn00402DCA (retsize: 4;)
	return
	// succ:  fn00402DAE_exit
fn00402DAE_exit:


// fn00402DB0
// Return size: 4
void fn00402DB0()
fn00402DB0_entry:
	// succ:  l00402DB0
l00402DB0:
	esp = fp
	al = al & 0x04
	SZO = cond(al)
	C = false
	bl = bl + ch
	SCZO = cond(bl)
	bl = 0x41
	bl = bl + 0xC4
	SCZO = cond(bl)
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	bh = bh + 0x71 + C
	SCZO = cond(bh)
	bl = bl - al
	SCZO = cond(bl)
	bl = bl ^ ch
	SZO = cond(bl)
	C = false
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	call fn004022A1 (retsize: 4;)
	goto l00402DC5_thunk_fn00402DCA
	// succ:  l00402DC5_thunk_fn00402DCA
l00402DB0:
	bl = bl + ch
	SCZO = cond(bl)
	bl = 0x41
	bl = bl + 0xC4
	SCZO = cond(bl)
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	bh = bh + 0x71 + C
	SCZO = cond(bh)
	bl = bl - al
	SCZO = cond(bl)
	bl = bl ^ ch
	SZO = cond(bl)
	C = false
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
l00402DC5_thunk_fn00402DCA:
	call fn00402DCA (retsize: 4;)
	return
	// succ:  fn00402DB0_exit
fn00402DB0_exit:


// fn00402DCA
// Return size: 4
void fn00402DCA()
fn00402DCA_entry:
	// succ:  l00402DCA
l00402DCA:
	esp = fp
	eax = eax + 0x6795012D + C
	SCZO = cond(eax)
	v8 = Mem0[edx:word32] ^ ecx
	Mem0[edx:word32] = v8
	SZO = cond(Mem0[edx:word32])
	C = false
	goto l00402DCF_thunk_fn00402DD1
	// succ:  l00402DCF_thunk_fn00402DD1
l00402DCA:
	eax = eax + 0x6795012D + C
	SCZO = cond(eax)
	v10 = Mem0[edx:word32] ^ ecx
	Mem0[edx:word32] = v10
	SZO = cond(Mem0[edx:word32])
	C = false
	goto l00402DCF_thunk_fn00402DD1
	// succ:  l00402DCF_thunk_fn00402DD1
l00402DCF_thunk_fn00402DD1:
	call fn00402DD1 (retsize: 4;)
	return
	// succ:  fn00402DCA_exit
l00402DCF_thunk_fn00402DD1:
	call fn00402DD1 (retsize: 4;)
	return
	// succ:  fn00402DCA_exit
fn00402DCA_exit:


// fn00402DD0
// Return size: 4
void fn00402DD0()
fn00402DD0_entry:
	// succ:  l00402DD0
l00402DD0:
	esp = fp
	bl = bl | dl
	SZO = cond(bl)
	C = false
	goto l00402DD0_thunk_fn00402DD1
	// succ:  l00402DD0_thunk_fn00402DD1
l00402DD0:
l00402DD0_thunk_fn00402DD1:
	call fn00402DD1 (retsize: 4;)
	return
	// succ:  fn00402DD0_exit
fn00402DD0_exit:


// fn00402DD1
// Return size: 4
void fn00402DD1()
fn00402DD1_entry:
	// succ:  l00402DD1
l00402DD1:
	esp = fp
	rArg0 = rArg0 * (real64) Mem0[edx + 0xB6D303C6:word32]
	bl = bl + Mem0[eax + 0x00000003:byte]
	SCZO = cond(bl)
	esi = esi >> cl
	SCZO = cond(esi)
	return
	// succ:  fn00402DD1_exit
l00402DD1:
	al = dh
	edx = edx + ebx
	SCZO = cond(edx)
	dh = 0x02
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx + ebx
	SCZO = cond(edx)
	dl = dl + 0x01
	SZO = cond(dl)
	bh = bh - cl
	SCZO = cond(bh)
fn00402DD1_exit:


// fn00402E0A
// Return size: 0
void fn00402E0A()
fn00402E0A_entry:
	// succ:  l00402E0A
l00402E0A:
	esp = fp
	esp = esp + 0x00000004
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	ah = ah + 0x47 + C
	SCZO = cond(ah)
	eax = eax - ebx
	SCZO = cond(eax)
	al = cl
	dh = dh + 0xE8 + C
	SCZO = cond(dh)
	// succ:  l00402E18
l00402E18:
	dl = dl + 0xBE
	SCZO = cond(dl)
	call fn00402E43 (retsize: 4;)
	branch Test(UGE,C) l00402E5D
	// succ:  l00402E24 l00402E5D
l00402E24:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ds
	cl = cl ^ Mem0[ebx - 0x0000006B:byte]
	SZO = cond(cl)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = esp
	al = Mem0[esi:byte]
	esi = esi + 0x00000001
	// succ:  l00402E29_thunk_fn00402E2A
l00402E29_thunk_fn00402E2A:
	call fn00402E2A (retsize: 0;)
	return
	// succ:  fn00402E0A_exit
l00402E5D:
	branch Test(ULE,CZ) l00402E5D_thunk_fn00402E89
	goto l00402E5F
	// succ:  l00402E5F l00402E5D_thunk_fn00402E89
l00402E5D_thunk_fn00402E89:
	call fn00402E89 (retsize: 0;)
	return
	// succ:  fn00402E0A_exit
l00402E5F:
	branch Test(UGE,C) l00402E18
	// succ:  l00402E5F_thunk_fn00402E61 l00402E18
l00402E5F_thunk_fn00402E61:
	call fn00402E61 (retsize: 0;)
	return
	// succ:  fn00402E0A_exit l00402E5F_thunk_fn00402E61
l00402E5F_thunk_fn00402E61:
	call fn00402E61 (retsize: 0;)
	return
	// succ:  fn00402E0A_exit
fn00402E0A_exit:


// fn00402E2A
// Return size: 0
void fn00402E2A()
fn00402E2A_entry:
	// succ:  l00402E2A
l00402E2A:
	esp = fp
	dh = dh ^ al
	SZO = cond(dh)
	C = false
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ah = 0x70
	ah = 0xB1
	al = al - 0x01
	SZO = cond(al)
	edx = edx - ebx
	SCZO = cond(edx)
	dl = ch
	goto l00402E37_thunk_fn00402D57
	// succ:  l00402E37_thunk_fn00402D57
l00402E2A:
	dh = dh ^ al
	SZO = cond(dh)
	C = false
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ah = 0x70
	ah = 0xB1
	al = al - 0x01
	SZO = cond(al)
	edx = edx - ebx
	SCZO = cond(edx)
	dl = ch
	goto l00402E37_thunk_fn00402D57
	// succ:  l00402E37_thunk_fn00402D57
l00402E37_thunk_fn00402D57:
	call fn00402D57 (retsize: 0;)
	return
	// succ:  fn00402E2A_exit
l00402E37_thunk_fn00402D57:
	call fn00402D57 (retsize: 0;)
	return
	// succ:  fn00402E2A_exit
fn00402E2A_exit:


// fn00402E43
// Return size: 0
void fn00402E43()
fn00402E43_entry:
	// succ:  l00402E43
l00402E43:
	esp = fp
	Mem0[esp - 0x00000018:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	al = al - bl
	SCZO = cond(al)
	dh = dh - 0x5A - C
	SCZO = cond(dh)
	eax = esi
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	bh = bh - 0x01
	SZO = cond(bh)
	dl = 0x7C
	dl = dl - 0xE5 - C
	SCZO = cond(dl)
	// succ:  l00402E60
l00402E60:
	bh = 0xB5
	// succ:  l00402E60_thunk_fn00402E61
l00402E60_thunk_fn00402E61:
	call fn00402E61 (retsize: 0;)
	return
	// succ:  fn00402E43_exit
fn00402E43_exit:


// fn00402E61
// Return size: 0
void fn00402E61()
fn00402E61_entry:
	goto l00402E61
	// succ:  l00402E61
l004022F7:
	dh = dh + 0x01
	SZO = cond(dh)
	dl = dl - 0x01
	SZO = cond(dl)
	dh = dh + ch
	SCZO = cond(dh)
	edx = edx - 0x00000001
	SZO = cond(edx)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	eax = eax ^ edx
	SZO = cond(eax)
	C = false
	al = al - ch
	SCZO = cond(al)
	// succ:  l00402304_thunk_fn00402534
l00402304_thunk_fn00402534:
	call fn00402534 (retsize: 0;)
	return
	// succ:  fn00402E61_exit
l004029F3:
	eax = eax | edi
	SZO = cond(eax)
	C = false
	al = al - 0x0A - C
	SCZO = cond(al)
	edx = eax
	ah = ah - 0x01
	SZO = cond(ah)
	eax = esi
	ah = ah + 0x01
	SZO = cond(ah)
	dh = 0xAD
	goto l004022F7
	// succ:  l004022F7
l00402E61:
	esp = fp
	ch = 0x80
l00402E61:
	dh = dh + 0x6B + C
	SCZO = cond(dh)
	bl = bl - 0x01
	SZO = cond(bl)
	ah = ah - al
	SCZO = cond(ah)
	bh = Mem0[esi:byte]
	dl = dl + 0x01
	SZO = cond(dl)
	al = al + bl
	SCZO = cond(al)
	goto l004029F3
	// succ:  l004029F3
fn00402E61_exit:


// fn00402E7B
// Return size: 0
void fn00402E7B()
fn00402E7B_entry:
	// succ:  l00402E7B
l00402E7B:
	dh = dh - bl
	SCZO = cond(dh)
	dl = dl | bl
	SZO = cond(dl)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	ebx = edx
	ah = ah ^ dh
	SZO = cond(ah)
	C = false
	edi = edi + edx
	SCZO = cond(edi)
fn00402E7B_exit:


// fn00402E89
// Return size: 0
void fn00402E89()
fn00402E89_entry:
	// succ:  l00402E89
l00402E89:
	esp = fp
	__cli()
	goto l00402E8A_thunk_fn00402894
	// succ:  l00402E8A_thunk_fn00402894
l00402E89:
l00402E8A_thunk_fn00402894:
	call fn00402894 (retsize: 0;)
	return
	// succ:  fn00402E89_exit
fn00402E89_exit:


// fn00402EAD
// Return size: 0
void fn00402EAD()
fn00402EAD_entry:
	// succ:  l00402EAD
l00402EAD:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = eax
	eax = v3
	di = edi
	cl = cl
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh - 0xCB - C
	SCZO = cond(bh)
	ebx = ebx + edi
	SCZO = cond(ebx)
	bh = bh ^ dl
	SZO = cond(bh)
	C = false
	edi = edi + ecx
	SCZO = cond(edi)
	bh = bh + 0x0A + C
	SCZO = cond(bh)
	bh = dl
	// succ:  l00402EC4_thunk_fn00402641
l00402EC4_thunk_fn00402641:
	call fn00402641 (retsize: 0;)
	return
	// succ:  fn00402EAD_exit
fn00402EAD_exit:


