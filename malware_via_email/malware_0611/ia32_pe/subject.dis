// fn00401008
// Return size: 0
void fn00401008()
fn00401008_entry:
	// succ:  l00401008
l00401008:
	esp = fp
	esp = esp + 0x00000004
	dl = dl + dh
	SCZO = cond(dl)
	cl = cl - bh
	SCZO = cond(cl)
	esi = esi - edi
	SCZO = cond(esi)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	dh = dh | cl
	SZO = cond(dh)
	C = false
	cl = cl - ch
	SCZO = cond(cl)
	bh = 0xC5
	edi = edi + edx
	SCZO = cond(edi)
	call fn00401115 (retsize: 4;)
	Mem0[0x448FF60C:word32] = 0xF22BF424
	// succ:  l00401021_thunk_fn0040102B
l00401021_thunk_fn0040102B:
	call fn0040102B (retsize: 0;)
	return
	// succ:  fn00401008_exit
fn00401008_exit:


// fn00401025
// Return size: 0
void fn00401025()
fn00401025_entry:
	// succ:  l00401025
l00401025:
	esp = fp
	Mem0[esp - 0x0000000C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi - edx
	SCZO = cond(esi)
	// succ:  l00401029_thunk_fn0040102B
l00401029_thunk_fn0040102B:
	call fn0040102B (retsize: 0;)
	return
	// succ:  fn00401025_exit
fn00401025_exit:


// fn0040102B
// Return size: 0
void fn0040102B()
fn0040102B_entry:
	// succ:  l0040102B
l0040102B:
	esp = fp
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	esi = ebx
	esi = esi + 0x00000001
	SZO = cond(esi)
	ecx = ecx + ebx
	SCZO = cond(ecx)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ebx = ebx ^ ecx
	SZO = cond(ebx)
	C = false
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	ecx = ecx ^ edx
	SZO = cond(ecx)
	C = false
	call fn00401187 (retsize: 4;)
	v11 = Mem0[ebx + 0x4CEE9794:word32] + edi
	Mem0[ebx + 0x4CEE9794:word32] = v11
	SCZO = cond(v11)
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	goto l00401044_thunk_fn00401045
	// succ:  l00401044_thunk_fn00401045
l0040102B:
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	esi = ebx
	esi = esi + 0x00000001
	SZO = cond(esi)
	ecx = ecx + ebx
	SCZO = cond(ecx)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ebx = ebx ^ ecx
	SZO = cond(ebx)
	C = false
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	ecx = ecx ^ edx
	SZO = cond(ecx)
	C = false
	call fn00401187 (retsize: 4;)
	v13 = Mem0[ebx + 0x4CEE9794:word32] + edi
	Mem0[ebx + 0x4CEE9794:word32] = v13
	SCZO = cond(v13)
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	goto l00401044_thunk_fn00401045
	// succ:  l00401044_thunk_fn00401045
l00401044_thunk_fn00401045:
	call fn00401045 (retsize: 0;)
	return
	// succ:  fn0040102B_exit
l00401044_thunk_fn00401045:
	call fn00401045 (retsize: 0;)
	return
	// succ:  fn0040102B_exit
fn0040102B_exit:


// fn00401045
// Return size: 0
void fn00401045()
fn00401045_entry:
	// succ:  l00401045
l00401045:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = esi
	esi = v3
	edx = edx
	v6 = dh
	dh = dh
	dh = v6
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ch = ah
	ch = ch ^ dh
	SZO = cond(ch)
	C = false
	edi = edi - eax
	SCZO = cond(edi)
	bh = 0x79
	bh = bh | cl
	SZO = cond(bh)
	C = false
	call fn0040123C (retsize: 4;)
	esp = esp + 0xFFFFFFFA
	dl = dl + 0x93
	SCZO = cond(dl)
	eax = eax - 0x8A241489
	SCZO = cond(eax)
	// succ:  l0040105F_thunk_fn00401064
l0040105F_thunk_fn00401064:
	call fn00401064 (retsize: 0;)
	return
	// succ:  fn00401045_exit
fn00401045_exit:


// fn00401060
// Return size: 0
void fn00401060()
fn00401060_entry:
	// succ:  l00401060
l00401060:
	esp = fp
	Mem0[esp:word32] = edx
	ah = ah
	call fn00401008 (retsize: 4;)
	// succ:  l00401063_thunk_fn00401064 l00401072_thunk_fn00401077
l00401063_thunk_fn00401064:
	call fn00401064 (retsize: 0;)
	return
	// succ:  fn00401060_exit
l00401072_thunk_fn00401077:
	call fn00401077 (retsize: 0;)
	return
	// succ:  fn00401060_exit
fn00401060_exit:


// fn00401064
// Return size: 0
void fn00401064()
fn00401064_entry:
	// succ:  l00401064
l00401064:
	esp = fp
	al = __inb(0x5A)
	edx = edx | edi
	SZO = cond(edx)
	C = false
	goto l00401066_thunk_fn00401068
	// succ:  l00401066_thunk_fn00401068
l00401064:
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx | edi
	SZO = cond(edx)
	C = false
	// succ:  l00401066_thunk_fn00401067
l00401066_thunk_fn00401067:
	call fn00401067 (retsize: 0;)
	return
	// succ:  fn00401064_exit
l00401066_thunk_fn00401068:
	call fn00401068 (retsize: 0;)
	return
	// succ:  fn00401064_exit
fn00401064_exit:


// fn00401067
// Return size: 0
void fn00401067()
fn00401067_entry:
	// succ:  l00401067
l00401067:
	esp = fp
	al = Mem0[ebx + (uint32) al:byte]
	goto l00401067_thunk_fn00401068
	// succ:  l00401067_thunk_fn00401068
l00401067:
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ch = ch ^ dl
	SZO = cond(ch)
	C = false
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	dh = dh ^ ch
	SZO = cond(dh)
	C = false
	bh = bh + bl
	SCZO = cond(bh)
l00401067_thunk_fn00401068:
	call fn00401068 (retsize: 0;)
	return
	// succ:  fn00401067_exit
fn00401067_exit:


// fn00401068
// Return size: 0
void fn00401068()
fn00401068_entry:
	// succ:  l00401068
l00401068:
	esp = fp
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ch = ch ^ dl
	SZO = cond(ch)
	C = false
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	dh = dh ^ ch
	SZO = cond(dh)
	C = false
	bh = bh + bl
	SCZO = cond(bh)
	call fn00401008 (retsize: 4;)
	goto l00401072_thunk_fn00401077
	// succ:  l00401072_thunk_fn00401077
l00401068:
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ch = ch ^ dl
	SZO = cond(ch)
	C = false
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	dh = dh ^ ch
	SZO = cond(dh)
	C = false
	bh = bh + bl
	SCZO = cond(bh)
	call fn00401008 (retsize: 4;)
	edx = edx + 0x00000001
	SZO = cond(edx)
	v17 = Mem0[eax - 0x00000051:byte] + 0x8D + C
	Mem0[eax - 0x00000051:byte] = v17
	SCZO = cond(v17)
l00401072_thunk_fn00401077:
	call fn00401077 (retsize: 0;)
	return
	// succ:  fn00401068_exit
fn00401068_exit:


// fn00401077
// Return size: 0
void fn00401077()
fn00401077_entry:
	// succ:  l00401077
l00401077:
	esp = fp
	edx = edx + 0x00000001
	SZO = cond(edx)
	v7 = Mem0[eax - 0x00000051:byte] + 0x8D + C
	Mem0[eax - 0x00000051:byte] = v7
	SCZO = cond(v7)
	goto l00401078_thunk_fn0040107C
	// succ:  l00401078_thunk_fn0040107C
l00401077:
	edx = edx + 0x00000001
	SZO = cond(edx)
	v9 = Mem0[eax - 0x00000051:byte] + 0x8D + C
	Mem0[eax - 0x00000051:byte] = v9
	SCZO = cond(v9)
	goto l00401078_thunk_fn0040107C
	// succ:  l00401078_thunk_fn0040107C
l00401078_thunk_fn0040107C:
	call fn0040107C (retsize: 0;)
	return
	// succ:  fn00401077_exit
l00401078_thunk_fn0040107C:
	call fn0040107C (retsize: 0;)
	return
	// succ:  fn00401077_exit
fn00401077_exit:


// fn0040107B
// Return size: 0
void fn0040107B()
fn0040107B_entry:
	// succ:  l0040107B
l0040107B:
	esp = fp
	esp = esp + 0x00000004
	call fn004011A1 (retsize: 4;)
	// succ:  l0040107C l0040108F_thunk_fn00401094
l0040108F_thunk_fn00401094:
	call fn00401094 (retsize: 0;)
	return
	// succ:  fn0040107B_exit
fn0040107B_exit:


// fn0040107C
// Return size: 0
void fn0040107C()
fn0040107C_entry:
	// succ:  l0040107C
l0040107C:
	al = al & 0x04
	SZO = cond(al)
	C = false
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	esi = esi | ecx
	SZO = cond(esi)
	C = false
	ecx = ebx
	ebx = ebx | edx
	SZO = cond(ebx)
	C = false
	ecx = ecx - esi
	SCZO = cond(ecx)
	ecx = ecx - edx
	SCZO = cond(ecx)
	esi = esi - 0x00000001
	SZO = cond(esi)
	ecx = ecx + edx
	SCZO = cond(ecx)
	edi = edi + 0x00000001
	SZO = cond(edi)
	call fn004011A1 (retsize: 4;)
fn0040107C_exit:


// fn00401094
// Return size: 0
void fn00401094()
fn00401094_entry:
	// succ:  l00401094
l00401094:
	esp = fp
	goto l00401094_thunk_fn8A1670FC
	// succ:  l00401094_thunk_fn8A1670FC
l00401094:
	call fn8A1670FC (retsize: 0;)
	return
	// succ:  l00401094_thunk_fn8A1670FC fn00401094_exit
l00401094_thunk_fn8A1670FC:
	call fn8A1670FC (retsize: 0;)
	return
	// succ:  fn00401094_exit
l00401094_thunk_fn8A1670FC:
	call fn8A1670FC (retsize: 0;)
	return
	// succ:  fn00401094_exit
fn00401094_exit:


// fn00401098
// Return size: 0
void fn00401098()
fn00401098_entry:
	// succ:  l00401098
l00401098:
	esp = fp
	Mem0[esp:word32] = eax
	v4 = bx
	bx = bx
	bx = v4
	// succ:  l004010A3
l004010A3:
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx + esi
	SCZO = cond(edx)
	edx = esi
	esi = esi | edi
	SZO = cond(esi)
	C = false
	esi = esi + eax
	SCZO = cond(esi)
	ecx = ecx | edi
	SZO = cond(ecx)
	C = false
	ecx = ecx - edx
	SCZO = cond(ecx)
	esi = eax
	call fn0040112E (retsize: 4;)
	v13 = dh
	dh = ah
	ah = v13
	branch Test(UGT,CZ) l004010B9_thunk_fn00401128
	goto l004010BB
	// succ:  l004010BB l004010B9_thunk_fn00401128
l004010B9_thunk_fn00401128:
	call fn00401128 (retsize: 0;)
	return
	// succ:  fn00401098_exit
l004010BB:
	ecx = 0x55D2DD3D
	// succ:  l004010BB_thunk_fn004010C0
l004010BB_thunk_fn004010C0:
	call fn004010C0 (retsize: 0;)
	return
	// succ:  fn00401098_exit
fn00401098_exit:


// fn004010BF
// Return size: 0
void fn004010BF()
fn004010BF_entry:
	// succ:  l004010BF
l004010BF:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	call fn0040107B (retsize: 4;)
	// succ:  l004010BF_thunk_fn004010C0 l004010D2_thunk_fn004010D7
l004010BF_thunk_fn004010C0:
	call fn004010C0 (retsize: 0;)
	return
	// succ:  fn004010BF_exit
l004010D2_thunk_fn004010D7:
	call fn004010D7 (retsize: 0;)
	return
	// succ:  fn004010BF_exit
fn004010BF_exit:


// fn004010C0
// Return size: 0
void fn004010C0()
fn004010C0_entry:
	// succ:  l004010C0
l004010C0:
	esp = fp
	ebp = esp
	edx = edx + ecx
	SCZO = cond(edx)
	ecx = ecx - esi
	SCZO = cond(ecx)
	edx = edx - edi
	SCZO = cond(edx)
	esi = ecx
	ecx = ecx | edi
	SZO = cond(ecx)
	C = false
	edx = edx - ecx
	SCZO = cond(edx)
	ecx = ecx + esi
	SCZO = cond(ecx)
	edx = edx - 0x00000001
	SZO = cond(edx)
	esi = esi + 0x00000001
	SZO = cond(esi)
	call fn0040107B (retsize: 4;)
	goto l004010D2_thunk_fn004010D7
	// succ:  l004010D2_thunk_fn004010D7
l004010C0:
	ebp = esp
	edx = edx + ecx
	SCZO = cond(edx)
	ecx = ecx - esi
	SCZO = cond(ecx)
	edx = edx - edi
	SCZO = cond(edx)
	esi = ecx
	ecx = ecx | edi
	SZO = cond(ecx)
	C = false
	edx = edx - ecx
	SCZO = cond(edx)
	ecx = ecx + esi
	SCZO = cond(ecx)
	edx = edx - 0x00000001
	SZO = cond(edx)
	esi = esi + 0x00000001
	SZO = cond(esi)
l004010D2_thunk_fn004010D7:
	call fn004010D7 (retsize: 0;)
	return
	// succ:  fn004010C0_exit
fn004010C0_exit:


// fn004010D7
// Return size: 0
void fn004010D7()
fn004010D7_entry:
	// succ:  l004010D7
l004010D7:
	esp = fp
	eax = eax & 0x90969AF3
	SZO = cond(eax)
	C = false
	branch Test(NE,Z) l004010DD_thunk_fn00401067
	goto l004010DD_thunk_fn004010E0
	// succ:  l004010DD_thunk_fn004010E0 l004010DD_thunk_fn00401067
l004010D7:
	eax = eax & 0x90969AF3
	SZO = cond(eax)
	C = false
	branch Test(NE,Z) l004010DD_thunk_fn00401067
	goto l004010DD_thunk_fn004010E0
	// succ:  l004010DD_thunk_fn004010E0 l004010DD_thunk_fn00401067
l004010DD_thunk_fn00401067:
	call fn00401067 (retsize: 0;)
	return
	// succ:  fn004010D7_exit
l004010DD_thunk_fn00401067:
	call fn00401067 (retsize: 0;)
	return
	// succ:  fn004010D7_exit
l004010DD_thunk_fn004010E0:
	call fn004010E0 (retsize: 0;)
	return
	// succ:  fn004010D7_exit l004010DD_thunk_fn004010E0
l004010DD_thunk_fn004010E0:
	call fn004010E0 (retsize: 0;)
	return
	// succ:  fn004010D7_exit
l004010DD_thunk_fn004010E0:
	call fn004010E0 (retsize: 0;)
	return
	// succ:  fn004010D7_exit l004010DD_thunk_fn004010E0
l004010DD_thunk_fn004010E0:
	call fn004010E0 (retsize: 0;)
	return
	// succ:  fn004010D7_exit
fn004010D7_exit:


// fn004010DF
// Return size: 0
void fn004010DF()
fn004010DF_entry:
	// succ:  l004010DF
l004010DF:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = edi
	edi = v3
	call fn0040126E (retsize: 4;)
	esp = esp + 0xFFFFFFFA
	// succ:  l004010DF_thunk_fn004010E0
l004010DF_thunk_fn004010E0:
	call fn004010E0 (retsize: 0;)
	return
	// succ:  fn004010DF_exit
fn004010DF_exit:


// fn004010E0
// Return size: 0
void fn004010E0()
fn004010E0_entry:
	// succ:  l004010E0
l004010E0:
	esp = fp
	SCZO = cond(al - 0x24)
	dx = dx
	dx = edx
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = edi
	ebx = edx
	edx = edx | eax
	SZO = cond(edx)
	C = false
	call fn0040126E (retsize: 4;)
l004010E0:
	dx = dx
	dx = edx
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = edi
	ebx = edx
	edx = edx | eax
	SZO = cond(edx)
	C = false
fn004010E0_exit:


// fn00401115
// Return size: 0
void fn00401115()
fn00401115_entry:
	// succ:  l00401115
l00401115:
	esp = fp
	esp = esp + 0x00000004
	dh = dh + dl
	SCZO = cond(dh)
	edi = edi | esi
	SZO = cond(edi)
	C = false
	ch = ch ^ dl
	SZO = cond(ch)
	C = false
	dh = dh ^ bh
	SZO = cond(dh)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	dh = dh + ch
	SCZO = cond(dh)
	call fn00401045 (retsize: 4;)
fn00401115_exit:


// fn00401128
// Return size: 0
void fn00401128()
fn00401128_entry:
	// succ:  l00401128
l00401128:
	esp = fp
l00401128:
fn00401128_exit:


// fn0040112E
// Return size: 0
void fn0040112E()
fn0040112E_entry:
	// succ:  l0040112E
l0040112E:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = ecx
	ecx = v3
	esp = esp - 0x00000002
	Mem0[esp:word16] = bx
	// succ:  l00401131_thunk_fn00401133
l00401131_thunk_fn00401133:
	call fn00401133 (retsize: 0;)
	return
	// succ:  fn0040112E_exit
fn0040112E_exit:


// fn00401133
// Return size: 0
void fn00401133()
fn00401133_entry:
	// succ:  l00401133
l00401133:
	esp = fp
	bx = Mem0[esp:word16]
	esp = esp + 0x00000002
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi - edx
	SCZO = cond(edi)
	ecx = ecx | edx
	SZO = cond(ecx)
	C = false
l00401133:
	bx = Mem0[esp:word16]
	esp = esp + 0x00000002
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi - edx
	SCZO = cond(edi)
	ecx = ecx | edx
	SZO = cond(ecx)
	C = false
fn00401133_exit:


// fn0040114A
// Return size: 0
void fn0040114A()
fn0040114A_entry:
	// succ:  l0040114A
l0040114A:
	esp = fp
	esp = esp + 0x00000004
	ecx = ecx | ebx
	SZO = cond(ecx)
	C = false
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
	bl = al
	edi = edi ^ esi
	SZO = cond(edi)
	C = false
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ch = ch - bh
	SCZO = cond(ch)
	edi = ebx
	call fn004011F2 (retsize: 4;)
	ah = ah - Mem0[edx - 0x0000005A:byte]
	SCZO = cond(ah)
	C = !C
	branch Test(GE,SO) l00401164_thunk_fn004011E4
	goto l00401166
	// succ:  l00401166 l00401164_thunk_fn004011E4
l00401164_thunk_fn004011E4:
	call fn004011E4 (retsize: 0;)
	return
	// succ:  fn0040114A_exit
l00401166:
	eax = eax & 0x24348964
	SZO = cond(eax)
	C = false
	eax = eax
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx | edi
	SZO = cond(ecx)
	C = false
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	ebx = ebx ^ edi
	SZO = cond(ebx)
	C = false
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	edi = ebx
	edx = edx ^ edi
	SZO = cond(edx)
	C = false
	ecx = ecx ^ eax
	SZO = cond(ecx)
	C = false
	call fn00401224 (retsize: 4;)
	rArg0 = rArg0 + (real64) Mem0[eax + 0x291FB9A6:word16]
	// succ:  l00401181_thunk_fn00401187
l00401181_thunk_fn00401187:
	call fn00401187 (retsize: 0;)
	return
	// succ:  fn0040114A_exit
fn0040114A_exit:


// fn00401187
// Return size: 0
void fn00401187()
fn00401187_entry:
	goto l00401187
	// succ:  l00401187
l0040112B:
	SZO = cond(bh & cl)
	C = false
	rLoc1 = (real64) Mem0[edi + 0x5366240C:int32]
	// succ:  l0040112D_thunk_fn00401133
l0040112D_thunk_fn00401133:
	call fn00401133 (retsize: 0;)
	return
	// succ:  fn00401187_exit
l00401187:
	esp = fp
	esp = esp + 0x00000004
	ebx = ebx + edx
	SCZO = cond(ebx)
	esi = edi
	ebx = esi
	esi = esi + 0x00000001
	SZO = cond(esi)
	edx = esi
	call fn004012BC (retsize: 4;)
	branch Test(NE,Z) l0040112B
	// succ:  l0040119B l0040112B
l0040119B:
	ebx = 0x614034A5
	// succ:  l0040119B_thunk_fn004011A1
l0040119B_thunk_fn004011A1:
	call fn004011A1 (retsize: 0;)
	return
	// succ:  fn00401187_exit
fn00401187_exit:


// fn004011A1
// Return size: 0
void fn004011A1()
fn004011A1_entry:
	// succ:  l004011A1
l004011A1:
	esp = fp
	esp = esp + 0x00000004
	esi = ebx
	edi = edi - esi
	SCZO = cond(edi)
	esi = esi - ecx
	SCZO = cond(esi)
	edx = edx + 0x00000001
	SZO = cond(edx)
	ecx = ecx - esi
	SCZO = cond(ecx)
	edx = edx + ecx
	SCZO = cond(edx)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	call fn00401060 (retsize: 4;)
	al = __inb(dx)
	eax = eax | 0x648D4023
	SZO = cond(eax)
	C = false
	// succ:  l004011B7_thunk_fn004011BC
l004011B7_thunk_fn004011BC:
	call fn004011BC (retsize: 0;)
	return
	// succ:  fn004011A1_exit
fn004011A1_exit:


// fn004011BA
// Return size: 0
void fn004011BA()
fn004011BA_entry:
	// succ:  l004011BA
l004011BA:
	esp = fp
	esp = esp + 0x00000004
	// succ:  l004011BA_thunk_fn004011BC
l004011BA_thunk_fn004011BC:
	call fn004011BC (retsize: 0;)
	return
	// succ:  fn004011BA_exit
fn004011BA_exit:


// fn004011BC
// Return size: 0
void fn004011BC()
fn004011BC_entry:
	// succ:  l004011BC
l004011BC:
	esp = fp
	al = al & 0x04
	SZO = cond(al)
	C = false
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	eax = ecx
	eax = edi
	eax = eax - ecx
	SCZO = cond(eax)
	call fn0040120C (retsize: 4;)
	Mem0[ecx + 0xC593C53A:word32] = 0x241C8726
	goto l004011CC_thunk_fn004011D6
	// succ:  l004011CC_thunk_fn004011D6
l004011BC:
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	eax = ecx
	eax = edi
	eax = eax - ecx
	SCZO = cond(eax)
	call fn0040120C (retsize: 4;)
	Mem0[ecx + 0xC593C53A:word32] = 0x241C8726
	di = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx | ebx
	SZO = cond(edx)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	eax = eax + 0x00000001
	SZO = cond(eax)
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	ecx = ecx + eax
	SCZO = cond(ecx)
	goto l004011E2_thunk_fn004011E4
	// succ:  l004011E2_thunk_fn004011E4
l004011CC_thunk_fn004011D6:
	call fn004011D6 (retsize: 0;)
	return
	// succ:  fn004011BC_exit
l004011E2_thunk_fn004011E4:
	call fn004011E4 (retsize: 0;)
	return
	// succ:  fn004011BC_exit
fn004011BC_exit:


// fn004011D3
// Return size: 0
void fn004011D3()
fn004011D3_entry:
	// succ:  l004011D3
l004011D3:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = ebx
	ebx = v3
	// succ:  l004011D3_thunk_fn004011D6
l004011D3_thunk_fn004011D6:
	call fn004011D6 (retsize: 0;)
	return
	// succ:  fn004011D3_exit
fn004011D3_exit:


// fn004011D6
// Return size: 0
void fn004011D6()
fn004011D6_entry:
	// succ:  l004011D6
l004011D6:
	esp = fp
	di = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx | ebx
	SZO = cond(edx)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	eax = eax + 0x00000001
	SZO = cond(eax)
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	ecx = ecx + eax
	SCZO = cond(ecx)
	goto l004011E2_thunk_fn004011E4
	// succ:  l004011E2_thunk_fn004011E4
l004011D6:
	di = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx | ebx
	SZO = cond(edx)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	eax = eax + 0x00000001
	SZO = cond(eax)
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	ecx = ecx + eax
	SCZO = cond(ecx)
	goto l004011E2_thunk_fn004011E4
	// succ:  l004011E2_thunk_fn004011E4
l004011E2_thunk_fn004011E4:
	call fn004011E4 (retsize: 0;)
	return
	// succ:  fn004011D6_exit
l004011E2_thunk_fn004011E4:
	call fn004011E4 (retsize: 0;)
	return
	// succ:  fn004011D6_exit
fn004011D6_exit:


// fn004011E4
// Return size: 0
void fn004011E4()
fn004011E4_entry:
	// succ:  l004011E4
l004011E4:
	esp = fp
	eax = ebx
	ebx = ebx - edi
	SCZO = cond(ebx)
	call fn0040129F (retsize: 4;)
	al = al - 0x83 - C
	SCZO = cond(al)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	SCZO = cond(eax - 0x24648D42)
	goto l004011F0_thunk_fn004011F5
	// succ:  l004011F0_thunk_fn004011F5
l004011E4:
	eax = ebx
	ebx = ebx - edi
	SCZO = cond(ebx)
	call fn0040129F (retsize: 4;)
	al = al - 0x83 - C
	SCZO = cond(al)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	SCZO = cond(eax - 0x24648D42)
	goto l004011F0_thunk_fn004011F5
	// succ:  l004011F0_thunk_fn004011F5
l004011F0_thunk_fn004011F5:
	call fn004011F5 (retsize: 0;)
	return
	// succ:  fn004011E4_exit
l004011F0_thunk_fn004011F5:
	call fn004011F5 (retsize: 0;)
	return
	// succ:  fn004011E4_exit
fn004011E4_exit:


// fn004011F2
// Return size: 0
void fn004011F2()
fn004011F2_entry:
	// succ:  l004011F2
l004011F2:
	esp = fp
	esp = esp + 0x00000004
	call fn004012F0 (retsize: 4;)
	// succ:  l004011F2_thunk_fn004011F5 l00401201_thunk_fn00401206
l004011F2_thunk_fn004011F5:
	call fn004011F5 (retsize: 0;)
	return
	// succ:  fn004011F2_exit
l00401201_thunk_fn00401206:
	call fn00401206 (retsize: 0;)
	return
	// succ:  fn004011F2_exit
fn004011F2_exit:


// fn004011F5
// Return size: 0
void fn004011F5()
fn004011F5_entry:
	// succ:  l004011F5
l004011F5:
	esp = fp
	al = al + 0x32
	SCZO = cond(al)
l004011F5:
	bl = bl ^ ch
	SZO = cond(bl)
	C = false
	edx = edx - 0x00000001
	SZO = cond(edx)
	edi = edi - eax
	SCZO = cond(edi)
	edx = edx + edi
	SCZO = cond(edx)
	esi = esi - eax
	SCZO = cond(esi)
	edi = edi ^ eax
	SZO = cond(edi)
	C = false
fn004011F5_exit:


// fn00401206
// Return size: 0
void fn00401206()
fn00401206_entry:
	// succ:  l00401206
l00401206:
	esp = fp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	cl = cl - al
	SCZO = cond(cl)
	SZO = cond(eax & 0x3C87DAFD)
	C = false
	goto l00401209_thunk_fn0040120E
	// succ:  l00401209_thunk_fn0040120E
l00401206:
l00401209_thunk_fn0040120E:
	call fn0040120E (retsize: 0;)
	return
	// succ:  fn00401206_exit
fn00401206_exit:


// fn0040120C
// Return size: 0
void fn0040120C()
fn0040120C_entry:
	// succ:  l0040120C
l0040120C:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = edi
	edi = v3
	// succ:  l0040120C_thunk_fn0040120E
l0040120C_thunk_fn0040120E:
	call fn0040120E (retsize: 0;)
	return
	// succ:  fn0040120C_exit
fn0040120C_exit:


// fn0040120E
// Return size: 0
void fn0040120E()
fn0040120E_entry:
	// succ:  l0040120E
l0040120E:
	esp = fp
	al = al & 0x66
	SZO = cond(al)
	C = false
	ecx = ecx
l0040120E:
	cx = cx
fn0040120E_exit:


// fn00401224
// Return size: 4
void fn00401224()
fn00401224_entry:
	// succ:  l00401224
l00401224:
	esp = fp
	Mem0[esp - 0x0000002C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	SZO = cond(al & 0x08)
	C = false
	branch Test(EQ,Z) l0040122D
	// succ:  l0040122C l0040122D
l0040122C:
	return
	// succ:  fn00401224_exit
l0040122D:
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx + ecx
	SCZO = cond(edx)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	call fn004011D3 (retsize: 4;)
	esi = esi + 0x00000001
	SZO = cond(esi)
	edx = edx - 0x00000001
	SZO = cond(edx)
	SCZO = ah
	branch Test(EQ,Z) l00401239_thunk_fn00401269
	goto l0040123B
	// succ:  l0040123B l00401239_thunk_fn00401269
l00401239_thunk_fn00401269:
	call fn00401269 (retsize: 6;)
	return
	// succ:  fn00401224_exit
l0040123B:
	eax = eax + 0x00000001
	SZO = cond(eax)
	// succ:  l0040123B_thunk_fn0040123C
l0040123B_thunk_fn0040123C:
	call fn0040123C (retsize: 0;)
	return
	// succ:  fn00401224_exit
fn00401224_exit:


// fn0040123C
// Return size: 6
void fn0040123C()
fn0040123C_entry:
	// succ:  l0040123C
l0040123C:
	esp = fp
	esp = esp + 0x00000004
	bl = bl ^ dh
	SZO = cond(bl)
	C = false
	bl = bl ^ ah
	SZO = cond(bl)
	C = false
	edx = edx + eax
	SCZO = cond(edx)
	ecx = ecx - esi
	SCZO = cond(ecx)
	edi = edi - ecx
	SCZO = cond(edi)
	call fn0040114A (retsize: 4;)
	eax = (int32) ax
	SCZDOP = Mem0[esp:word32]
	esp = esp + 0x00000004
	branch Test(GT,SZO) l00401252_thunk_fn00401256
	// succ:  l00401252_thunk_fn00401254 l00401252_thunk_fn00401256
l00401252_thunk_fn00401254:
	call fn00401254 (retsize: 0;)
	return
	// succ:  fn0040123C_exit l00401252_thunk_fn00401254
l00401252_thunk_fn00401254:
	call fn00401254 (retsize: 0;)
	return
	// succ:  fn0040123C_exit
l00401252_thunk_fn00401256:
	call fn00401256 (retsize: 6;)
	return
	// succ:  fn0040123C_exit
fn0040123C_exit:


// fn00401254
// Return size: 0
void fn00401254()
fn00401254_entry:
	// succ:  l00401254
l00401254:
	esp = fp
	Mem0[esp - 0x00000010:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00401254_thunk_fn00401256
l00401254_thunk_fn00401256:
	call fn00401256 (retsize: 6;)
	return
	// succ:  fn00401254_exit
fn00401254_exit:


// fn00401256
// Return size: 6
void fn00401256()
fn00401256_entry:
	// succ:  l00401256
l00401256:
	esp = fp
	al = al & 0xF0
	SZO = cond(al)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ebx = ebx - edi
	SCZO = cond(ebx)
	esi = ecx
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	edi = edi - eax
	SCZO = cond(edi)
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	call fn004012D4 (retsize: 4;)
	SCZO = cond(Mem0[ebp + 0x52F9F76B:byte] - ah)
	goto l00401268_thunk_fn0040126E
	// succ:  l00401268_thunk_fn0040126E
l00401256:
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ebx = ebx - edi
	SCZO = cond(ebx)
	esi = ecx
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	edi = edi - eax
	SCZO = cond(edi)
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	call fn004012D4 (retsize: 4;)
	SCZO = cond(Mem0[ebp + 0x52F9F76B:byte] - ah)
l00401268_thunk_fn0040126E:
	call fn0040126E (retsize: 6;)
	return
	// succ:  fn00401256_exit
fn00401256_exit:


// fn00401269
// Return size: 6
void fn00401269()
fn00401269_entry:
	goto l00401269
	// succ:  l00401269
l00401268_thunk_fn0040126E:
	call fn0040126E (retsize: 0;)
	return
	// succ:  fn00401269_exit
l00401269:
	esp = fp
	v3 = Mem0[esi:word32]
	Mem0[edi:word32] = v3
	esi = esi + 0x00000004
	edi = edi + 0x00000004
	esi = edi *s 0xFFFFFFF9
	SCZO = cond(esi)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	goto l0040126D_thunk_fn0040126E
	// succ:  l0040126D_thunk_fn0040126E
l00401269:
	goto l00401268_thunk_fn0040126E
	// succ:  l00401268_thunk_fn0040126E
l0040126D_thunk_fn0040126E:
	call fn0040126E (retsize: 6;)
	return
	// succ:  fn00401269_exit
fn00401269_exit:


// fn0040126E
// Return size: 6
void fn0040126E()
fn0040126E_entry:
	// succ:  l0040126E
l0040126E:
	esp = fp
	Mem0[esp:word32] = edx
	branch Test(UGE,C) l00401273
	// succ:  l00401273
l00401273:
	cx = cx
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = edx
	edx = edx - esi
	SCZO = cond(edx)
	edx = ebx
	esi = esi - eax
	SCZO = cond(esi)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	call fn00401254 (retsize: 4;)
	v13 = Mem0[ebp + 0x0000000B:word32] - ecx
	Mem0[ebp + 0x0000000B:word32] = v13
	SCZO = cond(v13)
	v14 = Mem0[ecx + ecx * 0x00000004:word32] + ecx + C
	Mem0[ecx + ecx * 0x00000004:word32] = v14
	SCZO = cond(v14)
	al = al ^ 0x24
	SZO = cond(al)
	C = false
	ah = ah
	// succ:  l00401295
l00401295:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi - 0x00000001
	SZO = cond(edi)
	eax = edi
	ecx = ecx - eax
	SCZO = cond(ecx)
	ecx = edx
	// succ:  l0040129D_thunk_fn00401304
l0040129D_thunk_fn00401304:
	call fn00401304 (retsize: 6;)
	return
	// succ:  fn0040126E_exit
fn0040126E_exit:


// fn0040129F
// Return size: 0
void fn0040129F()
fn0040129F_entry:
	// succ:  l0040129F
l0040129F:
	esp = fp
	esp = esp + 0x00000004
	edi = esi
	edi = edi - esi
	SCZO = cond(edi)
	// succ:  l004012A5_thunk_fn004012A7
l004012A5_thunk_fn004012A7:
	call fn004012A7 (retsize: 0;)
	return
	// succ:  fn0040129F_exit
fn0040129F_exit:


// fn004012A7
// Return size: 0
void fn004012A7()
fn004012A7_entry:
	// succ:  l004012A7
l004012A7:
	ecx = edx
	edx = edx | esi
	SZO = cond(edx)
	C = false
	eax = eax + ebx
	SCZO = cond(eax)
	edi = edi ^ eax
	SZO = cond(edi)
	C = false
	edx = edx ^ edi
	SZO = cond(edx)
	C = false
	call fn004011BA (retsize: 4;)
fn004012A7_exit:


// fn004012BC
// Return size: 0
void fn004012BC()
fn004012BC_entry:
	// succ:  l004012BC
l004012BC:
	esp = fp
	esp = esp + 0x00000004
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edi = edi + eax
	SCZO = cond(edi)
	ecx = ecx + edx
	SCZO = cond(ecx)
	ecx = ecx | ebx
	SZO = cond(ecx)
	C = false
	edx = edx + ebx
	SCZO = cond(edx)
	call fn00401098 (retsize: 4;)
fn004012BC_exit:


// fn004012D4
// Return size: 4
void fn004012D4()
fn004012D4_entry:
	// succ:  l004012D4
l004012D4:
	esp = fp
	Mem0[esp - 0x00000024:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi - eax
	SCZO = cond(esi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	ecx = ecx + esi
	SCZO = cond(ecx)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	__fclex()
	edi = edi - 0x00000001
	SZO = cond(edi)
	ecx = ecx ^ edx
	SZO = cond(ecx)
	C = false
	call fn00401025 (retsize: 4;)
	C = false
	C = true
	return
	// succ:  fn004012D4_exit
fn004012D4_exit:


// fn004012F0
// Return size: 0
void fn004012F0()
fn004012F0_entry:
	// succ:  l004012F0
l004012F0:
	esp = fp
	Mem0[esp:word32] = ebx
	dx = edx
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	call fn004010DF (retsize: 4;)
	eax = eax - 0xE8EA6012
	SCZO = cond(eax)
	// succ:  l00401300_thunk_fn00401305
l00401300_thunk_fn00401305:
	call fn00401305 (retsize: 0;)
	return
	// succ:  fn004012F0_exit
fn004012F0_exit:


// fn00401304
// Return size: 6
void fn00401304()
fn00401304_entry:
	// succ:  l00401304
l00401304:
	esp = fp
	call fn00402820 (retsize: 4;)
	goto l00401304_thunk_fn00401305
	// succ:  l00401304_thunk_fn00401305
l00401304:
l00401304_thunk_fn00401305:
	call fn00401305 (retsize: 0;)
	return
	// succ:  fn00401304_exit
fn00401304_exit:


// fn00401305
// Return size: 0
void fn00401305()
fn00401305_entry:
	// succ:  l00401305
l00401305:
	esp = fp
	ss = Mem0[esp:selector]
	esp = esp + 0x00000002
	eax = eax + 0x777F0000 + C
	SCZO = cond(eax)
	goto l00401306_thunk_fn0040130B
	// succ:  l00401306_thunk_fn0040130B
l00401305:
	branch Test(GT,SZO) l00401382
	// succ:  l00401305_thunk_fn0040130B l00401382
l00401305_thunk_fn0040130B:
	call fn0040130B (retsize: 0;)
	return
	// succ:  fn00401305_exit
l00401306_thunk_fn0040130B:
	call fn0040130B (retsize: 0;)
	return
	// succ:  fn00401305_exit
l00401382:
	Mem0[edi:byte] = al
	edi = edi + 0x00000001
	esi = 0x6BA998BE
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	SCZO = cond(esi - Mem0[edx + 0xAFB8CE51:word32])
	edx = 0x3D17BEBE
	dl = 0xBE
	esi = 0xC356C810
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	branch Test(PO,P) l004013F0
	// succ:  l004013A1 l004013F0
l004013A1:
	SCZO = cond(al - Mem0[edi:byte])
	edi = edi + 0x00000001
	edi = edi - 0x00000001
	SZO = cond(edi)
	SCZO = cond(al - Mem0[edi:byte])
	edi = edi + 0x00000001
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bh = 0x4F
	SCZO = cond(al - Mem0[edi:byte])
	edi = edi + 0x00000001
	ss = Mem0[esp:selector]
	esp = esp + 0x00000002
	ebp = ebp & Mem0[edx + 0x12EEBEBE:word32]
	SZO = cond(ebp)
	C = false
	return
	// succ:  fn00401305_exit
l004013F0:
	eax = eax ^ 0xBDB2A3FA
	SZO = cond(eax)
	C = false
fn00401305_exit:


// fn0040130B
// Return size: 0
void fn0040130B()
fn0040130B_entry:
	// succ:  l0040130B
l0040130B:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	C = __das(al, &al)
	branch Test(ULT,C) l004012A7
	goto l00401310
	// succ:  l00401310 l0040130E_thunk_fn004012A7
l0040130E_thunk_fn004012A7:
	call fn004012A7 (retsize: 0;)
	return
	// succ:  fn0040130B_exit
l00401310:
	ebp = ebp - Mem0[edx + ebp * 0x00000004:word32] - C
	SCZO = cond(ebp)
	esi = 0xC1B482BE
	v13 = eax
	eax = esi
	esi = v13
	esi = 0xCD12AFBE
	esp = esp - 0x00000004
	Mem0[esp:word32] = ds
	eax = (int32) ax
fn0040130B_exit:


// fn00401F61
// Return size: 0
void fn00401F61()
fn00401F61_entry:
	// succ:  l00401F61
l00401F61:
	// succ:  l735B9091
l735B9091:
fn00401F61_exit:


// fn00401FB9
// Return size: 0
void fn00401FB9()
fn00401FB9_entry:
	// succ:  l00401FB9
l00401FB9:
	esp = fp
	esp = esp + 0x00000004
	dh = 0xD2
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	eax = eax + esi
	SCZO = cond(eax)
	ah = ah | al
	SZO = cond(ah)
	C = false
	ch = ch | ah
	SZO = cond(ch)
	C = false
	edi = edx
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	dh = dh + bl
	SCZO = cond(dh)
	al = bh
	call fn004023A3 (retsize: 4;)
	v17 = Mem0[edx + 0x8DA48978 + ecx * 0x00000002:word32]
	Mem0[edx + 0x8DA48978 + ecx * 0x00000002:word32] = ebx
	ebx = v17
	// succ:  l00401FD3_thunk_fn00401FDA
l00401FD3_thunk_fn00401FDA:
	call fn00401FDA (retsize: 0;)
	return
	// succ:  fn00401FB9_exit
fn00401FB9_exit:


// fn00401FD4
// Return size: 0
void fn00401FD4()
fn00401FD4_entry:
	// succ:  l00401FD4
l00401FD4:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = SCZDOP
	edx = edx - 0x00000001
	SZO = cond(edx)
	branch Test(SG,S) TMP!
l00401FD4:
fn00401FD4_exit:


// fn00401FD9
// Return size: 0
void fn00401FD9()
fn00401FD9_entry:
	// succ:  l00401FD9
l00401FD9:
	esp = fp
	esp = esp + 0x00000004
	// succ:  l00401FD9_thunk_fn00401FDA
l00401FD9_thunk_fn00401FDA:
	call fn00401FDA (retsize: 0;)
	return
	// succ:  fn00401FD9_exit
fn00401FD9_exit:


// fn00401FDA
// Return size: 0
void fn00401FDA()
fn00401FDA_entry:
	// succ:  l00401FDA
l00401FDA:
	esp = fp
	al = al & 0x04
	SZO = cond(al)
	C = false
	eax = eax + ecx
	SCZO = cond(eax)
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	eax = ecx
	ecx = ecx | edx
	SZO = cond(ecx)
	C = false
	ah = ah ^ al
	SZO = cond(ah)
	C = false
	call fn00402C76 (retsize: 4;)
	branch Test(NO,O) l00401FED_thunk_fn00401FD4
	goto l00401FED_thunk_fn00401FEF
	// succ:  l00401FED_thunk_fn00401FEF l00401FED_thunk_fn00401FD4
l00401FDA:
	eax = eax + ecx
	SCZO = cond(eax)
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	eax = ecx
	ecx = ecx | edx
	SZO = cond(ecx)
	C = false
	ah = ah ^ al
	SZO = cond(ah)
	C = false
	call fn00402C76 (retsize: 4;)
	branch Test(NO,O) l00401FED_thunk_fn00401FD4
	// succ:  l00401FEA_thunk_fn00401FEF l00401FED_thunk_fn00401FD4
l00401FEA_thunk_fn00401FEF:
	call fn00401FEF (retsize: 0;)
	return
	// succ:  fn00401FDA_exit
l00401FED_thunk_fn00401FD4:
	call fn00401FD4 (retsize: 0;)
	return
	// succ:  fn00401FDA_exit
l00401FED_thunk_fn00401FD4:
	call fn00401FD4 (retsize: 0;)
	return
	// succ:  fn00401FDA_exit
l00401FED_thunk_fn00401FEF:
	call fn00401FEF (retsize: 0;)
	return
	// succ:  fn00401FDA_exit l00401FED_thunk_fn00401FEF
l00401FED_thunk_fn00401FEF:
	call fn00401FEF (retsize: 0;)
	return
	// succ:  fn00401FDA_exit
fn00401FDA_exit:


// fn00401FEF
// Return size: 0
void fn00401FEF()
fn00401FEF_entry:
	// succ:  l00401FEF
l00401FEF:
	Z = __arpl(sp, bx, &sp)
	rArg0 = rArg0 * Mem0[ebp + 0x8A042464:real32]
	v8 = Mem0[ebx:word16] - (real64) rArg0
	Mem0[ebx:word16] = v8
	rLoc1 = (real64) Mem0[edx:int16]
	C = true
	eax = eax + 0x00000008
	SCZO = cond(eax)
	bl = bl ^ bh
	SZO = cond(bl)
	C = false
	call fn0040262F (retsize: 4; FPU: 1;)
	branch Test(EQ,Z) l00402008
	// succ:  l00402008
l00402008:
	return
	// succ:  fn00401FEF_exit
fn00401FEF_exit:


// fn00401FF2
// Return size: 0
void fn00401FF2()
fn00401FF2_entry:
	// succ:  l00401FF2
l00401FF2:
	esp = fp
	esp = esp + 0x00000004
	bl = dh
	ebx = ebx - edi
	SCZO = cond(ebx)
	bh = bh + cl
	SCZO = cond(bh)
	eax = eax + 0x00000008
	SCZO = cond(eax)
	bl = bl ^ bh
	SZO = cond(bl)
	C = false
	call fn0040262F (retsize: 4;)
	branch Test(EQ,Z) l00402008_in_fn00401FF2
	goto l00402008_in_fn00401FF2
	// succ:  l00402008_in_fn00401FF2 l00402008_in_fn00401FF2
l00402008_in_fn00401FF2:
	return
	// succ:  fn00401FF2_exit
l00402008_in_fn00401FF2:
	return
	// succ:  fn00401FF2_exit l00402008_in_fn00401FF2
l00402008_in_fn00401FF2:
	return
	// succ:  fn00401FF2_exit
fn00401FF2_exit:


// fn0040200D
// Return size: 0
void fn0040200D()
fn0040200D_entry:
	// succ:  l0040200D
l0040200D:
	esp = fp
	Mem0[esp - 0x0000000C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l0040200D_thunk_fn00402011
l0040200D_thunk_fn00402011:
	call fn00402011 (retsize: 0;)
	return
	// succ:  fn0040200D_exit
fn0040200D_exit:


// fn00402010
// Return size: 0
void fn00402010()
fn00402010_entry:
	// succ:  l00402010
l00402010:
	esp = fp
	__hlt()
l00402010:
fn00402010_exit:


// fn00402011
// Return size: 0
void fn00402011()
fn00402011_entry:
	// succ:  l00402011
l00402011:
	esp = fp
	bl = bl - dl
	SCZO = cond(bl)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[eax + 0x00000010:word32]
	edi = edi | ecx
	SZO = cond(edi)
	C = false
	esi = eax
	bh = bh | al
	SZO = cond(bh)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	call fn004024FE (retsize: 4;)
	Mem0[ebx + 0xE2783ABA:word32] = 0x24648D36
	al = al + 0x4A
	SCZO = cond(al)
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	dh = dh - bh
	SCZO = cond(dh)
	esi = esi - edx
	SCZO = cond(esi)
	eax = eax - ecx
	SCZO = cond(eax)
	call fn00401FD9 (retsize: 4;)
	esp = esp + 0xFFFFB34C
l00402011:
fn00402011_exit:


// fn0040202C
// Return size: 0
void fn0040202C()
fn0040202C_entry:
	// succ:  l0040202C
l0040202C:
	esp = fp
	esp = esp + 0x00000004
	edx = edx - 0x00000001
	SZO = cond(edx)
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	dh = dh - bh
	SCZO = cond(dh)
	esi = esi - edx
	SCZO = cond(esi)
	eax = eax - ecx
	SCZO = cond(eax)
	call fn00401FD9 (retsize: 4;)
	esp = esp + 0xFFFFB34C
fn0040202C_exit:


// fn00402045
// Return size: 0
void fn00402045()
fn00402045_entry:
	// succ:  l00402045
l00402045:
	esp = fp
	esp = esp + 0x00000004
	bh = bh ^ dl
	SZO = cond(bh)
	C = false
	bl = bl ^ bh
	SZO = cond(bl)
	C = false
	edi = edi ^ esi
	SZO = cond(edi)
	C = false
	ecx = ecx - edi
	SCZO = cond(ecx)
	esi = esi + 0x00000001
	SZO = cond(esi)
	dh = al
	edx = edx - ecx
	SCZO = cond(edx)
	dl = ah
	bl = bl - ch
	SCZO = cond(bl)
	call fn004023DA (retsize: 4;)
	v17 = Mem0[ecx + 0x648D0694:byte] - ch - C
	Mem0[ecx + 0x648D0694:byte] = v17
	SCZO = cond(v17)
	// succ:  l0040205F_thunk_fn00402065
l0040205F_thunk_fn00402065:
	call fn00402065 (retsize: 0;)
	return
	// succ:  fn00402045_exit
fn00402045_exit:


// fn00402063
// Return size: 0
void fn00402063()
fn00402063_entry:
	// succ:  l00402063
l00402063:
	esp = fp
	esp = esp + 0x00000004
	call fn0040269B (retsize: 4;)
	// succ:  l00402063_thunk_fn00402065 l00402077_thunk_fn0040207C
l00402063_thunk_fn00402065:
	call fn00402065 (retsize: 0;)
	return
	// succ:  fn00402063_exit
l00402077_thunk_fn0040207C:
	call fn0040207C (retsize: 0;)
	return
	// succ:  fn00402063_exit
fn00402063_exit:


// fn00402065
// Return size: 0
void fn00402065()
fn00402065_entry:
	// succ:  l00402065
l00402065:
	esp = fp
	al = al & 0x04
	SZO = cond(al)
	C = false
	edx = edx | ecx
	SZO = cond(edx)
	C = false
	al = al + dl
	SCZO = cond(al)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000040
	bh = al
	eax = eax | edx
	SZO = cond(eax)
	C = false
	edi = edi | esi
	SZO = cond(edi)
	C = false
	ebx = ebx + esi
	SCZO = cond(ebx)
	ch = ch ^ dl
	SZO = cond(ch)
	C = false
	call fn0040269B (retsize: 4;)
	goto l00402077_thunk_fn0040207C
	// succ:  l00402077_thunk_fn0040207C
l00402065:
	edx = edx | ecx
	SZO = cond(edx)
	C = false
	al = al + dl
	SCZO = cond(al)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000040
	bh = al
	eax = eax | edx
	SZO = cond(eax)
	C = false
	edi = edi | esi
	SZO = cond(edi)
	C = false
	ebx = ebx + esi
	SCZO = cond(ebx)
	ch = ch ^ dl
	SZO = cond(ch)
	C = false
l00402077_thunk_fn0040207C:
	call fn0040207C (retsize: 0;)
	return
	// succ:  fn00402065_exit
fn00402065_exit:


// fn0040207C
// Return size: 0
void fn0040207C()
fn0040207C_entry:
	// succ:  l0040207C
l0040207C:
	esp = fp
	eax = 0x03D9BCFF
	branch Test(NE,Z) l00402081_thunk_fn00402010
	goto l00402081_thunk_fn00402083
	// succ:  l00402081_thunk_fn00402083 l00402081_thunk_fn00402010
l0040207C:
	eax = 0x03D9BCFF
	branch Test(NE,Z) l00402081_thunk_fn00402010
	goto l00402081_thunk_fn00402083
	// succ:  l00402081_thunk_fn00402083 l00402081_thunk_fn00402010
l00402081_thunk_fn00402010:
	call fn00402010 (retsize: 0;)
	return
	// succ:  fn0040207C_exit
l00402081_thunk_fn00402010:
	call fn00402010 (retsize: 0;)
	return
	// succ:  fn0040207C_exit
l00402081_thunk_fn00402083:
	call fn00402083 (retsize: 4;)
	return
	// succ:  fn0040207C_exit l00402081_thunk_fn00402083
l00402081_thunk_fn00402083:
	call fn00402083 (retsize: 4;)
	return
	// succ:  fn0040207C_exit
l00402081_thunk_fn00402083:
	call fn00402083 (retsize: 4;)
	return
	// succ:  fn0040207C_exit l00402081_thunk_fn00402083
l00402081_thunk_fn00402083:
	call fn00402083 (retsize: 4;)
	return
	// succ:  fn0040207C_exit
fn0040207C_exit:


// fn00402082
// Return size: 4
void fn00402082()
fn00402082_entry:
	// succ:  l00402082
l00402082:
	esp = fp
	esp = esp + 0x00000004
	call fn00402292 (retsize: 4;)
	// succ:  l00402082_thunk_fn00402083 l0040209A_in_fn00402082
l00402082_thunk_fn00402083:
	call fn00402083 (retsize: 4;)
	return
	// succ:  fn00402082_exit
l0040209A_in_fn00402082:
	__outb(0xEC, al)
	return
	// succ:  fn00402082_exit
fn00402082_exit:


// fn00402083
// Return size: 4
void fn00402083()
fn00402083_entry:
	// succ:  l00402083
l00402083:
	esp = fp
	al = al & 0x04
	SZO = cond(al)
	C = false
	ecx = ecx ^ edx
	SZO = cond(ecx)
	C = false
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	cl = cl ^ al
	SZO = cond(cl)
	C = false
	cl = cl + dh
	SCZO = cond(cl)
	ecx = edi
	ebx = ebx + edi
	SCZO = cond(ebx)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	call fn00402292 (retsize: 4;)
	goto l0040209A
	// succ:  l0040209A
l00402083:
	ecx = ecx ^ edx
	SZO = cond(ecx)
	C = false
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	cl = cl ^ al
	SZO = cond(cl)
	C = false
	cl = cl + dh
	SCZO = cond(cl)
	ecx = edi
	ebx = ebx + edi
	SCZO = cond(ebx)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
l0040209A:
	__outb(0xEC, al)
	return
	// succ:  fn00402083_exit
fn00402083_exit:


// fn004020DF
// Return size: 0
void fn004020DF()
fn004020DF_entry:
	// succ:  l004020DF
l004020DF:
	esp = fp
	Mem0[esp - 0x00000024:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = bl - cl
	SCZO = cond(bl)
	ebx = ebx + eax
	SCZO = cond(ebx)
	bh = bh + cl
	SCZO = cond(bh)
	edi = edi - ebx
	SCZO = cond(edi)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bh = al
	SCZO = cond(eax - 0x0032FECB)
	branch Test(NE,Z) l004020F5_thunk_fn00402D69
	goto l004020FB
	// succ:  l004020FB l004020F5_thunk_fn00402D69
l004020F5_thunk_fn00402D69:
	call fn00402D69 (retsize: 0;)
	return
	// succ:  fn004020DF_exit
l004020FB:
	bh = dh
	call fn00402DEA (retsize: 4;)
	branch Test(NO,O) l00402102_thunk_fn00402175
	goto l00402104
	// succ:  l00402104 l00402102_thunk_fn00402175
l00402102_thunk_fn00402175:
	call fn00402175 (retsize: 0;)
	return
	// succ:  fn004020DF_exit
l00402104:
	SCZDOP = Mem0[esp:word32]
	esp = esp + 0x00000004
	SZO = cond(Mem0[edi + 0x03CC2444:word32] & ecx)
	C = false
fn004020DF_exit:


// fn00402106
// Return size: 0
void fn00402106()
fn00402106_entry:
	// succ:  l00402106
l00402106:
	esp = fp
	Mem0[esp - 0x00000034:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi + ebx
	SCZO = cond(esi)
	call fn00402535 (retsize: 4;)
	goto l0040210B
	// succ:  l0040210B
fn00402106_exit:


// fn00402123
// Return size: 0
void fn00402123()
fn00402123_entry:
	// succ:  l00402123
l00402123:
	esp = fp
	esp = esp + 0x00000004
	edi = edi | ecx
	SZO = cond(edi)
	C = false
	bl = bl - dh
	SCZO = cond(bl)
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	edx = edx | ecx
	SZO = cond(edx)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	bl = dh
	ebx = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	ecx = ecx | edi
	SZO = cond(ecx)
	C = false
	call fn00402419 (retsize: 4;)
	v14 = (Mem0[ecx + 0x00000060:byte] & 0x01 << 0x01) != 0x00
	Mem0[ecx + 0x00000060:byte] = __rcr(Mem0[ecx + 0x00000060:byte], 0x01, C)
	C = v14
	esi = 0x8FAB7DB8
	esp = esp + 0x00000001
	SZO = cond(esp)
	al = al & 0xD8
	SZO = cond(al)
	C = false
	ebx = esi
	ch = 0x3D
	esi = esi + 0x00000001
	SZO = cond(esi)
	bl = bl + ah
	SCZO = cond(bl)
	ecx = ecx - ebx
	SCZO = cond(ecx)
	call fn00402B83 (retsize: 4;)
	esp = esp + 0xFFFFB976
	// succ:  l00402150_thunk_fn00402155
l00402150_thunk_fn00402155:
	call fn00402155 (retsize: 0;)
	return
	// succ:  fn00402123_exit
fn00402123_exit:


// fn00402143
// Return size: 0
void fn00402143()
fn00402143_entry:
	// succ:  l00402143
l00402143:
	esp = fp
	Mem0[esp - 0x00000028:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = esi
	ch = 0x3D
	esi = esi + 0x00000001
	SZO = cond(esi)
	bl = bl + ah
	SCZO = cond(bl)
	ecx = ecx - ebx
	SCZO = cond(ecx)
	call fn00402B83 (retsize: 4;)
	// succ:  l00402150_thunk_fn00402155
l00402150_thunk_fn00402155:
	call fn00402155 (retsize: 0;)
	return
	// succ:  fn00402143_exit
fn00402143_exit:


// fn00402155
// Return size: 0
void fn00402155()
fn00402155_entry:
	// succ:  l00402155
l00402155:
	esp = fp
	esp = esp + 0x00000001
	SZO = cond(esp)
	ebp = 0x8D04A0E7
	goto l00402156_thunk_fn0040215B
	// succ:  l00402156_thunk_fn0040215B
l00402155:
	esp = esp + 0x00000001
	SZO = cond(esp)
	ebp = 0x8D04A0E7
	goto l00402156_thunk_fn0040215B
	// succ:  l00402156_thunk_fn0040215B
l00402156_thunk_fn0040215B:
	call fn0040215B (retsize: 0;)
	return
	// succ:  fn00402155_exit
l00402156_thunk_fn0040215B:
	call fn0040215B (retsize: 0;)
	return
	// succ:  fn00402155_exit
fn00402155_exit:


// fn0040215A
// Return size: 0
void fn0040215A()
fn0040215A_entry:
	// succ:  l0040215A
l0040215A:
	esp = fp
	esp = esp + 0x00000004
	call fn004022C7 (retsize: 4;)
	// succ:  l0040215A_thunk_fn0040215B l0040216D_thunk_fn00402172
l0040215A_thunk_fn0040215B:
	call fn0040215B (retsize: 0;)
	return
	// succ:  fn0040215A_exit
l0040216D_thunk_fn00402172:
	call fn00402172 (retsize: 0;)
	return
	// succ:  fn0040215A_exit
fn0040215A_exit:


// fn0040215B
// Return size: 0
void fn0040215B()
fn0040215B_entry:
	// succ:  l0040215B
l0040215B:
	esp = fp
	al = al & 0x04
	SZO = cond(al)
	C = false
	ebx = ebx | eax
	SZO = cond(ebx)
	C = false
	cl = cl - bl
	SCZO = cond(cl)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	bh = 0x0F
	bh = dl
	ebx = ebx + ecx
	SCZO = cond(ebx)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	edi = edi - 0x00000001
	SZO = cond(edi)
	call fn004022C7 (retsize: 4;)
	goto l0040216D_thunk_fn00402172
	// succ:  l0040216D_thunk_fn00402172
l0040215B:
	ebx = ebx | eax
	SZO = cond(ebx)
	C = false
	cl = cl - bl
	SCZO = cond(cl)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	bh = 0x0F
	bh = dl
	ebx = ebx + ecx
	SCZO = cond(ebx)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	edi = edi - 0x00000001
	SZO = cond(edi)
l0040216D_thunk_fn00402172:
	call fn00402172 (retsize: 0;)
	return
	// succ:  fn0040215B_exit
fn0040215B_exit:


// fn00402172
// Return size: 0
void fn00402172()
fn00402172_entry:
	// succ:  l00402172
l00402172:
	esp = fp
	al = al ^ 0x4E
	SZO = cond(al)
	C = false
l00402172:
	al = al ^ 0x4E
	SZO = cond(al)
	C = false
fn00402172_exit:


// fn00402175
// Return size: 0
void fn00402175()
fn00402175_entry:
	// succ:  l00402175
l00402175:
	esp = fp
	branch Test(ULE,CZ) l00402175_thunk_fn00402198
	goto l00402177
	// succ:  l00402177 l00402175_thunk_fn00402198
l00402175:
l00402175_thunk_fn00402198:
	call fn00402198 (retsize: 0;)
	return
	// succ:  fn00402175_exit
l00402177:
	edx = edx ^ esp
	SZO = cond(edx)
	C = false
fn00402175_exit:


// fn0040217A
// Return size: 0
void fn0040217A()
fn0040217A_entry:
	// succ:  l0040217A
l0040217A:
	esp = fp
	Mem0[esp - 0x0000002C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi + edi
	SCZO = cond(esi)
	esi = edi
	esi = eax
	bl = 0xD7
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[edx + 0x00000008:word32]
	call fn00402345 (retsize: 4;)
	ss = Mem0[esp:selector]
	esp = esp + 0x00000002
	branch Test(ULT,C) TMP!
fn0040217A_exit:


// fn00402192
// Return size: 0
void fn00402192()
fn00402192_entry:
	// succ:  l00402192
l00402192:
	esp = fp
	esp = esp + 0x00000004
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	// succ:  l00402196_thunk_fn00402198
l00402196_thunk_fn00402198:
	call fn00402198 (retsize: 0;)
	return
	// succ:  fn00402192_exit
fn00402192_exit:


// fn00402198
// Return size: 0
void fn00402198()
fn00402198_entry:
	// succ:  l00402198
l00402198:
	esp = fp
	edi = edi + 0x00000001
	SZO = cond(edi)
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	dh = dh ^ al
	SZO = cond(dh)
	C = false
	dh = dh + dl
	SCZO = cond(dh)
	edi = edi - eax
	SCZO = cond(edi)
	ch = ch - dl
	SCZO = cond(ch)
	call fn00402946 (retsize: 4;)
	ch = 0x4F
	ch = ch + al + C
	SCZO = cond(ch)
	goto l004021AE_thunk_fn004021B0
	// succ:  l004021AE_thunk_fn004021B0
l00402198:
	edi = edi + 0x00000001
	SZO = cond(edi)
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	// succ:  l0040219A
l0040219A:
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	dh = dh ^ al
	SZO = cond(dh)
	C = false
	dh = dh + dl
	SCZO = cond(dh)
	edi = edi - eax
	SCZO = cond(edi)
	ch = ch - dl
	SCZO = cond(ch)
	call fn00402946 (retsize: 4;)
	ch = 0x4F
	ch = ch + al + C
	SCZO = cond(ch)
	goto l004021AE_thunk_fn004021B0
	// succ:  l004021AE_thunk_fn004021B0
l004021AE_thunk_fn004021B0:
	call fn004021B0 (retsize: 0;)
	return
	// succ:  fn00402198_exit
l004021AE_thunk_fn004021B0:
	call fn004021B0 (retsize: 0;)
	return
	// succ:  fn00402198_exit
fn00402198_exit:


// fn004021B0
// Return size: 0
void fn004021B0()
fn004021B0_entry:
	// succ:  l004021B0
l004021B0:
	esp = fp
	esp = esp + 0x00000004
	bl = bl + cl
	SCZO = cond(bl)
	bl = bl + ch
	SCZO = cond(bl)
	bl = bl | ch
	SZO = cond(bl)
	C = false
	esi = eax
	bh = bh ^ ah
	SZO = cond(bh)
	C = false
	call fn004023FA (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = cs
	eax = __indw(dx)
	es_edi = Mem0[0xA724CEC8:segptr32]
	// succ:  l004021C5_thunk_fn004021CB
l004021C5_thunk_fn004021CB:
	call fn004021CB (retsize: 0;)
	return
	// succ:  fn004021B0_exit
fn004021B0_exit:


// fn004021CB
// Return size: 0
void fn004021CB()
fn004021CB_entry:
	// succ:  l004021CB
l004021CB:
	esp = fp
	Mem0[esp:word32] = esi
	v4 = ax
	ax = ax
	ax = v4
fn004021CB_exit:


// fn004021E6
// Return size: 0
void fn004021E6()
fn004021E6_entry:
	// succ:  l004021E6
l004021E6:
	esp = fp
	esp = esp + 0x00000004
	edx = edx + ebx
	SCZO = cond(edx)
	cl = bl
	dh = Mem0[esi:byte]
	bh = cl
	ecx = ecx + edi
	SCZO = cond(ecx)
	call fn004025BE (retsize: 4;)
	dh = 0xDA
	Mem0[edi:word32] = eax
	edi = edi + 0x00000004
	edx = edx - 0x00000001
	SZO = cond(edx)
	esp = esp + 0x00000004
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	edx = eax + 0x000000F8
	bl = bl + bh
	SCZO = cond(bl)
	bh = bh + dl
	SCZO = cond(bh)
	bh = dl
	bl = 0xB8
	edi = edi - ebx
	SCZO = cond(edi)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	call fn0040217A (retsize: 4;)
	bl = bl - 0x01
	SZO = cond(bl)
	gs = Mem0[esi + 0x648DE1A1:selector]
	// succ:  l0040221C_thunk_fn00402222
l0040221C_thunk_fn00402222:
	call fn00402222 (retsize: 0;)
	return
	// succ:  fn004021E6_exit
fn004021E6_exit:


// fn00402220
// Return size: 0
void fn00402220()
fn00402220_entry:
	// succ:  l00402220
l00402220:
	esp = fp
	esp = esp + 0x00000004
	call fn004021B0 (retsize: 4;)
	// succ:  l00402220_thunk_fn00402222 l00402232_thunk_fn00402237
l00402220_thunk_fn00402222:
	call fn00402222 (retsize: 0;)
	return
	// succ:  fn00402220_exit
l00402232_thunk_fn00402237:
	call fn00402237 (retsize: 0;)
	return
	// succ:  fn00402220_exit
fn00402220_exit:


// fn00402222
// Return size: 0
void fn00402222()
fn00402222_entry:
	// succ:  l00402222
l00402222:
	esp = fp
	al = al & 0x04
	SZO = cond(al)
	C = false
	bl = 0x8B
	bl = bl - dl
	SCZO = cond(bl)
	bl = cl
	bl = bl + ah
	SCZO = cond(bl)
	bl = bl + ah
	SCZO = cond(bl)
	bl = bh
	edi = edi + 0x00000001
	SZO = cond(edi)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	call fn004021B0 (retsize: 4;)
	goto l00402232_thunk_fn00402237
	// succ:  l00402232_thunk_fn00402237
l00402222:
	bl = 0x8B
	bl = bl - dl
	SCZO = cond(bl)
	bl = cl
	bl = bl + ah
	SCZO = cond(bl)
	bl = bl + ah
	SCZO = cond(bl)
	bl = bh
	edi = edi + 0x00000001
	SZO = cond(edi)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
l00402232_thunk_fn00402237:
	call fn00402237 (retsize: 0;)
	return
	// succ:  fn00402222_exit
fn00402222_exit:


// fn00402237
// Return size: 0
void fn00402237()
fn00402237_entry:
	// succ:  l00402237
l00402237:
	esp = fp
	branch ecx == 0x00000000 l00402237_thunk_fn004022B3
	goto l00402237_thunk_fn00402239
	// succ:  l00402237_thunk_fn00402239 l00402237_thunk_fn004022B3
l00402237:
	branch ecx == 0x00000000 l00402237_thunk_fn004022B3
	goto l00402237_thunk_fn00402239
	// succ:  l00402237_thunk_fn00402239 l00402237_thunk_fn004022B3
l00402237_thunk_fn00402239:
	call fn00402239 (retsize: 0;)
	return
	// succ:  fn00402237_exit l00402237_thunk_fn00402239
l00402237_thunk_fn00402239:
	call fn00402239 (retsize: 0;)
	return
	// succ:  fn00402237_exit
l00402237_thunk_fn00402239:
	call fn00402239 (retsize: 0;)
	return
	// succ:  fn00402237_exit
l00402237_thunk_fn004022B3:
	call fn004022B3 (retsize: 0;)
	return
	// succ:  fn00402237_exit
l00402237_thunk_fn004022B3:
	call fn004022B3 (retsize: 0;)
	return
	// succ:  fn00402237_exit
fn00402237_exit:


// fn00402239
// Return size: 0
void fn00402239()
fn00402239_entry:
	// succ:  l00402239
l00402239:
	eax = eax + 0x648DCCED
	SCZO = cond(eax)
	// succ:  l00402239_thunk_fn0040223E
l00402239_thunk_fn0040223E:
	call fn0040223E (retsize: 0;)
	return
	// succ:  fn00402239_exit
fn00402239_exit:


// fn0040223C
// Return size: 0
void fn0040223C()
fn0040223C_entry:
	// succ:  l0040223C
l0040223C:
	esp = fp
	esp = esp + 0x00000004
	// succ:  l0040223C_thunk_fn0040223E
l0040223C_thunk_fn0040223E:
	call fn0040223E (retsize: 0;)
	return
	// succ:  fn0040223C_exit
l00402250_thunk_fn00402256:
	call fn00402256 (retsize: 0;)
	return
	// succ:  fn0040223C_exit l00402250_thunk_fn00402256
l00402250_thunk_fn00402256:
	call fn00402256 (retsize: 0;)
	return
	// succ:  fn0040223C_exit
l00402250_thunk_fn004026C6:
	call fn004026C6 (retsize: 0;)
	return
	// succ:  fn0040223C_exit
fn0040223C_exit:


// fn0040223E
// Return size: 0
void fn0040223E()
fn0040223E_entry:
	// succ:  l0040223E
l0040223E:
	esp = fp
	al = al & 0x04
	SZO = cond(al)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bl = dl
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bl = bl | al
	SZO = cond(bl)
	C = false
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	bl = bl + bh
	SCZO = cond(bl)
	SCZO = cond(ecx - 0x9B39C455)
	branch Test(NE,Z) l00402250_thunk_fn004026C6
	// succ:  l00402250_thunk_fn00402256 l00402250_thunk_fn004026C6 l00402250_thunk_fn00402256 l00402250_thunk_fn004026C6
l0040223E:
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bl = dl
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bl = bl | al
	SZO = cond(bl)
	C = false
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	bl = bl + bh
	SCZO = cond(bl)
	SCZO = cond(ecx - 0x9B39C455)
	branch Test(NE,Z) l00402250_thunk_fn004026C6
l00402250_thunk_fn00402256:
	call fn00402256 (retsize: 0;)
	return
	// succ:  fn0040223E_exit
l00402250_thunk_fn004026C6:
	call fn004026C6 (retsize: 0;)
	return
	// succ:  fn0040223E_exit
fn0040223E_exit:


// fn00402256
// Return size: 0
void fn00402256()
fn00402256_entry:
	// succ:  l00402256
l00402256:
	call fn00402EAE (retsize: 4;)
	v4 = Mem0[esi + 0x048935B6:word32] - 0x24 - C
	Mem0[esi + 0x048935B6:word32] = v4
	SCZO = cond(v4)
	// succ:  l0040225B_thunk_fn00402262
l0040225B_thunk_fn00402262:
	call fn00402262 (retsize: 0;)
	return
	// succ:  fn00402256_exit
fn00402256_exit:


// fn0040225F
// Return size: 0
void fn0040225F()
fn0040225F_entry:
	// succ:  l0040225F
l0040225F:
	esp = fp
	Mem0[esp:word32] = eax
	// succ:  l0040225F_thunk_fn00402262
l0040225F_thunk_fn00402262:
	call fn00402262 (retsize: 0;)
	return
	// succ:  fn0040225F_exit
fn0040225F_exit:


// fn00402262
// Return size: 0
void fn00402262()
fn00402262_entry:
	// succ:  l00402262
l00402262:
	esp = fp
	bl = bl
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx - ebx
	SCZO = cond(ecx)
	edx = edx - 0x00000001
	SZO = cond(edx)
	goto l00402267_thunk_fn00402268
	// succ:  l00402267_thunk_fn00402268
l00402262:
	bl = bl
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx - ebx
	SCZO = cond(ecx)
	edx = edx - 0x00000001
	SZO = cond(edx)
	goto l00402267_thunk_fn00402268
	// succ:  l00402267_thunk_fn00402268
l00402267_thunk_fn00402268:
	call fn00402268 (retsize: 0;)
	return
	// succ:  fn00402262_exit
l00402267_thunk_fn00402268:
	call fn00402268 (retsize: 0;)
	return
	// succ:  fn00402262_exit
fn00402262_exit:


// fn00402268
// Return size: 0
void fn00402268()
fn00402268_entry:
	// succ:  l00402268
l00402268:
	esp = fp
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edi = 0x933EAC76
	call fn00402AAD (retsize: 4;)
	v8 = Mem0[eax + 0xBB6135D1:byte] + ch
	Mem0[eax + 0xBB6135D1:byte] = v8
	SCZO = cond(v8)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	SZO = cond(al & 0x87)
	C = false
	goto l0040227A_thunk_fn0040227C
	// succ:  l0040227A_thunk_fn0040227C
l00402268:
l0040227A_thunk_fn0040227C:
	call fn0040227C (retsize: 0;)
	return
	// succ:  fn00402268_exit
fn00402268_exit:


// fn0040227B
// Return size: 0
void fn0040227B()
fn0040227B_entry:
	// succ:  l0040227B
l0040227B:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = edx
	edx = v3
	// succ:  l0040227B_thunk_fn0040227C l0040228D_thunk_fn00402294
l0040227B_thunk_fn0040227C:
	call fn0040227C (retsize: 0;)
	return
	// succ:  fn0040227B_exit
l0040228D_thunk_fn00402294:
	call fn00402294 (retsize: 0;)
	return
	// succ:  fn0040227B_exit
fn0040227B_exit:


// fn0040227C
// Return size: 0
void fn0040227C()
fn0040227C_entry:
	// succ:  l0040227C
l0040227C:
	esp = fp
	al = al + 0x24 + C
	SCZO = cond(al)
	ebx = ebx
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi - 0x00000001
	SZO = cond(esi)
	dh = dh + bl
	SCZO = cond(dh)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	call fn00402B67 (retsize: 4;)
	C = __daa(al, &al)
	Mem0[esi + 0x1C89BC38 + esi * 0x00000002:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	goto l0040228D_thunk_fn00402294
	// succ:  l0040228D_thunk_fn00402294
l0040227C:
	ebx = ebx
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi - 0x00000001
	SZO = cond(esi)
	dh = dh + bl
	SCZO = cond(dh)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	call fn00402B67 (retsize: 4;)
	C = __daa(al, &al)
	Mem0[esi + 0x1C89BC38 + esi * 0x00000002:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
l0040228D_thunk_fn00402294:
	call fn00402294 (retsize: 0;)
	return
	// succ:  fn0040227C_exit
fn0040227C_exit:


// fn00402292
// Return size: 0
void fn00402292()
fn00402292_entry:
	// succ:  l00402292
l00402292:
	esp = fp
	Mem0[esp:word32] = ebx
	call fn00402A08 (retsize: 4;)
	// succ:  l00402292_thunk_fn00402294 l004022A0_thunk_fn004022A5
l00402292_thunk_fn00402294:
	call fn00402294 (retsize: 0;)
	return
	// succ:  fn00402292_exit
l004022A0_thunk_fn004022A5:
	call fn004022A5 (retsize: 0;)
	return
	// succ:  fn00402292_exit
fn00402292_exit:


// fn00402294
// Return size: 0
void fn00402294()
fn00402294_entry:
	// succ:  l00402294
l00402294:
	esp = fp
	al = al & 0x66
	SZO = cond(al)
	C = false
	edx = edx
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ebx = ebx + eax
	SCZO = cond(ebx)
	ebx = edi
	bl = bl - ch
	SCZO = cond(bl)
	call fn00402A08 (retsize: 4;)
	goto l004022A0_thunk_fn004022A5
	// succ:  l004022A0_thunk_fn004022A5
l00402294:
	dx = dx
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ebx = ebx + eax
	SCZO = cond(ebx)
	ebx = edi
	bl = bl - ch
	SCZO = cond(bl)
l004022A0_thunk_fn004022A5:
	call fn004022A5 (retsize: 0;)
	return
	// succ:  fn00402294_exit
fn00402294_exit:


// fn004022A5
// Return size: 0
void fn004022A5()
fn004022A5_entry:
	// succ:  l004022A5
l004022A5:
	esp = fp
	v3 = eax
	eax = esp
	esp = v3
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	ah = FPUF
	al = __inb(0x8D)
	goto l004022A8_thunk_fn004022AA
	// succ:  l004022A8_thunk_fn004022AA
l004022A5:
	v9 = eax
	eax = esp
	esp = v9
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	ah = FPUF
	al = __inb(0x8D)
	goto l004022A8_thunk_fn004022AA
	// succ:  l004022A8_thunk_fn004022AA
l004022A8_thunk_fn004022AA:
	call fn004022AA (retsize: 0;)
	return
	// succ:  fn004022A5_exit
l004022A8_thunk_fn004022AA:
	call fn004022AA (retsize: 0;)
	return
	// succ:  fn004022A5_exit
fn004022A5_exit:


// fn004022A9
// Return size: 0
void fn004022A9()
fn004022A9_entry:
	// succ:  l004022A9
l004022A9:
	esp = fp
	esp = esp + 0x00000004
	call fn00402B9B (retsize: 4;)
	// succ:  l004022A9_thunk_fn004022AA l004022BB_thunk_fn004022C0
l004022A9_thunk_fn004022AA:
	call fn004022AA (retsize: 0;)
	return
	// succ:  fn004022A9_exit
l004022BB_thunk_fn004022C0:
	call fn004022C0 (retsize: 0;)
	return
	// succ:  fn004022A9_exit
fn004022A9_exit:


// fn004022AA
// Return size: 0
void fn004022AA()
fn004022AA_entry:
	// succ:  l004022AA
l004022AA:
	esp = fp
	al = al & 0x04
	SZO = cond(al)
	C = false
	edi = edi + edx
	SCZO = cond(edi)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	esi = eax
	goto l004022B1_thunk_fn004022B3
	// succ:  l004022B1_thunk_fn004022B3
l004022AA:
	edi = edi + edx
	SCZO = cond(edi)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	esi = eax
	bh = bh | ch
	SZO = cond(bh)
	C = false
	bl = bl | al
	SZO = cond(bl)
	C = false
	bh = bh + ch
	SCZO = cond(bh)
	ecx = ecx | edx
	SZO = cond(ecx)
	C = false
l004022B1_thunk_fn004022B3:
	call fn004022B3 (retsize: 0;)
	return
	// succ:  fn004022AA_exit
fn004022AA_exit:


// fn004022B3
// Return size: 0
void fn004022B3()
fn004022B3_entry:
	// succ:  l004022B3
l004022B3:
	esp = fp
	bh = bh | ch
	SZO = cond(bh)
	C = false
	bl = bl | al
	SZO = cond(bl)
	C = false
	bh = bh + ch
	SCZO = cond(bh)
	ecx = ecx | edx
	SZO = cond(ecx)
	C = false
	call fn00402B9B (retsize: 4;)
	goto l004022BB_thunk_fn004022C0
	// succ:  l004022BB_thunk_fn004022C0
l004022B3:
	bh = bh | ch
	SZO = cond(bh)
	C = false
	bl = bl | al
	SZO = cond(bl)
	C = false
	bh = bh + ch
	SCZO = cond(bh)
	ecx = ecx | edx
	SZO = cond(ecx)
	C = false
	call fn00402B9B (retsize: 4;)
	goto l004022BB_thunk_fn004022C0
	// succ:  l004022BB_thunk_fn004022C0
l004022BB_thunk_fn004022C0:
	call fn004022C0 (retsize: 0;)
	return
	// succ:  fn004022B3_exit
l004022BB_thunk_fn004022C0:
	call fn004022C0 (retsize: 0;)
	return
	// succ:  fn004022B3_exit
fn004022B3_exit:


// fn004022C0
// Return size: 0
void fn004022C0()
fn004022C0_entry:
	// succ:  l004022C0
l004022C0:
	esp = fp
	ax = __aam(al)
	branch Test(GT,SZO) l004022C3_thunk_fn00402268
	goto l004022C3_thunk_fn004022C5
	// succ:  l004022C3_thunk_fn004022C5 l004022C3_thunk_fn00402268
l004022C0:
	ax = __aam(al)
	branch Test(GT,SZO) l004022C3_thunk_fn00402268
	// succ:  l004022C2_thunk_fn004022C5 l004022C3_thunk_fn00402268
l004022C2_thunk_fn004022C5:
	call fn004022C5 (retsize: 0;)
	return
	// succ:  fn004022C0_exit
l004022C3_thunk_fn00402268:
	call fn00402268 (retsize: 0;)
	return
	// succ:  fn004022C0_exit
l004022C3_thunk_fn00402268:
	call fn00402268 (retsize: 0;)
	return
	// succ:  fn004022C0_exit
l004022C3_thunk_fn004022C5:
	call fn004022C5 (retsize: 0;)
	return
	// succ:  fn004022C0_exit l004022C3_thunk_fn004022C5
l004022C3_thunk_fn004022C5:
	call fn004022C5 (retsize: 0;)
	return
	// succ:  fn004022C0_exit
fn004022C0_exit:


// fn004022C5
// Return size: 0
void fn004022C5()
fn004022C5_entry:
	// succ:  l004022C5
l004022C5:
	edi = edi - 0x00000001
	SZO = cond(edi)
fn004022C5_exit:


// fn004022C7
// Return size: 0
void fn004022C7()
fn004022C7_entry:
	// succ:  l004022C7
l004022C7:
	esp = fp
	Mem0[esp - 0x0000001C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = eax
	ch = ch | al
	SZO = cond(ch)
	C = false
	cl = cl ^ ch
	SZO = cond(cl)
	C = false
	ecx = ecx | edx
	SZO = cond(ecx)
	C = false
	bh = 0x01
	bl = bl - dl
	SCZO = cond(bl)
	bh = bh | ah
	SZO = cond(bh)
	C = false
	ch = ch | bl
	SZO = cond(ch)
	C = false
	ebx = ebx - esi
	SCZO = cond(ebx)
	call fn00402082 (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	v19 = Mem0[eax + 0x8979EECB:byte] - dh - C
	Mem0[eax + 0x8979EECB:byte] = v19
	SCZO = cond(v19)
	al = al - 0x24 - C
	SCZO = cond(al)
fn004022C7_exit:


// fn004022ED
// Return size: 0
void fn004022ED()
fn004022ED_entry:
	// succ:  l004022ED
l004022ED:
	esp = fp
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi - eax
	SCZO = cond(edi)
	edi = edi - ebx
	SCZO = cond(edi)
	bl = 0x18
	ebx = ebx ^ edi
	SZO = cond(ebx)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	call fn00402585 (retsize: 4;)
	ss = Mem0[esp:selector]
	esp = esp + 0x00000002
	xmm0 = __pshufd(xmm0, xmm5, 0xD7)
	cl = 0xE7
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	goto l00402303_thunk_fn00402304
	// succ:  l00402303_thunk_fn00402304
l004022ED:
l00402303_thunk_fn00402304:
	call fn00402304 (retsize: 0;)
	return
	// succ:  fn004022ED_exit
fn004022ED_exit:


// fn00402304
// Return size: 0
void fn00402304()
fn00402304_entry:
	// succ:  l00402304
l00402304:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = esi
	esi = v3
	edi = edi
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = (word32) al
	edi = edi ^ eax
	SZO = cond(edi)
	C = false
	bl = bl ^ al
	SZO = cond(bl)
	C = false
	esi = esi - ecx
	SCZO = cond(esi)
	esi = esi ^ ecx
	SZO = cond(esi)
	C = false
	ebx = eax
	esi = esi | edi
	SZO = cond(esi)
	C = false
	call fn00402716 (retsize: 4;)
	ax = __aam(al)
	v17 = Mem0[0x0235306E:real64] / rArg0
	Mem0[0x0235306E:real64] = v17
	// succ:  l00402320_thunk_fn00402326
l00402320_thunk_fn00402326:
	call fn00402326 (retsize: 0;)
	return
	// succ:  fn00402304_exit
fn00402304_exit:


// fn00402326
// Return size: 0
void fn00402326()
fn00402326_entry:
	// succ:  l00402326
l00402326:
	esp = fp
	Mem0[esp:word32] = esi
	v4 = eax
	eax = eax
	eax = v4
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	dl = dh
	bl = bl + ch
	SCZO = cond(bl)
	ecx = ecx ^ edi
	SZO = cond(ecx)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bh = bh ^ dl
	SZO = cond(bh)
	C = false
	cl = 0xF1
	call fn0040297A (retsize: 4;)
	C = __aaa(al, ah, &al, &ah)
	SZO = cond(Mem0[eax:word32] & ecx)
	C = false
	branch Test(EQ,Z) l00402340_thunk_fn004022ED
	goto l00402342
	// succ:  l00402342 l00402340_thunk_fn004022ED
l00402340_thunk_fn004022ED:
	call fn004022ED (retsize: 0;)
	return
	// succ:  fn00402326_exit
l00402342:
	D = false
	v22 = eax
	eax = ebp
	ebp = v22
	cl = cl & Mem0[edi + 0x02CC2444:byte]
	SZO = cond(cl)
	C = false
	C = true
	edi = edi - esi
	SCZO = cond(edi)
	esi = eax
	edi = edi ^ eax
	SZO = cond(edi)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	bl = bl + al
	SCZO = cond(bl)
	bl = bl + ch
	SCZO = cond(bl)
	bl = dh
	bl = bl | ah
	SZO = cond(bl)
	C = false
	call fn004028E0 (retsize: 4;)
	v24 = Mem0[ebp + 0x00000056:byte] ^ 0x72
	Mem0[ebp + 0x00000056:byte] = v24
	SZO = cond(Mem0[ebp + 0x00000056:byte])
	C = false
fn00402326_exit:


// fn00402345
// Return size: 0
void fn00402345()
fn00402345_entry:
	// succ:  l00402345
l00402345:
	esp = fp
	Mem0[esp - 0x00000034:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh + cl
	SCZO = cond(bh)
	edi = edi - esi
	SCZO = cond(edi)
	esi = eax
	edi = edi ^ eax
	SZO = cond(edi)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	bl = bl + al
	SCZO = cond(bl)
	bl = bl + ch
	SCZO = cond(bl)
	bl = dh
	bl = bl | ah
	SZO = cond(bl)
	C = false
	call fn004028E0 (retsize: 4;)
	v17 = Mem0[ebp + 0x00000056:byte] ^ 0x72
	Mem0[ebp + 0x00000056:byte] = v17
	SZO = cond(Mem0[ebp + 0x00000056:byte])
	C = false
fn00402345_exit:


// fn00402364
// Return size: 0
void fn00402364()
fn00402364_entry:
	// succ:  l00402364
l00402364:
	esp = fp
	Mem0[esp - 0x0000002C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	cl = 0x5F
	ch = al
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ch = ch | dl
	SZO = cond(ch)
	C = false
	dh = 0x81
	call fn00402A93 (retsize: 4;)
	Mem0[edx:word16] = ss
	SZO = cond(ebx & ebp)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	esi = eax
	// succ:  l0040237C_thunk_fn0040237E
l0040237C_thunk_fn0040237E:
	call fn0040237E (retsize: 0;)
	return
	// succ:  fn00402364_exit
fn00402364_exit:


// fn0040237E
// Return size: 0
void fn0040237E()
fn0040237E_entry:
	// succ:  l0040237E
l0040237E:
	esp = fp
	esp = esp + 0x00000004
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
	ch = ch ^ dl
	SZO = cond(ch)
	C = false
	eax = eax + 0x0000041B
	SCZO = cond(eax)
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	ch = bh
	edi = edi | edx
	SZO = cond(edi)
	C = false
	edi = edi | ecx
	SZO = cond(edi)
	C = false
	dh = cl
	call fn00402123 (retsize: 4;)
	C = !C
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = 0xEB37F164
	eax = eax - 0xE9241489 - C
	SCZO = cond(eax)
	// succ:  l004023A2_thunk_fn004023A7
l004023A2_thunk_fn004023A7:
	call fn004023A7 (retsize: 0;)
	return
	// succ:  fn0040237E_exit
fn0040237E_exit:


// fn004023A3
// Return size: 0
void fn004023A3()
fn004023A3_entry:
	// succ:  l004023A3
l004023A3:
	esp = fp
	Mem0[esp:word32] = edx
fn004023A3_exit:


// fn004023A7
// Return size: 0
void fn004023A7()
fn004023A7_entry:
	// succ:  l004023A7
l004023A7:
	esp = fp
	v5 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v5
	SCZO = cond(v5)
	v7 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v7
	SCZO = cond(v7)
	goto l004023A9_thunk_fn004023AB
	// succ:  l004023A9_thunk_fn004023AB
l004023A7:
	call fn004023AB (retsize: 0;)
	return
	// succ:  l004023A7_thunk_fn004023AB fn004023A7_exit
l004023A7_thunk_fn004023AB:
	call fn004023AB (retsize: 0;)
	return
	// succ:  fn004023A7_exit
l004023A9_thunk_fn004023AB:
	call fn004023AB (retsize: 0;)
	return
	// succ:  fn004023A7_exit
fn004023A7_exit:


// fn004023AB
// Return size: 0
void fn004023AB()
fn004023AB_entry:
	// succ:  l004023AB
l004023AB:
	eax = eax
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = bl - ch
	SCZO = cond(bl)
	edx = edx - 0x00000001
	SZO = cond(edx)
	edi = esi
	call fn00402CCC (retsize: 4;)
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = edi + 0x0487ACE6
	// succ:  l004023B9_thunk_fn004023BF
l004023B9_thunk_fn004023BF:
	call fn004023BF (retsize: 0;)
	return
	// succ:  fn004023AB_exit
fn004023AB_exit:


// fn004023BD
// Return size: 0
void fn004023BD()
fn004023BD_entry:
	// succ:  l004023BD
l004023BD:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = eax
	eax = v3
	// succ:  l004023BD_thunk_fn004023BF
l004023BD_thunk_fn004023BF:
	call fn004023BF (retsize: 0;)
	return
	// succ:  fn004023BD_exit
fn004023BD_exit:


// fn004023BF
// Return size: 0
void fn004023BF()
fn004023BF_entry:
	// succ:  l004023BF
l004023BF:
	esp = fp
	al = al & 0x66
	SZO = cond(al)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	bx = Mem0[esp:word16]
	esp = esp + 0x00000002
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx + 0x00000001
	SZO = cond(edx)
	ch = ch | dl
	SZO = cond(ch)
	C = false
	esi = eax
	ebx = ebx | eax
	SZO = cond(ebx)
	C = false
	bh = bh ^ dh
	SZO = cond(bh)
	C = false
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	call fn004027AF (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	v16 = eax
	eax = ebp
	ebp = v16
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	C = !C
	edi = edi - 0x00000001
	SZO = cond(edi)
	goto l004023D9_thunk_fn004023DA
	// succ:  l004023D9_thunk_fn004023DA
l004023BF:
	esp = esp - 0x00000002
	Mem0[esp:word16] = bx
	bx = Mem0[esp:word16]
	esp = esp + 0x00000002
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx + 0x00000001
	SZO = cond(edx)
	ch = ch | dl
	SZO = cond(ch)
	C = false
	esi = eax
	ebx = ebx | eax
	SZO = cond(ebx)
	C = false
	bh = bh ^ dh
	SZO = cond(bh)
	C = false
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	call fn004027AF (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	v18 = eax
	eax = ebp
	ebp = v18
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	C = !C
	edi = edi - 0x00000001
	SZO = cond(edi)
	goto l004023D9_thunk_fn004023DA
	// succ:  l004023D9_thunk_fn004023DA
l004023D9_thunk_fn004023DA:
	call fn004023DA (retsize: 0;)
	return
	// succ:  fn004023BF_exit
l004023D9_thunk_fn004023DA:
	call fn004023DA (retsize: 0;)
	return
	// succ:  fn004023BF_exit
fn004023BF_exit:


// fn004023DA
// Return size: 0
void fn004023DA()
fn004023DA_entry:
	// succ:  l004023DA
l004023DA:
	esp = fp
	esp = esp + 0x00000004
	ecx = ecx ^ eax
	SZO = cond(ecx)
	C = false
	edi = edi - eax
	SCZO = cond(edi)
	Mem0[esp - 0x00000008:word32] = eax
	bl = bl ^ ah
	SZO = cond(bl)
	C = false
	edi = esi
	ecx = edi
	dl = dl ^ bh
	SZO = cond(dl)
	C = false
	ch = -ch
	SCZO = cond(ch)
	C = ch == 0x00
	call fn00402E27 (retsize: 4;)
	branch Test(SG,S) l004023F5_thunk_fn0040243A
	goto l004023F7
	// succ:  l004023F7 l004023F5_thunk_fn0040243A
l004023F5_thunk_fn0040243A:
	call fn0040243A (retsize: 0;)
	return
	// succ:  fn004023DA_exit
l004023F7:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esp
	bh = 0xE2
	// succ:  l004023F8_thunk_fn004023FA
l004023F8_thunk_fn004023FA:
	call fn004023FA (retsize: 0;)
	return
	// succ:  fn004023DA_exit
fn004023DA_exit:


// fn004023FA
// Return size: 0
void fn004023FA()
fn004023FA_entry:
	// succ:  l004023FA
l004023FA:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = edi
	edi = v3
	bh = bh
	bx = ebx
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax + 0x0032FD94
	SCZO = cond(eax)
	bh = bh ^ bl
	SZO = cond(bh)
	C = false
	bl = bl - al
	SCZO = cond(bl)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	call fn00402755 (retsize: 4;)
	v16 = Mem0[ecx - 0x00000078:byte] & ah
	Mem0[ecx - 0x00000078:byte] = v16
	SZO = cond(Mem0[ecx - 0x00000078:byte])
	C = false
	SCZO = cond(eax - Mem0[edi:word32])
	edi = edi + 0x00000004
	__outb(0x89, al)
	// succ:  l00402418_thunk_fn0040241A
l00402418_thunk_fn0040241A:
	call fn0040241A (retsize: 0;)
	return
	// succ:  fn004023FA_exit
fn004023FA_exit:


// fn00402419
// Return size: 0
void fn00402419()
fn00402419_entry:
	// succ:  l00402419
l00402419:
	esp = fp
	Mem0[esp:word32] = ecx
fn00402419_exit:


// fn0040241A
// Return size: 0
void fn0040241A()
fn0040241A_entry:
	// succ:  l0040241A
l0040241A:
	esp = fp
	al = al | 0x24
	SZO = cond(al)
	C = false
l0040241A:
fn0040241A_exit:


// fn0040243A
// Return size: 0
void fn0040243A()
fn0040243A_entry:
	// succ:  l0040243A
l0040243A:
	esp = fp
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bh = bh + dh
	SCZO = cond(bh)
	esp = esp - 0x00000004
	Mem0[esp:word32] = es
	goto l0040243D_thunk_fn0040243E
	// succ:  l0040243D_thunk_fn0040243E
l0040243A:
l0040243D_thunk_fn0040243E:
	call fn0040243E (retsize: 0;)
	return
	// succ:  fn0040243A_exit
fn0040243A_exit:


// fn0040243E
// Return size: 0
void fn0040243E()
fn0040243E_entry:
	// succ:  l0040243E
l0040243E:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = esi
	esi = v3
fn0040243E_exit:


// fn0040247B
// Return size: 0
void fn0040247B()
fn0040247B_entry:
	// succ:  l0040247B
l0040247B:
	esp = fp
	esp = esp + 0x00000004
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	esi = esi - ecx
	SCZO = cond(esi)
	eax = eax + ecx
	SCZO = cond(eax)
	esi = esi - ebx
	SCZO = cond(esi)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
fn0040247B_exit:


// fn00402498
// Return size: 0
void fn00402498()
fn00402498_entry:
	// succ:  l00402498
l00402498:
	esp = fp
	Mem0[esp - 0x00000020:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = 0x15
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ch = bl
	bl = bl ^ bh
	SZO = cond(bl)
	C = false
	ecx = ecx + edx
	SCZO = cond(ecx)
	call fn00402326 (retsize: 4;)
	__outb(dx, al)
	esi = esi - ebx - C
	SCZO = cond(esi)
	eax = __indw(dx)
	// succ:  l004024AD_thunk_fn004024AE
l004024AD_thunk_fn004024AE:
	call fn004024AE (retsize: 0;)
	return
	// succ:  fn00402498_exit
fn00402498_exit:


// fn004024AE
// Return size: 0
void fn004024AE()
fn004024AE_entry:
	// succ:  l004024AE
l004024AE:
	esp = fp
	Mem0[esp - 0x00000020:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ch = dl
	bh = bh + dh
	SCZO = cond(bh)
	bl = bl + ch
	SCZO = cond(bl)
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	bh = bh ^ al
	SZO = cond(bh)
	C = false
	ecx = esi
	call fn00402143 (retsize: 4;)
	edi = edi - eax - C
	SCZO = cond(edi)
	es = Mem0[esp:selector]
	esp = esp + 0x00000002
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	cl = Mem0[fs:ecx + 0x51662434:byte]
	cx = Mem0[esp:word16]
	esp = esp + 0x00000002
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bh = dh
	edx = edx + ecx
	SCZO = cond(edx)
	call fn00402AF9 (retsize: 4;)
	// succ:  l004024D6_thunk_fn004024DB
l004024D6_thunk_fn004024DB:
	call fn004024DB (retsize: 0;)
	return
	// succ:  fn004024AE_exit
fn004024AE_exit:


// fn004024C9
// Return size: 0
void fn004024C9()
fn004024C9_entry:
	// succ:  l004024C9
l004024C9:
	esp = fp
	Mem0[esp:word32] = esi
	esp = esp - 0x00000002
	Mem0[esp:word16] = cx
	cx = Mem0[esp:word16]
	esp = esp + 0x00000002
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bh = dh
	edx = edx + ecx
	SCZO = cond(edx)
	call fn00402AF9 (retsize: 4;)
	// succ:  l004024D6_thunk_fn004024DB
l004024D6_thunk_fn004024DB:
	call fn004024DB (retsize: 0;)
	return
	// succ:  fn004024C9_exit
fn004024C9_exit:


// fn004024DB
// Return size: 0
void fn004024DB()
fn004024DB_entry:
	// succ:  l004024DB
l004024DB:
	esp = fp
	ecx = 0xE4894B58
	v6 = Mem0[edi + 0x24648DCB:word32] | esi
	Mem0[edi + 0x24648DCB:word32] = v6
	SZO = cond(Mem0[edi + 0x24648DCB:word32])
	C = false
	goto l004024E0_thunk_fn004024E6
	// succ:  l004024E0_thunk_fn004024E6
l004024DB:
	ecx = 0xE4894B58
	v9 = Mem0[edi + 0x24648DCB:word32] | esi
	Mem0[edi + 0x24648DCB:word32] = v9
	SZO = cond(Mem0[edi + 0x24648DCB:word32])
	C = false
	goto l004024E0_thunk_fn004024E6
	// succ:  l004024E0_thunk_fn004024E6
l004024E0_thunk_fn004024E6:
	call fn004024E6 (retsize: 0;)
	return
	// succ:  fn004024DB_exit
l004024E0_thunk_fn004024E6:
	call fn004024E6 (retsize: 0;)
	return
	// succ:  fn004024DB_exit
fn004024DB_exit:


// fn004024E3
// Return size: 0
void fn004024E3()
fn004024E3_entry:
	// succ:  l004024E3
l004024E3:
	esp = fp
	esp = esp + 0x00000004
	call fn00402773 (retsize: 4;)
	// succ:  l004024E3_thunk_fn004024E6 l0040250E_thunk_fn00402513
l004024E3_thunk_fn004024E6:
	call fn004024E6 (retsize: 0;)
	return
	// succ:  fn004024E3_exit
l0040250E_thunk_fn00402513:
	call fn00402513 (retsize: 0;)
	return
	// succ:  fn004024E3_exit
fn004024E3_exit:


// fn004024E6
// Return size: 0
void fn004024E6()
fn004024E6_entry:
	// succ:  l004024E6
l004024E6:
	esp = fp
	al = al + 0x81
	SCZO = cond(al)
	esi = -esi
	SCZO = cond(esi)
	C = esi == 0x00000000
	al = Mem0[0xF902933E:byte]
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bh = 0x4A
	dh = dh ^ ah
	SZO = cond(dh)
	C = false
	call fn004026B6 (retsize: 4;)
	dh = dh + 0xDA + C
	SCZO = cond(dh)
	C = true
	esp = esp + 0x00000004
	bl = bl | dl
	SZO = cond(bl)
	C = false
	bh = ch
	bl = bl | bh
	SZO = cond(bl)
	C = false
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	edi = edi + ebx
	SCZO = cond(edi)
	bh = bh | ah
	SZO = cond(bh)
	C = false
	call fn00402773 (retsize: 4;)
	goto l0040250E_thunk_fn00402513
	// succ:  l0040250E_thunk_fn00402513
l004024E6:
	edi = edi ^ 0x933EA0DE
	SZO = cond(edi)
	C = false
	bh = bh + cl
	SCZO = cond(bh)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bh = 0x4A
	dh = dh ^ ah
	SZO = cond(dh)
	C = false
	call fn004026B6 (retsize: 4;)
	dh = dh + 0xDA + C
	SCZO = cond(dh)
	C = true
	esp = esp + 0x00000004
	bl = bl | dl
	SZO = cond(bl)
	C = false
	bh = ch
	bl = bl | bh
	SZO = cond(bl)
	C = false
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	edi = edi + ebx
	SCZO = cond(edi)
	bh = bh | ah
	SZO = cond(bh)
	C = false
l0040250E_thunk_fn00402513:
	call fn00402513 (retsize: 0;)
	return
	// succ:  fn004024E6_exit
fn004024E6_exit:


// fn004024FE
// Return size: 0
void fn004024FE()
fn004024FE_entry:
	// succ:  l004024FE
l004024FE:
	esp = fp
	esp = esp + 0x00000004
	bl = bl | dl
	SZO = cond(bl)
	C = false
	bh = ch
	bl = bl | bh
	SZO = cond(bl)
	C = false
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	edi = edi + ebx
	SCZO = cond(edi)
	bh = bh | ah
	SZO = cond(bh)
	C = false
	call fn00402773 (retsize: 4;)
	// succ:  l0040250E_thunk_fn00402513
l0040250E_thunk_fn00402513:
	call fn00402513 (retsize: 0;)
	return
	// succ:  fn004024FE_exit
fn004024FE_exit:


// fn00402513
// Return size: 0
void fn00402513()
fn00402513_entry:
	// succ:  l00402513
l00402513:
	esp = fp
	rArg0 = rArg0 / (real64) Mem0[edx + 0x448F0CCF:word32]
	goto l00402513_thunk_fn00402519
	// succ:  l00402513_thunk_fn00402519
l00402513:
	rArg0 = rArg0 / (real64) Mem0[edx + 0x448F0CCF:word32]
	goto l00402513_thunk_fn00402519
	// succ:  l00402513_thunk_fn00402519
l00402513_thunk_fn00402519:
	call fn00402519 (retsize: 0;)
	return
	// succ:  fn00402513_exit
l00402513_thunk_fn00402519:
	call fn00402519 (retsize: 0;)
	return
	// succ:  fn00402513_exit
fn00402513_exit:


// fn00402517
// Return size: 0
void fn00402517()
fn00402517_entry:
	// succ:  l00402517
l00402517:
	esp = fp
	Mem0[esp - 0x0000001C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	call fn0040254E (retsize: 4;)
	// succ:  l00402517_thunk_fn00402519 l00402529_thunk_fn0040252E
l00402517_thunk_fn00402519:
	call fn00402519 (retsize: 0;)
	return
	// succ:  fn00402517_exit
l00402529_thunk_fn0040252E:
	call fn0040252E (retsize: 0;)
	return
	// succ:  fn00402517_exit
fn00402517_exit:


// fn00402519
// Return size: 0
void fn00402519()
fn00402519_entry:
	// succ:  l00402519
l00402519:
	esp = fp
	al = al & 0xE4
	SZO = cond(al)
	C = false
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	bl = bl ^ al
	SZO = cond(bl)
	C = false
	bl = bl ^ ch
	SZO = cond(bl)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	al = 0x05
	dh = 0x5B
	eax = eax | ecx
	SZO = cond(eax)
	C = false
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	call fn0040254E (retsize: 4;)
	goto l00402529_thunk_fn0040252E
	// succ:  l00402529_thunk_fn0040252E
l00402519:
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	bl = bl ^ al
	SZO = cond(bl)
	C = false
	bl = bl ^ ch
	SZO = cond(bl)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	al = 0x05
	dh = 0x5B
	eax = eax | ecx
	SZO = cond(eax)
	C = false
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
l00402529_thunk_fn0040252E:
	call fn0040252E (retsize: 0;)
	return
	// succ:  fn00402519_exit
fn00402519_exit:


// fn0040252E
// Return size: 0
void fn0040252E()
fn0040252E_entry:
	// succ:  l0040252E
l0040252E:
	esp = fp
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	v4 = eax
	eax = ebx
	ebx = v4
l0040252E:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	v7 = eax
	eax = ebx
	ebx = v7
fn0040252E_exit:


// fn00402535
// Return size: 0
void fn00402535()
fn00402535_entry:
	// succ:  l00402535
l00402535:
	esp = fp
	Mem0[esp - 0x00000010:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	al = cl
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	eax = eax + edi
	SCZO = cond(eax)
	ecx = ecx << 0x0000000F
	SCZO = cond(ecx)
	bh = bh - dl
	SCZO = cond(bh)
	call fn00402CB4 (retsize: 4;)
	SZO = cond(eax & 0x666CE46C)
	C = false
	// succ:  l00402549_thunk_fn0040254E
l00402549_thunk_fn0040254E:
	call fn0040254E (retsize: 0;)
	return
	// succ:  fn00402535_exit
fn00402535_exit:


// fn0040254E
// Return size: 0
void fn0040254E()
fn0040254E_entry:
	// succ:  l0040254E
l0040254E:
	esp = fp
	Mem0[esp - 0x0000001C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	dl = 0x53
	dh = dh | ah
	SZO = cond(dh)
	C = false
	esi = esi - edi
	SCZO = cond(esi)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	edx = edx + edi
	SCZO = cond(edx)
	call fn004026D6 (retsize: 4;)
fn0040254E_exit:


// fn00402585
// Return size: 0
void fn00402585()
fn00402585_entry:
	// succ:  l00402585
l00402585:
	esp = fp
	Mem0[esp:word32] = ebx
fn00402585_exit:


// fn0040259F
// Return size: 0
void fn0040259F()
fn0040259F_entry:
	// succ:  l0040259F
l0040259F:
	esp = fp
	Mem0[esp - 0x00000028:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	eax = eax >>u 0x00000010
	SCZO = cond(eax)
	esi = edi
	edi = edi - esi
	SCZO = cond(edi)
	esi = esi - ecx
	SCZO = cond(esi)
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	call fn004025F9 (retsize: 4;)
	SCZO = cond(Mem0[edi + 0x45803A0C:word32] - esp)
	esi = 0x24448F86
	// succ:  l004025BC_thunk_fn004025C1
l004025BC_thunk_fn004025C1:
	call fn004025C1 (retsize: 0;)
	return
	// succ:  fn0040259F_exit
fn0040259F_exit:


// fn004025BE
// Return size: 0
void fn004025BE()
fn004025BE_entry:
	// succ:  l004025BE
l004025BE:
	esp = fp
	Mem0[esp - 0x00000014:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l004025BE_thunk_fn004025C1
l004025BE_thunk_fn004025C1:
	call fn004025C1 (retsize: 0;)
	return
	// succ:  fn004025BE_exit
fn004025BE_exit:


// fn004025C1
// Return size: 0
void fn004025C1()
fn004025C1_entry:
	// succ:  l004025C1
l004025C1:
	esp = fp
	al = __inb(dx)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	ecx = edi
	ecx = ecx + edi
	SCZO = cond(ecx)
	cl = cl | ah
	SZO = cond(cl)
	C = false
	ebx = ebx - esi
	SCZO = cond(ebx)
	ebx = ecx
	ch = 0x46
	ch = ch ^ dh
	SZO = cond(ch)
	C = false
	call fn00402E97 (retsize: 4;)
l004025C1:
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	ecx = edi
	ecx = ecx + edi
	SCZO = cond(ecx)
	cl = cl | ah
	SZO = cond(cl)
	C = false
	ebx = ebx - esi
	SCZO = cond(ebx)
	ebx = ecx
	ch = 0x46
	ch = ch ^ dh
	SZO = cond(ch)
	C = false
	call fn00402E97 (retsize: 4;)
fn004025C1_exit:


// fn004025DD
// Return size: 0
void fn004025DD()
fn004025DD_entry:
	// succ:  l004025DD
l004025DD:
	esp = fp
	esp = esp + 0x00000004
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	cl = cl + bl
	SCZO = cond(cl)
	dl = 0x03
	bh = bh - cl
	SCZO = cond(bh)
	edi = edi + 0x00000001
	SZO = cond(edi)
	cl = 0xCF
	edx = edx - 0x00000001
	SZO = cond(edx)
	bl = bl ^ ch
	SZO = cond(bl)
	C = false
	cl = cl + dl
	SCZO = cond(cl)
	call fn0040237E (retsize: 4;)
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
fn004025DD_exit:


// fn004025F9
// Return size: 0
void fn004025F9()
fn004025F9_entry:
	// succ:  l004025F9
l004025F9:
	esp = fp
	esp = esp + 0x00000004
	edi = edi + 0x00000001
	SZO = cond(edi)
	esi = edi
	eax = eax + edx
	SCZO = cond(eax)
	edi = edi + eax
	SCZO = cond(edi)
	esi = esi - edx
	SCZO = cond(esi)
	call fn00402B49 (retsize: 4;)
	esp = 0xF25521F8
fn004025F9_exit:


// fn00402611
// Return size: 0
void fn00402611()
fn00402611_entry:
	// succ:  l00402611
l00402611:
	esp = fp
	Mem0[esp - 0x00000010:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ch = dh
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	ebx = ebx - eax
	SCZO = cond(ebx)
	dh = dh + bh
	SCZO = cond(dh)
	edi = edi | esi
	SZO = cond(edi)
	C = false
	bl = bl + ch
	SCZO = cond(bl)
	edi = ecx
	call fn00402A5E (retsize: 4;)
	edx_eax = (int64) eax
	Mem0[esi + 0x448F2983:byte] = Test(SG,S)
	al = al & 0xE0
	SZO = cond(al)
	C = false
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	ebx = ebx - esi
	SCZO = cond(ebx)
	edi = edi - 0x00000001
	SZO = cond(edi)
	edi = eax
	bl = 0x93
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bl = 0xF7
	call fn0040243E (retsize: 4;)
	Mem0[0x0730AF30:byte] = al
	al = al ^ 0x46
	SZO = cond(al)
	C = false
fn00402611_exit:


// fn0040262F
// Return size: 0
void fn0040262F()
fn0040262F_entry:
	// succ:  l0040262F
l0040262F:
	esp = fp
	Mem0[esp - 0x00000020:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	ebx = ebx - esi
	SCZO = cond(ebx)
	edi = edi - 0x00000001
	SZO = cond(edi)
	edi = eax
	bl = 0x93
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bl = 0xF7
	call fn0040243E (retsize: 4;)
	Mem0[0x0730AF30:byte] = al
	al = al ^ 0x46
	SZO = cond(al)
	C = false
fn0040262F_exit:


// fn0040264D
// Return size: 0
void fn0040264D()
fn0040264D_entry:
	// succ:  l0040264D
l0040264D:
	esp = fp
	esp = esp + 0x00000004
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bl = bl ^ al
	SZO = cond(bl)
	C = false
	bh = 0xD3
	bh = 0xA5
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	call fn0040223C (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	eax = eax - 0x13B33A10 - C
	SCZO = cond(eax)
fn0040264D_exit:


// fn00402667
// Return size: 0
void fn00402667()
fn00402667_entry:
	// succ:  l00402667
l00402667:
	esp = fp
	Mem0[esp - 0x00000024:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	dl = 0x2D
	al = 0x25
	ecx = ecx >>u 0x0000000F
	SCZO = cond(ecx)
	ah = -ah
	SCZO = cond(ah)
	C = ah == 0x00
	eax = eax + ebx
	SCZO = cond(eax)
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	eax = eax ^ edi
	SZO = cond(eax)
	C = false
	call fn00402106 (retsize: 4;)
	SCZO = cond(ebp - Mem0[edi + 0x00000019:word32])
	edx_eax = (int64) eax
	// succ:  l00402682_thunk_fn00402683
l00402682_thunk_fn00402683:
	call fn00402683 (retsize: 0;)
	return
	// succ:  fn00402667_exit
fn00402667_exit:


// fn00402683
// Return size: 0
void fn00402683()
fn00402683_entry:
	// succ:  l00402683
l00402683:
	esp = fp
	esp = esp + 0x00000004
	// succ:  l00402683_thunk_fn00402687
l00402683_thunk_fn00402687:
	call fn00402687 (retsize: 0;)
	return
	// succ:  fn00402683_exit
fn00402683_exit:


// fn00402687
// Return size: 0
void fn00402687()
fn00402687_entry:
	// succ:  l00402687
l00402687:
	esp = fp
	ecx = ecx + edx
	SCZO = cond(ecx)
	esi = esi - ebx
	SCZO = cond(esi)
	dl = dl - cl
	SCZO = cond(dl)
	cl = cl - bl
	SCZO = cond(cl)
	edi = edi + 0x00000001
	SZO = cond(edi)
	call fn00401FB9 (retsize: 4;)
	al = al + 0xAA
	SCZO = cond(al)
	__outb(0x9E, al)
fn00402687_exit:


// fn0040269B
// Return size: 0
void fn0040269B()
fn0040269B_entry:
	// succ:  l0040269B
l0040269B:
	esp = fp
	Mem0[esp - 0x00000030:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi + 0x00000001
	SZO = cond(esi)
	edi = edi ^ eax
	SZO = cond(edi)
	C = false
	ch = 0x82
	eax = eax - edi
	SCZO = cond(eax)
	edi = edi - 0x00000001
	SZO = cond(edi)
	ecx = ecx | esi
	SZO = cond(ecx)
	C = false
	call fn00402B2D (retsize: 4;)
	dh = dh + bh + C
	SCZO = cond(dh)
	v13 = Mem0[0x7343BE75:byte] << 0x01
	Mem0[0x7343BE75:byte] = v13
	SCZO = cond(v13)
	// succ:  l004026B0_thunk_fn004026B6
l004026B0_thunk_fn004026B6:
	call fn004026B6 (retsize: 0;)
	return
	// succ:  fn0040269B_exit
fn0040269B_exit:


// fn004026B6
// Return size: 0
void fn004026B6()
fn004026B6_entry:
	// succ:  l004026B6
l004026B6:
	esp = fp
	esp = esp + 0x00000004
	cl = cl - bh
	SCZO = cond(cl)
	bh = bh - al
	SCZO = cond(bh)
	edx = edx + ebx
	SCZO = cond(edx)
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	dh = 0x2A
	bh = bh ^ dh
	SZO = cond(bh)
	C = false
	// succ:  l004026C4_thunk_fn004026C6
l004026C4_thunk_fn004026C6:
	call fn004026C6 (retsize: 0;)
	return
	// succ:  fn004026B6_exit
fn004026B6_exit:


// fn004026C6
// Return size: 0
void fn004026C6()
fn004026C6_entry:
	// succ:  l004026C6
l004026C6:
	esp = fp
	bh = bh | dl
	SZO = cond(bh)
	C = false
	ecx = ecx + esi
	SCZO = cond(ecx)
	edx = esi
	call fn0040292E (retsize: 4;)
	eax = eax & 0x139B9DD2
	SZO = cond(eax)
	C = false
	goto l004026D1_thunk_fn004026D6
	// succ:  l004026D1_thunk_fn004026D6
l004026C6:
l004026D1_thunk_fn004026D6:
	call fn004026D6 (retsize: 0;)
	return
	// succ:  fn004026C6_exit
fn004026C6_exit:


// fn004026D6
// Return size: 0
void fn004026D6()
fn004026D6_entry:
	// succ:  l004026D6
l004026D6:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = esi
	esi = v3
	v5 = cx
	cx = cx
	cx = v5
	esp = esp - 0x00000002
	Mem0[esp:word16] = di
	di = Mem0[esp:word16]
	esp = esp + 0x00000002
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx + 0x00000001
	SZO = cond(edx)
	esi = esi - ebx
	SCZO = cond(esi)
	bh = bh | dl
	SZO = cond(bh)
	C = false
	ebx = ebx - eax
	SCZO = cond(ebx)
	bl = bl + dl
	SCZO = cond(bl)
	call fn00402A7A (retsize: 4;)
	eax = 0x3D064A13
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = eax + 0x00000001
	SZO = cond(eax)
	// succ:  l004026F5_thunk_fn004026F6
l004026F5_thunk_fn004026F6:
	call fn004026F6 (retsize: 0;)
	return
	// succ:  fn004026D6_exit
fn004026D6_exit:


// fn004026F6
// Return size: 0
void fn004026F6()
fn004026F6_entry:
	// succ:  l004026F6
l004026F6:
	esp = fp
	esp = esp + 0x00000004
	edi = ecx
	edx = edx ^ esi
	SZO = cond(edx)
	C = false
	dh = dh ^ bh
	SZO = cond(dh)
	C = false
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	dh = dh + dl
	SCZO = cond(dh)
	dh = dh | bl
	SZO = cond(dh)
	C = false
	esi = esi - edi
	SCZO = cond(esi)
	al = al - bh
	SCZO = cond(al)
	call fn00402667 (retsize: 4;)
	Mem0[edi + 0xD812FB25:word16] = ss
	eax = eax - 0x0424648D - C
	SCZO = cond(eax)
	// succ:  l00402715_thunk_fn0040271A
l00402715_thunk_fn0040271A:
	call fn0040271A (retsize: 0;)
	return
	// succ:  fn004026F6_exit
fn004026F6_exit:


// fn00402716
// Return size: 0
void fn00402716()
fn00402716_entry:
	// succ:  l00402716
l00402716:
	esp = fp
	esp = esp + 0x00000004
	// succ:  l00402716_thunk_fn0040271A
l00402716_thunk_fn0040271A:
	call fn0040271A (retsize: 0;)
	return
	// succ:  fn00402716_exit
fn00402716_exit:


// fn0040271A
// Return size: 0
void fn0040271A()
fn0040271A_entry:
	// succ:  l0040271A
l0040271A:
	esp = fp
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	bh = ah
	esi = esi - 0x00000001
	SZO = cond(esi)
	esi = ebx
	bh = 0x05
	ebx = (word32) ah
	call fn0040259F (retsize: 4;)
	C = __daa(al, &al)
	eax = eax - 0x00000001
	SZO = cond(eax)
	ah = 0x15
	eax = eax + 0x00000001
	SZO = cond(eax)
	v12 = Mem0[esp:word32]
	Mem0[esp:word32] = edi
	edi = v12
	v13 = edi
	edi = edi
	edi = v13
	goto l00402735_thunk_fn0040273A
	// succ:  l00402735_thunk_fn0040273A
l0040271A:
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	bh = ah
	esi = esi - 0x00000001
	SZO = cond(esi)
	esi = ebx
	bh = 0x05
	ebx = (word32) ah
	call fn0040259F (retsize: 4;)
	C = __daa(al, &al)
	eax = eax - 0x00000001
	SZO = cond(eax)
	ah = 0x15
	eax = eax + 0x00000001
	SZO = cond(eax)
	v14 = Mem0[esp:word32]
	Mem0[esp:word32] = edi
	edi = v14
	v15 = edi
	edi = edi
	edi = v15
	// succ:  l00402733_thunk_fn0040273A
l00402733_thunk_fn0040273A:
	call fn0040273A (retsize: 0;)
	return
	// succ:  fn0040271A_exit
l00402735_thunk_fn0040273A:
	call fn0040273A (retsize: 0;)
	return
	// succ:  fn0040271A_exit
fn0040271A_exit:


// fn0040273A
// Return size: 0
void fn0040273A()
fn0040273A_entry:
	// succ:  l0040273A
l0040273A:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	dh = 0xC6
	dh = al
	ecx = ecx - edx
	SCZO = cond(ecx)
	ch = ch + dl
	SCZO = cond(ch)
	eax = eax - 0x0000041B
	SCZO = cond(eax)
	bh = bh ^ dl
	SZO = cond(bh)
	C = false
	call fn004029CB (retsize: 4;)
	edx_eax = (int64) eax
	v16 = Mem0[edx:word32] << 0x00000058
	Mem0[edx:word32] = v16
	SCZO = cond(v16)
	v18 = (Mem0[edi + 0x0BF02444:word32] & 0x00000001 << cl) != 0x00000000
	Mem0[edi + 0x0BF02444:word32] = __ror(Mem0[edi + 0x0BF02444:word32], cl)
	C = v18
	// succ:  l00402754_thunk_fn0040275A
l00402754_thunk_fn0040275A:
	call fn0040275A (retsize: 0;)
	return
	// succ:  fn0040273A_exit
fn0040273A_exit:


// fn00402755
// Return size: 0
void fn00402755()
fn00402755_entry:
	// succ:  l00402755
l00402755:
	esp = fp
	Mem0[esp - 0x00000010:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	// succ:  l00402759_thunk_fn0040275A
l00402759_thunk_fn0040275A:
	call fn0040275A (retsize: 0;)
	return
	// succ:  fn00402755_exit
fn00402755_exit:


// fn0040275A
// Return size: 0
void fn0040275A()
fn0040275A_entry:
	// succ:  l0040275A
l0040275A:
	esp = fp
	v5 = Mem0[ebx:word16] - (real64) rArg0
	Mem0[ebx:word16] = v5
	bl = ah
	bl = bl + bh
	SCZO = cond(bl)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bh = 0x97
	esi = esi - eax
	SCZO = cond(esi)
	call fn004020DF (retsize: 4;)
	goto l00402796
	// succ:  l00402796
l0040275A:
	edi = edi - ebx
	SCZO = cond(edi)
	bl = ah
	bl = bl + bh
	SCZO = cond(bl)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bh = 0x97
	esi = esi - eax
	SCZO = cond(esi)
	call fn004020DF (retsize: 4;)
l00402796:
fn0040275A_exit:


// fn00402773
// Return size: 0
void fn00402773()
fn00402773_entry:
	// succ:  l00402773
l00402773:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = edx
	edx = v3
	branch Test(EQ,Z) l00402778
	// succ:  l00402778
l00402778:
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh + cl
	SCZO = cond(bh)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	esi = esi | ecx
	SZO = cond(esi)
	C = false
	bh = 0xE9
	call fn00402AC5 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	ebp = ebp + 0x00000001
	SZO = cond(ebp)
fn00402773_exit:


// fn0040278F
// Return size: 0
void fn0040278F()
fn0040278F_entry:
	// succ:  l0040278F
l0040278F:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = esi
	esi = v3
	v5 = bl
	bl = bl
	bl = v5
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx ^ ecx
	SZO = cond(ebx)
	C = false
	goto l00402796
	// succ:  l00402796
fn0040278F_exit:


// fn004027AF
// Return size: 0
void fn004027AF()
fn004027AF_entry:
	// succ:  l004027AF
l004027AF:
	esp = fp
	Mem0[esp:word32] = esi
	v4 = ch
	ch = ch
	ch = v4
	v6 = ebx
	ebx = ebx
	ebx = v6
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	edi = edi + 0x00000001
	SZO = cond(edi)
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	esi = esi + edi
	SCZO = cond(esi)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	call eax (retsize: 4;)
	bl = ch
	call fn00402045 (retsize: 4;)
	v18 = Mem0[ecx + 0x8209C16F:byte] >> cl
	Mem0[ecx + 0x8209C16F:byte] = v18
	SCZO = cond(v18)
	dh = 0x97
	v20 = Mem0[esp:word32]
	Mem0[esp:word32] = edx
	edx = v20
	dx = dx
	branch Test(LE,SZO) l004027D9
	// succ:  l004027D9
l004027D9:
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edi = edi ^ eax
	SZO = cond(edi)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edi = edi | esi
	SZO = cond(edi)
	C = false
	call fn0040247B (retsize: 4;)
	v22 = Mem0[edx - 0x00000028:word32] + 0xB4 + C
	Mem0[edx - 0x00000028:word32] = v22
	SCZO = cond(v22)
	// succ:  l004027E6_thunk_fn004027E7
l004027E6_thunk_fn004027E7:
	call fn004027E7 (retsize: 0;)
	return
	// succ:  fn004027AF_exit
fn004027AF_exit:


// fn004027E7
// Return size: 0
void fn004027E7()
fn004027E7_entry:
	// succ:  l004027E7
l004027E7:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	rArg0 = rArg0 / Mem0[(edx + 0x24348799) + eax:real32]
	goto l004027E8_thunk_fn004027EF
	// succ:  l004027E8_thunk_fn004027EF
l004027E7:
	bl = bl + Mem0[ecx + 0x66243487:byte]
	SCZO = cond(bl)
	goto l004027EA_thunk_fn004027F0
	// succ:  l004027EA_thunk_fn004027F0
l004027E8_thunk_fn004027EF:
	call fn004027EF (retsize: 0;)
	return
	// succ:  fn004027E7_exit
l004027EA_thunk_fn004027F0:
	call fn004027F0 (retsize: 0;)
	return
	// succ:  fn004027E7_exit
fn004027E7_exit:


// fn004027EC
// Return size: 0
void fn004027EC()
fn004027EC_entry:
	// succ:  l004027EC
l004027EC:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = esi
	esi = v3
	call fn00402063 (retsize: 4;)
	// succ:  l004027EC_thunk_fn004027EF l004027FC_thunk_fn00402801
l004027EC_thunk_fn004027EF:
	call fn004027EF (retsize: 0;)
	return
	// succ:  fn004027EC_exit
l004027FC_thunk_fn00402801:
	call fn00402801 (retsize: 0;)
	return
	// succ:  fn004027EC_exit
fn004027EC_exit:


// fn004027EF
// Return size: 0
void fn004027EF()
fn004027EF_entry:
	// succ:  l004027EF
l004027EF:
	esp = fp
	v3 = si
	si = si
	si = v3
	goto l004027EF_thunk_fn004027F2
	// succ:  l004027EF_thunk_fn004027F2
l004027EF:
	v5 = si
	si = si
	si = v5
	// succ:  l004027EF_thunk_fn004027F0
l004027EF_thunk_fn004027F0:
	call fn004027F0 (retsize: 0;)
	return
	// succ:  fn004027EF_exit
l004027EF_thunk_fn004027F2:
	call fn004027F2 (retsize: 0;)
	return
	// succ:  fn004027EF_exit
fn004027EF_exit:


// fn004027F0
// Return size: 0
void fn004027F0()
fn004027F0_entry:
	// succ:  l004027F0
l004027F0:
	esp = fp
	v3 = esi
	esi = esi
	esi = v3
	goto l004027F0_thunk_fn004027F2
	// succ:  l004027F0_thunk_fn004027F2
l004027F0:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	ebx = ecx
	edi = edi - 0x00000001
	SZO = cond(edi)
	eax = ebx
	al = al - dl
	SCZO = cond(al)
l004027F0_thunk_fn004027F2:
	call fn004027F2 (retsize: 0;)
	return
	// succ:  fn004027F0_exit
fn004027F0_exit:


// fn004027F2
// Return size: 0
void fn004027F2()
fn004027F2_entry:
	// succ:  l004027F2
l004027F2:
	esp = fp
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	ebx = ecx
	edi = edi - 0x00000001
	SZO = cond(edi)
	eax = ebx
	al = al - dl
	SCZO = cond(al)
	call fn00402063 (retsize: 4;)
	goto l004027FC_thunk_fn00402801
	// succ:  l004027FC_thunk_fn00402801
l004027F2:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	ebx = ecx
	edi = edi - 0x00000001
	SZO = cond(edi)
	eax = ebx
	al = al - dl
	SCZO = cond(al)
	call fn00402063 (retsize: 4;)
	dh = Mem0[0xCDF246AC:byte]
	goto l00402801_thunk_fn00402807
	// succ:  l00402801_thunk_fn00402807
l004027FC_thunk_fn00402801:
	call fn00402801 (retsize: 0;)
	return
	// succ:  fn004027F2_exit
l00402801_thunk_fn00402807:
	call fn00402807 (retsize: 0;)
	return
	// succ:  fn004027F2_exit
fn004027F2_exit:


// fn00402801
// Return size: 0
void fn00402801()
fn00402801_entry:
	// succ:  l00402801
l00402801:
	esp = fp
	dh = Mem0[0xCDF246AC:byte]
	goto l00402801_thunk_fn00402807
	// succ:  l00402801_thunk_fn00402807
l00402801:
	dh = Mem0[0xCDF246AC:byte]
	goto l00402801_thunk_fn00402807
	// succ:  l00402801_thunk_fn00402807
l00402801_thunk_fn00402807:
	call fn00402807 (retsize: 0;)
	return
	// succ:  fn00402801_exit
l00402801_thunk_fn00402807:
	call fn00402807 (retsize: 0;)
	return
	// succ:  fn00402801_exit
fn00402801_exit:


// fn00402807
// Return size: 0
void fn00402807()
fn00402807_entry:
	// succ:  l00402807
l00402807:
	esp = fp
	esp = esp + 0x00000004
	bl = bl | ch
	SZO = cond(bl)
	C = false
	edi = edi | edx
	SZO = cond(edi)
	C = false
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	bh = 0x61
	bh = 0x2B
	bl = 0x56
	call fn00401FF2 (retsize: 4;)
	v12 = Mem0[eax + 0xC7335C3D:word32] & 0x0000002A
	Mem0[eax + 0xC7335C3D:word32] = v12
	SZO = cond(Mem0[eax + 0xC7335C3D:word32])
	C = false
	// succ:  l0040281C_thunk_fn00402823
l0040281C_thunk_fn00402823:
	call fn00402823 (retsize: 0;)
	return
	// succ:  fn00402807_exit
fn00402807_exit:


// fn00402820
// Return size: 0
void fn00402820()
fn00402820_entry:
	// succ:  l00402820
l00402820:
	esp = fp
	eax = eax ^ edi
	SZO = cond(eax)
	C = false
	bh = bh - al
	SCZO = cond(bh)
	call fn004027EC (retsize: 4;)
	// succ:  l00402822_thunk_fn00402823 l00402834_thunk_fn00402839
l00402822_thunk_fn00402823:
	call fn00402823 (retsize: 0;)
	return
	// succ:  fn00402820_exit
l00402834_thunk_fn00402839:
	call fn00402839 (retsize: 0;)
	return
	// succ:  fn00402820_exit
fn00402820_exit:


// fn00402823
// Return size: 0
void fn00402823()
fn00402823_entry:
	// succ:  l00402823
l00402823:
	esp = fp
	C = false
	esi = esi | ecx
	SZO = cond(esi)
	C = false
	edx = edx + edi
	SCZO = cond(edx)
	dh = bl
	cl = cl + dh
	SCZO = cond(cl)
	esi = esi | edi
	SZO = cond(esi)
	C = false
	goto l0040282C_thunk_fn0040282D
	// succ:  l0040282C_thunk_fn0040282D
l00402823:
	esi = esi | ecx
	SZO = cond(esi)
	C = false
	edx = edx + edi
	SCZO = cond(edx)
	dh = bl
	cl = cl + dh
	SCZO = cond(cl)
	esi = esi | edi
	SZO = cond(esi)
	C = false
	cl = cl - ah
	SCZO = cond(cl)
	eax = eax | edi
	SZO = cond(eax)
	C = false
	ah = cl
l0040282C_thunk_fn0040282D:
	call fn0040282D (retsize: 0;)
	return
	// succ:  fn00402823_exit
fn00402823_exit:


// fn0040282D
// Return size: 0
void fn0040282D()
fn0040282D_entry:
	// succ:  l0040282D
l0040282D:
	esp = fp
	edx_eax = Mem0[edx:word32] *s eax
	SCZO = cond(edx_eax)
	int3()
	eax = eax | edi
	SZO = cond(eax)
	C = false
	ah = cl
	call fn004027EC (retsize: 4;)
	goto l00402834_thunk_fn00402839
	// succ:  l00402834_thunk_fn00402839
l0040282D:
	cl = cl - ah
	SCZO = cond(cl)
	eax = eax | edi
	SZO = cond(eax)
	C = false
	ah = cl
	call fn004027EC (retsize: 4;)
	eax = eax + 0x2675839B + C
	SCZO = cond(eax)
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx_eax % dl
	eax = edx_eax / dl
	SCZO = cond(eax)
	goto l0040283F_thunk_fn00402841
	// succ:  l0040283F_thunk_fn00402841
l00402834_thunk_fn00402839:
	call fn00402839 (retsize: 0;)
	return
	// succ:  fn0040282D_exit
l0040283F_thunk_fn00402841:
	call fn00402841 (retsize: 0;)
	return
	// succ:  fn0040282D_exit
fn0040282D_exit:


// fn00402839
// Return size: 0
void fn00402839()
fn00402839_entry:
	// succ:  l00402839
l00402839:
	esp = fp
	eax = eax + 0x2675839B + C
	SCZO = cond(eax)
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx_eax % dl
	eax = edx_eax / dl
	SCZO = cond(eax)
	goto l0040283F_thunk_fn00402841
	// succ:  l0040283F_thunk_fn00402841
l00402839:
	eax = eax + 0x2675839B + C
	SCZO = cond(eax)
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx_eax % dl
	eax = edx_eax / dl
	SCZO = cond(eax)
	goto l0040283F_thunk_fn00402841
	// succ:  l0040283F_thunk_fn00402841
l0040283F_thunk_fn00402841:
	call fn00402841 (retsize: 0;)
	return
	// succ:  fn00402839_exit
l0040283F_thunk_fn00402841:
	call fn00402841 (retsize: 0;)
	return
	// succ:  fn00402839_exit
fn00402839_exit:


// fn00402841
// Return size: 0
void fn00402841()
fn00402841_entry:
	// succ:  l00402841
l00402841:
	esp = fp
	esp = esp + 0x00000004
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bh = bh | ch
	SZO = cond(bh)
	C = false
	ecx = ecx | edx
	SZO = cond(ecx)
	C = false
	bh = 0x29
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	call fn00402BCC (retsize: 4;)
	SCZO = cond(al - Mem0[edi:byte])
	edi = edi + 0x00000001
	esp = esp - 0x00000004
	Mem0[esp:word32] = esp
	branch Test(ULE,CZ) l00402856_thunk_fn0040282D
	goto l00402858
	// succ:  l00402858 l00402856_thunk_fn0040282D
l00402856_thunk_fn0040282D:
	call fn0040282D (retsize: 0;)
	return
	// succ:  fn00402841_exit
l00402858:
	branch Test(PO,P) l00402858_thunk_fn004027E7
	goto l00402858_thunk_fn0040285A
	// succ:  l00402858_thunk_fn0040285A l00402858_thunk_fn004027E7
l00402858_thunk_fn004027E7:
	call fn004027E7 (retsize: 0;)
	return
	// succ:  fn00402841_exit
l00402858_thunk_fn0040285A:
	call fn0040285A (retsize: 0;)
	return
	// succ:  fn00402841_exit l00402858_thunk_fn0040285A
l00402858_thunk_fn0040285A:
	call fn0040285A (retsize: 0;)
	return
	// succ:  fn00402841_exit
fn00402841_exit:


// fn00402859
// Return size: 0
void fn00402859()
fn00402859_entry:
	// succ:  l00402859
l00402859:
	esp = fp
	esp = esp + 0x00000004
	call fn00402687 (retsize: 4;)
	// succ:  l00402859_thunk_fn0040285A l00402868_thunk_fn0040286D
l00402859_thunk_fn0040285A:
	call fn0040285A (retsize: 0;)
	return
	// succ:  fn00402859_exit
l00402868_thunk_fn0040286D:
	call fn0040286D (retsize: 0;)
	return
	// succ:  fn00402859_exit
fn00402859_exit:


// fn0040285A
// Return size: 0
void fn0040285A()
fn0040285A_entry:
	// succ:  l0040285A
l0040285A:
	esp = fp
	al = al & 0x04
	SZO = cond(al)
	C = false
	dl = 0xB7
	ch = cl
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	al = ch
	edi = edi + 0x00000001
	SZO = cond(edi)
	edi = edi - edx
	SCZO = cond(edi)
	call fn00402687 (retsize: 4;)
	goto l00402868_thunk_fn0040286D
	// succ:  l00402868_thunk_fn0040286D
l0040285A:
	dl = 0xB7
	ch = cl
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	al = ch
	edi = edi + 0x00000001
	SZO = cond(edi)
	edi = edi - edx
	SCZO = cond(edi)
l00402868_thunk_fn0040286D:
	call fn0040286D (retsize: 0;)
	return
	// succ:  fn0040285A_exit
fn0040285A_exit:


// fn0040286D
// Return size: 0
void fn0040286D()
fn0040286D_entry:
	// succ:  l0040286D
l0040286D:
	esp = fp
	call fn00402683 (retsize: 4;)
	SCZO = cond(Mem0[ecx:byte] - bl)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	v7 = Mem0[edx + 0x24448FFC:word32]
	Mem0[edx + 0x24448FFC:word32] = eax
	eax = v7
	goto l00402875_thunk_fn0040287B
	// succ:  l00402875_thunk_fn0040287B
l0040286D:
	call fn00402683 (retsize: 4;)
	SCZO = cond(Mem0[ecx:byte] - bl)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	v9 = Mem0[edx + 0x24448FFC:word32]
	Mem0[edx + 0x24448FFC:word32] = eax
	eax = v9
	goto l00402875_thunk_fn0040287B
	// succ:  l00402875_thunk_fn0040287B
l00402875_thunk_fn0040287B:
	call fn0040287B (retsize: 0;)
	return
	// succ:  fn0040286D_exit
l00402875_thunk_fn0040287B:
	call fn0040287B (retsize: 0;)
	return
	// succ:  fn0040286D_exit
fn0040286D_exit:


// fn00402878
// Return size: 0
void fn00402878()
fn00402878_entry:
	// succ:  l00402878
l00402878:
	esp = fp
	Mem0[esp - 0x00000030:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	call fn0040215A (retsize: 4;)
	// succ:  l00402878_thunk_fn0040287B l00402888_thunk_fn0040288D
l00402878_thunk_fn0040287B:
	call fn0040287B (retsize: 0;)
	return
	// succ:  fn00402878_exit
l00402888_thunk_fn0040288D:
	call fn0040288D (retsize: 0;)
	return
	// succ:  fn00402878_exit
fn00402878_exit:


// fn0040287B
// Return size: 0
void fn0040287B()
fn0040287B_entry:
	// succ:  l0040287B
l0040287B:
	esp = fp
	v4 = Mem0[edx:byte] << 0x01
	Mem0[edx:byte] = v4
	SCZO = cond(v4)
	int3()
	ch = ch + dh
	SCZO = cond(ch)
	ch = 0x95
	bh = bh - al
	SCZO = cond(bh)
	cl = cl | ch
	SZO = cond(cl)
	C = false
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	call fn0040215A (retsize: 4;)
	goto l00402888_thunk_fn0040288D
	// succ:  l00402888_thunk_fn0040288D
l0040287B:
	cl = cl ^ ah
	SZO = cond(cl)
	C = false
	ch = ch + dh
	SCZO = cond(ch)
	ch = 0x95
	bh = bh - al
	SCZO = cond(bh)
	cl = cl | ch
	SZO = cond(cl)
	C = false
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
l00402888_thunk_fn0040288D:
	call fn0040288D (retsize: 0;)
	return
	// succ:  fn0040287B_exit
fn0040287B_exit:


// fn0040288D
// Return size: 0
void fn0040288D()
fn0040288D_entry:
	// succ:  l0040288D
l0040288D:
	esp = fp
	v3 = Mem0[esi:word32]
	Mem0[edi:word32] = v3
	esi = esi + 0x00000004
	edi = edi + 0x00000004
	v6 = eax
	eax = ecx
	ecx = v6
	branch Test(NO,O) l0040288F_thunk_fn004028E5
	goto l0040288F_thunk_fn00402891
	// succ:  l0040288F_thunk_fn00402891 l0040288F_thunk_fn004028E5
l0040288D:
	v10 = Mem0[esi:word32]
	Mem0[edi:word32] = v10
	esi = esi + 0x00000004
	edi = edi + 0x00000004
	v11 = eax
	eax = ecx
	ecx = v11
	branch Test(NO,O) l0040288F_thunk_fn004028E5
	goto l0040288F_thunk_fn00402891
	// succ:  l0040288F_thunk_fn00402891 l0040288F_thunk_fn004028E5
l0040288F_thunk_fn00402891:
	call fn00402891 (retsize: 0;)
	return
	// succ:  fn0040288D_exit l0040288F_thunk_fn00402891
l0040288F_thunk_fn00402891:
	call fn00402891 (retsize: 0;)
	return
	// succ:  fn0040288D_exit
l0040288F_thunk_fn00402891:
	call fn00402891 (retsize: 0;)
	return
	// succ:  fn0040288D_exit
l0040288F_thunk_fn004028E5:
	call fn004028E5 (retsize: 0;)
	return
	// succ:  fn0040288D_exit
l0040288F_thunk_fn004028E5:
	call fn004028E5 (retsize: 0;)
	return
	// succ:  fn0040288D_exit
fn0040288D_exit:


// fn00402891
// Return size: 0
void fn00402891()
fn00402891_entry:
	// succ:  l00402891
l00402891:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ds
	// succ:  l00402891_thunk_fn00402892
l00402891_thunk_fn00402892:
	call fn00402892 (retsize: 0;)
	return
	// succ:  fn00402891_exit
fn00402891_exit:


// fn00402892
// Return size: 0
void fn00402892()
fn00402892_entry:
	// succ:  l00402892
l00402892:
	esp = fp
	Mem0[esp:word32] = eax
	v4 = ah
	ah = ah
	ah = v4
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	cl = bh
	esi = esi + 0x00000001
	SZO = cond(esi)
	ch = -ch
	SCZO = cond(ch)
	C = ch == 0x00
	bl = bl | bh
	SZO = cond(bl)
	C = false
	call fn0040227B (retsize: 4;)
	edx_eax = (int64) eax
	edi = 0xA972CD70
	edx = edx + 0x00000001
	SZO = cond(edx)
	v17 = Mem0[esp:word32]
	Mem0[esp:word32] = esi
	esi = v17
fn00402892_exit:


// fn004028AB
// Return size: 0
void fn004028AB()
fn004028AB_entry:
	// succ:  l004028AB
l004028AB:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = esi
	esi = v3
fn004028AB_exit:


// fn004028C4
// Return size: 0
void fn004028C4()
fn004028C4_entry:
	// succ:  l004028C4
l004028C4:
	Mem0[esp - 0x00000014:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = edi
	bl = 0xED
	esi = esi + 0x00000001
	SZO = cond(esi)
	edi = edi + ecx
	SCZO = cond(edi)
	edi = edi + eax
	SCZO = cond(edi)
	esi = esi + 0x00000001
	SZO = cond(esi)
	bh = bh | ch
	SZO = cond(bh)
	C = false
	call fn0040200D (retsize: 4;)
	edx = edx
	al = al & Mem0[ecx + 0x00000019:byte]
	SZO = cond(al)
	C = false
	__outb(0x0C, al)
	Mem0[esp - 0x00000020:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh | ch
	SZO = cond(bh)
	C = false
	bh = bh | dh
	SZO = cond(bh)
	C = false
	ebx = ecx
	bl = bh
	esi = esi - edi
	SCZO = cond(esi)
	call fn00402E77 (retsize: 4;)
	// succ:  l004028EE_thunk_fnC3FDBB78
l004028EE_thunk_fnC3FDBB78:
	call fnC3FDBB78 (retsize: 0;)
	return
	// succ:  fn004028C4_exit
fn004028C4_exit:


// fn004028E0
// Return size: 0
void fn004028E0()
fn004028E0_entry:
	// succ:  l004028E0
l004028E0:
	esp = fp
	Mem0[esp - 0x00000020:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh | ch
	SZO = cond(bh)
	C = false
	// succ:  l004028E4_thunk_fn004028E5
l004028E4_thunk_fn004028E5:
	call fn004028E5 (retsize: 0;)
	return
	// succ:  fn004028E0_exit
fn004028E0_exit:


// fn004028E5
// Return size: 0
void fn004028E5()
fn004028E5_entry:
	// succ:  l004028E5
l004028E5:
	esp = fp
	D = true
	bh = bh | dh
	SZO = cond(bh)
	C = false
	ebx = ecx
	bl = bh
	esi = esi - edi
	SCZO = cond(esi)
	call fn00402E77 (retsize: 4;)
	goto l004028F3_thunk_fnC3FDBB78
	// succ:  l004028F3_thunk_fnC3FDBB78
l004028E5:
	bh = bh | dh
	SZO = cond(bh)
	C = false
	ebx = ecx
	bl = bh
	esi = esi - edi
	SCZO = cond(esi)
	call fn00402E77 (retsize: 4;)
	goto l004028F3_thunk_fnC3FDBB78
	// succ:  l004028F3_thunk_fnC3FDBB78
l004028F3_thunk_fnC3FDBB78:
	call fnC3FDBB78 (retsize: 0;)
	return
	// succ:  fn004028E5_exit
l004028F3_thunk_fnC3FDBB78:
	call fnC3FDBB78 (retsize: 0;)
	return
	// succ:  fn004028E5_exit
fn004028E5_exit:


// fn004028F8
// Return size: 0
void fn004028F8()
fn004028F8_entry:
	// succ:  l004028F8
l004028F8:
	esp = fp
	Mem0[esp - 0x00000010:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ch = ch - dh
	SCZO = cond(ch)
	esi = edx
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	esi = esi - 0x00000001
	SZO = cond(esi)
	dh = dh - dl
	SCZO = cond(dh)
	dl = dl - al
	SCZO = cond(dl)
	cl = cl - ch
	SCZO = cond(cl)
	call fn00402892 (retsize: 4;)
fn004028F8_exit:


// fn00402914
// Return size: 0
void fn00402914()
fn00402914_entry:
	// succ:  l00402914
l00402914:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = edx
	edx = v3
	v5 = eax
	eax = eax
	eax = v5
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh ^ bl
	SZO = cond(bh)
	C = false
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ebx = edi
	ecx = ecx + edi
	SCZO = cond(ecx)
	call fn00402878 (retsize: 4;)
	ax = Mem0[eax + 0x9F7ABA8A:byte] *u al
	SCZO = cond(ax)
	esp = 0x24448FFD
	// succ:  l0040292C_thunk_fn00402931
l0040292C_thunk_fn00402931:
	call fn00402931 (retsize: 0;)
	return
	// succ:  fn00402914_exit
fn00402914_exit:


// fn0040292E
// Return size: 0
void fn0040292E()
fn0040292E_entry:
	// succ:  l0040292E
l0040292E:
	esp = fp
	Mem0[esp - 0x00000014:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l0040292E_thunk_fn00402931
l0040292E_thunk_fn00402931:
	call fn00402931 (retsize: 0;)
	return
	// succ:  fn0040292E_exit
fn0040292E_exit:


// fn00402931
// Return size: 0
void fn00402931()
fn00402931_entry:
	// succ:  l00402931
l00402931:
	esp = fp
	al = __inb(dx)
	ecx = ecx - edx
	SCZO = cond(ecx)
	edx = esi
	dh = dh + ch
	SCZO = cond(dh)
	cl = 0x89
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ch = ch + dl
	SCZO = cond(ch)
	call fn004021E6 (retsize: 4;)
	v16 = Mem0[eax:byte] | cl
	Mem0[eax:byte] = v16
	SZO = cond(Mem0[eax:byte])
	C = false
	esi = eax
	goto l00402944_thunk_fn00402946
	// succ:  l00402944_thunk_fn00402946
l00402931:
	ecx = ecx - edx
	SCZO = cond(ecx)
	edx = esi
	dh = dh + ch
	SCZO = cond(dh)
	cl = 0x89
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ch = ch + dl
	SCZO = cond(ch)
	call fn004021E6 (retsize: 4;)
	v18 = Mem0[eax:byte] | cl
	Mem0[eax:byte] = v18
	SZO = cond(Mem0[eax:byte])
	C = false
	esi = eax
	goto l00402944_thunk_fn00402946
	// succ:  l00402944_thunk_fn00402946
l00402944_thunk_fn00402946:
	call fn00402946 (retsize: 0;)
	return
	// succ:  fn00402931_exit
l00402944_thunk_fn00402946:
	call fn00402946 (retsize: 0;)
	return
	// succ:  fn00402931_exit
fn00402931_exit:


// fn00402946
// Return size: 0
void fn00402946()
fn00402946_entry:
	// succ:  l00402946
l00402946:
	esp = fp
	Mem0[esp - 0x00000034:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	ch = ch + bh
	SCZO = cond(ch)
	edi = edi - eax
	SCZO = cond(edi)
	esi = esi + 0x00000001
	SZO = cond(esi)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	call fn004023BD (retsize: 4;)
	eax = (int32) ax
	esp = esp + 0x00000001
	SZO = cond(esp)
	esp = esp - 0x00000001
	SZO = cond(esp)
	v12 = (Mem0[edi + 0x2BE02444:word32] & 0x00000001 << 0x01) != 0x00000000
	Mem0[edi + 0x2BE02444:word32] = __ror(Mem0[edi + 0x2BE02444:word32], 0x01)
	C = v12
fn00402946_exit:


// fn0040297A
// Return size: 0
void fn0040297A()
fn0040297A_entry:
	// succ:  l0040297A
l0040297A:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = ebx
	ebx = v3
	bl = bl
	v6 = esi
	esi = esi
	esi = v6
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx + esi
	SCZO = cond(ecx)
	bl = bl + cl
	SCZO = cond(bl)
	ebx = edi
	call fn0040278F (retsize: 4;)
	branch Test(NS,S) l0040298D_thunk_fn00402A01
	goto l0040298F
	// succ:  l0040298F l0040298D_thunk_fn00402A01
l0040298D_thunk_fn00402A01:
	call fn00402A01 (retsize: 0;)
	return
	// succ:  fn0040297A_exit
l0040298F:
	v14 = Mem0[eax + 0x0000000F:word32] << 0x00000001
	Mem0[eax + 0x0000000F:word32] = v14
	SCZO = cond(v14)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	al = al - 0xF8 - C
	SCZO = cond(al)
	// succ:  l00402993_thunk_fn00402995
l00402993_thunk_fn00402995:
	call fn00402995 (retsize: 0;)
	return
	// succ:  fn0040297A_exit
fn0040297A_exit:


// fn00402995
// Return size: 0
void fn00402995()
fn00402995_entry:
	// succ:  l00402995
l00402995:
	esp = fp
	Mem0[esp:word32] = esi
	call fn00402B15 (retsize: 4;)
	// succ:  l00402995_thunk_fn00402998 l004029A9_thunk_fn004029AE
l00402995_thunk_fn00402998:
	call fn00402998 (retsize: 0;)
	return
	// succ:  fn00402995_exit
l004029A9_thunk_fn004029AE:
	call fn004029AE (retsize: 0;)
	return
	// succ:  fn00402995_exit
fn00402995_exit:


// fn00402998
// Return size: 0
void fn00402998()
fn00402998_entry:
	// succ:  l00402998
l00402998:
	esp = fp
	si = esi
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ecx = ecx | esi
	SZO = cond(ecx)
	C = false
	bh = 0xE7
	ebx = ebx + edx
	SCZO = cond(ebx)
	ch = 0x4F
	bl = bl + dh
	SCZO = cond(bl)
	bl = 0xBD
	call fn00402B15 (retsize: 4;)
	goto l004029A9_thunk_fn004029AE
	// succ:  l004029A9_thunk_fn004029AE
l00402998:
	si = esi
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ecx = ecx | esi
	SZO = cond(ecx)
	C = false
	bh = 0xE7
	ebx = ebx + edx
	SCZO = cond(ebx)
	ch = 0x4F
	bl = bl + dh
	SCZO = cond(bl)
	bl = 0xBD
l004029A9_thunk_fn004029AE:
	call fn004029AE (retsize: 0;)
	return
	// succ:  fn00402998_exit
fn00402998_exit:


// fn004029AE
// Return size: 0
void fn004029AE()
fn004029AE_entry:
	// succ:  l004029AE
l004029AE:
	esp = fp
	ebp = ebp *s 0x00000072
	SCZO = cond(ebp)
	al = al - 0x3B
	SCZO = cond(al)
	goto l004029B1_thunk_fn004029B3
	// succ:  l004029B1_thunk_fn004029B3
l004029AE:
	ebp = ebp *s 0x00000072
	SCZO = cond(ebp)
	al = al - 0x3B
	SCZO = cond(al)
	goto l004029B1_thunk_fn004029B3
	// succ:  l004029B1_thunk_fn004029B3
l004029B1_thunk_fn004029B3:
	call fn004029B3 (retsize: 0;)
	return
	// succ:  fn004029AE_exit
l004029B1_thunk_fn004029B3:
	call fn004029B3 (retsize: 0;)
	return
	// succ:  fn004029AE_exit
fn004029AE_exit:


// fn004029B3
// Return size: 0
void fn004029B3()
fn004029B3_entry:
	// succ:  l004029B3
l004029B3:
	esp = fp
	esp = esp + 0x00000004
	edi = edi + esi
	SCZO = cond(edi)
	cl = cl ^ dh
	SZO = cond(cl)
	C = false
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	ch = -ch
	SCZO = cond(ch)
	C = ch == 0x00
	call fn0040225F (retsize: 4;)
fn004029B3_exit:


// fn004029CB
// Return size: 0
void fn004029CB()
fn004029CB_entry:
	// succ:  l004029CB
l004029CB:
	esp = fp
	Mem0[esp - 0x00000030:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	dh = 0x5D
	bl = 0xD5
	bh = bh + dl
	SCZO = cond(bh)
	bh = bh ^ bl
	SZO = cond(bh)
	C = false
	dh = dh ^ dl
	SZO = cond(dh)
	C = false
	bh = bh ^ dh
	SZO = cond(bh)
	C = false
	dl = dl | bh
	SZO = cond(dl)
	C = false
	edx = edx + ecx
	SCZO = cond(edx)
	call fn00402D43 (retsize: 4;)
	al = Mem0[ebx + (uint32) al:byte]
	ds_ebp = Mem0[ebx + 0x00000000:segptr32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0xDC50DD79
	// succ:  l004029E7_thunk_fn004029EC
l004029E7_thunk_fn004029EC:
	call fn004029EC (retsize: 0;)
	return
	// succ:  fn004029CB_exit
fn004029CB_exit:


// fn004029EC
// Return size: 0
void fn004029EC()
fn004029EC_entry:
	// succ:  l004029EC
l004029EC:
	esp = fp
	Mem0[esp:word32] = edi
	al = al
	eax = eax
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = bl + al
	SCZO = cond(bl)
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ebx = esi
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	call fn0040264D (retsize: 4;)
	// succ:  l004029FC_thunk_fn00402A01
l004029FC_thunk_fn00402A01:
	call fn00402A01 (retsize: 0;)
	return
	// succ:  fn004029EC_exit
fn004029EC_exit:


// fn00402A01
// Return size: 0
void fn00402A01()
fn00402A01_entry:
	// succ:  l00402A01
l00402A01:
	esp = fp
	es = si
	esi = esi + 0x00000001
	SZO = cond(esi)
	bl = 0xCF
	ecx = ecx - 0x00000001
	branch Test(EQ,Z) && ecx != 0x00000000 l00402A07_thunk_fn00402998
	goto l00402A07_thunk_fn00402A09
	// succ:  l00402A07_thunk_fn00402A09 l00402A07_thunk_fn00402998
l00402A01:
l00402A07_thunk_fn00402998:
	call fn00402998 (retsize: 0;)
	return
	// succ:  fn00402A01_exit
l00402A07_thunk_fn00402A09:
	call fn00402A09 (retsize: 0;)
	return
	// succ:  fn00402A01_exit l00402A07_thunk_fn00402A09
l00402A07_thunk_fn00402A09:
	call fn00402A09 (retsize: 0;)
	return
	// succ:  fn00402A01_exit
fn00402A01_exit:


// fn00402A08
// Return size: 0
void fn00402A08()
fn00402A08_entry:
	// succ:  l00402A08
l00402A08:
	esp = fp
	Mem0[esp - 0x0000002C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	call fn004029EC (retsize: 4;)
	// succ:  l00402A08_thunk_fn00402A09 l00402A22_thunk_fn00402A27
l00402A08_thunk_fn00402A09:
	call fn00402A09 (retsize: 0;)
	return
	// succ:  fn00402A08_exit
l00402A22_thunk_fn00402A27:
	call fn00402A27 (retsize: 0;)
	return
	// succ:  fn00402A08_exit
fn00402A08_exit:


// fn00402A09
// Return size: 0
void fn00402A09()
fn00402A09_entry:
	// succ:  l00402A09
l00402A09:
	esp = fp
	esp = esp + 0x00000001
	SZO = cond(esp)
	al = al & 0xD4
	SZO = cond(al)
	C = false
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	bl = ch
	bh = bh - ch
	SCZO = cond(bh)
	bh = 0xD3
	bl = ch
	bh = bh + dl
	SCZO = cond(bh)
	bl = bl + ah
	SCZO = cond(bl)
	bl = bl ^ dh
	SZO = cond(bl)
	C = false
	ecx = ecx - 0x64C63BAB
	SCZO = cond(ecx)
	call fn004029EC (retsize: 4;)
l00402A09:
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	bl = ch
	bh = bh - ch
	SCZO = cond(bh)
	bh = 0xD3
	bl = ch
	bh = bh + dl
	SCZO = cond(bh)
	bl = bl + ah
	SCZO = cond(bl)
	bl = bl ^ dh
	SZO = cond(bl)
	C = false
	ecx = ecx - 0x64C63BAB
	SCZO = cond(ecx)
fn00402A09_exit:


// fn00402A27
// Return size: 0
void fn00402A27()
fn00402A27_entry:
	// succ:  l00402A27
l00402A27:
	esp = fp
l00402A27:
fn00402A27_exit:


// fn00402A47
// Return size: 0
void fn00402A47()
fn00402A47_entry:
	// succ:  l00402A47
l00402A47:
	esp = fp
	esp = esp + 0x00000004
	edi = ecx
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
	edi = edi | edx
	SZO = cond(edi)
	C = false
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	call fn004021CB (retsize: 4;)
	al = al ^ 0x76
	SZO = cond(al)
	C = false
	Mem0[ebp + 0x8A042464:word32] = 0x33CB0AF3
	v14 = Mem0[edi + 0xCB0B47A1:byte] << 0x01
	Mem0[edi + 0xCB0B47A1:byte] = v14
	SCZO = cond(v14)
	call fn004025DD (retsize: 4;)
	// succ:  l00402A6D_thunk_fn00402A72
l00402A6D_thunk_fn00402A72:
	call fn00402A72 (retsize: 0;)
	return
	// succ:  fn00402A47_exit
fn00402A47_exit:


// fn00402A5E
// Return size: 0
void fn00402A5E()
fn00402A5E_entry:
	// succ:  l00402A5E
l00402A5E:
	esp = fp
	esp = esp + 0x00000004
	dh = bl
	cl = cl | bl
	SZO = cond(cl)
	C = false
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	bh = 0xA1
	edi = edi + 0x00000001
	SZO = cond(edi)
	ecx = ecx | ebx
	SZO = cond(ecx)
	C = false
	call fn004025DD (retsize: 4;)
	// succ:  l00402A6D_thunk_fn00402A72
l00402A6D_thunk_fn00402A72:
	call fn00402A72 (retsize: 0;)
	return
	// succ:  fn00402A5E_exit
fn00402A5E_exit:


// fn00402A72
// Return size: 0
void fn00402A72()
fn00402A72_entry:
	// succ:  l00402A72
l00402A72:
	esp = fp
	v5 = Mem0[esi:byte] - ah
	Mem0[esi:byte] = v5
	SCZO = cond(v5)
	eax = eax + 0xF310C9BD
	SCZO = cond(eax)
	rArg0 = rArg0 * (real64) Mem0[ecx + 0xD28B240C:word16]
	goto l00402A79_thunk_fn00402A7F
	// succ:  l00402A79_thunk_fn00402A7F
l00402A72:
	v10 = Mem0[esi:byte] - ah
	Mem0[esi:byte] = v10
	SCZO = cond(v10)
	eax = eax + 0xF310C9BD
	SCZO = cond(eax)
	rArg0 = rArg0 * (real64) Mem0[ecx + 0xD28B240C:word16]
	goto l00402A79_thunk_fn00402A7F
	// succ:  l00402A79_thunk_fn00402A7F
l00402A79_thunk_fn00402A7F:
	call fn00402A7F (retsize: 0;)
	return
	// succ:  fn00402A72_exit
l00402A79_thunk_fn00402A7F:
	call fn00402A7F (retsize: 0;)
	return
	// succ:  fn00402A72_exit
fn00402A72_exit:


// fn00402A7A
// Return size: 0
void fn00402A7A()
fn00402A7A_entry:
	// succ:  l00402A7A
l00402A7A:
	esp = fp
	Mem0[esp:word32] = ecx
	edx = edx
	call fn00402304 (retsize: 4;)
	// succ:  l00402A7D_thunk_fn00402A7F l00402A89_thunk_fn00402A8E
l00402A7D_thunk_fn00402A7F:
	call fn00402A7F (retsize: 0;)
	return
	// succ:  fn00402A7A_exit
l00402A89_thunk_fn00402A8E:
	call fn00402A8E (retsize: 0;)
	return
	// succ:  fn00402A7A_exit
fn00402A7A_exit:


// fn00402A7F
// Return size: 0
void fn00402A7F()
fn00402A7F_entry:
	// succ:  l00402A7F
l00402A7F:
	esp = fp
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = edx
	bl = 0xA1
	dh = 0xFF
	dh = 0x4A
	edx = edx - 0x00000001
	SZO = cond(edx)
	call fn00402304 (retsize: 4;)
	goto l00402A89_thunk_fn00402A8E
	// succ:  l00402A89_thunk_fn00402A8E
l00402A7F:
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = edx
	bl = 0xA1
	dh = 0xFF
	dh = 0x4A
	edx = edx - 0x00000001
	SZO = cond(edx)
l00402A89_thunk_fn00402A8E:
	call fn00402A8E (retsize: 0;)
	return
	// succ:  fn00402A7F_exit
fn00402A7F_exit:


// fn00402A8E
// Return size: 0
void fn00402A8E()
fn00402A8E_entry:
	// succ:  l00402A8E
l00402A8E:
	esp = fp
	Mem0[edx - 0x0000005F:byte] = 0x8C
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0xF3240489
	goto l00402A92_thunk_fn00402A97
	// succ:  l00402A92_thunk_fn00402A97
l00402A8E:
	Mem0[edx - 0x0000005F:byte] = 0x8C
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0xF3240489
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	dh = dh + cl
	SCZO = cond(dh)
	bl = 0x3D
	bh = bh ^ dh
	SZO = cond(bh)
	C = false
	dh = dh ^ ch
	SZO = cond(dh)
	C = false
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	call fn004024E3 (retsize: 4;)
	edx = Mem0[0x05D12BEE:word32] *s 0x8B241C89
	SCZO = cond(edx)
	edx = edx_eax % bl
	eax = edx_eax /u bl
	SCZO = cond(eax)
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	cl = cl - dh
	SCZO = cond(cl)
	dh = dh - ch
	SCZO = cond(dh)
	edx = edi
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	call fn00402364 (retsize: 4;)
	goto l00402ABC_thunk_fn00402AC1
	// succ:  l00402ABC_thunk_fn00402AC1
l00402A92_thunk_fn00402A97:
	call fn00402A97 (retsize: 0;)
	return
	// succ:  fn00402A8E_exit
l00402ABC_thunk_fn00402AC1:
	call fn00402AC1 (retsize: 0;)
	return
	// succ:  fn00402A8E_exit
fn00402A8E_exit:


// fn00402A93
// Return size: 0
void fn00402A93()
fn00402A93_entry:
	// succ:  l00402A93
l00402A93:
	esp = fp
	Mem0[esp:word32] = eax
fn00402A93_exit:


// fn00402A97
// Return size: 0
void fn00402A97()
fn00402A97_entry:
	// succ:  l00402A97
l00402A97:
	esp = fp
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	dh = dh + cl
	SCZO = cond(dh)
	bl = 0x3D
	bh = bh ^ dh
	SZO = cond(bh)
	C = false
	dh = dh ^ ch
	SZO = cond(dh)
	C = false
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	call fn004024E3 (retsize: 4;)
	edx = Mem0[0x05D12BEE:word32] *s 0x8B241C89
	SCZO = cond(edx)
	goto l00402AA7_thunk_fn00402AB1
	// succ:  l00402AA7_thunk_fn00402AB1
l00402A97:
l00402AA7_thunk_fn00402AB1:
	call fn00402AB1 (retsize: 0;)
	return
	// succ:  fn00402A97_exit
fn00402A97_exit:


// fn00402AAD
// Return size: 0
void fn00402AAD()
fn00402AAD_entry:
	// succ:  l00402AAD
l00402AAD:
	esp = fp
	Mem0[esp:word32] = ebx
	esi = esi
fn00402AAD_exit:


// fn00402AB1
// Return size: 0
void fn00402AB1()
fn00402AB1_entry:
	// succ:  l00402AB1
l00402AB1:
	esp = fp
	edx = edx_eax % bl
	eax = edx_eax /u bl
	SCZO = cond(eax)
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	cl = cl - dh
	SCZO = cond(cl)
	dh = dh - ch
	SCZO = cond(dh)
	edx = edi
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	call fn00402364 (retsize: 4;)
	goto l00402ABC_thunk_fn00402AC1
	// succ:  l00402ABC_thunk_fn00402AC1
l00402AB1:
l00402ABC_thunk_fn00402AC1:
	call fn00402AC1 (retsize: 0;)
	return
	// succ:  fn00402AB1_exit
fn00402AB1_exit:


// fn00402AC1
// Return size: 0
void fn00402AC1()
fn00402AC1_entry:
	// succ:  l00402AC1
l00402AC1:
	esp = fp
	call SEQ(cs, Mem0[ebx + 0x0000006A:word16]) (retsize: 2;)
	goto l00402AC1_thunk_fn00402AC5
	// succ:  l00402AC1_thunk_fn00402AC5
l00402AC1:
l00402AC1_thunk_fn00402AC5:
	call fn00402AC5 (retsize: 0;)
	return
	// succ:  fn00402AC1_exit
fn00402AC1_exit:


// fn00402AC5
// Return size: 0
void fn00402AC5()
fn00402AC5_entry:
	// succ:  l00402AC5
l00402AC5:
	esp = fp
	esp = esp + 0x00000004
	bl = 0xE5
	ebx = ecx
	bl = bh
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	esi = esi + ecx
	SCZO = cond(esi)
	call fn004024C9 (retsize: 4;)
l00402AD8:
	branch Test(NO,O) l00402AD8
	// succ:  l00402ADA l00402AD8
l00402ADA:
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	__outb(0xDF, al)
	SCZDOP = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax - 0x00000001
	SZO = cond(eax)
	esp = esp + 0x00000004
	// succ:  l00402ADF_thunk_fn00402AE4
l00402ADF_thunk_fn00402AE4:
	call fn00402AE4 (retsize: 0;)
	return
	// succ:  fn00402AC5_exit
fn00402AC5_exit:


// fn00402AE0
// Return size: 0
void fn00402AE0()
fn00402AE0_entry:
	// succ:  l00402AE0
l00402AE0:
	esp = fp
	esp = esp + 0x00000004
	call fn00402859 (retsize: 4;)
	// succ:  l00402AE0_thunk_fn00402AE4 l00402AEF_thunk_fn00402AF4
l00402AE0_thunk_fn00402AE4:
	call fn00402AE4 (retsize: 0;)
	return
	// succ:  fn00402AE0_exit
l00402AEF_thunk_fn00402AF4:
	call fn00402AF4 (retsize: 0;)
	return
	// succ:  fn00402AE0_exit
fn00402AE0_exit:


// fn00402AE4
// Return size: 0
void fn00402AE4()
fn00402AE4_entry:
	// succ:  l00402AE4
l00402AE4:
	esp = fp
	cl = cl ^ dl
	SZO = cond(cl)
	C = false
	eax = edi
	al = ch
	dl = dl | dh
	SZO = cond(dl)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	cl = cl + ah
	SCZO = cond(cl)
	call fn00402859 (retsize: 4;)
	goto l00402AEF_thunk_fn00402AF4
	// succ:  l00402AEF_thunk_fn00402AF4
l00402AE4:
	cl = cl ^ dl
	SZO = cond(cl)
	C = false
	eax = edi
	al = ch
	dl = dl | dh
	SZO = cond(dl)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	cl = cl + ah
	SCZO = cond(cl)
l00402AEF_thunk_fn00402AF4:
	call fn00402AF4 (retsize: 0;)
	return
	// succ:  fn00402AE4_exit
fn00402AE4_exit:


// fn00402AF4
// Return size: 0
void fn00402AF4()
fn00402AF4_entry:
	goto l00402AF4
	// succ:  l00402AF4
l00402AD6:
l00402AF4:
	esp = fp
	branch Test(ULT,C) l00402AD6
	goto l00402AF6
	// succ:  l00402AF6 l00402AD6
l00402AF4:
	branch Test(ULT,C) TMP!
l00402AF6:
	al = al + 0x40 + C
	SCZO = cond(al)
	__outdw(edx, eax)
	esi = esi + 0x00000004
	// succ:  l00402AF8_thunk_fn00402AF9
l00402AF8_thunk_fn00402AF9:
	call fn00402AF9 (retsize: 0;)
	return
	// succ:  fn00402AF4_exit
fn00402AF4_exit:


// fn00402AF9
// Return size: 0
void fn00402AF9()
fn00402AF9_entry:
	// succ:  l00402AF9
l00402AF9:
	esp = fp
	esp = esp + 0x00000004
	ch = al
	bl = bl - ah
	SCZO = cond(bl)
	bh = bh ^ al
	SZO = cond(bh)
	C = false
	ch = ch | ah
	SZO = cond(ch)
	C = false
	ebx = ebx ^ ecx
	SZO = cond(ebx)
	C = false
	edi = edi + 0x00000001
	SZO = cond(edi)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	esi = esi | edx
	SZO = cond(esi)
	C = false
	call fn00402E0D (retsize: 4;)
	esp = esp + 0x00000001
	SZO = cond(esp)
	ah = ah + 0x70
	SCZO = cond(ah)
	// succ:  l00402B12_thunk_fn00402B15
l00402B12_thunk_fn00402B15:
	call fn00402B15 (retsize: 0;)
	return
	// succ:  fn00402AF9_exit
fn00402AF9_exit:


// fn00402B15
// Return size: 0
void fn00402B15()
fn00402B15_entry:
	// succ:  l00402B15
l00402B15:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = esi
	esi = v3
	cx = ecx
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	cl = cl - bh
	SCZO = cond(cl)
	call fn00402841 (retsize: 4;)
	al = __inb(0x94)
	al = Mem0[esi:byte]
	esi = esi + 0x00000001
	ax = __aam(al)
	v14 = Mem0[edi + 0x32D42444:word32] + ecx
	Mem0[edi + 0x32D42444:word32] = v14
	SCZO = cond(v14)
	// succ:  l00402B2C_thunk_fn00402B32
l00402B2C_thunk_fn00402B32:
	call fn00402B32 (retsize: 0;)
	return
	// succ:  fn00402B15_exit
fn00402B15_exit:


// fn00402B2D
// Return size: 0
void fn00402B2D()
fn00402B2D_entry:
	// succ:  l00402B2D
l00402B2D:
	esp = fp
	Mem0[esp - 0x0000002C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ah = ah ^ cl
	SZO = cond(ah)
	C = false
	call fn00402AE0 (retsize: 4;)
	// succ:  l00402B31_thunk_fn00402B32 l00402B40_thunk_fn00402B45
l00402B31_thunk_fn00402B32:
	call fn00402B32 (retsize: 0;)
	return
	// succ:  fn00402B2D_exit
l00402B40_thunk_fn00402B45:
	call fn00402B45 (retsize: 0;)
	return
	// succ:  fn00402B2D_exit
fn00402B2D_exit:


// fn00402B32
// Return size: 0
void fn00402B32()
fn00402B32_entry:
	// succ:  l00402B32
l00402B32:
	esp = fp
	ecx = ecx - 0x00000001
	branch Test(EQ,Z) && ecx != 0x00000000 l00402B32_thunk_fn00402B5E
	goto l00402B34
	// succ:  l00402B34 l00402B32_thunk_fn00402B5E
l00402B32:
	al = al - cl
	SCZO = cond(al)
	ecx = ecx - ebx
	SCZO = cond(ecx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00003000
	edx = edx + esi
	SCZO = cond(edx)
	ah = ah + cl
	SCZO = cond(ah)
l00402B32_thunk_fn00402B5E:
	call fn00402B5E (retsize: 0;)
	return
	// succ:  fn00402B32_exit
l00402B34:
	v6 = Mem0[ebx:word32] >>u 0xFFFFFFCB
	Mem0[ebx:word32] = v6
	SCZO = cond(v6)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00003000
	edx = edx + esi
	SCZO = cond(edx)
	ah = ah + cl
	SCZO = cond(ah)
	call fn00402AE0 (retsize: 4;)
	// succ:  l00402B40_thunk_fn00402B45
l00402B40_thunk_fn00402B45:
	call fn00402B45 (retsize: 0;)
	return
	// succ:  fn00402B32_exit
fn00402B32_exit:


// fn00402B45
// Return size: 0
void fn00402B45()
fn00402B45_entry:
	// succ:  l00402B45
l00402B45:
	esp = fp
	Mem0[fs:edx + 0x24448FD0:word32] = esp
	goto l00402B45_thunk_fn00402B4C
	// succ:  l00402B45_thunk_fn00402B4C
l00402B45:
	Mem0[fs:edx + 0x24448FD0:word32] = esp
	goto l00402B45_thunk_fn00402B4C
	// succ:  l00402B45_thunk_fn00402B4C
l00402B45_thunk_fn00402B4C:
	call fn00402B4C (retsize: 0;)
	return
	// succ:  fn00402B45_exit
l00402B45_thunk_fn00402B4C:
	call fn00402B4C (retsize: 0;)
	return
	// succ:  fn00402B45_exit
fn00402B45_exit:


// fn00402B49
// Return size: 0
void fn00402B49()
fn00402B49_entry:
	// succ:  l00402B49
l00402B49:
	esp = fp
	Mem0[esp - 0x00000030:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	call fn00402220 (retsize: 4;)
	// succ:  l00402B49_thunk_fn00402B4C l00402B5C_thunk_fn00402B61
l00402B49_thunk_fn00402B4C:
	call fn00402B4C (retsize: 0;)
	return
	// succ:  fn00402B49_exit
l00402B5C_thunk_fn00402B61:
	call fn00402B61 (retsize: 0;)
	return
	// succ:  fn00402B49_exit
fn00402B49_exit:


// fn00402B4C
// Return size: 0
void fn00402B4C()
fn00402B4C_entry:
	// succ:  l00402B4C
l00402B4C:
	esp = fp
	v3 = (Mem0[ebx:byte] & 0x01 << 0x08 - 0x01) != 0x00
	Mem0[ebx:byte] = __rol(Mem0[ebx:byte], 0x01)
	C = v3
	__cli()
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	edi = edi | eax
	SZO = cond(edi)
	C = false
	eax = eax + ebx
	SCZO = cond(eax)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bh = bh | dl
	SZO = cond(bh)
	C = false
	bl = bl + al
	SCZO = cond(bl)
	bl = bl - ch
	SCZO = cond(bl)
	goto l00402B5A_thunk_fn00402B5C
	// succ:  l00402B5A_thunk_fn00402B5C
l00402B4C:
	edi = edi + edx
	SCZO = cond(edi)
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	edi = edi | eax
	SZO = cond(edi)
	C = false
	eax = eax + ebx
	SCZO = cond(eax)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bh = bh | dl
	SZO = cond(bh)
	C = false
	bl = bl + al
	SCZO = cond(bl)
	bl = bl - ch
	SCZO = cond(bl)
l00402B5A_thunk_fn00402B5C:
	call fn00402B5C (retsize: 0;)
	return
	// succ:  fn00402B4C_exit
fn00402B4C_exit:


// fn00402B5C
// Return size: 0
void fn00402B5C()
fn00402B5C_entry:
	// succ:  l00402B5C
l00402B5C:
	esp = fp
	call fn00402220 (retsize: 4;)
	goto l00402B5C_thunk_fn00402B5E
	// succ:  l00402B5C_thunk_fn00402B5E
l00402B5C:
l00402B5C_thunk_fn00402B5E:
	call fn00402B5E (retsize: 0;)
	return
	// succ:  fn00402B5C_exit
fn00402B5C_exit:


// fn00402B5E
// Return size: 0
void fn00402B5E()
fn00402B5E_entry:
	// succ:  l00402B5E
l00402B5E:
	esp = fp
	edx = edx_eax % bh
	eax = edx_eax / bh
	SCZO = cond(eax)
l00402B5E:
	SZO = cond(al & 0x87)
	C = false
	C = !C
	al = al | 0x9D
	SZO = cond(al)
	C = false
	__outw(dx, ax)
	// succ:  l00402B66_thunk_fn00402B67
l00402B66_thunk_fn00402B67:
	call fn00402B67 (retsize: 0;)
	return
	// succ:  fn00402B5E_exit
fn00402B5E_exit:


// fn00402B61
// Return size: 0
void fn00402B61()
fn00402B61_entry:
	// succ:  l00402B61
l00402B61:
	esp = fp
	SZO = cond(al & 0x87)
	C = false
	C = !C
	al = al | 0x9D
	SZO = cond(al)
	C = false
	__outw(dx, ax)
	goto l00402B66_thunk_fn00402B67
	// succ:  l00402B66_thunk_fn00402B67
l00402B61:
l00402B66_thunk_fn00402B67:
	call fn00402B67 (retsize: 0;)
	return
	// succ:  fn00402B61_exit
fn00402B61_exit:


// fn00402B67
// Return size: 0
void fn00402B67()
fn00402B67_entry:
	// succ:  l00402B67
l00402B67:
	esp = fp
	Mem0[esp:word32] = edi
	ah = ah
	// succ:  l00402B6C
l00402B6C:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx ^ edx
	SZO = cond(ecx)
	C = false
	ch = -ch
	SCZO = cond(ch)
	C = ch == 0x00
	bh = bh ^ bl
	SZO = cond(bh)
	C = false
	ecx = ecx ^ ebx
	SZO = cond(ecx)
	C = false
	edx = edx + 0x00000001
	SZO = cond(edx)
	dl = dl - dh
	SCZO = cond(dl)
	edi = esi
	call fn00402611 (retsize: 4;)
	edx = edx - Mem0[ecx:word32]
	SCZO = cond(edx)
	branch Test(SG,S) l00402B6C
	// succ:  l00402B81_thunk_fn00402B83 l00402B6C
l00402B81_thunk_fn00402B83:
	call fn00402B83 (retsize: 0;)
	return
	// succ:  fn00402B67_exit l00402B81_thunk_fn00402B83
l00402B81_thunk_fn00402B83:
	call fn00402B83 (retsize: 0;)
	return
	// succ:  fn00402B67_exit
fn00402B67_exit:


// fn00402B83
// Return size: 6
void fn00402B83()
fn00402B83_entry:
	// succ:  l00402B83
l00402B83:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = eax
	eax = v3
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = eax
	ebx = eax
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ecx = ecx | edi
	SZO = cond(ecx)
	C = false
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	call fn00402C0C (retsize: 4;)
	return
	// succ:  fn00402B83_exit
fn00402B83_exit:


// fn00402B9B
// Return size: 0
void fn00402B9B()
fn00402B9B_entry:
	// succ:  l00402B9B
l00402B9B:
	esp = fp
	esp = esp + 0x00000004
	ebx = ebx - edx
	SCZO = cond(ebx)
	cl = cl + dh
	SCZO = cond(cl)
	ecx = ecx - esi
	SCZO = cond(ecx)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	eax = Mem0[edx:word32]
	bl = 0x89
	call fn00402192 (retsize: 4;)
	esp = esp | Mem0[esi + 0x448FE7C0:word32]
	SZO = cond(esp)
	C = false
	al = al & 0xE8
	SZO = cond(al)
	C = false
	ecx = ecx | esi
	SZO = cond(ecx)
	C = false
	bh = 0x9B
	ecx = ecx ^ esi
	SZO = cond(ecx)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	esi = esi - ecx
	SCZO = cond(esi)
	call fn0040202C (retsize: 4;)
	al = al ^ cl
	SZO = cond(al)
	C = false
	__outb(0xED, al)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ds
	branch Test(ULE,CZ) l00402BCB_thunk_fn00402B5C
	goto l00402BCB_thunk_fn00402BCD
	// succ:  l00402BCB_thunk_fn00402BCD l00402BCB_thunk_fn00402B5C
l00402BCB_thunk_fn00402B5C:
	call fn00402B5C (retsize: 0;)
	return
	// succ:  fn00402B9B_exit
l00402BCB_thunk_fn00402BCD:
	call fn00402BCD (retsize: 0;)
	return
	// succ:  fn00402B9B_exit l00402BCB_thunk_fn00402BCD
l00402BCB_thunk_fn00402BCD:
	call fn00402BCD (retsize: 0;)
	return
	// succ:  fn00402B9B_exit
fn00402B9B_exit:


// fn00402BB3
// Return size: 0
void fn00402BB3()
fn00402BB3_entry:
	// succ:  l00402BB3
l00402BB3:
	esp = fp
	Mem0[esp - 0x00000018:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx | esi
	SZO = cond(ecx)
	C = false
	bh = 0x9B
	ecx = ecx ^ esi
	SZO = cond(ecx)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	esi = esi - ecx
	SCZO = cond(esi)
	call fn0040202C (retsize: 4;)
	al = al ^ cl
	SZO = cond(al)
	C = false
	__outb(0xED, al)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ds
	branch Test(ULE,CZ) l00402BCB_thunk_fn00402B5C
	goto l00402BCB_thunk_fn00402BCD
	// succ:  l00402BCB_thunk_fn00402BCD l00402BCB_thunk_fn00402B5C
l00402BCB_thunk_fn00402B5C:
	call fn00402B5C (retsize: 0;)
	return
	// succ:  fn00402BB3_exit
l00402BCB_thunk_fn00402BCD:
	call fn00402BCD (retsize: 0;)
	return
	// succ:  fn00402BB3_exit l00402BCB_thunk_fn00402BCD
l00402BCB_thunk_fn00402BCD:
	call fn00402BCD (retsize: 0;)
	return
	// succ:  fn00402BB3_exit
fn00402BB3_exit:


// fn00402BCC
// Return size: 0
void fn00402BCC()
fn00402BCC_entry:
	// succ:  l00402BCC
l00402BCC:
	esp = fp
	Mem0[esp - 0x0000002C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	call fn00402498 (retsize: 4;)
	// succ:  l00402BCC_thunk_fn00402BCD l00402BE2_thunk_fn00402BE7
l00402BCC_thunk_fn00402BCD:
	call fn00402BCD (retsize: 0;)
	return
	// succ:  fn00402BCC_exit
l00402BE2_thunk_fn00402BE7:
	call fn00402BE7 (retsize: 0;)
	return
	// succ:  fn00402BCC_exit
fn00402BCC_exit:


// fn00402BCD
// Return size: 0
void fn00402BCD()
fn00402BCD_entry:
	// succ:  l00402BCD
l00402BCD:
	esp = fp
	esp = esp + 0x00000001
	SZO = cond(esp)
	al = al & 0xD4
	SZO = cond(al)
	C = false
	v6 = (dh & 0x01 << 0x08 - 0x1E) != 0x00
	dh = __rol(dh, 0x1E)
	C = v6
	bh = dh
	ebx = ebx - esi
	SCZO = cond(ebx)
	bl = bl ^ ah
	SZO = cond(bl)
	C = false
	ch = 0x2B
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bh = bh ^ dh
	SZO = cond(bh)
	C = false
	cl = cl | bh
	SZO = cond(cl)
	C = false
	bh = ah
	call fn00402498 (retsize: 4;)
	goto l00402BE2_thunk_fn00402BE7
	// succ:  l00402BE2_thunk_fn00402BE7
l00402BCD:
	v19 = (dh & 0x01 << 0x08 - 0x1E) != 0x00
	dh = __rol(dh, 0x1E)
	C = v19
	bh = dh
	ebx = ebx - esi
	SCZO = cond(ebx)
	bl = bl ^ ah
	SZO = cond(bl)
	C = false
	ch = 0x2B
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bh = bh ^ dh
	SZO = cond(bh)
	C = false
	cl = cl | bh
	SZO = cond(cl)
	C = false
	bh = ah
l00402BE2_thunk_fn00402BE7:
	call fn00402BE7 (retsize: 0;)
	return
	// succ:  fn00402BCD_exit
fn00402BCD_exit:


// fn00402BE7
// Return size: 0
void fn00402BE7()
fn00402BE7_entry:
	// succ:  l00402BE7
l00402BE7:
	esp = fp
	v4 = Mem0[edi + 0x01E67AF6:word32] & 0x0000007E
	Mem0[edi + 0x01E67AF6:word32] = v4
	SZO = cond(Mem0[edi + 0x01E67AF6:word32])
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	goto l00402BEE_thunk_fn00402BEF
	// succ:  l00402BEE_thunk_fn00402BEF
l00402BE7:
	v8 = Mem0[edi + 0x01E67AF6:word32] & 0x0000007E
	Mem0[edi + 0x01E67AF6:word32] = v8
	SZO = cond(Mem0[edi + 0x01E67AF6:word32])
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	goto l00402BEE_thunk_fn00402BEF
	// succ:  l00402BEE_thunk_fn00402BEF
l00402BEE_thunk_fn00402BEF:
	call fn00402BEF (retsize: 0;)
	return
	// succ:  fn00402BE7_exit
l00402BEE_thunk_fn00402BEF:
	call fn00402BEF (retsize: 0;)
	return
	// succ:  fn00402BE7_exit
fn00402BE7_exit:


// fn00402BEF
// Return size: 0
void fn00402BEF()
fn00402BEF_entry:
	// succ:  l00402BEF
l00402BEF:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = esi
	esi = v3
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	v6 = ah
	ah = ah
	ah = v6
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx + esi
	SCZO = cond(ebx)
	ch = 0x8D
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	ecx = ecx | ebx
	SZO = cond(ecx)
	C = false
	call fn00402D1D (retsize: 4;)
	__outb(0x0F, al)
fn00402BEF_exit:


// fn00402C0C
// Return size: 0
void fn00402C0C()
fn00402C0C_entry:
	// succ:  l00402C0C
l00402C0C:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = edi
	edi = v3
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh - dh
	SCZO = cond(bh)
	ebx = ebx ^ ecx
	SZO = cond(ebx)
	C = false
	ebx = ebx ^ ecx
	SZO = cond(ebx)
	C = false
	eax = eax + 0x00000001
	SZO = cond(eax)
	cl = cl | bl
	SZO = cond(cl)
	C = false
	call fn00402914 (retsize: 4;)
	// succ:  l00402C1B_thunk_fn00402C20
l00402C1B_thunk_fn00402C20:
	call fn00402C20 (retsize: 0;)
	return
	// succ:  fn00402C0C_exit
fn00402C0C_exit:


// fn00402C1D
// Return size: 0
void fn00402C1D()
fn00402C1D_entry:
	// succ:  l00402C1D
l00402C1D:
	esp = fp
	D = false
l00402C1D:
fn00402C1D_exit:


// fn00402C20
// Return size: 0
void fn00402C20()
fn00402C20_entry:
	// succ:  l00402C20
l00402C20:
	esp = fp
	__outb(dx, al)
	bl = bl - cl - C
	SCZO = cond(bl)
	es = Mem0[esp:selector]
	esp = esp + 0x00000002
	ss = Mem0[esp:selector]
	esp = esp + 0x00000002
	eax = eax + Mem0[edi + 0x00792404:word32] + C
	SCZO = cond(eax)
	goto l00402C25_thunk_fn00402C2B
	// succ:  l00402C25_thunk_fn00402C2B
l00402C20:
l00402C25_thunk_fn00402C2B:
	call fn00402C2B (retsize: 0;)
	return
	// succ:  fn00402C20_exit
fn00402C20_exit:


// fn00402C26
// Return size: 0
void fn00402C26()
fn00402C26_entry:
	// succ:  l00402C26
l00402C26:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = eax
	eax = v3
	branch Test(NS,S) l00402C2B
	// succ:  l00402C29_thunk_fn00402C2B
l00402C29_thunk_fn00402C2B:
	call fn00402C2B (retsize: 0;)
	return
	// succ:  fn00402C26_exit
fn00402C26_exit:


// fn00402C2B
// Return size: 0
void fn00402C2B()
fn00402C2B_entry:
	// succ:  l00402C2B
l00402C2B:
	ecx = ecx
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = bh
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	cl = cl ^ al
	SZO = cond(cl)
	C = false
	ecx = esi
	call fn004024AE (retsize: 4;)
	D = false
	SCZO = cond(eax - Mem0[edi:word32])
	edi = edi + 0x00000004
	bh = bh + Mem0[edx + 0x24648D0A:byte] + C
	SCZO = cond(bh)
	al = al + 0x03
	SCZO = cond(al)
	C = false
	dh = dh ^ cl
	SZO = cond(dh)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edx = edx | edi
	SZO = cond(edx)
	C = false
	dh = dh ^ bh
	SZO = cond(dh)
	C = false
	edi = edi + ecx
	SCZO = cond(edi)
	edi = edi + ebx
	SCZO = cond(edi)
	ch = ch ^ dh
	SZO = cond(ch)
	C = false
	call fn004029B3 (retsize: 4;)
	v20 = Mem0[ebp + 0xFF303E79:byte] << 0x01
	Mem0[ebp + 0xFF303E79:byte] = v20
	SCZO = cond(v20)
	ecx = ecx & Mem0[ebp + 0xF6042464:word32]
	SZO = cond(ecx)
	C = false
fn00402C2B_exit:


// fn00402C3F
// Return size: 0
void fn00402C3F()
fn00402C3F_entry:
	// succ:  l00402C3F
l00402C3F:
	esp = fp
	esp = esp + 0x00000004
	edi = edi + eax
	SCZO = cond(edi)
	dh = dh ^ cl
	SZO = cond(dh)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edx = edx | edi
	SZO = cond(edx)
	C = false
	dh = dh ^ bh
	SZO = cond(dh)
	C = false
	edi = edi + ecx
	SCZO = cond(edi)
	edi = edi + ebx
	SCZO = cond(edi)
	ch = ch ^ dh
	SZO = cond(ch)
	C = false
	call fn004029B3 (retsize: 4;)
	v16 = Mem0[ebp + 0xFF303E79:byte] << 0x01
	Mem0[ebp + 0xFF303E79:byte] = v16
	SCZO = cond(v16)
	ecx = ecx & Mem0[ebp + 0xF6042464:word32]
	SZO = cond(ecx)
	C = false
fn00402C3F_exit:


// fn00402C76
// Return size: 0
void fn00402C76()
fn00402C76_entry:
	// succ:  l00402C76
l00402C76:
	esp = fp
	esp = esp + 0x00000004
	dh = dh - ah
	SCZO = cond(dh)
	esi = edi
	edx = edx + 0x00000001
	SZO = cond(edx)
	edx = ebx
	al = al + ch
	SCZO = cond(al)
	cl = cl + dh
	SCZO = cond(cl)
	al = al - ah
	SCZO = cond(al)
	call fn004028AB (retsize: 4;)
	dl = dl ^ Mem0[ebp + 0x00000018:byte]
	SZO = cond(dl)
	C = false
	C = false
	esp = esp - edx
	SCZO = cond(esp)
	branch Test(UGE,C) l00402C92_thunk_fn00402C1D
	goto l00402C92_thunk_fn00402C94
	// succ:  l00402C92_thunk_fn00402C94 l00402C92_thunk_fn00402C1D
l00402C92_thunk_fn00402C1D:
	call fn00402C1D (retsize: 0;)
	return
	// succ:  fn00402C76_exit
l00402C92_thunk_fn00402C94:
	call fn00402C94 (retsize: 0;)
	return
	// succ:  fn00402C76_exit l00402C92_thunk_fn00402C94
l00402C92_thunk_fn00402C94:
	call fn00402C94 (retsize: 0;)
	return
	// succ:  fn00402C76_exit
fn00402C76_exit:


// fn00402C93
// Return size: 0
void fn00402C93()
fn00402C93_entry:
	// succ:  l00402C93
l00402C93:
	esp = fp
	Mem0[esp:word32] = eax
	// succ:  l00402C93_thunk_fn00402C94
l00402C93_thunk_fn00402C94:
	call fn00402C94 (retsize: 0;)
	return
	// succ:  fn00402C93_exit
fn00402C93_exit:


// fn00402C94
// Return size: 0
void fn00402C94()
fn00402C94_entry:
	// succ:  l00402C94
l00402C94:
	esp = fp
	al = al + 0x24
	SCZO = cond(al)
	v5 = dl
	dl = dl
	dl = v5
	goto l00402C98_thunk_fn00402C9D
	// succ:  l00402C98_thunk_fn00402C9D
l00402C94:
	v7 = dl
	dl = dl
	dl = v7
	// succ:  l00402C94_thunk_fn00402C9D
l00402C94_thunk_fn00402C9D:
	call fn00402C9D (retsize: 0;)
	return
	// succ:  fn00402C94_exit
l00402C98_thunk_fn00402C9D:
	call fn00402C9D (retsize: 0;)
	return
	// succ:  fn00402C94_exit
fn00402C94_exit:


// fn00402C9D
// Return size: 0
void fn00402C9D()
fn00402C9D_entry:
	// succ:  l00402C9D
l00402C9D:
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[ecx:word32]
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	ah = dh
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ah = ah ^ cl
	SZO = cond(ah)
	C = false
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	call fn00402517 (retsize: 4;)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = ebp + 0x00000001
	SZO = cond(ebp)
	SCZO = ah
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	eax = eax + 0x24648D60 + C
	SCZO = cond(eax)
	// succ:  l00402CB2_thunk_fn00402CB7
l00402CB2_thunk_fn00402CB7:
	call fn00402CB7 (retsize: 0;)
	return
	// succ:  fn00402C9D_exit
fn00402C9D_exit:


// fn00402CB4
// Return size: 0
void fn00402CB4()
fn00402CB4_entry:
	// succ:  l00402CB4
l00402CB4:
	esp = fp
	esp = esp + 0x00000004
	call fn00402CE5 (retsize: 4;)
	// succ:  l00402CB4_thunk_fn00402CB6 l00402CBF_thunk_fn00402CC4
l00402CB4_thunk_fn00402CB6:
	call fn00402CB6 (retsize: 0;)
	return
	// succ:  fn00402CB4_exit
l00402CBF_thunk_fn00402CC4:
	call fn00402CC4 (retsize: 0;)
	return
	// succ:  fn00402CB4_exit
fn00402CB4_exit:


// fn00402CB6
// Return size: 0
void fn00402CB6()
fn00402CB6_entry:
	// succ:  l00402CB6
l00402CB6:
	esp = fp
	al = al & 0x04
	SZO = cond(al)
	C = false
	goto l00402CB6_thunk_fn00402CB7
	// succ:  l00402CB6_thunk_fn00402CB7
l00402CB6:
	bh = 0x23
	esi = esi + 0x00000001
	SZO = cond(esi)
	bl = 0xAE
	eax = eax - 0x00000001
	SZO = cond(eax)
	edx = edx - 0x00000001
	SZO = cond(edx)
l00402CB6_thunk_fn00402CB7:
	call fn00402CB7 (retsize: 0;)
	return
	// succ:  fn00402CB6_exit
fn00402CB6_exit:


// fn00402CB7
// Return size: 0
void fn00402CB7()
fn00402CB7_entry:
	// succ:  l00402CB7
l00402CB7:
	esp = fp
	al = al + 0xB7
	SCZO = cond(al)
	eax = eax & Mem0[esi - 0x0000004D:word32]
	SZO = cond(eax)
	C = false
	SCZO = cond(al - Mem0[edi:byte])
	edi = edi + 0x00000001
	eax = eax - 0x00000001
	SZO = cond(eax)
	edx = edx - 0x00000001
	SZO = cond(edx)
	call fn00402CE5 (retsize: 4;)
	goto l00402CBF_thunk_fn00402CC4
	// succ:  l00402CBF_thunk_fn00402CC4
l00402CB7:
	bh = 0x23
	esi = esi + 0x00000001
	SZO = cond(esi)
	bl = 0xAE
	eax = eax - 0x00000001
	SZO = cond(eax)
	edx = edx - 0x00000001
	SZO = cond(edx)
	call fn00402CE5 (retsize: 4;)
	ch = 0x42
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	__cli()
l00402CBF_thunk_fn00402CC4:
	call fn00402CC4 (retsize: 0;)
	return
	// succ:  fn00402CB7_exit
fn00402CB7_exit:


// fn00402CC4
// Return size: 0
void fn00402CC4()
fn00402CC4_entry:
	// succ:  l00402CC4
l00402CC4:
	esp = fp
	ch = 0x42
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	__cli()
l00402CC4:
	ch = 0x42
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	__cli()
fn00402CC4_exit:


// fn00402CCC
// Return size: 0
void fn00402CCC()
fn00402CCC_entry:
	// succ:  l00402CCC
l00402CCC:
	esp = fp
	esp = esp + 0x00000004
	edx = edx - 0x00000001
	SZO = cond(edx)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	eax = eax - esi
	SCZO = cond(eax)
	edx = edx | esi
	SZO = cond(edx)
	C = false
	esi = esi | ecx
	SZO = cond(esi)
	C = false
	edi = edi + 0x00000001
	SZO = cond(edi)
	call fn00402D5A (retsize: 4;)
	int3()
	v12 = esp
	esp = ebp
	ebp = v12
	esp = esp - 0x00000004
	Mem0[esp:word32] = es
	al = __inb(0x83)
	// succ:  l00402CE3_thunk_fn00402CE5
l00402CE3_thunk_fn00402CE5:
	call fn00402CE5 (retsize: 0;)
	return
	// succ:  fn00402CCC_exit
fn00402CCC_exit:


// fn00402CE5
// Return size: 0
void fn00402CE5()
fn00402CE5_entry:
	// succ:  l00402CE5
l00402CE5:
	esp = fp
	Mem0[esp - 0x0000001C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	call fn00402C93 (retsize: 4;)
	// succ:  l00402CE5_thunk_fn00402CE8 l00402CF6_thunk_fn00402CFB
l00402CE5_thunk_fn00402CE8:
	call fn00402CE8 (retsize: 0;)
	return
	// succ:  fn00402CE5_exit
l00402CF6_thunk_fn00402CFB:
	call fn00402CFB (retsize: 0;)
	return
	// succ:  fn00402CE5_exit
fn00402CE5_exit:


// fn00402CE8
// Return size: 0
void fn00402CE8()
fn00402CE8_entry:
	// succ:  l00402CE8
l00402CE8:
	esp = fp
	al = __inb(0x0B)
	__cli()
	edi = edi - ebx
	SCZO = cond(edi)
	eax = eax + 0x00000001
	SZO = cond(eax)
	dl = dh
	bl = bl - dl
	SCZO = cond(bl)
	al = al - ah
	SCZO = cond(al)
	edx = edx | ecx
	SZO = cond(edx)
	C = false
	call fn00402C93 (retsize: 4;)
	goto l00402CF6_thunk_fn00402CFB
	// succ:  l00402CF6_thunk_fn00402CFB
l00402CE8:
	edi = edi | edx
	SZO = cond(edi)
	C = false
	edi = edi - ebx
	SCZO = cond(edi)
	eax = eax + 0x00000001
	SZO = cond(eax)
	dl = dh
	bl = bl - dl
	SCZO = cond(bl)
	al = al - ah
	SCZO = cond(al)
	edx = edx | ecx
	SZO = cond(edx)
	C = false
l00402CF6_thunk_fn00402CFB:
	call fn00402CFB (retsize: 0;)
	return
	// succ:  fn00402CE8_exit
fn00402CE8_exit:


// fn00402CFB
// Return size: 0
void fn00402CFB()
fn00402CFB_entry:
	// succ:  l00402CFB
l00402CFB:
	esp = fp
	cl = 0x21
l00402CFB:
	cl = 0x21
fn00402CFB_exit:


// fn00402D00
// Return size: 0
void fn00402D00()
fn00402D00_entry:
	// succ:  l00402D00
l00402D00:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = esi
	esi = v3
fn00402D00_exit:


// fn00402D1D
// Return size: 0
void fn00402D1D()
fn00402D1D_entry:
	// succ:  l00402D1D
l00402D1D:
	esp = fp
	Mem0[esp - 0x00000010:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	cl = 0x83
	dh = ~dh
	call fn00402995 (retsize: 4;)
	branch Test(ULT,C) l00402D59
	// succ:  l00402D31 l00402D59
l00402D31:
	branch Test(LE,SZO) l00402D31_thunk_fn00402CB6
	goto l00402D33
	// succ:  l00402D33 l00402D31_thunk_fn00402CB6
l00402D31_thunk_fn00402CB6:
	call fn00402CB6 (retsize: 0;)
	return
	// succ:  fn00402D1D_exit
l00402D33:
	v10 = Mem0[esp:word32]
	Mem0[esp:word32] = eax
	eax = v10
	branch Test(LT,SO) l00402D38
	// succ:  l00402D38
l00402D38:
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = eax
	ecx = ecx | ebx
	SZO = cond(ecx)
	C = false
	bl = dh
	ebx = ebx + edi
	SCZO = cond(ebx)
	bh = bh ^ cl
	SZO = cond(bh)
	C = false
	Mem0[esp - 0x0000002C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx - 0x00000001
	SZO = cond(edx)
	bl = 0x3A
	cl = 0x4E
	cl = cl - al
	SCZO = cond(cl)
	bl = bl - cl
	SCZO = cond(bl)
	call fn00402C3F (retsize: 4;)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx & esp
	SZO = cond(ebx)
	C = false
	rArg0 = rArg0 / (real64) Mem0[eax - 0x00000073:word32]
	// succ:  l00402D58_thunk_fn00402D5B
l00402D58_thunk_fn00402D5B:
	call fn00402D5B (retsize: 0;)
	return
	// succ:  fn00402D1D_exit
l00402D59:
	branch Test(OV,O) l00402D59_thunk_fn00402CE8
	goto l00402D59_thunk_fn00402D5B
	// succ:  l00402D59_thunk_fn00402D5B l00402D59_thunk_fn00402CE8
l00402D59_thunk_fn00402CE8:
	call fn00402CE8 (retsize: 0;)
	return
	// succ:  fn00402D1D_exit
l00402D59_thunk_fn00402D5B:
	call fn00402D5B (retsize: 0;)
	return
	// succ:  fn00402D1D_exit l00402D59_thunk_fn00402D5B
l00402D59_thunk_fn00402D5B:
	call fn00402D5B (retsize: 0;)
	return
	// succ:  fn00402D1D_exit
fn00402D1D_exit:


// fn00402D43
// Return size: 0
void fn00402D43()
fn00402D43_entry:
	// succ:  l00402D43
l00402D43:
	esp = fp
	Mem0[esp - 0x0000002C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx - 0x00000001
	SZO = cond(edx)
	bl = 0x3A
	cl = 0x4E
	cl = cl - al
	SCZO = cond(cl)
	bl = bl - cl
	SCZO = cond(bl)
	call fn00402C3F (retsize: 4;)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx & esp
	SZO = cond(ebx)
	C = false
	rArg0 = rArg0 / (real64) Mem0[eax - 0x00000073:word32]
	// succ:  l00402D58_thunk_fn00402D5B
l00402D58_thunk_fn00402D5B:
	call fn00402D5B (retsize: 0;)
	return
	// succ:  fn00402D43_exit
fn00402D43_exit:


// fn00402D5A
// Return size: 0
void fn00402D5A()
fn00402D5A_entry:
	// succ:  l00402D5A
l00402D5A:
	esp = fp
	esp = esp + 0x00000004
	call fn004026F6 (retsize: 4;)
	// succ:  l00402D5A_thunk_fn00402D5B l00402D6A_thunk_fn00402D6F
l00402D5A_thunk_fn00402D5B:
	call fn00402D5B (retsize: 0;)
	return
	// succ:  fn00402D5A_exit
l00402D6A_thunk_fn00402D6F:
	call fn00402D6F (retsize: 0;)
	return
	// succ:  fn00402D5A_exit
fn00402D5A_exit:


// fn00402D5B
// Return size: 0
void fn00402D5B()
fn00402D5B_entry:
	// succ:  l00402D5B
l00402D5B:
	esp = fp
	al = al & 0x04
	SZO = cond(al)
	C = false
	dl = 0x42
	ah = ah - al
	SCZO = cond(ah)
	edi = edi + 0x00000001
	SZO = cond(edi)
	bh = bh - cl
	SCZO = cond(bh)
	dl = dl - cl
	SCZO = cond(dl)
	al = al ^ dh
	SZO = cond(al)
	C = false
	goto l00402D67_thunk_fn00402D69
	// succ:  l00402D67_thunk_fn00402D69
l00402D5B:
	dl = 0x42
	ah = ah - al
	SCZO = cond(ah)
	edi = edi + 0x00000001
	SZO = cond(edi)
	bh = bh - cl
	SCZO = cond(bh)
	dl = dl - cl
	SCZO = cond(dl)
	al = al ^ dh
	SZO = cond(al)
	C = false
	// succ:  l00402D64_thunk_fn00402D69
l00402D64_thunk_fn00402D69:
	call fn00402D69 (retsize: 0;)
	return
	// succ:  fn00402D5B_exit
l00402D67_thunk_fn00402D69:
	call fn00402D69 (retsize: 0;)
	return
	// succ:  fn00402D5B_exit
fn00402D5B_exit:


// fn00402D69
// Return size: 0
void fn00402D69()
fn00402D69_entry:
	// succ:  l00402D69
l00402D69:
	esp = fp
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	call fn004026F6 (retsize: 4;)
	goto l00402D6A_thunk_fn00402D6F
	// succ:  l00402D6A_thunk_fn00402D6F
l00402D69:
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
l00402D6A_thunk_fn00402D6F:
	call fn00402D6F (retsize: 0;)
	return
	// succ:  fn00402D69_exit
fn00402D69_exit:


// fn00402D6F
// Return size: 0
void fn00402D6F()
fn00402D6F_entry:
	// succ:  l00402D6F
l00402D6F:
	esp = fp
	al = al - 0x4C
	SCZO = cond(al)
	al = Mem0[0x24448FD3:byte]
	rArg0 = rArg0 * Mem0[ebx + 0x03F98BF3:real32]
l00402D6F:
	al = al - 0x4C
	SCZO = cond(al)
	al = Mem0[0x24448FD3:byte]
	rArg0 = rArg0 * Mem0[ebx + 0x03F98BF3:real32]
fn00402D6F_exit:


// fn00402D8A
// Return size: 0
void fn00402D8A()
fn00402D8A_entry:
	// succ:  l00402D8A
l00402D8A:
	Mem0[esp:word32] = esi
	v4 = ch
	ch = ch
	ch = v4
	ecx = ecx
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ch = ch + dh
	SCZO = cond(ch)
	edi = edx
	ebx = ecx
	edx = edx - 0x0865ADAE
	SCZO = cond(edx)
	cl = 0xAC
	edi = edi - 0x00000001
	SZO = cond(edi)
	call fn00402DAE (retsize: 4;)
	// succ:  l22B9_3122
l22B9_3122:
fn00402D8A_exit:


// fn00402DAE
// Return size: 0
void fn00402DAE()
fn00402DAE_entry:
	// succ:  l00402DAE
l00402DAE:
	esp = fp
	esp = esp + 0x00000004
	// succ:  l00402DAF
l00402DAF:
	bl = bl + bh
	SCZO = cond(bl)
	cl = cl - bh
	SCZO = cond(cl)
	bh = bh ^ cl
	SZO = cond(bh)
	C = false
	bh = dl
	cl = 0x37
	edi = edi | eax
	SZO = cond(edi)
	C = false
	bl = bl | ah
	SZO = cond(bl)
	C = false
	ebx = ebx + edi
	SCZO = cond(ebx)
	ecx = edi
	call fn00402D00 (retsize: 4;)
	esp = 0x89DE33B3
	al = al - 0x24 - C
	SCZO = cond(al)
	cx = ecx
	branch Test(NO,O) l00402DD5
	// succ:  l00402DD5
l00402DD5:
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ch = ch | cl
	SZO = cond(ch)
	C = false
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	bh = 0x60
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	call fn004022A9 (retsize: 4;)
	ebp = ebp + 0x00000001
	SZO = cond(ebp)
	branch Test(SG,S) l00402DAF
	// succ:  l00402DE6 l00402DAF
l00402DE6:
	Z = __arpl(Mem0[edx + 0x3487EE52:word16], bx, &Mem0[edx + 0x3487EE52:word16])
	// succ:  l00402DE6_thunk_fn00402DEC
l00402DE6_thunk_fn00402DEC:
	call fn00402DEC (retsize: 0;)
	return
	// succ:  fn00402DAE_exit
fn00402DAE_exit:


// fn00402DEA
// Return size: 0
void fn00402DEA()
fn00402DEA_entry:
	// succ:  l00402DEA
l00402DEA:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = esi
	esi = v3
	// succ:  l00402DEA_thunk_fn00402DEC
l00402DEA_thunk_fn00402DEC:
	call fn00402DEC (retsize: 0;)
	return
	// succ:  fn00402DEA_exit
fn00402DEA_exit:


// fn00402DEC
// Return size: 0
void fn00402DEC()
fn00402DEC_entry:
	// succ:  l00402DEC
l00402DEC:
	esp = fp
	al = al & 0x7A
	SZO = cond(al)
	C = false
	v8 = Mem0[esi + 0x00000053:byte] + ah
	Mem0[esi + 0x00000053:byte] = v8
	SCZO = cond(v8)
	goto l00402DEE_thunk_fn00402DF1
	// succ:  l00402DEE_thunk_fn00402DF1
l00402DEC:
	branch Test(PE,P) l00402DEF
	goto l00402DEF
	// succ:  l00402DEF
l00402DEE_thunk_fn00402DF1:
	call fn00402DF1 (retsize: 0;)
	return
	// succ:  fn00402DEC_exit
l00402DEF:
	esp = esp - 0x00000002
	Mem0[esp:word16] = bx
	call fn00402A47 (retsize: 4;)
	// succ:  l00402DEF_thunk_fn00402DF1 l00402E00_thunk_fn00402E05
l00402DEF_thunk_fn00402DF1:
	call fn00402DF1 (retsize: 0;)
	return
	// succ:  fn00402DEC_exit
l00402E00_thunk_fn00402E05:
	call fn00402E05 (retsize: 0;)
	return
	// succ:  fn00402DEC_exit
fn00402DEC_exit:


// fn00402DF1
// Return size: 0
void fn00402DF1()
fn00402DF1_entry:
	// succ:  l00402DF1
l00402DF1:
	esp = fp
	bx = Mem0[esp:word16]
	esp = esp + 0x00000002
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi - 0x00000001
	SZO = cond(edi)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bl = bl - dl
	SCZO = cond(bl)
	goto l00402DF6_thunk_fn00402DF7
	// succ:  l00402DF6_thunk_fn00402DF7
l00402DF1:
	bx = Mem0[esp:word16]
	esp = esp + 0x00000002
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi - 0x00000001
	SZO = cond(edi)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bl = bl - dl
	SCZO = cond(bl)
	bh = 0x22
	esi = esi - ebx
	SCZO = cond(esi)
	bh = bh | ch
	SZO = cond(bh)
	C = false
	bl = dl
l00402DF6_thunk_fn00402DF7:
	call fn00402DF7 (retsize: 0;)
	return
	// succ:  fn00402DF1_exit
fn00402DF1_exit:


// fn00402DF7
// Return size: 0
void fn00402DF7()
fn00402DF7_entry:
	// succ:  l00402DF7
l00402DF7:
	bh = 0x22
	esi = esi - ebx
	SCZO = cond(esi)
	bh = bh | ch
	SZO = cond(bh)
	C = false
	bl = dl
	call fn00402A47 (retsize: 4;)
	// succ:  l00402DFF_thunk_fn00402E05
l00402DFF_thunk_fn00402E05:
	call fn00402E05 (retsize: 0;)
	return
	// succ:  fn00402DF7_exit
fn00402DF7_exit:


// fn00402E05
// Return size: 0
void fn00402E05()
fn00402E05_entry:
	// succ:  l00402E05
l00402E05:
	esp = fp
	al = al + 0x55 + C
	SCZO = cond(al)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ds
	branch Test(LE,SZO) l00402E08_thunk_fn00402DF7
	goto l00402E08_thunk_fn00402E0A
	// succ:  l00402E08_thunk_fn00402E0A l00402E08_thunk_fn00402DF7
l00402E05:
	al = al + 0x55 + C
	SCZO = cond(al)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ds
	branch Test(LE,SZO) l00402DF7
	goto l00402E08_thunk_fn00402E0A
	// succ:  l00402E08_thunk_fn00402E0A l00402E08_thunk_fn00402DF7
l00402E08_thunk_fn00402DF7:
	call fn00402DF7 (retsize: 0;)
	return
	// succ:  fn00402E05_exit
l00402E08_thunk_fn00402DF7:
	call fn00402DF7 (retsize: 0;)
	return
	// succ:  fn00402E05_exit
l00402E08_thunk_fn00402E0A:
	call fn00402E0A (retsize: 0;)
	return
	// succ:  fn00402E05_exit l00402E08_thunk_fn00402E0A
l00402E08_thunk_fn00402E0A:
	call fn00402E0A (retsize: 0;)
	return
	// succ:  fn00402E05_exit
l00402E08_thunk_fn00402E0A:
	call fn00402E0A (retsize: 0;)
	return
	// succ:  fn00402E05_exit
fn00402E05_exit:


// fn00402E0A
// Return size: 0
void fn00402E0A()
fn00402E0A_entry:
	call fn00402DF7 (retsize: 0;)
	return
	// succ:  l00402E0A fn00402E0A_exit
l00402E0A:
	al = __inb(dx)
	SZO = cond(bh & dl)
	C = false
	// succ:  l00402E0B_thunk_fn00402E0D
l00402E0B_thunk_fn00402E0D:
	call fn00402E0D (retsize: 0;)
	return
	// succ:  fn00402E0A_exit
fn00402E0A_exit:


// fn00402E0D
// Return size: 0
void fn00402E0D()
fn00402E0D_entry:
	// succ:  l00402E0D
l00402E0D:
	esp = fp
	esp = esp + 0x00000004
	esi = esi - edi
	SCZO = cond(esi)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	bh = bh - cl
	SCZO = cond(bh)
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
fn00402E0D_exit:


// fn00402E27
// Return size: 6
void fn00402E27()
fn00402E27_entry:
	// succ:  l00402E27
l00402E27:
	esp = fp
	Mem0[esp - 0x00000030:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx ^ edi
	SZO = cond(edx)
	C = false
	ecx = ecx | esi
	SZO = cond(ecx)
	C = false
	ecx = ecx + edx
	SCZO = cond(ecx)
	bh = bh ^ ch
	SZO = cond(bh)
	C = false
	ch = ch + bh
	SCZO = cond(ch)
	call fn00402E41 (retsize: 4;)
	v14 = Mem0[ebx + 0x00000041:byte] + ah
	Mem0[ebx + 0x00000041:byte] = v14
	SCZO = cond(v14)
	ah = FPUF
	SCZO = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00402E27_exit
fn00402E27_exit:


// fn00402E41
// Return size: 0
void fn00402E41()
fn00402E41_entry:
	// succ:  l00402E41
l00402E41:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = edi
	edi = v3
	v5 = esi
	esi = esi
	esi = v5
	edx = edx
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	cl = cl ^ dl
	SZO = cond(cl)
	C = false
	bl = bl ^ dl
	SZO = cond(bl)
	C = false
	ch = ch | al
	SZO = cond(ch)
	C = false
	dl = dl - al
	SCZO = cond(dl)
	edx = ecx
	edx = edi
	call fn004028F8 (retsize: 4;)
fn00402E41_exit:


// fn00402E77
// Return size: 4
void fn00402E77()
fn00402E77_entry:
	// succ:  l00402E77
l00402E77:
	esp = fp
	Mem0[esp - 0x00000030:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh + ch
	SCZO = cond(bh)
	eax = eax + 0x00000078
	bh = bh - al
	SCZO = cond(bh)
	edi = edi | edx
	SZO = cond(edi)
	C = false
	bl = bl - al
	SCZO = cond(bl)
	bl = bl + cl
	SCZO = cond(bl)
	bl = bl + al
	SCZO = cond(bl)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	call fn00402807 (retsize: 4;)
	return
	// succ:  fn00402E77_exit
fn00402E77_exit:


// fn00402E97
// Return size: 0
void fn00402E97()
fn00402E97_entry:
	// succ:  l00402E97
l00402E97:
	esp = fp
	esp = esp + 0x00000004
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	ch = ch - bl
	SCZO = cond(ch)
	bl = dh
	bh = bh ^ al
	SZO = cond(bh)
	C = false
	ebx = eax
	call fn00402ECB (retsize: 4;)
	esp = esp + 0xFFFFF768
	edx_eax = (int64) eax
fn00402E97_exit:


// fn00402EAE
// Return size: 0
void fn00402EAE()
fn00402EAE_entry:
	// succ:  l00402EAE
l00402EAE:
	esp = fp
	esp = esp + 0x00000004
	cl = cl | dl
	SZO = cond(cl)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	dh = 0x60
	bh = bh | al
	SZO = cond(bh)
	C = false
	cl = cl | al
	SZO = cond(cl)
	C = false
	dh = dh + ch
	SCZO = cond(dh)
	edx = edx ^ edi
	SZO = cond(edx)
	C = false
	call fn00402BB3 (retsize: 4;)
	Mem0[edi:word32] = __in(edx)
	edi = edi + 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
fn00402EAE_exit:


// fn00402ECB
// Return size: 6
void fn00402ECB()
fn00402ECB_entry:
	// succ:  l00402ECB
l00402ECB:
	esp = fp
	Mem0[esp - 0x00000028:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx - edx
	SCZO = cond(ecx)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ecx = ecx - edx
	SCZO = cond(ecx)
	bh = bh + al
	SCZO = cond(bh)
	cl = 0x70
	dh = dh + 0x41
	SCZO = cond(dh)
	ch = -ch
	SCZO = cond(ch)
	C = ch == 0x00
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ch = cl
	call fn00402BEF (retsize: 4;)
	return
	// succ:  fn00402ECB_exit
fn00402ECB_exit:


// fn8A1670FC
// Return size: 0
void fn8A1670FC()
fn8A1670FC_entry:
	// succ:  l8A1670FC
l8A1670FC:
fn8A1670FC_exit:


// fnC3FDBB78
// Return size: 0
void fnC3FDBB78()
fnC3FDBB78_entry:
	// succ:  lC3FDBB78
lC3FDBB78:
fnC3FDBB78_exit:


