// fn00401006
// Return size: 0
void fn00401006()
fn00401006_entry:
	// succ:  l00401006
l00401006:
	esp = fp
	esp = esp + 0x00000004
	// succ:  l00401006_thunk_fn00401007
l00401006_thunk_fn00401007:
	call fn00401007 (retsize: 0;)
	return
	// succ:  fn00401006_exit
fn00401006_exit:


// fn00401007
// Return size: 0
void fn00401007()
fn00401007_entry:
	// succ:  l00401007
l00401007:
	esp = fp
	al = al & 0x04
	SZO = cond(al)
	C = false
	ecx = edi
	esi = esi - 0x00000001
	SZO = cond(esi)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ebx = ebx ^ ecx
	SZO = cond(ebx)
	C = false
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	edx = edx ^ ebx
	SZO = cond(edx)
	C = false
	branch Test(PE,P) l00401014_thunk_fn004012BE
	goto l00401014_thunk_fn0040101A
	// succ:  l00401014_thunk_fn0040101A l00401014_thunk_fn004012BE
l00401007:
	ecx = edi
	esi = esi - 0x00000001
	SZO = cond(esi)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ebx = ebx ^ ecx
	SZO = cond(ebx)
	C = false
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	edx = edx ^ ebx
	SZO = cond(edx)
	C = false
	branch Test(PE,P) l00401014_thunk_fn004012BE
	// succ:  l00401011_thunk_fn0040101A l00401014_thunk_fn004012BE
l00401011_thunk_fn0040101A:
	call fn0040101A (retsize: 0;)
	return
	// succ:  fn00401007_exit
l00401014_thunk_fn0040101A:
	call fn0040101A (retsize: 0;)
	return
	// succ:  fn00401007_exit l00401014_thunk_fn0040101A
l00401014_thunk_fn0040101A:
	call fn0040101A (retsize: 0;)
	return
	// succ:  fn00401007_exit
l00401014_thunk_fn004012BE:
	call fn004012BE (retsize: 0;)
	return
	// succ:  fn00401007_exit
l00401014_thunk_fn004012BE:
	call fn004012BE (retsize: 0;)
	return
	// succ:  fn00401007_exit
fn00401007_exit:


// fn0040101A
// Return size: 0
void fn0040101A()
fn0040101A_entry:
	// succ:  l0040101A
l0040101A:
	esp = esp - 0x00000002
	Mem0[esp:word16] = cx
	cx = Mem0[esp:word16]
	esp = esp + 0x00000002
	v5 = ebx
	ebx = ebx
	ebx = v5
	branch Test(PO,P) l00401020_thunk_fn004012BE
	goto l00401026
	// succ:  l00401026 l00401020_thunk_fn004012BE
l00401020_thunk_fn004012BE:
	call fn004012BE (retsize: 0;)
	return
	// succ:  fn0040101A_exit
l00401026:
	v10 = Mem0[edi:byte] + bl + C
	Mem0[edi:byte] = v10
	SCZO = cond(v10)
	ebx = Mem0[edi + 0x648D9901:word32] *s 0xF98B0424
	SCZO = cond(ebx)
	// succ:  l00401028_thunk_fn00401032
l00401028_thunk_fn00401032:
	call fn00401032 (retsize: 0;)
	return
	// succ:  fn0040101A_exit
fn0040101A_exit:


// fn0040102C
// Return size: 0
void fn0040102C()
fn0040102C_entry:
	// succ:  l0040102C
l0040102C:
	esp = fp
	esp = esp + 0x00000004
	edi = ecx
	// succ:  l00401030_thunk_fn00401032
l00401030_thunk_fn00401032:
	call fn00401032 (retsize: 0;)
	return
	// succ:  fn0040102C_exit
fn0040102C_exit:


// fn00401032
// Return size: 0
void fn00401032()
fn00401032_entry:
	// succ:  l00401032
l00401032:
	esp = fp
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	edx = edx - ecx
	SCZO = cond(edx)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	esi = esi + edi
	SCZO = cond(esi)
	esi = esi - edx
	SCZO = cond(esi)
	edx = edx + 0x00000001
	SZO = cond(edx)
	branch Test(SG,S) l0040103D_thunk_fn0040104B
	goto l0040103D_thunk_fn0040103F
	// succ:  l0040103D_thunk_fn0040103F l0040103D_thunk_fn0040104B
l00401032:
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	edx = edx - ecx
	SCZO = cond(edx)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	esi = esi + edi
	SCZO = cond(esi)
	esi = esi - edx
	SCZO = cond(esi)
	edx = edx + 0x00000001
	SZO = cond(edx)
	branch Test(SG,S) l0040104B
	goto l0040103D_thunk_fn0040103F
	// succ:  l0040103D_thunk_fn0040103F l0040103D_thunk_fn0040104B
l0040103D_thunk_fn0040103F:
	call fn0040103F (retsize: 0;)
	return
	// succ:  fn00401032_exit l0040103D_thunk_fn0040103F
l0040103D_thunk_fn0040103F:
	call fn0040103F (retsize: 0;)
	return
	// succ:  fn00401032_exit
l0040103D_thunk_fn0040103F:
	call fn0040103F (retsize: 0;)
	return
	// succ:  fn00401032_exit
l0040103D_thunk_fn0040104B:
	call fn0040104B (retsize: 0;)
	return
	// succ:  fn00401032_exit
l0040103D_thunk_fn0040104B:
	call fn0040104B (retsize: 0;)
	return
	// succ:  fn00401032_exit
fn00401032_exit:


// fn0040103F
// Return size: 0
void fn0040103F()
fn0040103F_entry:
	goto l0040103F
	// succ:  l0040103F
l00400FD7:
	v15 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v15
	SCZO = cond(v15)
	v16 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v16
	SCZO = cond(v16)
	v17 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v17
	SCZO = cond(v17)
	v18 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v18
	SCZO = cond(v18)
	v19 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v19
	SCZO = cond(v19)
	v20 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v20
	SCZO = cond(v20)
	v21 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v21
	SCZO = cond(v21)
	v22 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v22
	SCZO = cond(v22)
	v23 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v23
	SCZO = cond(v23)
	v24 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v24
	SCZO = cond(v24)
	v25 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v25
	SCZO = cond(v25)
	v26 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v26
	SCZO = cond(v26)
	v27 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v27
	SCZO = cond(v27)
	v28 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v28
	SCZO = cond(v28)
	v29 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v29
	SCZO = cond(v29)
	v30 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v30
	SCZO = cond(v30)
	v31 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v31
	SCZO = cond(v31)
	v32 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v32
	SCZO = cond(v32)
	v33 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v33
	SCZO = cond(v33)
	v34 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v34
	SCZO = cond(v34)
	v35 = Mem0[esi + 0x00000051:byte] + al
	Mem0[esi + 0x00000051:byte] = v35
	SCZO = cond(v35)
	v36 = eax
	eax = ecx
	ecx = v36
	al = __inb(0xD2)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0xFFFFFF8D
	// succ:  l00401005_thunk_fn00401007
l00401005_thunk_fn00401007:
	call fn00401007 (retsize: 0;)
	return
	// succ:  fn0040103F_exit
l0040103F:
	bx = bx
	branch Test(NS,S) l0040104B
	goto l00401044
	// succ:  l00401044 l00401042_thunk_fn0040104B
l00401042_thunk_fn0040104B:
	call fn0040104B (retsize: 0;)
	return
	// succ:  fn0040103F_exit
l00401044:
	esp = edi *s 0x00000000
	SCZO = cond(esp)
	v8 = Mem0[esi:byte]
	Mem0[edi:byte] = v8
	esi = esi + 0x00000001
	edi = edi + 0x00000001
	branch Test(SG,S) l00400FD7
	// succ:  l0040104C l00400FD7
l0040104C:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	esp = esp - 0x00003269
	// succ:  l0040104C_thunk_fn0040104D
l0040104C_thunk_fn0040104D:
	call fn0040104D (retsize: 4;)
	return
	// succ:  fn0040103F_exit
fn0040103F_exit:


// fn0040104B
// Return size: 4
void fn0040104B()
fn0040104B_entry:
	// succ:  l0040104B
l0040104B:
	ecx = eax
	// succ:  l0040104B_thunk_fn0040104D
l0040104B_thunk_fn0040104D:
	call fn0040104D (retsize: 4;)
	return
	// succ:  fn0040104B_exit
fn0040104B_exit:


// fn0040104D
// Return size: 4
void fn0040104D()
fn0040104D_entry:
	// succ:  l0040104D
l0040104D:
	esp = fp
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ecx = ecx ^ eax
	SZO = cond(ecx)
	C = false
	esi = esi + edx
	SCZO = cond(esi)
	ebx = esi
	edi = ebx
	edx = edx + ecx
	SCZO = cond(edx)
	ebx = ebx + edi
	SCZO = cond(ebx)
	goto l0040105A_thunk_fn004012A5
	// succ:  l0040105A_thunk_fn004012A5
l0040104D:
	esi = esi + edx
	SCZO = cond(esi)
	ebx = esi
	edi = ebx
	edx = edx + ecx
	SCZO = cond(edx)
	ebx = ebx + edi
	SCZO = cond(ebx)
	goto l0040105A_thunk_fn004012A5
	// succ:  l0040105A_thunk_fn004012A5
l0040105A_thunk_fn004012A5:
	call fn004012A5 (retsize: 4;)
	return
	// succ:  fn0040104D_exit
l0040105A_thunk_fn004012A5:
	call fn004012A5 (retsize: 4;)
	return
	// succ:  fn0040104D_exit
fn0040104D_exit:


// fn00401063
// Return size: 0
void fn00401063()
fn00401063_entry:
	// succ:  l00401063
l00401063:
	esp = fp
	Mem0[esp - 0x00000014:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = ebx
	esi = esi - 0x00000001
	SZO = cond(esi)
	ecx = ecx - edi
	SCZO = cond(ecx)
	edx = ebx
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ebx = ebx | eax
	SZO = cond(ebx)
	C = false
	call fn004012F8 (retsize: 4;)
	v13 = (Mem0[ebp + 0x0000006B:word32] & 0x00000001 << cl) != 0x00000000
	Mem0[ebp + 0x0000006B:word32] = __rcr(Mem0[ebp + 0x0000006B:word32], cl, C)
	C = v13
	branch Test(SG,S) TMP!
fn00401063_exit:


// fn0040107C
// Return size: 6
void fn0040107C()
fn0040107C_entry:
	// succ:  l0040107C
l0040107C:
	esp = fp
	esp = esp + 0x00000004
	edx = edx | ecx
	SZO = cond(edx)
	C = false
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	esi = ebx
	esi = esi + 0x00000001
	SZO = cond(esi)
	esi = esi | edx
	SZO = cond(esi)
	C = false
	eax = eax - 0xEEEEEEEE
	SCZO = cond(eax)
	edx = edx - 0x00000001
	SZO = cond(edx)
	edx = edx - 0x00000001
	SZO = cond(edx)
	call fn0040102C (retsize: 4;)
	return
	// succ:  fn0040107C_exit
fn0040107C_exit:


// fn0040109A
// Return size: 0
void fn0040109A()
fn0040109A_entry:
	// succ:  l0040109A
l0040109A:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	esi = esi + eax
	SCZO = cond(esi)
	ecx = ecx | edi
	SZO = cond(ecx)
	C = false
	edi = edi + ecx
	SCZO = cond(edi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	branch Test(OV,O) l00401289
	// succ:  l004010AB l00401289
l004010AB:
	v12 = edx
	edx = edx
	edx = v12
	branch Test(NO,O) l00401289
	// succ:  l004010B3 l00401289
l004010B3:
	FPUF = cond(rArg0 - Mem0[ebp + 0x102D3D6C:real64])
	al = Mem0[ebx + (uint32) al:byte]
	ebp = 0xCA0BC88B
	// succ:  l004010BA_thunk_fn004010BB
l004010BA_thunk_fn004010BB:
	call fn004010BB (retsize: 0;)
	return
	// succ:  fn0040109A_exit
l004010FB:
	ebx = ebx + esi
	SCZO = cond(ebx)
	edx = ebx
	// succ:  l004010FD_thunk_fn004010FF
l004010FD_thunk_fn004010FF:
	call fn004010FF (retsize: 0;)
	return
	// succ:  fn0040109A_exit
l00401289:
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edi = edi + 0x00000001
	SZO = cond(edi)
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	ebx = eax
	edx = edx - 0x00000001
	SZO = cond(edx)
	edx = edx + 0x00000001
	SZO = cond(edx)
	branch Test(ULT,C) l004010FB
	// succ:  l00401297 l004010FB
l00401297:
	branch Test(OV,O) l00401299
	// succ:  l00401299
l00401299:
	branch Test(UGE,C) l004010FB
	// succ:  l0040129F l004010FB
l0040129F:
	ah = ah - ah - C
	SCZO = cond(ah)
	// succ:  l0040129F_thunk_fn004012A0
l0040129F_thunk_fn004012A0:
	call fn004012A0 (retsize: 0;)
	return
	// succ:  fn0040109A_exit
fn0040109A_exit:


// fn004010BB
// Return size: 0
void fn004010BB()
fn004010BB_entry:
	// succ:  l004010BB
l004010BB:
	esp = fp
	ecx = eax
	ecx = ecx | edx
	SZO = cond(ecx)
	C = false
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	edx = edx - edi
	SCZO = cond(edx)
	eax = Mem0[eax:word32]
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	esi = esi + eax
	SCZO = cond(esi)
	ebx = ebx + ecx
	SCZO = cond(ebx)
	goto l004010CC
	// succ:  l004010CC
l004010BB:
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	edx = edx - edi
	SCZO = cond(edx)
	eax = Mem0[eax:word32]
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	esi = esi + eax
	SCZO = cond(esi)
	ebx = ebx + ecx
	SCZO = cond(ebx)
	edi = edi | eax
	SZO = cond(edi)
	C = false
	branch Test(LE,SZO) l004011D2
	// succ:  l004010CB_thunk_fn004010D5 l004010CB_thunk_fn004011D2
l004010CB_thunk_fn004010D5:
	call fn004010D5 (retsize: 0;)
	return
	// succ:  fn004010BB_exit
l004010CB_thunk_fn004011D2:
	call fn004011D2 (retsize: 0;)
	return
	// succ:  fn004010BB_exit
l004010CF_thunk_fn004010D5:
	call fn004010D5 (retsize: 0;)
	return
	// succ:  fn004010BB_exit l004010CF_thunk_fn004010D5
l004010CF_thunk_fn004010D5:
	call fn004010D5 (retsize: 0;)
	return
	// succ:  fn004010BB_exit
l004010CF_thunk_fn004011D2:
	call fn004011D2 (retsize: 0;)
	return
	// succ:  fn004010BB_exit
fn004010BB_exit:


// fn004010D5
// Return size: 0
void fn004010D5()
fn004010D5_entry:
	// succ:  l004010D5
l004010D5:
	esp = esp - 0x00000002
	Mem0[esp:word16] = bx
	bx = Mem0[esp:word16]
	esp = esp + 0x00000002
	branch Test(GT,SZO) l004011D2
	goto l004010DF
	// succ:  l004010DF l004010D9_thunk_fn004011D2
l004010D9_thunk_fn004011D2:
	call fn004011D2 (retsize: 0;)
	return
	// succ:  fn004010D5_exit
l004010DF:
fn004010D5_exit:


// fn004010FF
// Return size: 0
void fn004010FF()
fn004010FF_entry:
	// succ:  l004010FF
l004010FF:
	esp = fp
	ecx = ecx - eax
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SZO = cond(edx)
	ebx = ebx - ecx
	SCZO = cond(ebx)
	ecx = ecx + ebx
	SCZO = cond(ecx)
	esi = esi - edx
	SCZO = cond(esi)
	edx = edx | ebx
	SZO = cond(edx)
	C = false
	esi = esi + ebx
	SCZO = cond(esi)
	edx = edx - 0x00000001
	SZO = cond(edx)
	call fn00401006 (retsize: 4;)
	branch Test(GT,SZO) l00401112_thunk_fn0040118E
	goto l00401114
	// succ:  l00401114 l00401112_thunk_fn0040118E
l004010FF:
l00401112_thunk_fn0040118E:
	call fn0040118E (retsize: 0;)
	return
	// succ:  fn004010FF_exit
l00401114:
	Mem0[edi:word32] = eax
	edi = edi + 0x00000004
	eax = ecx
	// succ:  l00401115_thunk_fn00401117
l00401115_thunk_fn00401117:
	call fn00401117 (retsize: 0;)
	return
	// succ:  fn004010FF_exit
fn004010FF_exit:


// fn00401117
// Return size: 0
void fn00401117()
fn00401117_entry:
	// succ:  l00401117
l00401117:
	esp = fp
	ecx = ecx + ebx
	SCZO = cond(ecx)
	edx = edx | ebx
	SZO = cond(edx)
	C = false
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
	ecx = ecx ^ esi
	SZO = cond(ecx)
	C = false
	edx = edx ^ ecx
	SZO = cond(edx)
	C = false
	ebx = edi
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	goto l00401125_thunk_fn00401337
	// succ:  l00401125_thunk_fn00401337
l00401117:
l00401125_thunk_fn00401337:
	call fn00401337 (retsize: 0;)
	return
	// succ:  fn00401117_exit
fn00401117_exit:


// fn00401141
// Return size: 0
void fn00401141()
fn00401141_entry:
	goto l00401141
	// succ:  l00401141
l004010E5:
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	edx = edx + 0x00000001
	SZO = cond(edx)
	edx = edx + ebx
	SCZO = cond(edx)
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edx = edx + 0x00000001
	SZO = cond(edx)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	edi = edi + 0x00000001
	SZO = cond(edi)
	call fn00401270 (retsize: 4;)
	branch Test(OV,O) l00401153
	// succ:  l004010F6 l00401153
l004010F6:
	ax = __aam(al)
	v16 = Mem0[esi + 0xD38BDE03:byte] >>u 0x01
	Mem0[esi + 0xD38BDE03:byte] = v16
	SCZO = cond(v16)
	// succ:  l004010F9_thunk_fn004010FF
l004010F9_thunk_fn004010FF:
	call fn004010FF (retsize: 0;)
	return
	// succ:  fn00401141_exit
l00401141:
	esp = fp
	edx = ecx
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	edi = edi + edx
	SCZO = cond(edi)
	edi = edi - esi
	SCZO = cond(edi)
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	edx = edx + 0x00000001
	SZO = cond(edx)
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	edx = edx - esi
	SCZO = cond(edx)
	ecx = ecx | ebx
	SZO = cond(ecx)
	C = false
l00401141:
l00401153:
	goto l004010E5
	// succ:  l004010E5
fn00401141_exit:


// fn0040115A
// Return size: 0
void fn0040115A()
fn0040115A_entry:
	// succ:  l0040115A
l0040115A:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = esi
	esi = v3
fn0040115A_exit:


// fn00401177
// Return size: 0
void fn00401177()
fn00401177_entry:
	// succ:  l00401177
l00401177:
	esp = fp
	esp = esp + 0x00000004
	edx = edx | edi
	SZO = cond(edx)
	C = false
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	edx = edx - eax
	SCZO = cond(edx)
	edi = edi ^ esi
	SZO = cond(edi)
	C = false
	esi = edi
	ebx = ebx - eax
	SCZO = cond(ebx)
	ecx = ecx + esi
	SCZO = cond(ecx)
	edx = edx - eax
	SCZO = cond(edx)
	ebx = ebx + edx
	SCZO = cond(ebx)
	// succ:  l0040118D_thunk_fn004010BB
l0040118D_thunk_fn004010BB:
	call fn004010BB (retsize: 0;)
	return
	// succ:  fn00401177_exit
fn00401177_exit:


// fn0040118E
// Return size: 0
void fn0040118E()
fn0040118E_entry:
	// succ:  l0040118E
l0040118E:
	esp = fp
	edi = edi - edi
	SCZO = cond(edi)
l0040118E:
fn0040118E_exit:


// fn00401198
// Return size: 0
void fn00401198()
fn00401198_entry:
	goto l00401198
	// succ:  l00401198
l0040112A:
	edx = edx - 0x00000001
	SZO = cond(edx)
	edx = ebx
	edi = edi ^ eax
	SZO = cond(edi)
	C = false
	ebx = ebx - eax
	SCZO = cond(ebx)
	ecx = edx
	esi = ecx
	// succ:  l00401135_thunk_fn004012DF
l00401135_thunk_fn004012DF:
	call fn004012DF (retsize: 0;)
	return
	// succ:  fn00401198_exit
l00401198:
	esi = esi + 0x00000001
	SZO = cond(esi)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	edi = esi
	edi = edi - ebx
	SCZO = cond(edi)
	edx = esi
	edi = edi + 0x00000001
	SZO = cond(edi)
	ebx = ebx + edi
	SCZO = cond(ebx)
	esi = ebx
	edx = edx + 0x00000001
	SZO = cond(edx)
	esi = ebx
	call fn0040107C (retsize: 4;)
	es_edx = Mem0[edx - 0x00000051 + ecx * 0x00000008:segptr32]
	esp = esp - 0x00000001
	SZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ss
	ebx = ebx - eax
	SCZO = cond(ebx)
	esi = esi + ecx
	SCZO = cond(esi)
	bl = ~bl
	cl = ~cl
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	edx = edx - 0x00000001
	SZO = cond(edx)
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(ULT,C) l0040112A
	// succ:  l004011C6 l0040112A
l004011C6:
fn00401198_exit:


// fn004011D2
// Return size: 0
void fn004011D2()
fn004011D2_entry:
	// succ:  l004011D2
l004011D2:
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ebx = ebx ^ ecx
	SZO = cond(ebx)
	C = false
	edi = edi | ecx
	SZO = cond(edi)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ebx = edi
	ecx = eax
	edi = edi - edx
	SCZO = cond(edi)
	call fn00401235 (retsize: 4;)
	esp = esp + 0xFFFFFFFA
	esi = Mem0[ebx - 0x00000061:word32] *s 0x0000000E
	SCZO = cond(esi)
	al = al - 0x8B
	SCZO = cond(al)
	// succ:  l004011E7_thunk_fn004011E9
l004011E7_thunk_fn004011E9:
	call fn004011E9 (retsize: 0;)
	return
	// succ:  fn004011D2_exit
fn004011D2_exit:


// fn004011E8
// Return size: 6
void fn004011E8()
fn004011E8_entry:
	// succ:  l004011E8
l004011E8:
	esp = fp
	eax = Mem0[eax + 0x00000008:word32]
	goto l004011E8_thunk_fn004011E9
	// succ:  l004011E8_thunk_fn004011E9
l004011E8:
l004011E8_thunk_fn004011E9:
	call fn004011E9 (retsize: 0;)
	return
	// succ:  fn004011E8_exit
fn004011E8_exit:


// fn004011E9
// Return size: 0
void fn004011E9()
fn004011E9_entry:
	// succ:  l004011E9
l004011E9:
	esp = fp
	eax = eax + 0x00000001
	SZO = cond(eax)
	v7 = Mem0[ebx:byte] | cl
	Mem0[ebx:byte] = v7
	SZO = cond(Mem0[ebx:byte])
	C = false
l004011E9:
	esi = esi | ecx
	SZO = cond(esi)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	esi = esi + ecx
	SCZO = cond(esi)
	edi = edi + edx
	SCZO = cond(edi)
	ecx = ecx ^ esi
	SZO = cond(ecx)
	C = false
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ecx = edx
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ecx = ecx + edx
	SCZO = cond(ecx)
	call fn00401218 (retsize: 4;)
	bh = 0x74
	al = al + 0x03 + C
	SCZO = cond(al)
	// succ:  l00401201_thunk_fn00401204
l00401201_thunk_fn00401204:
	call fn00401204 (retsize: 6;)
	return
	// succ:  fn004011E9_exit
fn004011E9_exit:


// fn00401203
// Return size: 0
void fn00401203()
fn00401203_entry:
	// succ:  l00401203
l00401203:
	esp = fp
	ecx = ecx + ebx
	SCZO = cond(ecx)
	goto l00401203_thunk_fn00401204
	// succ:  l00401203_thunk_fn00401204
l00401203:
l00401203_thunk_fn00401204:
	call fn00401204 (retsize: 6;)
	return
	// succ:  fn00401203_exit
fn00401203_exit:


// fn00401204
// Return size: 6
void fn00401204()
fn00401204_entry:
	// succ:  l00401204
l00401204:
	esp = fp
	return
	// succ:  fn00401204_exit
l00401204:
	edx = edx + eax
	SCZO = cond(edx)
	esi = esi - 0x00000001
	SZO = cond(esi)
	eax = eax | ebx
	SZO = cond(eax)
	C = false
	eax = eax | ebx
	SZO = cond(eax)
	C = false
	ecx = ecx ^ eax
	SZO = cond(ecx)
	C = false
	// succ:  l0040120E_thunk_fn00401117
l0040120E_thunk_fn00401117:
	call fn00401117 (retsize: 0;)
	return
	// succ:  fn00401204_exit
fn00401204_exit:


// fn00401218
// Return size: 0
void fn00401218()
fn00401218_entry:
	// succ:  l00401218
l00401218:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = ecx
	ecx = v3
	v5 = al
	al = al
	al = v5
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi ^ esi
	SZO = cond(edi)
	C = false
	ebx = ebx + esi
	SCZO = cond(ebx)
	esi = esi | edi
	SZO = cond(esi)
	C = false
	eax = eax & 0xEEEEEEEE
	SZO = cond(eax)
	C = false
	ecx = ecx - ebx
	SCZO = cond(ecx)
fn00401218_exit:


// fn00401235
// Return size: 6
void fn00401235()
fn00401235_entry:
	// succ:  l00401235
l00401235:
	esp = fp
	Mem0[esp - 0x0000000C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edi = edi - 0x00000001
	SZO = cond(edi)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edx = eax
	// succ:  l0040123F_thunk_fn004011E8
l0040123F_thunk_fn004011E8:
	call fn004011E8 (retsize: 6;)
	return
	// succ:  fn00401235_exit
fn00401235_exit:


// fn00401270
// Return size: 0
void fn00401270()
fn00401270_entry:
	// succ:  l00401270
l00401270:
	esp = fp
	esp = esp + 0x00000004
	edi = edi + 0x00000001
	SZO = cond(edi)
	edi = ebx
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	eax = eax - 0x00000001
	SZO = cond(eax)
	eax = eax ^ edx
	SZO = cond(eax)
	C = false
	ebx = ebx - ecx
	SCZO = cond(ebx)
	esi = esi + 0x00000001
	SZO = cond(esi)
	// succ:  l00401280_thunk_fn00401203
l00401280_thunk_fn00401203:
	call fn00401203 (retsize: 0;)
	return
	// succ:  fn00401270_exit
fn00401270_exit:


// fn004012A0
// Return size: 0
void fn004012A0()
fn004012A0_entry:
	// succ:  l004012A0
l004012A0:
	esp = fp
	al = __inb(0x42)
	edx_eax = (int64) eax
l004012A0:
	edx = edx + 0x00000001
	SZO = cond(edx)
	edx_eax = (int64) eax
fn004012A0_exit:


// fn004012A5
// Return size: 4
void fn004012A5()
fn004012A5_entry:
	// succ:  l004012A5
l004012A5:
	esp = fp
	eax = eax | eax
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l004012AA
	goto l004012A9
	// succ:  l004012A9 l004012AA
l004012A5:
l004012A9:
	return
	// succ:  fn004012A5_exit
l004012AA:
	ecx = ecx ^ edi
	SZO = cond(ecx)
	C = false
	edi = edi ^ esi
	SZO = cond(edi)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	edi = edi - 0x00000001
	SZO = cond(edi)
	edi = edi | eax
	SZO = cond(edi)
	C = false
fn004012A5_exit:


// fn004012BE
// Return size: 0
void fn004012BE()
fn004012BE_entry:
	// succ:  l004012BE
l004012BE:
	esp = fp
	cl = ~cl
	cl = cl + 0x77
	SCZO = cond(cl)
	ch = ch | bl
	SZO = cond(ch)
	C = false
	dh = 0x3D
	bl = bl - dl
	SCZO = cond(bl)
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	edx = edx + ecx
	SCZO = cond(edx)
	ch = ch + 0x01
	SZO = cond(ch)
	dh = dh | ah
	SZO = cond(dh)
	C = false
	cl = al
	call fn0040115A (retsize: 4;)
	bh = 0x48
	v16 = bl
	bl = cl
	cl = v16
	ss = Mem0[ebp + 0x00000033:selector]
l004012BE:
fn004012BE_exit:


// fn004012DF
// Return size: 0
void fn004012DF()
fn004012DF_entry:
	// succ:  l004012DF
l004012DF:
	esp = fp
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	edi = esi
	edi = edi + esi
	SCZO = cond(edi)
	eax = Mem0[fs:0x00000030:word32]
	edx = edx + eax
	SCZO = cond(edx)
	edx = edx - edi
	SCZO = cond(edx)
	call fn00401063 (retsize: 4;)
l004012DF:
fn004012DF_exit:


// fn004012F8
// Return size: 0
void fn004012F8()
fn004012F8_entry:
	// succ:  l004012F8
l004012F8:
	esp = fp
	esp = esp + 0x00000004
	esi = esi ^ ecx
	SZO = cond(esi)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	eax = Mem0[eax + 0x00000090:word32]
	ecx = ecx - edx
	SCZO = cond(ecx)
	edx = edx - ebx
	SCZO = cond(edx)
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	call fn00401177 (retsize: 4;)
	C = false
	ch = 0x42
	// succ:  l00401311_thunk_fn00401313
l00401311_thunk_fn00401313:
	call fn00401313 (retsize: 0;)
	return
	// succ:  fn004012F8_exit
fn004012F8_exit:


// fn00401312
// Return size: 0
void fn00401312()
fn00401312_entry:
	// succ:  l00401312
l00401312:
	esp = fp
	edx = edx + 0x00000001
	SZO = cond(edx)
	goto l00401312_thunk_fn00401313
	// succ:  l00401312_thunk_fn00401313
l00401312:
l00401312_thunk_fn00401313:
	call fn00401313 (retsize: 0;)
	return
	// succ:  fn00401312_exit
fn00401312_exit:


// fn00401313
// Return size: 0
void fn00401313()
fn00401313_entry:
	// succ:  l00401313
l00401313:
	esp = fp
	eax = __indw(0x7B)
	branch ecx == 0x00000000 l00401315_thunk_fn004012A0
	goto l00401315_thunk_fn00401317
	// succ:  l00401315_thunk_fn00401317 l00401315_thunk_fn004012A0
l00401313:
	eax = __indw(0x7B)
	branch ecx == 0x00000000 l00401315_thunk_fn004012A0
	goto l00401315_thunk_fn00401317
	// succ:  l00401315_thunk_fn00401317 l00401315_thunk_fn004012A0
l00401315_thunk_fn004012A0:
	call fn004012A0 (retsize: 0;)
	return
	// succ:  fn00401313_exit
l00401315_thunk_fn004012A0:
	call fn004012A0 (retsize: 0;)
	return
	// succ:  fn00401313_exit
l00401315_thunk_fn00401317:
	call fn00401317 (retsize: 0;)
	return
	// succ:  fn00401313_exit l00401315_thunk_fn00401317
l00401315_thunk_fn00401317:
	call fn00401317 (retsize: 0;)
	return
	// succ:  fn00401313_exit
l00401315_thunk_fn00401317:
	call fn00401317 (retsize: 0;)
	return
	// succ:  fn00401313_exit l00401315_thunk_fn00401317
l00401315_thunk_fn00401317:
	call fn00401317 (retsize: 0;)
	return
	// succ:  fn00401313_exit
fn00401313_exit:


// fn00401316
// Return size: 0
void fn00401316()
fn00401316_entry:
	// succ:  l00401316
l00401316:
	Mem0[esp:word32] = eax
l00401325_thunk_fn00401141:
	call fn00401141 (retsize: 0;)
	return
	// succ:  fn00401316_exit
l0040132B:
fn00401316_exit:


// fn00401317
// Return size: 0
void fn00401317()
fn00401317_entry:
	// succ:  l00401317
l00401317:
	esp = fp
	al = al + 0x24
	SCZO = cond(al)
	goto l00401319_thunk_fn0040131E
	// succ:  l00401319_thunk_fn0040131E
l00401317:
	call fn0040131E (retsize: 0;)
	return
	// succ:  l00401317_thunk_fn0040131E fn00401317_exit
l00401317_thunk_fn0040131E:
	call fn0040131E (retsize: 0;)
	return
	// succ:  fn00401317_exit
l00401319_thunk_fn0040131E:
	call fn0040131E (retsize: 0;)
	return
	// succ:  fn00401317_exit
fn00401317_exit:


// fn0040131E
// Return size: 0
void fn0040131E()
fn0040131E_entry:
	// succ:  l0040131E
l0040131E:
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = eax
	edx = eax
	edx = edx ^ ebx
	SZO = cond(edx)
	C = false
	branch Test(SG,S) l00401325_thunk_fn00401141
	goto l0040132B
	// succ:  l0040132B l00401325_thunk_fn00401141
fn0040131E_exit:


// fn00401337
// Return size: 0
void fn00401337()
fn00401337_entry:
	// succ:  l00401337
l00401337:
	esp = fp
	call fn00401FF5 (retsize: 4;)
	eax = Mem0[esi:word32]
	esi = esi + 0x00000004
	v5 = eax
	eax = ebx
	ebx = v5
	v9 = Mem0[edi:byte] & bh
	Mem0[edi:byte] = v9
	SZO = cond(Mem0[edi:byte])
	C = false
	v12 = Mem0[esp + ebx * 0x00000004:word32] + ebx
	Mem0[esp + ebx * 0x00000004:word32] = v12
	SCZO = cond(v12)
	Z = __arpl(Mem0[ecx:word16], bx, &Mem0[ecx:word16])
	al = al - 0x1D - C
	SCZO = cond(al)
	ecx = Mem0[fs:eax - 0x00000070:word32] *s 0xFFFFFF91
	SCZO = cond(ecx)
	Z = __arpl(Mem0[edx:word16], bx, &Mem0[edx:word16])
	al = al - 0x89 - C
	SCZO = cond(al)
	branch ecx == 0x00000000 l0040136D
	goto l00401353
	// succ:  l00401353 l0040136D
l00401337:
l00401353:
	al = al - 0x89 - C
	SCZO = cond(al)
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi + 0x00000001
	SZO = cond(edi)
	cl = 0x9B
	SZO = cond(Mem0[eax + 0x949585A5:byte] & al)
	C = false
	eax = eax & 0x84919153
	SZO = cond(eax)
	C = false
	C = __das(al, &al)
	SZO = cond(Mem0[eax:byte] & dh)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = ss
	branch Test(UGT,CZ) l004013C1
	// succ:  l0040136A l004013C1
l0040136A:
	al = 0x91
	v24 = eax
	eax = ecx
	ecx = v24
	// succ:  l0040136D
l0040136D:
	es = Mem0[esp:selector]
	esp = esp + 0x00000002
	rArg0 = rArg0 + (real64) Mem0[ecx + 0x0000007A:word32]
	edx = 0x2390E623
	v27 = Mem0[ebx:word32] << 0x00000001
	Mem0[ebx:word32] = v27
	SCZO = cond(v27)
	esp = esp + Mem0[ebx:word32] + C
	SCZO = cond(esp)
	__cli()
	v28 = eax
	eax = ebx
	ebx = v28
	branch Test(UGT,CZ) l004013B4
	// succ:  l0040137F l004013B4
l0040137F:
	branch Test(OV,O) l0040137F_thunk_fn00401312
	goto l00401381
	// succ:  l00401381 l0040137F_thunk_fn00401312
l0040137F_thunk_fn00401312:
	call fn00401312 (retsize: 0;)
	return
	// succ:  fn00401337_exit
l00401381:
	v30 = eax
	eax = ecx
	ecx = v30
l0040138C:
	eax = Mem0[0x4CD94325:word32]
	v110 = eax
	eax = esp
	esp = v110
	ebp = ebp - 0x00000001
	SZO = cond(ebp)
	v111 = eax
	eax = ecx
	ecx = v111
	v112 = eax
	eax = ecx
	ecx = v112
	v113 = eax
	eax = ecx
	ecx = v113
	C = true
	v114 = eax
	eax = ecx
	ecx = v114
	ecx = ecx - 0x00000001
	branch Test(EQ,Z) && ecx != 0x00000000 TMP!
l0040139E:
	eax = eax + esi + C
	SCZO = cond(eax)
	bl = 0x20
	esp = esp - 0x00000004
	Mem0[esp:word32] = ds
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	v59 = eax
	eax = ecx
	ecx = v59
	v60 = eax
	eax = ecx
	ecx = v60
	v62 = Mem0[esi + 0x1FA0B3A1:byte] & dl
	Mem0[esi + 0x1FA0B3A1:byte] = v62
	SZO = cond(Mem0[esi + 0x1FA0B3A1:byte])
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	v63 = eax
	eax = ecx
	ecx = v63
	v64 = eax
	eax = ecx
	ecx = v64
	branch Test(SG,S) l00401428
	// succ:  l004013B1 l00401428
l004013B1:
	D = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	v67 = eax
	eax = ecx
	ecx = v67
	// succ:  l004013B4
l004013B4:
	v31 = eax
	eax = ecx
	ecx = v31
	Mem0[0xFB6A0D6F:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ah = 0x4C
	v33 = eax
	eax = esp
	esp = v33
	Mem0[0x23919150:byte] = al
	goto l004013C3
	// succ:  l004013C3
l004013C1:
	v48 = eax
	eax = ecx
	ecx = v48
	ebp = ebp & Mem0[eax:word32]
	SZO = cond(ebp)
	C = false
	goto l004013C4
	// succ:  l004013C4
l004013C3:
	v34 = Mem0[eax:byte] - dh
	Mem0[eax:byte] = v34
	SCZO = cond(v34)
	// succ:  l004013C4
l004013C4:
	edx_eax = (int64) eax
	v36 = Mem0[ecx + 0x943A1E87:word32] - esi - C
	Mem0[ecx + 0x943A1E87:word32] = v36
	SCZO = cond(v36)
	branch Test(PO,P) l0040139E
	// succ:  l004013CE l0040139E
l004013CE:
	v38 = eax
	eax = ecx
	ecx = v38
	v39 = eax
	eax = ecx
	ecx = v39
	eax = eax & 0x91939169
	SZO = cond(eax)
	C = false
	v40 = eax
	eax = ecx
	ecx = v40
	edi = edi & edx
	SZO = cond(edi)
	C = false
	ah = Mem0[ebx:byte]
	C = false
	esi = esi | Mem0[edi - 0x00000076:word32]
	SZO = cond(esi)
	C = false
	v41 = (Mem0[ecx + 0x71169491:byte] & 0x01 << 0x08 - 0x01) != 0x00
	Mem0[ecx + 0x71169491:byte] = __rcl(Mem0[ecx + 0x71169491:byte], 0x01, C)
	C = v41
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	edi = edi - Mem0[(ebp + 0x0000004F) + ecx:word32]
	SCZO = cond(edi)
	// succ:  l004013E6
l004013E6:
	// succ:  l004013E7
l004013E7:
	branch Test(UGT,CZ) l004013F8
	// succ:  l004013EB l004013F8
l004013EB:
	__lock()
	v43 = eax
	eax = ecx
	ecx = v43
	v44 = eax
	eax = ecx
	ecx = v44
	v45 = eax
	eax = esp
	esp = v45
	FPUF = cond(rArg0 - Mem0[eax - 0x0000006F:real64])
	v47 = eax
	eax = ecx
	ecx = v47
l004013F4:
	esp = esp - esi
	SCZO = cond(esp)
	ecx = ecx - 0x00000001
	branch Test(EQ,Z) && ecx != 0x00000000 l0040138C
	// succ:  l004013F8 l0040138C
l004013F8:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ds
	v50 = eax
	eax = ecx
	ecx = v50
	v51 = eax
	eax = ecx
	ecx = v51
	v52 = eax
	eax = ecx
	ecx = v52
	C = __aaa(al, ah, &al, &ah)
	edx = edx + 0x00000001
	SZO = cond(edx)
	ebp = ebp + 0x00000001
	SZO = cond(ebp)
	edx = 0x9258232F
	C = __aaa(al, ah, &al, &ah)
	v53 = Mem0[edi:word32] << cl
	Mem0[edi:word32] = v53
	SCZO = cond(v53)
	v54 = Mem0[ebx:byte] + ah + C
	Mem0[ebx:byte] = v54
	SCZO = cond(v54)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	Mem0[ecx:word32] = edi
	dh = dh - Mem0[ebx + 0x917097E0:byte]
	SCZO = cond(dh)
	v55 = eax
	eax = ecx
	ecx = v55
	eax = eax & 0x9110486B
	SZO = cond(eax)
	C = false
	branch Test(UGT,CZ) l004013E6
	esp = esp - 0x00000004
	Mem0[esp:word32] = ds
	v94 = eax
	eax = ecx
	ecx = v94
	v95 = eax
	eax = ecx
	ecx = v95
	v96 = eax
	eax = ecx
	ecx = v96
	C = __aaa(al, ah, &al, &ah)
	edx = edx + 0x00000001
	SZO = cond(edx)
	ebp = ebp + 0x00000001
	SZO = cond(ebp)
	edx = 0x9258232F
	C = __aaa(al, ah, &al, &ah)
	v97 = Mem0[edi:word32] << cl
	Mem0[edi:word32] = v97
	SCZO = cond(v97)
	v98 = Mem0[ebx:byte] + ah + C
	Mem0[ebx:byte] = v98
	SCZO = cond(v98)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	Mem0[ecx:word32] = edi
	dh = dh - Mem0[ebx + 0x917097E0:byte]
	SCZO = cond(dh)
	v99 = eax
	eax = ecx
	ecx = v99
	eax = eax & 0x9110486B
	SZO = cond(eax)
	C = false
	branch Test(UGT,CZ) l004013E6
	// succ:  l0040141C l004013E6
l0040141C:
	__lock()
	v56 = eax
	eax = ecx
	ecx = v56
	v57 = eax
	eax = ecx
	ecx = v57
	__lock()
	v100 = eax
	eax = ecx
	ecx = v100
	v101 = eax
	eax = ecx
	ecx = v101
l00401428:
	__outb(0xF0, al)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	v68 = (al & 0x01 << cl) != 0x00
	al = __rcr(al, cl, C)
	C = v68
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	edx = edx - 0x00000001
	SZO = cond(edx)
	v69 = Mem0[esi:byte] - bh
	Mem0[esi:byte] = v69
	SCZO = cond(v69)
	esi = Mem0[edi + 0x00000054:word32] *s 0x00000070
	SCZO = cond(esi)
	v70 = eax
	eax = ecx
	ecx = v70
	v71 = eax
	eax = ecx
	ecx = v71
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esi = esi + Mem0[eax + 0x0000003B:word32]
	SCZO = cond(esi)
	eax = eax - 0x90E130DD - C
	SCZO = cond(eax)
	branch Test(UGT,CZ) l004014AD
	// succ:  l00401442 l004014AD
l00401442:
	v72 = Mem0[ecx + 0x916FEF91:byte] + dl + C
	Mem0[ecx + 0x916FEF91:byte] = v72
	SCZO = cond(v72)
	v73 = eax
	eax = ecx
	ecx = v73
	v74 = eax
	eax = ecx
	ecx = v74
	v75 = Mem0[ebx + 0x9190FA00:word32] ^ 0x9191FE91
	Mem0[ebx + 0x9190FA00:word32] = v75
	SZO = cond(Mem0[ebx + 0x9190FA00:word32])
	C = false
	v76 = eax
	eax = ecx
	ecx = v76
	v77 = Mem0[edi - 0x00000067:word32] ^ 0x29919190
	Mem0[edi - 0x00000067:word32] = v77
	SZO = cond(Mem0[edi - 0x00000067:word32])
	C = false
l0040145F:
	branch Test(UGT,CZ) l004013E7
	// succ:  l00401461 l004013E7
l00401461:
	branch Test(OV,O) l004013F4
	// succ:  l00401463 l004013F4
l00401463:
	v88 = eax
	eax = ecx
	ecx = v88
l004014AD:
	v78 = eax
	eax = ecx
	ecx = v78
	edi = edi & eax
	SZO = cond(edi)
	C = false
	v79 = eax
	eax = esi
	esi = v79
	Z = __arpl(ax, bx, &ax)
	ah = Mem0[ebx:byte]
	C = false
	ss = Mem0[esp:selector]
	esp = esp + 0x00000002
	branch Test(UGT,CZ) l004014BF
	// succ:  l004014B9 l004014BF
l004014B9:
	__lock()
	v81 = eax
	eax = ecx
	ecx = v81
	v82 = eax
	eax = ecx
	ecx = v82
	branch Test(UGT,CZ) l0040145F
	// succ:  l004014BE l0040145F
l004014BE:
	__lock()
	// succ:  l004014BF
l004014BF:
	v83 = eax
	eax = ecx
	ecx = v83
	v84 = eax
	eax = ecx
	ecx = v84
	branch Test(UGT,CZ) l0040150A
	// succ:  l004014C3 l0040150A
l004014C3:
	__lock()
	v85 = eax
	eax = ecx
	ecx = v85
	v86 = eax
	eax = ecx
	ecx = v86
	v87 = Mem0[eax + 0x180F0153:byte] + ah
	Mem0[eax + 0x180F0153:byte] = v87
	SCZO = cond(v87)
	ecx = ecx & Mem0[ebx + 0x00000036:word32]
	SZO = cond(ecx)
	C = false
	al = al | 0x77
	SZO = cond(al)
	C = false
l004014D7:
	esi = esi + Mem0[esi:word32] + C
	SCZO = cond(esi)
	al = al | 0x77
	SZO = cond(al)
	C = false
	eax = __indw(dx)
	v121 = eax
	eax = ecx
	ecx = v121
	v122 = eax
	eax = ecx
	ecx = v122
	branch Test(UGT,CZ) l00401521
	// succ:  l004014E1 l00401521
l004014E1:
	v123 = eax
	eax = ecx
	ecx = v123
	v124 = eax
	eax = ecx
	ecx = v124
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	ebp = ebp - ecx - C
	SCZO = cond(ebp)
	return
	// succ:  fn00401337_exit
l00401500:
	ds = Mem0[esp:selector]
	esp = esp + 0x00000002
	v115 = Mem0[0x00B381CA:word32]
	Mem0[0x00B381CA:word32] = ebp
	ebp = v115
	goto l00401507
	// succ:  l00401507
l00401505:
	bl = 0x00
	// succ:  l00401507
l00401507:
	Mem0[edi:word32] = __in(edx)
	edi = edi + 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	v116 = eax
	eax = ecx
	ecx = v116
	// succ:  l0040150A
l0040150A:
	v89 = eax
	eax = ecx
	ecx = v89
	ch = ch ^ ah
	SZO = cond(ch)
	C = false
	branch Test(UGT,CZ) l00401529
	// succ:  l00401510 l00401529
l00401510:
	v91 = Mem0[ecx + 0x103B2391:byte] ^ dl
	Mem0[ecx + 0x103B2391:byte] = v91
	SZO = cond(Mem0[ecx + 0x103B2391:byte])
	C = false
	// succ:  l00401514
l00401514:
	v92 = Mem0[edi - 0x00000070:byte] & dh
	Mem0[edi - 0x00000070:byte] = v92
	SZO = cond(Mem0[edi - 0x00000070:byte])
	C = false
	esi = esi & Mem0[esi:word32]
	SZO = cond(esi)
	C = false
	// succ:  l0040151B
l0040151B:
	branch Test(UGT,CZ) l0040158F
	// succ:  l0040151D l0040158F
l0040151D:
	v93 = Mem0[ecx + 0x89359891:byte] + dl + C
	Mem0[ecx + 0x89359891:byte] = v93
	SCZO = cond(v93)
	// succ:  l00401521
l00401521:
	edi = edi | Mem0[edx + 0x2393FB23:word32]
	SZO = cond(edi)
	C = false
	// succ:  l00401529
l00401529:
	__outb(0x13, al)
	esp = esp & ecx
	SZO = cond(esp)
	C = false
	al = al | 0x23
	SZO = cond(al)
	C = false
	SZO = cond(al & 0xA5)
	C = false
	ds_esi = Mem0[edi + 0x0000006F:segptr32]
	v103 = Mem0[ecx + 0x9738FE91:byte] + dl + C
	Mem0[ecx + 0x9738FE91:byte] = v103
	SCZO = cond(v103)
	// succ:  l00401537
l00401537:
	branch Test(GT,SZO) l00401571
	// succ:  l0040153E l00401571
l0040153E:
	branch Test(PE,P) l00401537
	// succ:  l00401540 l00401537
l00401540:
	rArg0 = rArg0 - (real64) Mem0[ebx:word16]
	esp = esp + Mem0[ebx:word32] + C
	SCZO = cond(esp)
	ecx = ecx - 0x00000001
	branch Test(EQ,Z) && ecx != 0x00000000 l004014D7
	// succ:  l00401547 l004014D7
l00401547:
	edi = edi - 0x00000001
	SZO = cond(edi)
	v104 = Mem0[esi:word32]
	Mem0[edi:word32] = v104
	esi = esi + 0x00000004
	edi = edi + 0x00000004
	ecx = Mem0[eax - 0x00000070:word32] *s 0xFFFFFF91
	SCZO = cond(ecx)
	C = __aaa(al, ah, &al, &ah)
	eax = eax - 0x06A78071
	SCZO = cond(eax)
	Mem0[edi + 0x686A3039:word32] = 0x337B3048
	esi = Mem0[ebx + 0xB1D1FDE0:word32] *s 0xFFFFFFB1
	SCZO = cond(esi)
	edi = edi & eax
	SZO = cond(edi)
	C = false
	edi = edi & ebx
	SZO = cond(edi)
	C = false
	esp = esp + Mem0[ebx:word32] + C
	SCZO = cond(esp)
	__cli()
	v105 = eax
	eax = ebx
	ebx = v105
	branch Test(LE,SZO) l00401500
	// succ:  l00401570 l00401500
l00401570:
	branch Test(UGT,CZ) l0040151B
	goto l00401572
	// succ:  l00401572 l0040151B
l00401571:
	SZO = cond(eax & 0x3C919170)
	C = false
	goto l00401576
	// succ:  l00401576
l00401572:
	branch Test(OV,O) l00401505
	// succ:  l00401574 l00401505
l00401574:
	v106 = eax
	eax = ecx
	ecx = v106
	SCZO = cond(al - 0xD3)
	// succ:  l00401576
l00401576:
	v107 = eax
	eax = ebp
	ebp = v107
	branch Test(EQ,Z) l004015D0
	// succ:  l0040157A l004015D0
l0040157A:
	Mem0[ebx + 0xB1D13420:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	cl = 0x2E
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	branch Test(SG,S) l00401514
	// succ:  l00401585 l00401514
l00401585:
	v108 = eax
	eax = ebx
	ebx = v108
	v109 = eax
	eax = esp
	esp = v109
	eax = eax - 0x52B1B1D1
	SCZO = cond(eax)
	Mem0[esi:word32] = esp
	dh = 0xE6
	goto l00401590
	// succ:  l00401590
l0040158F:
	__outb(0xBB, al)
	goto l00401591
	// succ:  l00401591
l00401590:
	ebx = 0xB1D15A77
	// succ:  l00401591
l00401591:
	cl = 0x10
	dh = 0x1C
l004015BB:
	edi = edi & eax
	SZO = cond(edi)
	C = false
	v119 = eax
	eax = ebp
	ebp = v119
	// succ:  l004015BE
l004015BE:
	v118 = Mem0[ecx + 0x9B982319:byte] ^ bl
	Mem0[ecx + 0x9B982319:byte] = v118
	SZO = cond(Mem0[ecx + 0x9B982319:byte])
	C = false
	Z = __arpl(bx, bx, &bx)
	eax = eax + 0xE6B19947 + C
	SCZO = cond(eax)
	eax = eax + 0x7795E6B1 + C
	SCZO = cond(eax)
	// succ:  l004015D0
l004015D0:
	Mem0[eax + 0x2AA19191:word32] = 0xFBA72190
	branch Test(SG,S) l004015BE
	// succ:  l004015DC l004015BE
l004015DC:
	ebp = ebp & eax
	SZO = cond(ebp)
	C = false
	branch Test(OV,O) l004015BB
	// succ:  l004015E1 l004015BB
l004015E1:
	esi = esi & Mem0[esi + 0x0C36973F:word32]
	SZO = cond(esi)
	C = false
	ds_esi = Mem0[edi - 0x00000013:segptr32]
	v117 = Mem0[ecx + 0xD11E7791:byte] ^ dl
	Mem0[ecx + 0xD11E7791:byte] = v117
	SZO = cond(Mem0[ecx + 0xD11E7791:byte])
	C = false
	cl = 0xB1
	SCZO = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00401337_exit
fn00401337_exit:


// fn00401FF5
// Return size: 0
void fn00401FF5()
fn00401FF5_entry:
	// succ:  l00401FF5
l00401FF5:
	esp = fp
	dh = dh ^ cl
	SZO = cond(dh)
	C = false
	dl = dl - 0x01
	SZO = cond(dl)
	esi = esi + eax
	SCZO = cond(esi)
	edx = edx ^ esi
	SZO = cond(edx)
	C = false
	bl = bl - 0xAC - C
	SCZO = cond(bl)
	ah = ah ^ dl
	SZO = cond(ah)
	C = false
	ch = ch ^ cl
	SZO = cond(ch)
	C = false
	ch = ch + dl
	SCZO = cond(ch)
	edx = edx | edi
	SZO = cond(edx)
	C = false
	call fn00402CD1 (retsize: 4;)
	branch Test(PE,P) l0040200D_thunk_fn0040205C
	goto l0040200F
	// succ:  l0040200F l0040200D_thunk_fn0040205C
l0040200D_thunk_fn0040205C:
	call fn0040205C (retsize: 0;)
	return
	// succ:  fn00401FF5_exit
l0040200F:
	C = __daa(al, &al)
	Mem0[edi:byte] = al
	edi = edi + 0x00000001
	// succ:  l00402010_thunk_fn00402011
l00402010_thunk_fn00402011:
	call fn00402011 (retsize: 0;)
	return
	// succ:  fn00401FF5_exit
fn00401FF5_exit:


// fn00402011
// Return size: 0
void fn00402011()
fn00402011_entry:
	// succ:  l00402011
l00402011:
	esp = fp
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	esi = esi - edi
	SCZO = cond(esi)
	ebx = edi
	ebx = ebx + edi
	SCZO = cond(ebx)
	bh = bh + 0xEA + C
	SCZO = cond(bh)
	bl = bl - ch
	SCZO = cond(bl)
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[eax + 0x00000010:word32]
	bh = bh + 0x96
	SCZO = cond(bh)
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	call fn00402146 (retsize: 4;)
l00402011:
fn00402011_exit:


// fn0040202E
// Return size: 6
void fn0040202E()
fn0040202E_entry:
	// succ:  l0040202E
l0040202E:
	esp = fp
	dh = cl
	eax = eax + 0x00000001
	SZO = cond(eax)
	ecx = ecx << 0x0000000F
	SCZO = cond(ecx)
	ebx = ebx + esi
	SCZO = cond(ebx)
	bl = 0xBC
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	call fn00402E10 (retsize: 4;)
	eax = eax ^ 0x65447F69
	SZO = cond(eax)
	C = false
	__outw(dx, ax)
	goto l00402043_thunk_fn00402044
	// succ:  l00402043_thunk_fn00402044
l0040202E:
l00402043_thunk_fn00402044:
	call fn00402044 (retsize: 6;)
	return
	// succ:  fn0040202E_exit
fn0040202E_exit:


// fn00402044
// Return size: 6
void fn00402044()
fn00402044_entry:
	// succ:  l00402044
l00402044:
	esp = fp
	bl = bl + 0x78
	SCZO = cond(bl)
	bh = bl
	ah = ah - 0x47 - C
	SCZO = cond(ah)
	dl = cl
	edx = edx - ecx
	SCZO = cond(edx)
	bl = 0xD1
	ecx = ecx >>u 0x0000000F
	SCZO = cond(ecx)
	ah = ah - 0x2E - C
	SCZO = cond(ah)
	branch Test(PE,P) l004021BF
l00402044:
fn00402044_exit:


// fn0040205C
// Return size: 0
void fn0040205C()
fn0040205C_entry:
	// succ:  l0040205C
l0040205C:
	esp = fp
	v5 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v5
	SCZO = cond(v5)
	goto l0040205C_thunk_fn0040205E
	// succ:  l0040205C_thunk_fn0040205E
l0040205C:
	call fn0040205E (retsize: 0;)
	return
	// succ:  l0040205C_thunk_fn0040205E l0040205C_thunk_fn0040205E fn0040205C_exit
l0040205C_thunk_fn0040205E:
	call fn0040205E (retsize: 0;)
	return
	// succ:  fn0040205C_exit
l0040205C_thunk_fn0040205E:
	call fn0040205E (retsize: 0;)
	return
	// succ:  fn0040205C_exit
l0040205C_thunk_fn0040205E:
	call fn0040205E (retsize: 0;)
	return
	// succ:  fn0040205C_exit
fn0040205C_exit:


// fn0040205E
// Return size: 0
void fn0040205E()
fn0040205E_entry:
	// succ:  l0040205E
l0040205E:
	ax = ax
	v4 = edx
	edx = edx
	edx = v4
	branch Test(PO,P) l004021BF
	// succ:  l00402069 l004021BF
l00402069:
	return
	// succ:  fn0040205E_exit
l004021BF:
	esi = esi + 0x00000001
	SZO = cond(esi)
	dl = dl + al
	SCZO = cond(dl)
	// succ:  l004021C0_thunk_fn004021C2
l004021C0_thunk_fn004021C2:
	call fn004021C2 (retsize: 0;)
	return
	// succ:  fn0040205E_exit
fn0040205E_exit:


// fn0040206F
// Return size: 0
void fn0040206F()
fn0040206F_entry:
	// succ:  l0040206F
l0040206F:
	esp = fp
	Mem0[esp:word32] = esi
	branch Test(EQ,Z) l00402074
	// succ:  l00402074
l00402074:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	cl = cl + dl
	SCZO = cond(cl)
	edx = edx - 0x00000001
	SZO = cond(edx)
	ch = ah
	ecx = ecx | edx
	SZO = cond(ecx)
	C = false
	ch = dl
	ch = ch ^ bh
	SZO = cond(ch)
	C = false
	branch Test(SG,S) l00402080_thunk_fn00402D36
	goto l00402086
	// succ:  l00402086 l00402080_thunk_fn00402D36
l00402080_thunk_fn00402D36:
	call fn00402D36 (retsize: 0;)
	return
	// succ:  fn0040206F_exit
l00402086:
	eax = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	branch Test(NS,S) l0040208A_thunk_fn00402D36
	goto l00402090
	// succ:  l00402090 l0040208A_thunk_fn00402D36
l0040208A_thunk_fn00402D36:
	call fn00402D36 (retsize: 0;)
	return
	// succ:  fn0040206F_exit
l00402090:
	v19 = Mem0[ecx + edi * 0x02:byte] + 0x20
	Mem0[ecx + edi * 0x02:byte] = v19
	SCZO = cond(v19)
	return
	// succ:  fn0040206F_exit
fn0040206F_exit:


// fn00402097
// Return size: 0
void fn00402097()
fn00402097_entry:
	// succ:  l00402097
l00402097:
	esp = fp
	esp = esp + 0x00000004
	ch = ch + 0x01
	SZO = cond(ch)
	cl = cl ^ al
	SZO = cond(cl)
	C = false
	cl = ~cl
	ecx = ecx + edx
	SCZO = cond(ecx)
	edi = edi - edx
	SCZO = cond(edi)
	edi = edi | ecx
	SZO = cond(edi)
	C = false
	branch Test(ULT,C) l004020A7_thunk_fn004023E8
	goto l004020AD
	// succ:  l004020AD l004020A7_thunk_fn004023E8
l004020A7_thunk_fn004023E8:
	call fn004023E8 (retsize: 0;)
	return
	// succ:  fn00402097_exit
l004020AD:
	branch Test(UGE,C) l004020AF
	// succ:  l004020AF
l004020AF:
	// succ:  l004020B5
l004020B5:
	branch Test(UGE,C) l004020B5_thunk_fn004023E8
	goto l004020BB
	// succ:  l004020BB l004020B5_thunk_fn004023E8
l004020B5_thunk_fn004023E8:
	call fn004023E8 (retsize: 0;)
	return
	// succ:  fn00402097_exit
l004020BB:
	FPUF = cond(rArg0 - Mem0[edi:real32])
	al = al + 0x91 + C
	SCZO = cond(al)
	branch Test(UGE,C) TMP!
fn00402097_exit:


// fn004020C3
// Return size: 4
void fn004020C3()
fn004020C3_entry:
	// succ:  l004020C3
l004020C3:
	esp = fp
	Mem0[esp - 0x0000002C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ah = ah - 0x01
	SZO = cond(ah)
	edi = edi + esi
	SCZO = cond(edi)
	ah = ~ah
	cl = cl | ch
	SZO = cond(cl)
	C = false
	al = al + 0x01
	SZO = cond(al)
	al = al ^ bh
	SZO = cond(al)
	C = false
	call fn004024D3 (retsize: 4;)
	return
	// succ:  fn004020C3_exit
fn004020C3_exit:


// fn004020DD
// Return size: 0
void fn004020DD()
fn004020DD_entry:
	// succ:  l004020DD
l004020DD:
	esp = fp
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	cl = cl - 0x01
	SZO = cond(cl)
	ch = ch + 0x81 + C
	SCZO = cond(ch)
	ah = al
	ch = ch + 0x01
	SZO = cond(ch)
	cl = cl | al
	SZO = cond(cl)
	C = false
	ecx = ecx | ebx
	SZO = cond(ecx)
	C = false
	ch = ch | dl
	SZO = cond(ch)
	C = false
	branch Test(ULE,CZ) l004020F2_thunk_fn00402DD6
	goto l004020F8
	// succ:  l004020F8 l004020F2_thunk_fn00402DD6
l004020F2_thunk_fn00402DD6:
	call fn00402DD6 (retsize: 0;)
	return
	// succ:  fn004020DD_exit
l004020F8:
	ah = ah
	// succ:  l004020FF
l004020FF:
	branch Test(UGT,CZ) l004020FF_thunk_fn00402DD6
	goto l00402105
	// succ:  l00402105 l004020FF_thunk_fn00402DD6
l004020FF_thunk_fn00402DD6:
	call fn00402DD6 (retsize: 0;)
	return
	// succ:  fn004020DD_exit
l00402105:
	dl = dl + cl
	SCZO = cond(dl)
	__outb(0x90, al)
	dh = dh | Mem0[edx + 0xFA0BCEBC:byte]
	SZO = cond(dh)
	C = false
	// succ:  l00402109_thunk_fn0040210F
l00402109_thunk_fn0040210F:
	call fn0040210F (retsize: 0;)
	return
	// succ:  fn004020DD_exit
fn004020DD_exit:


// fn0040210D
// Return size: 0
void fn0040210D()
fn0040210D_entry:
	// succ:  l0040210D
l0040210D:
	esp = fp
	edi = edi | edx
	SZO = cond(edi)
	C = false
	goto l0040210D_thunk_fn0040210F
	// succ:  l0040210D_thunk_fn0040210F
l0040210D:
l0040210D_thunk_fn0040210F:
	call fn0040210F (retsize: 0;)
	return
	// succ:  fn0040210D_exit
fn0040210D_exit:


// fn0040210F
// Return size: 0
void fn0040210F()
fn0040210F_entry:
	goto l0040210F
	// succ:  l0040210F
l00000000_thunk_fn0040212F:
	call fn0040212F (retsize: 0;)
	return
	// succ:  fn0040210F_exit
l0040210F:
	esp = fp
	ecx = ecx + eax
	SCZO = cond(ecx)
	ch = bh
	ch = ch + 0x16 + C
	SCZO = cond(ch)
	cl = cl ^ ah
	SZO = cond(cl)
	C = false
	cl = cl - 0x47 - C
	SCZO = cond(cl)
	cl = cl + 0x5E
	SCZO = cond(cl)
	cl = cl + 0x84 + C
	SCZO = cond(cl)
	cl = ~cl
	call fn0040206F (retsize: 4;)
	esp = esp + 0xFFFFC09D
	branch Test(ULT,C) l00402128_thunk_fn0040212F
	goto l00402128_1
	// succ:  l00402128_1 l00402128_thunk_fn0040212F
l0040210F:
	ecx = ecx + eax
	SCZO = cond(ecx)
	ch = bh
	ch = ch + 0x16 + C
	SCZO = cond(ch)
	cl = cl ^ ah
	SZO = cond(cl)
	C = false
	cl = cl - 0x47 - C
	SCZO = cond(cl)
	cl = cl + 0x5E
	SCZO = cond(cl)
	cl = cl + 0x84 + C
	SCZO = cond(cl)
	cl = ~cl
	call fn0040206F (retsize: 4;)
	esp = esp + 0xFFFFC09D
	branch Test(ULT,C) l0040212F
	goto l00402128_1
	// succ:  l00402128_1 l00402128_thunk_fn0040212F
l00402128_1:
	ecx = Mem0[edx + 0x4ADEF6ED:word32]
	goto l00402128_thunk_fn0040212F
	// succ:  l00402128_thunk_fn0040212F
l00402128_1:
	ecx = Mem0[edx + 0x4ADEF6ED:word32]
	goto l00000000_thunk_fn0040212F
	// succ:  l00000000_thunk_fn0040212F
l00402128_thunk_fn0040212F:
	call fn0040212F (retsize: 0;)
	return
	// succ:  fn0040210F_exit l00402128_thunk_fn0040212F
l00402128_thunk_fn0040212F:
	call fn0040212F (retsize: 0;)
	return
	// succ:  fn0040210F_exit
l00402128_thunk_fn0040212F:
	call fn0040212F (retsize: 0;)
	return
	// succ:  fn0040210F_exit
fn0040210F_exit:


// fn0040212F
// Return size: 0
void fn0040212F()
fn0040212F_entry:
	// succ:  l0040212F
l0040212F:
	edx = edx - 0x00000001
	SZO = cond(edx)
	bl = bl + 0x97
	SCZO = cond(bl)
	bl = bl + 0x2C
	SCZO = cond(bl)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	al = 0x70
	edi = edi | eax
	SZO = cond(edi)
	C = false
	edx = esi
	// succ:  l0040213D_thunk_fn004027FC
l0040213D_thunk_fn004027FC:
	call fn004027FC (retsize: 0;)
	return
	// succ:  fn0040212F_exit
fn0040212F_exit:


// fn00402146
// Return size: 0
void fn00402146()
fn00402146_entry:
	// succ:  l00402146
l00402146:
	esp = fp
	Mem0[esp - 0x00000024:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = dh
	ebx = ebx | eax
	SZO = cond(ebx)
	C = false
	bh = bh + 0x01
	SZO = cond(bh)
	edi = edi + 0x00000001
	SZO = cond(edi)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	bh = cl
	call fn00402C8C (retsize: 4;)
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	cl = 0xC9
	ecx = 0xF61E79D9
fn00402146_exit:


// fn00402161
// Return size: 6
void fn00402161()
fn00402161_entry:
	// succ:  l00402161
l00402161:
	esp = fp
	ch = ~ch
	dh = dh + 0xB9 + C
	SCZO = cond(dh)
	bl = bl + 0x33
	SCZO = cond(bl)
	bh = bh + 0x59 + C
	SCZO = cond(bh)
	edi = edi | esi
	SZO = cond(edi)
	C = false
	bl = bl + 0x70
	SCZO = cond(bl)
	bl = bl ^ dl
	SZO = cond(bl)
	C = false
	ebx = eax
	branch Test(EQ,Z) l0040229F_in_fn00402161
	goto l0040217B
	// succ:  l0040217B l0040229F_in_fn00402161
l00402161:
l0040217B:
	branch Test(NS,S) l0040217D
	// succ:  l0040217D
l0040217D:
	v17 = bh
	bh = bh
	bh = v17
	branch Test(NE,Z) l0040229F_in_fn00402161
	// succ:  l00402185 l0040229F_in_fn00402161
l00402185:
	C = false
	__cli()
	v19 = Mem0[esi + 0x00000065:byte] >>u cl
	Mem0[esi + 0x00000065:byte] = v19
	SCZO = cond(v19)
	SCZO = cond(eax - Mem0[edi:word32])
	edi = edi + 0x00000004
	branch Test(LE,SZO) l0040218B_thunk_fn004021E9
	// succ:  l0040218B_thunk_fn0040218D l0040218B_thunk_fn004021E9
l0040218B_thunk_fn0040218D:
	call fn0040218D (retsize: 0;)
	return
	// succ:  fn00402161_exit l0040218B_thunk_fn0040218D
l0040218B_thunk_fn0040218D:
	call fn0040218D (retsize: 0;)
	return
	// succ:  fn00402161_exit
l0040218B_thunk_fn004021E9:
	call fn004021E9 (retsize: 6;)
	return
	// succ:  fn00402161_exit
l0040229F_in_fn00402161:
	return
	// succ:  fn00402161_exit
l0040229F_in_fn00402161:
	return
	// succ:  fn00402161_exit
fn00402161_exit:


// fn0040218D
// Return size: 0
void fn0040218D()
fn0040218D_entry:
	// succ:  l0040218D
l0040218D:
	esp = fp
	ch = ch + dl
	SCZO = cond(ch)
	cl = cl - 0x7C - C
	SCZO = cond(cl)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ecx = ecx - ebx
	SCZO = cond(ecx)
	ecx = ecx + ebx
	SCZO = cond(ecx)
	ch = ch - cl
	SCZO = cond(ch)
	ecx = ecx ^ edx
	SZO = cond(ecx)
	C = false
	call fn00402312 (retsize: 4;)
	eax = Mem0[esi:word32]
	esi = esi + 0x00000004
	ch = 0x6A
	al = __inb(0x70)
	Mem0[esp - 0x0000001C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bl = bl | cl
	SZO = cond(bl)
	C = false
	bh = bh + al
	SCZO = cond(bh)
	edi = ebx
	bh = bh + 0x01
	SZO = cond(bh)
	esi = esi - edi
	SCZO = cond(esi)
	call fn0040241F (retsize: 4;)
	v18 = Mem0[ebx + 0x00000062:byte] | bl
	Mem0[ebx + 0x00000062:byte] = v18
	SZO = cond(Mem0[ebx + 0x00000062:byte])
	C = false
	ebp = 0xD00246C8
	goto l004021BD_thunk_fn004021C2
	// succ:  l004021BD_thunk_fn004021C2
l0040218D:
l004021BD_thunk_fn004021C2:
	call fn004021C2 (retsize: 0;)
	return
	// succ:  fn0040218D_exit
fn0040218D_exit:


// fn004021C2
// Return size: 0
void fn004021C2()
fn004021C2_entry:
	// succ:  l004021C2
l004021C2:
	esp = fp
	esi = esi - eax
	SCZO = cond(esi)
	al = al ^ dl
	SZO = cond(al)
	C = false
	edx = esi
	bh = bh + 0xD4
	SCZO = cond(bh)
	ah = ah - 0x01
	SZO = cond(ah)
	call fn004025F2 (retsize: 4;)
	esp = esp + 0xFFFFFFFA
	branch Test(LT,SO) l004021D2_thunk_fn0040222F
	goto l004021D4
	// succ:  l004021D4 l004021D2_thunk_fn0040222F
l004021C2:
	esi = esi - eax
	SCZO = cond(esi)
	al = al ^ dl
	SZO = cond(al)
	C = false
	edx = esi
	bh = bh + 0xD4
	SCZO = cond(bh)
	ah = ah - 0x01
	SZO = cond(ah)
l004021D2_thunk_fn0040222F:
	call fn0040222F (retsize: 0;)
	return
	// succ:  fn004021C2_exit
l004021D4:
fn004021C2_exit:


// fn004021D8
// Return size: 6
void fn004021D8()
fn004021D8_entry:
	// succ:  l004021D8
l004021D8:
	esp = fp
	ah = ah + bh
	SCZO = cond(ah)
	al = dh
	eax = eax - edx
	SCZO = cond(eax)
	al = al + bl
	SCZO = cond(al)
	cl = cl - 0x01
	SZO = cond(cl)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	cl = 0x0C
	ch = ch - 0x01
	SZO = cond(ch)
	call fn00402DB6 (retsize: 4;)
	goto l004021E7_thunk_fn004021E9
	// succ:  l004021E7_thunk_fn004021E9
l004021D8:
l004021E7_thunk_fn004021E9:
	call fn004021E9 (retsize: 6;)
	return
	// succ:  fn004021D8_exit
fn004021D8_exit:


// fn004021E9
// Return size: 6
void fn004021E9()
fn004021E9_entry:
	// succ:  l004021E9
l004021E9:
	esp = fp
	eax = eax | Mem0[eax:word32]
	SZO = cond(eax)
	C = false
	v8 = Mem0[esi + 0xFE740FCC:byte] + cl
	Mem0[esi + 0xFE740FCC:byte] = v8
	SCZO = cond(v8)
	goto l004021EB_thunk_fn004021F1
	// succ:  l004021EB_thunk_fn004021F1
l004021E9:
	cs = sp
l004021EB_thunk_fn004021F1:
	call fn004021F1 (retsize: 6;)
	return
	// succ:  fn004021E9_exit
fn004021E9_exit:


// fn004021F0
// Return size: 0
void fn004021F0()
fn004021F0_entry:
	// succ:  l004021F0
l004021F0:
	esp = fp
	bl = bl - 0x01
	SZO = cond(bl)
	goto l004021F0_thunk_fn004021F1
	// succ:  l004021F0_thunk_fn004021F1
l004021F0:
l004021F0_thunk_fn004021F1:
	call fn004021F1 (retsize: 6;)
	return
	// succ:  fn004021F0_exit
fn004021F0_exit:


// fn004021F1
// Return size: 6
void fn004021F1()
fn004021F1_entry:
	// succ:  l004021F1
l004021F1:
	esp = fp
	return
	// succ:  fn004021F1_exit
l004021F1:
	ebx = ebx ^ edi
	SZO = cond(ebx)
	C = false
	esi = esi ^ ecx
	SZO = cond(esi)
	C = false
	dl = 0x5C
	cl = cl - 0x91 - C
	SCZO = cond(cl)
	bl = bl ^ ah
	SZO = cond(bl)
	C = false
	// succ:  l00402C3E
l00402C3E:
	eax = ebx
	dl = dl - 0x01
	SZO = cond(dl)
	ch = ch + bl
	SCZO = cond(ch)
	edi = edi | esi
	SZO = cond(edi)
	C = false
	bh = bh | cl
	SZO = cond(bh)
	C = false
	eax = eax ^ ebx
	SZO = cond(eax)
	C = false
	ah = bl
	// succ:  l00402C4C_thunk_fn0040226B
l00402C4C_thunk_fn0040226B:
	call fn0040226B (retsize: 0;)
	return
	// succ:  fn004021F1_exit
fn004021F1_exit:


// fn00402209
// Return size: 6
void fn00402209()
fn00402209_entry:
	// succ:  l00402209
l00402209:
	esp = fp
	bh = bh + 0x4B + C
	SCZO = cond(bh)
	bl = bl ^ dh
	SZO = cond(bl)
	C = false
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	edi = edi + 0x00000001
	SZO = cond(edi)
	bl = bh
	esi = ecx
	bh = bh - 0x01
	SZO = cond(bh)
	bl = bl + al
	SCZO = cond(bl)
	branch Test(SG,S) l00402C1F
	goto l0040221F
	// succ:  l0040221F l00402C1F
l00402209:
l0040221F:
	branch Test(GE,SO) l00402221
	// succ:  l00402221
l00402221:
	esp = esp - 0x00000002
	Mem0[esp:word16] = ax
	ax = Mem0[esp:word16]
	esp = esp + 0x00000002
	branch Test(NS,S) l00402C1F
	// succ:  l0040222B l00402C1F
l0040222B:
	ebp = ebp - 0x00000001
	SZO = cond(ebp)
	eax = __indw(0x78)
	ds = Mem0[esp:selector]
	esp = esp + 0x00000002
	// succ:  l0040222E_thunk_fn0040222F
l0040222E_thunk_fn0040222F:
	call fn0040222F (retsize: 0;)
	return
	// succ:  fn00402209_exit
l00402882:
	esi = esi + ecx
	SCZO = cond(esi)
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
	bl = bl - 0x01
	SZO = cond(bl)
	bh = bh + 0x01
	SZO = cond(bh)
	bl = bl - 0x76 - C
	SCZO = cond(bl)
	bh = bh ^ bl
	SZO = cond(bh)
	C = false
	edi = edi | esi
	SZO = cond(edi)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	eax = ecx
	bl = bl + 0x01
	SZO = cond(bl)
	call fn00402CA9 (retsize: 4;)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	Mem0[edi:word32] = eax
	edi = edi + 0x00000004
	return
	// succ:  fn00402209_exit
l00402AB9_thunk_fn00402736:
	call fn00402736 (retsize: 0;)
	return
	// succ:  fn00402209_exit
l00402C1F:
	bh = cl
	bh = bh - 0x44 - C
	SCZO = cond(bh)
	eax = eax | eax
	SZO = cond(eax)
	C = false
	branch Test(NE,Z) l00402253
	goto l00402C2C
	// succ:  l00402C2C l00402C26_thunk_fn00402244
l00402C26_thunk_fn00402244:
	call fn00402244 (retsize: 0;)
	return
	// succ:  fn00402209_exit
l00402C2C:
	bh = bh + 0x90 + C
	SCZO = cond(bh)
	bl = bl - dh
	SCZO = cond(bl)
	goto l00402882
	// succ:  l00402882
fn00402209_exit:


// fn0040222F
// Return size: 0
void fn0040222F()
fn0040222F_entry:
	// succ:  l0040222F
l0040222F:
	esp = fp
	edi = edi - ecx
	SCZO = cond(edi)
	dh = dh + 0x19 + C
	SCZO = cond(dh)
	ch = ch - bh
	SCZO = cond(ch)
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	ch = ch - 0x01
	SZO = cond(ch)
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	edx = edx - edi
	SCZO = cond(edx)
	branch Test(LT,SO) l0040223E_thunk_fn00402AAD
	goto l0040223E_thunk_fn00402244
	// succ:  l0040223E_thunk_fn00402244 l0040223E_thunk_fn00402AAD
l0040222F:
	edi = edi - ecx
	SCZO = cond(edi)
	dh = dh + 0x19 + C
	SCZO = cond(dh)
	ch = ch - bh
	SCZO = cond(ch)
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	ch = ch - 0x01
	SZO = cond(ch)
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	edx = edx - edi
	SCZO = cond(edx)
	branch Test(LT,SO) l00402AAD
	goto l0040223E_thunk_fn00402244
	// succ:  l0040223E_thunk_fn00402244 l0040223E_thunk_fn00402AAD
l0040223E_thunk_fn00402244:
	call fn00402244 (retsize: 0;)
	return
	// succ:  fn0040222F_exit l0040223E_thunk_fn00402244
l0040223E_thunk_fn00402244:
	call fn00402244 (retsize: 0;)
	return
	// succ:  fn0040222F_exit
l0040223E_thunk_fn00402244:
	call fn00402244 (retsize: 0;)
	return
	// succ:  fn0040222F_exit
l0040223E_thunk_fn00402AAD:
	call fn00402AAD (retsize: 0;)
	return
	// succ:  fn0040222F_exit
l0040223E_thunk_fn00402AAD:
	call fn00402AAD (retsize: 0;)
	return
	// succ:  fn0040222F_exit
fn0040222F_exit:


// fn00402244
// Return size: 0
void fn00402244()
fn00402244_entry:
	// succ:  l00402244
l00402244:
	bx = bx
	v4 = edi
	edi = edi
	edi = v4
	branch Test(GE,SO) l00402AAD
	goto l0040224F
	// succ:  l0040224F l00402249_thunk_fn00402AAD
l00402249_thunk_fn00402AAD:
	call fn00402AAD (retsize: 0;)
	return
	// succ:  fn00402244_exit
l0040224F:
	eax = __indw(0xB3)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	int3()
	// succ:  l00402252_thunk_fn00402253
l00402252_thunk_fn00402253:
	call fn00402253 (retsize: 0;)
	return
	// succ:  fn00402244_exit
fn00402244_exit:


// fn00402253
// Return size: 0
void fn00402253()
fn00402253_entry:
	// succ:  l00402253
l00402253:
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ah = 0x34
	edi = edi ^ eax
	SZO = cond(edi)
	C = false
	bl = bl + 0xA8 + C
	SCZO = cond(bl)
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	dl = dl - 0xBB - C
	SCZO = cond(dl)
fn00402253_exit:


// fn0040226B
// Return size: 0
void fn0040226B()
fn0040226B_entry:
	goto l0040226B
	// succ:  l0040226B
l00402260_thunk_fn00402044:
	call fn00402044 (retsize: 6;)
	return
	// succ:  fn0040226B_exit
l0040226B:
	esp = fp
	dl = dl - bl
	SCZO = cond(dl)
	dh = dh | ch
	SZO = cond(dh)
	C = false
	dl = ~dl
	ch = ch - bl
	SCZO = cond(ch)
	bl = bl + 0x43 + C
	SCZO = cond(bl)
	edx = edx ^ esi
	SZO = cond(edx)
	C = false
	bh = 0xBC
	ebx = ebx | eax
	SZO = cond(ebx)
	C = false
	goto l0040227C_thunk_fn00402DF1
	// succ:  l0040227C_thunk_fn00402DF1
l0040226B:
	goto l00402260_thunk_fn00402044
	// succ:  l00402260_thunk_fn00402044
l0040227C_thunk_fn00402DF1:
	call fn00402DF1 (retsize: 0;)
	return
	// succ:  fn0040226B_exit
fn0040226B_exit:


// fn00402287
// Return size: 4
void fn00402287()
fn00402287_entry:
	// succ:  l00402287
l00402287:
	esp = fp
	esp = esp + 0x00000004
	bl = bl + 0xC6
	SCZO = cond(bl)
	bh = cl
	bh = bh + 0x63
	SCZO = cond(bh)
	esi = esi + 0x00000001
	SZO = cond(esi)
	bl = bl - cl
	SCZO = cond(bl)
	call fn004028A2 (retsize: 4;)
	ebp = ebp | Mem0[ebx + 0x0000005A:word32]
	SZO = cond(ebp)
	C = false
	esi = esi | Mem0[edx:word32]
	SZO = cond(esi)
	C = false
	// succ:  l0040229F
l0040229F:
	return
	// succ:  fn00402287_exit
fn00402287_exit:


// fn004022E3
// Return size: 0
void fn004022E3()
fn004022E3_entry:
	// succ:  l004022E3
l004022E3:
	esp = fp
	ah = ah - 0x0B - C
	SCZO = cond(ah)
	al = al + 0x5A
	SCZO = cond(al)
	al = al | dh
	SZO = cond(al)
	C = false
	ecx = esi
	eax = ecx
	ah = ah - 0xE4 - C
	SCZO = cond(ah)
	ecx = ebx
	al = al ^ bl
	SZO = cond(al)
	C = false
	call fn00402632 (retsize: 4;)
	Mem0[ecx + 0xC60A478C:real64] = rArg0
	goto l004022FB_thunk_fn004022FF
	// succ:  l004022FB_thunk_fn004022FF
l004022E3:
l004022FB_thunk_fn004022FF:
	call fn004022FF (retsize: 0;)
	return
	// succ:  fn004022E3_exit
fn004022E3_exit:


// fn004022FF
// Return size: 0
void fn004022FF()
fn004022FF_entry:
	// succ:  l004022FF
l004022FF:
	esp = fp
	edi = edi + 0x00000001
	SZO = cond(edi)
	al = al | dh
	SZO = cond(al)
	C = false
	dl = bh
	dh = ~dh
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	dl = dl + al
	SCZO = cond(dl)
	goto l00402309_thunk_fn00402253
	// succ:  l00402309_thunk_fn00402253
l004022FF:
	dl = bh
	dh = ~dh
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	dl = dl + al
	SCZO = cond(dl)
	goto l00402309_thunk_fn00402253
	// succ:  l00402309_thunk_fn00402253
l00402309_thunk_fn00402253:
	call fn00402253 (retsize: 0;)
	return
	// succ:  fn004022FF_exit
l00402309_thunk_fn00402253:
	call fn00402253 (retsize: 0;)
	return
	// succ:  fn004022FF_exit
fn004022FF_exit:


// fn00402312
// Return size: 0
void fn00402312()
fn00402312_entry:
	// succ:  l00402312
l00402312:
	esp = fp
	Mem0[esp - 0x00000010:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ch = ch - 0x01
	SZO = cond(ch)
	cl = cl - 0x01
	SZO = cond(cl)
	ch = ch - 0xA2 - C
	SCZO = cond(ch)
	ch = ch | bh
	SZO = cond(ch)
	C = false
	ecx = esi
	ch = ch + 0x01
	SZO = cond(ch)
	call fn0040299C (retsize: 4;)
	branch Test(GT,SZO) l00402348
	// succ:  l0040232A l00402348
l0040232A:
	ebp = ebp + 0x00000001
	SZO = cond(ebp)
l00402348:
	branch ecx == 0x00000000 l00402348_thunk_fn0040238A
	// succ:  l00402348_thunk_fn0040234A l00402348_thunk_fn0040238A
l00402348_thunk_fn0040234A:
	call fn0040234A (retsize: 0;)
	return
l00402348_thunk_fn0040238A:
	call fn0040238A (retsize: 0;)
	return
	// succ:  fn00402312_exit
l00402349:
	// succ:  fn00402312_exit
fn00402312_exit:


// fn00402330
// Return size: 0
void fn00402330()
fn00402330_entry:
	// succ:  l00402330
l00402330:
	esp = fp
	Mem0[esp:word32] = eax
	di = edi
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = bl ^ cl
	SZO = cond(bl)
	C = false
	bh = bh - dl
	SCZO = cond(bh)
	bl = bl + 0x59
	SCZO = cond(bl)
	call fn00402287 (retsize: 4;)
	esp = esp + 0xFFFFE22A
	v14 = Mem0[ebp + 0xE39D36CF:byte] >>u 0x01
	Mem0[ebp + 0xE39D36CF:byte] = v14
	SCZO = cond(v14)
fn00402330_exit:


// fn0040234A
// Return size: 0
void fn0040234A()
fn0040234A_entry:
	// succ:  l0040234A
l0040234A:
	esp = fp
	Mem0[esp - 0x0000002C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi - 0x00000001
	SZO = cond(esi)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bh = bh + 0xD2 + C
	SCZO = cond(bh)
	eax = eax + 0x00000008
	SCZO = cond(eax)
	ebx = esi
	bh = bh ^ dl
	SZO = cond(bh)
	C = false
	edi = edi + ebx
	SCZO = cond(edi)
fn0040234A_exit:


// fn0040238A
// Return size: 0
void fn0040238A()
fn0040238A_entry:
	// succ:  l0040238A
l0040238A:
	esp = fp
	eax = eax + edx
	SCZO = cond(eax)
	edi = edi | eax
	SZO = cond(edi)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	eax = eax + ebx
	SCZO = cond(eax)
	esi = eax
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	bl = 0xDF
	bh = bh ^ dl
	SZO = cond(bh)
	C = false
	call fn004027E0 (retsize: 4;)
l0040238A:
fn0040238A_exit:


// fn004023C3
// Return size: 0
void fn004023C3()
fn004023C3_entry:
	// succ:  l004023C3
l004023C3:
	esp = fp
	edi = edi - edx
	SCZO = cond(edi)
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	ecx = eax
	call eax (retsize: 4;)
	cl = cl + 0x61
	SCZO = cond(cl)
	dl = 0x1F
	bl = bl + 0x01
	SZO = cond(bl)
	ch = ch ^ cl
	SZO = cond(ch)
	C = false
	branch Test(ULT,C) l00402948
	goto l004023DA
	// succ:  l004023DA l004023D4_thunk_fn00402948
l004023C3:
l004023D4_thunk_fn00402948:
	call fn00402948 (retsize: 0;)
	return
	// succ:  fn004023C3_exit
l004023DA:
	edx = edx
	branch Test(UGE,C) l00402948
	goto l004023E2
	// succ:  l004023E2 l004023DC_thunk_fn00402948
l004023DC_thunk_fn00402948:
	call fn00402948 (retsize: 0;)
	return
	// succ:  fn004023C3_exit
l004023E2:
	edi = edi + 0x00000001
	SZO = cond(edi)
	edi = 0x87A87E4C
	call fn004020DD (retsize: 4;)
	// succ:  l004023E3_thunk_fn004023E8 l004023F6_thunk_fn004023FB
l004023E3_thunk_fn004023E8:
	call fn004023E8 (retsize: 0;)
	return
	// succ:  fn004023C3_exit
l004023F6_thunk_fn004023FB:
	call fn004023FB (retsize: 0;)
	return
	// succ:  fn004023C3_exit
fn004023C3_exit:


// fn004023E8
// Return size: 0
void fn004023E8()
fn004023E8_entry:
	// succ:  l004023E8
l004023E8:
	esp = fp
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	ecx = ecx | eax
	SZO = cond(ecx)
	C = false
	cl = cl - 0x23 - C
	SCZO = cond(cl)
	edi = edi - esi
	SCZO = cond(edi)
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ecx = ecx | edi
	SZO = cond(ecx)
	C = false
	call fn004020DD (retsize: 4;)
	goto l004023F6_thunk_fn004023FB
	// succ:  l004023F6_thunk_fn004023FB
l004023E8:
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	ecx = ecx | eax
	SZO = cond(ecx)
	C = false
	cl = cl - 0x23 - C
	SCZO = cond(cl)
	edi = edi - esi
	SCZO = cond(edi)
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ecx = ecx | edi
	SZO = cond(ecx)
	C = false
l004023F6_thunk_fn004023FB:
	call fn004023FB (retsize: 0;)
	return
	// succ:  fn004023E8_exit
fn004023E8_exit:


// fn004023FB
// Return size: 0
void fn004023FB()
fn004023FB_entry:
	// succ:  l004023FB
l004023FB:
	esp = fp
	ah = 0xC6
	eax = eax - Mem0[ebx:word32]
	SCZO = cond(eax)
	v10 = Mem0[esi:byte] + bh + C
	Mem0[esi:byte] = v10
	SCZO = cond(v10)
	v12 = Mem0[ebp + 0x80042464:word32] | 0xFFFFFFC0
	Mem0[ebp + 0x80042464:word32] = v12
	SZO = cond(Mem0[ebp + 0x80042464:word32])
	C = false
	goto l00402401_thunk_fn00402408
	// succ:  l00402401_thunk_fn00402408
l004023FB:
	ah = 0xC6
	eax = eax - Mem0[ebx:word32]
	SCZO = cond(eax)
	v14 = Mem0[esi:byte] + bh + C
	Mem0[esi:byte] = v14
	SCZO = cond(v14)
	v15 = Mem0[ebp + 0x80042464:word32] | 0xFFFFFFC0
	Mem0[ebp + 0x80042464:word32] = v15
	SZO = cond(Mem0[ebp + 0x80042464:word32])
	C = false
	goto l00402401_thunk_fn00402408
	// succ:  l00402401_thunk_fn00402408
l00402401_thunk_fn00402408:
	call fn00402408 (retsize: 0;)
	return
	// succ:  fn004023FB_exit
l00402401_thunk_fn00402408:
	call fn00402408 (retsize: 0;)
	return
	// succ:  fn004023FB_exit
fn004023FB_exit:


// fn00402402
// Return size: 0
void fn00402402()
fn00402402_entry:
	// succ:  l00402402
l00402402:
	esp = fp
	esp = esp + 0x00000004
	al = al + 0x58
	SCZO = cond(al)
	call fn00402097 (retsize: 4;)
	// succ:  l00402406_thunk_fn00402408 l00402412_thunk_fn00402417
l00402406_thunk_fn00402408:
	call fn00402408 (retsize: 0;)
	return
	// succ:  fn00402402_exit
l00402412_thunk_fn00402417:
	call fn00402417 (retsize: 0;)
	return
	// succ:  fn00402402_exit
fn00402402_exit:


// fn00402408
// Return size: 0
void fn00402408()
fn00402408_entry:
	// succ:  l00402408
l00402408:
	esp = fp
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	cl = cl - 0x01
	SZO = cond(cl)
	ch = ch + bh
	SCZO = cond(ch)
	ecx = edi
	ch = ch + 0x23 + C
	SCZO = cond(ch)
	call fn00402097 (retsize: 4;)
	goto l00402412_thunk_fn00402417
	// succ:  l00402412_thunk_fn00402417
l00402408:
	cl = cl - 0x01
	SZO = cond(cl)
	ch = ch + bh
	SCZO = cond(ch)
	ecx = edi
	ch = ch + 0x23 + C
	SCZO = cond(ch)
l00402412_thunk_fn00402417:
	call fn00402417 (retsize: 0;)
	return
	// succ:  fn00402408_exit
fn00402408_exit:


// fn00402417
// Return size: 0
void fn00402417()
fn00402417_entry:
	// succ:  l00402417
l00402417:
	esp = fp
	branch Test(SG,S) l00402417_thunk_fn004023C3
	goto l00402417_thunk_fn00402419
	// succ:  l00402417_thunk_fn00402419 l00402417_thunk_fn004023C3
l00402417:
	branch Test(SG,S) l00402417_thunk_fn004023C3
	goto l00402417_thunk_fn00402419
	// succ:  l00402417_thunk_fn00402419 l00402417_thunk_fn004023C3
l00402417_thunk_fn004023C3:
	call fn004023C3 (retsize: 0;)
	return
	// succ:  fn00402417_exit
l00402417_thunk_fn004023C3:
	call fn004023C3 (retsize: 0;)
	return
	// succ:  fn00402417_exit
l00402417_thunk_fn00402419:
	call fn00402419 (retsize: 0;)
	return
	// succ:  fn00402417_exit l00402417_thunk_fn00402419
l00402417_thunk_fn00402419:
	call fn00402419 (retsize: 0;)
	return
	// succ:  fn00402417_exit
l00402417_thunk_fn00402419:
	call fn00402419 (retsize: 0;)
	return
	// succ:  fn00402417_exit
fn00402417_exit:


// fn00402419
// Return size: 0
void fn00402419()
fn00402419_entry:
	// succ:  l00402419
l00402419:
	v3 = eax
	eax = ecx
	ecx = v3
fn00402419_exit:


// fn0040241F
// Return size: 0
void fn0040241F()
fn0040241F_entry:
	// succ:  l0040241F
l0040241F:
	esp = fp
	esp = esp + 0x00000004
	ebx = ebx - edi
	SCZO = cond(ebx)
	bh = 0x33
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	edx = eax + 0x000000F8
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bl = bl - al
	SCZO = cond(bl)
	bl = ~bl
	esi = esi + ecx
	SCZO = cond(esi)
	edi = edi | eax
	SZO = cond(edi)
	C = false
	branch Test(EQ,Z) l00402E30
	// succ:  l0040243F l00402E30
l0040243F:
	v16 = eax
	eax = eax
	eax = v16
	branch Test(NE,Z) l00402E30
	// succ:  l00402447 l00402E30
l00402447:
	v17 = (Mem0[edi:byte] & 0x01 << 0x01) != 0x00
	Mem0[edi:byte] = __ror(Mem0[edi:byte], 0x01)
	C = v17
	__hlt()
l00402774:
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bh = ~bh
	bh = bh - 0x01
	SZO = cond(bh)
	bh = bh + bl
	SCZO = cond(bh)
	bh = bh | dh
	SZO = cond(bh)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[edx + 0x00000008:word32]
	edi = edi - 0x00000001
	SZO = cond(edi)
	ebx = ebx - esi
	SCZO = cond(ebx)
	bl = dh
	bh = bh | bl
	SZO = cond(bh)
	C = false
	call fn00402330 (retsize: 4;)
	edx = 0x6A677C44
	edx = edx_eax % Mem0[(edx + 0xD98041CD) + ecx * 0x00000004:word32]
	eax = edx_eax / Mem0[(edx + 0xD98041CD) + ecx * 0x00000004:word32]
	SCZO = cond(eax)
	// succ:  l00402791_thunk_fn00402798
l00402791_thunk_fn00402798:
	call fn00402798 (retsize: 0;)
	return
	// succ:  fn0040241F_exit
l00402E30:
	bh = bh + 0x01
	SZO = cond(bh)
	bh = bh + 0x9C
	SCZO = cond(bh)
	bh = ~bh
	bh = bh ^ al
	SZO = cond(bh)
	C = false
	bl = 0x4C
	esi = esi | eax
	SZO = cond(esi)
	C = false
	goto l00402774
	// succ:  l00402774
fn0040241F_exit:


// fn0040244E
// Return size: 0
void fn0040244E()
fn0040244E_entry:
	// succ:  l0040244E
l0040244E:
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = ecx
	ecx = v3
	ax = eax
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ch = ch ^ bl
	SZO = cond(ch)
	C = false
	cl = 0xA6
	ch = ch - dl
	SCZO = cond(ch)
	cl = cl + bl
	SCZO = cond(cl)
	ecx = ecx | edi
	SZO = cond(ecx)
	C = false
	branch Test(ULE,CZ) l00402C57
	// succ:  l00402465 l00402C57
l00402465:
l00402C57:
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ch = al
	ecx = ecx ^ ebx
	SZO = cond(ecx)
	C = false
	cl = cl + 0x01
	SZO = cond(cl)
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	ch = ch ^ bl
	SZO = cond(ch)
	C = false
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	ch = -ch
	SCZO = cond(ch)
	C = ch == 0x00
	edi = edi | eax
	SZO = cond(edi)
	C = false
	ch = ch + 0x55 + C
	SCZO = cond(ch)
	// succ:  l00402C6B_thunk_fn00402B0D
l00402C6B_thunk_fn00402B0D:
	call fn00402B0D (retsize: 0;)
	return
	// succ:  fn0040244E_exit
fn0040244E_exit:


// fn00402473
// Return size: 0
void fn00402473()
fn00402473_entry:
	// succ:  l00402473
l00402473:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = ebx
	ebx = v3
	branch Test(SG,S) l00402478
	// succ:  l00402478
l00402478:
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh | dh
	SZO = cond(bh)
	C = false
	dh = dh | ch
	SZO = cond(dh)
	C = false
	dh = dh - 0x8F - C
	SCZO = cond(dh)
	esi = esi + 0x00000001
	SZO = cond(esi)
	edx = (word32) al
	esi = esi | edi
	SZO = cond(esi)
	C = false
	bl = bl + ah
	SCZO = cond(bl)
	// succ:  l004028E4
l004028E4:
	esi = esi ^ ecx
	SZO = cond(esi)
	C = false
	goto l004028E5
	// succ:  l004028E5
l004028F2_thunk_fn00402E81:
	call fn00402E81 (retsize: 0;)
	return
	// succ:  fn00402473_exit
fn00402473_exit:


// fn004024D3
// Return size: 0
void fn004024D3()
fn004024D3_entry:
	// succ:  l004024D3
l004024D3:
	esp = fp
	Mem0[esp - 0x00000020:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx ^ ebx
	SZO = cond(edx)
	C = false
	dl = dl + bl
	SCZO = cond(dl)
	dh = dh - 0xD1 - C
	SCZO = cond(dh)
	ecx = ecx ^ edi
	SZO = cond(ecx)
	C = false
	ah = ch
	ecx = ecx + eax
	SCZO = cond(ecx)
	cl = cl + 0x01
	SZO = cond(cl)
fn004024D3_exit:


// fn004024EF
// Return size: 0
void fn004024EF()
fn004024EF_entry:
	// succ:  l004024EF
l004024EF:
	esp = fp
	esp = esp + 0x00000004
	call fn004020C3 (retsize: 4;)
	// succ:  l004024EF_thunk_fn004024F3 l00402505_thunk_fn0040250A
l004024EF_thunk_fn004024F3:
	call fn004024F3 (retsize: 0;)
	return
	// succ:  fn004024EF_exit
l00402505_thunk_fn0040250A:
	call fn0040250A (retsize: 0;)
	return
	// succ:  fn004024EF_exit
fn004024EF_exit:


// fn004024F3
// Return size: 0
void fn004024F3()
fn004024F3_entry:
	// succ:  l004024F3
l004024F3:
	esp = fp
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	eax = ebx
	eax = eax | esi
	SZO = cond(eax)
	C = false
	dh = ~dh
	ebx = ebx + 0x000004BF
	SCZO = cond(ebx)
	al = al - 0x01
	SZO = cond(al)
	edi = edi + 0x00000001
	SZO = cond(edi)
	ah = al
	call fn004020C3 (retsize: 4;)
	goto l00402505_thunk_fn0040250A
	// succ:  l00402505_thunk_fn0040250A
l004024F3:
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	eax = ebx
	eax = eax | esi
	SZO = cond(eax)
	C = false
	dh = ~dh
	ebx = ebx + 0x000004BF
	SCZO = cond(ebx)
	al = al - 0x01
	SZO = cond(al)
	edi = edi + 0x00000001
	SZO = cond(edi)
	ah = al
l00402505_thunk_fn0040250A:
	call fn0040250A (retsize: 0;)
	return
	// succ:  fn004024F3_exit
fn004024F3_exit:


// fn0040250A
// Return size: 0
void fn0040250A()
fn0040250A_entry:
	// succ:  l0040250A
l0040250A:
	esp = fp
	eax = eax - 0x7D088D23 - C
	SCZO = cond(eax)
	D = false
	eax = 0xFE48D5F6
	goto l00402510_thunk_fn00402515
	// succ:  l00402510_thunk_fn00402515
l0040250A:
	eax = eax - 0x7D088D23 - C
	SCZO = cond(eax)
	D = false
	eax = 0xFE48D5F6
	goto l00402510_thunk_fn00402515
	// succ:  l00402510_thunk_fn00402515
l00402510_thunk_fn00402515:
	call fn00402515 (retsize: 0;)
	return
	// succ:  fn0040250A_exit
l00402510_thunk_fn00402515:
	call fn00402515 (retsize: 0;)
	return
	// succ:  fn0040250A_exit
fn0040250A_exit:


// fn00402511
// Return size: 0
void fn00402511()
fn00402511_entry:
	// succ:  l00402511
l00402511:
	ch = ~ch
	eax = eax - 0x00000001
	SZO = cond(eax)
	ch = ch - 0x01
	SZO = cond(ch)
	// succ:  l00402514_thunk_fn00402515
l00402514_thunk_fn00402515:
	call fn00402515 (retsize: 0;)
	return
	// succ:  fn00402511_exit
l00402533_thunk_fn004024F3:
	call fn004024F3 (retsize: 0;)
	return
	// succ:  fn00402511_exit
fn00402511_exit:


// fn00402515
// Return size: 0
void fn00402515()
fn00402515_entry:
	goto l00402515
	// succ:  l00402515
l004024B0:
	eax = eax - 0x00000001
	SZO = cond(eax)
	cl = cl - al
	SCZO = cond(cl)
	ch = ch + 0xAA
	SCZO = cond(ch)
	al = al - 0x01
	SZO = cond(al)
	cl = cl + 0x91
	SCZO = cond(cl)
	edi = edi + 0x00000001
	SZO = cond(edi)
	dh = dh - 0x01
	SZO = cond(dh)
	eax = eax + esi
	SCZO = cond(eax)
	branch Test(ULE,CZ) l004024C0_thunk_fn00402EA1
	goto l004024C6
	// succ:  l004024C6 l004024C0_thunk_fn00402EA1
l004024C0_thunk_fn00402EA1:
	call fn00402EA1 (retsize: 0;)
	return
	// succ:  fn00402515_exit
l004024C6:
l00402515:
	esp = fp
l00402515:
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	dl = dl | ah
	SZO = cond(dl)
	C = false
	edi = edi + 0x00000001
	SZO = cond(edi)
	edx = edx + ebx
	SCZO = cond(edx)
	ah = ~ah
	cl = cl - al
	SCZO = cond(cl)
	branch Test(ULT,C) l00402A0D
	// succ:  l00402528 l00402A0D
l00402528:
	branch Test(ULT,C) l0040252A
	// succ:  l0040252A
l0040252A:
	branch Test(NE,Z) l0040252C
	// succ:  l0040252C
l0040252C:
	branch Test(UGE,C) l00402A0D
	// succ:  l00402532 l00402A0D
l00402532:
	edx = edx - 0x00000001
	SZO = cond(edx)
	branch Test(PO,P) TMP!
l00402A0D:
	al = 0xC6
	cl = cl - 0x7F - C
	SCZO = cond(cl)
	ch = dh
	edi = edx
	ah = ah - 0x01
	SZO = cond(ah)
	ch = ch + ah
	SCZO = cond(ch)
	edx = esi
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	edx = edx + 0x00000001
	SZO = cond(edx)
	// succ:  l00402D94
l00402D94:
	edx = edx | edi
	SZO = cond(edx)
	C = false
	edx = ecx
	ch = ch ^ dh
	SZO = cond(ch)
	C = false
	ebx = ebx - 0x000004BF
	SCZO = cond(ebx)
	eax = eax ^ esi
	SZO = cond(eax)
	C = false
	ch = ch + al
	SCZO = cond(ch)
	ah = ah + 0x7B
	SCZO = cond(ah)
	cl = 0xA3
	dl = dl + 0x01
	SZO = cond(dl)
	goto l004024B0
	// succ:  l004024B0
fn00402515_exit:


// fn0040253A
// Return size: 0
void fn0040253A()
fn0040253A_entry:
	// succ:  l0040253A
l0040253A:
	esp = fp
	esi = esi - edx
	SCZO = cond(esi)
	bh = bh | ah
	SZO = cond(bh)
	C = false
	dh = dh - 0xD5 - C
	SCZO = cond(dh)
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[ecx:word32]
	bh = bh | dl
	SZO = cond(bh)
	C = false
	bh = bh - 0xE8 - C
	SCZO = cond(bh)
	al = al + 0x27
	SCZO = cond(al)
	bl = bl + ah
	SCZO = cond(bl)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	dh = dh + ch
	SCZO = cond(dh)
	branch Test(LE,SZO) l00402551_thunk_fn00402805
	goto l00402557
	// succ:  l00402557 l00402551_thunk_fn00402805
l0040253A:
l00402551_thunk_fn00402805:
	call fn00402805 (retsize: 0;)
	return
	// succ:  fn0040253A_exit
l00402557:
	v16 = ebx
	ebx = ebx
	ebx = v16
fn0040253A_exit:


// fn00402565
// Return size: 0
void fn00402565()
fn00402565_entry:
	// succ:  l00402565
l00402565:
	esp = fp
	Mem0[esp - 0x00000020:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi ^ eax
	SZO = cond(edi)
	C = false
	bh = bh ^ dl
	SZO = cond(bh)
	C = false
	bl = bl + al
	SCZO = cond(bl)
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	bl = ~bl
	call fn00402AF1 (retsize: 4;)
	edx = edx + 0x00000001
	SZO = cond(edx)
fn00402565_exit:


// fn0040257F
// Return size: 0
void fn0040257F()
fn0040257F_entry:
	// succ:  l0040257F
l0040257F:
	esp = fp
	al = al - ch
	SCZO = cond(al)
	dl = ~dl
	esi = ecx
	al = ~al
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	ah = ah - 0x01
	SZO = cond(ah)
	dl = dl + ch
	SCZO = cond(dl)
	branch Test(OV,O) TMP!
l0040257F:
fn0040257F_exit:


// fn004025A4
// Return size: 0
void fn004025A4()
fn004025A4_entry:
	// succ:  l004025A4
l004025A4:
	ah = ah - ch
	SCZO = cond(ah)
	ah = ah | al
	SZO = cond(ah)
	C = false
	ah = ah ^ dh
	SZO = cond(ah)
	C = false
	edx = edx ^ 0x73FECA24
	SZO = cond(edx)
	C = false
	ch = ch ^ dl
	SZO = cond(ch)
	C = false
	al = al | ch
	SZO = cond(al)
	C = false
	ah = ah + bh
	SCZO = cond(ah)
	al = al - bh
	SCZO = cond(al)
	branch Test(OV,O) l004025B8_thunk_fn004022E3
	goto l004025BE
	// succ:  l004025BE l004025B8_thunk_fn004022E3
l004025B8_thunk_fn004022E3:
	call fn004022E3 (retsize: 0;)
	return
	// succ:  fn004025A4_exit
l004025BE:
fn004025A4_exit:


// fn004025CF
// Return size: 0
void fn004025CF()
fn004025CF_entry:
	// succ:  l004025CF
l004025CF:
	esp = fp
	bh = bh ^ cl
	SZO = cond(bh)
	C = false
	bl = bl - 0xED - C
	SCZO = cond(bl)
	eax = Mem0[eax:word32]
	bl = bl + 0x01
	SZO = cond(bl)
	bh = ~bh
	bl = bl - 0x5F - C
	SCZO = cond(bl)
	bh = ~bh
	edi = edi + 0x00000001
	SZO = cond(edi)
	bl = bl + 0x91
	SCZO = cond(bl)
	bl = bl + 0x01
	SZO = cond(bl)
l004025CF:
fn004025CF_exit:


// fn004025F2
// Return size: 6
void fn004025F2()
fn004025F2_entry:
	// succ:  l004025F2
l004025F2:
	Mem0[esp:word32] = edi
	v4 = edi
	edi = edi
	edi = v4
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = ~bh
	dl = dl ^ dh
	SZO = cond(dl)
	C = false
	dl = dl - dh
	SCZO = cond(dl)
	eax = esi
	al = al - 0x6C - C
	SCZO = cond(al)
	esi = esi - 0x00000001
	SZO = cond(esi)
	branch Test(EQ,Z) l00402606_thunk_fn0040202E
	goto l0040260C
	// succ:  l0040260C l00402606_thunk_fn0040202E
l00402606_thunk_fn0040202E:
	call fn0040202E (retsize: 6;)
	return
	// succ:  fn004025F2_exit
l0040260C:
fn004025F2_exit:


// fn00402618
// Return size: 0
void fn00402618()
fn00402618_entry:
	// succ:  l00402618
l00402618:
	esp = fp
	cl = cl - 0x32 - C
	SCZO = cond(cl)
	Mem0[ebx:byte] = ah
	edi = edi + 0x00000001
	SZO = cond(edi)
	cl = cl - ch
	SCZO = cond(cl)
	cl = 0x25
	cl = 0x05
	ch = -ch
	SCZO = cond(ch)
	C = ch == 0x00
	ch = ch - al
	SCZO = cond(ch)
l00402618:
fn00402618_exit:


// fn00402632
// Return size: 0
void fn00402632()
fn00402632_entry:
	// succ:  l00402632
l00402632:
	esp = fp
	esp = esp + 0x00000004
	edi = edx
	ch = ~ch
	// succ:  l00402638_thunk_fn0040263A
l00402638_thunk_fn0040263A:
	call fn0040263A (retsize: 0;)
	return
	// succ:  fn00402632_exit
fn00402632_exit:


// fn0040263A
// Return size: 0
void fn0040263A()
fn0040263A_entry:
	// succ:  l0040263A
l0040263A:
	esp = fp
	cl = cl - dh
	SCZO = cond(cl)
	ch = ch + 0x01
	SZO = cond(ch)
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	cl = cl + ah
	SCZO = cond(cl)
	ch = ch + 0x01
	SZO = cond(ch)
	goto l004028FC
	// succ:  l004028FC
l0040263A:
l004028FC:
	al = al + 0xD0 + C
	SCZO = cond(al)
	al = al + 0x02
	SCZO = cond(al)
	ah = ah ^ al
	SZO = cond(ah)
	C = false
	al = al + 0x01
	SZO = cond(al)
	ah = ah + 0x89 + C
	SCZO = cond(ah)
	al = al - 0x01
	SZO = cond(al)
	// succ:  l0040290B_thunk_fn0040271E
l0040290B_thunk_fn0040271E:
	call fn0040271E (retsize: 0;)
	return
	// succ:  fn0040263A_exit
fn0040263A_exit:


// fn0040264D
// Return size: 0
void fn0040264D()
fn0040264D_entry:
	// succ:  l0040264D
l0040264D:
	esp = fp
	esp = esp + 0x00000004
	edi = edi - edx
	SCZO = cond(edi)
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	ch = ch + bl
	SCZO = cond(ch)
	ch = -ch
	SCZO = cond(ch)
	C = ch == 0x00
	cl = 0xC5
	cl = cl - 0x5B - C
	SCZO = cond(cl)
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	ecx = ecx + edi
	SCZO = cond(ecx)
	cl = cl + 0x41
	SCZO = cond(cl)
	// succ:  l00402665_thunk_fn0040210D
l00402665_thunk_fn0040210D:
	call fn0040210D (retsize: 0;)
	return
	// succ:  fn0040264D_exit
fn0040264D_exit:


// fn00402671
// Return size: 0
void fn00402671()
fn00402671_entry:
	// succ:  l00402671
l00402671:
	esp = fp
	bl = bl - 0x01
	SZO = cond(bl)
	bh = bh - 0x01
	SZO = cond(bh)
	esi = esi - 0x00000001
	SZO = cond(esi)
	bl = bl + 0xD7 + C
	SCZO = cond(bl)
	bh = bh + 0x01
	SZO = cond(bh)
	esi = edi
	ebx = esi
	eax = ~eax
	ebx = esi
	call fn00402A28 (retsize: 4;)
	esp = esp + 0xFFFFFFFA
	esp = esp - 0x00000004
	Mem0[esp:word32] = cs
	edi = edi + 0x00000001
	SZO = cond(edi)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0xFFFFFF9D
	__outw(dx, ax)
	al = al - 0xB4 - C
	SCZO = cond(al)
	goto l0040268D_thunk_fn0040268F
	// succ:  l0040268D_thunk_fn0040268F
l00402671:
l0040268D_thunk_fn0040268F:
	call fn0040268F (retsize: 0;)
	return
	// succ:  fn00402671_exit
fn00402671_exit:


// fn0040268F
// Return size: 0
void fn0040268F()
fn0040268F_entry:
	goto l0040268F
	// succ:  l0040268F
l004022C0:
	bh = bh - 0x01
	SZO = cond(bh)
	bl = ah
	bl = bl - 0xE9 - C
	SCZO = cond(bl)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bl = bl + dl
	SCZO = cond(bl)
	bh = bh | dl
	SZO = cond(bh)
	C = false
	bl = bl + 0x5E + C
	SCZO = cond(bl)
	branch Test(ULE,CZ) l004022D0_thunk_fn00402011
	goto l004022D6
	// succ:  l004022D6 l004022D0_thunk_fn00402011
l004022D0_thunk_fn00402011:
	call fn00402011 (retsize: 0;)
	return
	// succ:  fn0040268F_exit
l004022D6:
l0040268F:
	esp = esp + 0x00000004
	esi = esi + edi
	SCZO = cond(esi)
	bl = bl | dl
	SZO = cond(bl)
	C = false
	bh = bh - 0x01
	SZO = cond(bh)
	edi = edi + ecx
	SCZO = cond(edi)
	eax = eax + ecx
	SCZO = cond(eax)
	bl = bl - ch
	SCZO = cond(bl)
	ebx = ebx - edx
	SCZO = cond(ebx)
	bl = bl | dh
	SZO = cond(bl)
	C = false
	bl = bl ^ cl
	SZO = cond(bl)
	C = false
	goto l004022C0
	// succ:  l004022C0
fn0040268F_exit:


// fn004026AE
// Return size: 0
void fn004026AE()
fn004026AE_entry:
	// succ:  l004026AE
l004026AE:
	esp = fp
	Mem0[esp - 0x00000018:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	dl = dl ^ ch
	SZO = cond(dl)
	C = false
	dl = dl + 0x4C + C
	SCZO = cond(dl)
	ecx = ecx - esi
	SCZO = cond(ecx)
	ecx = edi
	dh = dh + 0xAB
	SCZO = cond(dh)
	branch Test(SG,S) l00402D72
	// succ:  l004026C4 l00402D72
l004026C4:
	branch Test(NS,S) l004026C6
	// succ:  l004026C6
l004026C6:
	branch Test(NS,S) l00402D72
	// succ:  l004026CC l00402D72
l004026CC:
	C = __aaa(al, ah, &al, &ah)
	v15 = eax
	eax = ebp
	ebp = v15
	bl = bl - Mem0[ecx + 0x2B345E58:byte] - C
	SCZO = cond(bl)
l00402D72:
	al = ~al
	eax = eax | edx
	SZO = cond(eax)
	C = false
	ah = ~ah
	ch = ch - 0x01
	SZO = cond(ch)
	al = al + bh
	SCZO = cond(al)
	edx = 0x73FEC690
	cl = cl + 0x4E
	SCZO = cond(cl)
	al = ~al
	eax = eax | edx
	SZO = cond(eax)
	C = false
	// succ:  l00402D88_thunk_fn004021D8
l00402D88_thunk_fn004021D8:
	call fn004021D8 (retsize: 0;)
	return
	// succ:  fn004026AE_exit
fn004026AE_exit:


// fn004026D3
// Return size: 0
void fn004026D3()
fn004026D3_entry:
	// succ:  l004026D3
l004026D3:
	ebx = ebx - edi
	SCZO = cond(ebx)
	goto l004026D4
	// succ:  l004026D4
l004026DE_thunk_fn004025CF:
	call fn004025CF (retsize: 0;)
	return
	// succ:  fn004026D3_exit
l004026E4:
	branch Test(SG,S) l004026E6
	// succ:  l004026E6
l004026E6:
fn004026D3_exit:


// fn004026F4
// Return size: 0
void fn004026F4()
fn004026F4_entry:
	// succ:  l004026F4
l004026F4:
	esp = fp
	ch = ch + dh
	SCZO = cond(ch)
	cl = cl + 0x0C + C
	SCZO = cond(cl)
	ch = ch ^ dh
	SZO = cond(ch)
	C = false
	cl = cl ^ dh
	SZO = cond(cl)
	C = false
	edi = edi - edx
	SCZO = cond(edi)
	edi = edi + 0x00000001
	SZO = cond(edi)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	cl = cl + 0x23 + C
	SCZO = cond(cl)
	branch Test(LE,SZO) l00402A94
	goto l0040270A
	// succ:  l0040270A l00402A94
l004026F4:
l0040270A:
	// succ:  l00402710
l00402710:
l00402A94:
	ecx = ecx | esi
	SZO = cond(ecx)
	C = false
	cl = cl | bl
	SZO = cond(cl)
	C = false
	cl = cl + 0xAC
	SCZO = cond(cl)
	ch = ~ch
	v14 = (al & 0x01 << 0x08 - 0x1B) != 0x00
	al = __rol(al, 0x1B)
	C = v14
	edi = edi ^ esi
	SZO = cond(edi)
	C = false
	ch = ch | cl
	SZO = cond(ch)
	C = false
fn004026F4_exit:


// fn0040271E
// Return size: 0
void fn0040271E()
fn0040271E_entry:
	// succ:  l0040271E
l0040271E:
	esp = fp
	ah = ah ^ al
	SZO = cond(ah)
	C = false
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ah = -ah
	SCZO = cond(ah)
	C = ah == 0x00
	al = al - bl
	SCZO = cond(al)
	ch = dl
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	call fn004029CD (retsize: 4;)
	C = __das(al, &al)
	esp = esp - 0x00000004
	Mem0[esp:word32] = cs
	dh = 0x79
	Mem0[edi:byte] = al
	edi = edi + 0x00000001
	bh = bh + Mem0[eax + 0x8085B301:byte] + C
	SCZO = cond(bh)
	goto l00402733_thunk_fn00402739
	// succ:  l00402733_thunk_fn00402739
l0040271E:
l00402733_thunk_fn00402739:
	call fn00402739 (retsize: 0;)
	return
	// succ:  fn0040271E_exit
fn0040271E_exit:


// fn00402736
// Return size: 0
void fn00402736()
fn00402736_entry:
	// succ:  l00402736
l00402736:
	esp = fp
	bl = 0x85
	ch = ch + 0x07
	SCZO = cond(ch)
	goto l00402738_thunk_fn00402739
	// succ:  l00402738_thunk_fn00402739
l00402736:
l00402738_thunk_fn00402739:
	call fn00402739 (retsize: 0;)
	return
	// succ:  fn00402736_exit
l0040274B_thunk_fn004023C3:
	call fn004023C3 (retsize: 0;)
	return
	// succ:  fn00402736_exit
fn00402736_exit:


// fn00402739
// Return size: 0
void fn00402739()
fn00402739_entry:
	// succ:  l00402739
l00402739:
	esp = fp
	ds_eax = Mem0[edi + 0x00000000:segptr32]
	edi = edi - 0x00000001
	SZO = cond(edi)
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	edi = edi ^ esi
	SZO = cond(edi)
	C = false
	dh = bh
	ecx = ecx - esi
	SCZO = cond(ecx)
	dh = dh + ah
	SCZO = cond(dh)
	dl = dl ^ bl
	SZO = cond(dl)
	C = false
	dh = dh - 0x69 - C
	SCZO = cond(dh)
	// succ:  l0040274B_thunk_fn004023C3 l0040274B_thunk_fn004023C3
l00402739:
	edi = edi - 0x00000001
	SZO = cond(edi)
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	edi = edi ^ esi
	SZO = cond(edi)
	C = false
	dh = bh
	ecx = ecx - esi
	SCZO = cond(ecx)
	dh = dh + ah
	SCZO = cond(dh)
	dl = dl ^ bl
	SZO = cond(dl)
	C = false
	dh = dh - 0x69 - C
	SCZO = cond(dh)
l0040274B_thunk_fn004023C3:
	call fn004023C3 (retsize: 0;)
	return
	// succ:  fn00402739_exit
fn00402739_exit:


// fn00402754
// Return size: 0
void fn00402754()
fn00402754_entry:
	// succ:  l00402754
l00402754:
	esp = fp
	bh = bh + 0x7D
	SCZO = cond(bh)
	bl = bl - ch
	SCZO = cond(bl)
	bh = bh - 0x42 - C
	SCZO = cond(bh)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bl = bl + 0x01
	SZO = cond(bl)
	esi = esi + ebx
	SCZO = cond(esi)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bl = bl + 0x01
	SZO = cond(bl)
	bh = bh - 0x0F - C
	SCZO = cond(bh)
	bh = bh + 0x97
	SCZO = cond(bh)
	goto l0040276B_thunk_fn00402671
	// succ:  l0040276B_thunk_fn00402671
l00402754:
l0040276B_thunk_fn00402671:
	call fn00402671 (retsize: 0;)
	return
	// succ:  fn00402754_exit
fn00402754_exit:


// fn00402793
// Return size: 0
void fn00402793()
fn00402793_entry:
	// succ:  l00402793
l00402793:
	cl = ch
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	cl = cl - 0xB6 - C
	SCZO = cond(cl)
	// succ:  l00402796_thunk_fn00402798
l00402796_thunk_fn00402798:
	call fn00402798 (retsize: 0;)
	return
	// succ:  fn00402793_exit
fn00402793_exit:


// fn00402798
// Return size: 0
void fn00402798()
fn00402798_entry:
	// succ:  l00402798
l00402798:
	esp = fp
	dh = 0x80
l00402798:
	ch = ch + 0xCD + C
	SCZO = cond(ch)
	cl = cl - ah
	SCZO = cond(cl)
	cl = cl + 0xD7 + C
	SCZO = cond(cl)
	ecx = ecx ^ ebx
	SZO = cond(ecx)
	C = false
	call fn004029EB (retsize: 4;)
	branch Test(EQ,Z) l004027A8_thunk_fn004027E0
	goto l004027AA
	// succ:  l004027AA l004027A8_thunk_fn004027E0
l004027A8_thunk_fn004027E0:
	call fn004027E0 (retsize: 0;)
	return
	// succ:  fn00402798_exit
l004027AA:
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	al = Mem0[esi:byte]
	esi = esi + 0x00000001
	v16 = Mem0[ecx + 0x97A488E9:word32] + 0xFFFFFFF6
	Mem0[ecx + 0x97A488E9:word32] = v16
	SCZO = cond(v16)
	// succ:  l004027AD_thunk_fn004027B4
l004027AD_thunk_fn004027B4:
	call fn004027B4 (retsize: 0;)
	return
	// succ:  fn00402798_exit
fn00402798_exit:


// fn004027AE
// Return size: 0
void fn004027AE()
fn004027AE_entry:
	// succ:  l004027AE
l004027AE:
	ecx = ecx - 0xF697A488
	SCZO = cond(ecx)
fn004027AE_exit:


// fn004027B3
// Return size: 0
void fn004027B3()
fn004027B3_entry:
	// succ:  l004027B3
l004027B3:
	esp = fp
	edx = edx_eax % Mem0[ebx:byte]
	eax = edx_eax /u Mem0[ebx:byte]
	SCZO = cond(eax)
	goto l004027B3_thunk_fn004027B5
	// succ:  l004027B3_thunk_fn004027B5
l004027B3:
	call fn004027B4 (retsize: 0;)
	return
	// succ:  l004027B4 fn004027B3_exit
l004027B3_thunk_fn004027B5:
	call fn004027B5 (retsize: 0;)
	return
	// succ:  fn004027B3_exit
fn004027B3_exit:


// fn004027B4
// Return size: 0
void fn004027B4()
fn004027B4_entry:
	// succ:  l004027B4
l004027B4:
	esp = fp
	edi = edi ^ eax
	SZO = cond(edi)
	C = false
	goto l004027B4_thunk_fn004027B5
	// succ:  l004027B4_thunk_fn004027B5
l004027B4:
	edi = edi ^ eax
	SZO = cond(edi)
	C = false
	edi = edi + esi
	SCZO = cond(edi)
	SCZO = cond(ecx - 0x09685B78)
	branch Test(NE,Z) l004027BE_thunk_fn0040263A
l004027B4_thunk_fn004027B5:
	call fn004027B5 (retsize: 0;)
	return
	// succ:  fn004027B4_exit
l004027DE_thunk_fn004027E5:
	call fn004027E5 (retsize: 0;)
	return
	// succ:  fn004027B4_exit
fn004027B4_exit:


// fn004027B5
// Return size: 0
void fn004027B5()
fn004027B5_entry:
	// succ:  l004027B5
l004027B5:
	esp = fp
	C = false
	edi = edi + esi
	SCZO = cond(edi)
	SCZO = cond(ecx - 0x09685B78)
	branch Test(NE,Z) l004027BE_thunk_fn0040263A
	// succ:  l004027BE_thunk_fn004027C4 l004027BE_thunk_fn0040263A l004027BE_thunk_fn004027C4 l004027BE_thunk_fn0040263A
l004027B5:
	edi = edi + esi
	SCZO = cond(edi)
	SCZO = cond(ecx - 0x09685B78)
	branch Test(NE,Z) l004027BE_thunk_fn0040263A
	// succ:  l004027BD_thunk_fn004027C4 l004027BE_thunk_fn0040263A
l004027BD_thunk_fn004027C4:
	call fn004027C4 (retsize: 0;)
	return
	// succ:  fn004027B5_exit
l004027BE_thunk_fn0040263A:
	call fn0040263A (retsize: 0;)
	return
	// succ:  fn004027B5_exit
l004027BE_thunk_fn0040263A:
	call fn0040263A (retsize: 0;)
	return
	// succ:  fn004027B5_exit
l004027BE_thunk_fn004027C4:
	call fn004027C4 (retsize: 0;)
	return
	// succ:  fn004027B5_exit l004027BE_thunk_fn004027C4
l004027BE_thunk_fn004027C4:
	call fn004027C4 (retsize: 0;)
	return
	// succ:  fn004027B5_exit
fn004027B5_exit:


// fn004027C4
// Return size: 0
void fn004027C4()
fn004027C4_entry:
	// succ:  l004027C4
l004027C4:
	dl = dl - 0x73 - C
	SCZO = cond(dl)
	bl = ~bl
	branch Test(SG,S) l004027C9_thunk_fn004021F0
	goto l004027CF
	// succ:  l004027CF l004027C9_thunk_fn004021F0
l004027C9_thunk_fn004021F0:
	call fn004021F0 (retsize: 0;)
	return
	// succ:  fn004027C4_exit
l004027CF:
	ch = ch
	branch Test(UGE,C) l004027D3
	// succ:  l004027D3
l004027D3:
	branch Test(NS,S) l004027D3_thunk_fn004021F0
	goto l004027D9
	// succ:  l004027D9 l004027D3_thunk_fn004021F0
l004027D3_thunk_fn004021F0:
	call fn004021F0 (retsize: 0;)
	return
	// succ:  fn004027C4_exit
l004027D9:
	al = Mem0[ebx + (uint32) al:byte]
	ah = ah - ch
	SCZO = cond(ah)
	v12 = eax
	eax = esp
	esp = v12
	cx = cx | Mem0[ebp + 0x02042464:word16]
	SZO = cond(cx)
	C = false
	goto l004027DE_thunk_fn004027E5
	// succ:  l004027DE_thunk_fn004027E5
fn004027C4_exit:


// fn004027E0
// Return size: 0
void fn004027E0()
fn004027E0_entry:
	// succ:  l004027E0
l004027E0:
	esp = fp
	esp = esp + 0x00000004
	bl = bl + al
	SCZO = cond(bl)
	call fn004028BB (retsize: 4;)
	// succ:  l004027E4_thunk_fn004027E5 l004027F2_thunk_fn004027F7
l004027E4_thunk_fn004027E5:
	call fn004027E5 (retsize: 0;)
	return
	// succ:  fn004027E0_exit
l004027F2_thunk_fn004027F7:
	call fn004027F7 (retsize: 0;)
	return
	// succ:  fn004027E0_exit
fn004027E0_exit:


// fn004027E5
// Return size: 0
void fn004027E5()
fn004027E5_entry:
	// succ:  l004027E5
l004027E5:
	esp = fp
	rArg0 = rArg0 * Mem0[ebx + 0x0BF003D9:real32]
	__cli()
	bh = bh + 0xDE + C
	SCZO = cond(bh)
	bh = bh - 0x68 - C
	SCZO = cond(bh)
	call fn004028BB (retsize: 4;)
	goto l004027F2_thunk_fn004027F7
	// succ:  l004027F2_thunk_fn004027F7
l004027E5:
	ebx = ecx
	esi = esi + eax
	SCZO = cond(esi)
	edi = edi | edx
	SZO = cond(edi)
	C = false
	bh = bh + 0xDE + C
	SCZO = cond(bh)
	bh = bh - 0x68 - C
	SCZO = cond(bh)
l004027F2_thunk_fn004027F7:
	call fn004027F7 (retsize: 0;)
	return
	// succ:  fn004027E5_exit
fn004027E5_exit:


// fn004027F7
// Return size: 0
void fn004027F7()
fn004027F7_entry:
	// succ:  l004027F7
l004027F7:
	esp = fp
	eax = Mem0[esi:word32]
	esi = esi + 0x00000004
	branch Test(PO,P) l004027F8_thunk_fn004027B3
	goto l004027F8_thunk_fn004027FA
	// succ:  l004027F8_thunk_fn004027FA l004027F8_thunk_fn004027B3
l004027F7:
	eax = Mem0[esi:word32]
	esi = esi + 0x00000004
	branch Test(PO,P) l004027F8_thunk_fn004027B3
	goto l004027F8_thunk_fn004027FA
	// succ:  l004027F8_thunk_fn004027FA l004027F8_thunk_fn004027B3
l004027F8_thunk_fn004027B3:
	call fn004027B3 (retsize: 0;)
	return
	// succ:  fn004027F7_exit
l004027F8_thunk_fn004027B3:
	call fn004027B3 (retsize: 0;)
	return
	// succ:  fn004027F7_exit
l004027F8_thunk_fn004027FA:
	call fn004027FA (retsize: 0;)
	return
	// succ:  fn004027F7_exit l004027F8_thunk_fn004027FA
l004027F8_thunk_fn004027FA:
	call fn004027FA (retsize: 0;)
	return
	// succ:  fn004027F7_exit
l004027F8_thunk_fn004027FA:
	call fn004027FA (retsize: 0;)
	return
	// succ:  fn004027F7_exit
fn004027F7_exit:


// fn004027FA
// Return size: 0
void fn004027FA()
fn004027FA_entry:
	// succ:  l004027FA
l004027FA:
	v3 = eax
	eax = ebp
	ebp = v3
	esp = esp - 0x00000004
	Mem0[esp:word32] = ds
	// succ:  l004027FB_thunk_fn004027FC
l004027FB_thunk_fn004027FC:
	call fn004027FC (retsize: 0;)
	return
	// succ:  fn004027FA_exit
fn004027FA_exit:


// fn004027FC
// Return size: 0
void fn004027FC()
fn004027FC_entry:
	// succ:  l004027FC
l004027FC:
	esp = fp
	cl = ~cl
	eax = eax - esi
	SCZO = cond(eax)
	bl = dh
	cl = cl - 0x7A - C
	SCZO = cond(cl)
	goto l00402802_thunk_fn00402805
	// succ:  l00402802_thunk_fn00402805
l004027FC:
	cl = ~cl
	eax = eax - esi
	SCZO = cond(eax)
	bl = dh
	cl = cl - 0x7A - C
	SCZO = cond(cl)
	goto l00402802_thunk_fn00402805
	// succ:  l00402802_thunk_fn00402805
l00402802_thunk_fn00402805:
	call fn00402805 (retsize: 0;)
	return
	// succ:  fn004027FC_exit
l00402802_thunk_fn00402805:
	call fn00402805 (retsize: 0;)
	return
	// succ:  fn004027FC_exit
fn004027FC_exit:


// fn00402805
// Return size: 0
void fn00402805()
fn00402805_entry:
	// succ:  l00402805
l00402805:
	esp = fp
	ah = ah - 0x2C - C
	SCZO = cond(ah)
	edi = edx
	eax = eax - edi
	SCZO = cond(eax)
	ah = ah + 0x01
	SZO = cond(ah)
	ebx = ebx + ecx
	SCZO = cond(ebx)
	eax = eax ^ esi
	SZO = cond(eax)
	C = false
	al = ~al
	dh = ~dh
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	goto l00402C76
	// succ:  l00402C76
l00402805:
l00402C76:
	edi = edi - 0x00000001
	SZO = cond(edi)
	bh = ~bh
	dl = ~dl
	bh = bh ^ ch
	SZO = cond(bh)
	C = false
	bl = bl - 0x01
	SZO = cond(bl)
	dl = dl - cl
	SCZO = cond(dl)
	dl = ~dl
	call fn00402473 (retsize: 4;)
	ecx = ecx ^ ebp
	SZO = cond(ecx)
	C = false
	cl = cl - Mem0[eax + 0x86243C89:byte]
	SCZO = cond(cl)
	// succ:  l00402C8A_thunk_fn00402C90
l00402C8A_thunk_fn00402C90:
	call fn00402C90 (retsize: 0;)
	return
	// succ:  fn00402805_exit
fn00402805_exit:


// fn00402820
// Return size: 0
void fn00402820()
fn00402820_entry:
	// succ:  l00402820
l00402820:
	esp = fp
	edi = ebx
	al = al + 0x41
	SCZO = cond(al)
	dh = dh + 0x15 + C
	SCZO = cond(dh)
	ecx = ebx
	bh = bh - 0x01
	SZO = cond(bh)
	dh = ~dh
	ecx = ecx | esi
	SZO = cond(ecx)
	C = false
	ah = ah + 0x35
	SCZO = cond(ah)
	cl = ~cl
	edx = edx ^ ecx
	SZO = cond(edx)
	C = false
	call fn00402E47 (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	v16 = (Mem0[ebp + 0x06064F5B:word32] & 0x00000001 << 0x01) != 0x00000000
	Mem0[ebp + 0x06064F5B:word32] = __ror(Mem0[ebp + 0x06064F5B:word32], 0x01)
	C = v16
	SCZO = cond(dh - bh)
	goto l00402842_thunk_fn00402844
	// succ:  l00402842_thunk_fn00402844
l00402820:
l00402842_thunk_fn00402844:
	call fn00402844 (retsize: 0;)
	return
	// succ:  fn00402820_exit
fn00402820_exit:


// fn00402843
// Return size: 0
void fn00402843()
fn00402843_entry:
	// succ:  l00402843
l00402843:
	esp = fp
	dh = dh + 0x01
	SZO = cond(dh)
	goto l00402843_thunk_fn00402844
	// succ:  l00402843_thunk_fn00402844
l00402843:
l00402843_thunk_fn00402844:
	call fn00402844 (retsize: 0;)
	return
	// succ:  fn00402843_exit
l00402857_thunk_fn00402820:
	call fn00402820 (retsize: 0;)
	return
	// succ:  fn00402843_exit
fn00402843_exit:


// fn00402844
// Return size: 0
void fn00402844()
fn00402844_entry:
	// succ:  l00402844
l00402844:
	esp = fp
	Mem0[eax + 0xC58085C2:byte] = 0x1D
	ebx = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00003000
	edx = edx - 0x00000001
	SZO = cond(edx)
	bh = bh + 0x01
	SZO = cond(bh)
	edi = edi - eax
	SCZO = cond(edi)
	// succ:  l00402857_thunk_fn00402820 l00402857_thunk_fn00402820
l00402844:
	dl = dl + 0x85
	SCZO = cond(dl)
	ch = ch + 0x1D
	SCZO = cond(ch)
	ebx = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00003000
	edx = edx - 0x00000001
	SZO = cond(edx)
	bh = bh + 0x01
	SZO = cond(bh)
	edi = edi - eax
	SCZO = cond(edi)
l00402857_thunk_fn00402820:
	call fn00402820 (retsize: 0;)
	return
	// succ:  fn00402844_exit
fn00402844_exit:


// fn004028A2
// Return size: 0
void fn004028A2()
fn004028A2_entry:
	// succ:  l004028A2
l004028A2:
	esp = fp
	esp = esp + 0x00000004
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	bh = bh + 0xCB + C
	SCZO = cond(bh)
	edi = edx
	esi = esi - 0x00000001
	SZO = cond(esi)
	edi = edi - edx
	SCZO = cond(edi)
	call fn00402B40 (retsize: 4;)
fn004028A2_exit:


// fn004028BB
// Return size: 0
void fn004028BB()
fn004028BB_entry:
	goto l004028BB
	// succ:  l004028BB
l0040285C:
	ebx = ebx + Mem0[ecx + 0x0000000B:word32] + C
	SCZO = cond(ebx)
	v22 = (Mem0[edx:word32] & 0x00000001 << 0x01) != 0x00000000
	Mem0[edx:word32] = __ror(Mem0[edx:word32], 0x01)
	C = v22
	v23 = Mem0[ebx:word32] << 0x00000001
	Mem0[ebx:word32] = v23
	SCZO = cond(v23)
	// succ:  l00402863
l00402863:
	__cli()
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ah = ~ah
	eax = eax + ebx
	SCZO = cond(eax)
	edx = edx | eax
	SZO = cond(edx)
	C = false
	branch Test(EQ,Z) l0040286B_thunk_fn004022FF
	goto l00402871
	// succ:  l00402871 l0040286B_thunk_fn004022FF
l0040286B_thunk_fn004022FF:
	call fn004022FF (retsize: 0;)
	return
	// succ:  fn004028BB_exit
l00402871:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp - 0x00000002
	Mem0[esp:word16] = si
	si = Mem0[esp:word16]
	esp = esp + 0x00000002
	branch Test(NE,Z) l00402877_thunk_fn004022FF
	goto l0040287D
	// succ:  l0040287D l00402877_thunk_fn004022FF
l00402877_thunk_fn004022FF:
	call fn004022FF (retsize: 0;)
	return
	// succ:  fn004028BB_exit
l0040287D:
	__outb(0x63, al)
	branch Test(ULE,CZ) l0040285C
	// succ:  l00402881 l0040285C
l00402881:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00402882_in_fn004028BB
l00402882_in_fn004028BB:
	esi = esi + ecx
	SCZO = cond(esi)
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
	bl = bl - 0x01
	SZO = cond(bl)
	bh = bh + 0x01
	SZO = cond(bh)
	bl = bl - 0x76 - C
	SCZO = cond(bl)
	bh = bh ^ bl
	SZO = cond(bh)
	C = false
	edi = edi | esi
	SZO = cond(edi)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	eax = ecx
	bl = bl + 0x01
	SZO = cond(bl)
	call fn00402CA9 (retsize: 4;)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	Mem0[edi:word32] = eax
	edi = edi + 0x00000004
	return
	// succ:  fn004028BB_exit
l004028BB:
	esp = fp
	Mem0[esp - 0x0000000C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh + ch
	SCZO = cond(bh)
	esi = esi | edi
	SZO = cond(esi)
	C = false
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	eax = eax ^ 0xFFFFFEC8
	SZO = cond(eax)
	C = false
	bl = bl - 0x36 - C
	SCZO = cond(bl)
	bl = ~bl
	branch Test(PE,P) l004028CF_thunk_fn00402754
	goto l004028D5
	// succ:  l004028D5 l004028CF_thunk_fn00402754
l004028CF_thunk_fn00402754:
	call fn00402754 (retsize: 0;)
	return
	// succ:  fn004028BB_exit
l004028D5:
	edx = edx
	branch Test(PO,P) l004028D7_thunk_fn00402754
	goto l004028DD
	// succ:  l004028DD l004028D7_thunk_fn00402754
l004028D7_thunk_fn00402754:
	call fn00402754 (retsize: 0;)
	return
	// succ:  fn004028BB_exit
l004028DD:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	branch Test(NS,S) l00402863
	// succ:  l004028E0 l00402863
l004028E0:
	SCZO = cond(Mem0[edi:word32] - 0x0000005C)
	ecx = ecx - 0x00000001
	branch Test(NE,Z) && ecx != 0x00000000 TMP!
l004028E3_thunk_fn00402918:
	call fn00402918 (retsize: 0;)
	return
	// succ:  fn004028BB_exit
fn004028BB_exit:


// fn00402918
// Return size: 0
void fn00402918()
fn00402918_entry:
	// succ:  l00402918
l00402918:
	esp = fp
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	ecx = ecx + esi
	SCZO = cond(ecx)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	bh = bh ^ dh
	SZO = cond(bh)
	C = false
	goto l0040291F_thunk_fn0040222F
	// succ:  l0040291F_thunk_fn0040222F
l00402918:
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	ecx = ecx + esi
	SCZO = cond(ecx)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	bh = bh ^ dh
	SZO = cond(bh)
	C = false
	goto l0040291F_thunk_fn0040222F
	// succ:  l0040291F_thunk_fn0040222F
l0040291F_thunk_fn0040222F:
	call fn0040222F (retsize: 0;)
	return
	// succ:  fn00402918_exit
l0040291F_thunk_fn0040222F:
	call fn0040222F (retsize: 0;)
	return
	// succ:  fn00402918_exit
fn00402918_exit:


// fn0040292B
// Return size: 0
void fn0040292B()
fn0040292B_entry:
	// succ:  l0040292B
l0040292B:
	esp = fp
	esp = esp + 0x00000004
	ch = ~ch
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	cl = ~cl
	al = al + 0xC9 + C
	SCZO = cond(al)
	call fn00402B5F (retsize: 4;)
	dl = 0x41
	esp = esp - 0x00000004
	Mem0[esp:word32] = ds
	v14 = Mem0[esi + 0x00000069:word32] << cl
	Mem0[esi + 0x00000069:word32] = v14
	SCZO = cond(v14)
	al = al | 0xD1
	SZO = cond(al)
	C = false
	// succ:  l00402946_thunk_fn00402948
l00402946_thunk_fn00402948:
	call fn00402948 (retsize: 0;)
	return
	// succ:  fn0040292B_exit
fn0040292B_exit:


// fn00402948
// Return size: 0
void fn00402948()
fn00402948_entry:
	// succ:  l00402948
l00402948:
	edx = edx - ebx
	SCZO = cond(edx)
	dh = dh - 0xBC - C
	SCZO = cond(dh)
	ebx = ebx + edx
	SCZO = cond(ebx)
	bl = ~bl
	dh = dh - al
	SCZO = cond(dh)
	bl = bl + 0xBC
	SCZO = cond(bl)
	bh = bh ^ al
	SZO = cond(bh)
	C = false
	Mem0[esp - 0x00000008:word32] = eax
	call fn004029B6 (retsize: 4;)
	C = __daa(al, &al)
	v13 = eax
	eax = esp
	esp = v13
	v14 = Mem0[ebx + 0x80D13218:word32] + esp
	Mem0[ebx + 0x80D13218:word32] = v14
	SCZO = cond(v14)
	// succ:  l00402963_thunk_fn00402969
l00402963_thunk_fn00402969:
	call fn00402969 (retsize: 0;)
	return
	// succ:  fn00402948_exit
fn00402948_exit:


// fn00402969
// Return size: 0
void fn00402969()
fn00402969_entry:
	// succ:  l00402969
l00402969:
	esp = fp
	rArg0 = rArg0 * (real64) Mem0[eax + eax * 0x0004:word16]
	v6 = (Mem0[eax:word32] & 0x00000001 << cl) != 0x00000000
	Mem0[eax:word32] = __ror(Mem0[eax:word32], cl)
	C = v6
	dl = 0x63
	edx = edx + 0x00000001
	SZO = cond(edx)
	bh = bh + 0x01
	SZO = cond(bh)
	bl = bl - 0x01
	SZO = cond(bl)
	// succ:  l00402975_thunk_fn0040253A l00402975_thunk_fn0040253A
l00402969:
	bl = bl + 0x08 + C
	SCZO = cond(bl)
	dl = 0x63
	edx = edx + 0x00000001
	SZO = cond(edx)
	bh = bh + 0x01
	SZO = cond(bh)
	bl = bl - 0x01
	SZO = cond(bl)
l00402975_thunk_fn0040253A:
	call fn0040253A (retsize: 0;)
	return
	// succ:  fn00402969_exit
fn00402969_exit:


// fn0040299C
// Return size: 0
void fn0040299C()
fn0040299C_entry:
	goto l0040299C
	// succ:  l0040299C
l00402982:
l0040299C:
	esp = fp
	Mem0[esp - 0x00000034:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ch = ch + dl
	SCZO = cond(ch)
	edi = edi + 0x00000001
	SZO = cond(edi)
	ch = ch + 0x03 + C
	SCZO = cond(ch)
	edi = edi | ecx
	SZO = cond(edi)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	call fn0040264D (retsize: 4;)
	al = al + 0x6E
	SCZO = cond(al)
	goto l00402982
	// succ:  l00402982
fn0040299C_exit:


// fn004029B6
// Return size: 0
void fn004029B6()
fn004029B6_entry:
	// succ:  l004029B6
l004029B6:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = edi
	edi = v3
	bl = bl
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx + 0x00000001
	SZO = cond(edx)
	bl = bl + 0x01
	SZO = cond(bl)
	cl = cl + 0x01
	SZO = cond(cl)
	edx = edi
	call fn00402E63 (retsize: 4;)
	esp = esp + 0xFFFFFFFA
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	SCZO = cond(Mem0[ebp + 0x0000003E:word32] - ebp)
	ebp = 0x8D240487
	// succ:  l004029CC_thunk_fn004029D1
l004029CC_thunk_fn004029D1:
	call fn004029D1 (retsize: 0;)
	return
	// succ:  fn004029B6_exit
fn004029B6_exit:


// fn004029CD
// Return size: 0
void fn004029CD()
fn004029CD_entry:
	// succ:  l004029CD
l004029CD:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = eax
	eax = v3
	eax = eax
	// succ:  l004029D0_thunk_fn004029D1
l004029D0_thunk_fn004029D1:
	call fn004029D1 (retsize: 0;)
	return
	// succ:  fn004029CD_exit
fn004029CD_exit:


// fn004029D1
// Return size: 0
void fn004029D1()
fn004029D1_entry:
	// succ:  l004029D1
l004029D1:
	esp = fp
	v5 = Mem0[ebp + 0x6AB45812:byte] + cl
	Mem0[ebp + 0x6AB45812:byte] = v5
	SCZO = cond(v5)
	ah = ah | al
	SZO = cond(ah)
	C = false
	al = Mem0[esi:byte]
	edi = edi + eax
	SCZO = cond(edi)
	ecx = esi
	ch = ch + 0x23 + C
	SCZO = cond(ch)
	goto l004029E2_thunk_fn00402793
	// succ:  l004029E2_thunk_fn00402793
l004029D1:
	edx = edx
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	ah = 0x6A
	ah = ah | al
	SZO = cond(ah)
	C = false
	al = Mem0[esi:byte]
	edi = edi + eax
	SCZO = cond(edi)
	ecx = esi
	ch = ch + 0x23 + C
	SCZO = cond(ch)
	// succ:  l004029DE_thunk_fn00402793
l004029DE_thunk_fn00402793:
	call fn00402793 (retsize: 0;)
	return
	// succ:  fn004029D1_exit
l004029E2_thunk_fn00402793:
	call fn00402793 (retsize: 0;)
	return
	// succ:  fn004029D1_exit
fn004029D1_exit:


// fn004029EB
// Return size: 0
void fn004029EB()
fn004029EB_entry:
	// succ:  l004029EB
l004029EB:
	esp = fp
	esp = esp + 0x00000004
	ch = ~ch
	cl = cl + 0x01
	SZO = cond(cl)
	al = al ^ 0x9A
	SZO = cond(al)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	cl = dh
	ch = 0x66
	cl = 0xBC
	edi = edi ^ esi
	SZO = cond(edi)
	C = false
	cl = cl ^ bh
	SZO = cond(cl)
	C = false
	// succ:  l00402A01_thunk_fn004026F4
l00402A01_thunk_fn004026F4:
	call fn004026F4 (retsize: 0;)
	return
	// succ:  fn004029EB_exit
fn004029EB_exit:


// fn00402A28
// Return size: 6
void fn00402A28()
fn00402A28_entry:
	// succ:  l00402A28
l00402A28:
	esp = fp
	Mem0[esp - 0x0000001C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi - edx
	SCZO = cond(edi)
	bh = bh - 0xD5 - C
	SCZO = cond(bh)
	bl = bl + al
	SCZO = cond(bl)
	bh = bh + 0xD4 + C
	SCZO = cond(bh)
	bh = bh + 0x96 + C
	SCZO = cond(bh)
	bh = 0x2B
	bh = bh + 0x01
	SZO = cond(bh)
	ebx = eax
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	branch Test(OV,O) l00402A40_thunk_fn00402209
	goto l00402A46
	// succ:  l00402A46 l00402A40_thunk_fn00402209
l00402A40_thunk_fn00402209:
	call fn00402209 (retsize: 6;)
	return
	// succ:  fn00402A28_exit
l00402A46:
	ah = ah
	di = di
	branch Test(NO,O) l00402A4B_thunk_fn00402209
	goto l00402A51
	// succ:  l00402A51 l00402A4B_thunk_fn00402209
l00402A4B_thunk_fn00402209:
	call fn00402209 (retsize: 6;)
	return
	// succ:  fn00402A28_exit
l00402A51:
	SCZO = cond(Mem0[edx + 0x128F4763:byte] - dl)
	al = al + 0x77 + C
	SCZO = cond(al)
	esp = esp + 0x00000004
	dh = dh + 0x95 + C
	SCZO = cond(dh)
	ah = ah - 0xA2 - C
	SCZO = cond(ah)
	dh = dh + ah
	SCZO = cond(dh)
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	dh = dh + 0x3F + C
	SCZO = cond(dh)
	edx = edi
	al = al - cl
	SCZO = cond(al)
	dl = dl + 0xDA
	SCZO = cond(dl)
	call fn0040292B (retsize: 4;)
	es = Mem0[esp:selector]
	esp = esp + 0x00000002
	ah = 0xC5
	al = Mem0[ebx + (uint32) al:byte]
	// succ:  l00402A79_thunk_fn00402A7A
l00402A79_thunk_fn00402A7A:
	call fn00402A7A (retsize: 0;)
	return
	// succ:  fn00402A28_exit
fn00402A28_exit:


// fn00402A7A
// Return size: 0
void fn00402A7A()
fn00402A7A_entry:
	// succ:  l00402A7A
l00402A7A:
	esp = fp
	Mem0[esp - 0x00000014:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi - 0x00000001
	SZO = cond(edi)
	edi = edi + esi
	SCZO = cond(edi)
	eax = eax >>u 0x00000010
	SCZO = cond(eax)
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	edi = edi + esi
	SCZO = cond(edi)
	// succ:  l00402A89_thunk_fn0040238A
l00402A89_thunk_fn0040238A:
	call fn0040238A (retsize: 0;)
	return
	// succ:  fn00402A7A_exit
fn00402A7A_exit:


// fn00402AAD
// Return size: 0
void fn00402AAD()
fn00402AAD_entry:
	// succ:  l00402AAD
l00402AAD:
	cl = cl - 0x01
	SZO = cond(cl)
	dl = dl | dh
	SZO = cond(dl)
	C = false
	dl = dl - 0x01
	SZO = cond(dl)
	dl = dl + bh
	SCZO = cond(dl)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esi = edi
	goto l00402AB9_thunk_fn00402736
	// succ:  l00402AB9_thunk_fn00402736
fn00402AAD_exit:


// fn00402AC2
// Return size: 0
void fn00402AC2()
fn00402AC2_entry:
	// succ:  l00402AC2
l00402AC2:
	esp = fp
	Mem0[esp:word32] = ebx
fn00402AC2_exit:


// fn00402AD9
// Return size: 0
void fn00402AD9()
fn00402AD9_entry:
	// succ:  l00402AD9
l00402AD9:
	esp = fp
	Mem0[esp - 0x0000001C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = bl ^ cl
	SZO = cond(bl)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	esi = esi + edi
	SCZO = cond(esi)
	bl = bl + dl
	SCZO = cond(bl)
	bl = bl + 0x01
	SZO = cond(bl)
	bh = bh - 0x01
	SZO = cond(bh)
	call fn0040234A (retsize: 4;)
	branch Test(EQ,Z) l00402AED_thunk_fn00402B51
	goto l00402AEF
	// succ:  l00402AEF l00402AED_thunk_fn00402B51
l00402AED_thunk_fn00402B51:
	call fn00402B51 (retsize: 0;)
	return
	// succ:  fn00402AD9_exit
l00402AEF:
	bh = bh ^ Mem0[ecx:byte]
	SZO = cond(bh)
	C = false
	// succ:  l00402AEF_thunk_fn00402AF1
l00402AEF_thunk_fn00402AF1:
	call fn00402AF1 (retsize: 0;)
	return
	// succ:  fn00402AD9_exit
fn00402AD9_exit:


// fn00402AF1
// Return size: 0
void fn00402AF1()
fn00402AF1_entry:
	goto l00402AF1
	// succ:  l00402AF1
l00402494:
	esi = esi - 0x00000001
	SZO = cond(esi)
	cl = cl + dh
	SCZO = cond(cl)
	ch = ~ch
	edi = edi + 0x00000001
	SZO = cond(edi)
	cl = cl - 0x91 - C
	SCZO = cond(cl)
	edi = edi - eax
	SCZO = cond(edi)
	bl = bl + 0xB5
	SCZO = cond(bl)
	ch = ~ch
	// succ:  l004024A4_thunk_fn00402C02
l004024A4_thunk_fn00402C02:
	call fn00402C02 (retsize: 0;)
	return
	// succ:  fn00402AF1_exit
l00402AF1:
	esp = fp
	Mem0[esp - 0x00000030:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = bl ^ dh
	SZO = cond(bl)
	C = false
	bh = bh - 0x01
	SZO = cond(bh)
	esi = esi | ecx
	SZO = cond(esi)
	C = false
	edi = eax
	bl = bl + 0x01
	SZO = cond(bl)
	edx = edx + ecx
	SCZO = cond(edx)
	goto l00402494
	// succ:  l00402494
fn00402AF1_exit:


// fn00402B0D
// Return size: 0
void fn00402B0D()
fn00402B0D_entry:
	// succ:  l00402B0D
l00402B0D:
	esp = fp
	ecx = ecx - edx
	SCZO = cond(ecx)
	ch = ch | bl
	SZO = cond(ch)
	C = false
	cl = cl - 0x01
	SZO = cond(cl)
	ecx = ecx ^ eax
	SZO = cond(ecx)
	C = false
	ecx = edx
	ch = ch - dl
	SCZO = cond(ch)
	cl = ~cl
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	ecx = ecx - ebx
	SCZO = cond(ecx)
	cl = cl ^ ah
	SZO = cond(cl)
	C = false
	call fn00402402 (retsize: 4;)
	esi = esi - Mem0[edi + 0xDDF6374C:word32]
	SCZO = cond(esi)
	goto l00402B26_thunk_fn00402B2C
	// succ:  l00402B26_thunk_fn00402B2C
l00402B0D:
l00402B26_thunk_fn00402B2C:
	call fn00402B2C (retsize: 0;)
	return
	// succ:  fn00402B0D_exit
fn00402B0D_exit:


// fn00402B2A
// Return size: 0
void fn00402B2A()
fn00402B2A_entry:
	goto l00402B2A
	// succ:  l00402B2A
l004027BE_thunk_fn0040263A:
	call fn0040263A (retsize: 0;)
	return
	// succ:  fn00402B2A_exit
l004027BE_thunk_fn004027C4:
	call fn004027C4 (retsize: 0;)
	return
	// succ:  fn00402B2A_exit l004027BE_thunk_fn004027C4
l004027BE_thunk_fn004027C4:
	call fn004027C4 (retsize: 0;)
	return
	// succ:  fn00402B2A_exit
l00402B2A:
	esp = fp
	ch = -ch
	SCZO = cond(ch)
	C = ch == 0x00
	goto l00402B2A_thunk_fn00402B2C
	// succ:  l00402B2A_thunk_fn00402B2C
l00402B2A:
l00402B2A_thunk_fn00402B2C:
	call fn00402B2C (retsize: 0;)
	return
	// succ:  fn00402B2A_exit
fn00402B2A_exit:


// fn00402B2C
// Return size: 0
void fn00402B2C()
fn00402B2C_entry:
	// succ:  l00402B2C
l00402B2C:
	esp = fp
	ecx = edx
	edi = edi - 0x00000001
	SZO = cond(edi)
	edi = edi - 0x00000001
	SZO = cond(edi)
	edi = edi - esi
	SCZO = cond(edi)
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	goto l00402B34_thunk_fn004027AE
	// succ:  l00402B34_thunk_fn004027AE
l00402B2C:
	ecx = edx
	edi = edi - 0x00000001
	SZO = cond(edi)
	edi = edi - 0x00000001
	SZO = cond(edi)
	edi = edi - esi
	SCZO = cond(edi)
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	// succ:  l00402B32_thunk_fn004027AE
l00402B32_thunk_fn004027AE:
	call fn004027AE (retsize: 0;)
	return
	// succ:  fn00402B2C_exit
l00402B34_thunk_fn004027AE:
	call fn004027AE (retsize: 0;)
	return
	// succ:  fn00402B2C_exit
fn00402B2C_exit:


// fn00402B40
// Return size: 0
void fn00402B40()
fn00402B40_entry:
	// succ:  l00402B40
l00402B40:
	esp = fp
	Mem0[esp:word32] = ebx
	// succ:  l00402B49
l00402B49:
	ah = ah
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax + 0x00000078
	esi = esi + 0x00000001
	SZO = cond(esi)
	bl = 0xDE
	call fn00402AD9 (retsize: 4;)
	// succ:  l00402B50_thunk_fn00402B51 l00402B55_thunk_fn00402B5A
l00402B50_thunk_fn00402B51:
	call fn00402B51 (retsize: 0;)
	return
	// succ:  fn00402B40_exit
l00402B55_thunk_fn00402B5A:
	call fn00402B5A (retsize: 0;)
	return
	// succ:  fn00402B40_exit
fn00402B40_exit:


// fn00402B51
// Return size: 0
void fn00402B51()
fn00402B51_entry:
	// succ:  l00402B51
l00402B51:
	esp = fp
	rArg0 = rArg0 + (real64) Mem0[eax + 0x7FE8D7DF:word16]
l00402B51:
	bh = bh - 0xD7 - C
	SCZO = cond(bh)
fn00402B51_exit:


// fn00402B5A
// Return size: 0
void fn00402B5A()
fn00402B5A_entry:
	// succ:  l00402B5A
l00402B5A:
	esp = fp
	v3 = Mem0[esi:byte]
	Mem0[edi:byte] = v3
	esi = esi + 0x00000001
	edi = edi + 0x00000001
	al = Mem0[0x89202045:byte]
	al = al + 0x24
	SCZO = cond(al)
	dx = dx
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	ah = al
	cl = cl + 0x21 + C
	SCZO = cond(cl)
	ah = ah + 0xC2
	SCZO = cond(ah)
	edx = edx - esi
	SCZO = cond(edx)
	call fn004024EF (retsize: 4;)
l00402B5A:
fn00402B5A_exit:


// fn00402B5F
// Return size: 0
void fn00402B5F()
fn00402B5F_entry:
	// succ:  l00402B5F
l00402B5F:
	esp = fp
	Mem0[esp:word32] = eax
	dx = dx
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	ah = al
	cl = cl + 0x21 + C
	SCZO = cond(cl)
	ah = ah + 0xC2
	SCZO = cond(ah)
	edx = edx - esi
	SCZO = cond(edx)
	call fn004024EF (retsize: 4;)
fn00402B5F_exit:


// fn00402B7C
// Return size: 6
void fn00402B7C()
fn00402B7C_entry:
	// succ:  l00402B7C
l00402B7C:
	esp = fp
	dl = dl | dh
	SZO = cond(dl)
	C = false
	ch = ch | dh
	SZO = cond(ch)
	C = false
	esi = esi ^ ecx
	SZO = cond(esi)
	C = false
	esi = edx
	cl = cl + 0x01
	SZO = cond(cl)
	bh = bh - dh
	SCZO = cond(bh)
	goto l00402B88_thunk_fn00402161
	// succ:  l00402B88_thunk_fn00402161
l00402B7C:
l00402B88_thunk_fn00402161:
	call fn00402161 (retsize: 6;)
	return
	// succ:  fn00402B7C_exit
fn00402B7C_exit:


// fn00402B94
// Return size: 4
void fn00402B94()
fn00402B94_entry:
	// succ:  l00402B94
l00402B94:
	esp = fp
	Mem0[esp - 0x00000018:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx - 0x00000001
	SZO = cond(edx)
	cl = cl - bh
	SCZO = cond(cl)
	return
	// succ:  fn00402B94_exit
fn00402B94_exit:


// fn00402BB8
// Return size: 0
void fn00402BB8()
fn00402BB8_entry:
	// succ:  l00402BB8
l00402BB8:
	esp = esp + 0x00000004
	edi = ebx
	cl = ~cl
	ch = ch ^ dl
	SZO = cond(ch)
	C = false
	ecx = esi
	cl = ~cl
	esi = esi + 0x00000001
	SZO = cond(esi)
	ch = ch + 0x01
	SZO = cond(ch)
	edi = edi + edx
	SCZO = cond(edi)
	ecx = ecx + esi
	SCZO = cond(ecx)
	branch Test(EQ,Z) l00402BCD_thunk_fn0040218D
	goto l00402BD3
	// succ:  l00402BD3 l00402BCD_thunk_fn0040218D
l00402BCD_thunk_fn0040218D:
	call fn0040218D (retsize: 0;)
	return
	// succ:  fn00402BB8_exit
l00402BD3:
fn00402BB8_exit:


// fn00402BE4
// Return size: 0
void fn00402BE4()
fn00402BE4_entry:
	goto l00402BE4
	// succ:  l00402BE4
l00402914:
	ebx = ebx - esi
	SCZO = cond(ebx)
	bh = al
	// succ:  l00402916_thunk_fn00402918
l00402916_thunk_fn00402918:
	call fn00402918 (retsize: 0;)
	return
	// succ:  fn00402BE4_exit
l00402BE4:
	esp = fp
	ch = ch + 0x01
	SZO = cond(ch)
	edi = edi + 0x00000001
	SZO = cond(edi)
	bl = bl - 0x7A - C
	SCZO = cond(bl)
	esi = esi + eax
	SCZO = cond(esi)
	bh = 0xEB
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ebx = ebx + edi
	SCZO = cond(ebx)
	eax = Mem0[edx:word32]
	dl = dl ^ bh
	SZO = cond(dl)
	C = false
	goto l00402914
	// succ:  l00402914
l00402BE4:
fn00402BE4_exit:


// fn00402C02
// Return size: 0
void fn00402C02()
fn00402C02_entry:
	// succ:  l00402C02
l00402C02:
	esp = fp
	cl = cl + al
	SCZO = cond(cl)
	bl = bl - 0x01
	SZO = cond(bl)
	bl = bl - 0x7E - C
	SCZO = cond(bl)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	edx = edx + 0x0000001C
	SCZO = cond(edx)
	ecx = ecx ^ edx
	SZO = cond(ecx)
	C = false
	cl = cl ^ bh
	SZO = cond(cl)
	C = false
	ebx = esi
	ecx = esi
	goto l00402C19_thunk_fn00402BE4
	// succ:  l00402C19_thunk_fn00402BE4
l00402C02:
l00402C19_thunk_fn00402BE4:
	call fn00402BE4 (retsize: 0;)
	return
	// succ:  fn00402C02_exit
fn00402C02_exit:


// fn00402C8C
// Return size: 0
void fn00402C8C()
fn00402C8C_entry:
	// succ:  l00402C8C
l00402C8C:
	esp = fp
	Mem0[esp:word32] = edi
	v4 = bl
	bl = bl
	bl = v4
	// succ:  l00402C8F_thunk_fn00402C90
l00402C8F_thunk_fn00402C90:
	call fn00402C90 (retsize: 0;)
	return
	// succ:  fn00402C8C_exit
fn00402C8C_exit:


// fn00402C90
// Return size: 0
void fn00402C90()
fn00402C90_entry:
	// succ:  l00402C90
l00402C90:
	esp = fp
	Mem0[edi - 0x00000080:int32] = (int32) rArg0
	Mem0[ecx + 0xF88BDFF6:word32] = 0x0ADBF65A
l00402C90:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh + 0xB1
	SCZO = cond(bh)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	edi = eax
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bl = bl | ch
	SZO = cond(bl)
	C = false
	edi = edi - ecx
	SCZO = cond(edi)
	call fn00402565 (retsize: 4;)
	ecx = ecx - ebp - C
	SCZO = cond(ecx)
	v16 = Mem0[ecx + ecx * 0x04:byte] - dh
	Mem0[ecx + ecx * 0x04:byte] = v16
	SCZO = cond(v16)
	// succ:  l00402CA7_thunk_fn00402CAA
l00402CA7_thunk_fn00402CAA:
	call fn00402CAA (retsize: 0;)
	return
	// succ:  fn00402C90_exit
fn00402C90_exit:


// fn00402CA9
// Return size: 0
void fn00402CA9()
fn00402CA9_entry:
	// succ:  l00402CA9
l00402CA9:
	esp = fp
	Mem0[esp:word32] = eax
	// succ:  l00402CA9_thunk_fn00402CAA
l00402CA9_thunk_fn00402CAA:
	call fn00402CAA (retsize: 0;)
	return
	// succ:  fn00402CA9_exit
fn00402CA9_exit:


// fn00402CAA
// Return size: 0
void fn00402CAA()
fn00402CAA_entry:
	// succ:  l00402CAA
l00402CAA:
	esp = fp
	al = al + 0x24
	SCZO = cond(al)
	v5 = dh
	dh = dh
	dh = v5
l00402CAA:
	v8 = dh
	dh = dh
	dh = v8
fn00402CAA_exit:


// fn00402CD1
// Return size: 0
void fn00402CD1()
fn00402CD1_entry:
	// succ:  l00402CD1
l00402CD1:
	esp = fp
	esp = esp + 0x00000004
	ah = ah - 0x0B - C
	SCZO = cond(ah)
	edi = edi + 0x00000001
	SZO = cond(edi)
	edi = edi + 0x00000001
	SZO = cond(edi)
	ch = ch ^ bh
	SZO = cond(ch)
	C = false
	bh = bh | ah
	SZO = cond(bh)
	C = false
	dh = 0x05
	eax = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000040
	bh = ~bh
	branch Test(EQ,Z) l00402CE6_thunk_fn0040257F
	goto l00402CEC
	// succ:  l00402CEC l00402CE6_thunk_fn0040257F
l00402CE6_thunk_fn0040257F:
	call fn0040257F (retsize: 0;)
	return
	// succ:  fn00402CD1_exit
l00402CEC:
	esp = esp - 0x00000002
	Mem0[esp:word16] = si
	si = Mem0[esp:word16]
	esp = esp + 0x00000002
fn00402CD1_exit:


// fn00402D13
// Return size: 0
void fn00402D13()
fn00402D13_entry:
	// succ:  l00402D13
l00402D13:
	ch = ch - bl
	SCZO = cond(ch)
	dl = dl ^ ah
	SZO = cond(dl)
	C = false
	edx = eax
	dl = dl - 0x01
	SZO = cond(dl)
	ah = ah - 0x01
	SZO = cond(ah)
	ch = 0x0A
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	branch Test(SG,S) l00402D21_thunk_fn00402843
	goto l00402D27
	// succ:  l00402D27 l00402D21_thunk_fn00402843
l00402D21_thunk_fn00402843:
	call fn00402843 (retsize: 0;)
	return
	// succ:  fn00402D13_exit
l00402D27:
fn00402D13_exit:


// fn00402D36
// Return size: 0
void fn00402D36()
fn00402D36_entry:
	// succ:  l00402D36
l00402D36:
	esp = fp
	cl = cl + 0x01
	SZO = cond(cl)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ch = ch + 0x8F
	SCZO = cond(ch)
	ch = ch + 0x01
	SZO = cond(ch)
	edi = edi - 0x00000001
	SZO = cond(edi)
	cl = cl + 0x95
	SCZO = cond(cl)
	goto l00402D42_thunk_fn00402B2A
	// succ:  l00402D42_thunk_fn00402B2A
l00402D36:
l00402D42_thunk_fn00402B2A:
	call fn00402B2A (retsize: 0;)
	return
	// succ:  fn00402D36_exit
fn00402D36_exit:


// fn00402DB6
// Return size: 0
void fn00402DB6()
fn00402DB6_entry:
	// succ:  l00402DB6
l00402DB6:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = ebx
	ebx = v3
	// succ:  l00402DBE
l00402DBE:
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ch = ch - bl
	SCZO = cond(ch)
	al = al + dh
	SCZO = cond(al)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	cl = cl + 0x43 + C
	SCZO = cond(cl)
	ah = ah - 0xA4 - C
	SCZO = cond(ah)
fn00402DB6_exit:


// fn00402DD6
// Return size: 0
void fn00402DD6()
fn00402DD6_entry:
	// succ:  l00402DD6
l00402DD6:
	esp = fp
	ch = ch | cl
	SZO = cond(ch)
	C = false
	edi = edi + 0x00000001
	SZO = cond(edi)
	cl = cl + 0x01
	SZO = cond(cl)
	cl = ~cl
	ch = ch - 0x9B - C
	SCZO = cond(ch)
	cl = cl - 0x57 - C
	SCZO = cond(cl)
	ch = ch ^ ah
	SZO = cond(ch)
	C = false
	goto l00402DE5_thunk_fn00402618
	// succ:  l00402DE5_thunk_fn00402618
l00402DD6:
l00402DE5_thunk_fn00402618:
	call fn00402618 (retsize: 0;)
	return
	// succ:  fn00402DD6_exit
fn00402DD6_exit:


// fn00402DF0
// Return size: 4
void fn00402DF0()
fn00402DF0_entry:
	goto l00402DF0
	// succ:  l00402DF0
l00402975_thunk_fn0040253A:
	call fn0040253A (retsize: 0;)
	return
	// succ:  fn00402DF0_exit
l00402DF0:
	esp = fp
	v3 = eax
	eax = esi
	esi = v3
	goto l00402DF0_thunk_fn00402DF1
	// succ:  l00402DF0_thunk_fn00402DF1
l00402DF0:
l00402DF0_thunk_fn00402DF1:
	call fn00402DF1 (retsize: 0;)
	return
	// succ:  fn00402DF0_exit
fn00402DF0_exit:


// fn00402DF1
// Return size: 0
void fn00402DF1()
fn00402DF1_entry:
	// succ:  l00402DF1
l00402DF1:
	esp = fp
	ebx = ebx + ecx
	SCZO = cond(ebx)
	al = al - ah
	SCZO = cond(al)
	al = al + ch
	SCZO = cond(al)
	bh = bh + 0x01
	SZO = cond(bh)
	cl = cl + 0xDC
	SCZO = cond(cl)
	ah = ah | dh
	SZO = cond(ah)
	C = false
	edx = edx ^ ecx
	SZO = cond(edx)
	C = false
	edx = edx - 0x00000001
	SZO = cond(edx)
	ah = -ah
	SCZO = cond(ah)
	C = ah == 0x00
	call fn00402B94 (retsize: 4;)
	branch Test(PE,P) l00402E09_thunk_fn00402E1C
	goto l00402E0B_in_fn00402DF1
	// succ:  l00402E0B_in_fn00402DF1 l00402E09_thunk_fn00402E1C
l00402DF1:
	ebx = ebx + ecx
	SCZO = cond(ebx)
	al = al - ah
	SCZO = cond(al)
	al = al + ch
	SCZO = cond(al)
	bh = bh + 0x01
	SZO = cond(bh)
	cl = cl + 0xDC
	SCZO = cond(cl)
	ah = ah | dh
	SZO = cond(ah)
	C = false
	edx = edx ^ ecx
	SZO = cond(edx)
	C = false
	edx = edx - 0x00000001
	SZO = cond(edx)
	ah = -ah
	SCZO = cond(ah)
	C = ah == 0x00
	call fn00402B94 (retsize: 4;)
	branch Test(PE,P) l00402E1C
	goto l00402E0B
	// succ:  l00402E0B l00402E09_thunk_fn00402E1C
l00402E09_thunk_fn00402E1C:
	call fn00402E1C (retsize: 0;)
	return
	// succ:  fn00402DF1_exit
l00402E09_thunk_fn00402E1C:
	call fn00402E1C (retsize: 0;)
	return
	// succ:  fn00402DF1_exit
l00402E0B:
	return
	// succ:  fn00402DF1_exit
l00402E0B_in_fn00402DF1:
	return
	// succ:  fn00402DF1_exit l00402E0B_in_fn00402DF1
l00402E0B_in_fn00402DF1:
	return
	// succ:  fn00402DF1_exit
fn00402DF1_exit:


// fn00402E10
// Return size: 0
void fn00402E10()
fn00402E10_entry:
	// succ:  l00402E10
l00402E10:
	esp = fp
	esp = esp + 0x00000004
	esi = esi + ebx
	SCZO = cond(esi)
	dl = dl | dh
	SZO = cond(dl)
	C = false
	bl = bl | bh
	SZO = cond(bl)
	C = false
	ah = ah + bl
	SCZO = cond(ah)
	// succ:  l00402E1A_thunk_fn00402E1C
l00402E1A_thunk_fn00402E1C:
	call fn00402E1C (retsize: 0;)
	return
	// succ:  fn00402E10_exit
fn00402E10_exit:


// fn00402E1C
// Return size: 0
void fn00402E1C()
fn00402E1C_entry:
	goto l00402E1C
	// succ:  l00402E1C
l00402966:
	dl = dl ^ cl
	SZO = cond(dl)
	C = false
	dh = dh - 0x0C - C
	SCZO = cond(dh)
	// succ:  l00402968_thunk_fn00402969
l00402968_thunk_fn00402969:
	call fn00402969 (retsize: 0;)
	return
	// succ:  fn00402E1C_exit
l00402E1C:
	bh = bh + 0x73 + C
	SCZO = cond(bh)
	edx = edx - ecx
	SCZO = cond(edx)
	bl = bl - 0x42 - C
	SCZO = cond(bl)
	goto l00402966
	// succ:  l00402966
fn00402E1C_exit:


// fn00402E47
// Return size: 4
void fn00402E47()
fn00402E47_entry:
	// succ:  l00402E47
l00402E47:
	esp = fp
	Mem0[esp - 0x00000020:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = bl - 0x7C - C
	SCZO = cond(bl)
	bl = bl - ch
	SCZO = cond(bl)
	eax = eax ^ edx
	SZO = cond(eax)
	C = false
	dl = dl + 0x01
	SZO = cond(dl)
	call fn00402E59 (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	// succ:  l00402E54_thunk_fn00402E59
l00402E54_thunk_fn00402E59:
	call fn00402E59 (retsize: 4;)
	return
	// succ:  fn00402E47_exit
fn00402E47_exit:


// fn00402E59
// Return size: 4
void fn00402E59()
fn00402E59_entry:
	// succ:  l00402E59
l00402E59:
	esp = fp
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	call fn00402AC2 (retsize: 4;)
	SZO = cond(al & 0x05)
	C = false
	branch Test(NE,Z) l00402E61_thunk_fn00402DF0
	goto l00402E61_thunk_fn00402E63
	// succ:  l00402E61_thunk_fn00402E63 l00402E61_thunk_fn00402DF0
l00402E61_thunk_fn00402DF0:
	call fn00402DF0 (retsize: 4;)
	return
	// succ:  fn00402E59_exit
l00402E61_thunk_fn00402E63:
	call fn00402E63 (retsize: 6;)
	return
	// succ:  fn00402E59_exit l00402E61_thunk_fn00402E63
l00402E61_thunk_fn00402E63:
	call fn00402E63 (retsize: 6;)
	return
	// succ:  fn00402E59_exit
fn00402E59_exit:


// fn00402E63
// Return size: 6
void fn00402E63()
fn00402E63_entry:
	// succ:  l00402E63
l00402E63:
	esp = fp
	Mem0[esp:word32] = esi
	// succ:  l00402E6B
l00402E6B:
	branch Test(ULE,CZ) l00402E6D
	// succ:  l00402E6D
l00402E6D:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = eax
	dh = ah
	ch = -ch
	SCZO = cond(ch)
	C = ch == 0x00
	// succ:  l00402E74_thunk_fn00402B7C
l00402E74_thunk_fn00402B7C:
	call fn00402B7C (retsize: 6;)
	return
	// succ:  fn00402E63_exit
fn00402E63_exit:


// fn00402E81
// Return size: 0
void fn00402E81()
fn00402E81_entry:
	// succ:  l00402E81
l00402E81:
	esp = fp
	bl = bl + al
	SCZO = cond(bl)
	bh = bh - ah
	SCZO = cond(bh)
	bl = bl - 0xF0 - C
	SCZO = cond(bl)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bl = 0xE0
	bh = bh + 0x01
	SZO = cond(bh)
	ebx = (word32) ah
	esi = ecx
	edi = edi + edx
	SCZO = cond(edi)
	call fn00402A7A (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	esp = esp - 0xFFFFDA47
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	v17 = Mem0[ebx + 0x00000003:byte] | dl
	Mem0[ebx + 0x00000003:byte] = v17
	SZO = cond(Mem0[ebx + 0x00000003:byte])
	C = false
	goto l00402E9F_thunk_fn00402EA2
	// succ:  l00402E9F_thunk_fn00402EA2
l00402E81:
l00402E9F_thunk_fn00402EA2:
	call fn00402EA2 (retsize: 0;)
	return
	// succ:  fn00402E81_exit
fn00402E81_exit:


// fn00402EA1
// Return size: 0
void fn00402EA1()
fn00402EA1_entry:
	// succ:  l00402EA1
l00402EA1:
	esp = fp
	edx = edx + eax
	SCZO = cond(edx)
	goto l00402EA1_thunk_fn00402EA2
	// succ:  l00402EA1_thunk_fn00402EA2
l00402EA1:
l00402EA1_thunk_fn00402EA2:
	call fn00402EA2 (retsize: 0;)
	return
	// succ:  fn00402EA1_exit
fn00402EA1_exit:


// fn00402EA2
// Return size: 0
void fn00402EA2()
fn00402EA2_entry:
	// succ:  l00402EA2
l00402EA2:
	esp = fp
	v4 = Mem0[ebx:byte] << 0x01
	Mem0[ebx:byte] = v4
	SCZO = cond(v4)
	edx = edx - eax
	SCZO = cond(edx)
	dl = 0xBC
	edx = edx + 0x00000001
	SZO = cond(edx)
	ch = ~ch
	edx = edx | eax
	SZO = cond(edx)
	C = false
	ch = ch - 0x01
	SZO = cond(ch)
	dl = dl + 0x01
	SZO = cond(dl)
	call fn004026AE (retsize: 4;)
	v12 = eax
	eax = edx
	edx = v12
	ebp = 0xC1F4B8A5
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	al = __inb(dx)
	v16 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v16
	SCZO = cond(v16)
	v17 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v17
	SCZO = cond(v17)
	v18 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v18
	SCZO = cond(v18)
	v19 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v19
	SCZO = cond(v19)
	v20 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v20
	SCZO = cond(v20)
	v21 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v21
	SCZO = cond(v21)
	v22 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v22
	SCZO = cond(v22)
	v23 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v23
	SCZO = cond(v23)
	v24 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v24
	SCZO = cond(v24)
	v25 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v25
	SCZO = cond(v25)
	v26 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v26
	SCZO = cond(v26)
	v27 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v27
	SCZO = cond(v27)
	v28 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v28
	SCZO = cond(v28)
	v29 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v29
	SCZO = cond(v29)
	v30 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v30
	SCZO = cond(v30)
	v31 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v31
	SCZO = cond(v31)
	v32 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v32
	SCZO = cond(v32)
	v33 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v33
	SCZO = cond(v33)
	v34 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v34
	SCZO = cond(v34)
	v35 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v35
	SCZO = cond(v35)
	v36 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v36
	SCZO = cond(v36)
	v37 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v37
	SCZO = cond(v37)
	v38 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v38
	SCZO = cond(v38)
	v39 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v39
	SCZO = cond(v39)
	v40 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v40
	SCZO = cond(v40)
	v41 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v41
	SCZO = cond(v41)
	v42 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v42
	SCZO = cond(v42)
	v43 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v43
	SCZO = cond(v43)
	v44 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v44
	SCZO = cond(v44)
	v45 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v45
	SCZO = cond(v45)
	v46 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v46
	SCZO = cond(v46)
	v47 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v47
	SCZO = cond(v47)
	v48 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v48
	SCZO = cond(v48)
	v49 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v49
	SCZO = cond(v49)
	v50 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v50
	SCZO = cond(v50)
	v51 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v51
	SCZO = cond(v51)
	v52 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v52
	SCZO = cond(v52)
	v53 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v53
	SCZO = cond(v53)
	v54 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v54
	SCZO = cond(v54)
	v55 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v55
	SCZO = cond(v55)
	v56 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v56
	SCZO = cond(v56)
	v57 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v57
	SCZO = cond(v57)
	v58 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v58
	SCZO = cond(v58)
	v59 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v59
	SCZO = cond(v59)
	v60 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v60
	SCZO = cond(v60)
	v61 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v61
	SCZO = cond(v61)
	v62 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v62
	SCZO = cond(v62)
	v63 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v63
	SCZO = cond(v63)
	v64 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v64
	SCZO = cond(v64)
	v65 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v65
	SCZO = cond(v65)
	v66 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v66
	SCZO = cond(v66)
	v67 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v67
	SCZO = cond(v67)
	v68 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v68
	SCZO = cond(v68)
	v69 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v69
	SCZO = cond(v69)
	v70 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v70
	SCZO = cond(v70)
	v71 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v71
	SCZO = cond(v71)
	v72 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v72
	SCZO = cond(v72)
	v73 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v73
	SCZO = cond(v73)
	v74 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v74
	SCZO = cond(v74)
	v75 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v75
	SCZO = cond(v75)
	v76 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v76
	SCZO = cond(v76)
	v77 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v77
	SCZO = cond(v77)
	v78 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v78
	SCZO = cond(v78)
	v79 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v79
	SCZO = cond(v79)
	v80 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v80
	SCZO = cond(v80)
	v81 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v81
	SCZO = cond(v81)
	v82 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v82
	SCZO = cond(v82)
	v83 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v83
	SCZO = cond(v83)
	v84 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v84
	SCZO = cond(v84)
	v85 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v85
	SCZO = cond(v85)
	v86 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v86
	SCZO = cond(v86)
	v87 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v87
	SCZO = cond(v87)
	v88 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v88
	SCZO = cond(v88)
	v89 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v89
	SCZO = cond(v89)
	v90 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v90
	SCZO = cond(v90)
	v91 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v91
	SCZO = cond(v91)
	v92 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v92
	SCZO = cond(v92)
	v93 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v93
	SCZO = cond(v93)
	v94 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v94
	SCZO = cond(v94)
	v95 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v95
	SCZO = cond(v95)
	v96 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v96
	SCZO = cond(v96)
	v97 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v97
	SCZO = cond(v97)
	v98 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v98
	SCZO = cond(v98)
	v99 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v99
	SCZO = cond(v99)
	v100 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v100
	SCZO = cond(v100)
	v101 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v101
	SCZO = cond(v101)
	v102 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v102
	SCZO = cond(v102)
	v103 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v103
	SCZO = cond(v103)
	v104 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v104
	SCZO = cond(v104)
	v105 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v105
	SCZO = cond(v105)
	v106 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v106
	SCZO = cond(v106)
	v107 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v107
	SCZO = cond(v107)
	v108 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v108
	SCZO = cond(v108)
	v109 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v109
	SCZO = cond(v109)
	v110 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v110
	SCZO = cond(v110)
	v111 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v111
	SCZO = cond(v111)
	v112 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v112
	SCZO = cond(v112)
	v113 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v113
	SCZO = cond(v113)
	v114 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v114
	SCZO = cond(v114)
	v115 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v115
	SCZO = cond(v115)
	v116 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v116
	SCZO = cond(v116)
	v117 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v117
	SCZO = cond(v117)
	v118 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v118
	SCZO = cond(v118)
	v119 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v119
	SCZO = cond(v119)
	v120 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v120
	SCZO = cond(v120)
	v121 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v121
	SCZO = cond(v121)
	v122 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v122
	SCZO = cond(v122)
	v123 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v123
	SCZO = cond(v123)
	v124 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v124
	SCZO = cond(v124)
	v125 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v125
	SCZO = cond(v125)
	v126 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v126
	SCZO = cond(v126)
	v127 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v127
	SCZO = cond(v127)
	v128 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v128
	SCZO = cond(v128)
	v129 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v129
	SCZO = cond(v129)
	v130 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v130
	SCZO = cond(v130)
	v131 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v131
	SCZO = cond(v131)
	v132 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v132
	SCZO = cond(v132)
	v133 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v133
	SCZO = cond(v133)
	v134 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v134
	SCZO = cond(v134)
	v135 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v135
	SCZO = cond(v135)
	v136 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v136
	SCZO = cond(v136)
	v137 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v137
	SCZO = cond(v137)
	v138 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v138
	SCZO = cond(v138)
	v139 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v139
	SCZO = cond(v139)
	v140 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v140
	SCZO = cond(v140)
	v141 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v141
	SCZO = cond(v141)
	v142 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v142
	SCZO = cond(v142)
	v143 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v143
	SCZO = cond(v143)
	v144 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v144
	SCZO = cond(v144)
	v145 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v145
	SCZO = cond(v145)
	v146 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v146
	SCZO = cond(v146)
	v147 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v147
	SCZO = cond(v147)
	v148 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v148
	SCZO = cond(v148)
	v149 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v149
	SCZO = cond(v149)
	v150 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v150
	SCZO = cond(v150)
	v151 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v151
	SCZO = cond(v151)
	v152 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v152
	SCZO = cond(v152)
	v153 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v153
	SCZO = cond(v153)
	v154 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v154
	SCZO = cond(v154)
	v155 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v155
	SCZO = cond(v155)
	v156 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v156
	SCZO = cond(v156)
	v157 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v157
	SCZO = cond(v157)
	v158 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v158
	SCZO = cond(v158)
	v159 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v159
	SCZO = cond(v159)
	v160 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v160
	SCZO = cond(v160)
	v161 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v161
	SCZO = cond(v161)
	v162 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v162
	SCZO = cond(v162)
	v163 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v163
	SCZO = cond(v163)
	v164 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v164
	SCZO = cond(v164)
	v165 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v165
	SCZO = cond(v165)
	v166 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v166
	SCZO = cond(v166)
	v167 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v167
	SCZO = cond(v167)
	v168 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v168
	SCZO = cond(v168)
	v169 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v169
	SCZO = cond(v169)
	v170 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v170
	SCZO = cond(v170)
	v171 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v171
	SCZO = cond(v171)
	v172 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v172
	SCZO = cond(v172)
	v173 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v173
	SCZO = cond(v173)
	v174 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v174
	SCZO = cond(v174)
	v175 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v175
	SCZO = cond(v175)
	ch = ch + dl
	SCZO = cond(ch)
	bl = bl + dh
	SCZO = cond(bl)
	v179 = Mem0[ebx - 0x0000002D + esi * 0x04:byte] ^ dh
	Mem0[ebx - 0x0000002D + esi * 0x04:byte] = v179
	SZO = cond(Mem0[ebx - 0x0000002D + esi * 0x04:byte])
	C = false
	v182 = Mem0[edi - 0x00000057 + ebp * 0x08:byte] + bh
	Mem0[edi - 0x00000057 + ebp * 0x08:byte] = v182
	SCZO = cond(v182)
	__cli()
	v183 = Mem0[edi + 0x00000002:byte] << 0xE4
	Mem0[edi + 0x00000002:byte] = v183
	SCZO = cond(v183)
	SZO = cond(Mem0[esi + 0x00000049:byte] & 0xD8)
	C = false
	v185 = Mem0[ecx:word32] + eax
	Mem0[ecx:word32] = v185
	SCZO = cond(v185)
	eax = eax + 0x00000001
	SZO = cond(eax)
l00402EA2:
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	edx = edx - eax
	SCZO = cond(edx)
	dl = 0xBC
	edx = edx + 0x00000001
	SZO = cond(edx)
	ch = ~ch
	edx = edx | eax
	SZO = cond(edx)
	C = false
	ch = ch - 0x01
	SZO = cond(ch)
	dl = dl + 0x01
	SZO = cond(dl)
	call fn004026AE (retsize: 4;)
	v186 = eax
	eax = edx
	edx = v186
	ebp = 0xC1F4B8A5
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	al = __inb(dx)
	v187 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v187
	SCZO = cond(v187)
	v188 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v188
	SCZO = cond(v188)
	v189 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v189
	SCZO = cond(v189)
	v190 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v190
	SCZO = cond(v190)
	v191 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v191
	SCZO = cond(v191)
	v192 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v192
	SCZO = cond(v192)
	v193 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v193
	SCZO = cond(v193)
	v194 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v194
	SCZO = cond(v194)
	v195 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v195
	SCZO = cond(v195)
	v196 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v196
	SCZO = cond(v196)
	v197 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v197
	SCZO = cond(v197)
	v198 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v198
	SCZO = cond(v198)
	v199 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v199
	SCZO = cond(v199)
	v200 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v200
	SCZO = cond(v200)
	v201 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v201
	SCZO = cond(v201)
	v202 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v202
	SCZO = cond(v202)
	v203 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v203
	SCZO = cond(v203)
	v204 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v204
	SCZO = cond(v204)
	v205 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v205
	SCZO = cond(v205)
	v206 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v206
	SCZO = cond(v206)
	v207 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v207
	SCZO = cond(v207)
	v208 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v208
	SCZO = cond(v208)
	v209 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v209
	SCZO = cond(v209)
	v210 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v210
	SCZO = cond(v210)
	v211 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v211
	SCZO = cond(v211)
	v212 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v212
	SCZO = cond(v212)
	v213 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v213
	SCZO = cond(v213)
	v214 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v214
	SCZO = cond(v214)
	v215 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v215
	SCZO = cond(v215)
	v216 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v216
	SCZO = cond(v216)
	v217 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v217
	SCZO = cond(v217)
	v218 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v218
	SCZO = cond(v218)
	v219 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v219
	SCZO = cond(v219)
	v220 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v220
	SCZO = cond(v220)
	v221 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v221
	SCZO = cond(v221)
	v222 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v222
	SCZO = cond(v222)
	v223 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v223
	SCZO = cond(v223)
	v224 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v224
	SCZO = cond(v224)
	v225 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v225
	SCZO = cond(v225)
	v226 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v226
	SCZO = cond(v226)
	v227 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v227
	SCZO = cond(v227)
	v228 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v228
	SCZO = cond(v228)
	v229 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v229
	SCZO = cond(v229)
	v230 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v230
	SCZO = cond(v230)
	v231 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v231
	SCZO = cond(v231)
	v232 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v232
	SCZO = cond(v232)
	v233 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v233
	SCZO = cond(v233)
	v234 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v234
	SCZO = cond(v234)
	v235 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v235
	SCZO = cond(v235)
	v236 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v236
	SCZO = cond(v236)
	v237 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v237
	SCZO = cond(v237)
	v238 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v238
	SCZO = cond(v238)
	v239 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v239
	SCZO = cond(v239)
	v240 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v240
	SCZO = cond(v240)
	v241 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v241
	SCZO = cond(v241)
	v242 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v242
	SCZO = cond(v242)
	v243 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v243
	SCZO = cond(v243)
	v244 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v244
	SCZO = cond(v244)
	v245 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v245
	SCZO = cond(v245)
	v246 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v246
	SCZO = cond(v246)
	v247 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v247
	SCZO = cond(v247)
	v248 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v248
	SCZO = cond(v248)
	v249 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v249
	SCZO = cond(v249)
	v250 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v250
	SCZO = cond(v250)
	v251 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v251
	SCZO = cond(v251)
	v252 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v252
	SCZO = cond(v252)
	v253 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v253
	SCZO = cond(v253)
	v254 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v254
	SCZO = cond(v254)
	v255 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v255
	SCZO = cond(v255)
	v256 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v256
	SCZO = cond(v256)
	v257 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v257
	SCZO = cond(v257)
	v258 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v258
	SCZO = cond(v258)
	v259 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v259
	SCZO = cond(v259)
	v260 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v260
	SCZO = cond(v260)
	v261 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v261
	SCZO = cond(v261)
	v262 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v262
	SCZO = cond(v262)
	v263 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v263
	SCZO = cond(v263)
	v264 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v264
	SCZO = cond(v264)
	v265 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v265
	SCZO = cond(v265)
	v266 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v266
	SCZO = cond(v266)
	v267 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v267
	SCZO = cond(v267)
	v268 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v268
	SCZO = cond(v268)
	v269 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v269
	SCZO = cond(v269)
	v270 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v270
	SCZO = cond(v270)
	v271 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v271
	SCZO = cond(v271)
	v272 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v272
	SCZO = cond(v272)
	v273 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v273
	SCZO = cond(v273)
	v274 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v274
	SCZO = cond(v274)
	v275 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v275
	SCZO = cond(v275)
	v276 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v276
	SCZO = cond(v276)
	v277 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v277
	SCZO = cond(v277)
	v278 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v278
	SCZO = cond(v278)
	v279 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v279
	SCZO = cond(v279)
	v280 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v280
	SCZO = cond(v280)
	v281 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v281
	SCZO = cond(v281)
	v282 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v282
	SCZO = cond(v282)
	v283 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v283
	SCZO = cond(v283)
	v284 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v284
	SCZO = cond(v284)
	v285 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v285
	SCZO = cond(v285)
	v286 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v286
	SCZO = cond(v286)
	v287 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v287
	SCZO = cond(v287)
	v288 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v288
	SCZO = cond(v288)
	v289 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v289
	SCZO = cond(v289)
	v290 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v290
	SCZO = cond(v290)
	v291 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v291
	SCZO = cond(v291)
	v292 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v292
	SCZO = cond(v292)
	v293 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v293
	SCZO = cond(v293)
	v294 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v294
	SCZO = cond(v294)
	v295 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v295
	SCZO = cond(v295)
	v296 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v296
	SCZO = cond(v296)
	v297 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v297
	SCZO = cond(v297)
	v298 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v298
	SCZO = cond(v298)
	v299 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v299
	SCZO = cond(v299)
	v300 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v300
	SCZO = cond(v300)
	v301 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v301
	SCZO = cond(v301)
	v302 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v302
	SCZO = cond(v302)
	v303 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v303
	SCZO = cond(v303)
	v304 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v304
	SCZO = cond(v304)
	v305 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v305
	SCZO = cond(v305)
	v306 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v306
	SCZO = cond(v306)
	v307 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v307
	SCZO = cond(v307)
	v308 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v308
	SCZO = cond(v308)
	v309 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v309
	SCZO = cond(v309)
	v310 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v310
	SCZO = cond(v310)
	v311 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v311
	SCZO = cond(v311)
	v312 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v312
	SCZO = cond(v312)
	v313 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v313
	SCZO = cond(v313)
	v314 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v314
	SCZO = cond(v314)
	v315 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v315
	SCZO = cond(v315)
	v316 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v316
	SCZO = cond(v316)
	v317 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v317
	SCZO = cond(v317)
	v318 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v318
	SCZO = cond(v318)
	v319 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v319
	SCZO = cond(v319)
	v320 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v320
	SCZO = cond(v320)
	v321 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v321
	SCZO = cond(v321)
	v322 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v322
	SCZO = cond(v322)
	v323 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v323
	SCZO = cond(v323)
	v324 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v324
	SCZO = cond(v324)
	v325 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v325
	SCZO = cond(v325)
	v326 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v326
	SCZO = cond(v326)
	v327 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v327
	SCZO = cond(v327)
	v328 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v328
	SCZO = cond(v328)
	v329 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v329
	SCZO = cond(v329)
	v330 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v330
	SCZO = cond(v330)
	v331 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v331
	SCZO = cond(v331)
	v332 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v332
	SCZO = cond(v332)
	v333 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v333
	SCZO = cond(v333)
	v334 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v334
	SCZO = cond(v334)
	v335 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v335
	SCZO = cond(v335)
	v336 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v336
	SCZO = cond(v336)
	v337 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v337
	SCZO = cond(v337)
	v338 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v338
	SCZO = cond(v338)
	v339 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v339
	SCZO = cond(v339)
	v340 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v340
	SCZO = cond(v340)
	v341 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v341
	SCZO = cond(v341)
	v342 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v342
	SCZO = cond(v342)
	v343 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v343
	SCZO = cond(v343)
	v344 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v344
	SCZO = cond(v344)
	v345 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v345
	SCZO = cond(v345)
	v346 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v346
	SCZO = cond(v346)
	ch = ch + dl
	SCZO = cond(ch)
	bl = bl + dh
	SCZO = cond(bl)
	v347 = Mem0[ebx - 0x0000002D + esi * 0x04:byte] ^ dh
	Mem0[ebx - 0x0000002D + esi * 0x04:byte] = v347
	SZO = cond(Mem0[ebx - 0x0000002D + esi * 0x04:byte])
	C = false
	v348 = Mem0[edi - 0x00000057 + ebp * 0x08:byte] + bh
	Mem0[edi - 0x00000057 + ebp * 0x08:byte] = v348
	SCZO = cond(v348)
	__cli()
	v349 = Mem0[edi + 0x00000002:byte] << 0xE4
	Mem0[edi + 0x00000002:byte] = v349
	SCZO = cond(v349)
	SZO = cond(Mem0[esi + 0x00000049:byte] & 0xD8)
	C = false
	v350 = Mem0[ecx:word32] + eax
	Mem0[ecx:word32] = v350
	SCZO = cond(v350)
	eax = eax + 0x00000001
	SZO = cond(eax)
fn00402EA2_exit:


