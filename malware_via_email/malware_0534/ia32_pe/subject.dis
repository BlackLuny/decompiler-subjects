// fn0040102A
// Return size: 0
void fn0040102A()
fn0040102A_entry:
	// succ:  l0040102A
l0040102A:
	esp = fp
	esp = esp + 0x00000004
	bl = bl + 0x80
	SCZO = cond(bl)
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	dh = dh | ah
	SZO = cond(dh)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edi = edi | eax
	SZO = cond(edi)
	C = false
	ecx = ecx - edi
	SCZO = cond(ecx)
	edi = edi - edx
	SCZO = cond(edi)
	call fn00401301 (retsize: 4;)
	ah = FPUF
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
fn0040102A_exit:


// fn00401046
// Return size: 0
void fn00401046()
fn00401046_entry:
	// succ:  l00401046
l00401046:
	esp = fp
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ecx = edi
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	edi = edi + edx
	SCZO = cond(edi)
	ecx = esi
	edi = edi | esi
	SZO = cond(edi)
	C = false
	esi = esi | edi
	SZO = cond(esi)
	C = false
	ecx = ecx ^ eax
	SZO = cond(ecx)
	C = false
	goto l00401055_thunk_fn00401177
	// succ:  l00401055_thunk_fn00401177
l00401046:
l00401055_thunk_fn00401177:
	call fn00401177 (retsize: 0;)
	return
	// succ:  fn00401046_exit
fn00401046_exit:


// fn00401060
// Return size: 0
void fn00401060()
fn00401060_entry:
	// succ:  l00401060
l00401060:
	esp = fp
	Mem0[esp:word32] = ebx
	ax = eax
	v6 = ebx
	ebx = ebx
	ebx = v6
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi ^ edi
	SZO = cond(esi)
	C = false
	eax = Mem0[eax + 0x00000008:word32]
	edx = edx ^ ecx
	SZO = cond(edx)
	C = false
	ebx = ecx
	ecx = ecx ^ esi
	SZO = cond(ecx)
	C = false
	edi = edi + 0x00000001
	SZO = cond(edi)
	edx = edx + 0x00000001
	SZO = cond(edx)
	// succ:  l00401076_thunk_fn00401046
l00401076_thunk_fn00401046:
	call fn00401046 (retsize: 0;)
	return
	// succ:  fn00401060_exit
fn00401060_exit:


// fn0040107F
// Return size: 0
void fn0040107F()
fn0040107F_entry:
	// succ:  l0040107F
l0040107F:
	esp = fp
	esp = esp + 0x00000004
	edx = edx | ebx
	SZO = cond(edx)
	C = false
	edi = edi + 0x00000001
	SZO = cond(edi)
	edx = edx - 0x00000001
	SZO = cond(edx)
	ecx = ecx + edx
	SCZO = cond(ecx)
	eax = eax | eax
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0040108B_thunk_fn0040115F
	goto l00401091
	// succ:  l00401091 l0040108B_thunk_fn0040115F
l0040108B_thunk_fn0040115F:
	call fn0040115F (retsize: 0;)
	return
	// succ:  fn0040107F_exit
l00401091:
	return
	// succ:  fn0040107F_exit
fn0040107F_exit:


// fn0040109F
// Return size: 0
void fn0040109F()
fn0040109F_entry:
	// succ:  l0040109F
l0040109F:
	esp = fp
	Mem0[esp - 0x00000014:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx ^ edi
	SZO = cond(edx)
	C = false
	edx = edx + 0x00000001
	SZO = cond(edx)
	eax = eax - 0xEEEEEEEE
	SCZO = cond(eax)
	ebx = ebx + eax
	SCZO = cond(ebx)
	ecx = ecx + edi
	SCZO = cond(ecx)
	ecx = ecx ^ edx
	SZO = cond(ecx)
	C = false
	ebx = ebx + ecx
	SCZO = cond(ebx)
	call fn00401142 (retsize: 4;)
	eax = eax | 0x70EE0BF3
	SZO = cond(eax)
	C = false
	// succ:  l004010B8_thunk_fn004010BD
l004010B8_thunk_fn004010BD:
	call fn004010BD (retsize: 0;)
	return
	// succ:  fn0040109F_exit
fn0040109F_exit:


// fn004010BD
// Return size: 0
void fn004010BD()
fn004010BD_entry:
	// succ:  l004010BD
l004010BD:
	esp = fp
	ebx = ebx + eax
	SCZO = cond(ebx)
	edx = edx ^ esi
	SZO = cond(edx)
	C = false
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	ecx = ecx - eax
	SCZO = cond(ecx)
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
	edx = edx - edi
	SCZO = cond(edx)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	goto l004010CB_thunk_fn00401277
	// succ:  l004010CB_thunk_fn00401277
l004010BD:
l004010CB_thunk_fn00401277:
	call fn00401277 (retsize: 0;)
	return
	// succ:  fn004010BD_exit
fn004010BD_exit:


// fn0040111E
// Return size: 0
void fn0040111E()
fn0040111E_entry:
	// succ:  l0040111E
l0040111E:
	esp = fp
	ebx = ebx | edx
	SZO = cond(ebx)
	C = false
	ecx = ecx + eax
	SCZO = cond(ecx)
	esi = esi + ebx
	SCZO = cond(esi)
	edi = edi - 0x00000001
	SZO = cond(edi)
	edi = edi | ecx
	SZO = cond(edi)
	C = false
	edx = esi
	branch Test(OV,O) l00401129_thunk_fn00401246
	// succ:  l00401129_thunk_fn0040112F l00401129_thunk_fn00401246 l00401129_thunk_fn0040112F l00401129_thunk_fn00401246
l0040111E:
	ecx = ecx + eax
	SCZO = cond(ecx)
	esi = esi + ebx
	SCZO = cond(esi)
	edi = edi - 0x00000001
	SZO = cond(edi)
	edi = edi | ecx
	SZO = cond(edi)
	C = false
	edx = esi
	branch Test(OV,O) l00401129_thunk_fn00401246
l00401129_thunk_fn0040112F:
	call fn0040112F (retsize: 0;)
	return
	// succ:  fn0040111E_exit
l00401129_thunk_fn00401246:
	call fn00401246 (retsize: 0;)
	return
	// succ:  fn0040111E_exit
fn0040111E_exit:


// fn0040112F
// Return size: 0
void fn0040112F()
fn0040112F_entry:
	// succ:  l0040112F
l0040112F:
	esp = esp - 0x00000002
	Mem0[esp:word16] = bx
	bx = Mem0[esp:word16]
	esp = esp + 0x00000002
fn0040112F_exit:


// fn00401142
// Return size: 0
void fn00401142()
fn00401142_entry:
	// succ:  l00401142
l00401142:
	esp = fp
	Mem0[esp:word32] = ecx
	branch Test(UGT,CZ) l00401147
	// succ:  l00401147
l00401147:
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx ^ edi
	SZO = cond(ebx)
	C = false
	ecx = ecx ^ eax
	SZO = cond(ecx)
	C = false
	ecx = ecx - edi
	SCZO = cond(ecx)
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	esi = edx
	call fn0040107F (retsize: 4;)
	esp = esp + 0x00000004
	v14 = Mem0[eax + 0x648D825F:byte] - bh
	Mem0[eax + 0x648D825F:byte] = v14
	SCZO = cond(v14)
	al = al & 0x04
	SZO = cond(al)
	C = false
	// succ:  l0040115D_thunk_fn0040115F
l0040115D_thunk_fn0040115F:
	call fn0040115F (retsize: 0;)
	return
	// succ:  fn00401142_exit
fn00401142_exit:


// fn0040115F
// Return size: 0
void fn0040115F()
fn0040115F_entry:
	// succ:  l0040115F
l0040115F:
	esp = fp
	edx = edx - 0x00000001
	SZO = cond(edx)
	edi = edi + ebx
	SCZO = cond(edi)
	esi = esi - ecx
	SCZO = cond(esi)
	esi = ecx
	ebx = ecx
	esi = esi | edx
	SZO = cond(esi)
	C = false
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	esi = esi - eax
	SCZO = cond(esi)
	call fn00401382 (retsize: 4;)
	ecx = Mem0[ebx + 0x00000067:word32] *s 0x0BDA8BF7
	SCZO = cond(ecx)
	goto l00401173_thunk_fn0040117A
	// succ:  l00401173_thunk_fn0040117A
l0040115F:
l00401173_thunk_fn0040117A:
	call fn0040117A (retsize: 0;)
	return
	// succ:  fn0040115F_exit
fn0040115F_exit:


// fn00401177
// Return size: 0
void fn00401177()
fn00401177_entry:
	// succ:  l00401177
l00401177:
	esp = fp
	ebx = edx
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	goto l00401179_thunk_fn0040117A
	// succ:  l00401179_thunk_fn0040117A
l00401177:
l00401179_thunk_fn0040117A:
	call fn0040117A (retsize: 0;)
	return
	// succ:  fn00401177_exit
fn00401177_exit:


// fn0040117A
// Return size: 0
void fn0040117A()
fn0040117A_entry:
	// succ:  l0040117A
l0040117A:
	esp = fp
	rArg0 = rArg0 * (real64) Mem0[edx + 0x0000002B:word16]
	rLoc1 = Mem0[edi - 0x00000075:real32]
l0040117A:
	edx = edx - 0x00000001
	SZO = cond(edx)
	ebx = ebx - ecx
	SCZO = cond(ebx)
	edi = edi + 0x00000001
	SZO = cond(edi)
	edx = esi
	esi = edi
	eax = eax & 0xEEEEEEEE
	SZO = cond(eax)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	// succ:  l00401189_thunk_fn0040111E
l00401189_thunk_fn0040111E:
	call fn0040111E (retsize: 0;)
	return
	// succ:  fn0040117A_exit
fn0040117A_exit:


// fn00401190
// Return size: 0
void fn00401190()
fn00401190_entry:
	// succ:  l00401190
l00401190:
	esp = fp
	edi = edi | eax
	SZO = cond(edi)
	C = false
	eax = eax - edx
	SCZO = cond(eax)
	edx = edx - eax
	SCZO = cond(edx)
	eax = eax + ecx
	SCZO = cond(eax)
	ebx = edx
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	edx = edx - 0x00000001
	SZO = cond(edx)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	esi = esi + ecx
	SCZO = cond(esi)
	call fn004012B3 (retsize: 4;)
	al = Mem0[ebx + (uint32) al:byte]
	C = false
l00401190:
fn00401190_exit:


// fn004011A9
// Return size: 6
void fn004011A9()
fn004011A9_entry:
	// succ:  l004011A9
l004011A9:
	esp = fp
	Mem0[esp - 0x00000028:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx ^ ecx
	SZO = cond(edx)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edx = edx - ecx
	SCZO = cond(edx)
	call fn0040134C (retsize: 4;)
	edi = Mem0[edi:word32] *s 0x0000001E
	SCZO = cond(edi)
	v11 = (Mem0[ebp + 0x2B042464:byte] & 0x01 << cl) != 0x00
	Mem0[ebp + 0x2B042464:byte] = __ror(Mem0[ebp + 0x2B042464:byte], cl)
	C = v11
	// succ:  l004011BC_thunk_fn004011C2
l004011BC_thunk_fn004011C2:
	call fn004011C2 (retsize: 6;)
	return
	// succ:  fn004011A9_exit
fn004011A9_exit:


// fn004011BD
// Return size: 0
void fn004011BD()
fn004011BD_entry:
	goto l004011BD
	// succ:  l004011BD
l00401129_thunk_fn0040112F:
	call fn0040112F (retsize: 0;)
	return
	// succ:  fn004011BD_exit l00401129_thunk_fn0040112F
l00401129_thunk_fn0040112F:
	call fn0040112F (retsize: 0;)
	return
	// succ:  fn004011BD_exit
l00401129_thunk_fn00401246:
	call fn00401246 (retsize: 0;)
	return
	// succ:  fn004011BD_exit
l004011BD:
	esp = esp + 0x00000004
	edx = edx - ebx
	SCZO = cond(edx)
	// succ:  l004011C1_thunk_fn004011C2
l004011C1_thunk_fn004011C2:
	call fn004011C2 (retsize: 6;)
	return
	// succ:  fn004011BD_exit
fn004011BD_exit:


// fn004011C2
// Return size: 6
void fn004011C2()
fn004011C2_entry:
	goto l004011C2
	// succ:  l004011C2
l00401005:
	dh = dh + 0x01
	SZO = cond(dh)
	esi = esi - 0x00000001
	SZO = cond(esi)
	bl = cl
	cl = cl + 0xAE
	SCZO = cond(cl)
	esi = esi + 0x00000001
	SZO = cond(esi)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	esi = esi + edi
	SCZO = cond(esi)
	dh = ~dh
	branch Test(ULT,C) l00401013_thunk_fn00401362
	goto l00401019
	// succ:  l00401019 l00401013_thunk_fn00401362
l00401013_thunk_fn00401362:
	call fn00401362 (retsize: 0;)
	return
	// succ:  fn004011C2_exit
l00401019:
l004010D6:
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	edi = edi - ebx
	SCZO = cond(edi)
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	ebx = ebx + esi
	SCZO = cond(ebx)
	ecx = edi
	ebx = ebx - eax
	SCZO = cond(ebx)
	dh = dh - al
	SCZO = cond(dh)
	esi = esi - ebx
	SCZO = cond(esi)
	branch Test(OV,O) l004010F8
	// succ:  l004010EA l004010F8
l004010EA:
	branch Test(SG,S) l004010EC
	// succ:  l004010EC
l004010EC:
	cx = cx
	branch Test(NO,O) l004010F8
	// succ:  l004010F1 l004010F8
l004010F1:
	return
	// succ:  fn004011C2_exit
l004010F8:
	bl = ~bl
	bl = 0x5B
	ecx = ecx ^ esi
	SZO = cond(ecx)
	C = false
	dl = 0xC8
	bh = bh | dh
	SZO = cond(bh)
	C = false
	bh = bh | ah
	SZO = cond(bh)
	C = false
	cl = cl ^ al
	SZO = cond(cl)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	dl = dl + 0x01
	SZO = cond(dl)
	branch Test(LE,SZO) l00401005
	// succ:  l0040110F l00401005
l0040110F:
	branch Test(LE,SZO) l00401111
	// succ:  l00401111
l00401111:
	branch Test(GT,SZO) l00401005
	// succ:  l00401117 l00401005
l00401117:
	__outb(dx, al)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ss
	SCZO = cond(Mem0[esi:byte] - Mem0[edi:byte])
	esi = esi + 0x00000001
	edi = edi + 0x00000001
	__lock()
	D = true
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	esp = esp - 0x00000AD0
	// succ:  l0040111C_thunk_fn0040111E
l0040111C_thunk_fn0040111E:
	call fn0040111E (retsize: 0;)
	return
	// succ:  fn004011C2_exit
l004011C2:
	esp = fp
	v4 = (Mem0[esi - 0x00000075:word32] & 0x00000001 << cl) != 0x00000000
	Mem0[esi - 0x00000075:word32] = __ror(Mem0[esi - 0x00000075:word32], cl)
	C = v4
	SCZO = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004011C2_exit
l004011C2:
	esi = esi - 0x00000001
	SZO = cond(esi)
	ecx = edi
	ecx = ecx ^ esi
	SZO = cond(ecx)
	C = false
	ecx = ecx | ebx
	SZO = cond(ecx)
	C = false
	ebx = ebx - edi
	SCZO = cond(ebx)
	branch Test(LE,SZO) l004010D6
	// succ:  l004011D2 l004010D6
l004011D2:
	v12 = esi
	esi = esi
	esi = v12
	branch Test(GT,SZO) l004010D6
	// succ:  l004011DA l004010D6
l004011DA:
	al = Mem0[ebx + (uint32) al:byte]
	ch = ch - Mem0[ecx + 0x8B7E0BED:byte]
	SCZO = cond(ch)
	// succ:  l004011DB_thunk_fn004011E1
l004011DB_thunk_fn004011E1:
	call fn004011E1 (retsize: 0;)
	return
	// succ:  fn004011C2_exit
fn004011C2_exit:


// fn004011E1
// Return size: 0
void fn004011E1()
fn004011E1_entry:
	// succ:  l004011E1
l004011E1:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	esp = esp - 0xFFFFCC37
	SZO = cond(Mem0[ebx:word32] & 0xE84147D0)
	C = false
l004011E1:
	ecx = ecx | esi
	SZO = cond(ecx)
	C = false
	esi = edi
	edx = edx | eax
	SZO = cond(edx)
	C = false
	edi = edi + 0x00000001
	SZO = cond(edi)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
fn004011E1_exit:


// fn004011F7
// Return size: 6
void fn004011F7()
fn004011F7_entry:
	// succ:  l004011F7
l004011F7:
	esp = fp
	Mem0[esp - 0x00000014:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ecx = ecx - eax
	SCZO = cond(ecx)
	edi = edi ^ eax
	SZO = cond(edi)
	C = false
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi - 0x00000001
	SZO = cond(esi)
	eax = eax ^ edi
	SZO = cond(eax)
	C = false
	branch Test(LE,SZO) l004012DA
	goto l0040120A
	// succ:  l0040120A l00401204_thunk_fn004012DA
l00401204_thunk_fn004012DA:
	call fn004012DA (retsize: 0;)
	return
	// succ:  fn004011F7_exit
l0040120A:
	v11 = esi
	esi = esi
	esi = v11
	v12 = ch
	ch = ch
	ch = v12
	branch Test(GT,SZO) l004012DA
	goto l00401214
	// succ:  l00401214 l0040120E_thunk_fn004012DA
l0040120E_thunk_fn004012DA:
	call fn004012DA (retsize: 0;)
	return
	// succ:  fn004011F7_exit
l00401214:
	int3()
	bh = 0xC9
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	v17 = (Mem0[ebx:byte] & 0x01 << cl) != 0x00
	Mem0[ebx:byte] = __ror(Mem0[ebx:byte], cl)
	C = v17
	// succ:  l0040121A
l0040121A:
	SCZO = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004011F7_exit
l004012EE_thunk_fn00401190:
	call fn00401190 (retsize: 0;)
	return
	// succ:  fn004011F7_exit
l004012EE_thunk_fn004012F4:
	call fn004012F4 (retsize: 0;)
	return
	// succ:  fn004011F7_exit l004012EE_thunk_fn004012F4
l004012EE_thunk_fn004012F4:
	call fn004012F4 (retsize: 0;)
	return
	// succ:  fn004011F7_exit
fn004011F7_exit:


// fn00401246
// Return size: 0
void fn00401246()
fn00401246_entry:
	// succ:  l00401246
l00401246:
	esp = fp
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	edx = edx - eax
	SCZO = cond(edx)
	edx = eax
	edx = edx + 0x00000001
	SZO = cond(edx)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edi = edi - ebx
	SCZO = cond(edi)
	edx = edx + 0x00000001
	SZO = cond(edx)
	ecx = ecx + edi
	SCZO = cond(ecx)
	edx = edx | ecx
	SZO = cond(edx)
	C = false
	call fn0040109F (retsize: 4;)
	v11 = Mem0[0xB6177A92:word32] | ebx
	Mem0[0xB6177A92:word32] = v11
	SZO = cond(Mem0[0xB6177A92:word32])
	C = false
	branch Test(EQ,Z) TMP!
l00401246:
fn00401246_exit:


// fn00401261
// Return size: 0
void fn00401261()
fn00401261_entry:
	// succ:  l00401261
l00401261:
	esp = fp
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	edx = edx + edi
	SCZO = cond(edx)
	edi = eax
	edi = edi + eax
	SCZO = cond(edi)
	ebx = ebx - ecx
	SCZO = cond(ebx)
	edi = edi + 0x00000001
	SZO = cond(edi)
l00401261:
fn00401261_exit:


// fn00401277
// Return size: 0
void fn00401277()
fn00401277_entry:
	goto l00401277
	// succ:  l00401277
l0040121A_in_fn00401277:
	SCZO = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00401277_exit
l0040121A_in_fn00401277:
	SCZO = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00401277_exit
l00401277:
	esp = fp
	eax = Mem0[eax + 0x00000090:word32]
	edx = ebx
	ecx = ecx | ebx
	SZO = cond(ecx)
	C = false
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	branch Test(PE,P) l0040121A_in_fn00401277
	goto l00401289
	// succ:  l00401289 l0040121A_in_fn00401277
l00401277:
l00401289:
	// succ:  l0040128E
l0040128E:
	ax = ax
	branch Test(PO,P) l0040121A_in_fn00401277
	// succ:  l00401293 l0040121A_in_fn00401277
l00401293:
	edi = edi + Mem0[(esi - 0x00000058) + edx * 0x00000008:word32]
	SCZO = cond(edi)
	// succ:  l00401293_thunk_fn00401297
l00401293_thunk_fn00401297:
	call fn00401297 (retsize: 0;)
	return
	// succ:  fn00401277_exit
fn00401277_exit:


// fn00401297
// Return size: 0
void fn00401297()
fn00401297_entry:
	goto l00401297
	// succ:  l00401297
l004011E0:
	ecx = eax
	// succ:  l004011E0_thunk_fn004011E1
l004011E0_thunk_fn004011E1:
	call fn004011E1 (retsize: 0;)
	return
	// succ:  fn00401297_exit
l00401297:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	esi = eax
	edx = edx + 0x00000001
	SZO = cond(edx)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	edx = edx + ebx
	SCZO = cond(edx)
	ebx = eax
	edi = edi + 0x00000001
	SZO = cond(edi)
	edi = edi - ebx
	SCZO = cond(edi)
	goto l004011E0
	// succ:  l004011E0
fn00401297_exit:


// fn004012B3
// Return size: 0
void fn004012B3()
fn004012B3_entry:
	goto l004012B3
	// succ:  l004012B3
l00401238:
	eax = esi
	edx = edx ^ ebx
	SZO = cond(edx)
	C = false
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	edi = esi
	// succ:  l00401241_thunk_fn004013AE
l00401241_thunk_fn004013AE:
	call fn004013AE (retsize: 0;)
	return
	// succ:  fn004012B3_exit
l004012B3:
	esp = fp
	Mem0[esp - 0x00000018:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx | edx
	SZO = cond(ecx)
	C = false
	edi = edi ^ esi
	SZO = cond(edi)
	C = false
	ecx = eax
	ecx = ecx | edx
	SZO = cond(ecx)
	C = false
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	ecx = ecx + eax
	SCZO = cond(ecx)
	edx = edx - 0x00000001
	SZO = cond(edx)
	eax = eax ^ esi
	SZO = cond(eax)
	C = false
	branch Test(ULT,C) l00401238
l004012CC:
	branch Test(NO,O) l004012CE
	// succ:  l004012CE
l004012CE:
	branch Test(UGE,C) l00401238
	// succ:  l004012D4 l00401238
l004012D4:
	es = Mem0[esp:selector]
	esp = esp + 0x00000002
	edi = edi - 0x00000001
	SZO = cond(edi)
	al = al ^ 0xFF
	SZO = cond(al)
	C = false
	al = al + 0xA2
	SCZO = cond(al)
	// succ:  l004012D8_thunk_fn004012DA
l004012D8_thunk_fn004012DA:
	call fn004012DA (retsize: 0;)
	return
	// succ:  fn004012B3_exit
fn004012B3_exit:


// fn004012DA
// Return size: 0
void fn004012DA()
fn004012DA_entry:
	// succ:  l004012DA
l004012DA:
	ecx = ecx | ebx
	SZO = cond(ecx)
	C = false
	eax = eax ^ esi
	SZO = cond(eax)
	C = false
	esi = esi ^ ecx
	SZO = cond(esi)
	C = false
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	eax = eax ^ esi
	SZO = cond(eax)
	C = false
	edi = edi + edx
	SCZO = cond(edi)
	ebx = ebx ^ edi
	SZO = cond(ebx)
	C = false
	eax = eax ^ edi
	SZO = cond(eax)
	C = false
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	eax = eax + esi
	SCZO = cond(eax)
	branch Test(ULE,CZ) l004012EE_thunk_fn00401190
	goto l004012EE_thunk_fn004012F4
	// succ:  l004012EE_thunk_fn004012F4 l004012EE_thunk_fn00401190
fn004012DA_exit:


// fn004012F4
// Return size: 0
void fn004012F4()
fn004012F4_entry:
	// succ:  l004012F4
l004012F4:
	esp = fp
	v3 = dx
	dx = dx
	dx = v3
	branch Test(UGT,CZ) l004012F7_thunk_fn00401190
	goto l004012FD
	// succ:  l004012FD l004012F7_thunk_fn00401190
l004012F4:
l004012F7_thunk_fn00401190:
	call fn00401190 (retsize: 0;)
	return
	// succ:  fn004012F4_exit
l004012FD:
	__cli()
	eax = eax | 0x648D96A0
	SZO = cond(eax)
	C = false
	al = al & 0x04
	SZO = cond(al)
	C = false
	ebx = ebx + edi
	SCZO = cond(ebx)
	esi = esi + ebx
	SCZO = cond(esi)
	edi = esi
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	esi = esi | edx
	SZO = cond(esi)
	C = false
	esi = esi | ecx
	SZO = cond(esi)
	C = false
	edi = edi | edx
	SZO = cond(edi)
	C = false
	edx = edx + 0x00000001
	SZO = cond(edx)
	eax = Mem0[fs:0x00000030:word32]
	branch Test(OV,O) l00401319_thunk_fn00401261
	goto l00401319_thunk_fn0040131F
	// succ:  l00401319_thunk_fn0040131F l00401319_thunk_fn00401261
l00401319_thunk_fn00401261:
	call fn00401261 (retsize: 0;)
	return
	// succ:  fn004012F4_exit
l00401319_thunk_fn0040131F:
	call fn0040131F (retsize: 0;)
	return
	// succ:  fn004012F4_exit
fn004012F4_exit:


// fn00401301
// Return size: 0
void fn00401301()
fn00401301_entry:
	// succ:  l00401301
l00401301:
	esp = fp
	esp = esp + 0x00000004
	ebx = ebx + edi
	SCZO = cond(ebx)
	esi = esi + ebx
	SCZO = cond(esi)
	edi = esi
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	esi = esi | edx
	SZO = cond(esi)
	C = false
	esi = esi | ecx
	SZO = cond(esi)
	C = false
	edi = edi | edx
	SZO = cond(edi)
	C = false
	edx = edx + 0x00000001
	SZO = cond(edx)
	eax = Mem0[fs:0x00000030:word32]
	branch Test(OV,O) l00401319_thunk_fn00401261
	goto l00401319_thunk_fn0040131F
	// succ:  l00401319_thunk_fn0040131F l00401319_thunk_fn00401261
l00401319_thunk_fn00401261:
	call fn00401261 (retsize: 0;)
	return
	// succ:  fn00401301_exit
l00401319_thunk_fn0040131F:
	call fn0040131F (retsize: 0;)
	return
	// succ:  fn00401301_exit l00401319_thunk_fn0040131F
l00401319_thunk_fn0040131F:
	call fn0040131F (retsize: 0;)
	return
	// succ:  fn00401301_exit
fn00401301_exit:


// fn0040131F
// Return size: 0
void fn0040131F()
fn0040131F_entry:
	// succ:  l0040131F
l0040131F:
	branch Test(OV,O) l00401321
	// succ:  l00401321
l00401321:
	branch Test(ULT,C) l00401323
	// succ:  l00401323
l00401323:
	branch Test(NO,O) l00401323_thunk_fn00401261
fn0040131F_exit:


// fn00401324
// Return size: 0
void fn00401324()
fn00401324_entry:
	goto l00401324
	// succ:  l00401324
l00401323_thunk_fn00401261:
	call fn00401261 (retsize: 0;)
	return
	// succ:  fn00401324_exit
l00401324:
	esp = fp
	SCZO = cond(Mem0[eax:word32] - 0xCAFFFFFF)
	goto l00401324_thunk_fn0040132A
	// succ:  l00401324_thunk_fn0040132A
l00401324:
	// succ:  l00401329 l00401323_thunk_fn00401261
l00401324_thunk_fn0040132A:
	call fn0040132A (retsize: 0;)
	return
	// succ:  fn00401324_exit
l00401329:
	return
fn00401324_exit:


// fn0040132A
// Return size: 0
void fn0040132A()
fn0040132A_entry:
	// succ:  l0040132A
l0040132A:
	esp = fp
	int3()
	v4 = Mem0[eax - 0x00000077:word32] + 0x00000014
	Mem0[eax - 0x00000077:word32] = v4
	SCZO = cond(v4)
	goto l0040132B_thunk_fn0040132F
	// succ:  l0040132B_thunk_fn0040132F
l0040132A:
	goto fn0040132A_exit
	// succ:  fn0040132A_exit
l0040132B_thunk_fn0040132F:
	call fn0040132F (retsize: 0;)
	return
	// succ:  fn0040132A_exit
fn0040132A_exit:


// fn0040132D
// Return size: 0
void fn0040132D()
fn0040132D_entry:
	// succ:  l0040132D
l0040132D:
	Mem0[esp:word32] = edx
	// succ:  l0040132D_thunk_fn0040132F
l0040132D_thunk_fn0040132F:
	call fn0040132F (retsize: 0;)
	return
	// succ:  fn0040132D_exit
fn0040132D_exit:


// fn0040132F
// Return size: 0
void fn0040132F()
fn0040132F_entry:
	// succ:  l0040132F
l0040132F:
	esp = fp
	al = al & 0x86
	SZO = cond(al)
	C = false
	al = __inb(0x5A)
	ebx = ebx - ecx
	SCZO = cond(ebx)
	esi = esi - 0x00000001
	SZO = cond(esi)
	esi = ecx
	edx = edx ^ ebx
	SZO = cond(edx)
	C = false
	branch Test(PE,P) l0040133A_thunk_fn004010BD
	goto l0040133A_thunk_fn00401340
	// succ:  l0040133A_thunk_fn00401340 l0040133A_thunk_fn004010BD
l0040132F:
	v13 = ah
	ah = ah
	ah = v13
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx - ecx
	SCZO = cond(ebx)
	esi = esi - 0x00000001
	SZO = cond(esi)
	esi = ecx
	edx = edx ^ ebx
	SZO = cond(edx)
	C = false
	branch Test(PE,P) l0040133A_thunk_fn004010BD
	// succ:  l00401339_thunk_fn00401340 l0040133A_thunk_fn004010BD
l00401339_thunk_fn00401340:
	call fn00401340 (retsize: 0;)
	return
	// succ:  fn0040132F_exit
l0040133A_thunk_fn004010BD:
	call fn004010BD (retsize: 0;)
	return
	// succ:  fn0040132F_exit
l0040133A_thunk_fn004010BD:
	call fn004010BD (retsize: 0;)
	return
	// succ:  fn0040132F_exit
l0040133A_thunk_fn00401340:
	call fn00401340 (retsize: 0;)
	return
	// succ:  fn0040132F_exit l0040133A_thunk_fn00401340
l0040133A_thunk_fn00401340:
	call fn00401340 (retsize: 0;)
	return
	// succ:  fn0040132F_exit
fn0040132F_exit:


// fn00401340
// Return size: 0
void fn00401340()
fn00401340_entry:
	// succ:  l00401340
l00401340:
	ebx = ebx
	branch Test(PO,P) l00401342_thunk_fn004010BD
	goto l00401348
	// succ:  l00401348 l00401342_thunk_fn004010BD
l00401342_thunk_fn004010BD:
	call fn004010BD (retsize: 0;)
	return
	// succ:  fn00401340_exit
l00401348:
fn00401340_exit:


// fn0040134C
// Return size: 0
void fn0040134C()
fn0040134C_entry:
	// succ:  l0040134C
l0040134C:
	esp = fp
	esp = esp + 0x00000004
	ebx = ebx + edx
	SCZO = cond(ebx)
	edx = edx - 0x00000001
	SZO = cond(edx)
	edi = esi
	edi = esi
	edi = edi - 0x00000001
	SZO = cond(edi)
	call fn00401060 (retsize: 4;)
	ah = FPUF
	SCZO = cond(Mem0[edi:word32] - edi)
	cl = cl + Mem0[ebx:byte]
	SCZO = cond(cl)
	// succ:  l00401360_thunk_fn00401362
l00401360_thunk_fn00401362:
	call fn00401362 (retsize: 0;)
	return
	// succ:  fn0040134C_exit
fn0040134C_exit:


// fn00401362
// Return size: 0
void fn00401362()
fn00401362_entry:
	// succ:  l00401362
l00401362:
	esp = fp
	dh = dh - 0x01
	SZO = cond(dh)
	dl = dl + 0x5B
	SCZO = cond(dl)
	ch = ~ch
	edi = edi - edx
	SCZO = cond(edi)
	dl = dl + 0x79 + C
	SCZO = cond(dl)
	dl = dl + ch
	SCZO = cond(dl)
	dh = ~dh
	esi = ebx
	cl = cl | dl
	SZO = cond(cl)
	C = false
	ch = cl
	call fn0040102A (retsize: 4;)
	branch Test(PE,P) l0040137D_thunk_fn00401324
	goto l0040137D_thunk_fn0040137F
	// succ:  l0040137D_thunk_fn0040137F l0040137D_thunk_fn00401324
l00401362:
	dh = dh - 0x01
	SZO = cond(dh)
	dl = dl + 0x5B
	SCZO = cond(dl)
	ch = ~ch
	edi = edi - edx
	SCZO = cond(edi)
	dl = dl + 0x79 + C
	SCZO = cond(dl)
	dl = dl + ch
	SCZO = cond(dl)
	dh = ~dh
	esi = ebx
	cl = cl | dl
	SZO = cond(cl)
	C = false
	ch = cl
	call fn0040102A (retsize: 4;)
	branch Test(PE,P) l0040137D_thunk_fn00401324
	goto l0040137D_thunk_fn0040137F
	// succ:  l0040137D_thunk_fn0040137F l0040137D_thunk_fn00401324
l0040137D_thunk_fn00401324:
	call fn00401324 (retsize: 0;)
	return
	// succ:  fn00401362_exit
l0040137D_thunk_fn00401324:
	call fn00401324 (retsize: 0;)
	return
	// succ:  fn00401362_exit
l0040137D_thunk_fn0040137F:
	call fn0040137F (retsize: 0;)
	return
	// succ:  fn00401362_exit l0040137D_thunk_fn0040137F
l0040137D_thunk_fn0040137F:
	call fn0040137F (retsize: 0;)
	return
	// succ:  fn00401362_exit
l0040137D_thunk_fn0040137F:
	call fn0040137F (retsize: 0;)
	return
	// succ:  fn00401362_exit
fn00401362_exit:


// fn0040137F
// Return size: 0
void fn0040137F()
fn0040137F_entry:
	// succ:  l0040137F
l0040137F:
	v5 = Mem0[edx + ecx * 8F:real32] - rArg0
	Mem0[edx + ecx * 8F:real32] = v5
	// succ:  l0040137F_thunk_fn00401382
l0040137F_thunk_fn00401382:
	call fn00401382 (retsize: 0;)
	return
	// succ:  fn0040137F_exit
fn0040137F_exit:


// fn00401382
// Return size: 0
void fn00401382()
fn00401382_entry:
	// succ:  l00401382
l00401382:
	esp = fp
	esp = esp + 0x00000004
	ecx = ecx + ebx
	SCZO = cond(ecx)
	ecx = ecx + edi
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SZO = cond(edx)
	esi = esi + edi
	SCZO = cond(esi)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ecx = edx
	edi = edi - 0x00000001
	SZO = cond(edi)
	edi = edi + 0x00000001
	SZO = cond(edi)
	call fn004011F7 (retsize: 4;)
	Mem0[ecx - 0x0000003D:word32] = 0x49DE0BA1
	ebx = ebx | eax
	SZO = cond(ebx)
	C = false
	edx = edx ^ ebx
	SZO = cond(edx)
	C = false
	// succ:  l004013A0_thunk_fn004013A2 l004013AC_thunk_fn004013B3
l004013A0_thunk_fn004013A2:
	call fn004013A2 (retsize: 0;)
	return
	// succ:  fn00401382_exit
l004013AC_thunk_fn004013B3:
	call fn004013B3 (retsize: 0;)
	return
	// succ:  fn00401382_exit
fn00401382_exit:


// fn004013A2
// Return size: 0
void fn004013A2()
fn004013A2_entry:
	// succ:  l004013A2
l004013A2:
	esp = fp
	ecx = ecx ^ esi
	SZO = cond(ecx)
	C = false
	edx = edx - 0x00000001
	SZO = cond(edx)
	call fn004011A9 (retsize: 4;)
	esp = esp + 0xFFFFFFFA
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esi = Mem0[edx - 0x00000018:word32] *s 0x000014CB
	SCZO = cond(esi)
	goto l004013AC_thunk_fn004013B3
	// succ:  l004013AC_thunk_fn004013B3
l004013A2:
	ecx = ecx ^ esi
	SZO = cond(ecx)
	C = false
	edx = edx - 0x00000001
	SZO = cond(edx)
	call fn004011A9 (retsize: 4;)
	esp = esp + 0xFFFFFFFA
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esi = Mem0[edx - 0x00000018:word32] *s 0x000014CB
	SCZO = cond(esi)
l004013AC_thunk_fn004013B3:
	call fn004013B3 (retsize: 0;)
	return
	// succ:  fn004013A2_exit
fn004013A2_exit:


// fn004013AE
// Return size: 0
void fn004013AE()
fn004013AE_entry:
	// succ:  l004013AE
l004013AE:
	esp = fp
l004013AE:
fn004013AE_exit:


// fn004013B3
// Return size: 0
void fn004013B3()
fn004013B3_entry:
	// succ:  l004013B3
l004013B3:
	esp = fp
	ecx = 0x3BB3C4A4
	int3()
	edx = edx >> 0xFFFFFFD2
	SCZO = cond(edx)
	esp = Mem0[esp:word32]
	esp = esp + 0x00000004
	v6 = (edi & 0x00000001 << 0x01) != 0x00000000
	edi = __rcr(edi, 0x01, C)
	C = v6
	ecx = ecx - 0x00000001
	branch Test(EQ,Z) && ecx != 0x00000000 l004013BF_thunk_fn004013A2
	goto l004013C1
	// succ:  l004013C1 l004013BF_thunk_fn004013A2
l004013B3:
l004013BF_thunk_fn004013A2:
	call fn004013A2 (retsize: 0;)
	return
	// succ:  fn004013B3_exit
l004013C1:
	Mem0[esi:word32] = eax
fn004013B3_exit:


// fn00402029
// Return size: 0
void fn00402029()
fn00402029_entry:
	// succ:  l00402029
l00402029:
	esp = fp
	dh = dh - 0x01
	SZO = cond(dh)
	bl = bl ^ cl
	SZO = cond(bl)
	C = false
	esi = esi | eax
	SZO = cond(esi)
	C = false
	dl = dl - 0x01
	SZO = cond(dl)
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	ch = 0xFF
	call fn00402042 (retsize: 4;)
	ecx = ecx | Mem0[ecx + 0x00000012:word32]
	SZO = cond(ecx)
	C = false
	eax = eax | 0x448F25CE
	SZO = cond(eax)
	C = false
	goto l00402044_in_fn00402029
	// succ:  l00402044_in_fn00402029
l00402029:
l00402044_in_fn00402029:
	ch = ~ch
	dl = dl ^ bl
	SZO = cond(dl)
	C = false
	dl = dl + bh
	SCZO = cond(dl)
	edx = edx ^ edi
	SZO = cond(edx)
	C = false
	esi = esi + ebx
	SCZO = cond(esi)
	return
	// succ:  fn00402029_exit
fn00402029_exit:


// fn00402042
// Return size: 4
void fn00402042()
fn00402042_entry:
	// succ:  l00402042
l00402042:
	esp = fp
	Mem0[esp - 0x00000028:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00402044
l00402044:
	ch = ~ch
	dl = dl ^ bl
	SZO = cond(dl)
	C = false
	dl = dl + bh
	SCZO = cond(dl)
	edx = edx ^ edi
	SZO = cond(edx)
	C = false
	esi = esi + ebx
	SCZO = cond(esi)
	return
	// succ:  fn00402042_exit
fn00402042_exit:


// fn0040206A
// Return size: 0
void fn0040206A()
fn0040206A_entry:
	// succ:  l0040206A
l0040206A:
	esp = fp
	edi = edi + 0x00000001
	SZO = cond(edi)
	ebx = ebx + edi
	SCZO = cond(ebx)
	bl = bl - 0x40 - C
	SCZO = cond(bl)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ah = ah + dl
	SCZO = cond(ah)
	bl = 0xE4
	goto l00402B0E
	// succ:  l00402B0E
l0040206A:
l00402248:
	esi = esi + 0x00000001
	SZO = cond(esi)
	ah = ah + 0x01
	SZO = cond(ah)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	eax = eax - edi
	SCZO = cond(eax)
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	bh = ah
	al = al - 0x01
	SZO = cond(al)
	call fn00402BC5 (retsize: 4;)
	// succ:  l00402259
l00402259:
	branch Test(OV,O) l00402259
	// succ:  l0040225C l00402259
l0040225C:
	esi = 0x45E56423
	// succ:  l0040225C_thunk_fn00402262
l0040225C_thunk_fn00402262:
	call fn00402262 (retsize: 0;)
	return
	// succ:  fn0040206A_exit
l00402B0E:
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	bl = bl - al
	SCZO = cond(bl)
	bh = ch
	al = al - 0x9A - C
	SCZO = cond(al)
	ah = ah | dh
	SZO = cond(ah)
	C = false
	al = ~al
	ah = ~ah
	eax = eax - esi
	SCZO = cond(eax)
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	branch Test(PE,P) l00402248
	// succ:  l00402B27 l00402248
l00402B27:
	// succ:  l00402B2C
l00402B2C:
	branch Test(PO,P) l00402248
	// succ:  l00402B32 l00402248
l00402B32:
	v19 = eax
	eax = edx
	edx = v19
	bl = bl ^ Mem0[esi + 0x24448F80:byte]
	SZO = cond(bl)
	C = false
	// succ:  l00402B33_thunk_fn00402B39
l00402B33_thunk_fn00402B39:
	call fn00402B39 (retsize: 0;)
	return
	// succ:  fn0040206A_exit
fn0040206A_exit:


// fn00402080
// Return size: 0
void fn00402080()
fn00402080_entry:
	// succ:  l00402080
l00402080:
	esp = fp
	esp = esp + 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[edx + 0x00000008:word32]
	bl = bl ^ ch
	SZO = cond(bl)
	C = false
	bl = bl + 0xA3
	SCZO = cond(bl)
	bh = bh + 0x01
	SZO = cond(bh)
	bl = bl ^ ch
	SZO = cond(bl)
	C = false
	esi = esi | edx
	SZO = cond(esi)
	C = false
	branch Test(ULT,C) l00402092_thunk_fn0040271A
	goto l00402098
	// succ:  l00402098 l00402092_thunk_fn0040271A
l00402092_thunk_fn0040271A:
	call fn0040271A (retsize: 0;)
	return
	// succ:  fn00402080_exit
l00402098:
	v11 = si
	si = si
	si = v11
fn00402080_exit:


// fn004020AA
// Return size: 0
void fn004020AA()
fn004020AA_entry:
	// succ:  l004020AA
l004020AA:
	esp = fp
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	bl = bl + 0xC8 + C
	SCZO = cond(bl)
	esi = esi - 0x00000001
	SZO = cond(esi)
	al = al | cl
	SZO = cond(al)
	C = false
	ah = cl
	goto l00402EBF
	// succ:  l00402EBF
l004020AA:
l00402EBF:
	ecx = ecx << 0x0000000F
	SCZO = cond(ecx)
	al = al + 0x0E
	SCZO = cond(al)
	bh = bh | ch
	SZO = cond(bh)
	C = false
	dl = dl - ah
	SCZO = cond(dl)
	ebx = ebx - ecx
	SCZO = cond(ebx)
	esi = esi + 0x00000001
	SZO = cond(esi)
	bl = bl | ch
	SZO = cond(bl)
	C = false
	bl = bl - 0x8D - C
	SCZO = cond(bl)
	bl = al
	eax = eax + ebx
	SCZO = cond(eax)
	call fn0040229A (retsize: 4;)
	v17 = Mem0[ecx - 0x00000073:byte] + dl
	Mem0[ecx - 0x00000073:byte] = v17
	SCZO = cond(v17)
	al = al - 0xB8 - C
	SCZO = cond(al)
	__cli()
	eax = (int32) ax
	// succ:  l00402EE0_thunk_fn00402EE1
l00402EE0_thunk_fn00402EE1:
	call fn00402EE1 (retsize: 0;)
	return
	// succ:  fn004020AA_exit
fn004020AA_exit:


// fn004020C0
// Return size: 0
void fn004020C0()
fn004020C0_entry:
	// succ:  l004020C0
l004020C0:
	esp = fp
	al = al - bl
	SCZO = cond(al)
	bh = 0xEF
	ebx = ebx + edx
	SCZO = cond(ebx)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bl = bl + 0x59 + C
	SCZO = cond(bl)
	al = al - dl
	SCZO = cond(al)
	eax = eax ^ edx
	SZO = cond(eax)
	C = false
l004020C0:
fn004020C0_exit:


// fn004020D8
// Return size: 6
void fn004020D8()
fn004020D8_entry:
	// succ:  l004020D8
l004020D8:
	esp = fp
	esp = esp + 0x00000004
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	bl = bl + 0xE3 + C
	SCZO = cond(bl)
	cl = ~cl
	edi = edi - ebx
	SCZO = cond(edi)
	ch = ch - 0x65 - C
	SCZO = cond(ch)
	bh = bh + 0x01
	SZO = cond(bh)
	ebx = edx
	eax = Mem0[edx:word32]
	dl = ~dl
	// succ:  l004020F0_thunk_fn0040293C
l004020F0_thunk_fn0040293C:
	call fn0040293C (retsize: 6;)
	return
	// succ:  fn004020D8_exit
fn004020D8_exit:


// fn00402144
// Return size: 0
void fn00402144()
fn00402144_entry:
	// succ:  l00402144
l00402144:
	esp = fp
	bl = bl + 0x60
	SCZO = cond(bl)
	goto l00402144_thunk_fn00402145
	// succ:  l00402144_thunk_fn00402145
l00402144:
l00402144_thunk_fn00402145:
	call fn00402145 (retsize: 4;)
	return
	// succ:  fn00402144_exit
fn00402144_exit:


// fn00402145
// Return size: 4
void fn00402145()
fn00402145_entry:
	// succ:  l00402145
l00402145:
	esp = fp
	return
	// succ:  fn00402145_exit
l00402145:
	bh = bh + 0x3B
	SCZO = cond(bh)
	bl = bl - 0x01
	SZO = cond(bl)
	edi = edi + 0x00000001
	SZO = cond(edi)
	edi = edi + 0x00000001
	SZO = cond(edi)
	bh = bh + cl
	SCZO = cond(bh)
	bl = bl ^ al
	SZO = cond(bl)
	C = false
	ebx = ebx | edx
	SZO = cond(ebx)
	C = false
	bh = bh | ch
	SZO = cond(bh)
	C = false
	bl = bl | dh
	SZO = cond(bl)
	C = false
	call fn004029B8 (retsize: 4;)
	v16 = eax
	eax = esi
	esi = v16
	SCZO = cond(dl - Mem0[(ebp + 0x0424648D) + ecx:byte])
	ch = ah
	bl = bl + 0x59 + C
	SCZO = cond(bl)
	edx = edx - 0x00000001
	SZO = cond(edx)
	ebx = ebx | edx
	SZO = cond(ebx)
	C = false
	bh = bh | ch
	SZO = cond(bh)
	C = false
	bh = bh - 0x96 - C
	SCZO = cond(bh)
	ah = 0xB3
	bl = bl + 0x01
	SZO = cond(bl)
	branch Test(ULT,C) l00402176_thunk_fn00402C80
	// succ:  l00402176_thunk_fn0040217C l00402176_thunk_fn00402C80
l00402176_thunk_fn0040217C:
	call fn0040217C (retsize: 0;)
	return
	// succ:  fn00402145_exit
l00402176_thunk_fn00402C80:
	call fn00402C80 (retsize: 0;)
	return
	// succ:  fn00402145_exit
fn00402145_exit:


// fn00402161
// Return size: 0
void fn00402161()
fn00402161_entry:
	// succ:  l00402161
l00402161:
	esp = fp
	esp = esp + 0x00000004
	ch = ah
	bl = bl + 0x59 + C
	SCZO = cond(bl)
	edx = edx - 0x00000001
	SZO = cond(edx)
	ebx = ebx | edx
	SZO = cond(ebx)
	C = false
	bh = bh | ch
	SZO = cond(bh)
	C = false
	bh = bh - 0x96 - C
	SCZO = cond(bh)
	ah = 0xB3
	bl = bl + 0x01
	SZO = cond(bl)
	branch Test(ULT,C) l00402176_thunk_fn00402C80
	// succ:  l00402176_thunk_fn0040217C l00402176_thunk_fn00402C80
l00402176_thunk_fn0040217C:
	call fn0040217C (retsize: 0;)
	return
	// succ:  fn00402161_exit l00402176_thunk_fn0040217C
l00402176_thunk_fn0040217C:
	call fn0040217C (retsize: 0;)
	return
	// succ:  fn00402161_exit
l00402176_thunk_fn00402C80:
	call fn00402C80 (retsize: 0;)
	return
	// succ:  fn00402161_exit
fn00402161_exit:


// fn0040217C
// Return size: 0
void fn0040217C()
fn0040217C_entry:
	// succ:  l0040217C
l0040217C:
	cx = ecx
fn0040217C_exit:


// fn0040218A
// Return size: 4
void fn0040218A()
fn0040218A_entry:
	// succ:  l0040218A
l0040218A:
	esp = fp
	Mem0[esp - 0x00000034:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi - eax
	SCZO = cond(esi)
	esi = esi | edx
	SZO = cond(esi)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	call fn00402198 (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	// succ:  l00402193_thunk_fn00402198
l00402193_thunk_fn00402198:
	call fn00402198 (retsize: 4;)
	return
	// succ:  fn0040218A_exit
fn0040218A_exit:


// fn00402198
// Return size: 4
void fn00402198()
fn00402198_entry:
	// succ:  l00402198
l00402198:
	esp = fp
	dl = dl - 0x01
	SZO = cond(dl)
	bl = bl - dl
	SCZO = cond(bl)
	branch Test(LT,SO) l004026DF
	// succ:  l004021A2 l004026DF
l004021A2:
	ch = ch
l0040260C:
	al = al ^ cl
	SZO = cond(al)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	ch = ch + 0x54 + C
	SCZO = cond(ch)
	bl = bl + 0x01
	SZO = cond(bl)
	al = al + bl
	SCZO = cond(al)
	dl = dl + 0x6A + C
	SCZO = cond(dl)
	ch = ch | dh
	SZO = cond(ch)
	C = false
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	branch Test(SG,S) l0040261C_thunk_fn00402C5F
	goto l00402622
	// succ:  l00402622 l0040261C_thunk_fn00402C5F
l0040261C_thunk_fn00402C5F:
	call fn00402C5F (retsize: 0;)
	return
	// succ:  fn00402198_exit
l00402622:
	cx = ecx
	branch Test(NS,S) l00402625_thunk_fn00402C5F
	goto l0040262B
	// succ:  l0040262B l00402625_thunk_fn00402C5F
l00402625_thunk_fn00402C5F:
	call fn00402C5F (retsize: 0;)
	return
	// succ:  fn00402198_exit
l0040262B:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esp
	// succ:  l0040262C_thunk_fn004025D8
l0040262C_thunk_fn004025D8:
	call fn004025D8 (retsize: 0;)
	return
	// succ:  fn00402198_exit
l004026DF:
	dl = ~dl
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	eax = edx
	dl = cl
	ch = ch + 0x8D
	SCZO = cond(ch)
	cl = cl ^ ah
	SZO = cond(cl)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	branch Test(SG,S) l0040260C
	// succ:  l004026F3 l0040260C
l004026F3:
	v18 = bh
	bh = bh
	bh = v18
	branch Test(NS,S) l0040260C
	// succ:  l004026FB l0040260C
l004026FB:
	Mem0[esi:word32] = 0xC074074F
	v21 = Mem0[edi - 0x00000080:word32] + eax + C
	Mem0[edi - 0x00000080:word32] = v21
	SCZO = cond(v21)
	// succ:  l00402701_thunk_fn00402704
l00402701_thunk_fn00402704:
	call fn00402704 (retsize: 4;)
	return
	// succ:  fn00402198_exit
fn00402198_exit:


// fn004021CA
// Return size: 0
void fn004021CA()
fn004021CA_entry:
	// succ:  l004021CA
l004021CA:
	esp = fp
	bh = bl
	bl = bl - ah
	SCZO = cond(bl)
	edx = edx | esi
	SZO = cond(edx)
	C = false
	dh = dh + 0x01
	SZO = cond(dh)
	ch = ch - 0x01
	SZO = cond(ch)
	dl = dl + 0xF9
	SCZO = cond(dl)
l004021CA:
fn004021CA_exit:


// fn004021E0
// Return size: 0
void fn004021E0()
fn004021E0_entry:
	// succ:  l004021E0
l004021E0:
	esp = fp
	Mem0[esp - 0x00000030:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh + 0xB1 + C
	SCZO = cond(bh)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	ebx = ebx | edx
	SZO = cond(ebx)
	C = false
	eax = eax - 0x7C8F346C
	SCZO = cond(eax)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bh = bh - 0xB1 - C
	SCZO = cond(bh)
	call fn004025CA (retsize: 4;)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	v14 = Mem0[esi - 0x0000000E:word32] << cl
	Mem0[esi - 0x0000000E:word32] = v14
	SCZO = cond(v14)
	v15 = (Mem0[eax + 0xC22A79D7:byte] & 0x01 << 0x08 - 0x01) != 0x00
	Mem0[eax + 0xC22A79D7:byte] = __rol(Mem0[eax + 0xC22A79D7:byte], 0x01)
	C = v15
	// succ:  l004021FF_thunk_fn00402205
l004021FF_thunk_fn00402205:
	call fn00402205 (retsize: 0;)
	return
	// succ:  fn004021E0_exit
fn004021E0_exit:


// fn00402200
// Return size: 0
void fn00402200()
fn00402200_entry:
	// succ:  l00402200
l00402200:
	esp = fp
	bh = bh + 0x79 + C
	SCZO = cond(bh)
	al = al - dl
	SCZO = cond(al)
	goto l00402203_thunk_fn00402205
	// succ:  l00402203_thunk_fn00402205
l00402200:
l00402203_thunk_fn00402205:
	call fn00402205 (retsize: 0;)
	return
	// succ:  fn00402200_exit
fn00402200_exit:


// fn00402205
// Return size: 0
void fn00402205()
fn00402205_entry:
	// succ:  l00402205
l00402205:
	esp = fp
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	dh = dh + 0xB2
	SCZO = cond(dh)
	ah = ah - 0x3E - C
	SCZO = cond(ah)
	ah = ah + 0xEA + C
	SCZO = cond(ah)
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	branch Test(LT,SO) l00402213_thunk_fn00402C44
	goto l00402213_thunk_fn00402219
	// succ:  l00402213_thunk_fn00402219 l00402213_thunk_fn00402C44
l00402205:
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	dh = dh + 0xB2
	SCZO = cond(dh)
	ah = ah - 0x3E - C
	SCZO = cond(ah)
	ah = ah + 0xEA + C
	SCZO = cond(ah)
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	branch Test(LT,SO) l00402C44
l00402213_thunk_fn00402219:
	call fn00402219 (retsize: 0;)
	return
	// succ:  fn00402205_exit l00402213_thunk_fn00402219
l00402213_thunk_fn00402219:
	call fn00402219 (retsize: 0;)
	return
	// succ:  fn00402205_exit
l00402213_thunk_fn00402C44:
	call fn00402C44 (retsize: 0;)
	return
	// succ:  fn00402205_exit
fn00402205_exit:


// fn00402219
// Return size: 0
void fn00402219()
fn00402219_entry:
	goto l00402219
	// succ:  l00402219
l00402217:
	v10 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v10
	SCZO = cond(v10)
	// succ:  l00402219 l00402217_thunk_fn00402C44
l00402217_thunk_fn00402C44:
	call fn00402C44 (retsize: 0;)
	return
	// succ:  fn00402219_exit
l00402219:
	v3 = ax
	ax = ax
	ax = v3
	branch Test(GE,SO) l00402C44
	goto l00402222
	// succ:  l00402222 l0040221C_thunk_fn00402C44
l0040221C_thunk_fn00402C44:
	call fn00402C44 (retsize: 0;)
	return
	// succ:  fn00402219_exit
l00402222:
	branch Test(GE,SO) l00402217
	// succ:  l00402224 l00402217
l00402224:
	__outdw(edx, eax)
	esi = esi + 0x00000004
	ebp = 0x7B90084B
	// succ:  l00402225_thunk_fn0040222A
l00402225_thunk_fn0040222A:
	call fn0040222A (retsize: 0;)
	return
	// succ:  fn00402219_exit
fn00402219_exit:


// fn0040222A
// Return size: 0
void fn0040222A()
fn0040222A_entry:
	// succ:  l0040222A
l0040222A:
	esp = fp
	Mem0[esp - 0x00000010:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi - ebx
	SCZO = cond(edi)
	bh = bh + cl
	SCZO = cond(bh)
	bh = bh | ah
	SZO = cond(bh)
	C = false
	esi = ebx
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	bl = ~bl
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi + eax
	SCZO = cond(esi)
	// succ:  l0040223D_thunk_fn00402144
l0040223D_thunk_fn00402144:
	call fn00402144 (retsize: 0;)
	return
	// succ:  fn0040222A_exit
fn0040222A_exit:


// fn00402262
// Return size: 0
void fn00402262()
fn00402262_entry:
	// succ:  l00402262
l00402262:
	esp = esp + 0x00000004
	esi = eax
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	bl = ah
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	edx = edx - ebx
	SCZO = cond(edx)
	call fn00402161 (retsize: 4;)
	// succ:  l4BCE_D837
l4BCE_D837:
fn00402262_exit:


// fn0040227D
// Return size: 0
void fn0040227D()
fn0040227D_entry:
	// succ:  l0040227D
l0040227D:
	esp = fp
	ecx = ebx
	ebx = edi
	cl = cl + 0x61
	SCZO = cond(cl)
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	eax = ecx
	al = al + 0x01
	SZO = cond(al)
	ebx = ebx + ecx
	SCZO = cond(ebx)
	eax = ecx
	goto l0040228E_thunk_fn004023C7
	// succ:  l0040228E_thunk_fn004023C7
l0040227D:
l0040228E_thunk_fn004023C7:
	call fn004023C7 (retsize: 0;)
	return
	// succ:  fn0040227D_exit
fn0040227D_exit:


// fn0040229A
// Return size: 0
void fn0040229A()
fn0040229A_entry:
	// succ:  l0040229A
l0040229A:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = ebx
	ebx = v3
	v5 = eax
	eax = eax
	eax = v5
	bh = bh
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	al = al ^ bl
	SZO = cond(al)
	C = false
	dh = dh ^ ch
	SZO = cond(dh)
	C = false
	al = al - 0x9F - C
	SCZO = cond(al)
	edx = edx + 0x00000001
	SZO = cond(edx)
	ah = ah ^ dl
	SZO = cond(ah)
	C = false
	al = al + cl
	SCZO = cond(al)
	dh = dh - al
	SCZO = cond(dh)
fn0040229A_exit:


// fn004022BD
// Return size: 0
void fn004022BD()
fn004022BD_entry:
	// succ:  l004022BD
l004022BD:
	esp = fp
	Mem0[esp - 0x0000000C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	dh = dh + 0xBB
	SCZO = cond(dh)
	dh = dh + cl
	SCZO = cond(dh)
	edi = edi - 0x00000001
	SZO = cond(edi)
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	edi = edi + 0x00000001
	SZO = cond(edi)
	ebx = ebx ^ ecx
	SZO = cond(ebx)
	C = false
	bl = ~bl
	bh = bh ^ al
	SZO = cond(bh)
	C = false
	branch Test(ULE,CZ) TMP!
fn004022BD_exit:


// fn0040230E
// Return size: 0
void fn0040230E()
fn0040230E_entry:
	// succ:  l0040230E
l0040230E:
	esp = fp
	cl = cl + ch
	SCZO = cond(cl)
	eax = eax ^ ecx
	SZO = cond(eax)
	C = false
	ch = ch - 0x01
	SZO = cond(ch)
	ch = ch + 0xE3 + C
	SCZO = cond(ch)
	cl = cl - 0x01
	SZO = cond(cl)
	bh = bh + dh
	SCZO = cond(bh)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ah = ah - ch
	SCZO = cond(ah)
	cl = cl - dl
	SCZO = cond(cl)
	call fn00402508 (retsize: 4;)
	__outdw(edx, eax)
	esi = esi + 0x00000004
	branch Test(GT,SZO) l00402326_thunk_fn0040237B
	goto l00402328
	// succ:  l00402328 l00402326_thunk_fn0040237B
l0040230E:
l00402326_thunk_fn0040237B:
	call fn0040237B (retsize: 0;)
	return
	// succ:  fn0040230E_exit
l00402328:
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = 0xB4CB2B09
	// succ:  l00402329_thunk_fn0040232E
l00402329_thunk_fn0040232E:
	call fn0040232E (retsize: 4;)
	return
	// succ:  fn0040230E_exit
fn0040230E_exit:


// fn0040232B
// Return size: 0
void fn0040232B()
fn0040232B_entry:
	// succ:  l0040232B
l0040232B:
	esp = fp
	ecx = ecx - ebx
	SCZO = cond(ecx)
	ah = 0xB2
	goto l0040232D_thunk_fn0040232E
	// succ:  l0040232D_thunk_fn0040232E
l0040232B:
l0040232D_thunk_fn0040232E:
	call fn0040232E (retsize: 4;)
	return
	// succ:  fn0040232B_exit
fn0040232B_exit:


// fn0040232E
// Return size: 4
void fn0040232E()
fn0040232E_entry:
	// succ:  l0040232E
l0040232E:
	esp = fp
	dl = 0xF6
	v4 = (Mem0[ebx:word32] & 0x00000001 << 0x01) != 0x00000000
	Mem0[ebx:word32] = __ror(Mem0[ebx:word32], 0x01)
	C = v4
	return
	// succ:  fn0040232E_exit
l0040232E:
	cl = ~cl
	eax = eax | edx
	SZO = cond(eax)
	C = false
	bh = ch
	eax = eax - 0x00000001
	SZO = cond(eax)
	ebx = eax
	eax = eax - ecx
	SCZO = cond(eax)
	call fn00402A21 (retsize: 4;)
	esp = esp + 0x00000006
	bh = bh - Mem0[ecx:byte]
	SCZO = cond(bh)
	esi = esi - 0x00000001
	SZO = cond(esi)
	__lock()
	// succ:  l00402342_thunk_fn00402343
l00402342_thunk_fn00402343:
	call fn00402343 (retsize: 0;)
	return
	// succ:  fn0040232E_exit
fn0040232E_exit:


// fn00402343
// Return size: 0
void fn00402343()
fn00402343_entry:
	// succ:  l00402343
l00402343:
	bh = bh - 0x10 - C
	SCZO = cond(bh)
	eax = eax | ebx
	SZO = cond(eax)
	C = false
	ecx = ecx + edi
	SCZO = cond(ecx)
	eax = eax - 0x00000001
	SZO = cond(eax)
	dl = dl + 0x01
	SZO = cond(dl)
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	ch = ch + 0xEB
	SCZO = cond(ch)
	goto l00402350
	// succ:  l00402350
l0040235C:
l00402953:
	bh = bh - 0xF7 - C
	SCZO = cond(bh)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000040
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	dl = dl + 0x4E
	SCZO = cond(dl)
	eax = edx
	bl = bl + 0xD7 + C
	SCZO = cond(bl)
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	cl = ~cl
	ah = ah ^ cl
	SZO = cond(ah)
	C = false
	eax = eax - edi
	SCZO = cond(eax)
	// succ:  l00402967_thunk_fn00402EE1
l00402967_thunk_fn00402EE1:
	call fn00402EE1 (retsize: 0;)
	return
	// succ:  fn00402343_exit
fn00402343_exit:


// fn0040236B
// Return size: 0
void fn0040236B()
fn0040236B_entry:
	// succ:  l0040236B
l0040236B:
	esp = fp
	Mem0[esp:word32] = ebx
	bh = bh
	v5 = ah
	ah = ah
	ah = v5
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi - ebx
	SCZO = cond(edi)
	esi = esi | edi
	SZO = cond(esi)
	C = false
	bl = bl | dl
	SZO = cond(bl)
	C = false
	edi = edi + 0x00000001
	SZO = cond(edi)
fn0040236B_exit:


// fn0040237B
// Return size: 0
void fn0040237B()
fn0040237B_entry:
	goto l0040237B
	// succ:  l0040237B
l0040237A_thunk_fn004027B4:
	call fn004027B4 (retsize: 0;)
	return
	// succ:  fn0040237B_exit
l0040237B:
	esp = fp
	eax = eax ^ 0xF4000004
	SZO = cond(eax)
	C = false
	ecx = ecx - 0x00000001
	branch Test(EQ,Z) && ecx != 0x00000000 TMP!
l0040237B:
	goto l0040237A_thunk_fn004027B4
	// succ:  l0040237A_thunk_fn004027B4
fn0040237B_exit:


// fn00402384
// Return size: 0
void fn00402384()
fn00402384_entry:
	// succ:  l00402384
l00402384:
	esp = esp + 0x00000004
	bh = bh - 0x01
	SZO = cond(bh)
	bh = ch
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	ebx = ecx
	ebx = ebx + edi
	SCZO = cond(ebx)
	bh = bh - 0xE6 - C
	SCZO = cond(bh)
	esi = esi - edx
	SCZO = cond(esi)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bh = bh + 0x1A
	SCZO = cond(bh)
	branch Test(LT,SO) l0040239C_thunk_fn00402CAE
	goto l004023A2
	// succ:  l004023A2 l0040239C_thunk_fn00402CAE
l0040239C_thunk_fn00402CAE:
	call fn00402CAE (retsize: 0;)
	return
	// succ:  fn00402384_exit
l004023A2:
fn00402384_exit:


// fn004023B0
// Return size: 0
void fn004023B0()
fn004023B0_entry:
	// succ:  l004023B0
l004023B0:
	esp = fp
	ah = ah + 0xE8
	SCZO = cond(ah)
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	Mem0[esi:byte] = cl
	bh = 0xF0
	bh = bh + 0x01
	SZO = cond(bh)
	al = dh
	call fn00402899 (retsize: 4;)
	v12 = (Mem0[edi:word32] & 0x00000001 << 0x20 - cl) != 0x00000000
	Mem0[edi:word32] = __rcl(Mem0[edi:word32], cl, C)
	C = v12
	v14 = Mem0[esi:byte]
	Mem0[edi:byte] = v14
	esi = esi + 0x00000001
	edi = edi + 0x00000001
	al = al >> cl
	SCZO = cond(al)
	goto l004023C5_thunk_fn004023C7
	// succ:  l004023C5_thunk_fn004023C7
l004023B0:
l004023C5_thunk_fn004023C7:
	call fn004023C7 (retsize: 0;)
	return
	// succ:  fn004023B0_exit
fn004023B0_exit:


// fn004023C7
// Return size: 0
void fn004023C7()
fn004023C7_entry:
	// succ:  l004023C7
l004023C7:
	esp = fp
	bl = bl + 0x01
	SZO = cond(bl)
	goto l004023C7_thunk_fn004023C9
	// succ:  l004023C7_thunk_fn004023C9
l004023C7:
l004023C7_thunk_fn004023C9:
	call fn004023C9 (retsize: 0;)
	return
	// succ:  fn004023C7_exit
l004023D4_thunk_fn004023DA:
	call fn004023DA (retsize: 0;)
	return
	// succ:  fn004023C7_exit l004023D4_thunk_fn004023DA
l004023D4_thunk_fn004023DA:
	call fn004023DA (retsize: 0;)
	return
	// succ:  fn004023C7_exit
l004023D4_thunk_fn00402AF8:
	call fn00402AF8 (retsize: 0;)
	return
	// succ:  fn004023C7_exit
fn004023C7_exit:


// fn004023C9
// Return size: 0
void fn004023C9()
fn004023C9_entry:
	// succ:  l004023C9
l004023C9:
	esp = fp
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	eax = edx
	ch = bl
	ebx = ebx + edi
	SCZO = cond(ebx)
	bh = bh + 0x01
	SZO = cond(bh)
	ebx = ebx ^ ecx
	SZO = cond(ebx)
	C = false
	branch Test(LT,SO) l004023D4_thunk_fn00402AF8
	// succ:  l004023D4_thunk_fn004023DA l004023D4_thunk_fn00402AF8 l004023D4_thunk_fn004023DA l004023D4_thunk_fn00402AF8
l004023C9:
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	eax = edx
	ch = bl
	ebx = ebx + edi
	SCZO = cond(ebx)
	bh = bh + 0x01
	SZO = cond(bh)
	ebx = ebx ^ ecx
	SZO = cond(ebx)
	C = false
	// succ:  l004023D3
l004023D3:
	branch Test(LT,SO) l004023D4_thunk_fn00402AF8
l004023D4_thunk_fn004023DA:
	call fn004023DA (retsize: 0;)
	return
	// succ:  fn004023C9_exit
l004023D4_thunk_fn00402AF8:
	call fn00402AF8 (retsize: 0;)
	return
	// succ:  fn004023C9_exit
l004023F3_thunk_fn00402CFA:
	call fn00402CFA (retsize: 0;)
	return
	// succ:  fn004023C9_exit
fn004023C9_exit:


// fn004023DA
// Return size: 0
void fn004023DA()
fn004023DA_entry:
	// succ:  l004023DA
l004023DA:
	branch Test(PE,P) l004023DC
	// succ:  l004023DC
l004023DC:
	branch Test(GE,SO) l004023DC_thunk_fn00402AF8
	goto l004023E2
	// succ:  l004023E2 l004023DC_thunk_fn00402AF8
l004023DC_thunk_fn00402AF8:
	call fn00402AF8 (retsize: 0;)
	return
	// succ:  fn004023DA_exit
l004023E2:
	ebp = ebp + 0x00000001
	SZO = cond(ebp)
	eax = eax - 0x4B9A0CEF - C
	SCZO = cond(eax)
	// succ:  l004023E3_thunk_fn004023E8
l004023E3_thunk_fn004023E8:
	call fn004023E8 (retsize: 0;)
	return
	// succ:  fn004023DA_exit
fn004023DA_exit:


// fn004023E8
// Return size: 0
void fn004023E8()
fn004023E8_entry:
	// succ:  l004023E8
l004023E8:
	esp = fp
	ah = ah - 0x01
	SZO = cond(ah)
	ah = ah | cl
	SZO = cond(ah)
	C = false
	ah = 0xB5
	bl = bl ^ al
	SZO = cond(bl)
	C = false
	cl = ch
	eax = eax + 0x00000001
	SZO = cond(eax)
	// succ:  l004023F3_thunk_fn00402CFA l004023F3_thunk_fn00402CFA
l004023E8:
	ah = ah - 0x01
	SZO = cond(ah)
	ah = ah | cl
	SZO = cond(ah)
	C = false
	ah = 0xB5
	bl = bl ^ al
	SZO = cond(bl)
	C = false
	cl = ch
	eax = eax + 0x00000001
	SZO = cond(eax)
l004023F3_thunk_fn00402CFA:
	call fn00402CFA (retsize: 0;)
	return
	// succ:  fn004023E8_exit
fn004023E8_exit:


// fn004023FD
// Return size: 0
void fn004023FD()
fn004023FD_entry:
	// succ:  l004023FD
l004023FD:
	esp = fp
	esp = esp + 0x00000004
	bh = bh ^ al
	SZO = cond(bh)
	C = false
	ebx = eax
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	dl = dl | dh
	SZO = cond(dl)
	C = false
	// succ:  l0040240C_thunk_fn00402BAD
l0040240C_thunk_fn00402BAD:
	call fn00402BAD (retsize: 0;)
	return
	// succ:  fn004023FD_exit
fn004023FD_exit:


// fn00402431
// Return size: 0
void fn00402431()
fn00402431_entry:
	// succ:  l00402431
l00402431:
	esp = fp
	Mem0[esp - 0x0000000C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00402431_thunk_fn00402434
l00402431_thunk_fn00402434:
	call fn00402434 (retsize: 0;)
	return
	// succ:  fn00402431_exit
fn00402431_exit:


// fn00402434
// Return size: 0
void fn00402434()
fn00402434_entry:
	// succ:  l00402434
l00402434:
	esp = fp
	__hlt()
l00402434:
	bh = dh
	bh = bh ^ cl
	SZO = cond(bh)
	C = false
	eax = ~eax
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	bl = bl + 0x98
	SCZO = cond(bl)
	edi = edi | edx
	SZO = cond(edi)
	C = false
	bl = bl - dh
	SCZO = cond(bl)
	// succ:  l00402972
l00402972:
	edi = ecx
	ebx = ebx - ecx
	SCZO = cond(ebx)
	bh = bh - 0xFE - C
	SCZO = cond(bh)
	bl = 0x5A
	bl = bl + ch
	SCZO = cond(bl)
	bh = bh - 0x01
	SZO = cond(bh)
	eax = eax | eax
	SZO = cond(eax)
	C = false
	branch Test(NE,Z) l00402981_thunk_fn004025FA
	goto l00402987
	// succ:  l00402987 l00402981_thunk_fn004025FA
l00402981_thunk_fn004025FA:
	call fn004025FA (retsize: 0;)
	return
	// succ:  fn00402434_exit
l00402987:
	ebx = edi
	branch Test(ULT,C) l00402989_thunk_fn00402A89
	goto l0040298F
	// succ:  l0040298F l00402989_thunk_fn00402A89
l00402989_thunk_fn00402A89:
	call fn00402A89 (retsize: 0;)
	return
	// succ:  fn00402434_exit
l0040298F:
	ch = ch
fn00402434_exit:


// fn0040244E
// Return size: 0
void fn0040244E()
fn0040244E_entry:
	goto l0040244E
	// succ:  l0040244E
l0040212A:
	bl = bl + dl
	SCZO = cond(bl)
	bl = bl | dh
	SZO = cond(bl)
	C = false
	bl = bl - 0x60 - C
	SCZO = cond(bl)
	bh = bh + 0xA8
	SCZO = cond(bh)
	bh = bh | cl
	SZO = cond(bh)
	C = false
	bl = 0x51
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bl = bl | ah
	SZO = cond(bl)
	C = false
	call fn004021E0 (retsize: 4;)
	eax = eax & 0x8028398A
	SZO = cond(eax)
	C = false
	// succ:  l00402140_thunk_fn00402145
l00402140_thunk_fn00402145:
	call fn00402145 (retsize: 4;)
	return
	// succ:  fn0040244E_exit
l0040244E:
	esp = fp
	eax = eax + ebx
	SCZO = cond(eax)
	ah = ah - bl
	SCZO = cond(ah)
	bl = bl + 0xAE
	SCZO = cond(bl)
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	bl = bl ^ ah
	SZO = cond(bl)
	C = false
	bh = dh
	ebx = ebx | edx
	SZO = cond(ebx)
	C = false
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	ebx = ebx - esi
	SCZO = cond(ebx)
	eax = eax + 0x00000001
	SZO = cond(eax)
	goto l00402E78
	// succ:  l00402E78
l0040244E:
l00402E78:
	ah = ah + 0x30 + C
	SCZO = cond(ah)
	eax = edx
	ebx = ebx + ecx
	SCZO = cond(ebx)
	bl = bl - 0x99 - C
	SCZO = cond(bl)
	bh = ~bh
	bl = bl + 0x86
	SCZO = cond(bl)
	bl = bl + 0x37 + C
	SCZO = cond(bl)
	ebx = ebx | edx
	SZO = cond(ebx)
	C = false
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	branch Test(LT,SO) l0040212A
	// succ:  l00402E94 l0040212A
l00402E94:
	ax = ax
	esi = esi
	branch Test(GE,SO) l0040212A
	// succ:  l00402E9F l0040212A
l00402E9F:
	Mem0[eax + 0xA0027F29:byte] = dh
	// succ:  l00402E9F_thunk_fn00402EA6
l00402E9F_thunk_fn00402EA6:
	call fn00402EA6 (retsize: 0;)
	return
	// succ:  fn0040244E_exit
fn0040244E_exit:


// fn0040246B
// Return size: 0
void fn0040246B()
fn0040246B_entry:
	// succ:  l0040246B
l0040246B:
	esp = fp
	Mem0[esp:word32] = ebx
fn0040246B_exit:


// fn00402488
// Return size: 0
void fn00402488()
fn00402488_entry:
	// succ:  l00402488
l00402488:
	esp = fp
	ah = ~ah
	ah = -ah
	SCZO = cond(ah)
	C = ah == 0x00
	ch = ch - 0x8E
	SCZO = cond(ch)
	bh = ~bh
	bh = bh + 0xBF
	SCZO = cond(bh)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	eax = eax ^ edi
	SZO = cond(eax)
	C = false
	bh = bh - 0x01
	SZO = cond(bh)
	ebx = eax
	al = al | dh
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l0040249D_thunk_fn004023E8
	goto l004024A3
	// succ:  l004024A3 l0040249D_thunk_fn004023E8
l00402488:
l0040249D_thunk_fn004023E8:
	call fn004023E8 (retsize: 0;)
	return
	// succ:  fn00402488_exit
l004024A3:
	v15 = edx
	edx = edx
	edx = v15
	v17 = cx
	cx = cx
	cx = v17
	branch Test(NE,Z) l004024A8_thunk_fn004023E8
	goto l004024AE
	// succ:  l004024AE l004024A8_thunk_fn004023E8
l004024A8_thunk_fn004023E8:
	call fn004023E8 (retsize: 0;)
	return
	// succ:  fn00402488_exit
l004024AE:
	__outdw(edx, eax)
	esi = esi + 0x00000004
	eax = __indw(0x4A)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	__cli()
	eax = (int32) ax
	Mem0[0x0424648D:byte] = al
	// succ:  l004024B5_thunk_fn004024BA
l004024B5_thunk_fn004024BA:
	call fn004024BA (retsize: 0;)
	return
	// succ:  fn00402488_exit
fn00402488_exit:


// fn004024B6
// Return size: 0
void fn004024B6()
fn004024B6_entry:
	// succ:  l004024B6
l004024B6:
	esp = esp + 0x00000004
	// succ:  l004024B6_thunk_fn004024BA
l004024B6_thunk_fn004024BA:
	call fn004024BA (retsize: 0;)
	return
	// succ:  fn004024B6_exit
fn004024B6_exit:


// fn004024BA
// Return size: 0
void fn004024BA()
fn004024BA_entry:
	// succ:  l004024BA
l004024BA:
	esp = fp
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	bh = bh - dh
	SCZO = cond(bh)
	ch = ~ch
	ch = ~ch
	bh = bh - 0x0E - C
	SCZO = cond(bh)
	edi = edi | ecx
	SZO = cond(edi)
	C = false
	ah = ah - cl
	SCZO = cond(ah)
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
	branch Test(EQ,Z) l004024CA_thunk_fn00402029
	goto l004024CA_thunk_fn004024D0
	// succ:  l004024CA_thunk_fn004024D0 l004024CA_thunk_fn00402029
l004024BA:
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	bh = bh - dh
	SCZO = cond(bh)
	ch = ~ch
	ch = ~ch
	bh = bh - 0x0E - C
	SCZO = cond(bh)
	edi = edi | ecx
	SZO = cond(edi)
	C = false
	ah = ah - cl
	SCZO = cond(ah)
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
	branch Test(EQ,Z) l004024CA_thunk_fn00402029
	goto l004024CA_thunk_fn004024D0
	// succ:  l004024CA_thunk_fn004024D0 l004024CA_thunk_fn00402029
l004024CA_thunk_fn00402029:
	call fn00402029 (retsize: 0;)
	return
	// succ:  fn004024BA_exit
l004024CA_thunk_fn00402029:
	call fn00402029 (retsize: 0;)
	return
	// succ:  fn004024BA_exit
l004024CA_thunk_fn004024D0:
	call fn004024D0 (retsize: 0;)
	return
	// succ:  fn004024BA_exit l004024CA_thunk_fn004024D0
l004024CA_thunk_fn004024D0:
	call fn004024D0 (retsize: 0;)
	return
	// succ:  fn004024BA_exit
l004024CA_thunk_fn004024D0:
	call fn004024D0 (retsize: 0;)
	return
	// succ:  fn004024BA_exit
fn004024BA_exit:


// fn004024D0
// Return size: 0
void fn004024D0()
fn004024D0_entry:
	// succ:  l004024D0
l004024D0:
fn004024D0_exit:


// fn004024DE
// Return size: 0
void fn004024DE()
fn004024DE_entry:
	goto l004024DE
	// succ:  l004024DE
l0040210B:
	edi = edi + edx
	SCZO = cond(edi)
	esi = esi + edx
	SCZO = cond(esi)
	cl = cl ^ ah
	SZO = cond(cl)
	C = false
	dh = dh + 0x2D
	SCZO = cond(dh)
	bl = bl + 0x01
	SZO = cond(bl)
	dl = dl + dh
	SCZO = cond(dl)
	dl = dl + 0x85
	SCZO = cond(dl)
	edi = edi + ebx
	SCZO = cond(edi)
	goto l00402554
	// succ:  l00402554
l004024DE:
	esp = fp
	esp = esp + 0x00000004
	cl = cl + 0xB6 + C
	SCZO = cond(cl)
	edx = edx ^ ecx
	SZO = cond(edx)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	edi = edi + edx
	SCZO = cond(edi)
	edi = edi | ecx
	SZO = cond(edi)
	C = false
	branch Test(OV,O) l0040210B
	// succ:  l004024F4 l0040210B
l004024F4:
	v11 = dl
	dl = dl
	dl = v11
	// succ:  l004024FC
l004024FC:
	branch Test(NO,O) l0040210B
	// succ:  l00402502 l0040210B
l00402502:
	v18 = (Mem0[esp - 0x0000002C + ebx:word32] & 0x00000001 << 0xD7) != 0x00000000
	Mem0[esp - 0x0000002C + ebx:word32] = __ror(Mem0[esp - 0x0000002C + ebx:word32], 0xD7)
	C = v18
	cl = cl | Mem0[edi + 0x2AD42444:byte]
	SZO = cond(cl)
	C = false
	// succ:  l00402507_thunk_fn0040250D
l00402507_thunk_fn0040250D:
	call fn0040250D (retsize: 0;)
	return
	// succ:  fn004024DE_exit
l00402554:
	edi = edi + ebx
	SCZO = cond(edi)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	dl = ~dl
	call eax (retsize: 4;)
	dh = ch
	esi = esi - edx
	SCZO = cond(esi)
	dl = dl + dh
	SCZO = cond(dl)
	bh = bh + 0x01
	SZO = cond(bh)
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	call fn004022BD (retsize: 4;)
	al = al + 0xAE
	SCZO = cond(al)
	Z = __arpl(Mem0[eax - 0x00000006:word16], bx, &Mem0[eax - 0x00000006:word16])
	// succ:  l0040256C_thunk_fn0040256F
l0040256C_thunk_fn0040256F:
	call fn0040256F (retsize: 0;)
	return
	// succ:  fn004024DE_exit
l0040256F_thunk_fn004023C9:
	call fn004023C9 (retsize: 0;)
	return
	// succ:  fn004024DE_exit
l0040256F_thunk_fn00402575:
	call fn00402575 (retsize: 0;)
	return
	// succ:  fn004024DE_exit l0040256F_thunk_fn00402575
l0040256F_thunk_fn00402575:
	call fn00402575 (retsize: 0;)
	return
	// succ:  fn004024DE_exit
fn004024DE_exit:


// fn00402508
// Return size: 0
void fn00402508()
fn00402508_entry:
	// succ:  l00402508
l00402508:
	esp = fp
	Mem0[esp - 0x0000002C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	dl = dl - bl
	SCZO = cond(dl)
	// succ:  l0040250C_thunk_fn0040250D
l0040250C_thunk_fn0040250D:
	call fn0040250D (retsize: 0;)
	return
	// succ:  fn00402508_exit
fn00402508_exit:


// fn0040250D
// Return size: 0
void fn0040250D()
fn0040250D_entry:
	// succ:  l0040250D
l0040250D:
	esp = fp
	v4 = (Mem0[edx:word32] & 0x00000001 << cl) != 0x00000000
	Mem0[edx:word32] = __ror(Mem0[edx:word32], cl)
	C = v4
	rLoc1 = (real64) Mem0[eax + 0xDC80FCC3:int16]
	eax = eax & 0x00C2C681
	SZO = cond(eax)
	C = false
	v11 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v11
	SCZO = cond(v11)
	ecx = ecx ^ esi
	SZO = cond(ecx)
	C = false
	edx = ebx
	bh = bh ^ al
	SZO = cond(bh)
	C = false
	bl = bl | cl
	SZO = cond(bl)
	C = false
	call fn00402D9F (retsize: 4; FPU: 1;)
	Mem0[0xCE1372AC:byte] = al
	eax = 0xDF801CE9
	SCZO = cond(eax - Mem0[edi:word32])
	edi = edi + 0x00000004
	ah = ah ^ dl
	SZO = cond(ah)
	C = false
	ah = ah + 0x79
	SCZO = cond(ah)
	eax = eax - edi
	SCZO = cond(eax)
	bl = 0x2F
	ch = ch + 0x90
	SCZO = cond(ch)
	ah = ah | dh
	SZO = cond(ah)
	C = false
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	ebx = ebx - edi
	SCZO = cond(ebx)
	bl = bl + 0x01
	SZO = cond(bl)
	goto l00402548_thunk_fn00402C23
	// succ:  l00402548_thunk_fn00402C23
l0040250D:
	bl = bl | bh
	SZO = cond(bl)
	C = false
	bl = bl + 0xFC
	SCZO = cond(bl)
	ah = ah - 0x25 - C
	SCZO = cond(ah)
	esi = esi + 0x000000C2
	SCZO = cond(esi)
	ecx = ecx ^ esi
	SZO = cond(ecx)
	C = false
	edx = ebx
	bh = bh ^ al
	SZO = cond(bh)
	C = false
	bl = bl | cl
	SZO = cond(bl)
	C = false
	call fn00402D9F (retsize: 4;)
	Mem0[0xCE1372AC:byte] = al
	eax = 0xDF801CE9
	SCZO = cond(eax - Mem0[edi:word32])
	edi = edi + 0x00000004
	ah = ah ^ dl
	SZO = cond(ah)
	C = false
	ah = ah + 0x79
	SCZO = cond(ah)
	eax = eax - edi
	SCZO = cond(eax)
	bl = 0x2F
	ch = ch + 0x90
	SCZO = cond(ch)
	ah = ah | dh
	SZO = cond(ah)
	C = false
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	ebx = ebx - edi
	SCZO = cond(ebx)
	bl = bl + 0x01
	SZO = cond(bl)
	// succ:  l00402545_thunk_fn00402C23
l00402545_thunk_fn00402C23:
	call fn00402C23 (retsize: 0;)
	return
	// succ:  fn0040250D_exit
l00402548_thunk_fn00402C23:
	call fn00402C23 (retsize: 0;)
	return
	// succ:  fn0040250D_exit
fn0040250D_exit:


// fn0040256F
// Return size: 0
void fn0040256F()
fn0040256F_entry:
	// succ:  l0040256F
l0040256F:
	esp = fp
	branch Test(NE,Z) l0040256F_thunk_fn004023C9
	// succ:  l0040256F_thunk_fn00402575 l0040256F_thunk_fn004023C9 l0040256F_thunk_fn00402575 l0040256F_thunk_fn004023C9
l0040256F:
	branch Test(NE,Z) l0040256F_thunk_fn004023C9
l0040256F_thunk_fn004023C9:
	call fn004023C9 (retsize: 0;)
	return
	// succ:  fn0040256F_exit
l0040256F_thunk_fn00402575:
	call fn00402575 (retsize: 0;)
	return
	// succ:  fn0040256F_exit
fn0040256F_exit:


// fn00402575
// Return size: 0
void fn00402575()
fn00402575_entry:
	// succ:  l00402575
l00402575:
	esi = esi + 0x00000001
	SZO = cond(esi)
	edx = edx - edi
	SCZO = cond(edx)
	ch = ch - 0x49 - C
	SCZO = cond(ch)
	edi = edi + 0x00000001
	SZO = cond(edi)
	dh = dh + dl
	SCZO = cond(dh)
	ecx = ecx - edx
	SCZO = cond(ecx)
fn00402575_exit:


// fn0040258D
// Return size: 0
void fn0040258D()
fn0040258D_entry:
	// succ:  l0040258D
l0040258D:
	esp = fp
	ebx = edx
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	ch = ch - cl
	SCZO = cond(ch)
	ch = ch - dl
	SCZO = cond(ch)
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	ebx = ebx - eax
	SCZO = cond(ebx)
	ecx = ecx | ebx
	SZO = cond(ecx)
	C = false
	ah = dh
	bh = bl
	al = al - 0x9B - C
	SCZO = cond(al)
	goto l004025A2_thunk_fn0040230E
	// succ:  l004025A2_thunk_fn0040230E
l0040258D:
l004025A2_thunk_fn0040230E:
	call fn0040230E (retsize: 0;)
	return
	// succ:  fn0040258D_exit
fn0040258D_exit:


// fn004025CA
// Return size: 0
void fn004025CA()
fn004025CA_entry:
	// succ:  l004025CA
l004025CA:
	esp = fp
	esp = esp + 0x00000004
	ebx = eax
	ebx = ebx | edx
	SZO = cond(ebx)
	C = false
	bh = 0x14
	bh = bh + 0xE5
	SCZO = cond(bh)
	ebx = ebx - edi
	SCZO = cond(ebx)
	// succ:  l004025D7_thunk_fn004025D8
l004025D7_thunk_fn004025D8:
	call fn004025D8 (retsize: 0;)
	return
	// succ:  fn004025CA_exit
fn004025CA_exit:


// fn004025D8
// Return size: 0
void fn004025D8()
fn004025D8_entry:
	// succ:  l004025D8
l004025D8:
	esp = fp
	rLoc1 = (real64) Mem0[eax + 0xF80AADD3:int16]
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bl = 0x6B
	call fn00402D19 (retsize: 4; FPU: 1;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = cs
	eax = eax - 0xF83CE9EC - C
	SCZO = cond(eax)
	goto l004025E9_thunk_fn004025EE
	// succ:  l004025E9_thunk_fn004025EE
l004025D8:
	bl = bl + 0xAD + C
	SCZO = cond(bl)
	bh = bh | al
	SZO = cond(bh)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bl = 0x6B
	call fn00402D19 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = cs
	eax = eax - 0xF83CE9EC - C
	SCZO = cond(eax)
	goto l004025E9_thunk_fn004025EE
	// succ:  l004025E9_thunk_fn004025EE
l004025E9_thunk_fn004025EE:
	call fn004025EE (retsize: 0;)
	return
	// succ:  fn004025D8_exit
l004025E9_thunk_fn004025EE:
	call fn004025EE (retsize: 0;)
	return
	// succ:  fn004025D8_exit
fn004025D8_exit:


// fn004025EE
// Return size: 0
void fn004025EE()
fn004025EE_entry:
	// succ:  l004025EE
l004025EE:
	esp = fp
	esp = esp + 0x00000004
	bl = bl + 0x56
	SCZO = cond(bl)
	ah = ah + 0x80 + C
	SCZO = cond(ah)
	esi = edi
	// succ:  l004025F8_thunk_fn004025FA
l004025F8_thunk_fn004025FA:
	call fn004025FA (retsize: 0;)
	return
	// succ:  fn004025EE_exit
fn004025EE_exit:


// fn004025FA
// Return size: 0
void fn004025FA()
fn004025FA_entry:
	// succ:  l004025FA
l004025FA:
	esp = fp
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	dh = dh - 0x01
	SZO = cond(dh)
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	dl = ~dl
	goto l00402601_thunk_fn00402E37
	// succ:  l00402601_thunk_fn00402E37
l004025FA:
l00402601_thunk_fn00402E37:
	call fn00402E37 (retsize: 0;)
	return
	// succ:  fn004025FA_exit
fn004025FA_exit:


// fn00402632
// Return size: 0
void fn00402632()
fn00402632_entry:
	// succ:  l00402632
l00402632:
	edx = (word32) al
	esi = esi - 0x00000001
	SZO = cond(esi)
	bh = ~bh
	bh = bh + 0xA0
	SCZO = cond(bh)
	bh = bh ^ bl
	SZO = cond(bh)
	C = false
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	// succ:  l00402641_thunk_fn00402D76
l00402641_thunk_fn00402D76:
	call fn00402D76 (retsize: 0;)
	return
	// succ:  fn00402632_exit
fn00402632_exit:


// fn0040264A
// Return size: 0
void fn0040264A()
fn0040264A_entry:
	// succ:  l0040264A
l0040264A:
	cl = 0x84
	bh = 0x4F
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edx = edx - 0x00000001
	SZO = cond(edx)
	bl = bl ^ bh
	SZO = cond(bl)
	C = false
	edx = edx + eax
	SCZO = cond(edx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	// succ:  l00402658_thunk_fn0040232B
l00402658_thunk_fn0040232B:
	call fn0040232B (retsize: 0;)
	return
	// succ:  fn0040264A_exit
fn0040264A_exit:


// fn00402661
// Return size: 0
void fn00402661()
fn00402661_entry:
	// succ:  l00402661
l00402661:
	esp = fp
	bh = bh ^ dl
	SZO = cond(bh)
	C = false
	esi = esi + ebx
	SCZO = cond(esi)
	ebx = ebx + eax
	SCZO = cond(ebx)
	esi = esi + edi
	SCZO = cond(esi)
	bl = bl ^ dh
	SZO = cond(bl)
	C = false
	bh = bh - 0x01
	SZO = cond(bh)
	branch Test(ULE,CZ) l0040266D_thunk_fn004028CC
	goto l00402673
	// succ:  l00402673 l0040266D_thunk_fn004028CC
l00402661:
l0040266D_thunk_fn004028CC:
	call fn004028CC (retsize: 0;)
	return
	// succ:  fn00402661_exit
l00402673:
	v15 = bh
	bh = bh
	bh = v15
	branch Test(UGT,CZ) l00402675_thunk_fn004028CC
	goto l0040267B
	// succ:  l0040267B l00402675_thunk_fn004028CC
l00402675_thunk_fn004028CC:
	call fn004028CC (retsize: 0;)
	return
	// succ:  fn00402661_exit
l0040267B:
	ebx = 0xCC466273
	dh = 0x0B
	return
	// succ:  fn00402661_exit
fn00402661_exit:


// fn004026BE
// Return size: 0
void fn004026BE()
fn004026BE_entry:
	// succ:  l004026BE
l004026BE:
	esp = fp
	esp = esp + 0x00000004
	ebx = ebx + edi
	SCZO = cond(ebx)
	cl = cl - 0xF0 - C
	SCZO = cond(cl)
	ch = 0xF6
	ch = ch - 0x01
	SZO = cond(ch)
	ecx = ecx | esi
	SZO = cond(ecx)
	C = false
	al = al + ah
	SCZO = cond(al)
	ch = ch + 0x01
	SZO = cond(ch)
	ebx = ebx ^ ecx
	SZO = cond(ebx)
	C = false
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	// succ:  l004026D5_thunk_fn00402A5F
l004026D5_thunk_fn00402A5F:
	call fn00402A5F (retsize: 0;)
	return
	// succ:  fn004026BE_exit
fn004026BE_exit:


// fn00402704
// Return size: 4
void fn00402704()
fn00402704_entry:
	// succ:  l00402704
l00402704:
	esp = fp
	return
	// succ:  fn00402704_exit
l00402704:
	ebx = ecx
	bh = ah
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bh = 0x64
	esi = esi - edx
	SCZO = cond(esi)
	bl = 0x94
	call fn00402080 (retsize: 4;)
	eax = eax + 0x43F188B5
	SCZO = cond(eax)
	// succ:  l00402716_thunk_fn0040271B
l00402716_thunk_fn0040271B:
	call fn0040271B (retsize: 0;)
	return
	// succ:  fn00402704_exit
fn00402704_exit:


// fn0040271A
// Return size: 0
void fn0040271A()
fn0040271A_entry:
	// succ:  l0040271A
l0040271A:
	esp = fp
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	goto l0040271A_thunk_fn0040271B
	// succ:  l0040271A_thunk_fn0040271B
l0040271A:
l0040271A_thunk_fn0040271B:
	call fn0040271B (retsize: 0;)
	return
	// succ:  fn0040271A_exit
fn0040271A_exit:


// fn0040271B
// Return size: 0
void fn0040271B()
fn0040271B_entry:
	// succ:  l0040271B
l0040271B:
	esp = fp
	bh = bh - 0x01
	SZO = cond(bh)
	bl = bl + 0x01
	SZO = cond(bl)
	bh = bh - cl
	SCZO = cond(bh)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	edi = edi + edx
	SCZO = cond(edi)
	bl = 0x3F
	call fn0040276C (retsize: 4;)
	rArg0 = rArg0 * (real64) Mem0[edi + 0xCC2A9EA9:word32]
	edx = edx + 0x00000000
	SCZO = cond(edx)
	cl = 0xF4
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	bl = bl - ah
	SCZO = cond(bl)
	bl = bl - 0x01
	SZO = cond(bl)
	ebx = ebx + edi
	SCZO = cond(ebx)
	call fn004020D8 (retsize: 4;)
	esp = esp + 0xFFFFFFFA
	cl = cl & bh
	SZO = cond(cl)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	branch Test(SG,S) l0040274D_thunk_fn0040275A
	goto l0040274D_thunk_fn0040274F
	// succ:  l0040274D_thunk_fn0040274F l0040274D_thunk_fn0040275A
l0040271B:
	bh = bh - 0x01
	SZO = cond(bh)
	bl = bl + 0x01
	SZO = cond(bl)
	bh = bh - cl
	SCZO = cond(bh)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	edi = edi + edx
	SCZO = cond(edi)
	bl = 0x3F
	call fn0040276C (retsize: 4;)
	rArg0 = rArg0 * (real64) Mem0[edi + 0xCC2A9EA9:word32]
	edx = edx + 0x00000000
	SCZO = cond(edx)
	cl = 0xF4
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	bl = bl - ah
	SCZO = cond(bl)
	bl = bl - 0x01
	SZO = cond(bl)
	ebx = ebx + edi
	SCZO = cond(ebx)
	call fn004020D8 (retsize: 4;)
	esp = esp + 0xFFFFFFFA
	cl = cl & bh
	SZO = cond(cl)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	branch Test(SG,S) l0040274D_thunk_fn0040275A
	goto l0040274D_thunk_fn0040274F
	// succ:  l0040274D_thunk_fn0040274F l0040274D_thunk_fn0040275A
l0040274D_thunk_fn0040274F:
	call fn0040274F (retsize: 0;)
	return
	// succ:  fn0040271B_exit l0040274D_thunk_fn0040274F
l0040274D_thunk_fn0040274F:
	call fn0040274F (retsize: 0;)
	return
	// succ:  fn0040271B_exit
l0040274D_thunk_fn0040274F:
	call fn0040274F (retsize: 0;)
	return
	// succ:  fn0040271B_exit l0040274D_thunk_fn0040274F
l0040274D_thunk_fn0040274F:
	call fn0040274F (retsize: 0;)
	return
	// succ:  fn0040271B_exit
l0040274D_thunk_fn0040275A:
	call fn0040275A (retsize: 0;)
	return
	// succ:  fn0040271B_exit
l0040274D_thunk_fn0040275A:
	call fn0040275A (retsize: 0;)
	return
	// succ:  fn0040271B_exit
fn0040271B_exit:


// fn0040274E
// Return size: 0
void fn0040274E()
fn0040274E_entry:
	// succ:  l0040274E
l0040274E:
	esp = fp
	edi = edi | eax
	SZO = cond(edi)
	C = false
	goto l0040274E_thunk_fn0040274F
	// succ:  l0040274E_thunk_fn0040274F
l0040274E:
l0040274E_thunk_fn0040274F:
	call fn0040274F (retsize: 0;)
	return
	// succ:  fn0040274E_exit
fn0040274E_exit:


// fn0040274F
// Return size: 0
void fn0040274F()
fn0040274F_entry:
	// succ:  l0040274F
l0040274F:
	esp = fp
	C = false
	bl = bl | dl
	SZO = cond(bl)
	C = false
	bl = bl + bh
	SCZO = cond(bl)
	edi = ecx
	bl = bl ^ dl
	SZO = cond(bl)
	C = false
	ebx = ebx - edx
	SCZO = cond(ebx)
	goto l00402758_thunk_fn0040275A
	// succ:  l00402758_thunk_fn0040275A
l0040274F:
	bl = bl | dl
	SZO = cond(bl)
	C = false
	bl = bl + bh
	SCZO = cond(bl)
	edi = ecx
	bl = bl ^ dl
	SZO = cond(bl)
	C = false
	ebx = ebx - edx
	SCZO = cond(ebx)
	// succ:  l00402757_thunk_fn0040275A
l00402757_thunk_fn0040275A:
	call fn0040275A (retsize: 0;)
	return
	// succ:  fn0040274F_exit
l00402758_thunk_fn0040275A:
	call fn0040275A (retsize: 0;)
	return
	// succ:  fn0040274F_exit
fn0040274F_exit:


// fn0040275A
// Return size: 0
void fn0040275A()
fn0040275A_entry:
	// succ:  l0040275A
l0040275A:
	esp = fp
	bh = bh ^ bl
	SZO = cond(bh)
	C = false
	bl = bl | ah
	SZO = cond(bl)
	C = false
	bh = bh - 0x01
	SZO = cond(bh)
	esi = esi | eax
	SZO = cond(esi)
	C = false
	call fn00402431 (retsize: 4;)
	goto l00402762_thunk_fn00402767
	// succ:  l00402762_thunk_fn00402767
l0040275A:
	bh = bh ^ bl
	SZO = cond(bh)
	C = false
	bl = bl | ah
	SZO = cond(bl)
	C = false
	bh = bh - 0x01
	SZO = cond(bh)
	esi = esi | eax
	SZO = cond(esi)
	C = false
	call fn00402431 (retsize: 4;)
	goto l00402762_thunk_fn00402767
	// succ:  l00402762_thunk_fn00402767
l00402762_thunk_fn00402767:
	call fn00402767 (retsize: 0;)
	return
	// succ:  fn0040275A_exit
l00402762_thunk_fn00402767:
	call fn00402767 (retsize: 0;)
	return
	// succ:  fn0040275A_exit
fn0040275A_exit:


// fn00402767
// Return size: 0
void fn00402767()
fn00402767_entry:
	// succ:  l00402767
l00402767:
	branch ecx == 0x00000000 l00402769
	// succ:  l00402767_1 l00402769
l00402767_1:
	SCZO = cond(Mem0[esi:byte] - Mem0[edi:byte])
	esi = esi + 0x00000001
	edi = edi + 0x00000001
	ecx = ecx - 0x00000001
	branch Test(NE,Z) l00402767
	// succ:  l00402769 l00402767
l00402769:
	v9 = Mem0[ebp - 0x0000007A:byte] + bl
	Mem0[ebp - 0x0000007A:byte] = v9
	SCZO = cond(v9)
	// succ:  l00402769_thunk_fn0040276C
l00402769_thunk_fn0040276C:
	call fn0040276C (retsize: 0;)
	return
	// succ:  fn00402767_exit
fn00402767_exit:


// fn0040276C
// Return size: 0
void fn0040276C()
fn0040276C_entry:
	// succ:  l0040276C
l0040276C:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = ecx
	ecx = v3
	branch Test(LT,SO) l00402771
	// succ:  l00402771
l00402771:
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax + 0x00000078
	bl = cl
	bh = bh + 0x4B + C
	SCZO = cond(bh)
	bl = bl ^ cl
	SZO = cond(bl)
	C = false
	bh = ch
	call fn0040236B (retsize: 4;)
	v15 = Mem0[edi:byte] >>u 0x2E
	Mem0[edi:byte] = v15
	SCZO = cond(v15)
	esp = esp - 0x00000004
	Mem0[esp:word32] = es
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[eax + 0x00000010:word32]
	bh = bh + 0xA1 + C
	SCZO = cond(bh)
	bh = bh + al
	SCZO = cond(bh)
	bh = bh + 0x8F + C
	SCZO = cond(bh)
	bl = ~bl
	bl = bl + 0x61
	SCZO = cond(bl)
	bh = bh - 0xAB - C
	SCZO = cond(bh)
	branch Test(PE,P) l004029D3
	// succ:  l004027A1 l004029D3
l004027A1:
	// succ:  l004027A7
l004027A7:
	branch Test(PO,P) l004029D3
	// succ:  l004027AD l004029D3
l004027AD:
	edx_eax = (int64) eax
	bl = bl + Mem0[esi + 0x31532F32:byte] + C
	SCZO = cond(bl)
	// succ:  l004027AE_thunk_fn004027B4
l004027AE_thunk_fn004027B4:
	call fn004027B4 (retsize: 0;)
	return
	// succ:  fn0040276C_exit
l004029D3:
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	edi = edi | eax
	SZO = cond(edi)
	C = false
	esi = esi + edx
	SCZO = cond(esi)
	esi = edx
	esi = esi | eax
	SZO = cond(esi)
	C = false
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	call fn0040222A (retsize: 4;)
	dl = dl - al
	SCZO = cond(dl)
	branch Test(GT,SZO) l004029EA_thunk_fn00402A14
	goto l004029EC
	// succ:  l004029EC l004029EA_thunk_fn00402A14
l004029EA_thunk_fn00402A14:
	call fn00402A14 (retsize: 0;)
	return
	// succ:  fn0040276C_exit
l004029EC:
	ah = FPUF
	// succ:  l004029EC_thunk_fn004029ED
l004029EC_thunk_fn004029ED:
	call fn004029ED (retsize: 0;)
	return
	// succ:  fn0040276C_exit
fn0040276C_exit:


// fn004027B4
// Return size: 0
void fn004027B4()
fn004027B4_entry:
	// succ:  l004027B4
l004027B4:
	esp = fp
	bl = bl | dh
	SZO = cond(bl)
	C = false
	bh = 0x34
	eax = eax + 0x00000008
	SCZO = cond(eax)
	bh = bh - 0xFB - C
	SCZO = cond(bh)
	bl = bl - 0x52 - C
	SCZO = cond(bl)
	bl = 0xBF
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bh = bh - cl
	SCZO = cond(bh)
	bh = bh + dh
	SCZO = cond(bh)
	ebx = ecx
	goto l004027CB_thunk_fn00402661
	// succ:  l004027CB_thunk_fn00402661
l004027B4:
l004027CB_thunk_fn00402661:
	call fn00402661 (retsize: 0;)
	return
	// succ:  fn004027B4_exit
fn004027B4_exit:


// fn004027D8
// Return size: 0
void fn004027D8()
fn004027D8_entry:
	// succ:  l004027D8
l004027D8:
	esp = esp + 0x00000004
	al = al - bh
	SCZO = cond(al)
	dh = ~dh
	eax = eax - esi
	SCZO = cond(eax)
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	al = al | bl
	SZO = cond(al)
	C = false
	bh = ~bh
	branch Test(ULE,CZ) l004027E8_thunk_fn004020AA
	goto l004027EE
	// succ:  l004027EE l004027E8_thunk_fn004020AA
l004027E8_thunk_fn004020AA:
	call fn004020AA (retsize: 0;)
	return
	// succ:  fn004027D8_exit
l004027EE:
fn004027D8_exit:


// fn00402802
// Return size: 0
void fn00402802()
fn00402802_entry:
	// succ:  l00402802
l00402802:
	esp = fp
	esi = esi + 0x00000001
	SZO = cond(esi)
	esi = esi ^ edi
	SZO = cond(esi)
	C = false
	eax = eax >>u 0x00000010
	SCZO = cond(eax)
	edi = edi + esi
	SCZO = cond(edi)
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	esi = esi - edi
	SCZO = cond(esi)
	edi = edi + 0x00000001
	SZO = cond(edi)
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	goto l00402811_thunk_fn00402CDF
	// succ:  l00402811_thunk_fn00402CDF
l00402802:
l00402811_thunk_fn00402CDF:
	call fn00402CDF (retsize: 0;)
	return
	// succ:  fn00402802_exit
fn00402802_exit:


// fn0040281D
// Return size: 0
void fn0040281D()
fn0040281D_entry:
	// succ:  l0040281D
l0040281D:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = edi
	edi = v3
fn0040281D_exit:


// fn00402834
// Return size: 0
void fn00402834()
fn00402834_entry:
	// succ:  l00402834
l00402834:
	esp = fp
	ebx = ebx + esi
	SCZO = cond(ebx)
	ah = ah | bl
	SZO = cond(ah)
	C = false
	bh = bh + 0x1F
	SCZO = cond(bh)
	eax = eax - edx
	SCZO = cond(eax)
	ah = ah + 0x51
	SCZO = cond(ah)
	ecx = ecx ^ edi
	SZO = cond(ecx)
	C = false
	edx = edx ^ ecx
	SZO = cond(edx)
	C = false
	ch = ch - cl
	SCZO = cond(ch)
	branch Test(ULE,CZ) l00402846_thunk_fn00402A03
	goto l0040284C
	// succ:  l0040284C l00402846_thunk_fn00402A03
l00402834:
l00402846_thunk_fn00402A03:
	call fn00402A03 (retsize: 0;)
	return
	// succ:  fn00402834_exit
l0040284C:
	si = si
	v19 = ch
	ch = ch
	ch = v19
	branch Test(UGT,CZ) l00402851_thunk_fn00402A03
	goto l00402857
	// succ:  l00402857 l00402851_thunk_fn00402A03
l00402851_thunk_fn00402A03:
	call fn00402A03 (retsize: 0;)
	return
	// succ:  fn00402834_exit
l00402857:
	edx = edx - 0x00000001
	SZO = cond(edx)
	v20 = Mem0[ebx + 0x0969C3A6:byte] ^ bl
	Mem0[ebx + 0x0969C3A6:byte] = v20
	SZO = cond(Mem0[ebx + 0x0969C3A6:byte])
	C = false
	v21 = Mem0[eax + 0x804E16DB:word32] + eax
	Mem0[eax + 0x804E16DB:word32] = v21
	SCZO = cond(v21)
fn00402834_exit:


// fn0040285F
// Return size: 0
void fn0040285F()
fn0040285F_entry:
	goto l0040285F
	// succ:  l0040285F
l00402702:
	edi = edi + 0x00000001
	SZO = cond(edi)
	bl = bl + 0x02
	SCZO = cond(bl)
	// succ:  l00402703_thunk_fn00402704
l00402703_thunk_fn00402704:
	call fn00402704 (retsize: 4;)
	return
	// succ:  fn0040285F_exit
l0040285F:
	bl = bl - 0x16 - C
	SCZO = cond(bl)
	esi = esi - 0x00000001
	SZO = cond(esi)
	bh = bh - 0x49 - C
	SCZO = cond(bh)
	goto l00402864
	// succ:  l00402864
l00402873:
fn0040285F_exit:


// fn0040287E
// Return size: 0
void fn0040287E()
fn0040287E_entry:
	// succ:  l0040287E
l0040287E:
	cl = cl + 0x01
	SZO = cond(cl)
	edx = edi
	ah = ah + 0xA9
	SCZO = cond(ah)
	cl = cl | bh
	SZO = cond(cl)
	C = false
	ebx = ebx ^ edi
	SZO = cond(ebx)
	C = false
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	al = al ^ ah
	SZO = cond(al)
	C = false
	eax = eax - 0x00000001
	SZO = cond(eax)
	ebx = ebx ^ ecx
	SZO = cond(ebx)
	C = false
fn0040287E_exit:


// fn00402899
// Return size: 0
void fn00402899()
fn00402899_entry:
	// succ:  l00402899
l00402899:
	esp = fp
	esp = esp + 0x00000004
	al = al + bl
	SCZO = cond(al)
	ah = ch
	al = dh
	bh = bh + dl
	SCZO = cond(bh)
	bl = 0x21
	eax = eax ^ esi
	SZO = cond(eax)
	C = false
	al = al | cl
	SZO = cond(al)
	C = false
	// succ:  l004028AB_thunk_fn0040206A
l004028AB_thunk_fn0040206A:
	call fn0040206A (retsize: 0;)
	return
	// succ:  fn00402899_exit
fn00402899_exit:


// fn004028B4
// Return size: 0
void fn004028B4()
fn004028B4_entry:
	// succ:  l004028B4
l004028B4:
	esp = esp + 0x00000004
	v3 = (ch & 0x01 << 0x08 - 0x13) != 0x00
	ch = __rol(ch, 0x13)
	C = v3
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ah = ah | dh
	SZO = cond(ah)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ebx = ebx - eax
	SCZO = cond(ebx)
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	call fn0040246B (retsize: 4;)
	__outw(dx, ax)
	__outb(0xD9, al)
	branch Test(NS,S) l004028D0
fn004028B4_exit:


// fn004028CC
// Return size: 0
void fn004028CC()
fn004028CC_entry:
	// succ:  l004028CC
l004028CC:
	esp = fp
	esi = esi + ebx
	SCZO = cond(esi)
	goto l004028CC_thunk_fn004028CE
	// succ:  l004028CC_thunk_fn004028CE
l004028CC:
	call fn004028D0 (retsize: 0;)
	return
	// succ:  l004028CD l004028CC_thunk_fn004028D0 fn004028CC_exit
l004028CC_thunk_fn004028CE:
	call fn004028CE (retsize: 0;)
	return
	// succ:  fn004028CC_exit
l004028CC_thunk_fn004028D0:
	call fn004028D0 (retsize: 0;)
	return
	// succ:  fn004028CC_exit
l004028CD:
fn004028CC_exit:


// fn004028CE
// Return size: 0
void fn004028CE()
fn004028CE_entry:
	// succ:  l004028CE
l004028CE:
	esp = fp
	bh = bh | dh
	SZO = cond(bh)
	C = false
	goto l004028CE_thunk_fn004028D0
	// succ:  l004028CE_thunk_fn004028D0
l004028CE:
l004028CE_thunk_fn004028D0:
	call fn004028D0 (retsize: 0;)
	return
	// succ:  fn004028CE_exit
fn004028CE_exit:


// fn004028D0
// Return size: 6
void fn004028D0()
fn004028D0_entry:
	// succ:  l004028D0
l004028D0:
	bl = bl + 0x5E + C
	SCZO = cond(bl)
	bl = ~bl
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	eax = Mem0[eax:word32]
	call fn00402DCA (retsize: 4;)
	branch Test(NE,Z) l004028DE_thunk_fn00402946
	goto l004028E0
	// succ:  l004028E0 l004028DE_thunk_fn00402946
l004028DE_thunk_fn00402946:
	call fn00402946 (retsize: 6;)
	return
	// succ:  fn004028D0_exit
l004028E0:
	// succ:  l004028E0_thunk_fn00402929
l004028E0_thunk_fn00402929:
	call fn00402929 (retsize: 6;)
	return
	// succ:  fn004028D0_exit
fn004028D0_exit:


// fn004028E2
// Return size: 0
void fn004028E2()
fn004028E2_entry:
	// succ:  l004028E2
l004028E2:
	esp = fp
	esp = esp + 0x00000004
	ebx = ebx - esi
	SCZO = cond(ebx)
	bl = bl - ch
	SCZO = cond(bl)
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	ebx = eax
	edi = edi - edx
	SCZO = cond(edi)
	bh = bh + 0x4F + C
	SCZO = cond(bh)
	eax = eax + ecx
	SCZO = cond(eax)
	call fn0040281D (retsize: 4;)
	__outw(dx, ax)
fn004028E2_exit:


// fn00402902
// Return size: 6
void fn00402902()
fn00402902_entry:
	// succ:  l00402902
l00402902:
	esp = fp
	esi = esi + ecx
	SCZO = cond(esi)
	dl = dl + 0x01
	SZO = cond(dl)
	cl = cl - dl
	SCZO = cond(cl)
	ebx = ebx + esi
	SCZO = cond(ebx)
	bl = bl + 0xA7 + C
	SCZO = cond(bl)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	bh = bh - 0xC7 - C
	SCZO = cond(bh)
	call fn004024DE (retsize: 4;)
	Mem0[ebx + esi * 0x02:byte] = ch
	return
	// succ:  fn00402902_exit
l00402902:
fn00402902_exit:


// fn0040291D
// Return size: 6
void fn0040291D()
fn0040291D_entry:
	// succ:  l0040291D
l0040291D:
	esp = fp
	bl = bl + 0x1F + C
	SCZO = cond(bl)
	bl = bl - 0x6B - C
	SCZO = cond(bl)
	ecx = ecx >>u 0x0000000F
	SCZO = cond(ecx)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edi = edi - 0x00000001
	SZO = cond(edi)
	dh = dh - bh
	SCZO = cond(dh)
	goto l00402928_thunk_fn00402929
	// succ:  l00402928_thunk_fn00402929
l0040291D:
l00402928_thunk_fn00402929:
	call fn00402929 (retsize: 6;)
	return
	// succ:  fn0040291D_exit
fn0040291D_exit:


// fn00402929
// Return size: 6
void fn00402929()
fn00402929_entry:
	// succ:  l00402929
l00402929:
	esp = fp
	SZO = cond(Mem0[ebx:word32] & 0x0BD3F6F2)
	C = false
	__cli()
	call fn004027D8 (retsize: 4;)
	ebx = edi
	eax = eax - 0x00000001
	SZO = cond(eax)
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	C = true
	bl = 0x21
	goto l0040293A_thunk_fn0040293C
	// succ:  l0040293A_thunk_fn0040293C
l00402929:
	esi = esi | edx
	SZO = cond(esi)
	C = false
	bl = ~bl
	edi = edi | edx
	SZO = cond(edi)
	C = false
l0040293A_thunk_fn0040293C:
	call fn0040293C (retsize: 6;)
	return
	// succ:  fn00402929_exit
fn00402929_exit:


// fn0040293C
// Return size: 6
void fn0040293C()
fn0040293C_entry:
	// succ:  l0040293C
l0040293C:
	esp = fp
	bl = bl + 0xB9 + C
	SCZO = cond(bl)
	dh = dh ^ dl
	SZO = cond(dh)
	C = false
	dh = dh | ch
	SZO = cond(dh)
	C = false
	esi = esi - edx
	SCZO = cond(esi)
	dl = dl + 0xF9 + C
	SCZO = cond(dl)
	goto l00402945_thunk_fn00402946
	// succ:  l00402945_thunk_fn00402946
l0040293C:
l00402945_thunk_fn00402946:
	call fn00402946 (retsize: 6;)
	return
	// succ:  fn0040293C_exit
fn0040293C_exit:


// fn00402946
// Return size: 6
void fn00402946()
fn00402946_entry:
	// succ:  l00402946
l00402946:
	esp = fp
	cl = cl >> cl
	SCZO = cond(cl)
	dh = ah
	goto l0040294A_thunk_fn00402902
	// succ:  l0040294A_thunk_fn00402902
l00402946:
	dh = ah
	goto l0040294A_thunk_fn00402902
	// succ:  l0040294A_thunk_fn00402902
l0040294A_thunk_fn00402902:
	call fn00402902 (retsize: 6;)
	return
	// succ:  fn00402946_exit
l0040294A_thunk_fn00402902:
	call fn00402902 (retsize: 6;)
	return
	// succ:  fn00402946_exit
fn00402946_exit:


// fn004029A0
// Return size: 0
void fn004029A0()
fn004029A0_entry:
	// succ:  l004029A0
l004029A0:
	esp = fp
	esp = esp + 0x00000004
	eax = eax + ebx
	SCZO = cond(eax)
	ebx = ebx + ecx
	SCZO = cond(ebx)
	esi = esi + 0x00000001
	SZO = cond(esi)
	ebx = ebx - edx
	SCZO = cond(ebx)
	bh = ~bh
	// succ:  l004029AD_thunk_fn00402E5A
l004029AD_thunk_fn00402E5A:
	call fn00402E5A (retsize: 0;)
	return
	// succ:  fn004029A0_exit
fn004029A0_exit:


// fn004029B8
// Return size: 0
void fn004029B8()
fn004029B8_entry:
	goto l004029B8
	// succ:  l004029B8
l004022E5:
	bh = bh + 0x54
	SCZO = cond(bh)
	bl = ~bl
	edx = edx + ecx
	SCZO = cond(edx)
	bh = bh - 0x53 - C
	SCZO = cond(bh)
	cl = ~cl
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	bh = bh - 0x01
	SZO = cond(bh)
	esi = esi - edi
	SCZO = cond(esi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	branch Test(LT,SO) l00402CCA
	// succ:  l004022FF l00402CCA
l004022FF:
	v18 = cl
	cl = cl
	cl = v18
	branch Test(GE,SO) l00402CCA
	// succ:  l00402307 l00402CCA
l00402307:
	edx_eax = (int64) eax
	eax = __indw(dx)
	branch Test(PE,P) TMP!
l004029B8:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = eax
	eax = v3
	dl = dl
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = 0x47
	bl = ~bl
	esi = esi + ecx
	SCZO = cond(esi)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bh = cl
	ebx = ebx - eax
	SCZO = cond(ebx)
	goto l004022E5
	// succ:  l004022E5
l00402CCA:
	edi = edi ^ esi
	SZO = cond(edi)
	C = false
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	ecx = ecx ^ ebx
	SZO = cond(ecx)
	C = false
	ch = ch + 0x01
	SZO = cond(ch)
	edi = edi - 0x00000001
	SZO = cond(edi)
	bl = bl - 0x01
	SZO = cond(bl)
	call fn00402A45 (retsize: 4;)
	call fn004029A0 (retsize: 4;)
	// succ:  l00402CD5_thunk_fn00402CD7 l00402CF0_thunk_fn00402CF5
l00402CD5_thunk_fn00402CD7:
	call fn00402CD7 (retsize: 0;)
	return
	// succ:  fn004029B8_exit
l00402CF0_thunk_fn00402CF5:
	call fn00402CF5 (retsize: 0;)
	return
	// succ:  fn004029B8_exit
fn004029B8_exit:


// fn004029ED
// Return size: 0
void fn004029ED()
fn004029ED_entry:
	// succ:  l004029ED
l004029ED:
	dl = dl + 0xD8
	SCZO = cond(dl)
	al = ~al
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	edx = edx - 0x00000001
	SZO = cond(edx)
	ebx = edi
	al = ~al
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	call fn0040218A (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	al = Mem0[0x4B4E692D:byte]
	// succ:  l004029FF_thunk_fn00402A04
l004029FF_thunk_fn00402A04:
	call fn00402A04 (retsize: 0;)
	return
	// succ:  fn004029ED_exit
fn004029ED_exit:


// fn00402A03
// Return size: 0
void fn00402A03()
fn00402A03_entry:
	// succ:  l00402A03
l00402A03:
	esp = fp
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	goto l00402A03_thunk_fn00402A04
	// succ:  l00402A03_thunk_fn00402A04
l00402A03:
l00402A03_thunk_fn00402A04:
	call fn00402A04 (retsize: 0;)
	return
	// succ:  fn00402A03_exit
fn00402A03_exit:


// fn00402A04
// Return size: 0
void fn00402A04()
fn00402A04_entry:
	// succ:  l00402A04
l00402A04:
	esp = fp
	eax = eax - edx
	SCZO = cond(eax)
	ch = ch + 0xB8
	SCZO = cond(ch)
	cl = cl + 0x01
	SZO = cond(cl)
	ebx = ebx + eax
	SCZO = cond(ebx)
	bh = bh | cl
	SZO = cond(bh)
	C = false
	edx = 0x1CD7B712
	goto l00402A0F_thunk_fn00402A14
	// succ:  l00402A0F_thunk_fn00402A14
l00402A04:
	eax = eax - edx
	SCZO = cond(eax)
	ch = ch + 0xB8
	SCZO = cond(ch)
	cl = cl + 0x01
	SZO = cond(cl)
	ebx = ebx + eax
	SCZO = cond(ebx)
	bh = bh | cl
	SZO = cond(bh)
	C = false
	edx = 0x1CD7B712
	call fn004026BE (retsize: 4;)
	goto l00402A14_thunk_fn00402A19
	// succ:  l00402A14_thunk_fn00402A19
l00402A0F_thunk_fn00402A14:
	call fn00402A14 (retsize: 0;)
	return
	// succ:  fn00402A04_exit
l00402A14_thunk_fn00402A19:
	call fn00402A19 (retsize: 0;)
	return
	// succ:  fn00402A04_exit
fn00402A04_exit:


// fn00402A14
// Return size: 0
void fn00402A14()
fn00402A14_entry:
	// succ:  l00402A14
l00402A14:
	esp = fp
	call fn004026BE (retsize: 4;)
	goto l00402A14_thunk_fn00402A19
	// succ:  l00402A14_thunk_fn00402A19
l00402A14:
l00402A14_thunk_fn00402A19:
	call fn00402A19 (retsize: 0;)
	return
	// succ:  fn00402A14_exit
fn00402A14_exit:


// fn00402A19
// Return size: 0
void fn00402A19()
fn00402A19_entry:
	// succ:  l00402A19
l00402A19:
	esp = fp
	esi = esi + Mem0[eax + 0x3190FA5D:word32] + C
	SCZO = cond(esi)
	es = Mem0[esp:selector]
	esp = esp + 0x00000002
	v9 = Mem0[edi + 0x4ADC2444:byte] - 0x01
	Mem0[edi + 0x4ADC2444:byte] = v9
	SZO = cond(v9)
	goto l00402A20_thunk_fn00402A26
	// succ:  l00402A20_thunk_fn00402A26
l00402A19:
	esi = esi + Mem0[eax + 0x3190FA5D:word32] + C
	SCZO = cond(esi)
	es = Mem0[esp:selector]
	esp = esp + 0x00000002
	v11 = Mem0[edi + 0x4ADC2444:byte] - 0x01
	Mem0[edi + 0x4ADC2444:byte] = v11
	SZO = cond(v11)
	goto l00402A20_thunk_fn00402A26
	// succ:  l00402A20_thunk_fn00402A26
l00402A20_thunk_fn00402A26:
	call fn00402A26 (retsize: 0;)
	return
	// succ:  fn00402A19_exit
l00402A20_thunk_fn00402A26:
	call fn00402A26 (retsize: 0;)
	return
	// succ:  fn00402A19_exit
fn00402A19_exit:


// fn00402A21
// Return size: 0
void fn00402A21()
fn00402A21_entry:
	// succ:  l00402A21
l00402A21:
	esp = fp
	Mem0[esp - 0x00000024:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx - 0x00000001
	SZO = cond(edx)
	// succ:  l00402A25_thunk_fn00402A26
l00402A25_thunk_fn00402A26:
	call fn00402A26 (retsize: 0;)
	return
	// succ:  fn00402A21_exit
fn00402A21_exit:


// fn00402A26
// Return size: 0
void fn00402A26()
fn00402A26_entry:
	// succ:  l00402A26
l00402A26:
	esp = fp
	ecx = ecx - ebx
	SCZO = cond(ecx)
	eax = eax + ecx
	SCZO = cond(eax)
	dh = 0x41
	al = al + 0x01
	SZO = cond(al)
	branch Test(OV,O) l00402A2E_thunk_fn00402F07
	goto l00402A2E_thunk_fn00402A34
	// succ:  l00402A2E_thunk_fn00402A34 l00402A2E_thunk_fn00402F07
l00402A26:
	ecx = ecx - ebx
	SCZO = cond(ecx)
	eax = eax + ecx
	SCZO = cond(eax)
	dh = 0x41
	al = al + 0x01
	SZO = cond(al)
	branch Test(OV,O) l00402A2E_thunk_fn00402F07
	goto l00402A2E_thunk_fn00402A34
	// succ:  l00402A2E_thunk_fn00402A34 l00402A2E_thunk_fn00402F07
l00402A2E_thunk_fn00402A34:
	call fn00402A34 (retsize: 0;)
	return
	// succ:  fn00402A26_exit l00402A2E_thunk_fn00402A34
l00402A2E_thunk_fn00402A34:
	call fn00402A34 (retsize: 0;)
	return
	// succ:  fn00402A26_exit
l00402A2E_thunk_fn00402A34:
	call fn00402A34 (retsize: 0;)
	return
	// succ:  fn00402A26_exit
l00402A2E_thunk_fn00402F07:
	call fn00402F07 (retsize: 0;)
	return
	// succ:  fn00402A26_exit
l00402A2E_thunk_fn00402F07:
	call fn00402F07 (retsize: 0;)
	return
	// succ:  fn00402A26_exit
fn00402A26_exit:


// fn00402A34
// Return size: 0
void fn00402A34()
fn00402A34_entry:
	// succ:  l00402A34
l00402A34:
	// succ:  l00402A39
l00402A39:
	branch Test(NO,O) l00402A39_thunk_fn00402F07
	goto l00402A3F
	// succ:  l00402A3F l00402A39_thunk_fn00402F07
l00402A39_thunk_fn00402F07:
	call fn00402F07 (retsize: 0;)
	return
	// succ:  fn00402A34_exit
l00402A3F:
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	v6 = eax
	eax = edi
	edi = v6
	return
	// succ:  fn00402A34_exit
fn00402A34_exit:


// fn00402A45
// Return size: 0
void fn00402A45()
fn00402A45_entry:
	// succ:  l00402A45
l00402A45:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = edi
	edi = v3
	ah = ah
fn00402A45_exit:


// fn00402A5F
// Return size: 0
void fn00402A5F()
fn00402A5F_entry:
	// succ:  l00402A5F
l00402A5F:
	esp = fp
	ecx = ecx | eax
	SZO = cond(ecx)
	C = false
	bl = 0x28
	edx = edx ^ 0x1CD7BB62
	SZO = cond(edx)
	C = false
	bl = bl - 0x01
	SZO = cond(bl)
	ch = ~ch
	ecx = ecx + ebx
	SCZO = cond(ecx)
	eax = eax - 0x00000001
	SZO = cond(eax)
	ebx = ebx - esi
	SCZO = cond(ebx)
	branch Test(LE,SZO) l00402A72_thunk_fn0040227D
	goto l00402A78
	// succ:  l00402A78 l00402A72_thunk_fn0040227D
l00402A5F:
l00402A72_thunk_fn0040227D:
	call fn0040227D (retsize: 0;)
	return
	// succ:  fn00402A5F_exit
l00402A78:
	bl = bl
	v13 = si
	si = si
	si = v13
	branch Test(GT,SZO) l00402A7D_thunk_fn0040227D
	goto l00402A83
	// succ:  l00402A83 l00402A7D_thunk_fn0040227D
l00402A7D_thunk_fn0040227D:
	call fn0040227D (retsize: 0;)
	return
	// succ:  fn00402A5F_exit
l00402A83:
fn00402A5F_exit:


// fn00402A89
// Return size: 0
void fn00402A89()
fn00402A89_entry:
	// succ:  l00402A89
l00402A89:
	esp = fp
	esi = esi + 0x00000001
	SZO = cond(esi)
	edi = edi - ecx
	SCZO = cond(edi)
	bh = ~bh
	esi = edi
	bh = ah
	bl = ah
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bh = bh ^ ch
	SZO = cond(bh)
	C = false
	ebx = ebx - edi
	SCZO = cond(ebx)
	goto l00402B59
	// succ:  l00402B59
l00402A89:
l00402B59:
	edi = ecx
	bh = bh + ch
	SCZO = cond(bh)
	bh = ~bh
	bl = bl - 0x01
	SZO = cond(bl)
	bh = bh + 0x75 + C
	SCZO = cond(bh)
	edi = edi + 0x00000001
	SZO = cond(edi)
	bl = bl | ch
	SZO = cond(bl)
	C = false
	eax = ecx
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bl = ~bl
fn00402A89_exit:


// fn00402AA6
// Return size: 0
void fn00402AA6()
fn00402AA6_entry:
	// succ:  l00402AA6
l00402AA6:
	dl = dl + 0x38 + C
	SCZO = cond(dl)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	ah = -ah
	SCZO = cond(ah)
	C = ah == 0x00
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[ecx:word32]
	bh = bh ^ ah
	SZO = cond(bh)
	C = false
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	dh = dh + 0x5F
	SCZO = cond(dh)
	dl = dl ^ al
	SZO = cond(dl)
	C = false
	edi = eax
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	branch Test(PE,P) l00402ABC_thunk_fn00402200
	goto l00402AC2
	// succ:  l00402AC2 l00402ABC_thunk_fn00402200
l00402ABC_thunk_fn00402200:
	call fn00402200 (retsize: 0;)
	return
	// succ:  fn00402AA6_exit
l00402AC2:
fn00402AA6_exit:


// fn00402AD3
// Return size: 0
void fn00402AD3()
fn00402AD3_entry:
	// succ:  l00402AD3
l00402AD3:
	Mem0[esp - 0x00000008:word32] = eax
	cl = cl + 0xA0 + C
	SCZO = cond(cl)
	ebx = ebx - esi
	SCZO = cond(ebx)
	bl = bl - 0x0E - C
	SCZO = cond(bl)
	dh = dh + 0xA7 + C
	SCZO = cond(dh)
	bl = al
	branch Test(ULE,CZ) l00402AE4_thunk_fn004021CA
	goto l00402AEA
	// succ:  l00402AEA l00402AE4_thunk_fn004021CA
l00402AE4_thunk_fn004021CA:
	call fn004021CA (retsize: 0;)
	return
	// succ:  fn00402AD3_exit
l00402AEA:
fn00402AD3_exit:


// fn00402AF8
// Return size: 0
void fn00402AF8()
fn00402AF8_entry:
	// succ:  l00402AF8
l00402AF8:
	esp = fp
	bl = bl | dh
	SZO = cond(bl)
	C = false
	ebx = ebx - esi
	SCZO = cond(ebx)
	al = al + dl
	SCZO = cond(al)
	ch = ch + al
	SCZO = cond(ch)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ch = ch | ah
	SZO = cond(ch)
	C = false
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	goto l00402B77
	// succ:  l00402B77
l00402AF8:
l00402B77:
	bh = bh ^ cl
	SZO = cond(bh)
	C = false
	bh = bh - 0x01
	SZO = cond(bh)
	al = 0x08
	bh = 0x1A
	eax = eax ^ edx
	SZO = cond(eax)
	C = false
	al = al + 0x73 + C
	SCZO = cond(al)
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	call fn00402B92 (retsize: 4;)
	SZO = cond(Mem0[esi:word32] & ecx)
	C = false
fn00402AF8_exit:


// fn00402B36
// Return size: 0
void fn00402B36()
fn00402B36_entry:
	// succ:  l00402B36
l00402B36:
	esp = fp
	Mem0[esp - 0x00000014:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00402B36_thunk_fn00402B39
l00402B36_thunk_fn00402B39:
	call fn00402B39 (retsize: 0;)
	return
	// succ:  fn00402B36_exit
fn00402B36_exit:


// fn00402B39
// Return size: 0
void fn00402B39()
fn00402B39_entry:
	// succ:  l00402B39
l00402B39:
	esp = fp
	al = __inb(dx)
	edx = edx + eax
	SCZO = cond(edx)
	bh = bh - 0xA7 - C
	SCZO = cond(bh)
	edx = edx | ecx
	SZO = cond(edx)
	C = false
	bh = bh + 0xB0 + C
	SCZO = cond(bh)
	dl = dl - 0x01
	SZO = cond(dl)
	edi = edi + 0x00000001
	SZO = cond(edi)
	dh = dh - 0x7B - C
	SCZO = cond(dh)
	bl = bl + 0x01
	SZO = cond(bl)
	goto l00402B4C_thunk_fn00402632
	// succ:  l00402B4C_thunk_fn00402632
l00402B39:
	edx = edx + eax
	SCZO = cond(edx)
	bh = bh - 0xA7 - C
	SCZO = cond(bh)
	edx = edx | ecx
	SZO = cond(edx)
	C = false
	bh = bh + 0xB0 + C
	SCZO = cond(bh)
	dl = dl - 0x01
	SZO = cond(dl)
	edi = edi + 0x00000001
	SZO = cond(edi)
	dh = dh - 0x7B - C
	SCZO = cond(dh)
	bl = bl + 0x01
	SZO = cond(bl)
	// succ:  l00402B49_thunk_fn00402632
l00402B49_thunk_fn00402632:
	call fn00402632 (retsize: 0;)
	return
	// succ:  fn00402B39_exit
l00402B4C_thunk_fn00402632:
	call fn00402632 (retsize: 0;)
	return
	// succ:  fn00402B39_exit
fn00402B39_exit:


// fn00402B92
// Return size: 0
void fn00402B92()
fn00402B92_entry:
	// succ:  l00402B92
l00402B92:
	esp = fp
	Mem0[esp - 0x00000010:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ch = Mem0[edi:byte]
	eax = eax ^ ecx
	SZO = cond(eax)
	C = false
	al = ~al
	ah = ah | dl
	SZO = cond(ah)
	C = false
	ah = -ah
	SCZO = cond(ah)
	C = ah == 0x00
	ah = ah | dl
	SZO = cond(ah)
	C = false
	ebx = ebx ^ edi
	SZO = cond(ebx)
	C = false
	// succ:  l00402BA4_thunk_fn004020C0
l00402BA4_thunk_fn004020C0:
	call fn004020C0 (retsize: 0;)
	return
	// succ:  fn00402B92_exit
fn00402B92_exit:


// fn00402BAD
// Return size: 0
void fn00402BAD()
fn00402BAD_entry:
	// succ:  l00402BAD
l00402BAD:
	esp = fp
	eax = eax - ecx
	SCZO = cond(eax)
	dl = dl - 0xB7 - C
	SCZO = cond(dl)
	edx = edx ^ esi
	SZO = cond(edx)
	C = false
	bl = 0xB4
	ebx = ebx + edi
	SCZO = cond(ebx)
	dh = dh - ch
	SCZO = cond(dh)
	bh = bh | al
	SZO = cond(bh)
	C = false
	goto l00402BBC_thunk_fn00402834
	// succ:  l00402BBC_thunk_fn00402834
l00402BAD:
l00402BBC_thunk_fn00402834:
	call fn00402834 (retsize: 0;)
	return
	// succ:  fn00402BAD_exit
fn00402BAD_exit:


// fn00402BC5
// Return size: 0
void fn00402BC5()
fn00402BC5_entry:
	// succ:  l00402BC5
l00402BC5:
	esp = fp
	esp = esp + 0x00000004
	al = al + 0x01
	SZO = cond(al)
	bl = bl + 0x8D
	SCZO = cond(bl)
	bl = bl + 0x5B + C
	SCZO = cond(bl)
	eax = eax - 0x00000001
	SZO = cond(eax)
	bl = bl - 0x55 - C
	SCZO = cond(bl)
	bl = bl + 0x9A + C
	SCZO = cond(bl)
	call fn00402C05 (retsize: 4;)
	SZO = cond(ecx & esp)
	C = false
	SCZO = cond(eax - 0xE3B927FF)
	// succ:  l00402BDF_thunk_fn00402BE4
l00402BDF_thunk_fn00402BE4:
	call fn00402BE4 (retsize: 0;)
	return
	// succ:  fn00402BC5_exit
fn00402BC5_exit:


// fn00402BE4
// Return size: 0
void fn00402BE4()
fn00402BE4_entry:
	// succ:  l00402BE4
l00402BE4:
	esp = fp
	Mem0[esp:word32] = edx
	esp = esp - 0x00000002
	Mem0[esp:word16] = bx
	bx = Mem0[esp:word16]
	esp = esp + 0x00000002
	v5 = dh
	dh = dh
	dh = v5
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh - 0xF3 - C
	SCZO = cond(bh)
	bl = 0xA8
	SCZO = cond(eax - 0x8370CB94)
	// succ:  l00402BF9_thunk_fn0040256F
l00402BF9_thunk_fn0040256F:
	call fn0040256F (retsize: 0;)
	return
	// succ:  fn00402BE4_exit
fn00402BE4_exit:


// fn00402C05
// Return size: 0
void fn00402C05()
fn00402C05_entry:
	// succ:  l00402C05
l00402C05:
	esp = fp
	esp = esp + 0x00000004
	ebx = ebx ^ edi
	SZO = cond(ebx)
	C = false
	eax = eax - 0x00000001
	SZO = cond(eax)
	al = al + 0x31 + C
	SCZO = cond(al)
	edx = edx - 0x00000001
	SZO = cond(edx)
	eax = eax - ecx
	SCZO = cond(eax)
	al = ~al
	ah = -ah
	SCZO = cond(ah)
	C = ah == 0x00
	call fn00402E12 (retsize: 4;)
fn00402C05_exit:


// fn00402C23
// Return size: 0
void fn00402C23()
fn00402C23_entry:
	// succ:  l00402C23
l00402C23:
	bh = bh + 0x01
	SZO = cond(bh)
	ebx = ebx - esi
	SCZO = cond(ebx)
	ah = ah - 0x2B - C
	SCZO = cond(ah)
	bl = ~bl
	bh = 0x52
	eax = eax | esi
	SZO = cond(eax)
	C = false
	ah = ah ^ cl
	SZO = cond(ah)
	C = false
	ah = ah + 0xA3 + C
	SCZO = cond(ah)
	bl = bl + 0x86 + C
	SCZO = cond(bl)
	eax = eax ^ esi
	SZO = cond(eax)
	C = false
	call fn00402D36 (retsize: 4;)
	C = __das(al, &al)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	v14 = Mem0[esi + 0x00000029:byte] & 0x43
	Mem0[esi + 0x00000029:byte] = v14
	SZO = cond(Mem0[esi + 0x00000029:byte])
	C = false
	// succ:  l00402C41_thunk_fn00402C45
l00402C41_thunk_fn00402C45:
	call fn00402C45 (retsize: 0;)
	return
	// succ:  fn00402C23_exit
fn00402C23_exit:


// fn00402C44
// Return size: 0
void fn00402C44()
fn00402C44_entry:
	// succ:  l00402C44
l00402C44:
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	// succ:  l00402C44_thunk_fn00402C45
l00402C44_thunk_fn00402C45:
	call fn00402C45 (retsize: 0;)
	return
	// succ:  fn00402C44_exit
fn00402C44_exit:


// fn00402C45
// Return size: 0
void fn00402C45()
fn00402C45_entry:
	// succ:  l00402C45
l00402C45:
	esp = fp
	dh = dh + cl
	SCZO = cond(dh)
	bl = bl + dh
	SCZO = cond(bl)
	esi = esi - 0x00000001
	SZO = cond(esi)
	ebx = edx
	dh = dh + 0x22 + C
	SCZO = cond(dh)
	edi = edi | esi
	SZO = cond(edi)
	C = false
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	call fn00402B36 (retsize: 4;)
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi - 0x00000001
	SZO = cond(esi)
	dl = dl & Mem0[0x3247A97B:byte]
	SZO = cond(dl)
	C = false
	goto l00402C5B_thunk_fn00402C5F
	// succ:  l00402C5B_thunk_fn00402C5F
l00402C45:
	dh = dh + cl
	SCZO = cond(dh)
	bl = bl + dh
	SCZO = cond(bl)
	esi = esi - 0x00000001
	SZO = cond(esi)
	ebx = edx
	dh = dh + 0x22 + C
	SCZO = cond(dh)
	edi = edi | esi
	SZO = cond(edi)
	C = false
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	call fn00402B36 (retsize: 4;)
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi - 0x00000001
	SZO = cond(esi)
	dl = dl & Mem0[0x3247A97B:byte]
	SZO = cond(dl)
	C = false
	ax = __aam(al)
	rLoc1 = (real64) Mem0[eax + 0xF28B93C7:int16]
	dh = dh | ch
	SZO = cond(dh)
	C = false
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bh = 0xC2
	dh = cl
	ebx = ebx + eax
	SCZO = cond(ebx)
	call fn004025EE (retsize: 4; FPU: 1;)
	v22 = eax
	eax = esp
	esp = v22
	esp = esp + 0x00000001
	SZO = cond(esp)
	Mem0[0xB3393586:byte] = al
	eax = 0xFA8BC20B
	al = al | dh
	SZO = cond(al)
	C = false
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	al = al - 0xBB - C
	SCZO = cond(al)
	bl = bl - 0xC2 - C
	SCZO = cond(bl)
	bh = bh - 0x01
	SZO = cond(bh)
	ch = ~ch
	ch = ch + al
	SCZO = cond(ch)
	branch Test(LE,SZO) l00402C93_thunk_fn0040258D
l00402C5B_thunk_fn00402C5F:
	call fn00402C5F (retsize: 0;)
	return
	// succ:  fn00402C45_exit
fn00402C45_exit:


// fn00402C5F
// Return size: 0
void fn00402C5F()
fn00402C5F_entry:
	// succ:  l00402C5F
l00402C5F:
	esp = fp
	edi = edi + 0x00000001
	SZO = cond(edi)
	dl = dl ^ ah
	SZO = cond(dl)
	C = false
	ebx = edi
	bh = bh + 0x93
	SCZO = cond(bh)
	esi = edx
	dh = dh | ch
	SZO = cond(dh)
	C = false
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bh = 0xC2
	dh = cl
	ebx = ebx + eax
	SCZO = cond(ebx)
	call fn004025EE (retsize: 4;)
	v18 = eax
	eax = esp
	esp = v18
	esp = esp + 0x00000001
	SZO = cond(esp)
	Mem0[0xB3393586:byte] = al
	eax = 0xFA8BC20B
	goto l00402C7F_thunk_fn00402C84
	// succ:  l00402C7F_thunk_fn00402C84
l00402C5F:
	ax = __aam(al)
	rLoc1 = (real64) Mem0[eax + 0xF28B93C7:int16]
	dh = dh | ch
	SZO = cond(dh)
	C = false
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bh = 0xC2
	dh = cl
	ebx = ebx + eax
	SCZO = cond(ebx)
	call fn004025EE (retsize: 4; FPU: 1;)
	v22 = eax
	eax = esp
	esp = v22
	esp = esp + 0x00000001
	SZO = cond(esp)
	Mem0[0xB3393586:byte] = al
	eax = 0xFA8BC20B
	// succ:  l00402C7F_thunk_fn00402C80
l00402C7F_thunk_fn00402C80:
	call fn00402C80 (retsize: 0;)
	return
	// succ:  fn00402C5F_exit
l00402C7F_thunk_fn00402C84:
	call fn00402C84 (retsize: 0;)
	return
	// succ:  fn00402C5F_exit
fn00402C5F_exit:


// fn00402C80
// Return size: 0
void fn00402C80()
fn00402C80_entry:
	// succ:  l00402C80
l00402C80:
	esp = fp
	eax = eax | edx
	SZO = cond(eax)
	C = false
	edi = edx
	goto l00402C82_thunk_fn00402C84
	// succ:  l00402C82_thunk_fn00402C84
l00402C80:
	al = al | dh
	SZO = cond(al)
	C = false
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	al = al - 0xBB - C
	SCZO = cond(al)
	bl = bl - 0xC2 - C
	SCZO = cond(bl)
	bh = bh - 0x01
	SZO = cond(bh)
	ch = ~ch
	ch = ch + al
	SCZO = cond(ch)
	branch Test(LE,SZO) l00402C93_thunk_fn0040258D
	// succ:  l00402C93_thunk_fn00402C99 l00402C93_thunk_fn0040258D l00402C93_thunk_fn00402C99 l00402C93_thunk_fn0040258D
l00402C82_thunk_fn00402C84:
	call fn00402C84 (retsize: 0;)
	return
	// succ:  fn00402C80_exit
l00402C93_thunk_fn0040258D:
	call fn0040258D (retsize: 0;)
	return
	// succ:  fn00402C80_exit
l00402C93_thunk_fn0040258D:
	call fn0040258D (retsize: 0;)
	return
	// succ:  fn00402C80_exit
l00402C93_thunk_fn00402C99:
	call fn00402C99 (retsize: 0;)
	return
	// succ:  fn00402C80_exit
l00402C93_thunk_fn00402C99:
	call fn00402C99 (retsize: 0;)
	return
	// succ:  fn00402C80_exit l00402C93_thunk_fn00402C99
l00402C93_thunk_fn00402C99:
	call fn00402C99 (retsize: 0;)
	return
	// succ:  fn00402C80_exit
fn00402C80_exit:


// fn00402C84
// Return size: 0
void fn00402C84()
fn00402C84_entry:
	// succ:  l00402C84
l00402C84:
	esp = fp
	al = al | dh
	SZO = cond(al)
	C = false
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	al = al - 0xBB - C
	SCZO = cond(al)
	bl = bl - 0xC2 - C
	SCZO = cond(bl)
	bh = bh - 0x01
	SZO = cond(bh)
	ch = ~ch
	ch = ch + al
	SCZO = cond(ch)
	branch Test(LE,SZO) l00402C93_thunk_fn0040258D
	goto l00402C93_thunk_fn00402C99
	// succ:  l00402C93_thunk_fn00402C99 l00402C93_thunk_fn0040258D
l00402C84:
	al = al | dh
	SZO = cond(al)
	C = false
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	al = al - 0xBB - C
	SCZO = cond(al)
	bl = bl - 0xC2 - C
	SCZO = cond(bl)
	bh = bh - 0x01
	SZO = cond(bh)
	ch = ~ch
	ch = ch + al
	SCZO = cond(ch)
	branch Test(LE,SZO) l00402C93_thunk_fn0040258D
	goto l00402C93_thunk_fn00402C99
	// succ:  l00402C93_thunk_fn00402C99 l00402C93_thunk_fn0040258D
l00402C93_thunk_fn0040258D:
	call fn0040258D (retsize: 0;)
	return
	// succ:  fn00402C84_exit
l00402C93_thunk_fn0040258D:
	call fn0040258D (retsize: 0;)
	return
	// succ:  fn00402C84_exit
l00402C93_thunk_fn00402C99:
	call fn00402C99 (retsize: 0;)
	return
	// succ:  fn00402C84_exit l00402C93_thunk_fn00402C99
l00402C93_thunk_fn00402C99:
	call fn00402C99 (retsize: 0;)
	return
	// succ:  fn00402C84_exit
l00402C93_thunk_fn00402C99:
	call fn00402C99 (retsize: 0;)
	return
	// succ:  fn00402C84_exit l00402C93_thunk_fn00402C99
l00402C93_thunk_fn00402C99:
	call fn00402C99 (retsize: 0;)
	return
	// succ:  fn00402C84_exit
fn00402C84_exit:


// fn00402C99
// Return size: 0
void fn00402C99()
fn00402C99_entry:
	// succ:  l00402C99
l00402C99:
	// succ:  l00402C9E
l00402C9E:
	dl = dl
	branch Test(GT,SZO) l00402CA0_thunk_fn0040258D
	goto l00402CA6
	// succ:  l00402CA6 l00402CA0_thunk_fn0040258D
l00402CA0_thunk_fn0040258D:
	call fn0040258D (retsize: 0;)
	return
	// succ:  fn00402C99_exit
l00402CA6:
	ah = ah + ah
	SCZO = cond(ah)
fn00402C99_exit:


// fn00402CAE
// Return size: 0
void fn00402CAE()
fn00402CAE_entry:
	// succ:  l00402CAE
l00402CAE:
	esp = fp
	eax = eax + Mem0[eax + 0x0000003C:word32]
	SCZO = cond(eax)
	bl = 0x5C
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bh = bh - 0x27 - C
	SCZO = cond(bh)
	bl = 0xC9
	bh = 0x3B
	bl = bl - 0x01
	SZO = cond(bl)
	ebx = ebx - esi
	SCZO = cond(ebx)
	call fn00402DE3 (retsize: 4;)
l00402CAE:
fn00402CAE_exit:


// fn00402CD7
// Return size: 0
void fn00402CD7()
fn00402CD7_entry:
	// succ:  l00402CD7
l00402CD7:
	esp = fp
	D = true
l00402CD7:
	v6 = Mem0[edx + 0x2BE40CF1:word16] - (real64) rArg0
	Mem0[edx + 0x2BE40CF1:word16] = v6
	// succ:  l00402CD7_thunk_fn00402CDF
l00402CD7_thunk_fn00402CDF:
	call fn00402CDF (retsize: 0;)
	return
	// succ:  fn00402CD7_exit
fn00402CD7_exit:


// fn00402CDF
// Return size: 0
void fn00402CDF()
fn00402CDF_entry:
	// succ:  l00402CDF
l00402CDF:
	esp = fp
	edi = edi - eax
	SCZO = cond(edi)
	eax = eax + edx
	SCZO = cond(eax)
	esi = esi + edx
	SCZO = cond(esi)
	edi = edi | edx
	SZO = cond(edi)
	C = false
	esi = esi + eax
	SCZO = cond(esi)
	edi = ebx
	edi = edx
	esi = esi - ebx
	SCZO = cond(esi)
	edi = edi - 0x00000001
	SZO = cond(edi)
	call fn004029A0 (retsize: 4;)
	goto l00402CF0_thunk_fn00402CF5
	// succ:  l00402CF0_thunk_fn00402CF5
l00402CDF:
	C = false
	eax = eax + edx
	SCZO = cond(eax)
	esi = esi + edx
	SCZO = cond(esi)
	edi = edi | edx
	SZO = cond(edi)
	C = false
	esi = esi + eax
	SCZO = cond(esi)
	edi = ebx
	edi = edx
	esi = esi - ebx
	SCZO = cond(esi)
	edi = edi - 0x00000001
	SZO = cond(edi)
l00402CF0_thunk_fn00402CF5:
	call fn00402CF5 (retsize: 0;)
	return
	// succ:  fn00402CDF_exit
fn00402CDF_exit:


// fn00402CF5
// Return size: 0
void fn00402CF5()
fn00402CF5_entry:
	// succ:  l00402CF5
l00402CF5:
	esp = fp
	edx = edx ^ esi
	SZO = cond(edx)
	C = false
	ecx = ecx - 0x00000001
	branch Test(NE,Z) && ecx != 0x00000000 l00402CF7_thunk_fn00402CD7
	goto l00402CF9_in_fn00402CF5
	// succ:  l00402CF9_in_fn00402CF5 l00402CF7_thunk_fn00402CD7
l00402CF5:
	edx = edx ^ esi
	SZO = cond(edx)
	C = false
	ecx = ecx - 0x00000001
	branch Test(NE,Z) && ecx != 0x00000000 l00402CF7_thunk_fn00402CD7
	goto l00402CF9
	// succ:  l00402CF9 l00402CF7_thunk_fn00402CD7
l00402CF7_thunk_fn00402CD7:
	call fn00402CD7 (retsize: 0;)
	return
	// succ:  fn00402CF5_exit
l00402CF7_thunk_fn00402CD7:
	call fn00402CD7 (retsize: 0;)
	return
	// succ:  fn00402CF5_exit
l00402CF9:
	return
l00402CF9_in_fn00402CF5:
	return
	// succ:  fn00402CF5_exit l00402CF9_in_fn00402CF5
l00402CF9_in_fn00402CF5:
	return
	// succ:  fn00402CF5_exit
fn00402CF5_exit:


// fn00402CFA
// Return size: 0
void fn00402CFA()
fn00402CFA_entry:
	// succ:  l00402CFA
l00402CFA:
	esp = fp
	bh = bh | al
	SZO = cond(bh)
	C = false
	ebx = ebx + edi
	SCZO = cond(ebx)
	bl = bl - 0x67 - C
	SCZO = cond(bl)
	ebx = ecx
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	bl = bl + 0x01
	SZO = cond(bl)
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	al = bh
	goto l00402D0D_thunk_fn004023B0
	// succ:  l00402D0D_thunk_fn004023B0
l00402CFA:
	goto fn00402CFA_exit
	// succ:  fn00402CFA_exit
l00402D0D_thunk_fn004023B0:
	call fn004023B0 (retsize: 0;)
	return
	// succ:  fn00402CFA_exit
fn00402CFA_exit:


// fn00402D19
// Return size: 0
void fn00402D19()
fn00402D19_entry:
	// succ:  l00402D19
l00402D19:
	esp = fp
	Mem0[esp - 0x00000014:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh - ah
	SCZO = cond(bh)
	bl = dh
	bl = bl + 0x5C + C
	SCZO = cond(bl)
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bh = bh - 0x01
	SZO = cond(bh)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	call fn00402BE4 (retsize: 4;)
	eax = __indw(0xC7)
	ebp = ebp - esi - C
	SCZO = cond(ebp)
	ecx = ecx + Mem0[ecx + 0x5BF3241C:word32] + C
	SCZO = cond(ecx)
	// succ:  l00402D35_thunk_fn00402D3B
l00402D35_thunk_fn00402D3B:
	call fn00402D3B (retsize: 0;)
	return
	// succ:  fn00402D19_exit
fn00402D19_exit:


// fn00402D36
// Return size: 0
void fn00402D36()
fn00402D36_entry:
	// succ:  l00402D36
l00402D36:
	esp = fp
	Mem0[esp:word32] = ebx
fn00402D36_exit:


// fn00402D3B
// Return size: 0
void fn00402D3B()
fn00402D3B_entry:
	goto l00402D3B
	// succ:  l00402D3B
l004025AE:
	bl = bl - 0x01
	SZO = cond(bl)
	eax = eax - esi
	SCZO = cond(eax)
	bl = al
	eax = eax + 0x00000001
	SZO = cond(eax)
	ebx = ebx - eax
	SCZO = cond(ebx)
	bh = 0xD5
	al = dl
	bl = bl + 0xCA + C
	SCZO = cond(bl)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	eax = edx
	// succ:  l004025C1_thunk_fn00402488
l004025C1_thunk_fn00402488:
	call fn00402488 (retsize: 0;)
	return
	// succ:  fn00402D3B_exit
l00402D3B:
	esp = fp
	eax = eax + 0x00000001
	SZO = cond(eax)
	ah = ah + 0x01
	SZO = cond(ah)
	bh = ~bh
	ah = ~ah
	eax = eax + 0x00000001
	SZO = cond(eax)
	bh = bh + 0xDD + C
	SCZO = cond(bh)
	ch = ~ch
	goto l004025AE
	// succ:  l004025AE
l00402D3B:
fn00402D3B_exit:


// fn00402D51
// Return size: 0
void fn00402D51()
fn00402D51_entry:
	// succ:  l00402D51
l00402D51:
	esi = esi - 0x000000C2
	SCZO = cond(esi)
	ch = ~ch
	ah = -ah
	SCZO = cond(ah)
	C = ah == 0x00
	eax = eax | edi
	SZO = cond(eax)
	C = false
	edx = edx - 0x00000001
	SZO = cond(edx)
	ecx = ecx ^ edx
	SZO = cond(ecx)
	C = false
	ebx = ebx | eax
	SZO = cond(ebx)
	C = false
	bl = bl - 0x01
	SZO = cond(bl)
	dh = dh ^ dl
	SZO = cond(dh)
	C = false
	dl = dl + 0x0F
	SCZO = cond(dl)
	call fn004023FD (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esp
	SZO = cond(ebx & esi)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	esp = esp - 0x000041D7
	ah = FPUF
	// succ:  l00402D75_thunk_fn00402D76
l00402D75_thunk_fn00402D76:
	call fn00402D76 (retsize: 0;)
	return
	// succ:  fn00402D51_exit
fn00402D51_exit:


// fn00402D76
// Return size: 0
void fn00402D76()
fn00402D76_entry:
	// succ:  l00402D76
l00402D76:
	esp = fp
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	bl = ~bl
	goto l00402D78_thunk_fn00402DBA
	// succ:  l00402D78_thunk_fn00402DBA
l00402D76:
l00402D78_thunk_fn00402DBA:
	call fn00402DBA (retsize: 0;)
	return
	// succ:  fn00402D76_exit
fn00402D76_exit:


// fn00402D9F
// Return size: 0
void fn00402D9F()
fn00402D9F_entry:
	// succ:  l00402D9F
l00402D9F:
	esp = fp
	esp = esp + 0x00000004
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	edx = edx | ecx
	SZO = cond(edx)
	C = false
	ecx = ecx ^ edi
	SZO = cond(ecx)
	C = false
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	ch = -ch
	SCZO = cond(ch)
	C = ch == 0x00
	dh = dh - 0xD9 - C
	SCZO = cond(dh)
	dh = dh + 0x01
	SZO = cond(dh)
	eax = eax ^ ebx
	SZO = cond(eax)
	C = false
	branch Test(LE,SZO) l00402DB4_thunk_fn0040264A
	goto l00402DB4_thunk_fn00402DBA
	// succ:  l00402DB4_thunk_fn00402DBA l00402DB4_thunk_fn0040264A
l00402DB4_thunk_fn0040264A:
	call fn0040264A (retsize: 0;)
	return
	// succ:  fn00402D9F_exit
l00402DB4_thunk_fn00402DBA:
	call fn00402DBA (retsize: 0;)
	return
	// succ:  fn00402D9F_exit l00402DB4_thunk_fn00402DBA
l00402DB4_thunk_fn00402DBA:
	call fn00402DBA (retsize: 0;)
	return
	// succ:  fn00402D9F_exit
fn00402D9F_exit:


// fn00402DBA
// Return size: 0
void fn00402DBA()
fn00402DBA_entry:
	goto l00402DBA
	// succ:  l00402DBA
l00402D7A:
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edi = edi + ebx
	SCZO = cond(edi)
	bl = bl ^ bh
	SZO = cond(bl)
	C = false
	bh = bh - 0xFC - C
	SCZO = cond(bh)
	ebx = (word32) ah
	edi = edi + 0x00000001
	SZO = cond(edi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	branch Test(OV,O) l00402D87_thunk_fn00402802
	goto l00402D8D
	// succ:  l00402D8D l00402D87_thunk_fn00402802
l00402D87_thunk_fn00402802:
	call fn00402802 (retsize: 0;)
	return
	// succ:  fn00402DBA_exit
l00402D8D:
	// succ:  l00402D92
l00402D92:
	branch Test(NO,O) l00402D92_thunk_fn00402802
	goto l00402D98
	// succ:  l00402D98 l00402D92_thunk_fn00402802
l00402D92_thunk_fn00402802:
	call fn00402802 (retsize: 0;)
	return
	// succ:  fn00402DBA_exit
l00402D98:
	esp = esp - 0x00000004
	Mem0[esp:word32] = SCZDOP
	__outw(dx, ax)
	Mem0[es:ebx - 0x00000005:word16] = ds
	D = false
	esp = esp + 0x00000004
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	edx = edx | ecx
	SZO = cond(edx)
	C = false
	ecx = ecx ^ edi
	SZO = cond(ecx)
	C = false
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	ch = -ch
	SCZO = cond(ch)
	C = ch == 0x00
	dh = dh - 0xD9 - C
	SCZO = cond(dh)
	dh = dh + 0x01
	SZO = cond(dh)
	eax = eax ^ ebx
	SZO = cond(eax)
	C = false
	branch Test(LE,SZO) l0040264A
	goto l00402DBA
	// succ:  l00402DBA l00402DB4_thunk_fn0040264A
l00402DB4_thunk_fn0040264A:
	call fn0040264A (retsize: 0;)
	return
	// succ:  fn00402DBA_exit
l00402DBA:
	v3 = ax
	ax = ax
	ax = v3
	ecx = ecx
	branch Test(GT,SZO) l0040264A
	goto l00402DC5
	// succ:  l00402DC5 l00402DBF_thunk_fn0040264A
l00402DBF_thunk_fn0040264A:
	call fn0040264A (retsize: 0;)
	return
	// succ:  fn00402DBA_exit
l00402DC5:
	branch Test(SG,S) l00402D7A
	// succ:  l00402DC7 l00402D7A
l00402DC7:
	ah = 0xAC
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	// succ:  l00402DC9_thunk_fn00402DCA
l00402DC9_thunk_fn00402DCA:
	call fn00402DCA (retsize: 0;)
	return
	// succ:  fn00402DBA_exit
fn00402DBA_exit:


// fn00402DCA
// Return size: 0
void fn00402DCA()
fn00402DCA_entry:
	// succ:  l00402DCA
l00402DCA:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = edx
	edx = v3
	ah = ah
	v6 = bx
	bx = bx
	bx = v6
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh ^ ah
	SZO = cond(bh)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	bh = bh - 0x01
	SZO = cond(bh)
	bh = bh - 0x01
	SZO = cond(bh)
	call fn004028E2 (retsize: 4;)
	eax = eax + 0x0000007E
	SCZO = cond(eax)
	ecx = ecx - Mem0[ebp + 0x2B042464:word32]
	SCZO = cond(ecx)
	v16 = Mem0[edx:byte] - 0x01
	Mem0[edx:byte] = v16
	SZO = cond(v16)
	rArg0 = rArg0 + (real64) Mem0[edx:word16]
	__cli()
	esi = esi + edx
	SCZO = cond(esi)
	edx = eax + 0x000000F8
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	bh = cl
	bl = bl + cl
	SCZO = cond(bl)
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	branch Test(ULT,C) TMP!
fn00402DCA_exit:


// fn00402DE3
// Return size: 0
void fn00402DE3()
fn00402DE3_entry:
	// succ:  l00402DE3
l00402DE3:
	esp = fp
	esp = esp + 0x00000004
	edi = edi - esi
	SCZO = cond(edi)
	bl = bl | dh
	SZO = cond(bl)
	C = false
	bh = bh + dl
	SCZO = cond(bh)
	esi = esi + edx
	SCZO = cond(esi)
	edx = eax + 0x000000F8
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	bh = cl
	bl = bl + cl
	SCZO = cond(bl)
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	branch Test(ULT,C) l00402DFD_thunk_fn0040285F
	goto l00402E03
	// succ:  l00402E03 l00402DFD_thunk_fn0040285F
l00402DFD_thunk_fn0040285F:
	call fn0040285F (retsize: 0;)
	return
	// succ:  fn00402DE3_exit
l00402E03:
	ecx = ecx
fn00402DE3_exit:


// fn00402E12
// Return size: 0
void fn00402E12()
fn00402E12_entry:
	// succ:  l00402E12
l00402E12:
	esp = fp
	Mem0[esp:word32] = eax
	v4 = dh
	dh = dh
	dh = v4
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bh = bh + dh
	SCZO = cond(bh)
	bh = bh + 0x01
	SZO = cond(bh)
	al = al - 0x01
	SZO = cond(al)
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	bh = bh - 0x16 - C
	SCZO = cond(bh)
	branch Test(SG,S) l00402E24_thunk_fn0040244E
	goto l00402E2A
	// succ:  l00402E2A l00402E24_thunk_fn0040244E
l00402E24_thunk_fn0040244E:
	call fn0040244E (retsize: 0;)
	return
	// succ:  fn00402E12_exit
l00402E2A:
	v13 = bh
	bh = bh
	bh = v13
	branch Test(NS,S) l00402E2C_thunk_fn0040244E
	goto l00402E32
	// succ:  l00402E32 l00402E2C_thunk_fn0040244E
l00402E2C_thunk_fn0040244E:
	call fn0040244E (retsize: 0;)
	return
	// succ:  fn00402E12_exit
l00402E32:
	SZO = cond(Mem0[edi + 0x2A62761D:word32] & 0xCCDE80E1)
	C = false
	// succ:  l00402E32_thunk_fn00402E3C
l00402E32_thunk_fn00402E3C:
	call fn00402E3C (retsize: 0;)
	return
	// succ:  fn00402E12_exit
fn00402E12_exit:


// fn00402E37
// Return size: 0
void fn00402E37()
fn00402E37_entry:
	// succ:  l00402E37
l00402E37:
	esp = fp
	ah = ah - cl
	SCZO = cond(ah)
	dh = dh - 0xCC - C
	SCZO = cond(dh)
	goto l00402E39_thunk_fn00402E3C
	// succ:  l00402E39_thunk_fn00402E3C
l00402E37:
l00402E39_thunk_fn00402E3C:
	call fn00402E3C (retsize: 0;)
	return
	// succ:  fn00402E37_exit
fn00402E37_exit:


// fn00402E3C
// Return size: 0
void fn00402E3C()
fn00402E3C_entry:
	// succ:  l00402E3C
l00402E3C:
	esp = fp
	bl = bl - 0x7D - C
	SCZO = cond(bl)
	ebx = esi
	ah = bh
	ah = ah + 0x01
	SZO = cond(ah)
	branch Test(SG,S) l00402E45_thunk_fn0040291D
	goto l00402E45_thunk_fn00402E4B
	// succ:  l00402E45_thunk_fn00402E4B l00402E45_thunk_fn0040291D
l00402E3C:
	bl = bl - 0x7D - C
	SCZO = cond(bl)
	ebx = esi
	ah = bh
	ah = ah + 0x01
	SZO = cond(ah)
	branch Test(SG,S) l00402E45_thunk_fn0040291D
	goto l00402E45_thunk_fn00402E4B
	// succ:  l00402E45_thunk_fn00402E4B l00402E45_thunk_fn0040291D
l00402E45_thunk_fn0040291D:
	call fn0040291D (retsize: 0;)
	return
	// succ:  fn00402E3C_exit
l00402E45_thunk_fn0040291D:
	call fn0040291D (retsize: 0;)
	return
	// succ:  fn00402E3C_exit
l00402E45_thunk_fn00402E4B:
	call fn00402E4B (retsize: 0;)
	return
	// succ:  fn00402E3C_exit l00402E45_thunk_fn00402E4B
l00402E45_thunk_fn00402E4B:
	call fn00402E4B (retsize: 0;)
	return
	// succ:  fn00402E3C_exit
l00402E45_thunk_fn00402E4B:
	call fn00402E4B (retsize: 0;)
	return
	// succ:  fn00402E3C_exit
fn00402E3C_exit:


// fn00402E4B
// Return size: 0
void fn00402E4B()
fn00402E4B_entry:
	// succ:  l00402E4B
l00402E4B:
	v3 = al
	al = al
	al = v3
	branch Test(NS,S) l00402E4D_thunk_fn0040291D
	goto l00402E53
	// succ:  l00402E53 l00402E4D_thunk_fn0040291D
l00402E4D_thunk_fn0040291D:
	call fn0040291D (retsize: 0;)
	return
	// succ:  fn00402E4B_exit
l00402E53:
	al = al - 0x32
	SCZO = cond(al)
	eax = Mem0[esi:word32]
	esi = esi + 0x00000004
	esi = esi - 0x00000001
	SZO = cond(esi)
fn00402E4B_exit:


// fn00402E5A
// Return size: 0
void fn00402E5A()
fn00402E5A_entry:
	goto l00402E5A
	// succ:  l00402E5A
l00402419:
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	bl = ~bl
	bl = bl - cl
	SCZO = cond(bl)
	ebx = ebx + esi
	SCZO = cond(ebx)
	eax = eax ^ 0xFFFFFEC8
	SZO = cond(eax)
	C = false
	bl = al
	call fn00402EA6 (retsize: 4;)
	SCZO = cond(dl - Mem0[(esi + 0x24448F83) + esi * 0x08:byte])
	// succ:  l0040242D_thunk_fn00402434
l0040242D_thunk_fn00402434:
	call fn00402434 (retsize: 0;)
	return
	// succ:  fn00402E5A_exit
l00402E5A:
	esp = fp
	edi = edi - eax
	SCZO = cond(edi)
	edi = edi + 0x00000001
	SZO = cond(edi)
	bl = bl ^ cl
	SZO = cond(bl)
	C = false
	bh = bh ^ al
	SZO = cond(bh)
	C = false
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	bh = dh
	bl = bl + 0xA7
	SCZO = cond(bl)
	bh = bh + 0x01
	SZO = cond(bh)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	goto l00402419
	// succ:  l00402419
l00402E5A:
fn00402E5A_exit:


// fn00402EA6
// Return size: 0
void fn00402EA6()
fn00402EA6_entry:
	// succ:  l00402EA6
l00402EA6:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = esi
	esi = v3
	esp = esp - 0x00000002
	Mem0[esp:word16] = ax
	ax = Mem0[esp:word16]
	esp = esp + 0x00000002
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = bl ^ dl
	SZO = cond(bl)
	C = false
	bl = bl - 0x01
	SZO = cond(bl)
	bl = bl | al
	SZO = cond(bl)
	C = false
	bl = bl ^ al
	SZO = cond(bl)
	C = false
	// succ:  l00402EB6_thunk_fn0040274E
l00402EB6_thunk_fn0040274E:
	call fn0040274E (retsize: 0;)
	return
	// succ:  fn00402EA6_exit
fn00402EA6_exit:


// fn00402EE1
// Return size: 0
void fn00402EE1()
fn00402EE1_entry:
	goto l00402EE1
	// succ:  l00402EE1
l0040269B:
	bl = bl - bh
	SCZO = cond(bl)
	al = al + ch
	SCZO = cond(al)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00003000
	dl = dl | ah
	SZO = cond(dl)
	C = false
	dl = dl - 0x8E - C
	SCZO = cond(dl)
	ch = dh
	branch Test(OV,O) l004029ED
	goto l004026B1
	// succ:  l004026B1 l004026AB_thunk_fn004029ED
l004026AB_thunk_fn004029ED:
	call fn004029ED (retsize: 0;)
	return
	// succ:  fn00402EE1_exit
l004026B1:
l00402EE1:
	ch = cl
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	edx = ebx
	cl = cl - 0x79 - C
	SCZO = cond(cl)
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	ch = ch | cl
	SZO = cond(ch)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	bh = bh + 0x57
	SCZO = cond(bh)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	branch Test(EQ,Z) l0040269B
	// succ:  l00402EFB l0040269B
l00402EFB:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	branch Test(NE,Z) l0040269B
	// succ:  l00402F03 l0040269B
l00402F03:
	v16 = Mem0[eax + 0xC12B65EA:word32] << cl
	Mem0[eax + 0xC12B65EA:word32] = v16
	SCZO = cond(v16)
	// succ:  l00402F03_thunk_fn00402F07
l00402F03_thunk_fn00402F07:
	call fn00402F07 (retsize: 0;)
	return
	// succ:  fn00402EE1_exit
fn00402EE1_exit:


// fn00402F07
// Return size: 0
void fn00402F07()
fn00402F07_entry:
	// succ:  l00402F07
l00402F07:
	esp = fp
	eax = eax - ecx
	SCZO = cond(eax)
	bh = bh + ah
	SCZO = cond(bh)
	bh = bh + 0x01
	SZO = cond(bh)
	eax = esi
	dl = dl + 0x01
	SZO = cond(dl)
	ebx = ebx + ecx
	SCZO = cond(ebx)
	branch Test(SG,S) l00402F13_thunk_fn00402D51
	goto l00402F13_thunk_fn00402F19
	// succ:  l00402F13_thunk_fn00402F19 l00402F13_thunk_fn00402D51
l00402F07:
	bh = bh + ah
	SCZO = cond(bh)
	bh = bh + 0x01
	SZO = cond(bh)
	eax = esi
	dl = dl + 0x01
	SZO = cond(dl)
	ebx = ebx + ecx
	SCZO = cond(ebx)
	branch Test(SG,S) l00402D51
	goto l00402F11_thunk_fn00402F19
	// succ:  l00402F11_thunk_fn00402F19 l00402F11_thunk_fn00402D51
l00402F11_thunk_fn00402D51:
	call fn00402D51 (retsize: 0;)
	return
	// succ:  fn00402F07_exit
l00402F11_thunk_fn00402F19:
	call fn00402F19 (retsize: 0;)
	return
	// succ:  fn00402F07_exit
l00402F13_thunk_fn00402D51:
	call fn00402D51 (retsize: 0;)
	return
	// succ:  fn00402F07_exit
l00402F13_thunk_fn00402F19:
	call fn00402F19 (retsize: 0;)
	return
	// succ:  fn00402F07_exit l00402F13_thunk_fn00402F19
l00402F13_thunk_fn00402F19:
	call fn00402F19 (retsize: 0;)
	return
	// succ:  fn00402F07_exit
fn00402F07_exit:


// fn00402F19
// Return size: 0
void fn00402F19()
fn00402F19_entry:
	// succ:  l00402F19
l00402F19:
	di = edi
fn00402F19_exit:


