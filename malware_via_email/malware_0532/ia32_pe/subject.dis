// fn00401008
// Return size: 0
void fn00401008()
fn00401008_entry:
	// succ:  l00401008
l00401008:
	esp = fp
	Mem0[esp:word32] = ebx
	v4 = bh
	bh = bh
	bh = v4
	// succ:  l00401013
l00401013:
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi - 0x00000001
	SZO = cond(esi)
	ebx = ebx | edx
	SZO = cond(ebx)
	C = false
	eax = Mem0[fs:0x00000030:word32]
	edi = edi - esi
	SCZO = cond(edi)
	ebx = esi
	edx = edx - 0x00000001
	SZO = cond(edx)
	edi = edi + eax
	SCZO = cond(edi)
	call fn004010FF (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	es_esi = Mem0[eax + 0x00000049 + eax * 0x00000008:segptr32]
	dh = 0x88
	// succ:  l0040102E_thunk_fn00401030
l0040102E_thunk_fn00401030:
	call fn00401030 (retsize: 0;)
	return
	// succ:  fn00401008_exit
fn00401008_exit:


// fn00401030
// Return size: 4
void fn00401030()
fn00401030_entry:
	// succ:  l00401030
l00401030:
	esp = fp
	Mem0[esp - 0x00000034:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx - eax
	SCZO = cond(ecx)
	ecx = ecx ^ ebx
	SZO = cond(ecx)
	C = false
	edi = edi + esi
	SCZO = cond(edi)
	ecx = ecx - esi
	SCZO = cond(ecx)
	eax = eax | edx
	SZO = cond(eax)
	C = false
	// succ:  l0040103E_thunk_fn004013DE
l0040103E_thunk_fn004013DE:
	call fn004013DE (retsize: 4;)
	return
	// succ:  fn00401030_exit
fn00401030_exit:


// fn00401043
// Return size: 0
void fn00401043()
fn00401043_entry:
	// succ:  l00401043
l00401043:
	esp = esp + 0x00000004
	edi = edi - ecx
	SCZO = cond(edi)
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
	eax = edx
	ebx = ebx + edi
	SCZO = cond(ebx)
	esi = esi + 0x00000001
	SZO = cond(esi)
	branch Test(ULE,CZ) l0040126A
	// succ:  l00401056 l0040126A
l00401056:
l0040126A:
	edx = edx + edi
	SCZO = cond(edx)
	// succ:  l0040126A_thunk_fn0040126C
l0040126A_thunk_fn0040126C:
	call fn0040126C (retsize: 0;)
	return
	// succ:  fn00401043_exit
fn00401043_exit:


// fn00401064
// Return size: 0
void fn00401064()
fn00401064_entry:
	// succ:  l00401064
l00401064:
	esp = fp
	Mem0[esp - 0x00000018:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi - ebx
	SCZO = cond(edi)
	edx = edx + eax
	SCZO = cond(edx)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	esi = esi + edi
	SCZO = cond(esi)
	edi = edi + 0x00000001
	SZO = cond(edi)
	edx = edx + 0x00000001
	SZO = cond(edx)
	ecx = ebx
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	esi = esi - ecx
	SCZO = cond(esi)
	branch Test(LT,SO) l00401377
	// succ:  l0040107C l00401377
l0040107C:
	v12 = dl
	dl = dl
	dl = v12
	branch Test(GE,SO) l00401377
	// succ:  l00401084 l00401377
l00401084:
	v14 = Mem0[ebx:word32] & esi
	Mem0[ebx:word32] = v14
	SZO = cond(Mem0[ebx:word32])
	C = false
	SCZO = cond(al - Mem0[edi:byte])
	edi = edi + 0x00000001
	// succ:  l00401086_thunk_fn00401088
l00401086_thunk_fn00401088:
	call fn00401088 (retsize: 0;)
	return
	// succ:  fn00401064_exit
l00401377:
	esi = esi + 0x00000001
	SZO = cond(esi)
	edi = edi | esi
	SZO = cond(edi)
	C = false
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	eax = Mem0[eax + 0x00000008:word32]
	esi = esi - 0x00000001
	SZO = cond(esi)
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	esi = edx
	ecx = ecx | ebx
	SZO = cond(ecx)
	C = false
	edi = ebx
	branch Test(PE,P) l00401389_thunk_fn004011A5
	goto l0040138F
	// succ:  l0040138F l00401389_thunk_fn004011A5
l00401389_thunk_fn004011A5:
	call fn004011A5 (retsize: 4;)
	return
	// succ:  fn00401064_exit
l0040138F:
	bx = ebx
	cl = cl
	branch Test(PO,P) l00401394_thunk_fn004011A5
	goto l0040139A
	// succ:  l0040139A l00401394_thunk_fn004011A5
l00401394_thunk_fn004011A5:
	call fn004011A5 (retsize: 4;)
	return
	// succ:  fn00401064_exit
l0040139A:
	ch = 0x12
	Mem0[esi:byte] = 0xE1
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	// succ:  l0040139F_thunk_fn004013A0
l0040139F_thunk_fn004013A0:
	call fn004013A0 (retsize: 0;)
	return
	// succ:  fn00401064_exit
fn00401064_exit:


// fn00401088
// Return size: 0
void fn00401088()
fn00401088_entry:
	// succ:  l00401088
l00401088:
	esi = esi + 0x00000001
	SZO = cond(esi)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edi = edx
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	edi = edi + edx
	SCZO = cond(edi)
	esi = esi - edx
	SCZO = cond(esi)
	branch Test(LT,SO) l004012A2
	// succ:  l0040109A l004012A2
l0040109A:
	v12 = eax
	eax = eax
	eax = v12
	// succ:  l004010A1
l004010A1:
	branch Test(GE,SO) l004012A2
	// succ:  l004010A7 l004012A2
l004010A7:
	v15 = Mem0[ecx - 0x0000004A:byte] ^ cl
	Mem0[ecx - 0x0000004A:byte] = v15
	SZO = cond(Mem0[ecx - 0x0000004A:byte])
	C = false
	v16 = Mem0[es:esp:word32]
	Mem0[es:esp:word32] = ecx
	ecx = v16
	// succ:  l004010AA_thunk_fn004010AE
l004010AA_thunk_fn004010AE:
	call fn004010AE (retsize: 0;)
	return
	// succ:  fn00401088_exit
l004012A2:
	edi = edi + ebx
	SCZO = cond(edi)
	// succ:  l004012A2_thunk_fn004012A4
l004012A2_thunk_fn004012A4:
	call fn004012A4 (retsize: 0;)
	return
	// succ:  fn00401088_exit
fn00401088_exit:


// fn004010AB
// Return size: 0
void fn004010AB()
fn004010AB_entry:
	// succ:  l004010AB
l004010AB:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = ecx
	ecx = v3
	// succ:  l004010AB_thunk_fn004010AE
l004010AB_thunk_fn004010AE:
	call fn004010AE (retsize: 0;)
	return
	// succ:  fn004010AB_exit
fn004010AB_exit:


// fn004010AE
// Return size: 0
void fn004010AE()
fn004010AE_entry:
	// succ:  l004010AE
l004010AE:
	esp = fp
	v3 = ebx
	ebx = ebx
	ebx = v3
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi - 0x00000001
	SZO = cond(edi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	eax = eax - 0xEEEEEEEE
	SCZO = cond(eax)
	edx = edx + 0x00000001
	SZO = cond(edx)
	ecx = ecx + esi
	SCZO = cond(ecx)
	edi = edi - esi
	SCZO = cond(edi)
	goto l004010BD_thunk_fn0040123D
	// succ:  l004010BD_thunk_fn0040123D
l004010AE:
	v12 = ebx
	ebx = ebx
	ebx = v12
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi - 0x00000001
	SZO = cond(edi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	eax = eax - 0xEEEEEEEE
	SCZO = cond(eax)
	edx = edx + 0x00000001
	SZO = cond(edx)
	ecx = ecx + esi
	SCZO = cond(ecx)
	edi = edi - esi
	SCZO = cond(edi)
	goto l004010BD_thunk_fn0040123D
	// succ:  l004010BD_thunk_fn0040123D
l004010BD_thunk_fn0040123D:
	call fn0040123D (retsize: 0;)
	return
	// succ:  fn004010AE_exit
l004010BD_thunk_fn0040123D:
	call fn0040123D (retsize: 0;)
	return
	// succ:  fn004010AE_exit
fn004010AE_exit:


// fn004010C7
// Return size: 0
void fn004010C7()
fn004010C7_entry:
	// succ:  l004010C7
l004010C7:
	esp = fp
	esp = esp + 0x00000004
	edi = edx
	ecx = ecx | esi
	SZO = cond(ecx)
	C = false
	edx = edx | eax
	SZO = cond(edx)
	C = false
	ecx = ecx - edx
	SCZO = cond(ecx)
	ecx = ecx + edx
	SCZO = cond(ecx)
	esi = esi - 0x00000001
	SZO = cond(esi)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	edi = edi - 0x00000001
	SZO = cond(edi)
	ecx = ecx + eax
	SCZO = cond(ecx)
	call fn004010AB (retsize: 4;)
	Mem0[edx + 0x00000001:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	al = al ^ 0x1A
	SZO = cond(al)
	C = false
	edi = edi + 0x00000001
	SZO = cond(edi)
	// succ:  l004010E4_thunk_fn004010E5
l004010E4_thunk_fn004010E5:
	call fn004010E5 (retsize: 0;)
	return
	// succ:  fn004010C7_exit
fn004010C7_exit:


// fn004010E5
// Return size: 0
void fn004010E5()
fn004010E5_entry:
	// succ:  l004010E5
l004010E5:
	esp = fp
	Mem0[esp - 0x0000001C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi - 0x00000001
	SZO = cond(edi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	eax = Mem0[eax:word32]
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	edi = eax
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	esi = esi + eax
	SCZO = cond(esi)
	call fn00401064 (retsize: 4;)
	__outw(dx, ax)
fn004010E5_exit:


// fn004010FF
// Return size: 0
void fn004010FF()
fn004010FF_entry:
	// succ:  l004010FF
l004010FF:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = edx
	edx = v3
	v5 = bh
	bh = bh
	bh = v5
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx + ecx
	SCZO = cond(ebx)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ebx = ebx | eax
	SZO = cond(ebx)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	edi = edi + ebx
	SCZO = cond(edi)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	branch Test(ULT,C) l004013A0
	goto l00401114
	// succ:  l00401114 l0040110E_thunk_fn004013A0
l0040110E_thunk_fn004013A0:
	call fn004013A0 (retsize: 0;)
	return
	// succ:  fn004010FF_exit
l00401114:
	// succ:  l00401119
l00401119:
	branch Test(UGE,C) l004013A0
	goto l0040111F
	// succ:  l0040111F l00401119_thunk_fn004013A0
l00401119_thunk_fn004013A0:
	call fn004013A0 (retsize: 0;)
	return
	// succ:  fn004010FF_exit
l0040111F:
	ecx = Mem0[eax - 0x00000056:word32]
	al = al ^ Mem0[edi + 0x8B470F16:byte]
	SZO = cond(al)
	C = false
	// succ:  l00401122_thunk_fn00401128
l00401122_thunk_fn00401128:
	call fn00401128 (retsize: 4;)
	return
	// succ:  fn004010FF_exit
fn004010FF_exit:


// fn00401126
// Return size: 4
void fn00401126()
fn00401126_entry:
	// succ:  l00401126
l00401126:
	esp = fp
	edi = edi + 0x00000001
	SZO = cond(edi)
	edi = ecx
	call fn00401008 (retsize: 4;)
	// succ:  l00401127_thunk_fn00401128 l0040113C_in_fn00401126
l00401126:
l00401127_thunk_fn00401128:
	call fn00401128 (retsize: 4;)
	return
	// succ:  fn00401126_exit
l0040113C_in_fn00401126:
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	return
	// succ:  fn00401126_exit
fn00401126_exit:


// fn00401128
// Return size: 4
void fn00401128()
fn00401128_entry:
	// succ:  l00401128
l00401128:
	esp = fp
	C = true
	esi = esi + ecx
	SCZO = cond(esi)
	ecx = ecx | eax
	SZO = cond(ecx)
	C = false
	ebx = esi
	ecx = ecx + edi
	SCZO = cond(ecx)
	edx = edx - ebx
	SCZO = cond(edx)
	edi = eax
	edx = edx + 0x00000001
	SZO = cond(edx)
	edx = edx + 0x00000001
	SZO = cond(edx)
	call fn00401008 (retsize: 4;)
	goto l0040113C
	// succ:  l0040113C
l00401128:
	esi = esi + ecx
	SCZO = cond(esi)
	ecx = ecx | eax
	SZO = cond(ecx)
	C = false
	ebx = esi
	ecx = ecx + edi
	SCZO = cond(ecx)
	edx = edx - ebx
	SCZO = cond(edx)
	edi = eax
	edx = edx + 0x00000001
	SZO = cond(edx)
	edx = edx + 0x00000001
	SZO = cond(edx)
l0040113C:
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	return
	// succ:  fn00401128_exit
fn00401128_exit:


// fn00401144
// Return size: 0
void fn00401144()
fn00401144_entry:
	// succ:  l00401144
l00401144:
	esp = fp
	Mem0[esp - 0x00000024:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh + 0xEE + C
	SCZO = cond(bh)
	ch = ch - 0x01
	SZO = cond(ch)
	bl = bl + ch
	SCZO = cond(bl)
	dh = dh + 0x8F + C
	SCZO = cond(dh)
	dh = dh - 0x01
	SZO = cond(dh)
	branch Test(LT,SO) l00401154_thunk_fn004013C1
	goto l0040115A
	// succ:  l0040115A l00401154_thunk_fn004013C1
l00401154_thunk_fn004013C1:
	call fn004013C1 (retsize: 0;)
	return
	// succ:  fn00401144_exit
l0040115A:
	v11 = si
	si = si
	si = v11
fn00401144_exit:


// fn00401168
// Return size: 0
void fn00401168()
fn00401168_entry:
	// succ:  l00401168
l00401168:
	esp = fp
	Mem0[esp:word32] = eax
	cx = cx
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ebx
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
fn00401168_exit:


// fn00401180
// Return size: 4
void fn00401180()
fn00401180_entry:
	// succ:  l00401180
l00401180:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	edx = edx + 0x00000001
	SZO = cond(edx)
	edi = edi | ecx
	SZO = cond(edi)
	C = false
	edi = edi + 0x00000001
	SZO = cond(edi)
	edx = edx + esi
	SCZO = cond(edx)
	edi = edi + ecx
	SCZO = cond(edi)
	branch Test(SG,S) l00401088
	goto l00401191
	// succ:  l00401191 l0040118B_thunk_fn00401088
l0040118B_thunk_fn00401088:
	call fn00401088 (retsize: 0;)
	return
	// succ:  fn00401180_exit
l00401191:
	// succ:  l00401197
l00401197:
	eax = eax
	branch Test(NS,S) l00401088
	goto l0040119F
	// succ:  l0040119F l00401199_thunk_fn00401088
l00401199_thunk_fn00401088:
	call fn00401088 (retsize: 0;)
	return
	// succ:  fn00401180_exit
l0040119F:
	eax = eax | 0xF87444ED
	SZO = cond(eax)
	C = false
	v16 = eax
	eax = ebx
	ebx = v16
	call fn004012F9 (retsize: 4;)
	// succ:  l004011A4_thunk_fn004011A5 l004011AE_thunk_fn004011B3
l004011A4_thunk_fn004011A5:
	call fn004011A5 (retsize: 4;)
	return
	// succ:  fn00401180_exit
l004011AE_thunk_fn004011B3:
	call fn004011B3 (retsize: 4;)
	return
	// succ:  fn00401180_exit
fn00401180_exit:


// fn004011A5
// Return size: 4
void fn004011A5()
fn004011A5_entry:
	// succ:  l004011A5
l004011A5:
	esp = fp
	edx = edx + 0x00000001
	SZO = cond(edx)
	ebx = ebx + edi
	SCZO = cond(ebx)
	ebx = ebx - esi
	SCZO = cond(ebx)
	edx = edx + 0x00000001
	SZO = cond(edx)
	edx = edx ^ edi
	SZO = cond(edx)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	call fn004012F9 (retsize: 4;)
	goto l004011AE_thunk_fn004011B3
	// succ:  l004011AE_thunk_fn004011B3
l004011A5:
	edx = edx + 0x00000001
	SZO = cond(edx)
	ebx = ebx + edi
	SCZO = cond(ebx)
	ebx = ebx - esi
	SCZO = cond(ebx)
	edx = edx + 0x00000001
	SZO = cond(edx)
	edx = edx ^ edi
	SZO = cond(edx)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
l004011AE_thunk_fn004011B3:
	call fn004011B3 (retsize: 4;)
	return
	// succ:  fn004011A5_exit
fn004011A5_exit:


// fn004011B3
// Return size: 4
void fn004011B3()
fn004011B3_entry:
	// succ:  l004011B3
l004011B3:
	esp = fp
	v5 = Mem0[edi - 0x0000002B:byte] | dh
	Mem0[edi - 0x0000002B:byte] = v5
	SZO = cond(Mem0[edi - 0x0000002B:byte])
	C = false
	cl = 0xF1
	goto l004011B6_thunk_fn004011B8
	// succ:  l004011B6_thunk_fn004011B8
l004011B3:
	v9 = Mem0[edi - 0x0000002B:byte] | dh
	Mem0[edi - 0x0000002B:byte] = v9
	SZO = cond(Mem0[edi - 0x0000002B:byte])
	C = false
	cl = 0xF1
	goto l004011B6_thunk_fn004011B8
	// succ:  l004011B6_thunk_fn004011B8
l004011B6_thunk_fn004011B8:
	call fn004011B8 (retsize: 4;)
	return
	// succ:  fn004011B3_exit
l004011B6_thunk_fn004011B8:
	call fn004011B8 (retsize: 4;)
	return
	// succ:  fn004011B3_exit
fn004011B3_exit:


// fn004011B8
// Return size: 4
void fn004011B8()
fn004011B8_entry:
	// succ:  l004011B8
l004011B8:
	esp = fp
	branch Test(EQ,Z) l004011BB
	goto l004011BA
	// succ:  l004011BA l004011BB
l004011B8:
l004011BA:
	return
	// succ:  fn004011B8_exit
l004011BB:
	esi = esi - edx
	SCZO = cond(esi)
	ecx = edx
	ecx = ecx | esi
	SZO = cond(ecx)
	C = false
	edx = edx - 0x00000001
	SZO = cond(edx)
	ecx = ecx + eax
	SCZO = cond(ecx)
	edx = edx | ecx
	SZO = cond(edx)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	// succ:  l00401285
l00401285:
	esi = ebx
	goto l00401286
	// succ:  l00401286
l00401296_thunk_fn00401314:
	call fn00401314 (retsize: 0;)
	return
	// succ:  fn004011B8_exit
l00401298:
	branch Test(OV,O) l0040129A
	// succ:  l0040129A
l0040129A:
	bh = bh
	branch Test(GE,SO) l0040129C_thunk_fn00401314
	goto l0040129E
	// succ:  l0040129E l0040129C_thunk_fn00401314
l0040129C_thunk_fn00401314:
	call fn00401314 (retsize: 0;)
	return
	// succ:  fn004011B8_exit
l0040129E:
	al = Mem0[ebx + (uint32) al:byte]
	al = al - 0x4D
	SCZO = cond(al)
	branch Test(ULT,C) l004012A1_thunk_fn004012A6
	// succ:  l004012A1_thunk_fn004012A3 l004012A1_thunk_fn004012A6
l004012A1_thunk_fn004012A3:
	call fn004012A3 (retsize: 0;)
	return
	// succ:  fn004011B8_exit l004012A1_thunk_fn004012A3
l004012A1_thunk_fn004012A3:
	call fn004012A3 (retsize: 0;)
	return
	// succ:  fn004011B8_exit
l004012A1_thunk_fn004012A6:
	call fn004012A6 (retsize: 0;)
	return
	// succ:  fn004011B8_exit
fn004011B8_exit:


// fn004011ED
// Return size: 0
void fn004011ED()
fn004011ED_entry:
	// succ:  l004011ED
l004011ED:
	esp = fp
	ch = ch + 0x0D
	SCZO = cond(ch)
	bh = bh | dl
	SZO = cond(bh)
	C = false
	edx = esi
	dl = dl | ah
	SZO = cond(dl)
	C = false
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	dl = dl - bh
	SCZO = cond(dl)
	call fn00401144 (retsize: 4;)
	ch = 0xEA
	es_ebx = Mem0[esi + 0x00000078:segptr32]
	ebx = ebx & Mem0[edx + 0x0424648D:word32]
	SZO = cond(ebx)
	C = false
	goto l00401204_thunk_fn0040120A
	// succ:  l00401204_thunk_fn0040120A
l004011ED:
l00401204_thunk_fn0040120A:
	call fn0040120A (retsize: 0;)
	return
	// succ:  fn004011ED_exit
fn004011ED_exit:


// fn00401206
// Return size: 0
void fn00401206()
fn00401206_entry:
	// succ:  l00401206
l00401206:
	esp = fp
	esp = esp + 0x00000004
	call fn004010C7 (retsize: 4;)
	// succ:  l00401206_thunk_fn0040120A l0040121C_thunk_fn00401221
l00401206_thunk_fn0040120A:
	call fn0040120A (retsize: 0;)
	return
	// succ:  fn00401206_exit
l0040121C_thunk_fn00401221:
	call fn00401221 (retsize: 0;)
	return
	// succ:  fn00401206_exit
fn00401206_exit:


// fn0040120A
// Return size: 0
void fn0040120A()
fn0040120A_entry:
	// succ:  l0040120A
l0040120A:
	esp = fp
	edx = edx - esi
	SCZO = cond(edx)
	eax = eax & 0xEEEEEEEE
	SZO = cond(eax)
	C = false
	ecx = ecx + edx
	SCZO = cond(ecx)
	edi = edi - edx
	SCZO = cond(edi)
	ecx = ecx - edi
	SCZO = cond(ecx)
	ecx = edi
	esi = esi + 0x00000001
	SZO = cond(esi)
	ecx = esi
	call fn004010C7 (retsize: 4;)
	goto l0040121C_thunk_fn00401221
	// succ:  l0040121C_thunk_fn00401221
l0040120A:
	edx = edx - esi
	SCZO = cond(edx)
	eax = eax & 0xEEEEEEEE
	SZO = cond(eax)
	C = false
	ecx = ecx + edx
	SCZO = cond(ecx)
	edi = edi - edx
	SCZO = cond(edi)
	ecx = ecx - edi
	SCZO = cond(ecx)
	ecx = edi
	esi = esi + 0x00000001
	SZO = cond(esi)
	ecx = esi
l0040121C_thunk_fn00401221:
	call fn00401221 (retsize: 0;)
	return
	// succ:  fn0040120A_exit
fn0040120A_exit:


// fn00401221
// Return size: 0
void fn00401221()
fn00401221_entry:
	// succ:  l00401221
l00401221:
	esp = fp
	__outb(0xFA, al)
l00401221:
	__outb(0xFA, al)
fn00401221_exit:


// fn00401228
// Return size: 4
void fn00401228()
fn00401228_entry:
	// succ:  l00401228
l00401228:
	esp = fp
	ecx = ecx ^ eax
	SZO = cond(ecx)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	edx = edx ^ ecx
	SZO = cond(edx)
	C = false
	eax = eax | eax
	SZO = cond(eax)
	C = false
	goto l00401233_thunk_fn004011B8
	// succ:  l00401233_thunk_fn004011B8
l00401228:
l00401233_thunk_fn004011B8:
	call fn004011B8 (retsize: 4;)
	return
	// succ:  fn00401228_exit
fn00401228_exit:


// fn0040123D
// Return size: 0
void fn0040123D()
fn0040123D_entry:
	// succ:  l0040123D
l0040123D:
	esp = fp
	esi = esi ^ edi
	SZO = cond(esi)
	C = false
	edx = edx | eax
	SZO = cond(edx)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	goto l00401242_thunk_fn00401244
	// succ:  l00401242_thunk_fn00401244
l0040123D:
l00401242_thunk_fn00401244:
	call fn00401244 (retsize: 0;)
	return
	// succ:  fn0040123D_exit
l0040124A_thunk_fn00401228:
	call fn00401228 (retsize: 4;)
	return
	// succ:  fn0040123D_exit
fn0040123D_exit:


// fn00401244
// Return size: 0
void fn00401244()
fn00401244_entry:
	// succ:  l00401244
l00401244:
	esp = fp
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	edx = ecx
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	// succ:  l0040124A_thunk_fn00401228 l0040124A_thunk_fn00401228
l00401244:
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	edx = ecx
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
l0040124A_thunk_fn00401228:
	call fn00401228 (retsize: 0;)
	return
	// succ:  fn00401244_exit
fn00401244_exit:


// fn00401250
// Return size: 0
void fn00401250()
fn00401250_entry:
	// succ:  l00401250
l00401250:
	ebx = ebx - ecx
	SCZO = cond(ebx)
	edx = edx + 0x00000001
	SZO = cond(edx)
	bh = bh ^ dh
	SZO = cond(bh)
	C = false
	ch = ch + 0x01
	SZO = cond(ch)
	cl = cl ^ dl
	SZO = cond(cl)
	C = false
	bh = bh + cl
	SCZO = cond(bh)
	cl = cl + 0x96
	SCZO = cond(cl)
	call fn00401330 (retsize: 4;)
	C = true
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	esp = esp - 0x000075F0
	ebx = 0x8BD703D0
	// succ:  l00401268_thunk_fn0040126D
l00401268_thunk_fn0040126D:
	call fn0040126D (retsize: 0;)
	return
	// succ:  fn00401250_exit
fn00401250_exit:


// fn0040126C
// Return size: 0
void fn0040126C()
fn0040126C_entry:
	// succ:  l0040126C
l0040126C:
	esp = fp
	edi = edx
	goto l0040126C_thunk_fn0040126E
	// succ:  l0040126C_thunk_fn0040126E
l0040126C:
	edi = edx
	call fn00401030 (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	// succ:  l0040126C_thunk_fn0040126D l0040127C_thunk_fn00401281
l0040126C_thunk_fn0040126D:
	call fn0040126D (retsize: 0;)
	return
	// succ:  fn0040126C_exit
l0040126C_thunk_fn0040126E:
	call fn0040126E (retsize: 0;)
	return
	// succ:  fn0040126C_exit
l0040127C_thunk_fn00401281:
	call fn00401281 (retsize: 0;)
	return
	// succ:  fn0040126C_exit
fn0040126C_exit:


// fn0040126D
// Return size: 0
void fn0040126D()
fn0040126D_entry:
	// succ:  l0040126D
l0040126D:
	esp = fp
	__cli()
	goto l0040126D_thunk_fn0040126E
	// succ:  l0040126D_thunk_fn0040126E
l0040126D:
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ecx = edx
	esi = esi + 0x00000001
	SZO = cond(esi)
	esi = esi | edi
	SZO = cond(esi)
	C = false
	ebx = edi
	eax = eax + esi
	SCZO = cond(eax)
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	esi = esi | edx
	SZO = cond(esi)
	C = false
l0040126D_thunk_fn0040126E:
	call fn0040126E (retsize: 0;)
	return
	// succ:  fn0040126D_exit
fn0040126D_exit:


// fn0040126E
// Return size: 0
void fn0040126E()
fn0040126E_entry:
	// succ:  l0040126E
l0040126E:
	esp = fp
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ecx = edx
	esi = esi + 0x00000001
	SZO = cond(esi)
	esi = esi | edi
	SZO = cond(esi)
	C = false
	ebx = edi
	eax = eax + esi
	SCZO = cond(eax)
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	esi = esi | edx
	SZO = cond(esi)
	C = false
	call fn00401030 (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	goto l0040127C_thunk_fn00401281
	// succ:  l0040127C_thunk_fn00401281
l0040126E:
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ecx = edx
	esi = esi + 0x00000001
	SZO = cond(esi)
	esi = esi | edi
	SZO = cond(esi)
	C = false
	ebx = edi
	eax = eax + esi
	SCZO = cond(eax)
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	esi = esi | edx
	SZO = cond(esi)
	C = false
	call fn00401030 (retsize: 4;)
	goto l0040127C_thunk_fn00401281
	// succ:  l0040127C_thunk_fn00401281
l0040127C_thunk_fn00401281:
	call fn00401281 (retsize: 0;)
	return
	// succ:  fn0040126E_exit
l0040127C_thunk_fn00401281:
	call fn00401281 (retsize: 0;)
	return
	// succ:  fn0040126E_exit
fn0040126E_exit:


// fn00401281
// Return size: 0
void fn00401281()
fn00401281_entry:
	// succ:  l00401281
l00401281:
	esp = fp
	edi = 0x8B505225
l00401281:
	edi = 0x8B505225
fn00401281_exit:


// fn004012A3
// Return size: 0
void fn004012A3()
fn004012A3_entry:
	// succ:  l004012A3
l004012A3:
	esp = fp
	goto l004012A3_thunk_fn004012A4
	// succ:  l004012A3_thunk_fn004012A4
l004012A3:
l004012A3_thunk_fn004012A4:
	call fn004012A4 (retsize: 0;)
	return
	// succ:  fn004012A3_exit
fn004012A3_exit:


// fn004012A4
// Return size: 0
void fn004012A4()
fn004012A4_entry:
	// succ:  l004012A4
l004012A4:
	esp = fp
	ecx = ecx + esi
	SCZO = cond(ecx)
	goto l004012A4_thunk_fn004012A6
	// succ:  l004012A4_thunk_fn004012A6
l004012A4:
	ecx = ecx + esi
	SCZO = cond(ecx)
	goto l004012A4_thunk_fn004012A6
	// succ:  l004012A4_thunk_fn004012A6
l004012A4_thunk_fn004012A6:
	call fn004012A6 (retsize: 0;)
	return
	// succ:  fn004012A4_exit
l004012A4_thunk_fn004012A6:
	call fn004012A6 (retsize: 0;)
	return
	// succ:  fn004012A4_exit
fn004012A4_exit:


// fn004012A6
// Return size: 0
void fn004012A6()
fn004012A6_entry:
	// succ:  l004012A6
l004012A6:
	esp = fp
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	edx = edx | ebx
	SZO = cond(edx)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	ebx = eax
	call fn004012D3 (retsize: 4;)
	branch Test(ULT,C) l004012B2_thunk_fn0040126C
	goto l004012B4
	// succ:  l004012B4 l004012B2_thunk_fn0040126C
l004012A6:
l004012B2_thunk_fn0040126C:
	call fn0040126C (retsize: 0;)
	return
	// succ:  fn004012A6_exit
l004012B4:
	ecx = ecx - 0x00000001
	branch Test(EQ,Z) && ecx != 0x00000000 l004012B4_thunk_fn00401244
	goto l004012B4_thunk_fn004012B7
	// succ:  l004012B4_thunk_fn004012B7 l004012B4_thunk_fn00401244
l004012B4_thunk_fn00401244:
	call fn00401244 (retsize: 0;)
	return
	// succ:  fn004012A6_exit
l004012B4_thunk_fn004012B7:
	call fn004012B7 (retsize: 0;)
	return
	// succ:  fn004012A6_exit l004012B4_thunk_fn004012B7
l004012B4_thunk_fn004012B7:
	call fn004012B7 (retsize: 0;)
	return
	// succ:  fn004012A6_exit
fn004012A6_exit:


// fn004012B6
// Return size: 0
void fn004012B6()
fn004012B6_entry:
	// succ:  l004012B6
l004012B6:
	esp = esp + 0x00000004
	// succ:  l004012B6_thunk_fn004012B7
l004012B6_thunk_fn004012B7:
	call fn004012B7 (retsize: 0;)
	return
	// succ:  fn004012B6_exit
fn004012B6_exit:


// fn004012B7
// Return size: 0
void fn004012B7()
fn004012B7_entry:
	// succ:  l004012B7
l004012B7:
	esp = fp
	al = al & 0x04
	SZO = cond(al)
	C = false
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	ebx = ebx - esi
	SCZO = cond(ebx)
	edi = edi + edx
	SCZO = cond(edi)
	esi = eax
	edi = ebx
	edx = edx | edi
	SZO = cond(edx)
	C = false
	ebx = ebx - edx
	SCZO = cond(ebx)
	call fn004010E5 (retsize: 4;)
	v13 = Mem0[ebp + 0x00000015:word32] | 0xFFFFFF9F
	Mem0[ebp + 0x00000015:word32] = v13
	SZO = cond(Mem0[ebp + 0x00000015:word32])
	C = false
	v14 = eax
	eax = esp
	esp = v14
	eax = eax | 0x0424648D
	SZO = cond(eax)
	C = false
	goto l004012D2_thunk_fn004012D7
	// succ:  l004012D2_thunk_fn004012D7
l004012B7:
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	ebx = ebx - esi
	SCZO = cond(ebx)
	edi = edi + edx
	SCZO = cond(edi)
	esi = eax
	edi = ebx
	edx = edx | edi
	SZO = cond(edx)
	C = false
	ebx = ebx - edx
	SCZO = cond(ebx)
	call fn004010E5 (retsize: 4;)
	v15 = Mem0[ebp + 0x00000015:word32] | 0xFFFFFF9F
	Mem0[ebp + 0x00000015:word32] = v15
	SZO = cond(Mem0[ebp + 0x00000015:word32])
	C = false
	v16 = eax
	eax = esp
	esp = v16
	eax = eax | 0x0424648D
	SZO = cond(eax)
	C = false
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	edx = edx - edi
	SCZO = cond(edx)
	esi = esi + 0x00000001
	SZO = cond(esi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	edx = edx ^ esi
	SZO = cond(edx)
	C = false
	edi = ecx
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	esi = esi + ecx
	SCZO = cond(esi)
	branch Test(SG,S) l00401250
	goto l004012E4_thunk_fn004012EA
	// succ:  l004012E4_thunk_fn004012EA l004012E4_thunk_fn00401250
l004012D2_thunk_fn004012D7:
	call fn004012D7 (retsize: 0;)
	return
	// succ:  fn004012B7_exit
l004012E4_thunk_fn00401250:
	call fn00401250 (retsize: 0;)
	return
	// succ:  fn004012B7_exit
l004012E4_thunk_fn004012EA:
	call fn004012EA (retsize: 0;)
	return
	// succ:  fn004012B7_exit
fn004012B7_exit:


// fn004012D3
// Return size: 0
void fn004012D3()
fn004012D3_entry:
	// succ:  l004012D3
l004012D3:
	esp = fp
	esp = esp + 0x00000004
	// succ:  l004012D3_thunk_fn004012D7
l004012D3_thunk_fn004012D7:
	call fn004012D7 (retsize: 0;)
	return
	// succ:  fn004012D3_exit
fn004012D3_exit:


// fn004012D7
// Return size: 0
void fn004012D7()
fn004012D7_entry:
	// succ:  l004012D7
l004012D7:
	esp = fp
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	edx = edx - edi
	SCZO = cond(edx)
	esi = esi + 0x00000001
	SZO = cond(esi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	edx = edx ^ esi
	SZO = cond(edx)
	C = false
	edi = ecx
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	esi = esi + ecx
	SCZO = cond(esi)
	branch Test(SG,S) l004012E4_thunk_fn00401250
	goto l004012E4_thunk_fn004012EA
	// succ:  l004012E4_thunk_fn004012EA l004012E4_thunk_fn00401250
l004012D7:
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	edx = edx - edi
	SCZO = cond(edx)
	esi = esi + 0x00000001
	SZO = cond(esi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	edx = edx ^ esi
	SZO = cond(edx)
	C = false
	edi = ecx
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	esi = esi + ecx
	SCZO = cond(esi)
	branch Test(SG,S) l004012E4_thunk_fn00401250
	goto l004012E4_thunk_fn004012EA
	// succ:  l004012E4_thunk_fn004012EA l004012E4_thunk_fn00401250
l004012E4_thunk_fn00401250:
	call fn00401250 (retsize: 0;)
	return
	// succ:  fn004012D7_exit
l004012E4_thunk_fn00401250:
	call fn00401250 (retsize: 0;)
	return
	// succ:  fn004012D7_exit
l004012E4_thunk_fn004012EA:
	call fn004012EA (retsize: 0;)
	return
	// succ:  fn004012D7_exit l004012E4_thunk_fn004012EA
l004012E4_thunk_fn004012EA:
	call fn004012EA (retsize: 0;)
	return
	// succ:  fn004012D7_exit
l004012E4_thunk_fn004012EA:
	call fn004012EA (retsize: 0;)
	return
	// succ:  fn004012D7_exit l004012E4_thunk_fn004012EA
l004012E4_thunk_fn004012EA:
	call fn004012EA (retsize: 0;)
	return
	// succ:  fn004012D7_exit
fn004012D7_exit:


// fn004012EA
// Return size: 0
void fn004012EA()
fn004012EA_entry:
	// succ:  l004012EA
l004012EA:
fn004012EA_exit:


// fn004012F9
// Return size: 0
void fn004012F9()
fn004012F9_entry:
	// succ:  l004012F9
l004012F9:
	esp = fp
	esp = esp + 0x00000004
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
	edi = edi | esi
	SZO = cond(edi)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	edi = edi | ecx
	SZO = cond(edi)
	C = false
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	esi = esi + ebx
	SCZO = cond(esi)
	call fn00401206 (retsize: 4;)
	ch = 0x54
	v12 = Mem0[ebp + 0x3EF53354:byte] - 0x01
	Mem0[ebp + 0x3EF53354:byte] = v12
	SZO = cond(v12)
	// succ:  l0040130E_thunk_fn00401314
l0040130E_thunk_fn00401314:
	call fn00401314 (retsize: 0;)
	return
	// succ:  fn004012F9_exit
fn004012F9_exit:


// fn00401314
// Return size: 0
void fn00401314()
fn00401314_entry:
	// succ:  l00401314
l00401314:
	esp = fp
	edi = edi + 0x00000001
	SZO = cond(edi)
	ecx = ecx | ebx
	SZO = cond(ecx)
	C = false
	ecx = ecx | edx
	SZO = cond(ecx)
	C = false
	eax = eax ^ edx
	SZO = cond(eax)
	C = false
	edx = edx | esi
	SZO = cond(edx)
	C = false
	edx = edx + eax
	SCZO = cond(edx)
	edx = edx ^ esi
	SZO = cond(edx)
	C = false
	ebx = ebx - edx
	SCZO = cond(ebx)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	esi = esi | edi
	SZO = cond(esi)
	C = false
l00401314:
fn00401314_exit:


// fn00401330
// Return size: 0
void fn00401330()
fn00401330_entry:
	// succ:  l00401330
l00401330:
	esp = fp
	Mem0[esp:word32] = esi
	bl = bl
	al = al
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx | edi
	SZO = cond(edx)
	C = false
	ch = ch + 0x01
	SZO = cond(ch)
	bl = bl + 0x01
	SZO = cond(bl)
	bl = 0x1D
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	dl = dl + 0x07
	SCZO = cond(dl)
	branch Test(LE,SZO) l00401345_thunk_fn004011ED
	goto l0040134B
	// succ:  l0040134B l00401345_thunk_fn004011ED
l00401345_thunk_fn004011ED:
	call fn004011ED (retsize: 0;)
	return
	// succ:  fn00401330_exit
l0040134B:
	// succ:  l00401351
l00401351:
	cx = ecx
	branch Test(GT,SZO) l00401354_thunk_fn004011ED
	goto l0040135A
	// succ:  l0040135A l00401354_thunk_fn004011ED
l00401354_thunk_fn004011ED:
	call fn004011ED (retsize: 0;)
	return
	// succ:  fn00401330_exit
l0040135A:
	int3()
	ch = ch + Mem0[cs:edx + 0x33D90BED:byte]
	SCZO = cond(ch)
	// succ:  l0040135B_thunk_fn00401362
l0040135B_thunk_fn00401362:
	call fn00401362 (retsize: 0;)
	return
	// succ:  fn00401330_exit
fn00401330_exit:


// fn0040135F
// Return size: 0
void fn0040135F()
fn0040135F_entry:
	// succ:  l0040135F
l0040135F:
	esp = fp
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
	edx = edx ^ ebx
	SZO = cond(edx)
	C = false
	goto l00401361_thunk_fn00401362
	// succ:  l00401361_thunk_fn00401362
l0040135F:
l00401361_thunk_fn00401362:
	call fn00401362 (retsize: 0;)
	return
	// succ:  fn0040135F_exit
fn0040135F_exit:


// fn00401362
// Return size: 0
void fn00401362()
fn00401362_entry:
	// succ:  l00401362
l00401362:
	esp = fp
	v4 = (Mem0[eax + 0xFE8B21D5:word32] & 0x00000001 << 0x20 - cl) != 0x00000000
	Mem0[eax + 0xFE8B21D5:word32] = __rol(Mem0[eax + 0xFE8B21D5:word32], cl)
	C = v4
	esi = esi - eax
	SCZO = cond(esi)
	esi = esi + edi
	SCZO = cond(esi)
	goto l0040136A_thunk_fn0040136C
	// succ:  l0040136A_thunk_fn0040136C
l00401362:
	ch = ch + 0x21 + C
	SCZO = cond(ch)
	edi = esi
	esi = esi - eax
	SCZO = cond(esi)
	esi = esi + edi
	SCZO = cond(esi)
	goto l0040136A_thunk_fn0040136C
	// succ:  l0040136A_thunk_fn0040136C
l0040136A_thunk_fn0040136C:
	call fn0040136C (retsize: 0;)
	return
	// succ:  fn00401362_exit
l0040136A_thunk_fn0040136C:
	call fn0040136C (retsize: 0;)
	return
	// succ:  fn00401362_exit
fn00401362_exit:


// fn0040136C
// Return size: 4
void fn0040136C()
fn0040136C_entry:
	// succ:  l0040136C
l0040136C:
	esp = fp
	edx = edx + ebx
	SCZO = cond(edx)
	goto l0040136E_thunk_fn00401126
	// succ:  l0040136E_thunk_fn00401126
l0040136C:
l0040136E_thunk_fn00401126:
	call fn00401126 (retsize: 4;)
	return
	// succ:  fn0040136C_exit
fn0040136C_exit:


// fn004013A0
// Return size: 0
void fn004013A0()
fn004013A0_entry:
	goto l004013A0
	// succ:  l004013A0
l004011D2:
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	eax = Mem0[eax + 0x00000090:word32]
	ecx = ecx + eax
	SCZO = cond(ecx)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	esi = edx
	edx = edx | eax
	SZO = cond(edx)
	C = false
	edi = ebx
	ebx = ebx - eax
	SCZO = cond(ebx)
	call fn00401168 (retsize: 4;)
	ebp = ebp + 0x00000001
	SZO = cond(ebp)
	al = al - Mem0[ecx:byte]
	SCZO = cond(al)
	return
	// succ:  fn004013A0_exit
l004013A0:
	ecx = ecx - ebx
	SCZO = cond(ecx)
	esi = esi + eax
	SCZO = cond(esi)
	edx = edx + 0x00000001
	SZO = cond(edx)
	ecx = ecx + edx
	SCZO = cond(ecx)
	ecx = ecx - edx
	SCZO = cond(ecx)
	edi = edx
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	branch Test(EQ,Z) l004011D2
	// succ:  l004013B2 l004011D2
l004013B2:
	edi = edi
	branch Test(NE,Z) l004011D2
	// succ:  l004013BA l004011D2
l004013BA:
	ebp = ebp - 0x00000001
	SZO = cond(ebp)
	Mem0[esi + 0x0000007B:real64] = rArg0
	// succ:  l004013BB_thunk_fn004013D2
l004013BB_thunk_fn004013D2:
	call fn004013D2 (retsize: 0;)
	return
	// succ:  fn004013A0_exit
fn004013A0_exit:


// fn004013C1
// Return size: 0
void fn004013C1()
fn004013C1_entry:
	// succ:  l004013C1
l004013C1:
	esp = fp
	dh = 0x9F
	dh = 0x16
	dl = dl | al
	SZO = cond(dl)
	C = false
	bh = bh - cl
	SCZO = cond(bh)
	cl = cl + ah
	SCZO = cond(cl)
	ch = ch - 0x38 - C
	SCZO = cond(ch)
	dh = dh - ch
	SCZO = cond(dh)
	branch Test(ULT,C) l004013D0_thunk_fn0040135F
	goto l004013D0_thunk_fn004013D2
	// succ:  l004013D0_thunk_fn004013D2 l004013D0_thunk_fn0040135F
l004013C1:
	v14 = Mem0[edx:byte] >>u 0x01
	Mem0[edx:byte] = v14
	SCZO = cond(v14)
	C = true
	cl = cl + ah
	SCZO = cond(cl)
	ch = ch - 0x38 - C
	SCZO = cond(ch)
	dh = dh - ch
	SCZO = cond(dh)
	branch Test(ULT,C) l004013D0_thunk_fn0040135F
	// succ:  l004013CB_thunk_fn004013D2 l004013D0_thunk_fn0040135F
l004013CB_thunk_fn004013D2:
	call fn004013D2 (retsize: 0;)
	return
	// succ:  fn004013C1_exit
l004013D0_thunk_fn0040135F:
	call fn0040135F (retsize: 0;)
	return
	// succ:  fn004013C1_exit
l004013D0_thunk_fn0040135F:
	call fn0040135F (retsize: 0;)
	return
	// succ:  fn004013C1_exit
l004013D0_thunk_fn004013D2:
	call fn004013D2 (retsize: 0;)
	return
	// succ:  fn004013C1_exit l004013D0_thunk_fn004013D2
l004013D0_thunk_fn004013D2:
	call fn004013D2 (retsize: 0;)
	return
	// succ:  fn004013C1_exit
fn004013C1_exit:


// fn004013D2
// Return size: 0
void fn004013D2()
fn004013D2_entry:
	goto l004013D2
	// succ:  l004013D2
l004013BD:
	al = al + 0x52
	SCZO = cond(al)
	v15 = Mem0[esi + 0x0A16B69F:byte] << cl
	Mem0[esi + 0x0A16B69F:byte] = v15
	SCZO = cond(v15)
	// succ:  l004013BF_thunk_fn004013C1
l004013BF_thunk_fn004013C1:
	call fn004013C1 (retsize: 0;)
	return
	// succ:  fn004013D2_exit
l004013D2:
	branch Test(NE,Z) l004013D4
	// succ:  l004013D4
l004013D4:
	branch Test(UGE,C) l004013D4_thunk_fn0040135F
	goto l004013D6
	// succ:  l004013D6 l004013D4_thunk_fn0040135F
l004013D4_thunk_fn0040135F:
	call fn0040135F (retsize: 0;)
	return
	// succ:  fn004013D2_exit
l004013D6:
	esp = esp - 0x00000004
	Mem0[esp:word32] = cs
	branch Test(OV,O) l004013BD
	// succ:  l004013D9 l004013BD
l004013D9:
	es_eax = Mem0[ebp - 0x00000048:segptr32]
	al = 0x32
	// succ:  l004013DC_thunk_fn004013DE
l004013DC_thunk_fn004013DE:
	call fn004013DE (retsize: 0;)
	return
	// succ:  fn004013D2_exit
fn004013D2_exit:


// fn004013DE
// Return size: 4
void fn004013DE()
fn004013DE_entry:
	// succ:  l004013DE
l004013DE:
	esp = fp
	call fn00402700 (retsize: 4;)
	Mem0[eax + 0x2C4A267C:byte] = 0x7B
	branch Test(OV,O) l004013EA_thunk_fn0040136C
	goto l004013EC
	// succ:  l004013EC l004013EA_thunk_fn0040136C
l004013DE:
l004013EA_thunk_fn0040136C:
	call fn0040136C (retsize: 4;)
	return
	// succ:  fn004013DE_exit
l004013EC:
	ah = FPUF
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0xE785F068
	SCZDOP = Mem0[esp:word32]
	esp = esp + 0x00000004
	C = __daa(al, &al)
	rArg0 = rArg0 / Mem0[eax + 0x00000030:real32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x1B586968
	v12 = Mem0[eax - 0x00000028:word32] >> cl
	Mem0[eax - 0x00000028:word32] = v12
	SCZO = cond(v12)
	branch Test(GT,SZO) l00401400_thunk_fn004013C1
	goto l00401402
	// succ:  l00401402 l00401400_thunk_fn004013C1
l00401400_thunk_fn004013C1:
	call fn004013C1 (retsize: 0;)
	return
	// succ:  fn004013DE_exit
l00401402:
	SCZO = ah
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x1AA64268
	rLoc1 = (real64) Mem0[edx + 0x68957D70:int16]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x92DD2199
	ss = Mem0[esp:selector]
	esp = esp + 0x00000002
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x877F6868
	v23 = eax
	eax = ecx
	ecx = v23
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0xD51DC768
	SZO = cond(Mem0[ebp + 0xDD1D44D3:byte] & dl)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = SCZDOP
	v25 = eax
	eax = ebp
	ebp = v25
fn004013DE_exit:


// fn004020AA
// Return size: 4
void fn004020AA()
fn004020AA_entry:
	// succ:  l004020AA
l004020AA:
	esp = fp
	bl = ah
	bh = bh + dl
	SCZO = cond(bh)
	bl = 0x96
	eax = eax + 0x00000008
	SCZO = cond(eax)
	bl = bl | bh
	SZO = cond(bl)
	C = false
	bl = bl + al
	SCZO = cond(bl)
	ebx = ebx + edi
	SCZO = cond(ebx)
	call fn0040290D (retsize: 4;)
	__cli()
	eax = Mem0[esi:word32]
	esi = esi + 0x00000004
	eax = Mem0[0x0AD92EF3:word32]
	goto l004020C0_thunk_fn004020C5
	// succ:  l004020C0_thunk_fn004020C5
l004020AA:
l004020C0_thunk_fn004020C5:
	call fn004020C5 (retsize: 4;)
	return
	// succ:  fn004020AA_exit
fn004020AA_exit:


// fn004020C4
// Return size: 4
void fn004020C4()
fn004020C4_entry:
	// succ:  l004020C4
l004020C4:
	esp = fp
	al = al | bl
	SZO = cond(al)
	C = false
	goto l004020C4_thunk_fn004020C5
	// succ:  l004020C4_thunk_fn004020C5
l004020C4:
l004020C4_thunk_fn004020C5:
	call fn004020C5 (retsize: 4;)
	return
	// succ:  fn004020C4_exit
l004020CF_thunk_fn00402AE1:
	call fn00402AE1 (retsize: 0;)
	return
	// succ:  fn004020C4_exit
fn004020C4_exit:


// fn004020C5
// Return size: 4
void fn004020C5()
fn004020C5_entry:
	// succ:  l004020C5
l004020C5:
	esp = fp
	return
	// succ:  fn004020C5_exit
l004020C5:
	al = al - 0x01
	SZO = cond(al)
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	edx = edx - 0x00000001
	SZO = cond(edx)
	bh = bh - bl
	SCZO = cond(bh)
	ch = ch | ah
	SZO = cond(ch)
	C = false
fn004020C5_exit:


// fn004020D9
// Return size: 0
void fn004020D9()
fn004020D9_entry:
	// succ:  l004020D9
l004020D9:
	ecx = ecx + eax
	SCZO = cond(ecx)
	dl = dl + 0x01
	SZO = cond(dl)
	ch = ch ^ bh
	SZO = cond(ch)
	C = false
	dh = dh + 0xFC
	SCZO = cond(dh)
	cl = cl - 0x01
	SZO = cond(cl)
	call eax (retsize: 4;)
	branch Test(SG,S) l0040231B
	// succ:  l004020EC l0040231B
l004020EC:
	v14 = bl
	bl = bl
	bl = v14
	branch Test(NS,S) l0040231B
	// succ:  l004020F4 l0040231B
l004020F4:
	eax = eax + 0x0C1AA1F7 + C
	SCZO = cond(eax)
	v17 = (Mem0[esp + 0xEC24448F + esi * 0x08:byte] & 0x01 << 0x08 - cl) != 0x00
	Mem0[esp + 0xEC24448F + esi * 0x08:byte] = __rol(Mem0[esp + 0xEC24448F + esi * 0x08:byte], cl)
	C = v17
	ebx = ebx - edx
	SCZO = cond(ebx)
	dh = dh ^ ch
	SZO = cond(dh)
	C = false
	ah = ah ^ dl
	SZO = cond(ah)
	C = false
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh ^ al
	SZO = cond(bh)
	C = false
	ah = ah + dh
	SCZO = cond(ah)
	branch Test(ULE,CZ) l0040215F
	// succ:  l0040210B_thunk_fn0040210D l0040210B_thunk_fn0040215F
l0040210B_thunk_fn0040210D:
	call fn0040210D (retsize: 0;)
	return
	// succ:  fn004020D9_exit
l0040210B_thunk_fn0040215F:
	call fn0040215F (retsize: 0;)
	return
	// succ:  fn004020D9_exit
l0040231B:
	ch = 0x65
	cl = cl | dh
	SZO = cond(cl)
	C = false
	esi = esi + edi
	SCZO = cond(esi)
	dl = dl - bl
	SCZO = cond(dl)
	dh = dh + 0x01
	SZO = cond(dh)
	bh = bh + 0x83
	SCZO = cond(bh)
	ebx = ecx
	dl = dl + 0xE0 + C
	SCZO = cond(dl)
	edi = edi + 0x00000001
	SZO = cond(edi)
	bl = bl | ah
	SZO = cond(bl)
	C = false
	// succ:  l00402330_thunk_fn00402985
l00402330_thunk_fn00402985:
	call fn00402985 (retsize: 0;)
	return
	// succ:  fn004020D9_exit
fn004020D9_exit:


// fn004020FC
// Return size: 0
void fn004020FC()
fn004020FC_entry:
	// succ:  l004020FC
l004020FC:
	esp = fp
	Mem0[esp - 0x00000014:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx - edx
	SCZO = cond(ebx)
	dh = dh ^ ch
	SZO = cond(dh)
	C = false
	ah = ah ^ dl
	SZO = cond(ah)
	C = false
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh ^ al
	SZO = cond(bh)
	C = false
	ah = ah + dh
	SCZO = cond(ah)
	branch Test(ULE,CZ) l0040210B_thunk_fn0040215F
	// succ:  l0040210B_thunk_fn0040210D l0040210B_thunk_fn0040215F
l0040210B_thunk_fn0040210D:
	call fn0040210D (retsize: 0;)
	return
	// succ:  fn004020FC_exit l0040210B_thunk_fn0040210D
l0040210B_thunk_fn0040210D:
	call fn0040210D (retsize: 0;)
	return
	// succ:  fn004020FC_exit
l0040210B_thunk_fn0040215F:
	call fn0040215F (retsize: 0;)
	return
	// succ:  fn004020FC_exit
fn004020FC_exit:


// fn0040210D
// Return size: 0
void fn0040210D()
fn0040210D_entry:
	// succ:  l0040210D
l0040210D:
	dl = dl
fn0040210D_exit:


// fn00402116
// Return size: 4
void fn00402116()
fn00402116_entry:
	// succ:  l00402116
l00402116:
	esp = fp
	bh = bh + 0x13 + C
	SCZO = cond(bh)
	bl = ~bl
	bh = bh + 0x3C + C
	SCZO = cond(bh)
	bl = bl - dh
	SCZO = cond(bl)
	bl = bl - 0xCC - C
	SCZO = cond(bl)
	bh = bh - 0x01
	SZO = cond(bh)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	ebx = ebx - edi
	SCZO = cond(ebx)
	branch Test(OV,O) l004023E7
	goto l0040212F
	// succ:  l0040212F l004023E7
l00402116:
l0040212F:
	edi = edi
	branch Test(NO,O) l004023E7
	// succ:  l00402137 l004023E7
l00402137:
	eax = eax | esi
	SZO = cond(eax)
	C = false
	__outdw(edx, eax)
	esi = esi + 0x00000004
	return
	// succ:  fn00402116_exit
l004023E7:
	bh = bh + 0xC0
	SCZO = cond(bh)
	eax = ecx
	bh = bh - dl
	SCZO = cond(bh)
	edi = edi - 0x00000001
	SZO = cond(edi)
	bh = bh - bl
	SCZO = cond(bh)
	edi = edi ^ esi
	SZO = cond(edi)
	C = false
	edi = edi | eax
	SZO = cond(edi)
	C = false
	bh = bh - 0x01
	SZO = cond(bh)
	call fn00402E61 (retsize: 4;)
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	al = al - 0x9C - C
	SCZO = cond(al)
	__outdw(edx, eax)
	esi = esi + 0x00000004
	// succ:  l004023FF_thunk_fn00402400
l004023FF_thunk_fn00402400:
	call fn00402400 (retsize: 0;)
	return
	// succ:  fn00402116_exit
fn00402116_exit:


// fn0040213F
// Return size: 0
void fn0040213F()
fn0040213F_entry:
	// succ:  l0040213F
l0040213F:
	esp = fp
	esp = esp + 0x00000004
	dl = dl + ah
	SCZO = cond(dl)
	al = bl
	cl = 0x52
	al = al + 0x42
	SCZO = cond(al)
	dl = ~dl
	bl = 0x37
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	// succ:  l00402154_thunk_fn0040292A
l00402154_thunk_fn0040292A:
	call fn0040292A (retsize: 0;)
	return
	// succ:  fn0040213F_exit
fn0040213F_exit:


// fn0040215F
// Return size: 0
void fn0040215F()
fn0040215F_entry:
	// succ:  l0040215F
l0040215F:
	edx = edx ^ ebx
	SZO = cond(edx)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	eax = eax + 0x00000001
	SZO = cond(eax)
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	dh = dh | al
	SZO = cond(dh)
	C = false
	dh = 0xD3
	ebx = ebx - edx
	SCZO = cond(ebx)
	branch Test(SG,S) l0040216B_thunk_fn00402DEA
	goto l00402171
	// succ:  l00402171 l0040216B_thunk_fn00402DEA
l0040216B_thunk_fn00402DEA:
	call fn00402DEA (retsize: 0;)
	return
	// succ:  fn0040215F_exit
l00402171:
	bx = ebx
	branch Test(NS,S) l00402174_thunk_fn00402DEA
	goto l0040217A
	// succ:  l0040217A l00402174_thunk_fn00402DEA
l00402174_thunk_fn00402DEA:
	call fn00402DEA (retsize: 0;)
	return
	// succ:  fn0040215F_exit
l0040217A:
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	al = al ^ 0x94
	SZO = cond(al)
	C = false
	esp = Mem0[ebx - 0x0000005D:word32]
	// succ:  l0040217D_thunk_fn00402180
l0040217D_thunk_fn00402180:
	call fn00402180 (retsize: 0;)
	return
	// succ:  fn0040215F_exit
fn0040215F_exit:


// fn00402180
// Return size: 0
void fn00402180()
fn00402180_entry:
	// succ:  l00402180
l00402180:
	esp = fp
	Mem0[esp - 0x00000030:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ch = -ch
	SCZO = cond(ch)
	C = ch == 0x00
	edx = edx + 0x00000024
	SCZO = cond(edx)
	cl = cl + 0x23 + C
	SCZO = cond(cl)
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	bh = bh + cl
	SCZO = cond(bh)
	ch = ch ^ cl
	SZO = cond(ch)
	C = false
	edi = edi + 0x00000001
	SZO = cond(edi)
	ecx = ecx - esi
	SCZO = cond(ecx)
	cl = cl - 0x01
	SZO = cond(cl)
	branch Test(ULT,C) l004025A2
	// succ:  l004021A0 l004025A2
l004021A0:
	branch Test(NO,O) l004021A2
	// succ:  l004021A2
l004021A2:
	branch Test(UGE,C) l004025A2
	// succ:  l004021A8 l004025A2
l004021A8:
l004025A2:
	bl = ~bl
	bl = bl + bh
	SCZO = cond(bl)
	bh = bh | al
	SZO = cond(bh)
	C = false
	eax = Mem0[edx:word32]
	edi = edi + 0x00000001
	SZO = cond(edi)
	edi = edi ^ eax
	SZO = cond(edi)
	C = false
	call fn00402747 (retsize: 4;)
	al = Mem0[0x6A5DC853:byte]
	// succ:  l004025B2_thunk_fn004025B7
l004025B2_thunk_fn004025B7:
	call fn004025B7 (retsize: 0;)
	return
	// succ:  fn00402180_exit
fn00402180_exit:


// fn004021C8
// Return size: 0
void fn004021C8()
fn004021C8_entry:
	// succ:  l004021C8
l004021C8:
	esp = fp
	dl = dl - 0x25 - C
	SCZO = cond(dl)
	dl = dl - ch
	SCZO = cond(dl)
	ebx = ebx + edi
	SCZO = cond(ebx)
	dl = dl | bl
	SZO = cond(dl)
	C = false
	edx = (word32) al
	bl = ~bl
	bl = bl - dh
	SCZO = cond(bl)
	call fn00402AF9 (retsize: 4;)
	esi = esi | Mem0[edi:word32]
	SZO = cond(esi)
	C = false
	v15 = eax
	eax = edi
	edi = v15
	bl = bl - 0x01
	SZO = cond(bl)
	goto l004021E0_thunk_fn004021E3
	// succ:  l004021E0_thunk_fn004021E3
l004021C8:
l004021E0_thunk_fn004021E3:
	call fn004021E3 (retsize: 0;)
	return
	// succ:  fn004021C8_exit
fn004021C8_exit:


// fn004021E3
// Return size: 0
void fn004021E3()
fn004021E3_entry:
	// succ:  l004021E3
l004021E3:
	esp = fp
	bh = bh ^ dh
	SZO = cond(bh)
	C = false
	bh = bh | bl
	SZO = cond(bh)
	C = false
	bl = bl | cl
	SZO = cond(bl)
	C = false
	bh = bh - 0x2C - C
	SCZO = cond(bh)
	edx = edx - 0x00000001
	SZO = cond(edx)
	bh = bh + 0xF7 + C
	SCZO = cond(bh)
	edx = edx + 0x00000001
	SZO = cond(edx)
	call fn00402CF7 (retsize: 4;)
	goto l004021F1_thunk_fn004021F6
	// succ:  l004021F1_thunk_fn004021F6
l004021E3:
	bh = bh ^ dh
	SZO = cond(bh)
	C = false
	bh = bh | bl
	SZO = cond(bh)
	C = false
	bl = bl | cl
	SZO = cond(bl)
	C = false
	bh = bh - 0x2C - C
	SCZO = cond(bh)
	edx = edx - 0x00000001
	SZO = cond(edx)
	bh = bh + 0xF7 + C
	SCZO = cond(bh)
	edx = edx + 0x00000001
	SZO = cond(edx)
l004021F1_thunk_fn004021F6:
	call fn004021F6 (retsize: 0;)
	return
	// succ:  fn004021E3_exit
l00402498_thunk_fn00402E4A:
	call fn00402E4A (retsize: 0;)
	return
	// succ:  fn004021E3_exit
fn004021E3_exit:


// fn004021F6
// Return size: 0
void fn004021F6()
fn004021F6_entry:
	// succ:  l004021F6
l004021F6:
	esp = fp
	edi = Mem0[edi + 0xA149F95F:word32] *s 0xDB80FB02
	SCZO = cond(edi)
	goto l004021F6_thunk_fn00402200
	// succ:  l004021F6_thunk_fn00402200
l004021F6:
	edi = Mem0[edi + 0xA149F95F:word32] *s 0xDB80FB02
	SCZO = cond(edi)
l004021F6_thunk_fn00402200:
	call fn00402200 (retsize: 0;)
	return
	// succ:  fn004021F6_exit
fn004021F6_exit:


// fn004021FC
// Return size: 0
void fn004021FC()
fn004021FC_entry:
	goto l004021FC
	// succ:  l004021FC
l004021F6_thunk_fn004021FE:
	call fn004021FE (retsize: 0;)
	return
	// succ:  fn004021FC_exit
l004021FC:
	esp = fp
	bh = bh + bl
	SCZO = cond(bh)
	goto l004021FC_thunk_fn004021FE
	// succ:  l004021FC_thunk_fn004021FE
l004021FC:
	goto l004021F6_thunk_fn004021FE
	// succ:  l004021F6_thunk_fn004021FE
l004021FC_thunk_fn004021FE:
	call fn004021FE (retsize: 0;)
	return
	// succ:  fn004021FC_exit
fn004021FC_exit:


// fn004021FE
// Return size: 0
void fn004021FE()
fn004021FE_entry:
	// succ:  l004021FE
l004021FE:
	esp = fp
	bl = bl - 0x2D - C
	SCZO = cond(bl)
	goto l004021FE_thunk_fn00402200
	// succ:  l004021FE_thunk_fn00402200
l004021FE:
	eax = eax - 0xC8FED633
	SCZO = cond(eax)
	dh = dh | al
	SZO = cond(dh)
	C = false
	ebx = 0x54AB543F
	al = al + 0x01
	SZO = cond(al)
	branch Test(PE,P) l00402486
	goto l0040220C_thunk_fn00402214
	// succ:  l0040220C_thunk_fn00402214 l0040220C_thunk_fn00402486
l004021FE_thunk_fn00402200:
	call fn00402200 (retsize: 0;)
	return
	// succ:  fn004021FE_exit
l0040220C_thunk_fn00402214:
	call fn00402214 (retsize: 0;)
	return
	// succ:  fn004021FE_exit
l0040220C_thunk_fn00402486:
	call fn00402486 (retsize: 0;)
	return
	// succ:  fn004021FE_exit
fn004021FE_exit:


// fn00402200
// Return size: 0
void fn00402200()
fn00402200_entry:
	// succ:  l00402200
l00402200:
	esp = fp
	eax = eax - 0xC8FED633
	SCZO = cond(eax)
	dh = dh | al
	SZO = cond(dh)
	C = false
	ebx = 0x54AB543F
	al = al + 0x01
	SZO = cond(al)
	branch Test(PE,P) l0040220E_thunk_fn00402486
	goto l0040220E_thunk_fn00402214
	// succ:  l0040220E_thunk_fn00402214 l0040220E_thunk_fn00402486
l00402200:
	edx = edx ^ esi
	SZO = cond(edx)
	C = false
	al = al - 0x01
	SZO = cond(al)
	dh = dh | al
	SZO = cond(dh)
	C = false
	ebx = 0x54AB543F
	al = al + 0x01
	SZO = cond(al)
	branch Test(PE,P) l0040220E_thunk_fn00402486
	goto l0040220E_thunk_fn00402214
	// succ:  l0040220E_thunk_fn00402214 l0040220E_thunk_fn00402486
l0040220E_thunk_fn00402214:
	call fn00402214 (retsize: 0;)
	return
	// succ:  fn00402200_exit l0040220E_thunk_fn00402214
l0040220E_thunk_fn00402214:
	call fn00402214 (retsize: 0;)
	return
	// succ:  fn00402200_exit
l0040220E_thunk_fn00402214:
	call fn00402214 (retsize: 0;)
	return
	// succ:  fn00402200_exit l0040220E_thunk_fn00402214
l0040220E_thunk_fn00402214:
	call fn00402214 (retsize: 0;)
	return
	// succ:  fn00402200_exit
l0040220E_thunk_fn00402486:
	call fn00402486 (retsize: 0;)
	return
	// succ:  fn00402200_exit
l0040220E_thunk_fn00402486:
	call fn00402486 (retsize: 0;)
	return
	// succ:  fn00402200_exit
fn00402200_exit:


// fn00402214
// Return size: 0
void fn00402214()
fn00402214_entry:
	// succ:  l00402214
l00402214:
	branch Test(GE,SO) l00402216
	// succ:  l00402216
l00402216:
	// succ:  l0040221C
l0040221C:
	branch Test(PO,P) l0040221C_thunk_fn00402486
	goto l00402222
	// succ:  l00402222 l0040221C_thunk_fn00402486
l0040221C_thunk_fn00402486:
	call fn00402486 (retsize: 0;)
	return
	// succ:  fn00402214_exit
l00402222:
fn00402214_exit:


// fn00402228
// Return size: 0
void fn00402228()
fn00402228_entry:
	// succ:  l00402228
l00402228:
	esp = fp
	Mem0[esp - 0x00000034:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	dl = dl - 0x00 - C
	SCZO = cond(dl)
	edx = ebx
	esi = esi - 0x00000001
	SZO = cond(esi)
	esi = ebx
	esi = esi + edi
	SCZO = cond(esi)
	call fn00402541 (retsize: 4;)
	dl = 0x59
	v11 = eax
	eax = ebp
	ebp = v11
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	// succ:  l0040223F_thunk_fn00402240
l0040223F_thunk_fn00402240:
	call fn00402240 (retsize: 0;)
	return
	// succ:  fn00402228_exit
fn00402228_exit:


// fn00402240
// Return size: 0
void fn00402240()
fn00402240_entry:
	// succ:  l00402240
l00402240:
	esp = fp
	dh = dh | cl
	SZO = cond(dh)
	C = false
	edx = edx - 0x00000001
	SZO = cond(edx)
	dh = ~dh
	edx = edx + 0x00000001
	SZO = cond(edx)
	edx = edx + esi
	SCZO = cond(edx)
	edx = edx - 0x00000001
	SZO = cond(edx)
	esi = esi - edx
	SCZO = cond(esi)
	esi = esi + eax
	SCZO = cond(esi)
	dl = ~dl
	esi = esi - 0x00000001
	SZO = cond(esi)
	goto l00402250_thunk_fn004029BE
	// succ:  l00402250_thunk_fn004029BE
l00402240:
l00402250_thunk_fn004029BE:
	call fn004029BE (retsize: 0;)
	return
	// succ:  fn00402240_exit
fn00402240_exit:


// fn0040225A
// Return size: 0
void fn0040225A()
fn0040225A_entry:
	// succ:  l0040225A
l0040225A:
	esp = fp
	esp = esp + 0x00000004
	ah = ah + 0x01
	SZO = cond(ah)
	edx = edx + ebx
	SCZO = cond(edx)
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	ah = ah - 0x01
	SZO = cond(ah)
	al = al - dl
	SCZO = cond(al)
	dh = dh - 0x01
	SZO = cond(dh)
	branch Test(ULE,CZ) l0040285E
	// succ:  l00402270 l0040285E
l00402270:
	al = al
	branch Test(UGT,CZ) l0040285E
	// succ:  l00402278 l0040285E
l00402278:
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	v14 = eax
	eax = esp
	esp = v14
	__outb(0x2F, al)
	branch Test(NS,S) l0040227C_thunk_fn004021FE
l0040285E:
	al = al + 0x5E
	SCZO = cond(al)
	al = al + 0xCC
	SCZO = cond(al)
	edx = edx ^ ecx
	SZO = cond(edx)
	C = false
	dl = dl - 0x01
	SZO = cond(dl)
	al = al - 0x01
	SZO = cond(al)
	al = al - 0x01
	SZO = cond(al)
	dh = dh + 0xA0
	SCZO = cond(dh)
	// succ:  l0040286C_thunk_fn0040286F
l0040286C_thunk_fn0040286F:
	call fn0040286F (retsize: 0;)
	return
	// succ:  fn0040225A_exit
fn0040225A_exit:


// fn0040227D
// Return size: 0
void fn0040227D()
fn0040227D_entry:
	goto l0040227D
	// succ:  l0040227D
l0040227C_thunk_fn004021FE:
	call fn004021FE (retsize: 0;)
	return
	// succ:  fn0040227D_exit
l0040227D:
	esp = fp
	ah = ah + 0xA4 + C
	SCZO = cond(ah)
	goto l00402280_in_fn0040227D
	// succ:  l00402280_in_fn0040227D
l0040227D:
	// succ:  l0040227E l0040227C_thunk_fn004021FE
l0040227E:
	ax = __aam(al)
	// succ:  l00402280
l00402280:
	al = 0x73
	al = ~al
	ch = ch + 0x01
	SZO = cond(ch)
	edx = edx - 0x00000001
	SZO = cond(edx)
	dl = dl - dh
	SCZO = cond(dl)
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	bl = bl | ch
	SZO = cond(bl)
	C = false
	return
	// succ:  fn0040227D_exit
l00402280_in_fn0040227D:
	al = 0x73
	al = ~al
	ch = ch + 0x01
	SZO = cond(ch)
	edx = edx - 0x00000001
	SZO = cond(edx)
	dl = dl - dh
	SCZO = cond(dl)
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	bl = bl | ch
	SZO = cond(bl)
	C = false
	return
	// succ:  fn0040227D_exit
fn0040227D_exit:


// fn004022A2
// Return size: 0
void fn004022A2()
fn004022A2_entry:
	// succ:  l004022A2
l004022A2:
	esp = fp
	esp = esp + 0x00000004
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	eax = eax ^ edx
	SZO = cond(eax)
	C = false
	esi = esi - edi
	SCZO = cond(esi)
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	edx = edx - ecx
	SCZO = cond(edx)
	edi = esi
	bh = bh + 0x01
	SZO = cond(bh)
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	ch = ch + 0x01
	SZO = cond(ch)
	// succ:  l004022B8_thunk_fn0040287C
l004022B8_thunk_fn0040287C:
	call fn0040287C (retsize: 0;)
	return
	// succ:  fn004022A2_exit
fn004022A2_exit:


// fn004022DD
// Return size: 0
void fn004022DD()
fn004022DD_entry:
	// succ:  l004022DD
l004022DD:
	esp = fp
	Mem0[esp:word32] = ecx
	di = di
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	dl = dl + 0x4B + C
	SCZO = cond(dl)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edi = edi + esi
	SCZO = cond(edi)
	ecx = ecx | eax
	SZO = cond(ecx)
	C = false
	bh = bh + cl
	SCZO = cond(bh)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00003000
	eax = eax - edi
	SCZO = cond(eax)
	// succ:  l00402AC7
l00402AC7:
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	al = al - 0x01
	SZO = cond(al)
	ebx = ebx + edi
	SCZO = cond(ebx)
	eax = edx
	esi = esi - edx
	SCZO = cond(esi)
	bh = bh ^ ch
	SZO = cond(bh)
	C = false
	dl = dl - ah
	SCZO = cond(dl)
	call fn00402C18 (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	__hlt()
fn004022DD_exit:


// fn00402302
// Return size: 0
void fn00402302()
fn00402302_entry:
	// succ:  l00402302
l00402302:
	esp = fp
	Mem0[esp - 0x00000034:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx + 0x00000001
	SZO = cond(edx)
	esi = esi | eax
	SZO = cond(esi)
	C = false
	al = 0xC9
	ah = ah | bh
	SZO = cond(ah)
	C = false
	al = al + 0x4D
	SCZO = cond(al)
	// succ:  l00402D73
l00402D73:
	bl = bl + 0x01
	SZO = cond(bl)
	ecx = ecx + 0x00000BCA
	SCZO = cond(ecx)
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	edx = edx + ecx
	SCZO = cond(edx)
	dh = dh + 0x01
	SZO = cond(dh)
	eax = eax ^ ecx
	SZO = cond(eax)
	C = false
	dl = dl + 0x2A + C
	SCZO = cond(dl)
	esi = esi - eax
	SCZO = cond(esi)
	branch Test(ULE,CZ) l00402D88_thunk_fn004023A1
	goto l00402D8E
	// succ:  l00402D8E l00402D88_thunk_fn004023A1
l00402D88_thunk_fn004023A1:
	call fn004023A1 (retsize: 0;)
	return
	// succ:  fn00402302_exit
l00402D8E:
	v17 = dl
	dl = dl
	dl = v17
	v18 = bh
	bh = bh
	bh = v18
	branch Test(UGT,CZ) l00402D92_thunk_fn004023A1
	goto l00402D92_thunk_fn00402D98
	// succ:  l00402D92_thunk_fn00402D98 l00402D92_thunk_fn004023A1
l00402D92_thunk_fn004023A1:
	call fn004023A1 (retsize: 0;)
	return
	// succ:  fn00402302_exit
l00402D92_thunk_fn00402D98:
	call fn00402D98 (retsize: 0;)
	return
	// succ:  fn00402302_exit l00402D92_thunk_fn00402D98
l00402D92_thunk_fn00402D98:
	call fn00402D98 (retsize: 0;)
	return
	// succ:  fn00402302_exit
fn00402302_exit:


// fn0040233D
// Return size: 0
void fn0040233D()
fn0040233D_entry:
	// succ:  l0040233D
l0040233D:
	esp = fp
	Mem0[esp:word32] = edx
	v4 = dx
	dx = dx
	dx = v4
	// succ:  l00402340_thunk_fn00402342
l00402340_thunk_fn00402342:
	call fn00402342 (retsize: 0;)
	return
	// succ:  fn0040233D_exit
fn0040233D_exit:


// fn00402342
// Return size: 0
void fn00402342()
fn00402342_entry:
	// succ:  l00402342
l00402342:
	esp = fp
	v4 = (Mem0[edx - 0x0000003F:byte] & 0x01 << cl) != 0x00
	Mem0[edx - 0x0000003F:byte] = __rcr(Mem0[edx - 0x0000003F:byte], cl, C)
	C = v4
l00402342:
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax >>u 0x00000010
	SCZO = cond(eax)
	edi = edi - 0x00000001
	SZO = cond(edi)
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	esi = esi - eax
	SCZO = cond(esi)
	esi = ecx
fn00402342_exit:


// fn00402357
// Return size: 0
void fn00402357()
fn00402357_entry:
	// succ:  l00402357
l00402357:
	esp = fp
	esi = esi - ebx
	SCZO = cond(esi)
	esi = esi + edi
	SCZO = cond(esi)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	dl = dl + 0x61 + C
	SCZO = cond(dl)
	edx = edx - 0x00000001
	SZO = cond(edx)
	edx = edx ^ edi
	SZO = cond(edx)
	C = false
	call fn0040277D (retsize: 4;)
	v12 = Mem0[ebx + 0x50EDE1DB:word32] + 0x03D2F6EC
	Mem0[ebx + 0x50EDE1DB:word32] = v12
	SCZO = cond(v12)
l00402357:
fn00402357_exit:


// fn00402386
// Return size: 0
void fn00402386()
fn00402386_entry:
	// succ:  l00402386
l00402386:
	esp = fp
	Mem0[esp - 0x00000014:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax - 0x00000001
	SZO = cond(eax)
	ah = dl
	ah = bh
	esi = eax
	ebx = ebx ^ 0x54AB58FD
	SZO = cond(ebx)
	C = false
	call fn0040225A (retsize: 4;)
	esp = esp + 0x00000004
	ecx = ecx - 0x00000001
	branch Test(NE,Z) && ecx != 0x00000000 l0040239C_thunk_fn00402342
	goto l0040239E
	// succ:  l0040239E l0040239C_thunk_fn00402342
l0040239C_thunk_fn00402342:
	call fn00402342 (retsize: 0;)
	return
	// succ:  fn00402386_exit
l0040239E:
	int3()
	Z = __arpl(Mem0[esi:word16], bx, &Mem0[esi:word16])
	// succ:  l0040239F_thunk_fn004023A1
l0040239F_thunk_fn004023A1:
	call fn004023A1 (retsize: 0;)
	return
	// succ:  fn00402386_exit
fn00402386_exit:


// fn004023A1
// Return size: 0
void fn004023A1()
fn004023A1_entry:
	// succ:  l004023A1
l004023A1:
	esp = fp
	bh = bh - 0x01
	SZO = cond(bh)
	esi = esi | edx
	SZO = cond(esi)
	C = false
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	edx = edx | ecx
	SZO = cond(edx)
	C = false
	bh = bh - 0x18 - C
	SCZO = cond(bh)
	branch Test(PE,P) l004023AE_thunk_fn00402A80
	goto l004023AE_thunk_fn004023B4
	// succ:  l004023AE_thunk_fn004023B4 l004023AE_thunk_fn00402A80
l004023A1:
	bh = bh - 0x01
	SZO = cond(bh)
	esi = esi | edx
	SZO = cond(esi)
	C = false
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	edx = edx | ecx
	SZO = cond(edx)
	C = false
	bh = bh - 0x18 - C
	SCZO = cond(bh)
	branch Test(PE,P) l004023AE_thunk_fn00402A80
	goto l004023AE_thunk_fn004023B4
	// succ:  l004023AE_thunk_fn004023B4 l004023AE_thunk_fn00402A80
l004023AE_thunk_fn004023B4:
	call fn004023B4 (retsize: 0;)
	return
	// succ:  fn004023A1_exit l004023AE_thunk_fn004023B4
l004023AE_thunk_fn004023B4:
	call fn004023B4 (retsize: 0;)
	return
	// succ:  fn004023A1_exit
l004023AE_thunk_fn004023B4:
	call fn004023B4 (retsize: 0;)
	return
	// succ:  fn004023A1_exit
l004023AE_thunk_fn00402A80:
	call fn00402A80 (retsize: 0;)
	return
	// succ:  fn004023A1_exit
l004023AE_thunk_fn00402A80:
	call fn00402A80 (retsize: 0;)
	return
	// succ:  fn004023A1_exit
fn004023A1_exit:


// fn004023B4
// Return size: 0
void fn004023B4()
fn004023B4_entry:
	// succ:  l004023B4
l004023B4:
	// succ:  l004023BA
l004023BA:
	edx = edx
	branch Test(PO,P) l004023BC_thunk_fn00402A80
	goto l004023C2
	// succ:  l004023C2 l004023BC_thunk_fn00402A80
l004023BC_thunk_fn00402A80:
	call fn00402A80 (retsize: 0;)
	return
	// succ:  fn004023B4_exit
l004023C2:
	SZO = cond(al & 0xA3)
	C = false
	SCZO = cond(Mem0[esi:word32] - Mem0[edi:word32])
	esi = esi + 0x00000004
	edi = edi + 0x00000004
	SZO = cond(Mem0[edx:byte] & 0xDF)
	C = false
	// succ:  l004023C5_thunk_fn004023C8
l004023C5_thunk_fn004023C8:
	call fn004023C8 (retsize: 0;)
	return
	// succ:  fn004023B4_exit
fn004023B4_exit:


// fn004023C8
// Return size: 0
void fn004023C8()
fn004023C8_entry:
	// succ:  l004023C8
l004023C8:
	esp = fp
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bl = bl + 0x01
	SZO = cond(bl)
	bl = bl + 0x3A + C
	SCZO = cond(bl)
	bh = bh + 0xF2
	SCZO = cond(bh)
	esi = esi + 0x00000001
	SZO = cond(esi)
	edi = edi - esi
	SCZO = cond(edi)
	bl = bl - 0x01
	SZO = cond(bl)
	bl = bl + 0x7B
	SCZO = cond(bl)
	// succ:  l004023DA_thunk_fn004024E0 l004023DA_thunk_fn004024E0
l004023C8:
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bl = bl + 0x01
	SZO = cond(bl)
	bl = bl + 0x3A + C
	SCZO = cond(bl)
	bh = bh + 0xF2
	SCZO = cond(bh)
	esi = esi + 0x00000001
	SZO = cond(esi)
	edi = edi - esi
	SCZO = cond(edi)
	bl = bl - 0x01
	SZO = cond(bl)
	bl = bl + 0x7B
	SCZO = cond(bl)
l004023DA_thunk_fn004024E0:
	call fn004024E0 (retsize: 0;)
	return
	// succ:  fn004023C8_exit
fn004023C8_exit:


// fn00402400
// Return size: 0
void fn00402400()
fn00402400_entry:
	// succ:  l00402400
l00402400:
	esp = fp
	Mem0[esp - 0x00000014:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	bh = bh - bl
	SCZO = cond(bh)
	bl = bl ^ bh
	SZO = cond(bl)
	C = false
	bh = ~bh
	edi = edi + 0x00000001
	SZO = cond(edi)
	bl = ~bl
	bh = ch
	branch Test(ULT,C) TMP!
fn00402400_exit:


// fn00402427
// Return size: 0
void fn00402427()
fn00402427_entry:
	// succ:  l00402427
l00402427:
	esp = fp
	dl = dl - 0x01
	SZO = cond(dl)
	dl = dl - 0x58 - C
	SCZO = cond(dl)
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	bl = bl | dl
	SZO = cond(bl)
	C = false
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	call fn00402302 (retsize: 4;)
	v10 = (dl & 0x01 << 0x08 - 0xE0) != 0x00
	dl = __rcl(dl, 0xE0, C)
	C = v10
	v12 = Mem0[ebp + 0x24448F88:byte] - 0xD4
	Mem0[ebp + 0x24448F88:byte] = v12
	SCZO = cond(v12)
	ch = dl
	edi = edx
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	dl = dl + 0x83 + C
	SCZO = cond(dl)
	bh = bh - 0xD6 - C
	SCZO = cond(bh)
	dl = dl + 0xAD + C
	SCZO = cond(dl)
	call fn0040213F (retsize: 4;)
l00402427:
fn00402427_exit:


// fn0040245D
// Return size: 0
void fn0040245D()
fn0040245D_entry:
	goto l0040245D
	// succ:  l0040245D
l0040236F:
	dl = ~dl
	edi = edi + esi
	SCZO = cond(edi)
l0040245D:
	esp = fp
	Mem0[esp:word32] = eax
	branch Test(LE,SZO) l00402462
	// succ:  l00402462
l00402462:
	// succ:  l00402468
l00402468:
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi | ecx
	SZO = cond(esi)
	C = false
	SCZO = cond(edx - 0xEE97D64D)
	branch Test(NE,Z) l0040286F
	goto l00402477
	// succ:  l00402477 l00402471_thunk_fn0040286F
l00402471_thunk_fn0040286F:
	call fn0040286F (retsize: 0;)
	return
	// succ:  fn0040245D_exit
l00402477:
	bl = 0xA2
	goto l0040236F
	// succ:  l0040236F
fn0040245D_exit:


// fn00402486
// Return size: 0
void fn00402486()
fn00402486_entry:
	// succ:  l00402486
l00402486:
	esi = esi - 0x00000001
	SZO = cond(esi)
	al = al - 0x64 - C
	SCZO = cond(al)
	al = 0xE0
	al = al + dh
	SCZO = cond(al)
	eax = eax - 0x00000001
	SZO = cond(eax)
	edx = edx + ecx
	SCZO = cond(edx)
	ah = ah | dl
	SZO = cond(ah)
	C = false
	al = al + 0x01
	SZO = cond(al)
	al = al + 0xD4 + C
	SCZO = cond(al)
	goto l00402498_thunk_fn00402E4A
	// succ:  l00402498_thunk_fn00402E4A
fn00402486_exit:


// fn004024BC
// Return size: 0
void fn004024BC()
fn004024BC_entry:
	// succ:  l004024BC
l004024BC:
	esp = fp
	esp = esp + 0x00000004
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	dh = ~dh
	dh = dl
	dh = dh ^ ah
	SZO = cond(dh)
	C = false
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	dl = dl + bl
	SCZO = cond(dl)
	branch Test(EQ,Z) l004024CC_thunk_fn00402E2B
	goto l004024D2
	// succ:  l004024D2 l004024CC_thunk_fn00402E2B
l004024CC_thunk_fn00402E2B:
	call fn00402E2B (retsize: 0;)
	return
	// succ:  fn004024BC_exit
l004024D2:
	v11 = ah
	ah = ah
	ah = v11
	edi = edi
	branch Test(NE,Z) l004024D6_thunk_fn00402E2B
	goto l004024DC
	// succ:  l004024DC l004024D6_thunk_fn00402E2B
l004024D6_thunk_fn00402E2B:
	call fn00402E2B (retsize: 0;)
	return
	// succ:  fn004024BC_exit
l004024DC:
	v14 = Mem0[ebx + 0xFB32ABF7:byte] + dl + C
	Mem0[ebx + 0xFB32ABF7:byte] = v14
	SCZO = cond(v14)
	// succ:  l004024DC_thunk_fn004024E2
l004024DC_thunk_fn004024E2:
	call fn004024E2 (retsize: 0;)
	return
	// succ:  fn004024BC_exit
fn004024BC_exit:


// fn004024E0
// Return size: 0
void fn004024E0()
fn004024E0_entry:
	// succ:  l004024E0
l004024E0:
	esp = fp
	bh = bh ^ bl
	SZO = cond(bh)
	C = false
	call fn00402E80 (retsize: 4;)
	// succ:  l004024E0_thunk_fn004024E2 l004024F4_thunk_fn004024F9
l004024E0:
l004024E0_thunk_fn004024E2:
	call fn004024E2 (retsize: 0;)
	return
	// succ:  fn004024E0_exit
l004024F4_thunk_fn004024F9:
	call fn004024F9 (retsize: 0;)
	return
	// succ:  fn004024E0_exit
fn004024E0_exit:


// fn004024E2
// Return size: 0
void fn004024E2()
fn004024E2_entry:
	// succ:  l004024E2
l004024E2:
	esp = fp
	bl = bl + 0x9D + C
	SCZO = cond(bl)
	edi = edi | esi
	SZO = cond(edi)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[eax + 0x00000010:word32]
	esi = esi + ecx
	SCZO = cond(esi)
	bl = bl ^ ah
	SZO = cond(bl)
	C = false
	bh = bh - 0x9A - C
	SCZO = cond(bh)
	bl = bl + 0x2C + C
	SCZO = cond(bl)
	call fn00402E80 (retsize: 4;)
	goto l004024F4_thunk_fn004024F9
	// succ:  l004024F4_thunk_fn004024F9
l004024E2:
	bl = bl + 0x9D + C
	SCZO = cond(bl)
	edi = edi | esi
	SZO = cond(edi)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[eax + 0x00000010:word32]
	esi = esi + ecx
	SCZO = cond(esi)
	bl = bl ^ ah
	SZO = cond(bl)
	C = false
	bh = bh - 0x9A - C
	SCZO = cond(bh)
	bl = bl + 0x2C + C
	SCZO = cond(bl)
l004024F4_thunk_fn004024F9:
	call fn004024F9 (retsize: 0;)
	return
	// succ:  fn004024E2_exit
fn004024E2_exit:


// fn004024F9
// Return size: 0
void fn004024F9()
fn004024F9_entry:
	// succ:  l004024F9
l004024F9:
	esp = fp
	SCZO = cond(al - Mem0[edi:byte])
	edi = edi + 0x00000001
	edi = edi - 0x00000001
	SZO = cond(edi)
	esi = esi & esi
	SZO = cond(esi)
	C = false
	al = __inb(dx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	es = Mem0[eax + 0xCBFEB3C6:selector]
	goto l004024FF_thunk_fn00402505
	// succ:  l004024FF_thunk_fn00402505
l004024F9:
	SCZO = cond(al - Mem0[edi:byte])
	edi = edi + 0x00000001
	edi = edi - 0x00000001
	SZO = cond(edi)
	esi = esi & esi
	SZO = cond(esi)
	C = false
	al = __inb(dx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	es = Mem0[eax + 0xCBFEB3C6:selector]
	goto l004024FF_thunk_fn00402505
	// succ:  l004024FF_thunk_fn00402505
l004024FF_thunk_fn00402505:
	call fn00402505 (retsize: 0;)
	return
	// succ:  fn004024F9_exit
l004024FF_thunk_fn00402505:
	call fn00402505 (retsize: 0;)
	return
	// succ:  fn004024F9_exit
fn004024F9_exit:


// fn00402505
// Return size: 0
void fn00402505()
fn00402505_entry:
	// succ:  l00402505
l00402505:
	esp = fp
	esi = esi + 0x00000001
	SZO = cond(esi)
	ebx = ebx + edx
	SCZO = cond(ebx)
	dl = dl + 0xFE + C
	SCZO = cond(dl)
	ah = ah ^ bh
	SZO = cond(ah)
	C = false
	dl = 0x1D
	ecx = ecx >>u 0x0000000F
	SCZO = cond(ecx)
	dh = dh + 0x28 + C
	SCZO = cond(dh)
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	goto l00402517_thunk_fn00402A3E
	// succ:  l00402517_thunk_fn00402A3E
l00402505:
	esi = esi + 0x00000001
	SZO = cond(esi)
	ebx = ebx + edx
	SCZO = cond(ebx)
	dl = dl + 0xFE + C
	SCZO = cond(dl)
	ah = ah ^ bh
	SZO = cond(ah)
	C = false
	dl = 0x1D
	ecx = ecx >>u 0x0000000F
	SCZO = cond(ecx)
	dh = dh + 0x28 + C
	SCZO = cond(dh)
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	// succ:  l00402515_thunk_fn00402A3E
l00402515_thunk_fn00402A3E:
	call fn00402A3E (retsize: 0;)
	return
	// succ:  fn00402505_exit
l00402517_thunk_fn00402A3E:
	call fn00402A3E (retsize: 0;)
	return
	// succ:  fn00402505_exit
fn00402505_exit:


// fn00402541
// Return size: 0
void fn00402541()
fn00402541_entry:
	// succ:  l00402541
l00402541:
	esp = fp
	esp = esp + 0x00000004
	esi = esi | ecx
	SZO = cond(esi)
	C = false
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	esi = esi + 0x00000001
	SZO = cond(esi)
	esi = esi - ebx
	SCZO = cond(esi)
	edx = edx - 0x116829B3
	SCZO = cond(edx)
	esi = eax
	esi = edi
	call fn0040245D (retsize: 4;)
	v12 = Mem0[esi + 0xFE3D1789:word32] | 0x24148705
	Mem0[esi + 0xFE3D1789:word32] = v12
	SZO = cond(Mem0[esi + 0xFE3D1789:word32])
	C = false
	// succ:  l0040255C_thunk_fn00402566
l0040255C_thunk_fn00402566:
	call fn00402566 (retsize: 0;)
	return
	// succ:  fn00402541_exit
fn00402541_exit:


// fn00402563
// Return size: 0
void fn00402563()
fn00402563_entry:
	// succ:  l00402563
l00402563:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = edx
	edx = v3
fn00402563_exit:


// fn00402566
// Return size: 0
void fn00402566()
fn00402566_entry:
	// succ:  l00402566
l00402566:
	esp = fp
	goto l00402566_thunk_fn0040256C
	// succ:  l00402566_thunk_fn0040256C
l00402566:
	call fn0040256C (retsize: 0;)
	return
	// succ:  l00402566_thunk_fn0040256C fn00402566_exit
l00402566_thunk_fn0040256C:
	call fn0040256C (retsize: 0;)
	return
	// succ:  fn00402566_exit
l00402566_thunk_fn0040256C:
	call fn0040256C (retsize: 0;)
	return
	// succ:  fn00402566_exit
fn00402566_exit:


// fn0040256C
// Return size: 0
void fn0040256C()
fn0040256C_entry:
	// succ:  l0040256C
l0040256C:
	v3 = dx
	dx = dx
	dx = v3
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	dl = dl - cl
	SCZO = cond(dl)
	dh = dh + bl
	SCZO = cond(dh)
	esi = esi - eax
	SCZO = cond(esi)
	// succ:  l00402576_thunk_fn00402240
l00402576_thunk_fn00402240:
	call fn00402240 (retsize: 0;)
	return
	// succ:  fn0040256C_exit
fn0040256C_exit:


// fn00402583
// Return size: 0
void fn00402583()
fn00402583_entry:
	// succ:  l00402583
l00402583:
	esp = fp
	Mem0[esp - 0x00000018:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh - 0x01
	SZO = cond(bh)
	bl = bl ^ ah
	SZO = cond(bl)
	C = false
	ebx = ebx - ecx
	SCZO = cond(ebx)
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	eax = ~eax
	bh = bh + 0x49 + C
	SCZO = cond(bh)
	edi = edi - 0x00000001
	SZO = cond(edi)
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	call fn00402AA7 (retsize: 4;)
	esp = esp + 0x00000001
	SZO = cond(esp)
fn00402583_exit:


// fn004025B6
// Return size: 0
void fn004025B6()
fn004025B6_entry:
	// succ:  l004025B6
l004025B6:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	goto l004025B6_thunk_fn004025B7
	// succ:  l004025B6_thunk_fn004025B7
l004025B6:
l004025B6_thunk_fn004025B7:
	call fn004025B7 (retsize: 0;)
	return
	// succ:  fn004025B6_exit
fn004025B6_exit:


// fn004025B7
// Return size: 0
void fn004025B7()
fn004025B7_entry:
	// succ:  l004025B7
l004025B7:
	esp = fp
	dh = dh + dh
	SCZO = cond(dh)
	al = Mem0[ebx + (uint32) al:byte]
	dh = dh - bl
	SCZO = cond(dh)
	ch = ch - cl
	SCZO = cond(ch)
	bl = bl - 0x01
	SZO = cond(bl)
	bl = bl + 0x01
	SZO = cond(bl)
	dh = ~dh
	goto l004025C4_thunk_fn004020D9
	// succ:  l004025C4_thunk_fn004020D9
l004025B7:
	bh = ~bh
	dh = dh - bl
	SCZO = cond(dh)
	ch = ch - cl
	SCZO = cond(ch)
	bl = bl - 0x01
	SZO = cond(bl)
	bl = bl + 0x01
	SZO = cond(bl)
	dh = ~dh
	// succ:  l004025C1_thunk_fn004020D9
l004025C1_thunk_fn004020D9:
	call fn004020D9 (retsize: 0;)
	return
	// succ:  fn004025B7_exit
l004025C4_thunk_fn004020D9:
	call fn004020D9 (retsize: 0;)
	return
	// succ:  fn004025B7_exit
fn004025B7_exit:


// fn004025F4
// Return size: 4
void fn004025F4()
fn004025F4_entry:
	// succ:  l004025F4
l004025F4:
	esp = fp
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	ch = ch - 0x01
	SZO = cond(ch)
	// succ:  l004025F8_thunk_fn004020C4
l004025F8_thunk_fn004020C4:
	call fn004020C4 (retsize: 4;)
	return
	// succ:  fn004025F4_exit
fn004025F4_exit:


// fn00402619
// Return size: 0
void fn00402619()
fn00402619_entry:
	goto l00402619
	// succ:  l00402619
l004021E1:
	bl = bl - 0x01
	SZO = cond(bl)
	call fn00402CF7 (retsize: 4;)
	// succ:  l004021E1_thunk_fn004021E3 l004021F1_thunk_fn004021F6
l004021E1_thunk_fn004021E3:
	call fn004021E3 (retsize: 0;)
	return
	// succ:  fn00402619_exit
l004021F1_thunk_fn004021F6:
	call fn004021F6 (retsize: 0;)
	return
	// succ:  fn00402619_exit
l00402619:
	esp = fp
	esp = esp + 0x00000004
	edi = edi + 0x00000001
	SZO = cond(edi)
	cl = ~cl
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	dl = dl | ah
	SZO = cond(dl)
	C = false
	edx = edx ^ edi
	SZO = cond(edx)
	C = false
	bl = ~bl
	esi = ebx
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	goto l004021E1
	// succ:  l004021E1
fn00402619_exit:


// fn0040263A
// Return size: 0
void fn0040263A()
fn0040263A_entry:
	// succ:  l0040263A
l0040263A:
	esp = fp
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	esi = esi + 0x00000001
	SZO = cond(esi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	bh = 0x23
	bl = bl + 0x01
	SZO = cond(bl)
	bh = bh + 0x15 + C
	SCZO = cond(bh)
	goto l00402646_thunk_fn00402CAC
	// succ:  l00402646_thunk_fn00402CAC
l0040263A:
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	esi = esi + 0x00000001
	SZO = cond(esi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	bh = 0x23
	bl = bl + 0x01
	SZO = cond(bl)
	bh = bh + 0x15 + C
	SCZO = cond(bh)
	// succ:  l00402643_thunk_fn00402CAC
l00402643_thunk_fn00402CAC:
	call fn00402CAC (retsize: 0;)
	return
	// succ:  fn0040263A_exit
l00402646_thunk_fn00402CAC:
	call fn00402CAC (retsize: 0;)
	return
	// succ:  fn0040263A_exit
fn0040263A_exit:


// fn00402692
// Return size: 0
void fn00402692()
fn00402692_entry:
	// succ:  l00402692
l00402692:
	esp = fp
	dl = dl + 0x01
	SZO = cond(dl)
	eax = eax + 0x00000001
	SZO = cond(eax)
	dh = bh
	bh = bh + 0xBA + C
	SCZO = cond(bh)
	dl = dl + 0xA6 + C
	SCZO = cond(dl)
	dl = dl - 0x01
	SZO = cond(dl)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	call fn00402B18 (retsize: 4;)
	SZO = cond(Mem0[edx:word32] & esi)
	C = false
	ax = __aam(al)
	goto l004026A9_thunk_fn0040263A
	// succ:  l004026A9_thunk_fn0040263A
l00402692:
l004026A9_thunk_fn0040263A:
	call fn0040263A (retsize: 0;)
	return
	// succ:  fn00402692_exit
fn00402692_exit:


// fn004026AA
// Return size: 0
void fn004026AA()
fn004026AA_entry:
	// succ:  l004026AA
l004026AA:
	esp = fp
	Mem0[esp - 0x0000000C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = bl - 0x01
	SZO = cond(bl)
	ch = ch + dh
	SCZO = cond(ch)
	bh = bh | bl
	SZO = cond(bh)
	C = false
	dl = dl + 0x01
	SZO = cond(dl)
	bh = bh - 0x01
	SZO = cond(bh)
	edx = edx - eax
	SCZO = cond(edx)
l004026BA_thunk_fn00402846:
	call fn00402846 (retsize: 0;)
	return
	// succ:  fn004026AA_exit
fn004026AA_exit:


// fn004026C5
// Return size: 0
void fn004026C5()
fn004026C5_entry:
	// succ:  l004026C5
l004026C5:
	esp = fp
	Mem0[esp:word32] = ebx
	// succ:  l004026CD
l004026CD:
	bh = bh
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi | ecx
	SZO = cond(esi)
	C = false
	dl = dl + 0x01
	SZO = cond(dl)
	esi = esi + ebx
	SCZO = cond(esi)
	esi = esi + 0x00000001
	SZO = cond(esi)
	// succ:  l004028EE
l004028EE:
	ah = ah - 0x14 - C
	SCZO = cond(ah)
	dh = dh ^ cl
	SZO = cond(dh)
	C = false
	// succ:  l004028F1_thunk_fn004028F3
l004028F1_thunk_fn004028F3:
	call fn004028F3 (retsize: 0;)
	return
	// succ:  fn004026C5_exit
fn004026C5_exit:


// fn004026E4
// Return size: 0
void fn004026E4()
fn004026E4_entry:
	// succ:  l004026E4
l004026E4:
	esp = fp
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi + ebx
	SCZO = cond(esi)
	bl = ch
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh + 0x01
	SZO = cond(bh)
	bh = ~bh
	call fn004027AF (retsize: 4;)
	bh = bh + Mem0[esi:byte]
	SCZO = cond(bh)
	SCZO = ah
	eax = eax ^ Mem0[eax + 0x4109B7A3:word32]
	SZO = cond(eax)
	C = false
	// succ:  l004026FB_thunk_fn00402701
l004026FB_thunk_fn00402701:
	call fn00402701 (retsize: 0;)
	return
	// succ:  fn004026E4_exit
fn004026E4_exit:


// fn00402700
// Return size: 0
void fn00402700()
fn00402700_entry:
	// succ:  l00402700
l00402700:
	esp = fp
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	call fn004022A2 (retsize: 4;)
	// succ:  l00402700_thunk_fn00402701 l00402712_thunk_fn00402717
l00402700_thunk_fn00402701:
	call fn00402701 (retsize: 0;)
	return
	// succ:  fn00402700_exit
l00402712_thunk_fn00402717:
	call fn00402717 (retsize: 0;)
	return
	// succ:  fn00402700_exit
fn00402700_exit:


// fn00402701
// Return size: 0
void fn00402701()
fn00402701_entry:
	// succ:  l00402701
l00402701:
	esp = fp
	ecx = ecx + eax
	SCZO = cond(ecx)
	bl = bl + 0x01
	SZO = cond(bl)
	bh = bh - 0x01
	SZO = cond(bh)
	edi = edi + 0x00000001
	SZO = cond(edi)
	ah = ah - cl
	SCZO = cond(ah)
	ebx = ebx - ecx
	SCZO = cond(ebx)
	bl = bl | al
	SZO = cond(bl)
	C = false
	cl = cl ^ bl
	SZO = cond(cl)
	C = false
	cl = 0xF5
	call fn004022A2 (retsize: 4;)
	goto l00402712_thunk_fn00402717
	// succ:  l00402712_thunk_fn00402717
l00402701:
	ecx = ecx + eax
	SCZO = cond(ecx)
	bl = bl + 0x01
	SZO = cond(bl)
	bh = bh - 0x01
	SZO = cond(bh)
	edi = edi + 0x00000001
	SZO = cond(edi)
	ah = ah - cl
	SCZO = cond(ah)
	ebx = ebx - ecx
	SCZO = cond(ebx)
	bl = bl | al
	SZO = cond(bl)
	C = false
	cl = cl ^ bl
	SZO = cond(cl)
	C = false
	cl = 0xF5
l00402712_thunk_fn00402717:
	call fn00402717 (retsize: 0;)
	return
	// succ:  fn00402701_exit
fn00402701_exit:


// fn00402717
// Return size: 0
void fn00402717()
fn00402717_entry:
	// succ:  l00402717
l00402717:
	esp = fp
	v3 = eax
	eax = edi
	edi = v3
	Mem0[bx + si:word32] = 0x074772DC
	goto l00402718_thunk_fn0040271F
	// succ:  l00402718_thunk_fn0040271F
l00402717:
	v8 = eax
	eax = edi
	edi = v8
	Mem0[bx + si:word32] = 0x074772DC
	goto l00402718_thunk_fn0040271F
	// succ:  l00402718_thunk_fn0040271F
l00402718_thunk_fn0040271F:
	call fn0040271F (retsize: 0;)
	return
	// succ:  fn00402717_exit
l00402718_thunk_fn0040271F:
	call fn0040271F (retsize: 0;)
	return
	// succ:  fn00402717_exit
fn00402717_exit:


// fn0040271F
// Return size: 0
void fn0040271F()
fn0040271F_entry:
	// succ:  l0040271F
l0040271F:
	esp = fp
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	dl = dl + 0xBB + C
	SCZO = cond(dl)
	dl = dl - ch
	SCZO = cond(dl)
	dh = dh + 0x16
	SCZO = cond(dh)
	dl = 0xFF
	esi = esi - 0x00000001
	SZO = cond(esi)
	dl = ~dl
	branch Test(PE,P) l0040272E_thunk_fn00402357
	goto l00402734
	// succ:  l00402734 l0040272E_thunk_fn00402357
l0040271F:
l0040272E_thunk_fn00402357:
	call fn00402357 (retsize: 0;)
	return
	// succ:  fn0040271F_exit
l00402734:
	v13 = al
	al = al
	al = v13
	cx = ecx
	branch Test(PO,P) l00402739_thunk_fn00402357
	goto l0040273F
	// succ:  l0040273F l00402739_thunk_fn00402357
l00402739_thunk_fn00402357:
	call fn00402357 (retsize: 0;)
	return
	// succ:  fn0040271F_exit
l0040273F:
	D = true
	eax = __indw(0x33)
	al = al | 0x49
	SZO = cond(al)
	C = false
	rArg0 = rArg0 - Mem0[ecx + 0x00000072:real64]
	// succ:  l00402744_thunk_fn00402747
l00402744_thunk_fn00402747:
	call fn00402747 (retsize: 0;)
	return
	// succ:  fn0040271F_exit
fn0040271F_exit:


// fn00402747
// Return size: 0
void fn00402747()
fn00402747_entry:
	// succ:  l00402747
l00402747:
	esp = fp
	esp = esp + 0x00000004
	dl = dl + bl
	SCZO = cond(dl)
	cl = cl + 0x6C + C
	SCZO = cond(cl)
	edi = edi + eax
	SCZO = cond(edi)
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	ecx = ebx
	// succ:  l00402DBC
l00402DBC:
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	dh = dh + 0x9C + C
	SCZO = cond(dh)
	esi = esi - 0x00000001
	SZO = cond(esi)
	dl = dl + 0x69 + C
	SCZO = cond(dl)
	esi = esi + edi
	SCZO = cond(esi)
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	dh = dh - bl
	SCZO = cond(dh)
	edx = edx ^ ecx
	SZO = cond(edx)
	C = false
	bh = bh + 0x63
	SCZO = cond(bh)
	branch Test(LE,SZO) l00402DD2_thunk_fn004025B6
	goto l00402DD8
	// succ:  l00402DD8 l00402DD2_thunk_fn004025B6
l00402DD2_thunk_fn004025B6:
	call fn004025B6 (retsize: 0;)
	return
	// succ:  fn00402747_exit
l00402DD8:
	// succ:  l00402DDE
l00402DDE:
	bh = bh
	branch Test(GT,SZO) l00402DE0_thunk_fn004025B6
	goto l00402DE6
	// succ:  l00402DE6 l00402DE0_thunk_fn004025B6
l00402DE0_thunk_fn004025B6:
	call fn004025B6 (retsize: 0;)
	return
	// succ:  fn00402747_exit
l00402DE6:
fn00402747_exit:


// fn00402763
// Return size: 0
void fn00402763()
fn00402763_entry:
	// succ:  l00402763
l00402763:
	esp = fp
	ebx = eax
	bh = bh + 0xB4 + C
	SCZO = cond(bh)
	eax = eax + 0x00000078
	bh = bh | ah
	SZO = cond(bh)
	C = false
	bh = 0x9A
	bh = bh + 0x4C + C
	SCZO = cond(bh)
	goto l00402E9D
	// succ:  l00402E9D
l00402763:
l00402E9D:
	bl = bl + cl
	SCZO = cond(bl)
	// succ:  l00402E9D_thunk_fn00402E9F
l00402E9D_thunk_fn00402E9F:
	call fn00402E9F (retsize: 0;)
	return
	// succ:  fn00402763_exit
l00402EAC_thunk_fn004020AA:
	call fn004020AA (retsize: 4;)
	return
	// succ:  fn00402763_exit
fn00402763_exit:


// fn0040277D
// Return size: 0
void fn0040277D()
fn0040277D_entry:
	goto l0040277D
	// succ:  l0040277D
l004024A2:
	esi = esi ^ edi
	SZO = cond(esi)
	C = false
	dh = dh - 0xB7 - C
	SCZO = cond(dh)
	dh = dh + 0x25 + C
	SCZO = cond(dh)
	dh = dh | dl
	SZO = cond(dh)
	C = false
	dh = dh - 0x01
	SZO = cond(dh)
	dh = dh - ah
	SCZO = cond(dh)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	call fn004024BC (retsize: 4;)
	esp = esp - Mem0[ecx + 0x0DC9CC38:word32]
	SCZO = cond(esp)
	// succ:  l004024B6_thunk_fn004024BC
l004024B6_thunk_fn004024BC:
	call fn004024BC (retsize: 0;)
	return
	// succ:  fn0040277D_exit
l0040277D:
	esp = fp
	Mem0[esp - 0x00000020:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	dl = dl - 0x01
	SZO = cond(dl)
	dh = ~dh
	dl = dl | bh
	SZO = cond(dl)
	C = false
	dl = dl - 0x01
	SZO = cond(dl)
	dl = dl - 0x01
	SZO = cond(dl)
	esi = esi | eax
	SZO = cond(esi)
	C = false
	dh = 0xCA
	dh = 0x46
	dh = dh + 0xAA
	SCZO = cond(dh)
	branch Test(LE,SZO) l004024A2
	// succ:  l0040279A l004024A2
l0040279A:
	// succ:  l004027A0
l004027A0:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	branch Test(GT,SZO) l004024A2
	// succ:  l004027A8 l004024A2
l004027A8:
	ebp = ebp + Mem0[es:ecx + 0x36AB175C:word32]
	SCZO = cond(ebp)
	// succ:  l004027A8_thunk_fn004027AF
l004027A8_thunk_fn004027AF:
	call fn004027AF (retsize: 0;)
	return
	// succ:  fn0040277D_exit
fn0040277D_exit:


// fn004027AF
// Return size: 0
void fn004027AF()
fn004027AF_entry:
	// succ:  l004027AF
l004027AF:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = ebx
	ebx = v3
	cx = ecx
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx - edx
	SCZO = cond(ebx)
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
	bh = bh - 0x01
	SZO = cond(bh)
	esi = esi - edi
	SCZO = cond(esi)
	bh = bh + 0x1C + C
	SCZO = cond(bh)
	bl = bl + 0x20 + C
	SCZO = cond(bl)
	branch Test(LT,SO) l00402BFD
	goto l004027CA
	// succ:  l004027CA l004027C4_thunk_fn00402BFD
l004027C4_thunk_fn00402BFD:
	call fn00402BFD (retsize: 0;)
	return
	// succ:  fn004027AF_exit
l004027CA:
	v16 = dl
	dl = dl
	dl = v16
	branch Test(GE,SO) l00402BFD
	goto l004027D2
	// succ:  l004027D2 l004027CC_thunk_fn00402BFD
l004027CC_thunk_fn00402BFD:
	call fn00402BFD (retsize: 0;)
	return
	// succ:  fn004027AF_exit
l004027D2:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	C = true
	cl = 0xC7
	// succ:  l004027D5_thunk_fn004027D7
l004027D5_thunk_fn004027D7:
	call fn004027D7 (retsize: 0;)
	return
	// succ:  fn004027AF_exit
l00402C0F_thunk_fn00402A1A:
	call fn00402A1A (retsize: 0;)
	return
	// succ:  fn004027AF_exit
fn004027AF_exit:


// fn004027D7
// Return size: 0
void fn004027D7()
fn004027D7_entry:
	// succ:  l004027D7
l004027D7:
	bl = bl + 0xCC
	SCZO = cond(bl)
	bh = bh - dh
	SCZO = cond(bh)
	bh = bh + 0x01
	SZO = cond(bh)
	ebx = ebx ^ ecx
	SZO = cond(ebx)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edx = eax + 0x000000F8
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	esi = esi - edx
	SCZO = cond(esi)
	branch Test(OV,O) l00402C93
	// succ:  l004027F2 l00402C93
l004027F2:
l00402C51:
	esi = esi + eax
	SCZO = cond(esi)
	ebx = ebx - eax
	SCZO = cond(ebx)
	esi = esi + edi
	SCZO = cond(esi)
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[edx + 0x00000008:word32]
	bl = bl + 0xFB + C
	SCZO = cond(bl)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	bl = cl
	bl = bl - 0xF3 - C
	SCZO = cond(bl)
	bl = cl
	goto l00402CCF
	// succ:  l00402CCF
l00402C93:
	bh = bh ^ cl
	SZO = cond(bh)
	C = false
	esi = ebx
	ebx = ecx
	edi = edi | esi
	SZO = cond(edi)
	C = false
	bl = al
	esi = esi + 0x00000001
	SZO = cond(esi)
	bl = ~bl
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
	bh = bh - 0x01
	SZO = cond(bh)
	goto l00402C51
	// succ:  l00402C51
l00402CCF:
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	ebx = ebx | edx
	SZO = cond(ebx)
	C = false
	// succ:  l00402CD1_thunk_fn00402CD3
l00402CD1_thunk_fn00402CD3:
	call fn00402CD3 (retsize: 0;)
	return
	// succ:  fn004027D7_exit
l00402CE0_thunk_fn00402763:
	call fn00402763 (retsize: 0;)
	return
	// succ:  fn004027D7_exit
l00402CE0_thunk_fn00402CE6:
	call fn00402CE6 (retsize: 0;)
	return
	// succ:  fn004027D7_exit l00402CE0_thunk_fn00402CE6
l00402CE0_thunk_fn00402CE6:
	call fn00402CE6 (retsize: 0;)
	return
	// succ:  fn004027D7_exit
fn004027D7_exit:


// fn004027FD
// Return size: 0
void fn004027FD()
fn004027FD_entry:
	goto l004027FD
	// succ:  l004027FD
l004023C6:
	bl = bl + bh
	SCZO = cond(bl)
	// succ:  l004023C6_thunk_fn004023C8
l004023C6_thunk_fn004023C8:
	call fn004023C8 (retsize: 0;)
	return
	// succ:  fn004027FD_exit
l004023DA_thunk_fn004024E0:
	call fn004024E0 (retsize: 0;)
	return
	// succ:  fn004027FD_exit
l004027FD:
	esp = fp
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	eax = eax + ecx
	SCZO = cond(eax)
	bh = bh - 0x01
	SZO = cond(bh)
	esi = esi - 0x00000001
	SZO = cond(esi)
	esi = esi | eax
	SZO = cond(esi)
	C = false
	branch Test(ULT,C) l004023C6
	goto l0040280F
	// succ:  l0040280F l004023C6
l004027FD:
l0040280F:
	eax = eax
fn004027FD_exit:


// fn00402820
// Return size: 0
void fn00402820()
fn00402820_entry:
	// succ:  l00402820
l00402820:
	edi = edi + eax
	SCZO = cond(edi)
	esi = ebx
	bl = bl ^ al
	SZO = cond(bl)
	C = false
	eax = Mem0[eax:word32]
	bh = bh + 0x77
	SCZO = cond(bh)
	bh = bh - 0x01
	SZO = cond(bh)
	branch Test(ULE,CZ) l0040282D_thunk_fn00402BBB
	goto l00402833
	// succ:  l00402833 l0040282D_thunk_fn00402BBB
l0040282D_thunk_fn00402BBB:
	call fn00402BBB (retsize: 0;)
	return
	// succ:  fn00402820_exit
l00402833:
	// succ:  l00402838
l00402838:
	branch Test(UGT,CZ) l00402838_thunk_fn00402BBB
	goto l0040283E
	// succ:  l0040283E l00402838_thunk_fn00402BBB
l00402838_thunk_fn00402BBB:
	call fn00402BBB (retsize: 0;)
	return
	// succ:  fn00402820_exit
l0040283E:
fn00402820_exit:


// fn00402846
// Return size: 0
void fn00402846()
fn00402846_entry:
	// succ:  l00402846
l00402846:
	esp = fp
	edx = edx ^ edi
	SZO = cond(edx)
	C = false
	ch = ch + 0x75 + C
	SCZO = cond(ch)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	esi = esi - 0x00000001
	SZO = cond(esi)
	dl = dl + 0x2E
	SCZO = cond(dl)
	goto l00402854_thunk_fn00402E0F
	// succ:  l00402854_thunk_fn00402E0F
l00402846:
l00402854_thunk_fn00402E0F:
	call fn00402E0F (retsize: 0;)
	return
	// succ:  fn00402846_exit
fn00402846_exit:


// fn0040286F
// Return size: 0
void fn0040286F()
fn0040286F_entry:
	// succ:  l0040286F
l0040286F:
	eax = eax ^ edi
	SZO = cond(eax)
	C = false
	call fn004026C5 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ss
	__outb(dx, al)
	__outw(dx, ax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0xFFFFFFCC
	v17 = eax
	eax = esi
	esi = v17
	// succ:  l0040287B_thunk_fn0040287C
l0040287B_thunk_fn0040287C:
	call fn0040287C (retsize: 0;)
	return
	// succ:  fn0040286F_exit
fn0040286F_exit:


// fn0040287C
// Return size: 0
void fn0040287C()
fn0040287C_entry:
	// succ:  l0040287C
l0040287C:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000040
	dh = dh ^ cl
	SZO = cond(dh)
	C = false
	edi = eax
	al = al - bh
	SCZO = cond(al)
	al = al + 0x01
	SZO = cond(al)
	ah = ah + 0x01
	SZO = cond(ah)
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	goto l00402BA0
	// succ:  l00402BA0
l0040287C:
l00402BA0:
	bl = bl ^ dl
	SZO = cond(bl)
	C = false
	call fn004022DD (retsize: 4;)
	// succ:  l00402BA0_thunk_fn00402BA1 l00402BAF_thunk_fn00402BB4
l00402BA0_thunk_fn00402BA1:
	call fn00402BA1 (retsize: 0;)
	return
	// succ:  fn0040287C_exit
l00402BAF_thunk_fn00402BB4:
	call fn00402BB4 (retsize: 0;)
	return
	// succ:  fn0040287C_exit
fn0040287C_exit:


// fn004028D8
// Return size: 0
void fn004028D8()
fn004028D8_entry:
	// succ:  l004028D8
l004028D8:
	dl = dl + 0x01
	SZO = cond(dl)
	esi = esi + edx
	SCZO = cond(esi)
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	esi = esi ^ ecx
	SZO = cond(esi)
	C = false
	dl = dl + bh
	SCZO = cond(dl)
	edx = edx + 0x00000001
	SZO = cond(edx)
fn004028D8_exit:


// fn004028E6
// Return size: 0
void fn004028E6()
fn004028E6_entry:
	// succ:  l004028E6
l004028E6:
	esp = fp
	v5 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v5
	SCZO = cond(v5)
	v9 = Mem0[ebx + 0x808A1FCA + edx:word32] & 0xF13214DC
	Mem0[ebx + 0x808A1FCA + edx:word32] = v9
	SZO = cond(Mem0[ebx + 0x808A1FCA + edx:word32])
	C = false
	goto l004028E8_thunk_fn004028F3
	// succ:  l004028E8_thunk_fn004028F3
l004028E6:
	goto l00402D3A
	// succ:  l00402D3A
l004028E8_thunk_fn004028F3:
	call fn004028F3 (retsize: 0;)
	return
	// succ:  fn004028E6_exit
l00402D3A:
	dl = dl - 0x01
	SZO = cond(dl)
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	edx = esi
	dh = dh + 0xE8 + C
	SCZO = cond(dh)
	dh = ~dh
	dl = dl + 0xD3 + C
	SCZO = cond(dl)
	edx = edx - 0x00000001
	SZO = cond(edx)
	dh = 0x11
	edx = edx - 0x00000001
	SZO = cond(edx)
	call fn00402BD4 (retsize: 4;)
	esp = esp + 0x00000F99
	Mem0[edi:word32] = __in(edx)
	edi = edi + 0x00000004
	eax = Mem0[esi:word32]
	esi = esi + 0x00000004
	__outb(dx, al)
	al = __inb(0x78)
	// succ:  l00402D54_thunk_fn00402D56
l00402D54_thunk_fn00402D56:
	call fn00402D56 (retsize: 0;)
	return
	// succ:  fn004028E6_exit
fn004028E6_exit:


// fn004028F3
// Return size: 0
void fn004028F3()
fn004028F3_entry:
	// succ:  l004028F3
l004028F3:
	esp = fp
	esi = ecx
	eax = eax | ecx
	SZO = cond(eax)
	C = false
	al = ch
	esi = edx
	edx = ebx
	al = al + 0x5A
	SCZO = cond(al)
	al = Mem0[edi:byte]
	dh = dh - al
	SCZO = cond(dh)
	call fn00402563 (retsize: 4;)
l004028F3:
	esi = ecx
	eax = eax | ecx
	SZO = cond(eax)
	C = false
	al = ch
	esi = edx
	edx = ebx
	al = al + 0x5A
	SCZO = cond(al)
	al = Mem0[edi:byte]
	dh = dh - al
	SCZO = cond(dh)
	call fn00402563 (retsize: 4;)
fn004028F3_exit:


// fn0040290D
// Return size: 0
void fn0040290D()
fn0040290D_entry:
	// succ:  l0040290D
l0040290D:
	esp = fp
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bh = bh | al
	SZO = cond(bh)
	C = false
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	edi = edi - ecx
	SCZO = cond(edi)
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	call fn00402400 (retsize: 4;)
	ax = __aam(al)
	ah = FPUF
	esp = esp - 0x00000004
	Mem0[esp:word32] = esp
	branch Test(EQ,Z) l00402927_thunk_fn004028E6
	goto l00402929
	// succ:  l00402929 l00402927_thunk_fn004028E6
l00402927_thunk_fn004028E6:
	call fn004028E6 (retsize: 0;)
	return
	// succ:  fn0040290D_exit
l00402929:
	SCZO = cond(Mem0[ebx:word32] - esi)
	// succ:  l00402929_thunk_fn0040292B
l00402929_thunk_fn0040292B:
	call fn0040292B (retsize: 0;)
	return
	// succ:  fn0040290D_exit
fn0040290D_exit:


// fn0040292A
// Return size: 0
void fn0040292A()
fn0040292A_entry:
	// succ:  l0040292A
l0040292A:
	esp = fp
	edi = edi ^ eax
	SZO = cond(edi)
	C = false
	goto l0040292A_thunk_fn0040292B
	// succ:  l0040292A_thunk_fn0040292B
l0040292A:
l0040292A_thunk_fn0040292B:
	call fn0040292B (retsize: 0;)
	return
	// succ:  fn0040292A_exit
fn0040292A_exit:


// fn0040292B
// Return size: 0
void fn0040292B()
fn0040292B_entry:
	// succ:  l0040292B
l0040292B:
	esp = fp
	C = false
	dh = dh - 0x01
	SZO = cond(dh)
	ecx = ecx | eax
	SZO = cond(ecx)
	C = false
	dl = 0x47
	ch = -ch
	SCZO = cond(ch)
	C = ch == 0x00
	ah = ah + 0x01
	SZO = cond(ah)
	goto l00402936_thunk_fn0040227D
	// succ:  l00402936_thunk_fn0040227D
l0040292B:
	dh = dh - 0x01
	SZO = cond(dh)
	ecx = ecx | eax
	SZO = cond(ecx)
	C = false
	dl = 0x47
	ch = -ch
	SCZO = cond(ch)
	C = ch == 0x00
	ah = ah + 0x01
	SZO = cond(ah)
	goto l00402936_thunk_fn0040227D
	// succ:  l00402936_thunk_fn0040227D
l00402936_thunk_fn0040227D:
	call fn0040227D (retsize: 0;)
	return
	// succ:  fn0040292B_exit
l00402936_thunk_fn0040227D:
	call fn0040227D (retsize: 0;)
	return
	// succ:  fn0040292B_exit
fn0040292B_exit:


// fn00402941
// Return size: 0
void fn00402941()
fn00402941_entry:
	goto l00402941
	// succ:  l00402941
l004025CE:
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	bh = bh - 0x36 - C
	SCZO = cond(bh)
	bl = 0xCC
	esi = esi + 0x00000001
	SZO = cond(esi)
	bl = 0x0A
	// succ:  l004025D9_thunk_fn00402116
l004025D9_thunk_fn00402116:
	call fn00402116 (retsize: 4;)
	return
	// succ:  fn00402941_exit
l00402941:
	esp = fp
	edx = edx - ecx
	SCZO = cond(edx)
	edx = edx | ebx
	SZO = cond(edx)
	C = false
	dh = dh | dl
	SZO = cond(dh)
	C = false
	dh = dh + 0xF1
	SCZO = cond(dh)
	esi = ecx
	dl = dl - 0x01
	SZO = cond(dl)
	dh = 0x1C
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	edx = ebx
	esi = esi - edx
	SCZO = cond(esi)
	call fn00402C31 (retsize: 4;)
	C = __das(al, &al)
	esi = esi + 0x00000001
	SZO = cond(esi)
	v14 = Mem0[eax + 0x850FC00B:word32] >> 0xFFFFFF9D
	Mem0[eax + 0x850FC00B:word32] = v14
	SCZO = cond(v14)
	eax = eax + Mem0[eax:word32]
	SCZO = cond(eax)
	v15 = Mem0[esi - 0x00000080:byte] + al
	Mem0[esi - 0x00000080:byte] = v15
	SCZO = cond(v15)
	al = Mem0[ebx + (uint32) al:byte]
	C = false
	bl = bl | bh
	SZO = cond(bl)
	C = false
	bl = ah
	bl = bl + 0xCA + C
	SCZO = cond(bl)
	branch Test(EQ,Z) l004025CE
	goto l00402978
	// succ:  l00402978 l004025CE
l00402941:
l00402978:
	bl = bl
	branch Test(NE,Z) l004025CE
	// succ:  l00402980 l004025CE
l00402980:
	esi = esi + 0x00000001
	SZO = cond(esi)
	al = al & 0x5C
	SZO = cond(al)
	C = false
	v21 = Mem0[ebx:byte] + dh + C
	Mem0[ebx:byte] = v21
	SCZO = cond(v21)
	// succ:  l00402983_thunk_fn00402985
l00402983_thunk_fn00402985:
	call fn00402985 (retsize: 0;)
	return
	// succ:  fn00402941_exit
fn00402941_exit:


// fn00402985
// Return size: 0
void fn00402985()
fn00402985_entry:
	// succ:  l00402985
l00402985:
	esp = fp
	dl = dl + 0xF6 + C
	SCZO = cond(dl)
	ebx = ebx - esi
	SCZO = cond(ebx)
	dl = dl + bh
	SCZO = cond(dl)
	Mem0[esp - 0x00000008:word32] = eax
	bl = bl | dl
	SZO = cond(bl)
	C = false
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	ch = ch - 0x01
	SZO = cond(ch)
	cl = cl + 0xE2 + C
	SCZO = cond(cl)
	dh = dh - bh
	SCZO = cond(dh)
	call fn004026AA (retsize: 4;)
	v16 = Mem0[ebx + 0x0000005C:word32] + ebp + C
	Mem0[ebx + 0x0000005C:word32] = v16
	SCZO = cond(v16)
	v18 = Mem0[ecx + 0xD2862404:word32] | 0x00000058
	Mem0[ecx + 0xD2862404:word32] = v18
	SZO = cond(Mem0[ecx + 0xD2862404:word32])
	C = false
	dl = dl - 0x3A - C
	SCZO = cond(dl)
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	dl = dl ^ dh
	SZO = cond(dl)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	dh = dh ^ bl
	SZO = cond(dh)
	C = false
	call fn00402B83 (retsize: 4;)
	branch Test(EQ,Z) l004029B8_thunk_fn004029D2
	goto l004029BA
	// succ:  l004029BA l004029B8_thunk_fn004029D2
l00402985:
l004029B8_thunk_fn004029D2:
	call fn004029D2 (retsize: 0;)
	return
	// succ:  fn00402985_exit
l004029BA:
	__lock()
	al = Mem0[0xD50211F1:byte]
	// succ:  l004029BB_thunk_fn004029C0
l004029BB_thunk_fn004029C0:
	call fn004029C0 (retsize: 0;)
	return
	// succ:  fn00402985_exit
fn00402985_exit:


// fn004029BE
// Return size: 0
void fn004029BE()
fn004029BE_entry:
	// succ:  l004029BE
l004029BE:
	esp = fp
	dl = dl + ch
	SCZO = cond(dl)
	goto l004029BE_thunk_fn004029C0
	// succ:  l004029BE_thunk_fn004029C0
l004029BE:
l004029BE_thunk_fn004029C0:
	call fn004029C0 (retsize: 0;)
	return
	// succ:  fn004029BE_exit
fn004029BE_exit:


// fn004029C0
// Return size: 0
void fn004029C0()
fn004029C0_entry:
	// succ:  l004029C0
l004029C0:
	esp = fp
	dl = dl - dh
	SCZO = cond(dl)
	edx = edx | eax
	SZO = cond(edx)
	C = false
	esi = esi | edx
	SZO = cond(esi)
	C = false
	dh = bh
	edx = edx + 0x00000001
	SZO = cond(edx)
	v12 = (al & 0x01 << 0x00) != 0x00
	al = __ror(al, 0x00)
	C = v12
	dh = dh | dl
	SZO = cond(dh)
	C = false
	goto l004029CE_thunk_fn00402941
	// succ:  l004029CE_thunk_fn00402941
l004029C0:
	dl = dl - dh
	SCZO = cond(dl)
	edx = edx | eax
	SZO = cond(edx)
	C = false
	esi = esi | edx
	SZO = cond(esi)
	C = false
	dh = bh
	edx = edx + 0x00000001
	SZO = cond(edx)
	v14 = (al & 0x01 << 0x00) != 0x00
	al = __ror(al, 0x00)
	C = v14
	dh = dh | dl
	SZO = cond(dh)
	C = false
l004029CE_thunk_fn00402941:
	call fn00402941 (retsize: 0;)
	return
	// succ:  fn004029C0_exit
fn004029C0_exit:


// fn004029D2
// Return size: 0
void fn004029D2()
fn004029D2_entry:
	goto l004029D2
	// succ:  l004029D2
l004029CE_thunk_fn00402941:
	call fn00402941 (retsize: 0;)
	return
	// succ:  fn004029D2_exit
l004029D2:
	esp = fp
	call Mem0[ebx + edx * 0x00000002:ptr32] (retsize: 4;)
	Mem0[edi:word32] = __in(edx)
	edi = edi + 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = esp
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	goto l004029D7_thunk_fn004029D8
	// succ:  l004029D7_thunk_fn004029D8
l004029D2:
	goto l004029CE_thunk_fn00402941
	// succ:  l004029CE_thunk_fn00402941
l004029D7_thunk_fn004029D8:
	call fn004029D8 (retsize: 0;)
	return
	// succ:  fn004029D2_exit
fn004029D2_exit:


// fn004029D8
// Return size: 0
void fn004029D8()
fn004029D8_entry:
	goto l004029D8
	// succ:  l004029D8
l00402635:
	bh = bh + 0x2B + C
	SCZO = cond(bh)
	esi = ecx
	// succ:  l00402638_thunk_fn0040263A
l00402638_thunk_fn0040263A:
	call fn0040263A (retsize: 0;)
	return
	// succ:  fn004029D8_exit
l004029D8:
	esp = esp + 0x00000004
	eax = eax + edx
	SCZO = cond(eax)
	edi = ecx
	esi = esi - 0x00000001
	SZO = cond(esi)
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	edi = edi - esi
	SCZO = cond(edi)
	esi = ecx
	eax = eax + ebx
	SCZO = cond(eax)
	bh = ~bh
	branch Test(EQ,Z) l00402635
	// succ:  l004029F1 l00402635
l004029F1:
fn004029D8_exit:


// fn00402A1A
// Return size: 0
void fn00402A1A()
fn00402A1A_entry:
	goto l00402A1A
	// succ:  l00402A1A
l00402672:
	cl = cl ^ bl
	SZO = cond(cl)
	C = false
	ch = 0x36
	ch = -ch
	SCZO = cond(ch)
	C = ch == 0x00
	ch = ch - bh
	SCZO = cond(ch)
	bh = ~bh
	ch = ch + 0x01
	SZO = cond(ch)
	bl = bl | dl
	SZO = cond(bl)
	C = false
	ch = ch - 0x5D - C
	SCZO = cond(ch)
	ebx = ebx ^ ecx
	SZO = cond(ebx)
	C = false
	call fn00402180 (retsize: 4;)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	v23 = Mem0[ebp - 0x00000033:word32] - ebp - C
	Mem0[ebp - 0x00000033:word32] = v23
	SCZO = cond(v23)
	__outb(dx, al)
	Mem0[ecx - 0x00000076:word32] = ebp
	// succ:  l0040268F_thunk_fn00402692
l0040268F_thunk_fn00402692:
	call fn00402692 (retsize: 0;)
	return
	// succ:  fn00402A1A_exit
l00402A1A:
	esp = fp
	bh = bh + ah
	SCZO = cond(bh)
	ch = ch + 0x23 + C
	SCZO = cond(ch)
	cl = cl + 0xEF
	SCZO = cond(cl)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edi = edi - ebx
	SCZO = cond(edi)
	cl = dl
	ch = ch ^ bh
	SZO = cond(ch)
	C = false
	branch Test(SG,S) l00402672
	goto l00402A2F
	// succ:  l00402A2F l00402672
l00402A1A:
l00402A2F:
	edx = edx
	branch Test(PE,P) l00402A33
	// succ:  l00402A33
l00402A33:
	branch Test(NS,S) l00402672
	// succ:  l00402A39 l00402672
l00402A39:
	ds_eax = Mem0[ebx - 0x00000067:segptr32]
	v19 = (ah & 0x01 << 0x08 - 0x01) != 0x00
	ah = __rol(ah, 0x01)
	C = v19
	// succ:  l00402A3C_thunk_fn00402A3E
l00402A3C_thunk_fn00402A3E:
	call fn00402A3E (retsize: 0;)
	return
	// succ:  fn00402A1A_exit
fn00402A1A_exit:


// fn00402A3E
// Return size: 0
void fn00402A3E()
fn00402A3E_entry:
	call fn00402505 (retsize: 0;)
	return
	// succ:  l00402A3E fn00402A3E_exit
l00402A3E:
fn00402A3E_exit:


// fn00402A5C
// Return size: 0
void fn00402A5C()
fn00402A5C_entry:
	// succ:  l00402A5C
l00402A5C:
	esp = fp
	Mem0[esp:word32] = edi
fn00402A5C_exit:


// fn00402A80
// Return size: 0
void fn00402A80()
fn00402A80_entry:
	// succ:  l00402A80
l00402A80:
	esp = fp
	dl = ah
	eax = eax ^ edx
	SZO = cond(eax)
	C = false
	bh = bh | al
	SZO = cond(bh)
	C = false
	dh = dh + 0xF0
	SCZO = cond(dh)
	bh = bh + 0xE8 + C
	SCZO = cond(bh)
	eax = eax + edi
	SCZO = cond(eax)
	branch Test(ULE,CZ) l00402B39
	goto l00402A94
	// succ:  l00402A94 l00402B39
l00402A80:
l00402A94:
	// succ:  l00402A99
l00402A99:
l00402B39:
	ah = ah | dh
	SZO = cond(ah)
	C = false
	goto l00402B3B
	// succ:  l00402B3B
fn00402A80_exit:


// fn00402AA7
// Return size: 0
void fn00402AA7()
fn00402AA7_entry:
	// succ:  l00402AA7
l00402AA7:
	esp = fp
	Mem0[esp:word32] = edi
fn00402AA7_exit:


// fn00402AE1
// Return size: 0
void fn00402AE1()
fn00402AE1_entry:
	// succ:  l00402AE1
l00402AE1:
	esp = fp
	ch = ch + 0x28 + C
	SCZO = cond(ch)
	ah = cl
	cl = cl ^ ch
	SZO = cond(cl)
	C = false
	ebx = ebx + edx
	SCZO = cond(ebx)
	dh = dh ^ al
	SZO = cond(dh)
	C = false
	dl = dl + 0x8E
	SCZO = cond(dl)
	call fn00402619 (retsize: 4;)
	al = al | 0x34
	SZO = cond(al)
	C = false
	v14 = eax
	eax = esp
	esp = v14
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	SZO = cond(Mem0[ebp + 0x80042464:word32] & ecx)
	C = false
	goto l00402AF8_thunk_fn00402AFE
	// succ:  l00402AF8_thunk_fn00402AFE
l00402AE1:
l00402AF8_thunk_fn00402AFE:
	call fn00402AFE (retsize: 0;)
	return
	// succ:  fn00402AE1_exit
fn00402AE1_exit:


// fn00402AF9
// Return size: 0
void fn00402AF9()
fn00402AF9_entry:
	// succ:  l00402AF9
l00402AF9:
	esp = fp
	esp = esp + 0x00000004
	bh = bh + 0x26 + C
	SCZO = cond(bh)
	// succ:  l00402AFD_thunk_fn00402AFE
l00402AFD_thunk_fn00402AFE:
	call fn00402AFE (retsize: 0;)
	return
	// succ:  fn00402AF9_exit
fn00402AF9_exit:


// fn00402AFE
// Return size: 0
void fn00402AFE()
fn00402AFE_entry:
	// succ:  l00402AFE
l00402AFE:
	esp = fp
	al = Mem0[ebx + (uint32) al:byte]
	bh = bh - 0x01
	SZO = cond(bh)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	edi = edi + 0x00000001
	SZO = cond(edi)
	bh = bh + 0x01
	SZO = cond(bh)
	edi = edi ^ eax
	SZO = cond(edi)
	C = false
	ebx = ebx - eax
	SCZO = cond(ebx)
	bl = bl + ah
	SCZO = cond(bl)
	goto l00402B0F_thunk_fn00402C6F
	// succ:  l00402B0F_thunk_fn00402C6F
l00402AFE:
	bh = bh - 0x01
	SZO = cond(bh)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	edi = edi + 0x00000001
	SZO = cond(edi)
	bh = bh + 0x01
	SZO = cond(bh)
	edi = edi ^ eax
	SZO = cond(edi)
	C = false
	ebx = ebx - eax
	SCZO = cond(ebx)
	bl = bl + ah
	SCZO = cond(bl)
	// succ:  l00402B0B_thunk_fn00402C6F
l00402B0B_thunk_fn00402C6F:
	call fn00402C6F (retsize: 0;)
	return
	// succ:  fn00402AFE_exit
l00402B0F_thunk_fn00402C6F:
	call fn00402C6F (retsize: 0;)
	return
	// succ:  fn00402AFE_exit
fn00402AFE_exit:


// fn00402B18
// Return size: 0
void fn00402B18()
fn00402B18_entry:
	// succ:  l00402B18
l00402B18:
	esp = fp
	Mem0[esp - 0x00000024:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	dh = dh - dl
	SCZO = cond(dh)
	dl = 0x7B
	dl = dl + ah
	SCZO = cond(dl)
	edx = edx - 0x00000001
	SZO = cond(edx)
	dh = ~dh
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	al = al - 0x01
	SZO = cond(al)
	bh = bh + 0xD7
	SCZO = cond(bh)
	call fn00402D56 (retsize: 4;)
	eax = eax + 0x7E89AA4E + C
	SCZO = cond(eax)
	ebx = 0xE60AE5E1
fn00402B18_exit:


// fn00402B3B
// Return size: 0
void fn00402B3B()
fn00402B3B_entry:
	// succ:  l00402B3B
l00402B3B:
	al = ~al
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	bl = bl + 0xE2 + C
	SCZO = cond(bl)
	al = bl
	bl = bl + dh
	SCZO = cond(bl)
	eax = eax + 0x00000001
	SZO = cond(eax)
	bh = bh + 0xE4 + C
	SCZO = cond(bh)
	al = cl
	bl = bl - al
	SCZO = cond(bl)
	call fn00402F45 (retsize: 4;)
	branch Test(LT,SO) l00402B52_thunk_fn00402BA3
	goto l00402B54
	// succ:  l00402B54 l00402B52_thunk_fn00402BA3
l00402B52_thunk_fn00402BA3:
	call fn00402BA3 (retsize: 0;)
	return
	// succ:  fn00402B3B_exit
l00402B54:
	rArg0 = rArg0 * rArg3
	Z = __arpl(Mem0[edx + 0x80DEF6F3 + ebp:word16], bx, &Mem0[edx + 0x80DEF6F3 + ebp:word16])
	Mem0[ebx - 0x0000000A:byte] = 0xD6
	esi = esi + edi
	SCZO = cond(esi)
	dl = dl - 0x01
	SZO = cond(dl)
	dh = 0x61
	esi = esi - 0x00000001
	SZO = cond(esi)
	dl = dl + 0x01
	SZO = cond(dl)
	dl = dl + 0x63 + C
	SCZO = cond(dl)
	branch Test(ULT,C) l00402B6D_thunk_fn0040271F
	goto l00402B73
	// succ:  l00402B73 l00402B6D_thunk_fn0040271F
l00402B6D_thunk_fn0040271F:
	call fn0040271F (retsize: 0;)
	return
	// succ:  fn00402B3B_exit
l00402B73:
fn00402B3B_exit:


// fn00402B76
// Return size: 0
void fn00402B76()
fn00402B76_entry:
	// succ:  l00402B76
l00402B76:
	esp = fp
	v5 = Mem0[ebx + 0x2B97FFFF + edi * 0x00000008:word32] & 0xFFFFFF82
	Mem0[ebx + 0x2B97FFFF + edi * 0x00000008:word32] = v5
	SZO = cond(Mem0[ebx + 0x2B97FFFF + edi * 0x00000008:word32])
	C = false
	SCZO = cond(Mem0[esi - 0x00000067:word32] - 0x448FE38B)
	al = al & 0xF0
	SZO = cond(al)
	C = false
	edx = esi
	bh = bh + 0x9E
	SCZO = cond(bh)
	bh = 0xFF
	ebx = ebx + edi
	SCZO = cond(ebx)
	edx = edx ^ ebx
	SZO = cond(edx)
	C = false
	dl = 0xE4
	goto l00402B94_thunk_fn004021C8
	// succ:  l00402B94_thunk_fn004021C8
l00402B76:
l00402B94_thunk_fn004021C8:
	call fn004021C8 (retsize: 0;)
	return
	// succ:  fn00402B76_exit
fn00402B76_exit:


// fn00402B83
// Return size: 0
void fn00402B83()
fn00402B83_entry:
	// succ:  l00402B83
l00402B83:
	esp = fp
	Mem0[esp - 0x00000010:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = esi
	bh = bh + 0x9E
	SCZO = cond(bh)
	bh = 0xFF
	ebx = ebx + edi
	SCZO = cond(ebx)
	edx = edx ^ ebx
	SZO = cond(edx)
	C = false
	dl = 0xE4
	// succ:  l00402B94_thunk_fn004021C8
l00402B94_thunk_fn004021C8:
	call fn004021C8 (retsize: 0;)
	return
	// succ:  fn00402B83_exit
fn00402B83_exit:


// fn00402B99
// Return size: 0
void fn00402B99()
fn00402B99_entry:
	// succ:  l00402B99
l00402B99:
	esp = fp
	int3()
	branch Test(LT,SO) l00402B9A_thunk_fn00402B76
	goto l00402B9C
	// succ:  l00402B9C l00402B9A_thunk_fn00402B76
l00402B99:
l00402B9A_thunk_fn00402B76:
	call fn00402B76 (retsize: 0;)
	return
	// succ:  fn00402B99_exit
l00402B9C:
	al = al - 0xBC - C
	SCZO = cond(al)
	Mem0[ebx:byte] = 0x32
	// succ:  l00402B9E_thunk_fn00402BA1
l00402B9E_thunk_fn00402BA1:
	call fn00402BA1 (retsize: 0;)
	return
	// succ:  fn00402B99_exit
fn00402B99_exit:


// fn00402BA1
// Return size: 0
void fn00402BA1()
fn00402BA1_entry:
	// succ:  l00402BA1
l00402BA1:
	esp = fp
	rArg0 = rArg0 + (real64) Mem0[ebx:word32]
	goto l00402BA1_thunk_fn00402BA3
	// succ:  l00402BA1_thunk_fn00402BA3
l00402BA1:
	edx = edx + edi
	SCZO = cond(edx)
	goto l00402BA2_thunk_fn00402BA3
	// succ:  l00402BA2_thunk_fn00402BA3
l00402BA1_thunk_fn00402BA3:
	call fn00402BA3 (retsize: 0;)
	return
	// succ:  fn00402BA1_exit
l00402BA2_thunk_fn00402BA3:
	call fn00402BA3 (retsize: 0;)
	return
	// succ:  fn00402BA1_exit
fn00402BA1_exit:


// fn00402BA3
// Return size: 0
void fn00402BA3()
fn00402BA3_entry:
	// succ:  l00402BA3
l00402BA3:
	esp = fp
	al = Mem0[ebx + (uint32) al:byte]
	esi = esi - 0x00000001
	SZO = cond(esi)
	ecx = ecx | esi
	SZO = cond(ecx)
	C = false
	ah = ~ah
	ah = 0xFE
	al = dl
	dh = dh ^ bl
	SZO = cond(dh)
	C = false
	call fn004022DD (retsize: 4;)
	goto l00402BAF_thunk_fn00402BB4
	// succ:  l00402BAF_thunk_fn00402BB4
l00402BA3:
	esi = esi - 0x00000001
	SZO = cond(esi)
	ecx = ecx | esi
	SZO = cond(ecx)
	C = false
	ah = ~ah
	ah = 0xFE
	al = dl
	dh = dh ^ bl
	SZO = cond(dh)
	C = false
l00402BAF_thunk_fn00402BB4:
	call fn00402BB4 (retsize: 0;)
	return
	// succ:  fn00402BA3_exit
fn00402BA3_exit:


// fn00402BB4
// Return size: 0
void fn00402BB4()
fn00402BB4_entry:
	// succ:  l00402BB4
l00402BB4:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	Mem0[esi:word16] = gs
	SZO = cond(eax & 0x8046F2AC)
	C = false
	goto l00402BB8_thunk_fn00402BBD
	// succ:  l00402BB8_thunk_fn00402BBD
l00402BB4:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	Mem0[esi:word16] = gs
	SZO = cond(eax & 0x8046F2AC)
	C = false
	goto l00402BB8_thunk_fn00402BBD
	// succ:  l00402BB8_thunk_fn00402BBD
l00402BB8_thunk_fn00402BBD:
	call fn00402BBD (retsize: 0;)
	return
	// succ:  fn00402BB4_exit
l00402BB8_thunk_fn00402BBD:
	call fn00402BBD (retsize: 0;)
	return
	// succ:  fn00402BB4_exit
fn00402BB4_exit:


// fn00402BBB
// Return size: 0
void fn00402BBB()
fn00402BBB_entry:
	// succ:  l00402BBB
l00402BBB:
	esp = fp
	esi = esi + 0x00000001
	SZO = cond(esi)
	bh = bh + 0xB8
	SCZO = cond(bh)
	goto l00402BBC_thunk_fn00402BBD
	// succ:  l00402BBC_thunk_fn00402BBD
l00402BBB:
l00402BBC_thunk_fn00402BBD:
	call fn00402BBD (retsize: 0;)
	return
	// succ:  fn00402BBB_exit
l00402BC8_thunk_fn004027FD:
	call fn004027FD (retsize: 0;)
	return
	// succ:  fn00402BBB_exit
fn00402BBB_exit:


// fn00402BBD
// Return size: 0
void fn00402BBD()
fn00402BBD_entry:
	// succ:  l00402BBD
l00402BBD:
	esp = fp
	Mem0[eax + 0xFE2AD3F6:word32] = 0x2B28DF80
	goto l00402BC8_thunk_fn004027FD
	// succ:  l00402BC8_thunk_fn004027FD
l00402BBD:
	bl = ~bl
	bh = bh - dh
	SCZO = cond(bh)
	bh = bh - 0x28 - C
	SCZO = cond(bh)
	ebx = ebx - ecx
	SCZO = cond(ebx)
fn00402BBD_exit:


// fn00402BD4
// Return size: 4
void fn00402BD4()
fn00402BD4_entry:
	// succ:  l00402BD4
l00402BD4:
	esp = fp
	Mem0[esp:word32] = edx
	branch Test(NE,Z) l00402BD9
	// succ:  l00402BD9
l00402BD9:
	bl = bl
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	dh = ch
	dl = dl + bl
	SCZO = cond(dl)
	dl = ~dl
	branch Test(LT,SO) l00402EF7
	// succ:  l00402BEA l00402EF7
l00402BEA:
	// succ:  l00402BF0
l00402BF0:
	al = al
	branch Test(GE,SO) l00402EF7
	// succ:  l00402BF8 l00402EF7
l00402BF8:
	SCZO = ah
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0xFFFFFFCE
	branch Test(UGE,C) l00402BFB_thunk_fn00402B99
	goto l00402BFB_thunk_fn00402BFD
	// succ:  l00402BFB_thunk_fn00402BFD l00402BFB_thunk_fn00402B99
l00402BFB_thunk_fn00402B99:
	call fn00402B99 (retsize: 0;)
	return
	// succ:  fn00402BD4_exit
l00402BFB_thunk_fn00402BFD:
	call fn00402BFD (retsize: 0;)
	return
	// succ:  fn00402BD4_exit l00402BFB_thunk_fn00402BFD
l00402BFB_thunk_fn00402BFD:
	call fn00402BFD (retsize: 0;)
	return
	// succ:  fn00402BD4_exit
l00402EF7:
	edx = edx - eax
	SCZO = cond(edx)
	dh = dh + 0x01
	SZO = cond(dh)
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	esi = edx
	dh = dh + 0xA5
	SCZO = cond(dh)
	dh = dh + bh
	SCZO = cond(dh)
	edx = edx + eax
	SCZO = cond(edx)
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	edx = edx | ecx
	SZO = cond(edx)
	C = false
	edx = edx - eax
	SCZO = cond(edx)
	call fn00402F67 (retsize: 4;)
	return
	// succ:  fn00402BD4_exit
fn00402BD4_exit:


// fn00402BFD
// Return size: 0
void fn00402BFD()
fn00402BFD_entry:
	// succ:  l00402BFD
l00402BFD:
	esi = esi + 0x00000001
	SZO = cond(esi)
	bh = bh + bl
	SCZO = cond(bh)
	bh = bh + 0xDE + C
	SCZO = cond(bh)
	edi = edi - esi
	SCZO = cond(edi)
	bh = ~bh
	bh = bh + bl
	SCZO = cond(bh)
	edi = edi + ecx
	SCZO = cond(edi)
	edx = edx + ecx
	SCZO = cond(edx)
	bl = bl ^ dl
	SZO = cond(bl)
	C = false
	goto l00402C0F_thunk_fn00402A1A
	// succ:  l00402C0F_thunk_fn00402A1A
fn00402BFD_exit:


// fn00402C18
// Return size: 4
void fn00402C18()
fn00402C18_entry:
	goto l00402C18
	// succ:  l00402C18
l004025E5:
	edi = edi - esi
	SCZO = cond(edi)
	dl = dl + 0x29
	SCZO = cond(dl)
	dh = dh + ch
	SCZO = cond(dh)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	eax = ecx
	call fn004025F4 (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	// succ:  l004025EF_thunk_fn004025F4
l004025EF_thunk_fn004025F4:
	call fn004025F4 (retsize: 4;)
	return
	// succ:  fn00402C18_exit
l00402C18:
	esp = fp
	esp = esp + 0x00000004
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	edx = edx - 0x00000001
	SZO = cond(edx)
	bl = 0x26
	dh = dh ^ al
	SZO = cond(dh)
	C = false
	eax = edi
	dh = dh | ah
	SZO = cond(dh)
	C = false
	goto l004025E5
	// succ:  l004025E5
fn00402C18_exit:


// fn00402C31
// Return size: 0
void fn00402C31()
fn00402C31_entry:
	// succ:  l00402C31
l00402C31:
	esp = fp
	esp = esp + 0x00000004
	edx = edx ^ esi
	SZO = cond(edx)
	C = false
	dl = dl | ah
	SZO = cond(dl)
	C = false
	al = al ^ 0x68
	SZO = cond(al)
	C = false
	dh = dh | bh
	SZO = cond(dh)
	C = false
	dh = dh ^ bh
	SZO = cond(dh)
	C = false
	edx = edx ^ edi
	SZO = cond(edx)
	C = false
	dl = dl + cl
	SCZO = cond(dl)
	// succ:  l00402C42_thunk_fn004028D8
l00402C42_thunk_fn004028D8:
	call fn004028D8 (retsize: 0;)
	return
	// succ:  fn00402C31_exit
fn00402C31_exit:


// fn00402C6F
// Return size: 0
void fn00402C6F()
fn00402C6F_entry:
	// succ:  l00402C6F
l00402C6F:
	ebx = ebx - eax
	SCZO = cond(ebx)
	bh = bh - 0x88 - C
	SCZO = cond(bh)
	bl = bl + al
	SCZO = cond(bl)
	ebx = esi
	ebx = (word32) ah
	esi = esi + eax
	SCZO = cond(esi)
	call fn0040233D (retsize: 4;)
	edx_eax = eax *u eax
	SCZO = cond(edx_eax)
	Z = __arpl(ax, bx, &ax)
	v17 = Mem0[esp:word32]
	Mem0[esp:word32] = esi
	esi = v17
	edx = edx
fn00402C6F_exit:


// fn00402C86
// Return size: 0
void fn00402C86()
fn00402C86_entry:
	// succ:  l00402C86
l00402C86:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = esi
	esi = v3
	edx = edx
fn00402C86_exit:


// fn00402CAC
// Return size: 0
void fn00402CAC()
fn00402CAC_entry:
	// succ:  l00402CAC
l00402CAC:
	bl = 0x9E
	eax = eax ^ 0xFFFFFEC8
	SZO = cond(eax)
	C = false
	bh = bh + 0x0C + C
	SCZO = cond(bh)
	bl = bl - 0x65 - C
	SCZO = cond(bl)
	esi = esi + 0x00000001
	SZO = cond(esi)
	bh = bh + cl
	SCZO = cond(bh)
	bh = bh - ch
	SCZO = cond(bh)
	bl = ~bl
	bh = bh + al
	SCZO = cond(bh)
	call fn00402583 (retsize: 4;)
	v14 = Mem0[ebp + 0x4E56E84C + ebx * 0x00000008:word32] << cl
	Mem0[ebp + 0x4E56E84C + ebx * 0x00000008:word32] = v14
	SCZO = cond(v14)
	edx = 0xDA0BDA33
	// succ:  l00402CCE_thunk_fn00402CD3
l00402CCE_thunk_fn00402CD3:
	call fn00402CD3 (retsize: 0;)
	return
	// succ:  fn00402CAC_exit
fn00402CAC_exit:


// fn00402CD3
// Return size: 0
void fn00402CD3()
fn00402CD3_entry:
	// succ:  l00402CD3
l00402CD3:
	esp = fp
	bl = ~bl
	bl = bl - 0x01
	SZO = cond(bl)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bh = bh + 0x8D
	SCZO = cond(bh)
	bh = bh ^ cl
	SZO = cond(bh)
	C = false
	bh = bh + 0xE7 + C
	SCZO = cond(bh)
	branch Test(EQ,Z) l00402CE0_thunk_fn00402763
	// succ:  l00402CE0_thunk_fn00402CE6 l00402CE0_thunk_fn00402763 l00402CE0_thunk_fn00402CE6 l00402CE0_thunk_fn00402763
l00402CD3:
	bl = ~bl
	bl = bl - 0x01
	SZO = cond(bl)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bh = bh + 0x8D
	SCZO = cond(bh)
	bh = bh ^ cl
	SZO = cond(bh)
	C = false
	bh = bh + 0xE7 + C
	SCZO = cond(bh)
	branch Test(EQ,Z) l00402CE0_thunk_fn00402763
l00402CE0_thunk_fn00402763:
	call fn00402763 (retsize: 0;)
	return
	// succ:  fn00402CD3_exit
l00402CE0_thunk_fn00402CE6:
	call fn00402CE6 (retsize: 0;)
	return
	// succ:  fn00402CD3_exit
fn00402CD3_exit:


// fn00402CE6
// Return size: 0
void fn00402CE6()
fn00402CE6_entry:
	// succ:  l00402CE6
l00402CE6:
	esp = esp - 0x00000002
	Mem0[esp:word16] = bx
	bx = Mem0[esp:word16]
	esp = esp + 0x00000002
fn00402CE6_exit:


// fn00402CF7
// Return size: 0
void fn00402CF7()
fn00402CF7_entry:
	goto l00402CF7
	// succ:  l00402CF7
l00402500:
	dh = dh + 0xB3
	SCZO = cond(dh)
	bl = bl - 0x01
	SZO = cond(bl)
	// succ:  l00402503_thunk_fn00402505
l00402503_thunk_fn00402505:
	call fn00402505 (retsize: 0;)
	return
	// succ:  fn00402CF7_exit
l00402522:
	eax = eax ^ ebx
	SZO = cond(eax)
	C = false
	dl = dl - 0x9F - C
	SCZO = cond(dl)
	dh = dh + 0x0D
	SCZO = cond(dh)
	al = al - 0x1B - C
	SCZO = cond(al)
	dh = dh | ch
	SZO = cond(dh)
	C = false
	edx = edx - ebx
	SCZO = cond(edx)
	esi = esi - edx
	SCZO = cond(esi)
	ah = -ah
	SCZO = cond(ah)
	C = ah == 0x00
	edx = edx | ebx
	SZO = cond(edx)
	C = false
	edx = edx - 0x00000001
	SZO = cond(edx)
	goto l00402500
	// succ:  l00402500
l00402CF7:
	esp = fp
	esp = esp + 0x00000004
	dl = dl - al
	SCZO = cond(dl)
	ah = ah - 0x01
	SZO = cond(ah)
	bl = 0xF0
	edx = edx + 0x00000001
	SZO = cond(edx)
	dl = ~dl
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bl = dl
	branch Test(PE,P) l00402522
	// succ:  l00402D0E l00402522
l00402D0E:
	eax = eax
	// succ:  l00402D16
l00402D16:
	branch Test(PO,P) l00402522
	// succ:  l00402D1C l00402522
l00402D1C:
	// succ:  l00402D97
l00402D97:
	v19 = Mem0[ebx + 0xCDE66CF7:word32] - 0x00000001
	Mem0[ebx + 0xCDE66CF7:word32] = v19
	SZO = cond(v19)
	// succ:  l00402D97_thunk_fn00402D98
l00402D97_thunk_fn00402D98:
	call fn00402D98 (retsize: 0;)
	return
	// succ:  fn00402CF7_exit
fn00402CF7_exit:


// fn00402D56
// Return size: 0
void fn00402D56()
fn00402D56_entry:
	// succ:  l00402D56
l00402D56:
	esp = fp
	esp = esp + 0x00000004
	dh = dh + 0x01
	SZO = cond(dh)
	ebx = ebx + ecx
	SCZO = cond(ebx)
	bl = 0x9D
	bl = 0xA2
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	al = al | bh
	SZO = cond(al)
	C = false
	al = al + 0xB5
	SCZO = cond(al)
	// succ:  l00402D69_thunk_fn004021FC
l00402D69_thunk_fn004021FC:
	call fn004021FC (retsize: 0;)
	return
	// succ:  fn00402D56_exit
fn00402D56_exit:


// fn00402D98
// Return size: 0
void fn00402D98()
fn00402D98_entry:
	// succ:  l00402D98
l00402D98:
	esp = fp
	esi = edi
	Mem0[edi:byte] = __in(edx)
	edi = edi + 0x00000001
	__outb(0xCD, al)
	al = al - 0xFE
	SCZO = cond(al)
	goto l00402D9D_thunk_fn00402D9F
	// succ:  l00402D9D_thunk_fn00402D9F
l00402D98:
	al = al - 0xFE
	SCZO = cond(al)
	// succ:  l00402D9D_thunk_fn00402D9E
l00402D9D_thunk_fn00402D9E:
	call fn00402D9E (retsize: 0;)
	return
	// succ:  fn00402D98_exit
l00402D9D_thunk_fn00402D9F:
	call fn00402D9F (retsize: 0;)
	return
	// succ:  fn00402D98_exit
fn00402D98_exit:


// fn00402D9E
// Return size: 0
void fn00402D9E()
fn00402D9E_entry:
	// succ:  l00402D9E
l00402D9E:
	esp = fp
	bh = bh + 0x01
	SZO = cond(bh)
	goto l00402D9E_thunk_fn00402D9F
	// succ:  l00402D9E_thunk_fn00402D9F
l00402D9E:
	Mem0[ebx + 0xDA8A46F9:word32] = 0x4003F703
	SCZO = cond(al - 0xF6)
	al = Mem0[ebx + (uint32) al:byte]
	bl = bl + 0x41
	SCZO = cond(bl)
	bh = 0xA5
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
l00402D9E_thunk_fn00402D9F:
	call fn00402D9F (retsize: 0;)
	return
	// succ:  fn00402D9E_exit
fn00402D9E_exit:


// fn00402D9F
// Return size: 0
void fn00402D9F()
fn00402D9F_entry:
	// succ:  l00402D9F
l00402D9F:
	esp = fp
	Mem0[ebx + 0xDA8A46F9:word32] = 0x4003F703
	SCZO = cond(al - 0xF6)
	al = Mem0[ebx + (uint32) al:byte]
	bl = bl + 0x41
	SCZO = cond(bl)
	bh = 0xA5
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	goto l00402DB3_thunk_fn004027D7
	// succ:  l00402DB3_thunk_fn004027D7
l00402D9F:
	edi = ecx
	esi = esi + 0x00000001
	SZO = cond(esi)
	bl = dl
	esi = esi + edi
	SCZO = cond(esi)
	eax = eax + Mem0[eax + 0x0000003C:word32]
	SCZO = cond(eax)
	bh = ~bh
	bl = bl + 0x41
	SCZO = cond(bl)
	bh = 0xA5
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	goto l00402DB3_thunk_fn004027D7
	// succ:  l00402DB3_thunk_fn004027D7
l00402DB3_thunk_fn004027D7:
	call fn004027D7 (retsize: 0;)
	return
	// succ:  fn00402D9F_exit
l00402DB3_thunk_fn004027D7:
	call fn004027D7 (retsize: 0;)
	return
	// succ:  fn00402D9F_exit
fn00402D9F_exit:


// fn00402DEA
// Return size: 0
void fn00402DEA()
fn00402DEA_entry:
	// succ:  l00402DEA
l00402DEA:
	esp = fp
	ah = ~ah
	edx = edx | esi
	SZO = cond(edx)
	C = false
	eax = ecx
	esi = esi + 0x00000001
	SZO = cond(esi)
	ah = ah - 0x01
	SZO = cond(ah)
	bh = bh - dl
	SCZO = cond(bh)
	dl = dl - cl
	SCZO = cond(dl)
	branch Test(SG,S) l00402DF7_thunk_fn00402427
	goto l00402DFD
	// succ:  l00402DFD l00402DF7_thunk_fn00402427
l00402DEA:
l00402DF7_thunk_fn00402427:
	call fn00402427 (retsize: 0;)
	return
	// succ:  fn00402DEA_exit
l00402DFD:
	v15 = esi
	esi = esi
	esi = v15
	branch Test(ULE,CZ) l00402E01
	// succ:  l00402E01
l00402E01:
	branch Test(NS,S) l00402E01_thunk_fn00402427
	goto l00402E07
	// succ:  l00402E07 l00402E01_thunk_fn00402427
l00402E01_thunk_fn00402427:
	call fn00402427 (retsize: 0;)
	return
	// succ:  fn00402DEA_exit
l00402E07:
	rArg0 = rArg0 / (real64) Mem0[edx - 0x0000003C:word32]
	es = Mem0[esp:selector]
	esp = esp + 0x00000002
	bl = 0x7F
	cl = 0x90
	// succ:  l00402E0D_thunk_fn00402E0F
l00402E0D_thunk_fn00402E0F:
	call fn00402E0F (retsize: 0;)
	return
	// succ:  fn00402DEA_exit
fn00402DEA_exit:


// fn00402E0F
// Return size: 0
void fn00402E0F()
fn00402E0F_entry:
	// succ:  l00402E0F
l00402E0F:
	esp = fp
	ecx = eax
	bl = bl | dl
	SZO = cond(bl)
	C = false
	bh = dl
	al = al + 0x20 + C
	SCZO = cond(al)
	ebx = ebx ^ ecx
	SZO = cond(ebx)
	C = false
	ah = ah + bl
	SCZO = cond(ah)
	dh = dh + 0x01
	SZO = cond(dh)
	dl = dl + ah
	SCZO = cond(dl)
	call fn004020FC (retsize: 4;)
	es_ecx = Mem0[ecx + 0x00000000:segptr32]
	SZO = cond(bl & 0x35)
	C = false
	v17 = Mem0[eax + 0xF00B52D6:word32]
	Mem0[eax + 0xF00B52D6:word32] = eax
	eax = v17
	call fn00402228 (retsize: 4;)
	// succ:  l00402E2A_thunk_fn00402E2B l00402E3E_thunk_fn00402E43
l00402E0F:
l00402E2A_thunk_fn00402E2B:
	call fn00402E2B (retsize: 0;)
	return
	// succ:  fn00402E0F_exit
l00402E3E_thunk_fn00402E43:
	call fn00402E43 (retsize: 0;)
	return
	// succ:  fn00402E0F_exit
fn00402E0F_exit:


// fn00402E2B
// Return size: 0
void fn00402E2B()
fn00402E2B_entry:
	// succ:  l00402E2B
l00402E2B:
	esp = fp
	dh = dh + 0x52 + C
	SCZO = cond(dh)
	esi = esi | eax
	SZO = cond(esi)
	C = false
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	dh = dh - 0x01
	SZO = cond(dh)
	dh = dh - 0x01
	SZO = cond(dh)
	dl = dl + 0x12 + C
	SCZO = cond(dl)
	dl = dl ^ bh
	SZO = cond(dl)
	C = false
	dh = dh + 0xC0
	SCZO = cond(dh)
	call fn00402228 (retsize: 4;)
	goto l00402E3E_thunk_fn00402E43
	// succ:  l00402E3E_thunk_fn00402E43
l00402E2B:
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	dh = dh - 0x01
	SZO = cond(dh)
	dh = dh - 0x01
	SZO = cond(dh)
	dl = dl + 0x12 + C
	SCZO = cond(dl)
	dl = dl ^ bh
	SZO = cond(dl)
	C = false
	dh = dh + 0xC0
	SCZO = cond(dh)
l00402E3E_thunk_fn00402E43:
	call fn00402E43 (retsize: 0;)
	return
	// succ:  fn00402E2B_exit
fn00402E2B_exit:


// fn00402E43
// Return size: 0
void fn00402E43()
fn00402E43_entry:
	// succ:  l00402E43
l00402E43:
	esp = fp
	bl = bl ^ Mem0[ebx:byte]
	SZO = cond(bl)
	C = false
	Mem0[ecx - 0x0000004C:byte] = 0xF4
	v8 = eax
	eax = ecx
	ecx = v8
	goto l00402E49_thunk_fn00402E4A
	// succ:  l00402E49_thunk_fn00402E4A
l00402E43:
	bl = bl ^ Mem0[ebx:byte]
	SZO = cond(bl)
	C = false
	Mem0[ecx - 0x0000004C:byte] = 0xF4
	v10 = eax
	eax = ecx
	ecx = v10
	goto l00402E49_thunk_fn00402E4A
	// succ:  l00402E49_thunk_fn00402E4A
l00402E49_thunk_fn00402E4A:
	call fn00402E4A (retsize: 0;)
	return
	// succ:  fn00402E43_exit
l00402E49_thunk_fn00402E4A:
	call fn00402E4A (retsize: 0;)
	return
	// succ:  fn00402E43_exit
fn00402E43_exit:


// fn00402E4A
// Return size: 0
void fn00402E4A()
fn00402E4A_entry:
	// succ:  l00402E4A
l00402E4A:
	esp = fp
	dh = dh ^ bh
	SZO = cond(dh)
	C = false
	dh = ~dh
	al = al + bl
	SCZO = cond(al)
	ah = ah ^ ch
	SZO = cond(ah)
	C = false
	eax = eax - ecx
	SCZO = cond(eax)
	esi = ebx
	call fn00402386 (retsize: 4;)
	al = al ^ 0x96
	SZO = cond(al)
	C = false
l00402E4A:
fn00402E4A_exit:


// fn00402E61
// Return size: 0
void fn00402E61()
fn00402E61_entry:
	// succ:  l00402E61
l00402E61:
	esp = fp
	Mem0[esp - 0x00000018:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh + 0x52
	SCZO = cond(bh)
	esi = esi | eax
	SZO = cond(esi)
	C = false
	bh = bh ^ dl
	SZO = cond(bh)
	C = false
	bh = bh - ch
	SCZO = cond(bh)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	esi = esi - ecx
	SCZO = cond(esi)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	esi = esi + eax
	SCZO = cond(esi)
	// succ:  l00402E76_thunk_fn00402D9E
l00402E76_thunk_fn00402D9E:
	call fn00402D9E (retsize: 0;)
	return
	// succ:  fn00402E61_exit
fn00402E61_exit:


// fn00402E80
// Return size: 0
void fn00402E80()
fn00402E80_entry:
	// succ:  l00402E80
l00402E80:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = ebx
	ebx = v3
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh + 0x71
	SCZO = cond(bh)
	edi = edi - ecx
	SCZO = cond(edi)
	bh = ~bh
	edi = edi + 0x00000001
	SZO = cond(edi)
	bh = bh + ah
	SCZO = cond(bh)
	call fn004026E4 (retsize: 4;)
	ax = __inw(dx)
	esp = 0xD902532B
	// succ:  l00402E9A_thunk_fn00402E9F
l00402E9A_thunk_fn00402E9F:
	call fn00402E9F (retsize: 0;)
	return
	// succ:  fn00402E80_exit
fn00402E80_exit:


// fn00402E9F
// Return size: 0
void fn00402E9F()
fn00402E9F_entry:
	// succ:  l00402E9F
l00402E9F:
	esp = fp
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	ebx = ebx - eax
	SCZO = cond(ebx)
	bl = bl - 0x01
	SZO = cond(bl)
	bh = ch
	edi = edi + 0x00000001
	SZO = cond(edi)
	edi = edi + 0x00000001
	SZO = cond(edi)
	bl = bl ^ ch
	SZO = cond(bl)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	// succ:  l00402EAC_thunk_fn004020AA l00402EAC_thunk_fn004020AA
l00402E9F:
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	ebx = ebx - eax
	SCZO = cond(ebx)
	bl = bl - 0x01
	SZO = cond(bl)
	bh = ch
	edi = edi + 0x00000001
	SZO = cond(edi)
	edi = edi + 0x00000001
	SZO = cond(edi)
	bl = bl ^ ch
	SZO = cond(bl)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
l00402EAC_thunk_fn004020AA:
	call fn004020AA (retsize: 0;)
	return
	// succ:  fn00402E9F_exit
fn00402E9F_exit:


// fn00402F45
// Return size: 0
void fn00402F45()
fn00402F45_entry:
	goto l00402F45
	// succ:  l00402F45
l00402894:
	edx = edx ^ ebx
	SZO = cond(edx)
	C = false
	al = al + 0x45
	SCZO = cond(al)
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	eax = eax | ebx
	SZO = cond(eax)
	C = false
	bh = bh ^ bl
	SZO = cond(bh)
	C = false
	ecx = ecx - 0x00000BCA
	SCZO = cond(ecx)
	al = al + ah
	SCZO = cond(al)
	bh = bh - 0x4B - C
	SCZO = cond(bh)
	ah = ah - bh
	SCZO = cond(ah)
	branch Test(LT,SO) l00402EB8
	// succ:  l004028B2 l00402EB8
l004028B2:
	v16 = dl
	dl = dl
	dl = v16
	branch Test(GE,SO) l00402EB8
	// succ:  l004028BA l00402EB8
l004028BA:
	v19 = Mem0[edx - 0x00000072:byte] - cl
	Mem0[edx - 0x00000072:byte] = v19
	SCZO = cond(v19)
	esp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ch = -ch
	SCZO = cond(ch)
	C = ch == 0x00
	cl = cl | ah
	SZO = cond(cl)
	C = false
	edx = edx - ecx
	SCZO = cond(edx)
	edx = edx + 0x00000001
	SZO = cond(edx)
	edi = edi + 0x00000001
	SZO = cond(edi)
	ecx = ecx | esi
	SZO = cond(ecx)
	C = false
	edx = edi
	cl = cl - 0x01
	SZO = cond(cl)
	call fn00402C86 (retsize: 4;)
	edi = edi + Mem0[esi + 0x840E5D1D:word32] + C
	SCZO = cond(edi)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l004028D7_thunk_fn004028D8
l004028D7_thunk_fn004028D8:
	call fn004028D8 (retsize: 0;)
	return
	// succ:  fn00402F45_exit
l00402EB8:
	dh = dh + 0x5D
	SCZO = cond(dh)
	bl = bl - 0x5A - C
	SCZO = cond(bl)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	eax = ecx
	bl = bl - 0x01
	SZO = cond(bl)
	dl = 0x5C
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ah = ah + 0x01
	SZO = cond(ah)
	branch Test(ULT,C) l00402EC8_thunk_fn00402692
	goto l00402ECE
	// succ:  l00402ECE l00402EC8_thunk_fn00402692
l00402EC8_thunk_fn00402692:
	call fn00402692 (retsize: 0;)
	return
	// succ:  fn00402F45_exit
l00402ECE:
	v23 = bh
	bh = bh
	bh = v23
	branch Test(UGE,C) l00402ED0_thunk_fn00402692
	goto l00402ED6
	// succ:  l00402ED6 l00402ED0_thunk_fn00402692
l00402ED0_thunk_fn00402692:
	call fn00402692 (retsize: 0;)
	return
	// succ:  fn00402F45_exit
l00402ED6:
l00402F45:
	Mem0[esp - 0x00000024:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bl = dh
	ebx = ebx - edx
	SCZO = cond(ebx)
	bl = bh
	bl = bl | ah
	SZO = cond(bl)
	C = false
	al = bh
	eax = eax + ecx
	SCZO = cond(eax)
	branch Test(ULT,C) l00402894
	// succ:  l00402F5C l00402894
l00402F5C:
fn00402F45_exit:


// fn00402F67
// Return size: 0
void fn00402F67()
fn00402F67_entry:
	goto l00402F67
	// succ:  l00402F67
l004029FF:
	dh = dh ^ cl
	SZO = cond(dh)
	C = false
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	dh = dh + 0x04
	SCZO = cond(dh)
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	esi = esi + 0x00000001
	SZO = cond(esi)
	edx = edx + ebx
	SCZO = cond(edx)
	dh = dh | ah
	SZO = cond(dh)
	C = false
	call fn00402A5C (retsize: 4;)
	v79 = Mem0[ebp + 0x737BEBF7:byte]
	Mem0[ebp + 0x737BEBF7:byte] = bl
	bl = v79
l00402F67:
	esp = fp
	Mem0[esp - 0x0000000C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[ecx:byte] = al
	dl = dl + 0x01
	SZO = cond(dl)
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	dl = dl ^ ah
	SZO = cond(dl)
	C = false
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	dl = dl - 0xAF - C
	SCZO = cond(dl)
	edx = edx + 0x00000001
	SZO = cond(edx)
	dh = dh ^ cl
	SZO = cond(dh)
	C = false
	branch Test(SG,S) l004029FF
	// succ:  l00402F81 l004029FF
l00402F81:
	v14 = bl
	bl = bl
	bl = v14
	branch Test(NS,S) l004029FF
	// succ:  l00402F89 l004029FF
l00402F89:
	v18 = Mem0[edi + 0xC3088E6A:real64] / rArg0
	Mem0[edi + 0xC3088E6A:real64] = v18
	v20 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v20
	SCZO = cond(v20)
	v21 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v21
	SCZO = cond(v21)
	v22 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v22
	SCZO = cond(v22)
	v23 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v23
	SCZO = cond(v23)
	v24 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v24
	SCZO = cond(v24)
	v25 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v25
	SCZO = cond(v25)
	v26 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v26
	SCZO = cond(v26)
	v27 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v27
	SCZO = cond(v27)
	v28 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v28
	SCZO = cond(v28)
	v29 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v29
	SCZO = cond(v29)
	v30 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v30
	SCZO = cond(v30)
	v31 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v31
	SCZO = cond(v31)
	v32 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v32
	SCZO = cond(v32)
	v33 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v33
	SCZO = cond(v33)
	v34 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v34
	SCZO = cond(v34)
	v35 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v35
	SCZO = cond(v35)
	v36 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v36
	SCZO = cond(v36)
	v37 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v37
	SCZO = cond(v37)
	v38 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v38
	SCZO = cond(v38)
	v39 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v39
	SCZO = cond(v39)
	v40 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v40
	SCZO = cond(v40)
	v41 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v41
	SCZO = cond(v41)
	v42 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v42
	SCZO = cond(v42)
	v43 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v43
	SCZO = cond(v43)
	v44 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v44
	SCZO = cond(v44)
	v45 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v45
	SCZO = cond(v45)
	v46 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v46
	SCZO = cond(v46)
	v47 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v47
	SCZO = cond(v47)
	v48 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v48
	SCZO = cond(v48)
	v49 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v49
	SCZO = cond(v49)
	v50 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v50
	SCZO = cond(v50)
	v51 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v51
	SCZO = cond(v51)
	v52 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v52
	SCZO = cond(v52)
	v53 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v53
	SCZO = cond(v53)
	v54 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v54
	SCZO = cond(v54)
	v55 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v55
	SCZO = cond(v55)
	v56 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v56
	SCZO = cond(v56)
	v57 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v57
	SCZO = cond(v57)
	v58 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v58
	SCZO = cond(v58)
	v59 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v59
	SCZO = cond(v59)
	v60 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v60
	SCZO = cond(v60)
	v61 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v61
	SCZO = cond(v61)
	v62 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v62
	SCZO = cond(v62)
	v63 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v63
	SCZO = cond(v63)
	v64 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v64
	SCZO = cond(v64)
	v65 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v65
	SCZO = cond(v65)
	v66 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v66
	SCZO = cond(v66)
	v67 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v67
	SCZO = cond(v67)
	v68 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v68
	SCZO = cond(v68)
	v69 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v69
	SCZO = cond(v69)
	v70 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v70
	SCZO = cond(v70)
	v71 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v71
	SCZO = cond(v71)
	v72 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v72
	SCZO = cond(v72)
	v73 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v73
	SCZO = cond(v73)
	v74 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v74
	SCZO = cond(v74)
	v75 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v75
	SCZO = cond(v75)
	bl = bl + bh
	SCZO = cond(bl)
fn00402F67_exit:


