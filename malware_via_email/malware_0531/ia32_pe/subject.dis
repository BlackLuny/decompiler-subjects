// fn00401006
// Return size: 4
void fn00401006()
fn00401006_entry:
	// succ:  l00401006
l00401006:
	esp = fp
	esp = esp + 0x00000004
	edi = edi - 0x00000001
	SZO = cond(edi)
	edi = edi - 0x00000001
	SZO = cond(edi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	ebx = esi
	edi = ebx
	ebx = ebx ^ edi
	SZO = cond(ebx)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	// succ:  l004010B4
l004010B4:
	bl = bl - cl
	SCZO = cond(bl)
	edi = edi | ecx
	SZO = cond(edi)
	C = false
	bh = bh | al
	SZO = cond(bh)
	C = false
	edi = edi + ebx
	SCZO = cond(edi)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	call fn0040107B (retsize: 4;)
	Mem0[esi + 0x494C320C:word32] = 0x4E4F9B47
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	esi = esi + edx
	SCZO = cond(esi)
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	call fn0040101D (retsize: 4;)
	eax = __indw(0x71)
	ecx = ecx ^ Mem0[edi + 0x33D90B43:word32]
	SZO = cond(ecx)
	C = false
	// succ:  l004010DC_thunk_fn004010E2
l004010DC_thunk_fn004010E2:
	call fn004010E2 (retsize: 4;)
	return
	// succ:  fn00401006_exit
fn00401006_exit:


// fn0040101D
// Return size: 0
void fn0040101D()
fn0040101D_entry:
	// succ:  l0040101D
l0040101D:
	esp = fp
	Mem0[esp - 0x00000014:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ecx
	ebx = ebx ^ edi
	SZO = cond(ebx)
	C = false
	edi = edi + ebx
	SCZO = cond(edi)
	esi = esi - eax
	SCZO = cond(esi)
	esi = esi - edx
	SCZO = cond(esi)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx ^ esi
	SZO = cond(ecx)
	C = false
	eax = eax + 0x00000001
	SZO = cond(eax)
fn0040101D_exit:


// fn00401053
// Return size: 0
void fn00401053()
fn00401053_entry:
	// succ:  l00401053
l00401053:
	esp = fp
	edx = edx ^ ebx
	SZO = cond(edx)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	esi = esi + 0x00000001
	SZO = cond(esi)
	ecx = ecx + edx
	SCZO = cond(ecx)
	goto l00401059_thunk_fn0040114D
	// succ:  l00401059_thunk_fn0040114D
l00401053:
l00401059_thunk_fn0040114D:
	call fn0040114D (retsize: 0;)
	return
	// succ:  fn00401053_exit
fn00401053_exit:


// fn0040105E
// Return size: 0
void fn0040105E()
fn0040105E_entry:
	goto l0040105E
	// succ:  l0040105E
l00401039:
	edi = edx
	ebx = ebx | eax
	SZO = cond(ebx)
	C = false
	ebx = edx
	edi = edi - 0x00000001
	SZO = cond(edi)
	edi = edi - 0x00000001
	SZO = cond(edi)
	ebx = edx
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	ebx = ebx + eax
	SCZO = cond(ebx)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	call fn00401006 (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	eax = eax | 0xAF870F36
	SZO = cond(eax)
	C = false
l0040105E:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	ebx = ebx + edi
	SCZO = cond(ebx)
	edi = edi + edx
	SCZO = cond(edi)
	edi = edi | edx
	SZO = cond(edi)
	C = false
	ebx = ebx - edi
	SCZO = cond(ebx)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	esi = esi | edi
	SZO = cond(esi)
	C = false
	edi = edi ^ esi
	SZO = cond(edi)
	C = false
	goto l00401039
	// succ:  l00401039
fn0040105E_exit:


// fn0040107B
// Return size: 0
void fn0040107B()
fn0040107B_entry:
	// succ:  l0040107B
l0040107B:
	esp = fp
	esp = esp + 0x00000004
	esi = esi | eax
	SZO = cond(esi)
	C = false
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bh = bh + dl
	SCZO = cond(bh)
	bl = bl - cl
	SCZO = cond(bl)
	bl = 0xBD
	esi = esi - 0x00000001
	SZO = cond(esi)
	bh = bh + bl
	SCZO = cond(bh)
	esi = edx
	call fn00401097 (retsize: 4;)
	esi = esi - eax - C
	SCZO = cond(esi)
	es_ebx = Mem0[edi + 0x00000000:segptr32]
	// succ:  l00401095_thunk_fn00401097
l00401095_thunk_fn00401097:
	call fn00401097 (retsize: 0;)
	return
	// succ:  fn0040107B_exit
fn0040107B_exit:


// fn00401097
// Return size: 0
void fn00401097()
fn00401097_entry:
	// succ:  l00401097
l00401097:
	esp = fp
	Mem0[esp - 0x00000028:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bl = bl ^ dl
	SZO = cond(bl)
	C = false
	bl = bl - al
	SCZO = cond(bl)
	bl = dh
	ebx = ebx | edx
	SZO = cond(ebx)
	C = false
	ebx = ebx - edi
	SCZO = cond(ebx)
	bl = bl | cl
	SZO = cond(bl)
	C = false
fn00401097_exit:


// fn004010DE
// Return size: 0
void fn004010DE()
fn004010DE_entry:
	// succ:  l004010DE
l004010DE:
	esp = fp
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
	eax = eax ^ edx
	SZO = cond(eax)
	C = false
	goto l004010E1_thunk_fn004010E2
	// succ:  l004010E1_thunk_fn004010E2
l004010DE:
l004010E1_thunk_fn004010E2:
	call fn004010E2 (retsize: 4;)
	return
	// succ:  fn004010DE_exit
fn004010DE_exit:


// fn004010E2
// Return size: 4
void fn004010E2()
fn004010E2_entry:
	// succ:  l004010E2
l004010E2:
	esp = fp
	return
	// succ:  fn004010E2_exit
l004010E2:
	edx = edx ^ esi
	SZO = cond(edx)
	C = false
	edi = edi + 0x00000001
	SZO = cond(edi)
	edi = edi ^ esi
	SZO = cond(edi)
	C = false
	// succ:  l004010EF
l004010EF:
	ebx = ebx - edi
	SCZO = cond(ebx)
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	eax = eax - 0x00000001
	SZO = cond(eax)
	edx = edx - 0x00000001
	SZO = cond(edx)
	esi = esi - 0x00000001
	SZO = cond(esi)
	edx = edx - esi
	SCZO = cond(edx)
	esi = esi + 0x00000001
	SZO = cond(esi)
	// succ:  l004010FA_thunk_fn00401053
l004010FA_thunk_fn00401053:
	call fn00401053 (retsize: 0;)
	return
	// succ:  fn004010E2_exit
fn004010E2_exit:


// fn0040111F
// Return size: 0
void fn0040111F()
fn0040111F_entry:
	// succ:  l0040111F
l0040111F:
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = ecx
	ecx = v3
	// succ:  l00401127
l00401127:
fn0040111F_exit:


// fn00401139
// Return size: 0
void fn00401139()
fn00401139_entry:
	// succ:  l00401139
l00401139:
	edx = edx - 0x00000001
	SZO = cond(edx)
	eax = ebx
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ebx = ebx ^ edi
	SZO = cond(ebx)
	C = false
	edx = edx | ebx
	SZO = cond(edx)
	C = false
	branch Test(ULE,CZ) l00401143_thunk_fn004010DE
	goto l00401145
	// succ:  l00401145 l00401143_thunk_fn004010DE
l00401143_thunk_fn004010DE:
	call fn004010DE (retsize: 0;)
	return
	// succ:  fn00401139_exit
l00401145:
fn00401139_exit:


// fn0040114D
// Return size: 0
void fn0040114D()
fn0040114D_entry:
	// succ:  l0040114D
l0040114D:
	esp = fp
	call fn00402010 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	v4 = eax
	eax = edi
	edi = v4
l0040114D:
fn0040114D_exit:


// fn00401E36
// Return size: 0
void fn00401E36()
fn00401E36_entry:
	// succ:  l00401E36
l00401E36:
	esp = fp
	edi = edi | edx
	SZO = cond(edi)
	C = false
	bh = 0x8D
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edi = edi - 0x00000001
	SZO = cond(edi)
	ch = ch - cl
	SCZO = cond(ch)
	edx = edx + 0x00000001
	SZO = cond(edx)
	ch = ch + al
	SCZO = cond(ch)
	cl = cl | bh
	SZO = cond(cl)
	C = false
	ecx = ecx - ebx
	SCZO = cond(ecx)
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	goto l00402950
	// succ:  l00402950
l00401E36:
l00402950:
	edi = edi + 0x00000001
	SZO = cond(edi)
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	esi = edi
	edx = edx + ebx
	SCZO = cond(edx)
	ch = ch ^ bh
	SZO = cond(ch)
	C = false
	esi = esi ^ ecx
	SZO = cond(esi)
	C = false
	edx = edx ^ ebx
	SZO = cond(edx)
	C = false
	cl = bh
	esi = eax
	call fn00401EBE (retsize: 4;)
	edi = edi - Mem0[edx:word32] - C
	SCZO = cond(edi)
	dh = dh + dl
	SCZO = cond(dh)
	v18 = eax
	eax = edx
	edx = v18
	v19 = (esp & 0x00000001 << cl) != 0x00000000
	esp = __ror(esp, cl)
	C = v19
	branch Test(LE,SZO) l0040296D_thunk_fn004029B7
	goto l0040296F
	// succ:  l0040296F l0040296D_thunk_fn004029B7
l0040296D_thunk_fn004029B7:
	call fn004029B7 (retsize: 0;)
	return
	// succ:  fn00401E36_exit
l0040296F:
	bh = bh + ch
	SCZO = cond(bh)
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[ecx:word32]
	dl = 0x27
	bl = 0xC1
	bl = bl - dl
	SCZO = cond(bl)
	bh = 0x7C
	eax = eax | ecx
	SZO = cond(eax)
	C = false
	call fn0040263D (retsize: 4;)
	Mem0[edi:word32] = eax
	edi = edi + 0x00000004
	eax = eax ^ 0x3302300D
	SZO = cond(eax)
	C = false
fn00401E36_exit:


// fn00401E6C
// Return size: 0
void fn00401E6C()
fn00401E6C_entry:
	// succ:  l00401E6C
l00401E6C:
	esp = fp
	ch = ch + dh
	SCZO = cond(ch)
	ebx = esi
	esi = esi + ecx
	SCZO = cond(esi)
	ebx = ebx - eax
	SCZO = cond(ebx)
	eax = Mem0[edx:word32]
	dh = cl
	ch = ch ^ ah
	SZO = cond(ch)
	C = false
	bh = bh - al
	SCZO = cond(bh)
	goto l00401E7C_thunk_fn004023F6
	// succ:  l00401E7C_thunk_fn004023F6
l00401E6C:
l00401E7C_thunk_fn004023F6:
	call fn004023F6 (retsize: 0;)
	return
	// succ:  fn00401E6C_exit
fn00401E6C_exit:


// fn00401E86
// Return size: 0
void fn00401E86()
fn00401E86_entry:
	// succ:  l00401E86
l00401E86:
	edi = edi + 0x00000001
	SZO = cond(edi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	edi = edi + edx
	SCZO = cond(edi)
	bl = 0xDA
	bl = bl + cl
	SCZO = cond(bl)
	eax = eax ^ 0xFFFFFEC8
	SZO = cond(eax)
	C = false
	branch Test(PE,P) l00401E93_thunk_fn00402A4C
	goto l00401E99
	// succ:  l00401E99 l00401E93_thunk_fn00402A4C
l00401E93_thunk_fn00402A4C:
	call fn00402A4C (retsize: 0;)
	return
	// succ:  fn00401E86_exit
l00401E99:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	v14 = ebx
	ebx = ebx
	ebx = v14
	branch Test(PO,P) l00401E9D_thunk_fn00402A4C
	goto l00401EA3
	// succ:  l00401EA3 l00401E9D_thunk_fn00402A4C
l00401E9D_thunk_fn00402A4C:
	call fn00402A4C (retsize: 0;)
	return
	// succ:  fn00401E86_exit
l00401EA3:
	SCZO = cond(eax - Mem0[edi:word32])
	edi = edi + 0x00000004
fn00401E86_exit:


// fn00401EA9
// Return size: 0
void fn00401EA9()
fn00401EA9_entry:
	// succ:  l00401EA9
l00401EA9:
	esp = fp
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	eax = eax + 0x00000001
	SZO = cond(eax)
	cl = cl | al
	SZO = cond(cl)
	C = false
	ebx = edx
	eax = eax ^ esi
	SZO = cond(eax)
	C = false
	bl = 0x38
	call fn004029DD (retsize: 4;)
	v13 = Mem0[edx + 0x00000044:word32] - (real64) rArg0
	Mem0[edx + 0x00000044:word32] = v13
	SCZO = cond(Mem0[esi:word32] - Mem0[edi:word32])
	esi = esi + 0x00000004
	edi = edi + 0x00000004
l00401EA9:
fn00401EA9_exit:


// fn00401EBE
// Return size: 0
void fn00401EBE()
fn00401EBE_entry:
	// succ:  l00401EBE
l00401EBE:
	esp = fp
	Mem0[esp - 0x00000018:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ah = ah | ch
	SZO = cond(ah)
	C = false
	dh = dh ^ al
	SZO = cond(dh)
	C = false
	dl = 0xA0
	edx = edx - ecx
	SCZO = cond(edx)
	eax = eax ^ ebx
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l00401ECC_thunk_fn004029FF
	goto l00401ED2
	// succ:  l00401ED2 l00401ECC_thunk_fn004029FF
l00401ECC_thunk_fn004029FF:
	call fn004029FF (retsize: 0;)
	return
	// succ:  fn00401EBE_exit
l00401ED2:
	branch Test(UGT,CZ) l00401ED4
	// succ:  l00401ED4
l00401ED4:
	branch Test(NE,Z) l00401ED4_thunk_fn004029FF
	goto l00401EDA
	// succ:  l00401EDA l00401ED4_thunk_fn004029FF
l00401ED4_thunk_fn004029FF:
	call fn004029FF (retsize: 0;)
	return
	// succ:  fn00401EBE_exit
l00401EDA:
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	C = true
	esp = esp - 0x00000004
	Mem0[esp:word32] = es
	D = false
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	bh = Mem0[eax + 0x8B240489:byte]
	// succ:  l00401EDF_thunk_fn00401EE5
l00401EDF_thunk_fn00401EE5:
	call fn00401EE5 (retsize: 0;)
	return
	// succ:  fn00401EBE_exit
fn00401EBE_exit:


// fn00401EE1
// Return size: 0
void fn00401EE1()
fn00401EE1_entry:
	// succ:  l00401EE1
l00401EE1:
	esp = fp
	Mem0[esp:word32] = eax
	edx = edx
	// succ:  l00401EE4_thunk_fn00401EE5
l00401EE4_thunk_fn00401EE5:
	call fn00401EE5 (retsize: 0;)
	return
	// succ:  fn00401EE1_exit
fn00401EE1_exit:


// fn00401EE5
// Return size: 0
void fn00401EE5()
fn00401EE5_entry:
	// succ:  l00401EE5
l00401EE5:
	esp = fp
	v4 = (Mem0[esi + 0xD90258F6:byte] & 0x01 << 0x08 - cl) != 0x00
	Mem0[esi + 0xD90258F6:byte] = __rol(Mem0[esi + 0xD90258F6:byte], cl)
	C = v4
	bh = 0xF3
	bl = dl
	bl = dl
	esi = esi - 0x00000001
	SZO = cond(esi)
	ebx = ebx - esi
	SCZO = cond(ebx)
	goto l00401EF4_thunk_fn00401E86
	// succ:  l00401EF4_thunk_fn00401E86
l00401EE5:
	v14 = dh
	dh = dh
	dh = v14
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = bl + cl
	SCZO = cond(bl)
	bh = 0xF3
	bl = dl
	bl = dl
	esi = esi - 0x00000001
	SZO = cond(esi)
	ebx = ebx - esi
	SCZO = cond(ebx)
	// succ:  l00401EF1_thunk_fn00401E86
l00401EF1_thunk_fn00401E86:
	call fn00401E86 (retsize: 0;)
	return
	// succ:  fn00401EE5_exit
l00401EF4_thunk_fn00401E86:
	call fn00401E86 (retsize: 0;)
	return
	// succ:  fn00401EE5_exit
fn00401EE5_exit:


// fn00401EFB
// Return size: 4
void fn00401EFB()
fn00401EFB_entry:
	// succ:  l00401EFB
l00401EFB:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = edx
	edx = v3
	// succ:  l00401F04
l00401F04:
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx - esi
	SCZO = cond(ebx)
	edi = edi + 0x00000001
	SZO = cond(edi)
	bl = bl ^ ch
	SZO = cond(bl)
	C = false
	dl = dl + dh
	SCZO = cond(dl)
	edx = edx ^ edi
	SZO = cond(edx)
	C = false
	// succ:  l00401F0E_thunk_fn00402143
l00401F0E_thunk_fn00402143:
	call fn00402143 (retsize: 4;)
	return
	// succ:  fn00401EFB_exit
fn00401EFB_exit:


// fn00401F36
// Return size: 0
void fn00401F36()
fn00401F36_entry:
	// succ:  l00401F36
l00401F36:
	esp = fp
	dl = 0x44
	dh = dh + bl
	SCZO = cond(dh)
	dl = dl + cl
	SCZO = cond(dl)
	dl = dl - bl
	SCZO = cond(dl)
	dl = dl + ah
	SCZO = cond(dl)
	edx = edx | esi
	SZO = cond(edx)
	C = false
	edx = edx - ebx
	SCZO = cond(edx)
	goto l00401F44_thunk_fn00402BD8
	// succ:  l00401F44_thunk_fn00402BD8
l00401F36:
l00401F44_thunk_fn00402BD8:
	call fn00402BD8 (retsize: 0;)
	return
	// succ:  fn00401F36_exit
fn00401F36_exit:


// fn00401F4D
// Return size: 0
void fn00401F4D()
fn00401F4D_entry:
	// succ:  l00401F4D
l00401F4D:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = esi
	esi = v3
	v5 = bx
	bx = bx
	bx = v5
	v7 = ch
	ch = ch
	ch = v7
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	dl = ah
	edx = edx ^ ecx
	SZO = cond(edx)
	C = false
	edx = edx + 0x00000001
	SZO = cond(edx)
	dh = 0xF3
	ebx = ebx - 0x7329E68D
	SCZO = cond(ebx)
	// succ:  l00401F63_thunk_fn00401F36
l00401F63_thunk_fn00401F36:
	call fn00401F36 (retsize: 0;)
	return
	// succ:  fn00401F4D_exit
fn00401F4D_exit:


// fn00401F6C
// Return size: 0
void fn00401F6C()
fn00401F6C_entry:
	// succ:  l00401F6C
l00401F6C:
	esp = fp
	bl = 0xE8
	bl = bl | bh
	SZO = cond(bl)
	C = false
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	bh = bh | ch
	SZO = cond(bh)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bh = 0x11
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	esi = esi + 0x00000001
	SZO = cond(esi)
	esi = esi - edi
	SCZO = cond(esi)
l00401F6C:
fn00401F6C_exit:


// fn00401F87
// Return size: 0
void fn00401F87()
fn00401F87_entry:
	// succ:  l00401F87
l00401F87:
	esp = fp
	eax = eax + 0x00000008
	SCZO = cond(eax)
	esi = edx
	bh = bh + al
	SCZO = cond(bh)
	edi = edi ^ esi
	SZO = cond(edi)
	C = false
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	esi = esi + edi
	SCZO = cond(esi)
	esi = esi - edi
	SCZO = cond(esi)
	esi = esi + edx
	SCZO = cond(esi)
	goto l00401F98_thunk_fn00402748
	// succ:  l00401F98_thunk_fn00402748
l00401F87:
l00401F98_thunk_fn00402748:
	call fn00402748 (retsize: 0;)
	return
	// succ:  fn00401F87_exit
fn00401F87_exit:


// fn00401FA3
// Return size: 0
void fn00401FA3()
fn00401FA3_entry:
	// succ:  l00401FA3
l00401FA3:
	esp = fp
	Mem0[esp - 0x00000020:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi - 0x00000001
	SZO = cond(esi)
	dl = ch
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edi = ebx
	dh = 0x47
	branch Test(LT,SO) l004027F2
	// succ:  l00401FB5 l004027F2
l00401FB5:
l00401FB9:
	v25 = Mem0[edi:byte] + cl
	Mem0[edi:byte] = v25
	SCZO = cond(v25)
	// succ:  l00401FBA l00401FBB
l00401FBA:
	branch Test(GE,SO) l004027F2
l00401FBB:
	// succ:  l00401FC0 l004027F2
l00401FC0:
	branch Test(ULE,CZ) l00401FB9
	// succ:  l00401FC2 l00401FB9
l00401FC2:
	v19 = Mem0[ebp - 0x0000005F:byte] + 0x37 + C
	Mem0[ebp - 0x0000005F:byte] = v19
	SCZO = cond(v19)
	Mem0[esp - 0x00000018:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	edi = edi ^ esi
	SZO = cond(edi)
	C = false
	dh = dh - cl
	SCZO = cond(dh)
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	edx = esi
	// succ:  l00401FD2_thunk_fn00402827
l00401FD2_thunk_fn00402827:
	call fn00402827 (retsize: 0;)
	return
	// succ:  fn00401FA3_exit
l00402304:
	edi = edi - ebx
	SCZO = cond(edi)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	esi = edx
	dl = dl + ch
	SCZO = cond(dl)
	esi = esi | eax
	SZO = cond(esi)
	C = false
	edx = (word32) al
	esi = esi + 0x00000001
	SZO = cond(esi)
	bh = bh | cl
	SZO = cond(bh)
	C = false
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	bl = bl - al
	SCZO = cond(bl)
	// succ:  l00402315_thunk_fn0040293C
l00402315_thunk_fn0040293C:
	call fn0040293C (retsize: 0;)
	return
	// succ:  fn00401FA3_exit
l004027F2:
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	edx = edx | ecx
	SZO = cond(edx)
	C = false
	esi = ebx
	esi = esi + ebx
	SCZO = cond(esi)
	dh = dh + al
	SCZO = cond(dh)
	bl = bl + al
	SCZO = cond(bl)
	goto l00402304
	// succ:  l00402304
fn00401FA3_exit:


// fn00401FC6
// Return size: 0
void fn00401FC6()
fn00401FC6_entry:
	// succ:  l00401FC6
l00401FC6:
	esp = fp
	Mem0[esp - 0x00000018:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	edi = edi ^ esi
	SZO = cond(edi)
	C = false
	dh = dh - cl
	SCZO = cond(dh)
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	edx = esi
	// succ:  l00401FD4_thunk_fn00402827
l00401FD4_thunk_fn00402827:
	call fn00402827 (retsize: 0;)
	return
	// succ:  fn00401FC6_exit
fn00401FC6_exit:


// fn00401FE0
// Return size: 0
void fn00401FE0()
fn00401FE0_entry:
	// succ:  l00401FE0
l00401FE0:
	esi = esi | ecx
	SZO = cond(esi)
	C = false
	ch = ch ^ cl
	SZO = cond(ch)
	C = false
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = bl ^ ah
	SZO = cond(bl)
	C = false
	al = al | dh
	SZO = cond(al)
	C = false
	esi = eax
	call fn004025EE (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ds
	v16 = Mem0[ebx:word32] ^ esi
	Mem0[ebx:word32] = v16
	SZO = cond(Mem0[ebx:word32])
	C = false
	edx = 0xDE334B25
	// succ:  l00401FF3_thunk_fn00401FF8
l00401FF3_thunk_fn00401FF8:
	call fn00401FF8 (retsize: 0;)
	return
	// succ:  fn00401FE0_exit
fn00401FE0_exit:


// fn00401FF5
// Return size: 0
void fn00401FF5()
fn00401FF5_entry:
	// succ:  l00401FF5
l00401FF5:
	esp = fp
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	goto l00401FF6_thunk_fn00401FF8
	// succ:  l00401FF6_thunk_fn00401FF8
l00401FF5:
l00401FF6_thunk_fn00401FF8:
	call fn00401FF8 (retsize: 0;)
	return
	// succ:  fn00401FF5_exit
l00402006_thunk_fn00402591:
	call fn00402591 (retsize: 0;)
	return
	// succ:  fn00401FF5_exit
fn00401FF5_exit:


// fn00401FF8
// Return size: 0
void fn00401FF8()
fn00401FF8_entry:
	// succ:  l00401FF8
l00401FF8:
	esp = fp
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bl = bl - ah
	SCZO = cond(bl)
	bh = bh - al
	SCZO = cond(bh)
	al = ~al
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	dh = 0x6C
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	// succ:  l00402006_thunk_fn00402591 l00402006_thunk_fn00402591
l00401FF8:
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bl = bl - ah
	SCZO = cond(bl)
	bh = bh - al
	SCZO = cond(bh)
	al = ~al
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	dh = 0x6C
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
l00402006_thunk_fn00402591:
	call fn00402591 (retsize: 0;)
	return
	// succ:  fn00401FF8_exit
fn00401FF8_exit:


// fn00402010
// Return size: 0
void fn00402010()
fn00402010_entry:
	// succ:  l00402010
l00402010:
	esp = fp
	dh = dh + dl
	SCZO = cond(dh)
	edx = edx | eax
	SZO = cond(edx)
	C = false
	ch = 0x9E
	cl = cl + dl
	SCZO = cond(cl)
	ecx = edi
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	cl = cl | al
	SZO = cond(cl)
	C = false
	edx = edx + eax
	SCZO = cond(edx)
	goto l00402185
	// succ:  l00402185
l004020D9:
	ah = dh
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	dl = bl
	ah = 0x32
	ecx = ecx ^ eax
	SZO = cond(ecx)
	C = false
	esi = esi - ebx
	SCZO = cond(esi)
	esi = esi + edx
	SCZO = cond(esi)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00003000
	edx = ebx
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	branch Test(EQ,Z) l00402B82
	// succ:  l004020F6 l00402B82
l004020F6:
	bl = bl
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	branch Test(NE,Z) l00402B82
	// succ:  l00402100 l00402B82
l00402100:
	SZO = cond(al & 0x19)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = SCZDOP
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000001
	edx_eax = (int64) eax
	call fn00401EFB (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	// succ:  l00402105_thunk_fn00402107 l0040211A_thunk_fn0040211F
l00402105_thunk_fn00402107:
	call fn00402107 (retsize: 0;)
	return
	// succ:  fn00402010_exit
l0040211A_thunk_fn0040211F:
	call fn0040211F (retsize: 0;)
	return
	// succ:  fn00402010_exit
l00402185:
	edx = edx - eax
	SCZO = cond(edx)
	al = al | dl
	SZO = cond(al)
	C = false
	dh = dh + bl
	SCZO = cond(dh)
	dl = dl | al
	SZO = cond(dl)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000040
	bl = bl + dl
	SCZO = cond(bl)
	ebx = ecx
	goto l00402192
	// succ:  l00402192
l00402B82:
	dl = al
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
fn00402010_exit:


// fn0040202A
// Return size: 0
void fn0040202A()
fn0040202A_entry:
	// succ:  l0040202A
l0040202A:
	ebx = ebx ^ ecx
	SZO = cond(ebx)
	C = false
	edi = edi ^ eax
	SZO = cond(edi)
	C = false
	eax = eax | eax
	SZO = cond(eax)
	C = false
	branch Test(NE,Z) l004021A2
	// succ:  l00402036 l004021A2
l00402036:
	bh = bh | al
	SZO = cond(bh)
	C = false
	bl = bl ^ al
	SZO = cond(bl)
	C = false
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	edi = edx
	bh = bh | bl
	SZO = cond(bh)
	C = false
	goto l00402A61
	// succ:  l00402A61
l004021A2:
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ah = -ah
	SCZO = cond(ah)
	C = ah == 0x00
	al = ch
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	al = ah
	edx = edx + ecx
	SCZO = cond(edx)
	edx = edx - 0x00000001
	SZO = cond(edx)
	// succ:  l004021AE_thunk_fn00402AC8
l004021AE_thunk_fn00402AC8:
	call fn00402AC8 (retsize: 0;)
	return
	// succ:  fn0040202A_exit
l004026FE:
	edi = edi + 0x00000001
	SZO = cond(edi)
	bh = 0xB3
	eax = ecx
	esi = ebx
	ebx = ebx - edx
	SCZO = cond(ebx)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bl = bl + dh
	SCZO = cond(bl)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	branch Test(LT,SO) l0040270D_thunk_fn00402248
	goto l00402713
	// succ:  l00402713 l0040270D_thunk_fn00402248
l0040270D_thunk_fn00402248:
	call fn00402248 (retsize: 0;)
	return
	// succ:  fn0040202A_exit
l00402713:
	v24 = dl
	dl = dl
	dl = v24
	// succ:  l0040271A
l0040271A:
	branch Test(GE,SO) l0040271A_thunk_fn00402248
	goto l00402720
	// succ:  l00402720 l0040271A_thunk_fn00402248
l0040271A_thunk_fn00402248:
	call fn00402248 (retsize: 0;)
	return
	// succ:  fn0040202A_exit
l00402720:
	al = al + 0xA0 + C
	SCZO = cond(al)
	v25 = Mem0[ebx:byte] - cl
	Mem0[ebx:byte] = v25
	SCZO = cond(v25)
	eax = __indw(dx)
	branch Test(NS,S) l0040272C
	// succ:  l00402725_thunk_fn00402727 l00402725_thunk_fn00402727
l00402725_thunk_fn00402727:
	call fn00402727 (retsize: 0;)
	return
	// succ:  fn0040202A_exit
l00402725_thunk_fn00402727:
	call fn00402727 (retsize: 0;)
	return
	// succ:  fn0040202A_exit
l00402A61:
	bl = dl
	bh = bh | al
	SZO = cond(bh)
	C = false
	bh = bh ^ ah
	SZO = cond(bh)
	C = false
	esi = esi + eax
	SCZO = cond(esi)
	ebx = ebx - ecx
	SCZO = cond(ebx)
	bl = bl + dl
	SCZO = cond(bl)
	bl = bl - bh
	SCZO = cond(bl)
	esi = esi | edx
	SZO = cond(esi)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	branch Test(ULT,C) l004026FE
	// succ:  l00402A78 l004026FE
l00402A78:
	cl = cl
	esp = esp - 0x00000002
	Mem0[esp:word16] = ax
	ax = Mem0[esp:word16]
	esp = esp + 0x00000002
	branch Test(UGE,C) l004026FE
	// succ:  l00402A84 l004026FE
l00402A84:
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	v21 = Mem0[ecx - 0x00000012:word32] - 0x871DFA5D - C
	Mem0[ecx - 0x00000012:word32] = v21
	SCZO = cond(v21)
	// succ:  l00402A86_thunk_fn00402A8D
l00402A86_thunk_fn00402A8D:
	call fn00402A8D (retsize: 0;)
	return
	// succ:  fn0040202A_exit
fn0040202A_exit:


// fn0040204B
// Return size: 0
void fn0040204B()
fn0040204B_entry:
	// succ:  l0040204B
l0040204B:
	bl = 0x4D
	bh = bh - bl
	SCZO = cond(bh)
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	bl = bl ^ ch
	SZO = cond(bl)
	C = false
	bh = 0x7F
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	esi = esi | edx
	SZO = cond(esi)
	C = false
	bh = bh - ch
	SCZO = cond(bh)
	esi = esi + 0x00000001
	SZO = cond(esi)
	call fn00402781 (retsize: 4;)
	C = !C
	al = al - 0x95
	SCZO = cond(al)
	v14 = Mem0[ebp + 0x00000078:word32] | esp
	Mem0[ebp + 0x00000078:word32] = v14
	SZO = cond(Mem0[ebp + 0x00000078:word32])
	C = false
	// succ:  l00402064_thunk_fn00402067
l00402064_thunk_fn00402067:
	call fn00402067 (retsize: 0;)
	return
	// succ:  fn0040204B_exit
fn0040204B_exit:


// fn00402067
// Return size: 0
void fn00402067()
fn00402067_entry:
	// succ:  l00402067
l00402067:
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	bl = 0xE8
	dl = 0x06
	ah = al
	bl = bl | dh
	SZO = cond(bl)
	C = false
	dh = dh ^ ah
	SZO = cond(dh)
	C = false
	edx = edx + 0x00000001
	SZO = cond(edx)
	edx = edx - 0x00000001
	SZO = cond(edx)
	branch Test(ULT,C) l00402075_thunk_fn00402506
	goto l00402075_thunk_fn0040207B
	// succ:  l00402075_thunk_fn0040207B l00402075_thunk_fn00402506
fn00402067_exit:


// fn0040207B
// Return size: 0
void fn0040207B()
fn0040207B_entry:
	// succ:  l0040207B
l0040207B:
	esp = fp
	v3 = edi
	edi = edi
	edi = v3
	branch Test(UGE,C) l0040207D_thunk_fn00402506
	goto l00402083
	// succ:  l00402083 l0040207D_thunk_fn00402506
l0040207B:
l0040207D_thunk_fn00402506:
	call fn00402506 (retsize: 0;)
	return
	// succ:  fn0040207B_exit
l00402083:
	ah = ah + bh
	SCZO = cond(ah)
fn0040207B_exit:


// fn004020BF
// Return size: 0
void fn004020BF()
fn004020BF_entry:
	// succ:  l004020BF
l004020BF:
	esp = fp
	esp = esp + 0x00000004
	edi = edi | esi
	SZO = cond(edi)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	cl = cl ^ ch
	SZO = cond(cl)
	C = false
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	esi = esi | ecx
	SZO = cond(esi)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	// succ:  l004020CF_thunk_fn00401E6C l004020CF_thunk_fn00401E6C
l004020CF_thunk_fn00401E6C:
	call fn00401E6C (retsize: 0;)
	return
	// succ:  fn004020BF_exit
fn004020BF_exit:


// fn00402107
// Return size: 0
void fn00402107()
fn00402107_entry:
	// succ:  l00402107
l00402107:
	esp = fp
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	ebx = ebx - esi
	SCZO = cond(ebx)
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	dh = dh + bl
	SCZO = cond(dh)
	dl = dl ^ cl
	SZO = cond(dl)
	C = false
	dl = al
	bh = bh + bl
	SCZO = cond(bh)
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	call fn00401EFB (retsize: 4;)
	goto l0040211A_thunk_fn0040211F
	// succ:  l0040211A_thunk_fn0040211F
l00402107:
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	ebx = ebx - esi
	SCZO = cond(ebx)
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	dh = dh + bl
	SCZO = cond(dh)
	dl = dl ^ cl
	SZO = cond(dl)
	C = false
	dl = al
	bh = bh + bl
	SCZO = cond(bh)
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
l0040211A_thunk_fn0040211F:
	call fn0040211F (retsize: 0;)
	return
	// succ:  fn00402107_exit
fn00402107_exit:


// fn0040211F
// Return size: 0
void fn0040211F()
fn0040211F_entry:
	// succ:  l0040211F
l0040211F:
	esp = fp
	ecx = ecx - Mem0[ecx + 0xFB329A34:word32] - C
	SCZO = cond(ecx)
	goto l0040211F_thunk_fn00402125
	// succ:  l0040211F_thunk_fn00402125
l0040211F:
	ecx = ecx - Mem0[ecx + 0xFB329A34:word32] - C
	SCZO = cond(ecx)
	// succ:  l0040211F_thunk_fn00402123
l0040211F_thunk_fn00402123:
	call fn00402123 (retsize: 0;)
	return
	// succ:  fn0040211F_exit
l0040211F_thunk_fn00402125:
	call fn00402125 (retsize: 0;)
	return
	// succ:  fn0040211F_exit
fn0040211F_exit:


// fn00402123
// Return size: 0
void fn00402123()
fn00402123_entry:
	// succ:  l00402123
l00402123:
	esp = fp
	bh = bh ^ bl
	SZO = cond(bh)
	C = false
	goto l00402123_thunk_fn00402125
	// succ:  l00402123_thunk_fn00402125
l00402123:
	esi = esi - 0x00000001
	SZO = cond(esi)
	ebx = ebx ^ edi
	SZO = cond(ebx)
	C = false
	bl = bl - cl
	SCZO = cond(bl)
	bl = bl ^ cl
	SZO = cond(bl)
	C = false
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bl = bl - bh
	SCZO = cond(bl)
	bh = bh | ch
	SZO = cond(bh)
	C = false
	bh = bh + ch
	SCZO = cond(bh)
	bh = 0xB9
	goto l00402132_thunk_fn00402559
	// succ:  l00402132_thunk_fn00402559
l00402123_thunk_fn00402125:
	call fn00402125 (retsize: 0;)
	return
	// succ:  fn00402123_exit
l00402132_thunk_fn00402559:
	call fn00402559 (retsize: 0;)
	return
	// succ:  fn00402123_exit
fn00402123_exit:


// fn00402125
// Return size: 0
void fn00402125()
fn00402125_entry:
	// succ:  l00402125
l00402125:
	esp = fp
	esi = esi - 0x00000001
	SZO = cond(esi)
	ebx = ebx ^ edi
	SZO = cond(ebx)
	C = false
	bl = bl - cl
	SCZO = cond(bl)
	bl = bl ^ cl
	SZO = cond(bl)
	C = false
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bl = bl - bh
	SCZO = cond(bl)
	bh = bh | ch
	SZO = cond(bh)
	C = false
	bh = bh + ch
	SCZO = cond(bh)
	bh = 0xB9
	goto l00402136_thunk_fn00402559
	// succ:  l00402136_thunk_fn00402559
l00402125:
	esi = esi - 0x00000001
	SZO = cond(esi)
	ebx = ebx ^ edi
	SZO = cond(ebx)
	C = false
	bl = bl - cl
	SCZO = cond(bl)
	bl = bl ^ cl
	SZO = cond(bl)
	C = false
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bl = bl - bh
	SCZO = cond(bl)
	bh = bh | ch
	SZO = cond(bh)
	C = false
	bh = bh + ch
	SCZO = cond(bh)
	bh = 0xB9
	goto l00402136_thunk_fn00402559
	// succ:  l00402136_thunk_fn00402559
l00402136_thunk_fn00402559:
	call fn00402559 (retsize: 0;)
	return
	// succ:  fn00402125_exit
l00402136_thunk_fn00402559:
	call fn00402559 (retsize: 0;)
	return
	// succ:  fn00402125_exit
fn00402125_exit:


// fn00402143
// Return size: 4
void fn00402143()
fn00402143_entry:
	goto l00402143
	// succ:  l00402143
l00401F1A:
	esi = esi + 0x00000001
	SZO = cond(esi)
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	edx = edx - ebx
	SCZO = cond(edx)
	ebx = ebx + edx
	SCZO = cond(ebx)
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	ebx = ebx | edx
	SZO = cond(ebx)
	C = false
	dl = al
	bh = bh | bl
	SZO = cond(bh)
	C = false
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	call fn00402762 (retsize: 4;)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	v21 = eax
	eax = ebp
	ebp = v21
	return
	// succ:  fn00402143_exit
l00402143:
	esp = fp
	edx = edx - 0x00000001
	SZO = cond(edx)
	dh = dl
	dl = dl | bh
	SZO = cond(dl)
	C = false
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	edx = edx | ecx
	SZO = cond(edx)
	C = false
	bh = bh + ch
	SCZO = cond(bh)
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	ebx = ebx - eax
	SCZO = cond(ebx)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	branch Test(EQ,Z) l00401F1A
	goto l00402159
	// succ:  l00402159 l00401F1A
l00402143:
l00402159:
	si = esi
	branch Test(NE,Z) l00401F1A
	// succ:  l00402162 l00401F1A
l00402162:
	ebp = ebp - 0x00000001
	SZO = cond(ebp)
	branch Test(NS,S) TMP!
fn00402143_exit:


// fn004021D7
// Return size: 0
void fn004021D7()
fn004021D7_entry:
	// succ:  l004021D7
l004021D7:
	esp = fp
	Mem0[esp:word32] = edx
	v4 = ch
	ch = ch
	ch = v4
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	bh = bh ^ dl
	SZO = cond(bh)
	C = false
	bh = bh - ch
	SCZO = cond(bh)
	edx = edi
	al = Mem0[edi:byte]
	dh = 0xBA
	branch Test(SG,S) TMP!
fn004021D7_exit:


// fn00402202
// Return size: 0
void fn00402202()
fn00402202_entry:
	// succ:  l00402202
l00402202:
	dl = 0xD9
	ah = 0xFD
	dh = dh - ch
	SCZO = cond(dh)
	bh = bh + ch
	SCZO = cond(bh)
	// succ:  l00402208_thunk_fn00402209
l00402208_thunk_fn00402209:
	call fn00402209 (retsize: 0;)
	return
	// succ:  fn00402202_exit
fn00402202_exit:


// fn00402209
// Return size: 0
void fn00402209()
fn00402209_entry:
	// succ:  l00402209
l00402209:
	esp = fp
	D = true
	eax = eax ^ ebx
	SZO = cond(eax)
	C = false
	al = al | dl
	SZO = cond(al)
	C = false
	goto l0040220C_thunk_fn0040220E
	// succ:  l0040220C_thunk_fn0040220E
l00402209:
	eax = eax ^ ebx
	SZO = cond(eax)
	C = false
	al = al | dl
	SZO = cond(al)
	C = false
	bl = al
	ah = dh
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	branch Test(EQ,Z) l00402A17
	goto l00402214_thunk_fn0040221B
	// succ:  l00402214_thunk_fn0040221B l00402214_thunk_fn00402A17
l0040220C_thunk_fn0040220E:
	call fn0040220E (retsize: 0;)
	return
	// succ:  fn00402209_exit
l00402214_thunk_fn0040221B:
	call fn0040221B (retsize: 0;)
	return
	// succ:  fn00402209_exit
l00402214_thunk_fn00402A17:
	call fn00402A17 (retsize: 0;)
	return
	// succ:  fn00402209_exit
fn00402209_exit:


// fn0040220E
// Return size: 0
void fn0040220E()
fn0040220E_entry:
	// succ:  l0040220E
l0040220E:
	esp = fp
	bl = al
	ah = dh
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	branch Test(EQ,Z) l00402215_thunk_fn00402A17
	goto l00402215_thunk_fn0040221B
	// succ:  l00402215_thunk_fn0040221B l00402215_thunk_fn00402A17
l0040220E:
	bl = al
	ah = dh
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	branch Test(EQ,Z) l00402215_thunk_fn00402A17
	goto l00402215_thunk_fn0040221B
	// succ:  l00402215_thunk_fn0040221B l00402215_thunk_fn00402A17
l00402215_thunk_fn0040221B:
	call fn0040221B (retsize: 0;)
	return
	// succ:  fn0040220E_exit l00402215_thunk_fn0040221B
l00402215_thunk_fn0040221B:
	call fn0040221B (retsize: 0;)
	return
	// succ:  fn0040220E_exit
l00402215_thunk_fn0040221B:
	call fn0040221B (retsize: 0;)
	return
	// succ:  fn0040220E_exit l00402215_thunk_fn0040221B
l00402215_thunk_fn0040221B:
	call fn0040221B (retsize: 0;)
	return
	// succ:  fn0040220E_exit
l00402215_thunk_fn00402A17:
	call fn00402A17 (retsize: 0;)
	return
	// succ:  fn0040220E_exit
l00402215_thunk_fn00402A17:
	call fn00402A17 (retsize: 0;)
	return
	// succ:  fn0040220E_exit
fn0040220E_exit:


// fn0040221B
// Return size: 0
void fn0040221B()
fn0040221B_entry:
	// succ:  l0040221B
l0040221B:
fn0040221B_exit:


// fn00402248
// Return size: 0
void fn00402248()
fn00402248_entry:
	// succ:  l00402248
l00402248:
	esp = fp
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	esi = esi - 0x00000001
	SZO = cond(esi)
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	bh = bh + ch
	SCZO = cond(bh)
	eax = eax + Mem0[eax + 0x0000003C:word32]
	SCZO = cond(eax)
	ebx = edx
	bl = bl | bh
	SZO = cond(bl)
	C = false
	goto l00402258_thunk_fn00402925
	// succ:  l00402258_thunk_fn00402925
l00402248:
l00402258_thunk_fn00402925:
	call fn00402925 (retsize: 0;)
	return
	// succ:  fn00402248_exit
fn00402248_exit:


// fn00402259
// Return size: 0
void fn00402259()
fn00402259_entry:
	// succ:  l00402259
l00402259:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	esp = esp - 0x00000006
	eax = eax | 0xCEE22948
	SZO = cond(eax)
	C = false
	v7 = eax
	eax = edi
	edi = v7
	SZO = cond(Mem0[ebx + 0x00000033:byte] & al)
	C = false
	goto l00402263_thunk_fn00402266
	// succ:  l00402263_thunk_fn00402266
l00402259:
l00402263_thunk_fn00402266:
	call fn00402266 (retsize: 0;)
	return
	// succ:  fn00402259_exit
fn00402259_exit:


// fn00402264
// Return size: 0
void fn00402264()
fn00402264_entry:
	// succ:  l00402264
l00402264:
	esp = fp
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	goto l00402265_thunk_fn00402266
	// succ:  l00402265_thunk_fn00402266
l00402264:
l00402265_thunk_fn00402266:
	call fn00402266 (retsize: 0;)
	return
	// succ:  fn00402264_exit
l0040227A_thunk_fn00402259:
	call fn00402259 (retsize: 0;)
	return
	// succ:  fn00402264_exit
l0040227A_thunk_fn0040227C:
	call fn0040227C (retsize: 0;)
	return
	// succ:  fn00402264_exit l0040227A_thunk_fn0040227C
l0040227A_thunk_fn0040227C:
	call fn0040227C (retsize: 0;)
	return
	// succ:  fn00402264_exit
fn00402264_exit:


// fn00402266
// Return size: 0
void fn00402266()
fn00402266_entry:
	// succ:  l00402266
l00402266:
	esp = fp
	rArg0 = rArg0 * (real64) Mem0[ebx:word16]
	// succ:  l0040227A_thunk_fn0040227C l0040227A_thunk_fn00402259
l00402266:
	esi = esi | edx
	SZO = cond(esi)
	C = false
	bh = dh
	esi = esi - 0x00000001
	SZO = cond(esi)
	ch = -ch
	SCZO = cond(ch)
	C = ch == 0x00
	ch = ch ^ al
	SZO = cond(ch)
	C = false
	bl = bl - cl
	SCZO = cond(bl)
	call eax (retsize: 4;)
	call fn004024E9 (retsize: 4;)
	v18 = eax
	eax = edi
	edi = v18
	branch Test(PE,P) l0040227A_thunk_fn00402259
fn00402266_exit:


// fn0040227C
// Return size: 0
void fn0040227C()
fn0040227C_entry:
	// succ:  l0040227C
l0040227C:
	esp = fp
	branch Test(PE,P) l0040227C_thunk_fn00402209
	goto l0040227C_thunk_fn0040227E
	// succ:  l0040227C_thunk_fn0040227E l0040227C_thunk_fn00402209
l0040227C:
l0040227C_thunk_fn00402209:
	call fn00402209 (retsize: 0;)
	return
	// succ:  fn0040227C_exit
l0040227C_thunk_fn0040227E:
	call fn0040227E (retsize: 0;)
	return
	// succ:  fn0040227C_exit l0040227C_thunk_fn0040227E
l0040227C_thunk_fn0040227E:
	call fn0040227E (retsize: 0;)
	return
	// succ:  fn0040227C_exit
fn0040227C_exit:


// fn0040227E
// Return size: 0
void fn0040227E()
fn0040227E_entry:
	// succ:  l0040227E
l0040227E:
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	ebx = ebx + edi
	SCZO = cond(ebx)
	ebx = edi
	dl = dl | dh
	SZO = cond(dl)
	C = false
	edx = edx - esi
	SCZO = cond(edx)
	dl = dl + ah
	SCZO = cond(dl)
	dl = 0x86
	edx = edx - 0x00000001
	SZO = cond(edx)
	bl = bl ^ bh
	SZO = cond(bl)
	C = false
	branch Test(OV,O) l0040228F_thunk_fn00401FF5
	goto l00402295
	// succ:  l00402295 l0040228F_thunk_fn00401FF5
l0040228F_thunk_fn00401FF5:
	call fn00401FF5 (retsize: 0;)
	return
	// succ:  fn0040227E_exit
l00402295:
	// succ:  l0040229A
l0040229A:
fn0040227E_exit:


// fn004022A6
// Return size: 0
void fn004022A6()
fn004022A6_entry:
	// succ:  l004022A6
l004022A6:
	ebx = ebx ^ ecx
	SZO = cond(ebx)
	C = false
	ecx = ecx + edi
	SCZO = cond(ecx)
	ecx = ecx - edx
	SCZO = cond(ecx)
	cl = 0x91
	edx = edx | ecx
	SZO = cond(edx)
	C = false
	eax = eax | edi
	SZO = cond(eax)
	C = false
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	dl = dl + bl
	SCZO = cond(dl)
	call fn004022EA (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ds
	edx_eax = Mem0[edx + 0x00000035 + ebp * 0x00000008:word32] *s eax
	SCZO = cond(edx_eax)
	al = Mem0[0x33DF8B55:byte]
	// succ:  l004022C4_thunk_fn004022C6
l004022C4_thunk_fn004022C6:
	call fn004022C6 (retsize: 0;)
	return
	// succ:  fn004022A6_exit
fn004022A6_exit:


// fn004022C6
// Return size: 0
void fn004022C6()
fn004022C6_entry:
	// succ:  l004022C6
l004022C6:
	esp = fp
	ebx = edi
	edx = edx ^ edi
	SZO = cond(edx)
	C = false
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	ebx = edx
	dh = dh + ah
	SCZO = cond(dh)
	eax = eax ^ edi
	SZO = cond(eax)
	C = false
	eax = eax + esi
	SCZO = cond(eax)
	branch Test(SG,S) l004022D4_thunk_fn00402202
	goto l004022D4_thunk_fn004022DA
	// succ:  l004022D4_thunk_fn004022DA l004022D4_thunk_fn00402202
l004022C6:
	al = Mem0[ebx + (uint32) al:byte]
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	ebx = edx
	dh = dh + ah
	SCZO = cond(dh)
	eax = eax ^ edi
	SZO = cond(eax)
	C = false
	eax = eax + esi
	SCZO = cond(eax)
	branch Test(SG,S) l00402202
	goto l004022D1_thunk_fn004022DA
	// succ:  l004022D1_thunk_fn004022DA l004022D1_thunk_fn00402202
l004022D1_thunk_fn00402202:
	call fn00402202 (retsize: 0;)
	return
	// succ:  fn004022C6_exit
l004022D1_thunk_fn004022DA:
	call fn004022DA (retsize: 0;)
	return
	// succ:  fn004022C6_exit
l004022D4_thunk_fn00402202:
	call fn00402202 (retsize: 0;)
	return
	// succ:  fn004022C6_exit
l004022D4_thunk_fn004022DA:
	call fn004022DA (retsize: 0;)
	return
	// succ:  fn004022C6_exit l004022D4_thunk_fn004022DA
l004022D4_thunk_fn004022DA:
	call fn004022DA (retsize: 0;)
	return
	// succ:  fn004022C6_exit
fn004022C6_exit:


// fn004022DA
// Return size: 0
void fn004022DA()
fn004022DA_entry:
	// succ:  l004022DA
l004022DA:
	dx = edx
	v5 = dl
	dl = dl
	dl = v5
	branch Test(NS,S) l00402202
	goto l004022E5
	// succ:  l004022E5 l004022DF_thunk_fn00402202
l004022DF_thunk_fn00402202:
	call fn00402202 (retsize: 0;)
	return
	// succ:  fn004022DA_exit
l004022E5:
fn004022DA_exit:


// fn004022EA
// Return size: 0
void fn004022EA()
fn004022EA_entry:
	// succ:  l004022EA
l004022EA:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = ebx
	ebx = v3
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax + esi
	SCZO = cond(eax)
	ecx = ecx - ebx
	SCZO = cond(ecx)
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	ecx = ecx ^ edi
	SZO = cond(ecx)
	C = false
	eax = eax - 0x00000001
	SZO = cond(eax)
	// succ:  l004022F9_thunk_fn0040265C
l004022F9_thunk_fn0040265C:
	call fn0040265C (retsize: 0;)
	return
	// succ:  fn004022EA_exit
fn004022EA_exit:


// fn00402344
// Return size: 0
void fn00402344()
fn00402344_entry:
	// succ:  l00402344
l00402344:
	esp = fp
	esp = esp + 0x00000004
	dl = dl | ah
	SZO = cond(dl)
	C = false
	SCZO = cond(ebx - 0x8CD61973)
	branch Test(NE,Z) l00402350_thunk_fn0040220E
	goto l00402356
	// succ:  l00402356 l00402350_thunk_fn0040220E
l00402350_thunk_fn0040220E:
	call fn0040220E (retsize: 0;)
	return
	// succ:  fn00402344_exit
l00402356:
	ch = ch - dl
	SCZO = cond(ch)
	edx = edx + eax
	SCZO = cond(edx)
	// succ:  l0040235A_thunk_fn00401EA9
l0040235A_thunk_fn00401EA9:
	call fn00401EA9 (retsize: 0;)
	return
	// succ:  fn00402344_exit
fn00402344_exit:


// fn004023C1
// Return size: 0
void fn004023C1()
fn004023C1_entry:
	// succ:  l004023C1
l004023C1:
	esp = fp
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	dl = dl - cl
	SCZO = cond(dl)
	goto l004023C2_thunk_fn004023C3
	// succ:  l004023C2_thunk_fn004023C3
l004023C1:
l004023C2_thunk_fn004023C3:
	call fn004023C3 (retsize: 0;)
	return
	// succ:  fn004023C1_exit
fn004023C1_exit:


// fn004023C3
// Return size: 0
void fn004023C3()
fn004023C3_entry:
	// succ:  l004023C3
l004023C3:
	esp = fp
	v4 = Mem0[edx:word32] << 0x00000001
	Mem0[edx:word32] = v4
	SCZO = cond(v4)
	edx = edx_eax % esi
	eax = edx_eax /u esi
	SCZO = cond(eax)
l004023C3:
	dh = dh ^ bh
	SZO = cond(dh)
	C = false
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	edx = edx - 0x00000001
	SZO = cond(edx)
	dh = dh | dl
	SZO = cond(dh)
	C = false
	call fn0040253C (retsize: 4;)
	v15 = eax
	eax = edi
	edi = v15
	__outb(edx, al)
	esi = esi + 0x00000001
fn004023C3_exit:


// fn004023F6
// Return size: 0
void fn004023F6()
fn004023F6_entry:
	// succ:  l004023F6
l004023F6:
	esp = fp
	ebx = ebx - edx
	SCZO = cond(ebx)
	ch = ch ^ dh
	SZO = cond(ch)
	C = false
	ch = ch + bh
	SCZO = cond(ch)
	ch = bl
	dh = dh - dl
	SCZO = cond(dh)
	dl = dl | cl
	SZO = cond(dl)
	C = false
	goto l0040248A
	// succ:  l0040248A
l004023F6:
l0040248A:
	dh = al
	// succ:  l0040248A_thunk_fn0040248C
l0040248A_thunk_fn0040248C:
	call fn0040248C (retsize: 0;)
	return
	// succ:  fn004023F6_exit
l0040249D_thunk_fn004024A3:
	call fn004024A3 (retsize: 0;)
	return
	// succ:  fn004023F6_exit l0040249D_thunk_fn004024A3
l0040249D_thunk_fn004024A3:
	call fn004024A3 (retsize: 0;)
	return
	// succ:  fn004023F6_exit
l0040249D_thunk_fn00402C0B:
	call fn00402C0B (retsize: 0;)
	return
	// succ:  fn004023F6_exit
fn004023F6_exit:


// fn0040248C
// Return size: 0
void fn0040248C()
fn0040248C_entry:
	// succ:  l0040248C
l0040248C:
	esp = fp
	ch = ch ^ bh
	SZO = cond(ch)
	C = false
	edx = edx | edi
	SZO = cond(edx)
	C = false
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	dh = 0xC9
	ebx = ebx - edi
	SCZO = cond(ebx)
	edi = edi ^ eax
	SZO = cond(edi)
	C = false
	goto l00402495_thunk_fn00402496
	// succ:  l00402495_thunk_fn00402496
l0040248C:
	ch = ch ^ bh
	SZO = cond(ch)
	C = false
	edx = edx | edi
	SZO = cond(edx)
	C = false
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	dh = 0xC9
	ebx = ebx - edi
	SCZO = cond(ebx)
	edi = edi ^ eax
	SZO = cond(edi)
	C = false
	ecx = edi
	bh = bh | dh
	SZO = cond(bh)
	C = false
	ch = ch ^ bh
	SZO = cond(ch)
	C = false
	branch Test(LT,SO) l0040249D_thunk_fn00402C0B
l00402495_thunk_fn00402496:
	call fn00402496 (retsize: 0;)
	return
	// succ:  fn0040248C_exit
fn0040248C_exit:


// fn00402496
// Return size: 0
void fn00402496()
fn00402496_entry:
	// succ:  l00402496
l00402496:
	esp = fp
	C = false
	ecx = edi
	bh = bh | dh
	SZO = cond(bh)
	C = false
	ch = ch ^ bh
	SZO = cond(ch)
	C = false
	branch Test(LT,SO) l0040249D_thunk_fn00402C0B
	// succ:  l0040249D_thunk_fn004024A3 l0040249D_thunk_fn00402C0B l0040249D_thunk_fn004024A3 l0040249D_thunk_fn00402C0B
l00402496:
	ecx = edi
	bh = bh | dh
	SZO = cond(bh)
	C = false
	ch = ch ^ bh
	SZO = cond(ch)
	C = false
	branch Test(LT,SO) l0040249D_thunk_fn00402C0B
	// succ:  l0040249C_thunk_fn004024A3 l0040249D_thunk_fn00402C0B
l0040249C_thunk_fn004024A3:
	call fn004024A3 (retsize: 0;)
	return
	// succ:  fn00402496_exit
l0040249D_thunk_fn004024A3:
	call fn004024A3 (retsize: 0;)
	return
	// succ:  fn00402496_exit l0040249D_thunk_fn004024A3
l0040249D_thunk_fn004024A3:
	call fn004024A3 (retsize: 0;)
	return
	// succ:  fn00402496_exit
l0040249D_thunk_fn00402C0B:
	call fn00402C0B (retsize: 0;)
	return
	// succ:  fn00402496_exit
l0040249D_thunk_fn00402C0B:
	call fn00402C0B (retsize: 0;)
	return
	// succ:  fn00402496_exit
fn00402496_exit:


// fn004024A3
// Return size: 0
void fn004024A3()
fn004024A3_entry:
	// succ:  l004024A3
l004024A3:
	branch Test(LT,SO) l004024A5
	// succ:  l004024A5
l004024A5:
	branch Test(GE,SO) l004024A5_thunk_fn00402C0B
	goto l004024AB
	// succ:  l004024AB l004024A5_thunk_fn00402C0B
l004024A5_thunk_fn00402C0B:
	call fn00402C0B (retsize: 0;)
	return
	// succ:  fn004024A3_exit
l004024AB:
fn004024A3_exit:


// fn004024B3
// Return size: 0
void fn004024B3()
fn004024B3_entry:
	// succ:  l004024B3
l004024B3:
	esp = fp
	bl = bl | ch
	SZO = cond(bl)
	C = false
	esi = esi - edi
	SCZO = cond(esi)
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	dh = dh - cl
	SCZO = cond(dh)
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	edx = edx ^ ebx
	SZO = cond(edx)
	C = false
	call fn00401FA3 (retsize: 4;)
	es_ebp = Mem0[fs:edi + 0x0A45AD31:segptr32]
	goto l004024C3_thunk_fn004024C9
	// succ:  l004024C3_thunk_fn004024C9
l004024B3:
l004024C3_thunk_fn004024C9:
	call fn004024C9 (retsize: 0;)
	return
	// succ:  fn004024B3_exit
fn004024B3_exit:


// fn004024C9
// Return size: 0
void fn004024C9()
fn004024C9_entry:
	// succ:  l004024C9
l004024C9:
	esp = fp
	dl = dl | ah
	SZO = cond(dl)
	C = false
	ah = ah - dl
	SCZO = cond(ah)
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
	goto l004024CD_thunk_fn004024CF
	// succ:  l004024CD_thunk_fn004024CF
l004024C9:
	ax = __aam(al)
	ecx = ecx - 0x00000001
	branch ecx != 0x00000000 l004024D9
	goto l004024CE
	// succ:  l004024CE l004024D9
l004024CD_thunk_fn004024CF:
	call fn004024CF (retsize: 0;)
	return
	// succ:  fn004024C9_exit
l004024CE:
l004024D9:
	v13 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v13
	SCZO = cond(v13)
fn004024C9_exit:


// fn004024CF
// Return size: 0
void fn004024CF()
fn004024CF_entry:
	// succ:  l004024CF
l004024CF:
	esp = fp
	dl = dl ^ bl
	SZO = cond(dl)
	C = false
	edx = edx - ebx
	SCZO = cond(edx)
	ah = ah + bh
	SCZO = cond(ah)
	branch Test(EQ,Z) TMP!
l004024CF:
l004024D5_thunk_fn004028EA:
	call fn004028EA (retsize: 0;)
	return
	// succ:  fn004024CF_exit
fn004024CF_exit:


// fn004024E9
// Return size: 0
void fn004024E9()
fn004024E9_entry:
	// succ:  l004024E9
l004024E9:
	esp = fp
	Mem0[esp - 0x0000000C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ch = ch ^ bh
	SZO = cond(ch)
	C = false
	ebx = edi
	dl = dl + al
	SCZO = cond(dl)
	bh = bh ^ ah
	SZO = cond(bh)
	C = false
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	dh = dh + bl
	SCZO = cond(dh)
	edi = edi - eax
	SCZO = cond(edi)
	call fn00402AED (retsize: 4;)
	branch Test(UGE,C) l00402500_thunk_fn004024A3
	goto l00402502
	// succ:  l00402502 l00402500_thunk_fn004024A3
l00402500_thunk_fn004024A3:
	call fn004024A3 (retsize: 0;)
	return
	// succ:  fn004024E9_exit
l00402502:
	branch Test(LT,SO) l00402502_thunk_fn00402496
	goto l00402504
	// succ:  l00402504 l00402502_thunk_fn00402496
l00402502_thunk_fn00402496:
	call fn00402496 (retsize: 0;)
	return
	// succ:  fn004024E9_exit
l00402504:
	v17 = Mem0[eax + 0x23B688B7:byte] + ch
	Mem0[eax + 0x23B688B7:byte] = v17
	SCZO = cond(v17)
	// succ:  l00402504_thunk_fn0040250A
l00402504_thunk_fn0040250A:
	call fn0040250A (retsize: 0;)
	return
	// succ:  fn004024E9_exit
fn004024E9_exit:


// fn00402506
// Return size: 0
void fn00402506()
fn00402506_entry:
	// succ:  l00402506
l00402506:
	esp = fp
	bh = 0x88
	dh = 0x23
	goto l00402508_thunk_fn0040250A
	// succ:  l00402508_thunk_fn0040250A
l00402506:
l00402508_thunk_fn0040250A:
	call fn0040250A (retsize: 0;)
	return
	// succ:  fn00402506_exit
fn00402506_exit:


// fn0040250A
// Return size: 0
void fn0040250A()
fn0040250A_entry:
	// succ:  l0040250A
l0040250A:
	esp = fp
	ebx = ebx - edi
	SCZO = cond(ebx)
	ebx = eax
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	edx = edx - 0x00000001
	SZO = cond(edx)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edx = edx + 0x00000001
	SZO = cond(edx)
	edx = edx ^ ebx
	SZO = cond(edx)
	C = false
	ebx = esi
	call fn00402681 (retsize: 4;)
	Mem0[edx:int32] = (int32) rArg0
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	Mem0[0xF2243C89:byte] = al
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi - 0x00000001
	SZO = cond(edi)
	edi = edi + ecx
	SCZO = cond(edi)
	edi = esi
	esi = edi
	eax = eax + edx
	SCZO = cond(eax)
	edi = edi | eax
	SZO = cond(edi)
	C = false
	goto l00402530_thunk_fn00402BF1
	// succ:  l00402530_thunk_fn00402BF1
l0040250A:
	ebx = ebx - edi
	SCZO = cond(ebx)
	ebx = eax
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	edx = edx - 0x00000001
	SZO = cond(edx)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edx = edx + 0x00000001
	SZO = cond(edx)
	edx = edx ^ ebx
	SZO = cond(edx)
	C = false
	ebx = esi
	call fn00402681 (retsize: 4;)
	Mem0[edx:int32] = (int32) rArg0
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	Mem0[0xF2243C89:byte] = al
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi - 0x00000001
	SZO = cond(edi)
	edi = edi + ecx
	SCZO = cond(edi)
	edi = esi
	esi = edi
	eax = eax + edx
	SCZO = cond(eax)
	edi = edi | eax
	SZO = cond(edi)
	C = false
	goto l00402530_thunk_fn00402BF1
	// succ:  l00402530_thunk_fn00402BF1
l00402530_thunk_fn00402BF1:
	call fn00402BF1 (retsize: 0;)
	return
	// succ:  fn0040250A_exit
l00402530_thunk_fn00402BF1:
	call fn00402BF1 (retsize: 0;)
	return
	// succ:  fn0040250A_exit
fn0040250A_exit:


// fn0040253C
// Return size: 0
void fn0040253C()
fn0040253C_entry:
	// succ:  l0040253C
l0040253C:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = eax
	eax = v3
	branch Test(NO,O) l00402541
	// succ:  l00402541
l00402541:
	v6 = bl
	bl = bl
	bl = v6
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	bl = bl ^ bh
	SZO = cond(bl)
	C = false
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	// succ:  l0040254A_thunk_fn00402625
l0040254A_thunk_fn00402625:
	call fn00402625 (retsize: 0;)
	return
	// succ:  fn0040253C_exit
l0040264F_thunk_fn004024B3:
	call fn004024B3 (retsize: 0;)
	return
	// succ:  fn0040253C_exit
fn0040253C_exit:


// fn00402559
// Return size: 0
void fn00402559()
fn00402559_entry:
	// succ:  l00402559
l00402559:
	eax = eax + 0x00000078
	bl = bl | bh
	SZO = cond(bl)
	C = false
	bh = bh ^ cl
	SZO = cond(bh)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	edi = edi + 0x00000001
	SZO = cond(edi)
	bl = bl ^ dl
	SZO = cond(bl)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	bh = al
	edi = esi
	call fn0040279E (retsize: 4;)
	v12 = eax
	eax = ebx
	ebx = v12
	SCZO = ah
	C = true
	esp = esp - 0x00000004
	Mem0[esp:word32] = SCZDOP
	ebx = Mem0[edx - 0x0000003F + ecx:word32] *s 0x0000002A
	SCZO = cond(ebx)
	// succ:  l00402572_thunk_fn00402577
l00402572_thunk_fn00402577:
	call fn00402577 (retsize: 0;)
	return
	// succ:  fn00402559_exit
fn00402559_exit:


// fn00402574
// Return size: 0
void fn00402574()
fn00402574_entry:
	// succ:  l00402574
l00402574:
	esp = fp
	al = al | cl
	SZO = cond(al)
	C = false
	ah = ah - dh
	SCZO = cond(ah)
	goto l00402576_thunk_fn00402577
	// succ:  l00402576_thunk_fn00402577
l00402574:
l00402576_thunk_fn00402577:
	call fn00402577 (retsize: 0;)
	return
	// succ:  fn00402574_exit
fn00402574_exit:


// fn00402577
// Return size: 0
void fn00402577()
fn00402577_entry:
	// succ:  l00402577
l00402577:
	esp = fp
	__outb(0x8A, al)
l00402577:
	cl = ch
	edx = edx - eax
	SCZO = cond(edx)
	bl = bl | ch
	SZO = cond(bl)
	C = false
	bl = cl
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
	bl = dh
	call fn00402870 (retsize: 4;)
fn00402577_exit:


// fn00402591
// Return size: 0
void fn00402591()
fn00402591_entry:
	// succ:  l00402591
l00402591:
	esp = fp
	bh = bh + dh
	SCZO = cond(bh)
	bh = 0x4F
	dh = dl
	ebx = ebx + esi
	SCZO = cond(ebx)
	dh = dl
	bh = bh + dh
	SCZO = cond(bh)
	ebx = ebx + edi
	SCZO = cond(ebx)
	bh = bh | al
	SZO = cond(bh)
	C = false
	ebx = ebx - eax
	SCZO = cond(ebx)
	goto l004025A3_thunk_fn00402987
	// succ:  l004025A3_thunk_fn00402987
l00402591:
l004025A3_thunk_fn00402987:
	call fn00402987 (retsize: 0;)
	return
	// succ:  fn00402591_exit
fn00402591_exit:


// fn004025CC
// Return size: 0
void fn004025CC()
fn004025CC_entry:
	// succ:  l004025CC
l004025CC:
	esp = fp
	Mem0[esp:word32] = eax
	al = al
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	edx = eax + 0x000000F8
	bh = bh + ch
	SCZO = cond(bh)
	bl = bl | ah
	SZO = cond(bl)
	C = false
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	ebx = ebx + eax
	SCZO = cond(ebx)
	call fn00402B08 (retsize: 4;)
	Mem0[edi:byte] = __in(edx)
	edi = edi + 0x00000001
	ebp = Mem0[ebx - 0x00000050:word32] *s 0x00000001
	SCZO = cond(ebp)
	// succ:  l004025EA_thunk_fn004025EE
l004025EA_thunk_fn004025EE:
	call fn004025EE (retsize: 0;)
	return
	// succ:  fn004025CC_exit
fn004025CC_exit:


// fn004025EE
// Return size: 0
void fn004025EE()
fn004025EE_entry:
	// succ:  l004025EE
l004025EE:
	esp = fp
	Mem0[esp:word32] = edi
fn004025EE_exit:


// fn00402625
// Return size: 0
void fn00402625()
fn00402625_entry:
	// succ:  l00402625
l00402625:
	edx = ecx
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bl = bl ^ ah
	SZO = cond(bl)
	C = false
	dl = 0x9D
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	dl = dl + bl
	SCZO = cond(dl)
	edx = edx - ecx
	SCZO = cond(edx)
	ebx = eax
	call fn00402A8C (retsize: 4;)
	int3()
	esi = esi | eax
	SZO = cond(esi)
	C = false
	ebp = ebp - 0x00000001
	SZO = cond(ebp)
	es = Mem0[esp:selector]
	esp = esp + 0x00000002
	Mem0[esp - 0x00000020:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = bl ^ cl
	SZO = cond(bl)
	C = false
	bh = bh ^ ah
	SZO = cond(bh)
	C = false
	dh = dh + dl
	SCZO = cond(dh)
	dl = dl ^ bh
	SZO = cond(dl)
	C = false
	bh = bh - cl
	SCZO = cond(bh)
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
	esi = esi + edi
	SCZO = cond(esi)
	goto l0040264F_thunk_fn004024B3
	// succ:  l0040264F_thunk_fn004024B3
fn00402625_exit:


// fn0040263D
// Return size: 0
void fn0040263D()
fn0040263D_entry:
	// succ:  l0040263D
l0040263D:
	esp = fp
	Mem0[esp - 0x00000020:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = bl ^ cl
	SZO = cond(bl)
	C = false
	bh = bh ^ ah
	SZO = cond(bh)
	C = false
	dh = dh + dl
	SCZO = cond(dh)
	dl = dl ^ bh
	SZO = cond(dl)
	C = false
	bh = bh - cl
	SCZO = cond(bh)
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
	esi = esi + edi
	SCZO = cond(esi)
	// succ:  l0040264F_thunk_fn004024B3
l0040264F_thunk_fn004024B3:
	call fn004024B3 (retsize: 0;)
	return
	// succ:  fn0040263D_exit
fn0040263D_exit:


// fn0040265C
// Return size: 0
void fn0040265C()
fn0040265C_entry:
	// succ:  l0040265C
l0040265C:
	esp = fp
	ebx = ebx + esi
	SCZO = cond(ebx)
	ebx = ebx | edx
	SZO = cond(ebx)
	C = false
	cl = cl | bh
	SZO = cond(cl)
	C = false
	esi = esi + 0x00000B77
	SCZO = cond(esi)
	ecx = ecx | ebx
	SZO = cond(ecx)
	C = false
	bh = ah
	dl = ah
	dh = dh ^ cl
	SZO = cond(dh)
	C = false
	al = dl
	bh = bh ^ ch
	SZO = cond(bh)
	C = false
	goto l00402674_thunk_fn0040299D
	// succ:  l00402674_thunk_fn0040299D
l0040265C:
l00402674_thunk_fn0040299D:
	call fn0040299D (retsize: 0;)
	return
	// succ:  fn0040265C_exit
fn0040265C_exit:


// fn00402681
// Return size: 0
void fn00402681()
fn00402681_entry:
	// succ:  l00402681
l00402681:
	esp = fp
	esp = esp + 0x00000004
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	ebx = ecx
	bl = bl ^ bh
	SZO = cond(bl)
	C = false
fn00402681_exit:


// fn00402699
// Return size: 0
void fn00402699()
fn00402699_entry:
	// succ:  l00402699
l00402699:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = ebx
	ebx = v3
	al = al
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ch = cl
	// succ:  l004026A0
l004026A0:
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edx = edx + 0x00000024
	SCZO = cond(edx)
	esi = esi - 0x00000001
	SZO = cond(esi)
	call fn004020BF (retsize: 4;)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	v16 = Mem0[esi + 0x00000041:word32] | ebp
	Mem0[esi + 0x00000041:word32] = v16
	SZO = cond(Mem0[esi + 0x00000041:word32])
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = ss
	C = !C
	branch Test(NE,Z) l004026A0
	// succ:  l004026B6_thunk_fn004026B8 l004026A0
l004026B6_thunk_fn004026B8:
	call fn004026B8 (retsize: 0;)
	return
	// succ:  fn00402699_exit l004026B6_thunk_fn004026B8
l004026B6_thunk_fn004026B8:
	call fn004026B8 (retsize: 0;)
	return
	// succ:  fn00402699_exit
fn00402699_exit:


// fn004026B8
// Return size: 0
void fn004026B8()
fn004026B8_entry:
	// succ:  l004026B8
l004026B8:
	esp = fp
	v5 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v5
	SCZO = cond(v5)
	v7 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v7
	SCZO = cond(v7)
	eax = eax | ecx
	SZO = cond(eax)
	C = false
	ch = ch ^ dh
	SZO = cond(ch)
	C = false
	esi = esi - edx
	SCZO = cond(esi)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	ah = -ah
	SCZO = cond(ah)
	C = ah == 0x00
	ecx = ecx | eax
	SZO = cond(ecx)
	C = false
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	dl = dl + bh
	SCZO = cond(dl)
	goto l004026CA_thunk_fn00401FE0
	// succ:  l004026CA_thunk_fn00401FE0
l004026B8:
l004026CA_thunk_fn00401FE0:
	call fn00401FE0 (retsize: 0;)
	return
	// succ:  fn004026B8_exit
fn004026B8_exit:


// fn004026BC
// Return size: 0
void fn004026BC()
fn004026BC_entry:
	// succ:  l004026BC
l004026BC:
	esp = fp
	eax = eax | ecx
	SZO = cond(eax)
	C = false
	ch = ch ^ dh
	SZO = cond(ch)
	C = false
	esi = esi - edx
	SCZO = cond(esi)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	ah = -ah
	SCZO = cond(ah)
	C = ah == 0x00
	ecx = ecx | eax
	SZO = cond(ecx)
	C = false
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	dl = dl + bh
	SCZO = cond(dl)
	// succ:  l004026CC_thunk_fn00401FE0
l004026CC_thunk_fn00401FE0:
	call fn00401FE0 (retsize: 0;)
	return
	// succ:  fn004026BC_exit
fn004026BC_exit:


// fn004026D9
// Return size: 0
void fn004026D9()
fn004026D9_entry:
	goto l004026D9
	// succ:  l004026D9
l00401E54:
	return
	// succ:  fn004026D9_exit
l00402468:
	dh = dh - al
	SCZO = cond(dh)
	dl = dl - ch
	SCZO = cond(dl)
	ch = ch - dh
	SCZO = cond(ch)
	eax = eax ^ edx
	SZO = cond(eax)
	C = false
	edx = edx + 0x00000001
	SZO = cond(edx)
	eax = eax - esi
	SCZO = cond(eax)
	ebx = ebx - esi
	SCZO = cond(ebx)
	edx = edx ^ ebx
	SZO = cond(edx)
	C = false
	branch Test(LT,SO) l00401E54
	// succ:  l0040247D l00401E54
l0040247D:
	branch Test(EQ,Z) l0040247F
	// succ:  l0040247F
l0040247F:
	branch Test(GE,SO) l00401E54
	// succ:  l00402485 l00401E54
l00402485:
	Mem0[edi:word32] = __in(edx)
	edi = edi + 0x00000004
	bl = bl & Mem0[0xF08A075A:byte]
	SZO = cond(bl)
	C = false
	// succ:  l00402486_thunk_fn0040248C
l00402486_thunk_fn0040248C:
	call fn0040248C (retsize: 0;)
	return
	// succ:  fn004026D9_exit
l004026D9:
	esp = fp
	edx = edx | ebx
	SZO = cond(edx)
	C = false
	bh = bh - dl
	SCZO = cond(bh)
	esi = esi + edx
	SCZO = cond(esi)
	dl = dl + al
	SCZO = cond(dl)
	eax = ebx
	esi = esi + 0x00000001
	SZO = cond(esi)
	cl = cl - ah
	SCZO = cond(cl)
	ah = ah | cl
	SZO = cond(ah)
	C = false
	branch Test(LE,SZO) l00402468
l004026D9:
l004026EB:
	D = true
	// succ:  l004026EE l00402468
l004026EE:
	v15 = ecx
	ecx = ecx
	ecx = v15
	ebx = ebx
	branch Test(GT,SZO) l00402468
	// succ:  l004026F8 l00402468
l004026F8:
	goto l004026EB
	// succ:  l004026EB
fn004026D9_exit:


// fn00402727
// Return size: 0
void fn00402727()
fn00402727_entry:
	// succ:  l00402727
l00402727:
	esp = fp
	Mem0[esp:word32] = esi
	v5 = al
	al = al
	al = v5
	// succ:  l0040272C
l0040272C:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = 0x937F0762
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	edx = edi
	dl = dl | cl
	SZO = cond(dl)
	C = false
	eax = eax + esi
	SCZO = cond(eax)
	ebx = ebx | edx
	SZO = cond(ebx)
	C = false
	// succ:  l0040273C_thunk_fn004024C9
l0040273C_thunk_fn004024C9:
	call fn004024C9 (retsize: 0;)
	return
	// succ:  fn00402727_exit
fn00402727_exit:


// fn00402748
// Return size: 0
void fn00402748()
fn00402748_entry:
	// succ:  l00402748
l00402748:
	esp = fp
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	bh = bh - ch
	SCZO = cond(bh)
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	edi = edi + edx
	SCZO = cond(edi)
	eax = Mem0[eax:word32]
	esi = esi - edx
	SCZO = cond(esi)
	edi = edi + 0x00000001
	SZO = cond(edi)
	goto l00402755_thunk_fn00401F6C
	// succ:  l00402755_thunk_fn00401F6C
l00402748:
l00402755_thunk_fn00401F6C:
	call fn00401F6C (retsize: 0;)
	return
	// succ:  fn00402748_exit
fn00402748_exit:


// fn00402762
// Return size: 0
void fn00402762()
fn00402762_entry:
	goto l00402762
	// succ:  l00402762
l0040208B:
	edx = edx | esi
	SZO = cond(edx)
	C = false
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	dh = dh - cl
	SCZO = cond(dh)
	dh = dh + ah
	SCZO = cond(dh)
	dl = dl - ah
	SCZO = cond(dl)
	dl = 0x2F
	ebx = ecx
	edx = edx + ebx
	SCZO = cond(edx)
	branch Test(LT,SO) l0040222B
	// succ:  l004020A3 l0040222B
l004020A3:
	esp = esp - 0x00000002
	Mem0[esp:word16] = di
	di = Mem0[esp:word16]
	esp = esp + 0x00000002
	esp = esp - 0x00000002
	Mem0[esp:word16] = cx
	cx = Mem0[esp:word16]
	esp = esp + 0x00000002
	branch Test(GE,SO) l0040222B
	// succ:  l004020B1 l0040222B
l004020B1:
	v27 = eax
	eax = edx
	edx = v27
	v28 = Mem0[eax + 0x7435A6C6:word32] ^ ebx
	Mem0[eax + 0x7435A6C6:word32] = v28
	SZO = cond(Mem0[eax + 0x7435A6C6:word32])
	C = false
	ah = ah | cl
	SZO = cond(ah)
	C = false
	bh = bh | dl
	SZO = cond(bh)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ch = ch - ah
	SCZO = cond(ch)
	esp = esp + 0x00000004
	edi = edi | esi
	SZO = cond(edi)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	cl = cl ^ ch
	SZO = cond(cl)
	C = false
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	esi = esi | ecx
	SZO = cond(esi)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
l004020CF_thunk_fn00401E6C:
	call fn00401E6C (retsize: 0;)
	return
	// succ:  fn00402762_exit
l0040222B:
	dh = dh ^ ch
	SZO = cond(dh)
	C = false
	dh = dh | al
	SZO = cond(dh)
	C = false
	edx = edx + 0x00000001
	SZO = cond(edx)
	dl = dl | ch
	SZO = cond(dl)
	C = false
	dh = dl
	edx = edx ^ ebx
	SZO = cond(edx)
	C = false
	dh = bl
	edx = edx | ebx
	SZO = cond(edx)
	C = false
	edx = edx + edi
	SCZO = cond(edx)
	goto l00402B9B
	// succ:  l00402B9B
l00402364:
	edx = edx | esi
	SZO = cond(edx)
	C = false
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	dh = ah
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	edx = edx + edi
	SCZO = cond(edx)
	edx = edx ^ edi
	SZO = cond(edx)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bh = bh + ch
	SCZO = cond(bh)
	branch Test(LE,SZO) l0040208B
	// succ:  l00402378 l0040208B
l00402378:
	dh = dh
	branch Test(GT,SZO) l0040208B
	// succ:  l00402380 l0040208B
l00402380:
	__outdw(edx, eax)
	esi = esi + 0x00000004
	rArg0 = rArg0 + rArg5
	Mem0[edi:byte] = al
	edi = edi + 0x00000001
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	al = al - ah
	SCZO = cond(al)
	ebx = ebx + esi
	SCZO = cond(ebx)
	eax = eax ^ edi
	SZO = cond(eax)
	C = false
	dh = dh - bl
	SCZO = cond(dh)
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	dh = dh + ah
	SCZO = cond(dh)
	cl = cl + ah
	SCZO = cond(cl)
	branch Test(ULE,CZ) l004026B7
	// succ:  l00402399 l004026B7
l00402399:
	// succ:  l0040239F
l0040239F:
	branch Test(UGT,CZ) l004026B7
	// succ:  l004023A5 l004026B7
l004023A5:
	v29 = (Mem0[ebx + 0x8DF58933:word32] & 0x00000001 << 0x20 - 0x01) != 0x00000000
	Mem0[ebx + 0x8DF58933:word32] = __rcl(Mem0[ebx + 0x8DF58933:word32], 0x01, C)
	C = v29
	esp = esp - 0x00000004
	Mem0[esp:word32] = esp
	__outb(0x32, al)
	v30 = (Mem0[edx:word32] & 0x00000001 << 0x20 - 0xCA) != 0x00000000
	Mem0[edx:word32] = __rol(Mem0[edx:word32], 0xCA)
	C = v30
	eax = eax + 0x00000001
	SZO = cond(eax)
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	edx = edx + edi
	SCZO = cond(edx)
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	call fn00402727 (retsize: 4;)
	v31 = Mem0[ecx:word32] + esp
	Mem0[ecx:word32] = v31
	SCZO = cond(v31)
	cl = Mem0[fs:ebx + 0x0000002A:byte]
	// succ:  l004023BF_thunk_fn004023C3
l004023BF_thunk_fn004023C3:
	call fn004023C3 (retsize: 0;)
	return
	// succ:  fn00402762_exit
l004026B7:
	call fn004026BC (retsize: 4;)
	// succ:  l004026B7_thunk_fn004026BC
l004026B7_thunk_fn004026BC:
	call fn004026BC (retsize: 0;)
	return
	// succ:  fn00402762_exit
l00402762:
	esp = fp
	Mem0[esp - 0x0000000C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = bl - al
	SCZO = cond(bl)
	bl = bl - ch
	SCZO = cond(bl)
	edx = edx + ebx
	SCZO = cond(edx)
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	bl = bl | cl
	SZO = cond(bl)
	C = false
	dl = dh
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	goto l00402364
	// succ:  l00402364
l00402B9B:
	edx = edx + 0x00000001
	SZO = cond(edx)
	dl = dl ^ al
	SZO = cond(dl)
	C = false
	dl = dl - cl
	SCZO = cond(dl)
	dl = 0xA0
	dh = dh ^ al
	SZO = cond(dh)
	C = false
	dl = dl + dh
	SCZO = cond(dl)
	call fn00401F4D (retsize: 4;)
	esi = 0xF3BED07C
	eax = eax + 0x0BF78A38 + C
	SCZO = cond(eax)
	// succ:  l00402BB0_thunk_fn00402BB5
l00402BB0_thunk_fn00402BB5:
	call fn00402BB5 (retsize: 6;)
	return
	// succ:  fn00402762_exit
fn00402762_exit:


// fn00402781
// Return size: 0
void fn00402781()
fn00402781_entry:
	// succ:  l00402781
l00402781:
	esp = fp
	esp = esp + 0x00000004
	edx = edx + ecx
	SCZO = cond(edx)
	ecx = ecx - edi
	SCZO = cond(ecx)
	edi = edi | edx
	SZO = cond(edi)
	C = false
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	bl = bl | dl
	SZO = cond(bl)
	C = false
	ch = -ch
	SCZO = cond(ch)
	C = ch == 0x00
	ecx = ebx
	call fn00402699 (retsize: 4;)
	ebx = 0x7FC1DF1E
	ax = __aam(al)
	// succ:  l0040279D_thunk_fn0040279F
l0040279D_thunk_fn0040279F:
	call fn0040279F (retsize: 0;)
	return
	// succ:  fn00402781_exit
fn00402781_exit:


// fn0040279E
// Return size: 0
void fn0040279E()
fn0040279E_entry:
	// succ:  l0040279E
l0040279E:
	esp = fp
	esp = esp + 0x00000004
	// succ:  l0040279E_thunk_fn0040279F
l0040279E_thunk_fn0040279F:
	call fn0040279F (retsize: 0;)
	return
	// succ:  fn0040279E_exit
l004027B1_thunk_fn00401F87:
	call fn00401F87 (retsize: 0;)
	return
	// succ:  fn0040279E_exit
fn0040279E_exit:


// fn0040279F
// Return size: 0
void fn0040279F()
fn0040279F_entry:
	// succ:  l0040279F
l0040279F:
	esp = fp
	al = al & 0x04
	SZO = cond(al)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	esi = esi + ebx
	SCZO = cond(esi)
	bl = 0xFC
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	esi = edx
	esi = esi + ecx
	SCZO = cond(esi)
	bl = ah
	esi = esi - 0x00000001
	SZO = cond(esi)
	edi = edi - 0x00000001
	SZO = cond(edi)
	// succ:  l004027B1_thunk_fn00401F87 l004027B1_thunk_fn00401F87
l0040279F:
	esi = esi - 0x00000001
	SZO = cond(esi)
	esi = esi + ebx
	SCZO = cond(esi)
	bl = 0xFC
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	esi = edx
	esi = esi + ecx
	SCZO = cond(esi)
	bl = ah
	esi = esi - 0x00000001
	SZO = cond(esi)
	edi = edi - 0x00000001
	SZO = cond(edi)
l004027B1_thunk_fn00401F87:
	call fn00401F87 (retsize: 0;)
	return
	// succ:  fn0040279F_exit
fn0040279F_exit:


// fn004027DA
// Return size: 0
void fn004027DA()
fn004027DA_entry:
	goto l004027DA
	// succ:  l004027DA
l00402605:
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	edi = edi - ecx
	SCZO = cond(edi)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bh = bh - cl
	SCZO = cond(bh)
	esi = esi - 0x00000001
	SZO = cond(esi)
	bl = bl - cl
	SCZO = cond(bl)
	branch Test(PE,P) l004029B6
	// succ:  l00402616 l004029B6
l00402616:
	branch Test(NS,S) l00402618
	// succ:  l00402618
l00402618:
	ax = ax
	branch Test(PO,P) l004029B6
	// succ:  l00402621 l004029B6
l00402621:
	SZO = cond(Mem0[edi:byte] & bh)
	C = false
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[edi:byte] = __in(edx)
	edi = edi + 0x00000001
	// succ:  l00402624_thunk_fn00402625
l00402624_thunk_fn00402625:
	call fn00402625 (retsize: 0;)
	return
	// succ:  fn004027DA_exit
l004027DA:
	esp = fp
	esp = esp + 0x00000004
	ebx = ebx - edx
	SCZO = cond(ebx)
	bh = bh ^ dh
	SZO = cond(bh)
	C = false
	bl = 0xA2
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	goto l00402605
	// succ:  l00402605
l004029B6:
	bh = bh + dl
	SCZO = cond(bh)
	// succ:  l004029B6_thunk_fn004029B7
l004029B6_thunk_fn004029B7:
	call fn004029B7 (retsize: 0;)
	return
	// succ:  fn004027DA_exit
fn004027DA_exit:


// fn00402827
// Return size: 0
void fn00402827()
fn00402827_entry:
	// succ:  l00402827
l00402827:
	bl = bl + dh
	SCZO = cond(bl)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ah = ah ^ bh
	SZO = cond(ah)
	C = false
	bh = bh ^ al
	SZO = cond(bh)
	C = false
	edi = edi + ecx
	SCZO = cond(edi)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	edi = edi - esi
	SCZO = cond(edi)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	dh = 0xF0
	branch Test(SG,S) l00402B42
	// succ:  l0040283F l00402B42
l0040283F:
	// succ:  l00402844
l00402844:
	branch Test(NS,S) l00402B42
	// succ:  l0040284A l00402B42
l0040284A:
	al = al + 0x72 + C
	SCZO = cond(al)
	SCZO = cond(al - 0x99)
	eax = eax - 0x448F9926 - C
	SCZO = cond(eax)
	// succ:  l0040284E_thunk_fn00402852
l0040284E_thunk_fn00402852:
	call fn00402852 (retsize: 0;)
	return
	// succ:  fn00402827_exit
l00402B42:
fn00402827_exit:


// fn00402852
// Return size: 0
void fn00402852()
fn00402852_entry:
	// succ:  l00402852
l00402852:
	esp = fp
	esp = esp + 0x00000001
	SZO = cond(esp)
	al = al & 0xE4
	SZO = cond(al)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edx = edx + esi
	SCZO = cond(edx)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	dl = dl | dh
	SZO = cond(dl)
	C = false
	dh = dh + al
	SCZO = cond(dh)
	ebx = edi
	v13 = (al & 0x01 << 0x17) != 0x00
	al = __ror(al, 0x17)
	C = v13
	bh = 0xB6
	ebx = ecx
	goto l00402866_thunk_fn00402AA8
	// succ:  l00402866_thunk_fn00402AA8
l00402852:
	al = al & 0xE4
	SZO = cond(al)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edx = edx + esi
	SCZO = cond(edx)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	dl = dl | dh
	SZO = cond(dl)
	C = false
	dh = dh + al
	SCZO = cond(dh)
	ebx = edi
	v16 = (al & 0x01 << 0x17) != 0x00
	al = __ror(al, 0x17)
	C = v16
	bh = 0xB6
	ebx = ecx
l00402866_thunk_fn00402AA8:
	call fn00402AA8 (retsize: 0;)
	return
	// succ:  fn00402852_exit
fn00402852_exit:


// fn00402870
// Return size: 0
void fn00402870()
fn00402870_entry:
	// succ:  l00402870
l00402870:
	esp = fp
	Mem0[esp:word32] = edx
fn00402870_exit:


// fn00402896
// Return size: 0
void fn00402896()
fn00402896_entry:
	goto l00402896
	// succ:  l00402896
l0040286B:
	al = al + 0x95 + C
	SCZO = cond(al)
l00402896:
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = eax
	eax = v3
	// succ:  l0040289F
l0040289F:
	v5 = dh
	dh = dh
	dh = v5
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = ch
	esi = esi + edi
	SCZO = cond(esi)
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	branch Test(OV,O) l00402904
	// succ:  l004028AA l00402904
l004028AA:
	bx = bx
	branch Test(NO,O) l00402904
	// succ:  l004028AF l00402904
l004028AF:
	branch Test(OV,O) l004028AF_thunk_fn00402852
	goto l004028B1
	// succ:  l004028B1 l004028AF_thunk_fn00402852
l004028AF_thunk_fn00402852:
	call fn00402852 (retsize: 0;)
	return
	// succ:  fn00402896_exit
l004028B1:
	branch Test(ULE,CZ) l0040286B
	// succ:  l004028B1_thunk_fn004028B3 l0040286B
l004028B1_thunk_fn004028B3:
	call fn004028B3 (retsize: 0;)
	return
	// succ:  fn00402896_exit l004028B1_thunk_fn004028B3
l004028B1_thunk_fn004028B3:
	call fn004028B3 (retsize: 0;)
	return
	// succ:  fn00402896_exit
l00402904:
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	eax = eax + ecx
	SCZO = cond(eax)
	bh = al
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bh = 0x15
	bl = 0x62
	branch Test(SG,S) l00402B26
	// succ:  l00402915 l00402B26
l00402915:
l00402B26:
	bh = bh | dl
	SZO = cond(bh)
	C = false
	bh = 0x6F
	edi = edi | esi
	SZO = cond(edi)
	C = false
	ebx = ebx - eax
	SCZO = cond(ebx)
	edi = edi + 0x00000001
	SZO = cond(edi)
	bh = bh | bl
	SZO = cond(bh)
	C = false
	bl = 0xCE
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[eax + 0x00000010:word32]
	call fn004027DA (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	SZO = cond(eax & 0x9639042B)
	C = false
	v25 = Mem0[edx:byte] + cl
	Mem0[edx:byte] = v25
	SCZO = cond(v25)
fn00402896_exit:


// fn004028B3
// Return size: 0
void fn004028B3()
fn004028B3_entry:
	// succ:  l004028B3
l004028B3:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = esi
	esi = v3
	ebx = ebx
	v6 = di
	di = di
	di = v6
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ch = ch - ah
	SCZO = cond(ch)
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	// succ:  l004028BE_thunk_fn004028BF
l004028BE_thunk_fn004028BF:
	call fn004028BF (retsize: 0;)
	return
	// succ:  fn004028B3_exit
fn004028B3_exit:


// fn004028BF
// Return size: 0
void fn004028BF()
fn004028BF_entry:
	// succ:  l004028BF
l004028BF:
	esp = fp
	v3 = (Mem0[edx + 0x8BF902D0:byte] & 0x01 << 0x01) != 0x00
	Mem0[edx + 0x8BF902D0:byte] = __ror(Mem0[edx + 0x8BF902D0:byte], 0x01)
	C = v3
l004028BF:
	dl = al
	bh = bh + cl
	SCZO = cond(bh)
	ebx = edi
	// succ:  l004028C6_thunk_fn00402264
l004028C6_thunk_fn00402264:
	call fn00402264 (retsize: 0;)
	return
	// succ:  fn004028BF_exit
fn004028BF_exit:


// fn004028D3
// Return size: 0
void fn004028D3()
fn004028D3_entry:
	// succ:  l004028D3
l004028D3:
	esp = fp
	Mem0[esp - 0x00000024:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = bl - bh
	SCZO = cond(bl)
	bh = ch
	esi = esi + edi
	SCZO = cond(esi)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	esi = esi + 0x00000001
	SZO = cond(esi)
	call fn004025CC (retsize: 4;)
fn004028D3_exit:


// fn004028EA
// Return size: 0
void fn004028EA()
fn004028EA_entry:
	// succ:  l004028EA
l004028EA:
	esp = fp
	dl = dl + ah
	SCZO = cond(dl)
	dl = dl + dh
	SCZO = cond(dl)
	eax = eax - 0x00000001
	SZO = cond(eax)
	eax = eax | edi
	SZO = cond(eax)
	C = false
	dl = dl ^ dh
	SZO = cond(dl)
	C = false
	edx = edx - 0x00000001
	SZO = cond(edx)
	eax = eax - 0x00000001
	SZO = cond(eax)
	ecx = ecx ^ 0x937F0BBD
	SZO = cond(ecx)
	C = false
	goto l004028FB_thunk_fn004022C6
	// succ:  l004028FB_thunk_fn004022C6
l004028EA:
l004028FB_thunk_fn004022C6:
	call fn004022C6 (retsize: 0;)
	return
	// succ:  fn004028EA_exit
fn004028EA_exit:


// fn00402925
// Return size: 0
void fn00402925()
fn00402925_entry:
	// succ:  l00402925
l00402925:
	esp = fp
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	ebx = edx
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	edi = edi + 0x00000001
	SZO = cond(edi)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bl = bl ^ ch
	SZO = cond(bl)
	C = false
	ebx = ebx ^ ecx
	SZO = cond(ebx)
	C = false
	call fn004028D3 (retsize: 4;)
	Mem0[edi:word32] = eax
	edi = edi + 0x00000004
	edi = edi + 0x00000001
	SZO = cond(edi)
	D = false
	branch Test(UGE,C) l0040293A_thunk_fn004028BF
	goto l0040293A_thunk_fn0040293C
	// succ:  l0040293A_thunk_fn0040293C l0040293A_thunk_fn004028BF
l00402925:
l0040293A_thunk_fn004028BF:
	call fn004028BF (retsize: 0;)
	return
	// succ:  fn00402925_exit
l0040293A_thunk_fn0040293C:
	call fn0040293C (retsize: 0;)
	return
	// succ:  fn00402925_exit l0040293A_thunk_fn0040293C
l0040293A_thunk_fn0040293C:
	call fn0040293C (retsize: 0;)
	return
	// succ:  fn00402925_exit
fn00402925_exit:


// fn0040293C
// Return size: 0
void fn0040293C()
fn0040293C_entry:
	goto l0040293C
	// succ:  l0040293C
l00402324:
l0040293C:
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bh = bh + ah
	SCZO = cond(bh)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	bh = 0x36
	esi = esi + ebx
	SCZO = cond(esi)
	goto l00402324
	// succ:  l00402324
fn0040293C_exit:


// fn00402987
// Return size: 0
void fn00402987()
fn00402987_entry:
	// succ:  l00402987
l00402987:
	esp = fp
	edx = edx ^ esi
	SZO = cond(edx)
	C = false
	goto l00402988
	// succ:  l00402988
l00402987:
l00402994_thunk_fn004023C1:
	call fn004023C1 (retsize: 0;)
	return
	// succ:  fn00402987_exit
fn00402987_exit:


// fn0040299D
// Return size: 0
void fn0040299D()
fn0040299D_entry:
	// succ:  l0040299D
l0040299D:
	esp = fp
	ecx = ecx + edx
	SCZO = cond(ecx)
	ebx = edx
	cl = cl | ch
	SZO = cond(cl)
	C = false
	edx = edx - edi
	SCZO = cond(edx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	edx = edx + 0x00000001
	SZO = cond(edx)
	bl = bl ^ bh
	SZO = cond(bl)
	C = false
	goto l004029A9_thunk_fn00402574
	// succ:  l004029A9_thunk_fn00402574
l0040299D:
l004029A9_thunk_fn00402574:
	call fn00402574 (retsize: 0;)
	return
	// succ:  fn0040299D_exit
fn0040299D_exit:


// fn004029B7
// Return size: 0
void fn004029B7()
fn004029B7_entry:
	// succ:  l004029B7
l004029B7:
	esp = fp
	__cli()
	esi = eax
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh - ah
	SCZO = cond(bh)
	bl = bl ^ al
	SZO = cond(bl)
	C = false
	ebx = ebx ^ edi
	SZO = cond(ebx)
	C = false
	esi = esi + eax
	SCZO = cond(esi)
	edi = ecx
	ebx = ebx + edi
	SCZO = cond(ebx)
	branch Test(SG,S) l004029C8_thunk_fn0040204B
	goto l004029C8_thunk_fn004029CE
	// succ:  l004029C8_thunk_fn004029CE l004029C8_thunk_fn0040204B
l004029B7:
	esi = eax
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh - ah
	SCZO = cond(bh)
	bl = bl ^ al
	SZO = cond(bl)
	C = false
	ebx = ebx ^ edi
	SZO = cond(ebx)
	C = false
	esi = esi + eax
	SCZO = cond(esi)
	edi = ecx
	ebx = ebx + edi
	SCZO = cond(ebx)
	branch Test(SG,S) l0040204B
	goto l004029C7_thunk_fn004029CE
	// succ:  l004029C7_thunk_fn004029CE l004029C7_thunk_fn0040204B
l004029C7_thunk_fn0040204B:
	call fn0040204B (retsize: 0;)
	return
	// succ:  fn004029B7_exit
l004029C7_thunk_fn004029CE:
	call fn004029CE (retsize: 0;)
	return
	// succ:  fn004029B7_exit
l004029C8_thunk_fn0040204B:
	call fn0040204B (retsize: 0;)
	return
	// succ:  fn004029B7_exit
l004029C8_thunk_fn004029CE:
	call fn004029CE (retsize: 0;)
	return
	// succ:  fn004029B7_exit l004029C8_thunk_fn004029CE
l004029C8_thunk_fn004029CE:
	call fn004029CE (retsize: 0;)
	return
	// succ:  fn004029B7_exit
fn004029B7_exit:


// fn004029CE
// Return size: 0
void fn004029CE()
fn004029CE_entry:
	// succ:  l004029CE
l004029CE:
	cl = cl
	branch Test(NS,S) l0040204B
	goto l004029D6
	// succ:  l004029D6 l004029D0_thunk_fn0040204B
l004029D0_thunk_fn0040204B:
	call fn0040204B (retsize: 0;)
	return
	// succ:  fn004029CE_exit
l004029D6:
	ebp = ebp + 0x00000001
	SZO = cond(ebp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = es
	Mem0[0x5AE6563C:word32] = eax
	v9 = Mem0[esp:word32]
	Mem0[esp:word32] = ecx
	ecx = v9
	v12 = dh
	dh = dh
	dh = v12
	// succ:  l004029E0_thunk_fn004029E8
l004029E0_thunk_fn004029E8:
	call fn004029E8 (retsize: 0;)
	return
	// succ:  fn004029CE_exit
fn004029CE_exit:


// fn004029DD
// Return size: 0
void fn004029DD()
fn004029DD_entry:
	// succ:  l004029DD
l004029DD:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = ecx
	ecx = v3
	v5 = dh
	dh = dh
	dh = v5
	// succ:  l004029E2_thunk_fn004029E8
l004029E2_thunk_fn004029E8:
	call fn004029E8 (retsize: 0;)
	return
	// succ:  fn004029DD_exit
fn004029DD_exit:


// fn004029E8
// Return size: 0
void fn004029E8()
fn004029E8_entry:
	// succ:  l004029E8
l004029E8:
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx + esi
	SCZO = cond(ebx)
	dl = dl ^ al
	SZO = cond(dl)
	C = false
	bh = bh ^ cl
	SZO = cond(bh)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	dh = 0xB6
	// succ:  l004029F2_thunk_fn004026D9
l004029F2_thunk_fn004026D9:
	call fn004026D9 (retsize: 0;)
	return
	// succ:  fn004029E8_exit
fn004029E8_exit:


// fn004029FF
// Return size: 0
void fn004029FF()
fn004029FF_entry:
	// succ:  l004029FF
l004029FF:
	esp = fp
	ecx = edx
	dl = dl + dh
	SCZO = cond(dl)
	cl = cl ^ bl
	SZO = cond(cl)
	C = false
	al = bh
	ah = ah - dh
	SCZO = cond(ah)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx | eax
	SZO = cond(edx)
	C = false
	edx = edx - 0x00000001
	SZO = cond(edx)
l004029FF:
fn004029FF_exit:


// fn00402A17
// Return size: 0
void fn00402A17()
fn00402A17_entry:
	// succ:  l00402A17
l00402A17:
	ah = -ah
	SCZO = cond(ah)
	C = ah == 0x00
	edx = edx + 0x00000001
	SZO = cond(edx)
	dh = dl
	dl = dl | ch
	SZO = cond(dl)
	C = false
	ebx = eax
	edx = edx ^ edi
	SZO = cond(edx)
	C = false
	edx = edx - esi
	SCZO = cond(edx)
	edx = edx + edi
	SCZO = cond(edx)
	call fn004021D7 (retsize: 4;)
	edi = 0x95EADD95
	// succ:  l00402A2B_thunk_fn00402A30
l00402A2B_thunk_fn00402A30:
	call fn00402A30 (retsize: 0;)
	return
	// succ:  fn00402A17_exit
fn00402A17_exit:


// fn00402A30
// Return size: 0
void fn00402A30()
fn00402A30_entry:
	// succ:  l00402A30
l00402A30:
	esp = fp
	bl = ch
	edi = edi | ecx
	SZO = cond(edi)
	C = false
	edi = edi ^ esi
	SZO = cond(edi)
	C = false
	esi = edi
	esi = esi - 0x00000001
	SZO = cond(esi)
	bl = bl + ah
	SCZO = cond(bl)
	branch Test(ULT,C) l00402A3B_thunk_fn00402123
	goto l00402A3B_thunk_fn00402A41
	// succ:  l00402A3B_thunk_fn00402A41 l00402A3B_thunk_fn00402123
l00402A30:
	bl = ch
	edi = edi | ecx
	SZO = cond(edi)
	C = false
	edi = edi ^ esi
	SZO = cond(edi)
	C = false
	esi = edi
	esi = esi - 0x00000001
	SZO = cond(esi)
	bl = bl + ah
	SCZO = cond(bl)
	branch Test(ULT,C) l00402A3B_thunk_fn00402123
	goto l00402A3B_thunk_fn00402A41
	// succ:  l00402A3B_thunk_fn00402A41 l00402A3B_thunk_fn00402123
l00402A3B_thunk_fn00402123:
	call fn00402123 (retsize: 0;)
	return
	// succ:  fn00402A30_exit
l00402A3B_thunk_fn00402123:
	call fn00402123 (retsize: 0;)
	return
	// succ:  fn00402A30_exit
l00402A3B_thunk_fn00402A41:
	call fn00402A41 (retsize: 0;)
	return
	// succ:  fn00402A30_exit l00402A3B_thunk_fn00402A41
l00402A3B_thunk_fn00402A41:
	call fn00402A41 (retsize: 0;)
	return
	// succ:  fn00402A30_exit
l00402A3B_thunk_fn00402A41:
	call fn00402A41 (retsize: 0;)
	return
	// succ:  fn00402A30_exit
fn00402A30_exit:


// fn00402A41
// Return size: 0
void fn00402A41()
fn00402A41_entry:
	// succ:  l00402A41
l00402A41:
fn00402A41_exit:


// fn00402A4C
// Return size: 0
void fn00402A4C()
fn00402A4C_entry:
	goto l00402A4C
	// succ:  l00402A4C
l004027BE:
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	bl = bl | ch
	SZO = cond(bl)
	C = false
	edi = esi
	bl = bl + dh
	SCZO = cond(bl)
	edi = edi - 0x00000001
	SZO = cond(edi)
	esi = esi + edi
	SCZO = cond(esi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	ebx = eax
	ebx = esi
	call fn00402C85 (retsize: 4;)
l00402A4C:
	esp = fp
	bh = bh | al
	SZO = cond(bh)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	esi = ecx
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	esi = eax
	goto l004027BE
	// succ:  l004027BE
l00402A4C:
fn00402A4C_exit:


// fn00402A8C
// Return size: 0
void fn00402A8C()
fn00402A8C_entry:
	// succ:  l00402A8C
l00402A8C:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = edi
	edi = v3
fn00402A8C_exit:


// fn00402A8D
// Return size: 0
void fn00402A8D()
fn00402A8D_entry:
	// succ:  l00402A8D
l00402A8D:
	esp = fp
	SCZO = cond(al - 0x24)
l00402A8D:
fn00402A8D_exit:


// fn00402AA8
// Return size: 0
void fn00402AA8()
fn00402AA8_entry:
	goto l00402AA8
	// succ:  l00402AA8
l00402075_thunk_fn0040207B:
	call fn0040207B (retsize: 0;)
	return
	// succ:  fn00402AA8_exit l00402075_thunk_fn0040207B
l00402075_thunk_fn0040207B:
	call fn0040207B (retsize: 0;)
	return
	// succ:  fn00402AA8_exit
l00402075_thunk_fn00402506:
	call fn00402506 (retsize: 0;)
	return
	// succ:  fn00402AA8_exit
l00402AA8:
	bl = 0x65
	bh = bh + dl
	SCZO = cond(bh)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edx = edx + 0x00000001
	SZO = cond(edx)
	dl = dl - ch
	SCZO = cond(dl)
	bh = bh - ch
	SCZO = cond(bh)
	branch Test(OV,O) l00402067
	goto l00402AB8
	// succ:  l00402AB8 l00402AB2_thunk_fn00402067
l00402AB2_thunk_fn00402067:
	call fn00402067 (retsize: 0;)
	return
	// succ:  fn00402AA8_exit
l00402AB8:
	v12 = esi
	esi = esi
	esi = v12
	branch Test(NO,O) l00402067
	goto l00402AC0
	// succ:  l00402AC0 l00402ABA_thunk_fn00402067
l00402ABA_thunk_fn00402067:
	call fn00402067 (retsize: 0;)
	return
	// succ:  fn00402AA8_exit
l00402AC0:
	v14 = Mem0[edx + 0x00000060:byte] & ch
	Mem0[edx + 0x00000060:byte] = v14
	SZO = cond(Mem0[edx + 0x00000060:byte])
	C = false
	Mem0[eax + 0x00000029:word16] = gs
	esp = esp + 0x00000001
	SZO = cond(esp)
	eax = Mem0[esi:word32]
	esi = esi + 0x00000004
	// succ:  l00402AC7_thunk_fn00402AC8
l00402AC7_thunk_fn00402AC8:
	call fn00402AC8 (retsize: 0;)
	return
	// succ:  fn00402AA8_exit
fn00402AA8_exit:


// fn00402AC8
// Return size: 0
void fn00402AC8()
fn00402AC8_entry:
	// succ:  l00402AC8
l00402AC8:
	esp = fp
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
	eax = edi
	dl = dl + ah
	SCZO = cond(dl)
	bh = bh - dl
	SCZO = cond(bh)
	al = al - cl
	SCZO = cond(al)
	al = al ^ bl
	SZO = cond(al)
	C = false
	ah = -ah
	SCZO = cond(ah)
	C = ah == 0x00
	bl = bl ^ bh
	SZO = cond(bl)
	C = false
	branch Test(LE,SZO) l00402AD8_thunk_fn00402C68
	goto l00402AD8_thunk_fn00402ADE
	// succ:  l00402AD8_thunk_fn00402ADE l00402AD8_thunk_fn00402C68
l00402AC8:
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
	eax = edi
	dl = dl + ah
	SCZO = cond(dl)
	bh = bh - dl
	SCZO = cond(bh)
	al = al - cl
	SCZO = cond(al)
	al = al ^ bl
	SZO = cond(al)
	C = false
	ah = -ah
	SCZO = cond(ah)
	C = ah == 0x00
	bl = bl ^ bh
	SZO = cond(bl)
	C = false
	branch Test(LE,SZO) l00402AD8_thunk_fn00402C68
	goto l00402AD8_thunk_fn00402ADE
	// succ:  l00402AD8_thunk_fn00402ADE l00402AD8_thunk_fn00402C68
l00402AD8_thunk_fn00402ADE:
	call fn00402ADE (retsize: 0;)
	return
	// succ:  fn00402AC8_exit l00402AD8_thunk_fn00402ADE
l00402AD8_thunk_fn00402ADE:
	call fn00402ADE (retsize: 0;)
	return
	// succ:  fn00402AC8_exit
l00402AD8_thunk_fn00402ADE:
	call fn00402ADE (retsize: 0;)
	return
	// succ:  fn00402AC8_exit
l00402AD8_thunk_fn00402C68:
	call fn00402C68 (retsize: 0;)
	return
	// succ:  fn00402AC8_exit
l00402AD8_thunk_fn00402C68:
	call fn00402C68 (retsize: 0;)
	return
	// succ:  fn00402AC8_exit
fn00402AC8_exit:


// fn00402ADE
// Return size: 0
void fn00402ADE()
fn00402ADE_entry:
	// succ:  l00402ADE
l00402ADE:
fn00402ADE_exit:


// fn00402AED
// Return size: 0
void fn00402AED()
fn00402AED_entry:
	goto l00402AED
	// succ:  l00402AED
l00402432:
	esi = esi ^ edi
	SZO = cond(esi)
	C = false
	ebx = ebx | eax
	SZO = cond(ebx)
	C = false
	ch = ch ^ bh
	SZO = cond(ch)
	C = false
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	esi = eax
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edi = edi - esi
	SCZO = cond(edi)
	esi = esi + 0x00000001
	SZO = cond(esi)
	Mem0[esp - 0x00000008:word32] = eax
	edi = edi + eax
	SCZO = cond(edi)
	// succ:  l00402446_thunk_fn00401E36
l00402446_thunk_fn00401E36:
	call fn00401E36 (retsize: 0;)
	return
	// succ:  fn00402AED_exit
l00402AED:
	esp = fp
	esp = esp + 0x00000004
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	cl = cl + dh
	SCZO = cond(cl)
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	ch = ah
	esi = edi
	goto l00402432
	// succ:  l00402432
fn00402AED_exit:


// fn00402B08
// Return size: 0
void fn00402B08()
fn00402B08_entry:
	// succ:  l00402B08
l00402B08:
	esp = fp
	Mem0[esp - 0x00000034:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = bl | ah
	SZO = cond(bl)
	C = false
	esi = esi - eax
	SCZO = cond(esi)
	edi = edi - esi
	SCZO = cond(edi)
	edi = edi + eax
	SCZO = cond(edi)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[edx + 0x00000008:word32]
	// succ:  l00402B19_thunk_fn00402A30
l00402B19_thunk_fn00402A30:
	call fn00402A30 (retsize: 0;)
	return
	// succ:  fn00402B08_exit
fn00402B08_exit:


// fn00402B5B
// Return size: 0
void fn00402B5B()
fn00402B5B_entry:
	// succ:  l00402B5B
l00402B5B:
	Mem0[esi:byte] = ah
	ebx = ebx - edi
	SCZO = cond(ebx)
	ebx = esi
	bl = al
	edx = edx + 0x00000001
	SZO = cond(edx)
	bl = 0x22
	dh = dh + cl
	SCZO = cond(dh)
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	branch Test(ULT,C) l00402B6A_thunk_fn00402107
	goto l00402B70
	// succ:  l00402B70 l00402B6A_thunk_fn00402107
l00402B6A_thunk_fn00402107:
	call fn00402107 (retsize: 0;)
	return
	// succ:  fn00402B5B_exit
l00402B70:
	edi = edi
	branch Test(SG,S) l00402B74
	// succ:  l00402B74
l00402B74:
	branch Test(UGE,C) l00402B74_thunk_fn00402107
	goto l00402B7A
	// succ:  l00402B7A l00402B74_thunk_fn00402107
l00402B74_thunk_fn00402107:
	call fn00402107 (retsize: 0;)
	return
	// succ:  fn00402B5B_exit
l00402B7A:
	al = al + 0xAB
	SCZO = cond(al)
	cl = 0xC7
	v17 = Mem0[edi + 0x00000053:word32] + edi + C
	Mem0[edi + 0x00000053:word32] = v17
	SCZO = cond(v17)
	// succ:  lDA36FC10
lDA36FC10:
fn00402B5B_exit:


// fn00402BB2
// Return size: 6
void fn00402BB2()
fn00402BB2_entry:
	// succ:  l00402BB2
l00402BB2:
	dh = bh
	ecx = ecx | edx
	SZO = cond(ecx)
	C = false
	// succ:  l00402BB4_thunk_fn00402BB5
l00402BB4_thunk_fn00402BB5:
	call fn00402BB5 (retsize: 6;)
	return
	// succ:  fn00402BB2_exit
fn00402BB2_exit:


// fn00402BB5
// Return size: 6
void fn00402BB5()
fn00402BB5_entry:
	goto l00402BB5
	// succ:  l00402BB5
l0040240B:
	eax = eax + edx
	SCZO = cond(eax)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bl = bl - dh
	SCZO = cond(bl)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	eax = eax ^ ebx
	SZO = cond(eax)
	C = false
	ah = ah - cl
	SCZO = cond(ah)
	al = al + cl
	SCZO = cond(al)
	edx = edx - edi
	SCZO = cond(edx)
	eax = edi
	branch Test(ULT,C) TMP!
l00402BB5:
	esp = fp
	return
	// succ:  fn00402BB5_exit
l00402BB5:
	bl = bl ^ cl
	SZO = cond(bl)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	eax = eax - 0x00000001
	SZO = cond(eax)
	dh = bl
	edx = edx - ebx
	SCZO = cond(edx)
	branch Test(ULE,CZ) l0040240B
	// succ:  l00402BC4 l0040240B
l00402BC4:
	// succ:  l00402BCA
l00402BCA:
fn00402BB5_exit:


// fn00402BD8
// Return size: 0
void fn00402BD8()
fn00402BD8_entry:
	// succ:  l00402BD8
l00402BD8:
	esp = fp
	dl = dl ^ al
	SZO = cond(dl)
	C = false
	edx = edx - 0x00000001
	SZO = cond(edx)
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	dl = dh
	edx = edx | ecx
	SZO = cond(edx)
	C = false
	edx = edx | eax
	SZO = cond(edx)
	C = false
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	edx = edx - 0x00000001
	SZO = cond(edx)
	call fn00402344 (retsize: 4;)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = cs
	__outb(dx, al)
	v14 = eax
	eax = ebp
	ebp = v14
	ecx = ecx - 0x00000001
	branch ecx != 0x00000000 l00402BEF_thunk_fn00402C0E
	goto l00402BEF_thunk_fn00402BF1
	// succ:  l00402BEF_thunk_fn00402BF1 l00402BEF_thunk_fn00402C0E
l00402BD8:
l00402BEF_thunk_fn00402BF1:
	call fn00402BF1 (retsize: 0;)
	return
	// succ:  fn00402BD8_exit l00402BEF_thunk_fn00402BF1
l00402BEF_thunk_fn00402BF1:
	call fn00402BF1 (retsize: 0;)
	return
	// succ:  fn00402BD8_exit
l00402BEF_thunk_fn00402C0E:
	call fn00402C0E (retsize: 0;)
	return
	// succ:  fn00402BD8_exit
fn00402BD8_exit:


// fn00402BF1
// Return size: 0
void fn00402BF1()
fn00402BF1_entry:
	// succ:  l00402BF1
l00402BF1:
	esp = fp
	esi = edi
	esi = esi - 0x00000001
	SZO = cond(esi)
	esi = esi + 0x00000001
	SZO = cond(esi)
	edi = edi | eax
	SZO = cond(edi)
	C = false
	esi = esi | edx
	SZO = cond(esi)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	eax = eax + ebx
	SCZO = cond(eax)
	bh = bh | al
	SZO = cond(bh)
	C = false
	edi = edi + edx
	SCZO = cond(edi)
	bl = bl + ch
	SCZO = cond(bl)
	call fn00401EE1 (retsize: 4;)
l00402BF1:
fn00402BF1_exit:


// fn00402C0B
// Return size: 0
void fn00402C0B()
fn00402C0B_entry:
	// succ:  l00402C0B
l00402C0B:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	goto l00402C0D_thunk_fn00402C0E
	// succ:  l00402C0D_thunk_fn00402C0E
l00402C0B:
l00402C0D_thunk_fn00402C0E:
	call fn00402C0E (retsize: 0;)
	return
	// succ:  fn00402C0B_exit
fn00402C0B_exit:


// fn00402C0E
// Return size: 0
void fn00402C0E()
fn00402C0E_entry:
	// succ:  l00402C0E
l00402C0E:
	esp = fp
	dh = ch
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ch = -ch
	SCZO = cond(ch)
	C = ch == 0x00
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	ch = ch + bl
	SCZO = cond(ch)
	call fn004028B3 (retsize: 4;)
	v14 = Mem0[ecx + 0x02C78808:word32] | esi
	Mem0[ecx + 0x02C78808:word32] = v14
	SZO = cond(Mem0[ecx + 0x02C78808:word32])
	C = false
	v16 = Mem0[edx:word16] - (real64) rArg0
	Mem0[edx:word16] = v16
	bh = bh - dl
	SCZO = cond(bh)
	edi = edi - esi
	SCZO = cond(edi)
	bl = bl - dl
	SCZO = cond(bl)
	esi = esi + ecx
	SCZO = cond(esi)
	edi = ebx
	goto l00402C2F_thunk_fn0040202A
	// succ:  l00402C2F_thunk_fn0040202A
l00402C0E:
	dh = ch
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ch = -ch
	SCZO = cond(ch)
	C = ch == 0x00
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	ch = ch + bl
	SCZO = cond(ch)
	call fn004028B3 (retsize: 4;)
	v20 = Mem0[ecx + 0x02C78808:word32] | esi
	Mem0[ecx + 0x02C78808:word32] = v20
	SZO = cond(Mem0[ecx + 0x02C78808:word32])
	C = false
	v21 = Mem0[edx:word16] - (real64) rArg0
	Mem0[edx:word16] = v21
	bh = bh - dl
	SCZO = cond(bh)
	edi = edi - esi
	SCZO = cond(edi)
	bl = bl - dl
	SCZO = cond(bl)
	esi = esi + ecx
	SCZO = cond(esi)
	edi = ebx
	// succ:  l00402C2D_thunk_fn0040202A
l00402C2D_thunk_fn0040202A:
	call fn0040202A (retsize: 0;)
	return
	// succ:  fn00402C0E_exit
l00402C2F_thunk_fn0040202A:
	call fn0040202A (retsize: 0;)
	return
	// succ:  fn00402C0E_exit
fn00402C0E_exit:


// fn00402C68
// Return size: 0
void fn00402C68()
fn00402C68_entry:
	// succ:  l00402C68
l00402C68:
	esp = fp
	bh = bh - ah
	SCZO = cond(bh)
	edi = edi - edx
	SCZO = cond(edi)
	ah = ah + dl
	SCZO = cond(ah)
	edi = edi + 0x00000001
	SZO = cond(edi)
	ebx = ebx + ecx
	SCZO = cond(ebx)
	ecx = ecx >>u 0x0000000F
	SCZO = cond(ecx)
	edi = edi - ecx
	SCZO = cond(edi)
	al = al ^ cl
	SZO = cond(al)
	C = false
	call fn00401FC6 (retsize: 4;)
l00402C68:
fn00402C68_exit:


// fn00402C85
// Return size: 0
void fn00402C85()
fn00402C85_entry:
	// succ:  l00402C85
l00402C85:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = eax
	eax = v3
fn00402C85_exit:


