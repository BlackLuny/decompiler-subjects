// fn00401006
// Return size: 0
void fn00401006()
fn00401006_entry:
	// succ:  l00401006
l00401006:
	esp = fp
	Mem0[esp:word32] = ecx
	branch Test(OV,O) l0040100B
	// succ:  l0040100B
l0040100B:
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = bl - dh
	SCZO = cond(bl)
	edx = edx + 0x00000001
	SZO = cond(edx)
	edx = edx - 0x00000001
	SZO = cond(edx)
	ecx = eax
	edx = edx - 0x00000001
	SZO = cond(edx)
	esi = esi + edx
	SCZO = cond(esi)
	branch Test(PE,P) l00401015_thunk_fn004011BA
	goto l0040101B
	// succ:  l0040101B l00401015_thunk_fn004011BA
l00401015_thunk_fn004011BA:
	call fn004011BA (retsize: 0;)
	return
	// succ:  fn00401006_exit
l0040101B:
	si = si
	branch Test(PO,P) l0040101E_thunk_fn004011BA
	goto l00401024
	// succ:  l00401024 l0040101E_thunk_fn004011BA
l0040101E_thunk_fn004011BA:
	call fn004011BA (retsize: 0;)
	return
	// succ:  fn00401006_exit
l00401024:
	edi = edi + Mem0[ebp + 0x00000024:word32] + C
	SCZO = cond(edi)
	v17 = Mem0[edx:word32]
	Mem0[edx:word32] = esi
	esi = v17
	SCZO = cond(al - 0x03)
	// succ:  l00401029_thunk_fn0040102B
l00401029_thunk_fn0040102B:
	call fn0040102B (retsize: 6;)
	return
	// succ:  fn00401006_exit
fn00401006_exit:


// fn0040102A
// Return size: 4
void fn0040102A()
fn0040102A_entry:
	// succ:  l0040102A
l0040102A:
	esp = fp
	ecx = ecx + ebx
	SCZO = cond(ecx)
	goto l0040102A_thunk_fn0040102B
	// succ:  l0040102A_thunk_fn0040102B
l0040102A:
l0040102A_thunk_fn0040102B:
	call fn0040102B (retsize: 6;)
	return
	// succ:  fn0040102A_exit
fn0040102A_exit:


// fn0040102B
// Return size: 6
void fn0040102B()
fn0040102B_entry:
	// succ:  l0040102B
l0040102B:
	esp = fp
	return
	// succ:  fn0040102B_exit
l0040102B:
	edi = edi + 0x00000001
	SZO = cond(edi)
	edi = edi - 0x00000001
	SZO = cond(edi)
	ebx = ebx | edx
	SZO = cond(ebx)
	C = false
	ebx = ebx - ecx
	SCZO = cond(ebx)
	ebx = ebx + edx
	SCZO = cond(ebx)
	ebx = ebx - edx
	SCZO = cond(ebx)
	ebx = ebx + esi
	SCZO = cond(ebx)
	esi = esi - edi
	SCZO = cond(esi)
	eax = eax | eax
	SZO = cond(eax)
	C = false
	// succ:  l0040103C_thunk_fn00401072
l0040103C_thunk_fn00401072:
	call fn00401072 (retsize: 4;)
	return
	// succ:  fn0040102B_exit
fn0040102B_exit:


// fn00401044
// Return size: 0
void fn00401044()
fn00401044_entry:
	// succ:  l00401044
l00401044:
	esp = fp
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	edx = edx | esi
	SZO = cond(edx)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edi = edi ^ esi
	SZO = cond(edi)
	C = false
	esi = edx
	call fn004011D7 (retsize: 4;)
	__lock()
	dl = dl ^ Mem0[0x0424648D:byte]
	SZO = cond(dl)
	C = false
	goto l00401056_thunk_fn0040105C
	// succ:  l00401056_thunk_fn0040105C
l00401044:
l00401056_thunk_fn0040105C:
	call fn0040105C (retsize: 0;)
	return
	// succ:  fn00401044_exit
fn00401044_exit:


// fn00401058
// Return size: 0
void fn00401058()
fn00401058_entry:
	// succ:  l00401058
l00401058:
	esp = fp
	esp = esp + 0x00000004
	// succ:  l00401058_thunk_fn0040105C
l00401058_thunk_fn0040105C:
	call fn0040105C (retsize: 0;)
	return
	// succ:  fn00401058_exit
fn00401058_exit:


// fn0040105C
// Return size: 0
void fn0040105C()
fn0040105C_entry:
	// succ:  l0040105C
l0040105C:
	esp = fp
	edi = edx
	esi = esi - ecx
	SCZO = cond(esi)
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	ecx = ecx + eax
	SCZO = cond(ecx)
	call fn00401174 (retsize: 4;)
	__cli()
	ecx = 0xD042BCFE
	branch Test(EQ,Z) l00401071_thunk_fn00401075
	goto l00401074_in_fn0040105C
	// succ:  l00401074_in_fn0040105C l00401071_thunk_fn00401075
l0040105C:
	edi = edx
	esi = esi - ecx
	SCZO = cond(esi)
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	ecx = ecx + eax
	SCZO = cond(ecx)
	call fn00401174 (retsize: 4;)
	__cli()
	ecx = 0xD042BCFE
	branch Test(EQ,Z) l00401071_thunk_fn00401075
	goto l00401074_in_fn00401058
	// succ:  l00401074_in_fn00401058 l00401071_thunk_fn00401075
l00401071_thunk_fn00401075:
	call fn00401075 (retsize: 0;)
	return
	// succ:  fn0040105C_exit
l00401071_thunk_fn00401075:
	call fn00401075 (retsize: 0;)
	return
	// succ:  fn0040105C_exit
l00401074_in_fn00401058:
	return
	// succ:  fn0040105C_exit l00401074_in_fn00401058
l00401074_in_fn00401058:
	return
	// succ:  fn0040105C_exit
l00401074_in_fn0040105C:
	return
	// succ:  fn0040105C_exit l00401074_in_fn0040105C
l00401074_in_fn0040105C:
	return
	// succ:  fn0040105C_exit
fn0040105C_exit:


// fn00401072
// Return size: 4
void fn00401072()
fn00401072_entry:
	// succ:  l00401072
l00401072:
	esp = fp
	branch Test(EQ,Z) l00401075
	goto l00401074
	// succ:  l00401074 l00401072_thunk_fn00401075
l00401072:
l00401072_thunk_fn00401075:
	call fn00401075 (retsize: 0;)
	return
	// succ:  fn00401072_exit
l00401074:
	return
	// succ:  fn00401072_exit
fn00401072_exit:


// fn00401075
// Return size: 0
void fn00401075()
fn00401075_entry:
	// succ:  l00401075
l00401075:
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	ecx = ecx ^ edi
	SZO = cond(ecx)
	C = false
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
	esi = esi - edx
	SCZO = cond(esi)
	ecx = ecx - ebx
	SCZO = cond(ecx)
	edx = eax
fn00401075_exit:


// fn0040108E
// Return size: 0
void fn0040108E()
fn0040108E_entry:
	// succ:  l0040108E
l0040108E:
	esp = fp
	esi = esi | edx
	SZO = cond(esi)
	C = false
	ecx = ecx - esi
	SCZO = cond(ecx)
	edi = edi - 0x00000001
	SZO = cond(edi)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	edi = edi - 0x00000001
	SZO = cond(edi)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ebx = ebx + esi
	SCZO = cond(ebx)
	eax = Mem0[eax + 0x00000090:word32]
	edx = edx + 0x00000001
	SZO = cond(edx)
	branch Test(LT,SO) l0040109F_thunk_fn004010E8
	goto l004010A1
	// succ:  l004010A1 l0040109F_thunk_fn004010E8
l0040108E:
l0040109F_thunk_fn004010E8:
	call fn004010E8 (retsize: 0;)
	return
	// succ:  fn0040108E_exit
l004010A1:
	bx = bx
	branch Test(GE,SO) l004010A4_thunk_fn004010E8
	goto l004010A6
	// succ:  l004010A6 l004010A4_thunk_fn004010E8
l004010A4_thunk_fn004010E8:
	call fn004010E8 (retsize: 0;)
	return
	// succ:  fn0040108E_exit
l004010A6:
	bh = bh | Mem0[ebx + 0x00000067:byte]
	SZO = cond(bh)
	C = false
fn0040108E_exit:


// fn004010AC
// Return size: 4
void fn004010AC()
fn004010AC_entry:
	// succ:  l004010AC
l004010AC:
	esp = fp
	eax = eax - 0xEEEEEEEE
	SCZO = cond(eax)
	esi = esi - ebx
	SCZO = cond(esi)
	ebx = ebx + edi
	SCZO = cond(ebx)
	ecx = ecx + edx
	SCZO = cond(ecx)
	ecx = ecx | edx
	SZO = cond(ecx)
	C = false
	edx = edx - 0x00000001
	SZO = cond(edx)
	edi = edi | eax
	SZO = cond(edi)
	C = false
	goto l004010BC_thunk_fn0040102A
	// succ:  l004010BC_thunk_fn0040102A
l004010AC:
l004010BC_thunk_fn0040102A:
	call fn0040102A (retsize: 4;)
	return
	// succ:  fn004010AC_exit
fn004010AC_exit:


// fn004010D2
// Return size: 0
void fn004010D2()
fn004010D2_entry:
	// succ:  l004010D2
l004010D2:
	ebx = ebx + edx
	SCZO = cond(ebx)
	cl = cl - al
	SCZO = cond(cl)
	ebx = ebx | edx
	SZO = cond(ebx)
	C = false
	cl = cl + 0x01
	SZO = cond(cl)
	esi = esi + 0x00000001
	SZO = cond(esi)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	call fn00401006 (retsize: 4;)
	Mem0[ebp + 0x0000005E:word16] = __fstcw()
	SCZO = cond(eax - 0x03737B84)
	// succ:  l004010E4_thunk_fn004010E9
l004010E4_thunk_fn004010E9:
	call fn004010E9 (retsize: 0;)
	return
	// succ:  fn004010D2_exit
fn004010D2_exit:


// fn004010E8
// Return size: 0
void fn004010E8()
fn004010E8_entry:
	// succ:  l004010E8
l004010E8:
	esp = fp
	ebx = ebx + eax
	SCZO = cond(ebx)
	goto l004010E8_thunk_fn004010E9
	// succ:  l004010E8_thunk_fn004010E9
l004010E8:
l004010E8_thunk_fn004010E9:
	call fn004010E9 (retsize: 0;)
	return
	// succ:  fn004010E8_exit
fn004010E8_exit:


// fn004010E9
// Return size: 0
void fn004010E9()
fn004010E9_entry:
	// succ:  l004010E9
l004010E9:
	esp = fp
	rArg0 = rArg0 * Mem0[ebx:real32]
l004010E9:
	esi = esi | ecx
	SZO = cond(esi)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	esi = esi + edi
	SCZO = cond(esi)
	ecx = ecx - eax
	SCZO = cond(ecx)
	ecx = ecx ^ edx
	SZO = cond(ecx)
	C = false
	edx = edx + ecx
	SCZO = cond(edx)
	esi = esi + 0x00000001
	SZO = cond(esi)
	ecx = ecx ^ edx
	SZO = cond(ecx)
	C = false
	ebx = ebx | edx
	SZO = cond(ebx)
	C = false
	call fn004012D2 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00401102_thunk_fn00401103
l00401102_thunk_fn00401103:
	call fn00401103 (retsize: 0;)
	return
	// succ:  fn004010E9_exit
fn004010E9_exit:


// fn00401103
// Return size: 0
void fn00401103()
fn00401103_entry:
	// succ:  l00401103
l00401103:
	esp = fp
	eax = eax - esi
	SCZO = cond(eax)
	edx = edx | ecx
	SZO = cond(edx)
	C = false
	ebx = ebx - edi
	SCZO = cond(ebx)
	edx = edx - 0x00000001
	SZO = cond(edx)
	edi = edi | edx
	SZO = cond(edi)
	C = false
	edx = edx | ebx
	SZO = cond(edx)
	C = false
	call fn00401058 (retsize: 4;)
	__outb(edx, al)
	esi = esi + 0x00000001
	esp = Mem0[esp:word32]
	esp = esp + 0x00000004
	SCZO = cond(Mem0[eax + 0x3C87EDA9:word32] - eax)
	goto l00401115_thunk_fn0040111B
	// succ:  l00401115_thunk_fn0040111B
l00401103:
l00401115_thunk_fn0040111B:
	call fn0040111B (retsize: 0;)
	return
	// succ:  fn00401103_exit
fn00401103_exit:


// fn00401119
// Return size: 0
void fn00401119()
fn00401119_entry:
	// succ:  l00401119
l00401119:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = edi
	edi = v3
	// succ:  l00401119_thunk_fn0040111B
l00401119_thunk_fn0040111B:
	call fn0040111B (retsize: 0;)
	return
	// succ:  fn00401119_exit
fn00401119_exit:


// fn0040111B
// Return size: 0
void fn0040111B()
fn0040111B_entry:
	// succ:  l0040111B
l0040111B:
	esp = fp
	al = al & 0x87
	SZO = cond(al)
	C = false
	v6 = (Mem0[edi + 0x0000002B:byte] & 0x01 << 0xF0) != 0x00
	Mem0[edi + 0x0000002B:byte] = __rcr(Mem0[edi + 0x0000002B:byte], 0xF0, C)
	C = v6
	esi = esi + ebx
	SCZO = cond(esi)
	esi = esi + 0x00000001
	SZO = cond(esi)
	dh = dh | al
	SZO = cond(dh)
	C = false
	bl = bl + dl
	SCZO = cond(bl)
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	branch Test(LT,SO) l0040112A_thunk_fn004010D2
	goto l0040112A_thunk_fn0040112C
	// succ:  l0040112A_thunk_fn0040112C l0040112A_thunk_fn004010D2
l0040111B:
	v17 = eax
	eax = eax
	eax = v17
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi - eax
	SCZO = cond(esi)
	esi = esi + ebx
	SCZO = cond(esi)
	esi = esi + 0x00000001
	SZO = cond(esi)
	dh = dh | al
	SZO = cond(dh)
	C = false
	bl = bl + dl
	SCZO = cond(bl)
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	branch Test(LT,SO) l004010D2
	goto l00401129_thunk_fn0040112C
	// succ:  l00401129_thunk_fn0040112C l00401129_thunk_fn004010D2
l00401129_thunk_fn004010D2:
	call fn004010D2 (retsize: 0;)
	return
	// succ:  fn0040111B_exit
l00401129_thunk_fn0040112C:
	call fn0040112C (retsize: 0;)
	return
	// succ:  fn0040111B_exit
l0040112A_thunk_fn004010D2:
	call fn004010D2 (retsize: 0;)
	return
	// succ:  fn0040111B_exit
l0040112A_thunk_fn0040112C:
	call fn0040112C (retsize: 0;)
	return
	// succ:  fn0040111B_exit l0040112A_thunk_fn0040112C
l0040112A_thunk_fn0040112C:
	call fn0040112C (retsize: 0;)
	return
	// succ:  fn0040111B_exit
fn0040111B_exit:


// fn0040112C
// Return size: 0
void fn0040112C()
fn0040112C_entry:
	// succ:  l0040112C
l0040112C:
	v3 = bh
	bh = bh
	bh = v3
	// succ:  l00401133
l00401133:
	branch Test(GE,SO) l00401133_thunk_fn004010D2
	goto l00401135
	// succ:  l00401135 l00401133_thunk_fn004010D2
l00401133_thunk_fn004010D2:
	call fn004010D2 (retsize: 0;)
	return
	// succ:  fn0040112C_exit
l00401135:
	v9 = Mem0[esi + ecx * 2F:real32] / rArg0
	Mem0[esi + ecx * 2F:real32] = v9
	SCZO = ah
	v13 = Mem0[ebx:byte] + 0xD6
	Mem0[ebx:byte] = v13
	SCZO = cond(v13)
	// succ:  l00401139_thunk_fn0040113C
l00401139_thunk_fn0040113C:
	call fn0040113C (retsize: 0;)
	return
	// succ:  fn0040112C_exit
fn0040112C_exit:


// fn0040113A
// Return size: 0
void fn0040113A()
fn0040113A_entry:
	// succ:  l0040113A
l0040113A:
	edx = edx + esi
	SCZO = cond(edx)
	// succ:  l0040113A_thunk_fn0040113C
l0040113A_thunk_fn0040113C:
	call fn0040113C (retsize: 0;)
	return
	// succ:  fn0040113A_exit
fn0040113A_exit:


// fn0040113C
// Return size: 0
void fn0040113C()
fn0040113C_entry:
	// succ:  l0040113C
l0040113C:
	esp = fp
	ecx = ecx - edx
	SCZO = cond(ecx)
	ecx = ecx - edi
	SCZO = cond(ecx)
	ecx = ecx | ebx
	SZO = cond(ecx)
	C = false
	edi = edi + 0x00000001
	SZO = cond(edi)
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx + ebx
	SCZO = cond(ecx)
	eax = edx
	branch Test(LE,SZO) l00401148_thunk_fn004012FC
	goto l00401148_thunk_fn0040114E
	// succ:  l00401148_thunk_fn0040114E l00401148_thunk_fn004012FC
l0040113C:
	ecx = ecx - edx
	SCZO = cond(ecx)
	ecx = ecx - edi
	SCZO = cond(ecx)
	ecx = ecx | ebx
	SZO = cond(ecx)
	C = false
	edi = edi + 0x00000001
	SZO = cond(edi)
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx + ebx
	SCZO = cond(ecx)
	eax = edx
	branch Test(LE,SZO) l00401148_thunk_fn004012FC
	goto l00401148_thunk_fn0040114E
	// succ:  l00401148_thunk_fn0040114E l00401148_thunk_fn004012FC
l00401148_thunk_fn0040114E:
	call fn0040114E (retsize: 0;)
	return
	// succ:  fn0040113C_exit l00401148_thunk_fn0040114E
l00401148_thunk_fn0040114E:
	call fn0040114E (retsize: 0;)
	return
	// succ:  fn0040113C_exit
l00401148_thunk_fn0040114E:
	call fn0040114E (retsize: 0;)
	return
	// succ:  fn0040113C_exit
l00401148_thunk_fn004012FC:
	call fn004012FC (retsize: 0;)
	return
	// succ:  fn0040113C_exit
l00401148_thunk_fn004012FC:
	call fn004012FC (retsize: 0;)
	return
	// succ:  fn0040113C_exit
fn0040113C_exit:


// fn0040114E
// Return size: 0
void fn0040114E()
fn0040114E_entry:
	// succ:  l0040114E
l0040114E:
fn0040114E_exit:


// fn00401159
// Return size: 0
void fn00401159()
fn00401159_entry:
	// succ:  l00401159
l00401159:
	esp = fp
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	esi = esi - 0x00000001
	SZO = cond(esi)
	edx = edx + 0x00000001
	SZO = cond(edx)
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	edi = edi - edx
	SCZO = cond(edi)
	eax = Mem0[eax + 0x00000008:word32]
	edi = edi | eax
	SZO = cond(edi)
	C = false
	edi = ebx
l00401159:
fn00401159_exit:


// fn00401174
// Return size: 0
void fn00401174()
fn00401174_entry:
	goto l00401174
	// succ:  l00401174
l004010C6:
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ecx = ecx + edi
	SCZO = cond(ecx)
	eax = eax | ecx
	SZO = cond(eax)
	C = false
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	goto l0040135B
	// succ:  l0040135B
l00401174:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = edi
	edi = v3
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax - edx
	SCZO = cond(eax)
	esi = esi - 0x00000001
	SZO = cond(esi)
	edx = edx - eax
	SCZO = cond(edx)
	ecx = esi
	branch Test(OV,O) l004010C6
	// succ:  l00401187 l004010C6
l00401187:
	dx = edx
	branch Test(NO,O) l004010C6
	// succ:  l00401190 l004010C6
l00401190:
	al = __inb(dx)
	__lock()
	al = al + 0xF7 + C
	SCZO = cond(al)
	fs = di
	esi = esi - 0x00000001
	SZO = cond(esi)
	// succ:  l00401196_thunk_fn00401197
l00401196_thunk_fn00401197:
	call fn00401197 (retsize: 0;)
	return
	// succ:  fn00401174_exit
l0040135B:
	call fn00402A2D (retsize: 4;)
	al = al + Mem0[ebx + 0x0000001B:byte] + C
	SCZO = cond(al)
	v18 = Mem0[ebx - 0x00000012:byte] ^ 0x5A
	Mem0[ebx - 0x00000012:byte] = v18
	SZO = cond(Mem0[ebx - 0x00000012:byte])
	C = false
	v19 = eax
	eax = ecx
	ecx = v19
	v21 = Mem0[eax + 0x725AA0A0:byte] | ah
	Mem0[eax + 0x725AA0A0:byte] = v21
	SZO = cond(Mem0[eax + 0x725AA0A0:byte])
	C = false
	bl = bl - Mem0[edx + 0x00000076:byte] - C
	SCZO = cond(bl)
	bl = bl - Mem0[edx + 0x00000066:byte] - C
	SCZO = cond(bl)
	ch = ch - Mem0[edx:byte] - C
	SCZO = cond(ch)
	SCZDOP = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi - Mem0[edi + 0x5AA0A09A:word32]
	SCZO = cond(esi)
	D = true
	al = al + Mem0[edx + 0x3D5D983C:byte] + C
	SCZO = cond(al)
fn00401174_exit:


// fn00401197
// Return size: 0
void fn00401197()
fn00401197_entry:
	// succ:  l00401197
l00401197:
	esp = esp + 0x00000004
	edx = edx | eax
	SZO = cond(edx)
	C = false
	ebx = eax
	edi = edi + 0x00000001
	SZO = cond(edi)
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
	ecx = ecx - esi
	SCZO = cond(ecx)
	branch Test(ULT,C) l00401231
	// succ:  l004011AC l00401231
l004011AC:
l00401231:
	ebx = ebx | eax
	SZO = cond(ebx)
	C = false
	call fn00401210 (retsize: 4;)
	// succ:  l00401231_thunk_fn00401232 l00401245_thunk_fn0040124A
l00401231_thunk_fn00401232:
	call fn00401232 (retsize: 0;)
	return
	// succ:  fn00401197_exit
l00401245_thunk_fn0040124A:
	call fn0040124A (retsize: 0;)
	return
	// succ:  fn00401197_exit
fn00401197_exit:


// fn004011BA
// Return size: 0
void fn004011BA()
fn004011BA_entry:
	// succ:  l004011BA
l004011BA:
	esp = fp
	edi = edi - 0x00000001
	SZO = cond(edi)
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	esi = edi
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	esi = esi - edx
	SCZO = cond(esi)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	esi = esi | ecx
	SZO = cond(esi)
	C = false
	edx = edx - 0x00000001
	SZO = cond(edx)
	eax = Mem0[fs:0x00000030:word32]
l004011BA:
fn004011BA_exit:


// fn004011D7
// Return size: 0
void fn004011D7()
fn004011D7_entry:
	// succ:  l004011D7
l004011D7:
	esp = fp
	Mem0[esp - 0x00000024:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	esi = edi
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edx = edx - 0x00000001
	SZO = cond(edx)
	esi = edx
	edi = edi ^ esi
	SZO = cond(edi)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	branch Test(LT,SO) l004011E6_thunk_fn00401159
	goto l004011EC
	// succ:  l004011EC l004011E6_thunk_fn00401159
l004011E6_thunk_fn00401159:
	call fn00401159 (retsize: 0;)
	return
	// succ:  fn004011D7_exit
l004011EC:
	v11 = al
	al = al
	al = v11
fn004011D7_exit:


// fn004011FA
// Return size: 0
void fn004011FA()
fn004011FA_entry:
	// succ:  l004011FA
l004011FA:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	ecx = edi
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ebx = edx
	edi = edi + edx
	SCZO = cond(edi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edi = edi - ebx
	SCZO = cond(edi)
	// succ:  l00401250
l00401250:
	edi = edi - ebx
	SCZO = cond(edi)
	// succ:  l00401250_thunk_fn00401251
l00401250_thunk_fn00401251:
	call fn00401251 (retsize: 0;)
	return
	// succ:  fn004011FA_exit
fn004011FA_exit:


// fn00401210
// Return size: 0
void fn00401210()
fn00401210_entry:
	// succ:  l00401210
l00401210:
	esp = fp
	esp = esp + 0x00000004
	edx = ecx
	ebx = ebx - edx
	SCZO = cond(ebx)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ecx = esi
	edx = ebx
	edi = ecx
	esi = esi + ecx
	SCZO = cond(esi)
	edi = edi - 0x00000001
	SZO = cond(edi)
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	call fn004012A5 (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	v12 = Mem0[edx + 0x0000000B:word32] + 0xC98D24B2
	Mem0[edx + 0x0000000B:word32] = v12
	SCZO = cond(v12)
	ax = __aam(al)
	// succ:  l00401230_thunk_fn00401232
l00401230_thunk_fn00401232:
	call fn00401232 (retsize: 0;)
	return
	// succ:  fn00401210_exit
fn00401210_exit:


// fn00401232
// Return size: 0
void fn00401232()
fn00401232_entry:
	// succ:  l00401232
l00401232:
	esp = fp
	rArg0 = rArg0 * Mem0[ebx + 0x03C88BCA:real32]
	v5 = (Mem0[ebx + 0xD08B4EF9:word32] & 0x00000001 << 0x01) != 0x00000000
	Mem0[ebx + 0xD08B4EF9:word32] = __ror(Mem0[ebx + 0xD08B4EF9:word32], 0x01)
	C = v5
	eax = eax & 0xEEEEEEEE
	SZO = cond(eax)
	C = false
	esi = esi - edi
	SCZO = cond(esi)
	call fn00401210 (retsize: 4;)
	goto l00401245_thunk_fn0040124A
	// succ:  l00401245_thunk_fn0040124A
l00401232:
	ecx = edx
	ecx = eax
	edx = edx + ecx
	SCZO = cond(edx)
	edi = ecx
	esi = esi - 0x00000001
	SZO = cond(esi)
	edx = eax
	eax = eax & 0xEEEEEEEE
	SZO = cond(eax)
	C = false
	esi = esi - edi
	SCZO = cond(esi)
l00401245_thunk_fn0040124A:
	call fn0040124A (retsize: 0;)
	return
	// succ:  fn00401232_exit
fn00401232_exit:


// fn0040124A
// Return size: 0
void fn0040124A()
fn0040124A_entry:
	// succ:  l0040124A
l0040124A:
	esp = fp
	ds = Mem0[esi + 0x2B6D670A + ebp * 0x0004:selector]
	goto l0040124A_thunk_fn00401251
	// succ:  l0040124A_thunk_fn00401251
l0040124A:
	ds = Mem0[esi + 0x2B6D670A + ebp * 0x0004:selector]
	goto l0040124A_thunk_fn00401251
	// succ:  l0040124A_thunk_fn00401251
l0040124A_thunk_fn00401251:
	call fn00401251 (retsize: 0;)
	return
	// succ:  fn0040124A_exit
l0040124A_thunk_fn00401251:
	call fn00401251 (retsize: 0;)
	return
	// succ:  fn0040124A_exit
fn0040124A_exit:


// fn00401251
// Return size: 0
void fn00401251()
fn00401251_entry:
	// succ:  l00401251
l00401251:
	esp = fp
	edi = edi + 0x00000001
	SZO = cond(edi)
	edx = edx + eax
	SCZO = cond(edx)
	edx = edx - 0x00000001
	SZO = cond(edx)
	edi = edi - 0x00000001
	SZO = cond(edi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	edi = edi + ebx
	SCZO = cond(edi)
	edx = edx + esi
	SCZO = cond(edx)
	edx = edx + ecx
	SCZO = cond(edx)
	ecx = esi
	goto l00401260_thunk_fn00401342
	// succ:  l00401260_thunk_fn00401342
l00401251:
	edi = edi + 0x00000001
	SZO = cond(edi)
	edx = edx + eax
	SCZO = cond(edx)
	edx = edx - 0x00000001
	SZO = cond(edx)
	edi = edi - 0x00000001
	SZO = cond(edi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	edi = edi + ebx
	SCZO = cond(edi)
	edx = edx + esi
	SCZO = cond(edx)
	edx = edx + ecx
	SCZO = cond(edx)
	ecx = esi
	// succ:  l0040125D_thunk_fn00401342
l0040125D_thunk_fn00401342:
	call fn00401342 (retsize: 0;)
	return
	// succ:  fn00401251_exit
l00401260_thunk_fn00401342:
	call fn00401342 (retsize: 0;)
	return
	// succ:  fn00401251_exit
fn00401251_exit:


// fn0040126A
// Return size: 0
void fn0040126A()
fn0040126A_entry:
	// succ:  l0040126A
l0040126A:
	esp = fp
	esp = esp + 0x00000004
	esi = edx
	cl = al
	dl = dl + cl
	SCZO = cond(dl)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	dl = 0xDA
	ch = ch + bh
	SCZO = cond(ch)
	cl = cl + 0x01
	SZO = cond(cl)
	dh = dh + 0x01
	SZO = cond(dh)
	bl = bl + 0x7F
	SCZO = cond(bl)
	call fn00401119 (retsize: 4;)
	ah = ah - Mem0[esi:byte]
	SCZO = cond(ah)
	ebp = ebp + 0x00000001
	SZO = cond(ebp)
	v18 = Mem0[esi + 0x2A478EF5:word32] + ebp + C
	Mem0[esi + 0x2A478EF5:word32] = v18
	SCZO = cond(v18)
	// succ:  l00401288_thunk_fn0040128E
l00401288_thunk_fn0040128E:
	call fn0040128E (retsize: 0;)
	return
	// succ:  fn0040126A_exit
fn0040126A_exit:


// fn0040128E
// Return size: 0
void fn0040128E()
fn0040128E_entry:
	// succ:  l0040128E
l0040128E:
	esp = fp
	int3()
	ch = cl
	edi = edi | esi
	SZO = cond(edi)
	C = false
	bl = ~bl
	ch = ch + 0x39
	SCZO = cond(ch)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	call fn0040126A (retsize: 4;)
	goto l00401299_thunk_fn0040129E
	// succ:  l00401299_thunk_fn0040129E
l0040128E:
	ch = cl
	edi = edi | esi
	SZO = cond(edi)
	C = false
	bl = ~bl
	ch = ch + 0x39
	SCZO = cond(ch)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
l00401299_thunk_fn0040129E:
	call fn0040129E (retsize: 0;)
	return
	// succ:  fn0040128E_exit
fn0040128E_exit:


// fn0040129E
// Return size: 0
void fn0040129E()
fn0040129E_entry:
	// succ:  l0040129E
l0040129E:
	esp = fp
	__outdw(edx, eax)
	esi = esi + 0x00000004
	C = __das(al, &al)
l0040129E:
	__outdw(edx, eax)
	esi = esi + 0x00000004
	C = __das(al, &al)
fn0040129E_exit:


// fn004012A5
// Return size: 4
void fn004012A5()
fn004012A5_entry:
	// succ:  l004012A5
l004012A5:
	esp = fp
	Mem0[esp - 0x00000020:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx ^ ecx
	SZO = cond(edx)
	C = false
	edi = edi - esi
	SCZO = cond(edi)
	ecx = eax
	ebx = ebx + eax
	SCZO = cond(ebx)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ebx = ebx + edx
	SCZO = cond(ebx)
	edi = edi + eax
	SCZO = cond(edi)
	branch Test(ULT,C) l004012B6_thunk_fn004010AC
	goto l004012BC
	// succ:  l004012BC l004012B6_thunk_fn004010AC
l004012B6_thunk_fn004010AC:
	call fn004010AC (retsize: 4;)
	return
	// succ:  fn004012A5_exit
l004012BC:
	branch Test(NO,O) l004012BE
	// succ:  l004012BE
l004012BE:
	// succ:  l004012C4
l004012C4:
	branch Test(UGE,C) l004012C4_thunk_fn004010AC
	goto l004012CA
	// succ:  l004012CA l004012C4_thunk_fn004010AC
l004012C4_thunk_fn004010AC:
	call fn004010AC (retsize: 4;)
	return
	// succ:  fn004012A5_exit
l004012CA:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = 0x2E583288
	ch = ch & Mem0[edi + 0xD424448F:byte]
	SZO = cond(ch)
	C = false
	// succ:  l004012D0_thunk_fn004012D6
l004012D0_thunk_fn004012D6:
	call fn004012D6 (retsize: 0;)
	return
	// succ:  fn004012A5_exit
fn004012A5_exit:


// fn004012D2
// Return size: 0
void fn004012D2()
fn004012D2_entry:
	// succ:  l004012D2
l004012D2:
	esp = fp
	Mem0[esp - 0x0000002C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l004012D2_thunk_fn004012D6
l004012D2_thunk_fn004012D6:
	call fn004012D6 (retsize: 0;)
	return
	// succ:  fn004012D2_exit
l004012E7_thunk_fn00401044:
	call fn00401044 (retsize: 0;)
	return
	// succ:  fn004012D2_exit
l004012E7_thunk_fn004012ED:
	call fn004012ED (retsize: 0;)
	return
	// succ:  fn004012D2_exit l004012E7_thunk_fn004012ED
l004012E7_thunk_fn004012ED:
	call fn004012ED (retsize: 0;)
	return
	// succ:  fn004012D2_exit
fn004012D2_exit:


// fn004012D6
// Return size: 0
void fn004012D6()
fn004012D6_entry:
	// succ:  l004012D6
l004012D6:
	esp = fp
	edi = edi - eax
	SCZO = cond(edi)
	esi = esi + edi
	SCZO = cond(esi)
	edi = edi - 0x00000001
	SZO = cond(edi)
	edx = ebx
	edx = ecx
	esi = esi - ebx
	SCZO = cond(esi)
	edx = ecx
	edx = edx | eax
	SZO = cond(edx)
	C = false
	eax = Mem0[eax:word32]
	branch Test(SG,S) l004012E7_thunk_fn00401044
	// succ:  l004012E7_thunk_fn004012ED l004012E7_thunk_fn00401044 l004012E7_thunk_fn004012ED l004012E7_thunk_fn00401044
l004012D6:
	edi = edi - eax
	SCZO = cond(edi)
	esi = esi + edi
	SCZO = cond(esi)
	edi = edi - 0x00000001
	SZO = cond(edi)
	edx = ebx
	edx = ecx
	esi = esi - ebx
	SCZO = cond(esi)
	edx = ecx
	edx = edx | eax
	SZO = cond(edx)
	C = false
	eax = Mem0[eax:word32]
	branch Test(SG,S) l004012E7_thunk_fn00401044
l004012E7_thunk_fn00401044:
	call fn00401044 (retsize: 0;)
	return
	// succ:  fn004012D6_exit
l004012E7_thunk_fn004012ED:
	call fn004012ED (retsize: 0;)
	return
	// succ:  fn004012D6_exit
fn004012D6_exit:


// fn004012ED
// Return size: 0
void fn004012ED()
fn004012ED_entry:
	// succ:  l004012ED
l004012ED:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	branch Test(NS,S) l004012EF_thunk_fn00401044
	goto l004012F5
	// succ:  l004012F5 l004012EF_thunk_fn00401044
l004012EF_thunk_fn00401044:
	call fn00401044 (retsize: 0;)
	return
	// succ:  fn004012ED_exit
l004012F5:
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ah = FPUF
	eax = Mem0[0xFDC8FC2F:word32]
	// succ:  l004012F7_thunk_fn004012FC
l004012F7_thunk_fn004012FC:
	call fn004012FC (retsize: 0;)
	return
	// succ:  fn004012ED_exit
fn004012ED_exit:


// fn004012FC
// Return size: 0
void fn004012FC()
fn004012FC_entry:
	// succ:  l004012FC
l004012FC:
	esp = fp
	edi = edi + 0x00000001
	SZO = cond(edi)
	edx = edx + 0x00000001
	SZO = cond(edx)
	edx = edx + 0x00000001
	SZO = cond(edx)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	eax = eax + edi
	SCZO = cond(eax)
	edx = edx - 0x00000001
	SZO = cond(edx)
	esi = esi | eax
	SZO = cond(esi)
	C = false
	eax = eax + 0x00000001
	SZO = cond(eax)
	branch Test(LT,SO) l00401306_thunk_fn00401103
	goto l0040130C
	// succ:  l0040130C l00401306_thunk_fn00401103
l004012FC:
l00401306_thunk_fn00401103:
	call fn00401103 (retsize: 0;)
	return
	// succ:  fn004012FC_exit
l0040130C:
	ebx = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	branch Test(GE,SO) l00401310_thunk_fn00401103
	goto l00401316
	// succ:  l00401316 l00401310_thunk_fn00401103
l00401310_thunk_fn00401103:
	call fn00401103 (retsize: 0;)
	return
	// succ:  fn004012FC_exit
l00401316:
	Mem0[0xA89FF850:word32] = eax
	Mem0[edi:int32] = (int32) rArg0
	// succ:  l0040131B_thunk_fn0040131D
l0040131B_thunk_fn0040131D:
	call fn0040131D (retsize: 0;)
	return
	// succ:  fn004012FC_exit
fn004012FC_exit:


// fn0040131D
// Return size: 0
void fn0040131D()
fn0040131D_entry:
	// succ:  l0040131D
l0040131D:
	edx = edx + esi
	SCZO = cond(edx)
	edx = edx ^ edi
	SZO = cond(edx)
	C = false
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	ecx = esi
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	edx = edx - 0x00000001
	SZO = cond(edx)
	ecx = ecx | edi
	SZO = cond(ecx)
	C = false
	branch Test(LT,SO) l0040132B_thunk_fn0040108E
	goto l00401331
	// succ:  l00401331 l0040132B_thunk_fn0040108E
l0040132B_thunk_fn0040108E:
	call fn0040108E (retsize: 0;)
	return
	// succ:  fn0040131D_exit
l00401331:
fn0040131D_exit:


// fn00401342
// Return size: 0
void fn00401342()
fn00401342_entry:
	goto l00401342
	// succ:  l00401342
l0040128C:
	edi = edi + 0x00000001
	SZO = cond(edi)
	cl = cl - ah
	SCZO = cond(cl)
	call fn0040126A (retsize: 4;)
	// succ:  l0040128D_thunk_fn0040128E l00401299_thunk_fn0040129E
l0040128D_thunk_fn0040128E:
	call fn0040128E (retsize: 0;)
	return
	// succ:  fn00401342_exit
l00401299_thunk_fn0040129E:
	call fn0040129E (retsize: 0;)
	return
	// succ:  fn00401342_exit
l00401342:
	esi = esi ^ ecx
	SZO = cond(esi)
	C = false
	ebx = esi
	esi = esi - ecx
	SCZO = cond(esi)
	edi = edi ^ eax
	SZO = cond(edi)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	ecx = ecx - eax
	SCZO = cond(ecx)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	esi = esi | edx
	SZO = cond(esi)
	C = false
	ch = ch - ah
	SCZO = cond(ch)
	goto l0040128C
	// succ:  l0040128C
fn00401342_exit:


// fn00401FE8
// Return size: 0
void fn00401FE8()
fn00401FE8_entry:
	// succ:  l00401FE8
l00401FE8:
	esp = fp
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	eax = ecx
	bl = bl - cl
	SCZO = cond(bl)
	eax = esi
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
	bh = bh - cl
	SCZO = cond(bh)
	bh = ~bh
	ebx = ebx + edi
	SCZO = cond(ebx)
	goto l00402A12
	// succ:  l00402A12
l00401FE8:
l00402A12:
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	ebx = ebx + edi
	SCZO = cond(ebx)
	bl = ~bl
	ebx = esi
	bh = ~bh
	bh = ~bh
	bh = ~bh
	ebx = edx
	call fn00402E03 (retsize: 4;)
	ah = FPUF
	esi = esi - 0x00000001
	SZO = cond(esi)
	es_ebp = Mem0[esi + 0x00000000:segptr32]
	edx = edx - 0x00000001
	SZO = cond(edx)
	// succ:  l00402A2C_thunk_fn00402A2D
l00402A2C_thunk_fn00402A2D:
	call fn00402A2D (retsize: 0;)
	return
	// succ:  fn00401FE8_exit
fn00401FE8_exit:


// fn00402006
// Return size: 0
void fn00402006()
fn00402006_entry:
	// succ:  l00402006
l00402006:
	esp = fp
	bh = dh
	bh = bh - 0x3E - C
	SCZO = cond(bh)
	ebx = ebx ^ edi
	SZO = cond(ebx)
	C = false
	eax = eax + edx
	SCZO = cond(eax)
	esi = esi - 0x00000001
	SZO = cond(esi)
	edx = edx + 0x00000001
	SZO = cond(edx)
	call fn00402CA2 (retsize: 4;)
	esp = 0xFA1521D4
	v13 = Mem0[ebx + 0xFFD3F629:word32] - 0x00000001
	Mem0[ebx + 0xFFD3F629:word32] = v13
	SZO = cond(v13)
	goto l0040201B_thunk_fn00402021
	// succ:  l0040201B_thunk_fn00402021
l00402006:
l0040201B_thunk_fn00402021:
	call fn00402021 (retsize: 0;)
	return
	// succ:  fn00402006_exit
fn00402006_exit:


// fn0040201E
// Return size: 0
void fn0040201E()
fn0040201E_entry:
	// succ:  l0040201E
l0040201E:
	esp = fp
	bl = ~bl
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[eax + 0x00000010:word32]
	goto l00402020_thunk_fn00402021
	// succ:  l00402020_thunk_fn00402021
l0040201E:
l00402020_thunk_fn00402021:
	call fn00402021 (retsize: 0;)
	return
	// succ:  fn0040201E_exit
fn0040201E_exit:


// fn00402021
// Return size: 0
void fn00402021()
fn00402021_entry:
	// succ:  l00402021
l00402021:
	esp = fp
	branch Test(OV,O) l00402033
	goto l00402023
	// succ:  l00402023 l00402033
l00402021:
	bh = bh + 0xBF
	SCZO = cond(bh)
	edi = edi | esi
	SZO = cond(edi)
	C = false
	edi = edi + 0x00000001
	SZO = cond(edi)
	ebx = ebx + esi
	SCZO = cond(ebx)
	goto l0040202B_thunk_fn00402871
	// succ:  l0040202B_thunk_fn00402871
l00402023:
	bh = bh + 0xBF
	SCZO = cond(bh)
	edi = edi | esi
	SZO = cond(edi)
	C = false
	edi = edi + 0x00000001
	SZO = cond(edi)
	ebx = ebx + esi
	SCZO = cond(ebx)
	// succ:  l0040202B_thunk_fn00402871
l0040202B_thunk_fn00402871:
	call fn00402871 (retsize: 0;)
	return
	// succ:  fn00402021_exit
l0040202B_thunk_fn00402871:
	call fn00402871 (retsize: 0;)
	return
	// succ:  fn00402021_exit
l00402033:
	v12 = Mem0[ebx:word32] - ebp
	Mem0[ebx:word32] = v12
	SCZO = cond(v12)
	// succ:  l00402033_thunk_fn00402035
l00402033_thunk_fn00402035:
	call fn00402035 (retsize: 4;)
	return
	// succ:  fn00402021_exit
fn00402021_exit:


// fn00402034
// Return size: 0
void fn00402034()
fn00402034_entry:
	// succ:  l00402034
l00402034:
	esp = fp
	eax = eax - edx
	SCZO = cond(eax)
	goto l00402034_thunk_fn00402035
	// succ:  l00402034_thunk_fn00402035
l00402034:
l00402034_thunk_fn00402035:
	call fn00402035 (retsize: 4;)
	return
	// succ:  fn00402034_exit
fn00402034_exit:


// fn00402035
// Return size: 4
void fn00402035()
fn00402035_entry:
	// succ:  l00402035
l00402035:
	esp = fp
	return
	// succ:  fn00402035_exit
l00402035:
	eax = eax + 0x00000001
	SZO = cond(eax)
	al = dh
	dh = 0x7C
	dl = dl + dh
	SCZO = cond(dl)
	esi = esi ^ 0xE8B295CB
	SZO = cond(esi)
	C = false
	bl = bl - 0x39 - C
	SCZO = cond(bl)
	edx = edx ^ ebx
	SZO = cond(edx)
	C = false
	al = al + 0x84
	SCZO = cond(al)
	call fn00402CF6 (retsize: 4;)
	SCZO = ah
	Mem0[edi:word32] = eax
	edi = edi + 0x00000004
	ecx = ecx - Mem0[edi + 0x0000000F:word32] - C
	SCZO = cond(ecx)
	// succ:  l00402052_thunk_fn00402055
l00402052_thunk_fn00402055:
	call fn00402055 (retsize: 0;)
	return
	// succ:  fn00402035_exit
fn00402035_exit:


// fn00402055
// Return size: 0
void fn00402055()
fn00402055_entry:
	// succ:  l00402055
l00402055:
	esp = fp
	eax = eax | edx
	SZO = cond(eax)
	C = false
	eax = eax ^ ecx
	SZO = cond(eax)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bh = bh - ah
	SCZO = cond(bh)
	bl = 0xFD
	ah = ah | bl
	SZO = cond(ah)
	C = false
	branch Test(ULT,C) l00402060_thunk_fn0040210B
	goto l00402066
	// succ:  l00402066 l00402060_thunk_fn0040210B
l00402055:
l00402060_thunk_fn0040210B:
	call fn0040210B (retsize: 0;)
	return
	// succ:  fn00402055_exit
l00402066:
	ebx = ebx
	branch Test(UGE,C) l00402068_thunk_fn0040210B
	goto l0040206E
	// succ:  l0040206E l00402068_thunk_fn0040210B
l00402068_thunk_fn0040210B:
	call fn0040210B (retsize: 0;)
	return
	// succ:  fn00402055_exit
l0040206E:
	SCZO = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00402055_exit
fn00402055_exit:


// fn00402072
// Return size: 0
void fn00402072()
fn00402072_entry:
	// succ:  l00402072
l00402072:
	esi = esi | edi
	SZO = cond(esi)
	C = false
	bl = bl + 0xF0
	SCZO = cond(bl)
	bl = bl + 0x01
	SZO = cond(bl)
	bl = dl
	bh = bh + dl
	SCZO = cond(bh)
	bl = bl + 0xD8 + C
	SCZO = cond(bl)
	esi = esi + 0x00000001
	SZO = cond(esi)
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	bl = bl - 0x73 - C
	SCZO = cond(bl)
	branch Test(ULE,CZ) l00402086_thunk_fn00402CBD
	goto l0040208C
	// succ:  l0040208C l00402086_thunk_fn00402CBD
l00402086_thunk_fn00402CBD:
	call fn00402CBD (retsize: 0;)
	return
	// succ:  fn00402072_exit
l0040208C:
	dh = dh
fn00402072_exit:


// fn00402095
// Return size: 0
void fn00402095()
fn00402095_entry:
	// succ:  l00402095
l00402095:
	esp = fp
	eax = eax ^ 0x799CB338
	SZO = cond(eax)
	C = false
	ch = ch + Mem0[ebx:byte]
	SCZO = cond(ch)
	goto l0040209A_thunk_fn0040209C
	// succ:  l0040209A_thunk_fn0040209C
l00402095:
l0040209A_thunk_fn0040209C:
	call fn0040209C (retsize: 0;)
	return
	// succ:  fn00402095_exit
fn00402095_exit:


// fn0040209B
// Return size: 0
void fn0040209B()
fn0040209B_entry:
	// succ:  l0040209B
l0040209B:
	esp = fp
	eax = eax - edi
	SCZO = cond(eax)
	goto l0040209B_thunk_fn0040209C
	// succ:  l0040209B_thunk_fn0040209C
l0040209B:
l0040209B_thunk_fn0040209C:
	call fn0040209C (retsize: 0;)
	return
	// succ:  fn0040209B_exit
fn0040209B_exit:


// fn0040209C
// Return size: 0
void fn0040209C()
fn0040209C_entry:
	// succ:  l0040209C
l0040209C:
	esp = fp
	Mem0[edx + 0x80FA8AD6:word32] = 0xDB80B0C4
	branch ecx == 0x00000000 l004020A6_thunk_fn004020DB
	goto l004020A8
	// succ:  l004020A8 l004020A6_thunk_fn004020DB
l0040209C:
	dl = dh
	bh = dl
	ah = ah + 0xB0
	SCZO = cond(ah)
	bl = bl - 0xE3 - C
	SCZO = cond(bl)
	eax = eax ^ ebx
	SZO = cond(eax)
	C = false
	bl = bl + 0x01
	SZO = cond(bl)
	goto l004020AB_thunk_fn00402D8C
	// succ:  l004020AB_thunk_fn00402D8C
l004020A6_thunk_fn004020DB:
	call fn004020DB (retsize: 0;)
	return
	// succ:  fn0040209C_exit
l004020A8:
	return
	// succ:  fn0040209C_exit
l004020AB_thunk_fn00402D8C:
	call fn00402D8C (retsize: 0;)
	return
	// succ:  fn0040209C_exit
fn0040209C_exit:


// fn004020D3
// Return size: 0
void fn004020D3()
fn004020D3_entry:
	// succ:  l004020D3
l004020D3:
	bh = bh | bl
	SZO = cond(bh)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	// succ:  l004020D5_thunk_fn004020D6
l004020D5_thunk_fn004020D6:
	call fn004020D6 (retsize: 0;)
	return
	// succ:  fn004020D3_exit
fn004020D3_exit:


// fn004020D6
// Return size: 0
void fn004020D6()
fn004020D6_entry:
	// succ:  l004020D6
l004020D6:
	esp = fp
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	eax = eax + 0x00000001
	SZO = cond(eax)
	ah = ah + cl
	SCZO = cond(ah)
	al = al - 0x01
	SZO = cond(al)
	goto l004020DA_thunk_fn004020DB
	// succ:  l004020DA_thunk_fn004020DB
l004020D6:
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	eax = eax + 0x00000001
	SZO = cond(eax)
	ah = ah + cl
	SCZO = cond(ah)
	al = al - 0x01
	SZO = cond(al)
	eax = eax + 0x00000001
	SZO = cond(eax)
	eax = eax - 0x00000001
	SZO = cond(eax)
l004020DA_thunk_fn004020DB:
	call fn004020DB (retsize: 0;)
	return
	// succ:  fn004020D6_exit
l004020E8_thunk_fn00402095:
	call fn00402095 (retsize: 0;)
	return
	// succ:  fn004020D6_exit
l004020E8_thunk_fn004020EA:
	call fn004020EA (retsize: 0;)
	return
	// succ:  fn004020D6_exit l004020E8_thunk_fn004020EA
l004020E8_thunk_fn004020EA:
	call fn004020EA (retsize: 0;)
	return
	// succ:  fn004020D6_exit
fn004020D6_exit:


// fn004020DB
// Return size: 0
void fn004020DB()
fn004020DB_entry:
	// succ:  l004020DB
l004020DB:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	esp = esp - 0x000047E0
	v4 = Mem0[esi:word32]
	Mem0[edi:word32] = v4
	esi = esi + 0x00000004
	edi = edi + 0x00000004
	es = Mem0[esp:selector]
	esp = esp + 0x00000002
	v10 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v10
	SCZO = cond(v10)
	SZO = cond(Mem0[edx + 0x0000001D:byte] & dl)
	C = false
	edx_eax = (int64) eax
	edx = edx + 0x00000001
	SZO = cond(edx)
	branch Test(GE,SO) l004020E8_thunk_fn00402095
	// succ:  l004020E8_thunk_fn004020EA l004020E8_thunk_fn00402095 l004020E8_thunk_fn004020EA l004020E8_thunk_fn00402095
l004020DB:
	eax = eax + 0x00000001
	SZO = cond(eax)
	eax = eax - 0x00000001
	SZO = cond(eax)
	call fn00402888 (retsize: 4;)
	SZO = cond(Mem0[edx + 0x0000001D:byte] & dl)
	C = false
	edx_eax = (int64) eax
	edx = edx + 0x00000001
	SZO = cond(edx)
	branch Test(GE,SO) l004020E8_thunk_fn00402095
l004020E8_thunk_fn00402095:
	call fn00402095 (retsize: 0;)
	return
	// succ:  fn004020DB_exit
l004020E8_thunk_fn004020EA:
	call fn004020EA (retsize: 0;)
	return
	// succ:  fn004020DB_exit
fn004020DB_exit:


// fn004020EA
// Return size: 0
void fn004020EA()
fn004020EA_entry:
	// succ:  l004020EA
l004020EA:
	esp = esp - 0x00000004
	Mem0[esp:word32] = cs
	// succ:  l004020EA_thunk_fn004020EB
l004020EA_thunk_fn004020EB:
	call fn004020EB (retsize: 0;)
	return
	// succ:  fn004020EA_exit
fn004020EA_exit:


// fn004020EB
// Return size: 0
void fn004020EB()
fn004020EB_entry:
	// succ:  l004020EB
l004020EB:
	esp = fp
	Mem0[esp - 0x00000024:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	cl = al
	esi = esi + 0x00000001
	SZO = cond(esi)
	dh = dh ^ bl
	SZO = cond(dh)
	C = false
	ch = ch + 0xF2
	SCZO = cond(ch)
	cl = cl + 0xB6 + C
	SCZO = cond(cl)
	eax = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000040
fn004020EB_exit:


// fn0040210B
// Return size: 0
void fn0040210B()
fn0040210B_entry:
	// succ:  l0040210B
l0040210B:
	esp = fp
	ah = ~ah
	bh = 0x36
	eax = eax ^ ebx
	SZO = cond(eax)
	C = false
	bh = bh - 0x05 - C
	SCZO = cond(bh)
	al = ~al
	bl = cl
	goto l00402118_thunk_fn004021C1
	// succ:  l00402118_thunk_fn004021C1
l0040210B:
l00402118_thunk_fn004021C1:
	call fn004021C1 (retsize: 0;)
	return
	// succ:  fn0040210B_exit
fn0040210B_exit:


// fn00402124
// Return size: 0
void fn00402124()
fn00402124_entry:
	// succ:  l00402124
l00402124:
	esi = esi ^ edi
	SZO = cond(esi)
	C = false
	cl = dl
	call eax (retsize: 4;)
	ch = ch ^ dh
	SZO = cond(ch)
	C = false
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	edi = edi + 0x00000001
	SZO = cond(edi)
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	esi = esi | eax
	SZO = cond(esi)
	C = false
	branch Test(LT,SO) l00402133_thunk_fn00402790
	goto l00402139
	// succ:  l00402139 l00402133_thunk_fn00402790
l00402133_thunk_fn00402790:
	call fn00402790 (retsize: 0;)
	return
	// succ:  fn00402124_exit
l00402139:
fn00402124_exit:


// fn00402148
// Return size: 0
void fn00402148()
fn00402148_entry:
	// succ:  l00402148
l00402148:
	bl = bl ^ dl
	SZO = cond(bl)
	C = false
	ecx = ecx >>u 0x0000000F
	SCZO = cond(ecx)
	eax = eax | edx
	SZO = cond(eax)
	C = false
	dl = dl | ah
	SZO = cond(dl)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bh = bh - 0xB3 - C
	SCZO = cond(bh)
	bl = bl + 0x01
	SZO = cond(bl)
	branch Test(PE,P) l004023E6_in_fn00402148
	// succ:  l0040215D l004023E6_in_fn00402148
l0040215D:
	branch Test(NO,O) l0040215F
	// succ:  l0040215F
l0040215F:
l004023E6_in_fn00402148:
	dl = dl + 0x01
	SZO = cond(dl)
	eax = esi
	edx = edx - 0x00000001
	SZO = cond(edx)
	bl = bl - ch
	SCZO = cond(bl)
	bl = dl
	call fn004026F6 (retsize: 4;)
	eax = eax + 0xD28778CE
	SCZO = cond(eax)
	return
	// succ:  fn00402148_exit
fn00402148_exit:


// fn0040216E
// Return size: 0
void fn0040216E()
fn0040216E_entry:
	// succ:  l0040216E
l0040216E:
	esp = fp
	esp = esp + 0x00000004
	bh = bh | ah
	SZO = cond(bh)
	C = false
	bh = bh - ah
	SCZO = cond(bh)
	ah = -ah
	SCZO = cond(ah)
	C = ah == 0x00
	dh = dh ^ ch
	SZO = cond(dh)
	C = false
	al = al | cl
	SZO = cond(al)
	C = false
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	// succ:  l0040217C_thunk_fn0040217E
l0040217C_thunk_fn0040217E:
	call fn0040217E (retsize: 0;)
	return
	// succ:  fn0040216E_exit
fn0040216E_exit:


// fn0040217E
// Return size: 0
void fn0040217E()
fn0040217E_entry:
	// succ:  l0040217E
l0040217E:
	esp = fp
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	eax = eax ^ edx
	SZO = cond(eax)
	C = false
	branch Test(OV,O) l00402181_thunk_fn00402E48
	goto l00402181_thunk_fn00402187
	// succ:  l00402181_thunk_fn00402187 l00402181_thunk_fn00402E48
l0040217E:
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	eax = eax ^ edx
	SZO = cond(eax)
	C = false
	branch Test(OV,O) l00402181_thunk_fn00402E48
	goto l00402181_thunk_fn00402187
	// succ:  l00402181_thunk_fn00402187 l00402181_thunk_fn00402E48
l00402181_thunk_fn00402187:
	call fn00402187 (retsize: 0;)
	return
	// succ:  fn0040217E_exit l00402181_thunk_fn00402187
l00402181_thunk_fn00402187:
	call fn00402187 (retsize: 0;)
	return
	// succ:  fn0040217E_exit
l00402181_thunk_fn00402187:
	call fn00402187 (retsize: 0;)
	return
	// succ:  fn0040217E_exit
l00402181_thunk_fn00402E48:
	call fn00402E48 (retsize: 0;)
	return
	// succ:  fn0040217E_exit
l00402181_thunk_fn00402E48:
	call fn00402E48 (retsize: 0;)
	return
	// succ:  fn0040217E_exit
fn0040217E_exit:


// fn00402187
// Return size: 0
void fn00402187()
fn00402187_entry:
	// succ:  l00402187
l00402187:
	// succ:  l0040218D
l0040218D:
	dx = dx
	branch Test(NO,O) l00402190_thunk_fn00402E48
	goto l00402196
	// succ:  l00402196 l00402190_thunk_fn00402E48
l00402190_thunk_fn00402E48:
	call fn00402E48 (retsize: 0;)
	return
	// succ:  fn00402187_exit
l00402196:
	eax = (int32) ax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	eax = Mem0[0x2BCF8ACA:word32]
	goto l0040219A
	// succ:  l0040219A
fn00402187_exit:


// fn0040219A
// Return size: 0
void fn0040219A()
fn0040219A_entry:
	// succ:  l0040219A
l0040219A:
	cl = bh
	edi = edi - ecx
	SCZO = cond(edi)
	bh = dl
	ch = ch + al
	SCZO = cond(ch)
	edi = edi ^ eax
	SZO = cond(edi)
	C = false
	bh = bh | ah
	SZO = cond(bh)
	C = false
	edi = edx
	dh = 0x84
	branch Test(PE,P) l004021AA_thunk_fn00402C61
	goto l004021B0
	// succ:  l004021B0 l004021AA_thunk_fn00402C61
l004021AA_thunk_fn00402C61:
	call fn00402C61 (retsize: 0;)
	return
	// succ:  fn0040219A_exit
l004021B0:
	branch Test(LE,SZO) l004021B2
	// succ:  l004021B2
l004021B2:
fn0040219A_exit:


// fn004021C1
// Return size: 0
void fn004021C1()
fn004021C1_entry:
	// succ:  l004021C1
l004021C1:
	esp = fp
	bl = al
	ah = ah + cl
	SCZO = cond(ah)
	edi = edi + 0x00000001
	SZO = cond(edi)
	eax = eax + ebx
	SCZO = cond(eax)
	ah = ah - 0xFC - C
	SCZO = cond(ah)
	ebx = ebx + esi
	SCZO = cond(ebx)
	goto l004021CD_thunk_fn00402765
	// succ:  l004021CD_thunk_fn00402765
l004021C1:
l004021CD_thunk_fn00402765:
	call fn00402765 (retsize: 0;)
	return
	// succ:  fn004021C1_exit
fn004021C1_exit:


// fn004021DA
// Return size: 0
void fn004021DA()
fn004021DA_entry:
	// succ:  l004021DA
l004021DA:
	esp = fp
	esp = esp + 0x00000004
	edx = edx | ebx
	SZO = cond(edx)
	C = false
	ebx = ebx ^ ecx
	SZO = cond(ebx)
	C = false
	ecx = eax
	al = al | ah
	SZO = cond(al)
	C = false
	eax = eax + edx
	SCZO = cond(eax)
	al = ~al
	ebx = edx
	ah = ch
	branch Test(LE,SZO) l004021EE_thunk_fn00402006
	goto l004021F4
	// succ:  l004021F4 l004021EE_thunk_fn00402006
l004021EE_thunk_fn00402006:
	call fn00402006 (retsize: 0;)
	return
	// succ:  fn004021DA_exit
l004021F4:
	branch Test(UGE,C) l004021F6
	// succ:  l004021F6
l004021F6:
	branch Test(GT,SZO) l004021F6_thunk_fn00402006
	goto l004021FC
	// succ:  l004021FC l004021F6_thunk_fn00402006
l004021F6_thunk_fn00402006:
	call fn00402006 (retsize: 0;)
	return
	// succ:  fn004021DA_exit
l004021FC:
	ecx = Mem0[gs:ebx:word32] *s 0x0000006B
	SCZO = cond(ecx)
	// succ:  l004021FC_thunk_fn00402200
l004021FC_thunk_fn00402200:
	call fn00402200 (retsize: 0;)
	return
	// succ:  fn004021DA_exit
fn004021DA_exit:


// fn00402200
// Return size: 0
void fn00402200()
fn00402200_entry:
	// succ:  l00402200
l00402200:
	esp = fp
	esi = esi + edx
	SCZO = cond(esi)
	esi = esi + 0x00000001
	SZO = cond(esi)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	bh = bh - 0x01
	SZO = cond(bh)
	ah = ah - 0x01
	SZO = cond(ah)
	eax = eax | ecx
	SZO = cond(eax)
	C = false
	dl = dl - al
	SCZO = cond(dl)
	dh = dh + bh
	SCZO = cond(dh)
	call fn00402DA9 (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	rArg0 = rArg0 * Mem0[edx + 0xD8322559:real32]
	goto l00402214_thunk_fn0040221A
	// succ:  l00402214_thunk_fn0040221A
l00402200:
l00402214_thunk_fn0040221A:
	call fn0040221A (retsize: 0;)
	return
	// succ:  fn00402200_exit
fn00402200_exit:


// fn00402218
// Return size: 0
void fn00402218()
fn00402218_entry:
	// succ:  l00402218
l00402218:
	esp = fp
	bl = bl ^ al
	SZO = cond(bl)
	C = false
	goto l00402218_thunk_fn0040221A
	// succ:  l00402218_thunk_fn0040221A
l00402218:
l00402218_thunk_fn0040221A:
	call fn0040221A (retsize: 0;)
	return
	// succ:  fn00402218_exit
fn00402218_exit:


// fn0040221A
// Return size: 0
void fn0040221A()
fn0040221A_entry:
	// succ:  l0040221A
l0040221A:
	esp = fp
	bh = ~bh
	bh = bh - 0x01
	SZO = cond(bh)
	bl = bl + al
	SCZO = cond(bl)
	bh = bh + dh
	SCZO = cond(bh)
	edi = edi + 0x00000001
	SZO = cond(edi)
	ebx = (word32) ah
	edi = edi | ecx
	SZO = cond(edi)
	C = false
	call fn00402A51 (retsize: 4;)
	al = Mem0[esi:byte]
	esi = esi + 0x00000001
l0040221A:
	bh = ~bh
	bh = bh - 0x01
	SZO = cond(bh)
	bl = bl + al
	SCZO = cond(bl)
	bh = bh + dh
	SCZO = cond(bh)
	edi = edi + 0x00000001
	SZO = cond(edi)
	ebx = (word32) ah
	edi = edi | ecx
	SZO = cond(edi)
	C = false
fn0040221A_exit:


// fn00402235
// Return size: 6
void fn00402235()
fn00402235_entry:
	// succ:  l00402235
l00402235:
	esp = fp
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bh = 0xA4
	bl = bl + 0x7C + C
	SCZO = cond(bl)
	bl = bl | cl
	SZO = cond(bl)
	C = false
	bh = bh + 0x01
	SZO = cond(bh)
	ebx = ebx - eax
	SCZO = cond(ebx)
	branch Test(LT,SO) l00402241_thunk_fn00402676
	goto l00402247
	// succ:  l00402247 l00402241_thunk_fn00402676
l00402235:
l00402241_thunk_fn00402676:
	call fn00402676 (retsize: 6;)
	return
	// succ:  fn00402235_exit
l00402247:
	v12 = ecx
	ecx = ecx
	ecx = v12
	branch Test(GE,SO) l00402249_thunk_fn00402676
	goto l0040224F
	// succ:  l0040224F l00402249_thunk_fn00402676
l00402249_thunk_fn00402676:
	call fn00402676 (retsize: 6;)
	return
	// succ:  fn00402235_exit
l0040224F:
	ebx = ebp *s 0x97EA5345
	SCZO = cond(ebx)
	__hlt()
fn00402235_exit:


// fn00402257
// Return size: 0
void fn00402257()
fn00402257_entry:
	// succ:  l00402257
l00402257:
	esp = fp
	edi = ebx
	esi = esi - edi
	SCZO = cond(esi)
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	bl = dl
	bl = bl - cl
	SCZO = cond(bl)
	ebx = ebx | eax
	SZO = cond(ebx)
	C = false
	goto l0040294C
	// succ:  l0040294C
l00402257:
l0040294C:
	edi = edi + ebx
	SCZO = cond(edi)
	edi = edi - 0x00000001
	SZO = cond(edi)
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	// succ:  l0040294F_thunk_fn00402951
l0040294F_thunk_fn00402951:
	call fn00402951 (retsize: 0;)
	return
	// succ:  fn00402257_exit
l00402A75_thunk_fn00402235:
	call fn00402235 (retsize: 6;)
	return
	// succ:  fn00402257_exit
fn00402257_exit:


// fn00402271
// Return size: 0
void fn00402271()
fn00402271_entry:
	goto l00402271
	// succ:  l00402271
l0040226A:
	rArg0 = rArg0 + (real64) Mem0[edx + 0x00000039:word16]
	ecx = 0x437022F6
	goto l00402272
	// succ:  l00402272
l00402271:
	esp = fp
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	goto l00402272
	// succ:  l00402272
l00402271:
l00402272:
	bh = bh ^ bl
	SZO = cond(bh)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	bh = bh | dl
	SZO = cond(bh)
	C = false
	ebx = ebx - eax
	SCZO = cond(ebx)
	bh = bh + 0x01
	SZO = cond(bh)
	esi = edx
	call fn00402453 (retsize: 4;)
	branch Test(EQ,Z) l0040226A
	// succ:  l00402284 l0040226A
l00402284:
	cl = cl ^ Mem0[esi - 0x00000003:byte]
	SZO = cond(cl)
	C = false
	SCZO = cond(Mem0[esi:word32] - Mem0[edi:word32])
	esi = esi + 0x00000004
	edi = edi + 0x00000004
	SZO = cond(Mem0[ebx - 0x00000071:word32] & esi)
	C = false
	// succ:  l00402288_thunk_fn0040228B
l00402288_thunk_fn0040228B:
	call fn0040228B (retsize: 0;)
	return
	// succ:  fn00402271_exit
fn00402271_exit:


// fn0040228A
// Return size: 0
void fn0040228A()
fn0040228A_entry:
	// succ:  l0040228A
l0040228A:
	esp = fp
	Mem0[esp - 0x0000000C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l0040228A_thunk_fn0040228B
l0040228A_thunk_fn0040228B:
	call fn0040228B (retsize: 0;)
	return
	// succ:  fn0040228A_exit
fn0040228A_exit:


// fn0040228B
// Return size: 0
void fn0040228B()
fn0040228B_entry:
	// succ:  l0040228B
l0040228B:
	esp = fp
	esp = esp + 0x00000001
	SZO = cond(esp)
	al = al & 0xF4
	SZO = cond(al)
	C = false
	edi = esi
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bl = bl + 0xDD + C
	SCZO = cond(bl)
	edx = eax + 0x000000F8
	bh = ~bh
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	goto l0040229D_thunk_fn00402072
	// succ:  l0040229D_thunk_fn00402072
l0040228B:
	edi = esi
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bl = bl + 0xDD + C
	SCZO = cond(bl)
	edx = eax + 0x000000F8
	bh = ~bh
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	// succ:  l00402299_thunk_fn00402072
l00402299_thunk_fn00402072:
	call fn00402072 (retsize: 0;)
	return
	// succ:  fn0040228B_exit
l0040229D_thunk_fn00402072:
	call fn00402072 (retsize: 0;)
	return
	// succ:  fn0040228B_exit
fn0040228B_exit:


// fn004022A6
// Return size: 4
void fn004022A6()
fn004022A6_entry:
	// succ:  l004022A6
l004022A6:
	esp = fp
	dl = al
	eax = eax - edx
	SCZO = cond(eax)
	bh = bh + 0xC1
	SCZO = cond(bh)
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	bl = bl + 0x77
	SCZO = cond(bl)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	esi = 0xE8B2994F
	eax = eax ^ ecx
	SZO = cond(eax)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	al = al - ah
	SCZO = cond(al)
	call fn0040296D (retsize: 4;)
	rLoc1 = (real64) Mem0[ebp + 0x482E99D4:int32]
	v18 = eax
	eax = ebx
	ebx = v18
	ecx = 0xD902008B
	bl = ~bl
	esi = esi - edx
	SCZO = cond(esi)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ebx = ebx - edi
	SCZO = cond(ebx)
	call fn00402AF5 (retsize: 4; FPU: 1;)
	return
	// succ:  fn004022A6_exit
l004022A6:
fn004022A6_exit:


// fn004022E3
// Return size: 0
void fn004022E3()
fn004022E3_entry:
	// succ:  l004022E3
l004022E3:
	dh = dh | ch
	SZO = cond(dh)
	C = false
	ah = ah + 0xD2
	SCZO = cond(ah)
	dh = dh - 0x8C - C
	SCZO = cond(dh)
	edx = edx - 0x00000001
	SZO = cond(edx)
	ah = ah - bh
	SCZO = cond(ah)
	bh = ~bh
	branch Test(LT,SO) l004022F0_thunk_fn00402B1C
	goto l004022F6
	// succ:  l004022F6 l004022F0_thunk_fn00402B1C
l004022F0_thunk_fn00402B1C:
	call fn00402B1C (retsize: 0;)
	return
	// succ:  fn004022E3_exit
l004022F6:
	ecx = ecx
	branch Test(GE,SO) l004022F8_thunk_fn00402B1C
	goto l004022FE
	// succ:  l004022FE l004022F8_thunk_fn00402B1C
l004022F8_thunk_fn00402B1C:
	call fn00402B1C (retsize: 0;)
	return
	// succ:  fn004022E3_exit
l004022FE:
	ds_edi = Mem0[eax + 0xCA2DC9D6:segptr32]
	esi = esi | eax
	SZO = cond(esi)
	C = false
	al = al - 0x01
	SZO = cond(al)
	al = al - 0xC9 - C
	SCZO = cond(al)
	bl = bl ^ dl
	SZO = cond(bl)
	C = false
	bl = 0xC1
	esi = esi + edx
	SCZO = cond(esi)
	ebx = ebx - ecx
	SCZO = cond(ebx)
	ah = ah + 0x01
	SZO = cond(ah)
	al = al ^ dl
	SZO = cond(al)
	C = false
	bh = bh - 0xCA - C
	SCZO = cond(bh)
	goto l00402C37
	// succ:  l00402C37
l00402484:
	bl = bl - 0x01
	SZO = cond(bl)
	dl = dl - bl
	SCZO = cond(dl)
	edi = edi | ecx
	SZO = cond(edi)
	C = false
	dh = dh + al
	SCZO = cond(dh)
	dh = dh - al
	SCZO = cond(dh)
	bl = bl - 0xB9 - C
	SCZO = cond(bl)
	dh = dh ^ ah
	SZO = cond(dh)
	C = false
	call fn00402323 (retsize: 4;)
	v25 = Mem0[ebp + 0x00000003:word32] | ecx
	Mem0[ebp + 0x00000003:word32] = v25
	SZO = cond(Mem0[ebp + 0x00000003:word32])
	C = false
	goto lF7151AE8
	// succ:  lF7151AE8
l00402C37:
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	edi = edx
	bl = bl ^ dh
	SZO = cond(bl)
	C = false
	dl = 0xFD
	al = ~al
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[ecx:word32]
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	eax = eax ^ esi
	SZO = cond(eax)
	C = false
	ah = ah + 0xFD + C
	SCZO = cond(ah)
	branch Test(EQ,Z) l00402484
	// succ:  l00402C4F l00402484
l00402C4F:
	si = esi
lF7151AE8:
fn004022E3_exit:


// fn00402323
// Return size: 0
void fn00402323()
fn00402323_entry:
	// succ:  l00402323
l00402323:
	esp = fp
	Mem0[esp - 0x0000000C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ah = ah + 0x01
	SZO = cond(ah)
	bl = bl + 0xD0 + C
	SCZO = cond(bl)
	dh = dh + ch
	SCZO = cond(dh)
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = esi
	dh = dh - 0x01
	SZO = cond(dh)
	edi = ecx
	// succ:  l00402335_thunk_fn004024AF
l00402335_thunk_fn004024AF:
	call fn004024AF (retsize: 0;)
	return
	// succ:  fn00402323_exit
fn00402323_exit:


// fn00402359
// Return size: 0
void fn00402359()
fn00402359_entry:
	// succ:  l00402359
l00402359:
	esp = fp
	eax = eax + ecx
	SCZO = cond(eax)
	bh = ~bh
	bl = ~bl
	bl = bl + 0x71 + C
	SCZO = cond(bl)
	bh = bh - 0x9D - C
	SCZO = cond(bh)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edi = edi - esi
	SCZO = cond(edi)
	bl = bh
	goto l0040236A_thunk_fn00402B39
	// succ:  l0040236A_thunk_fn00402B39
l00402359:
	bh = ~bh
	bl = ~bl
	bl = bl + 0x71 + C
	SCZO = cond(bl)
	bh = bh - 0x9D - C
	SCZO = cond(bh)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edi = edi - esi
	SCZO = cond(edi)
	bl = bh
	goto l0040236A_thunk_fn00402B39
	// succ:  l0040236A_thunk_fn00402B39
l0040236A_thunk_fn00402B39:
	call fn00402B39 (retsize: 0;)
	return
	// succ:  fn00402359_exit
l0040236A_thunk_fn00402B39:
	call fn00402B39 (retsize: 0;)
	return
	// succ:  fn00402359_exit
fn00402359_exit:


// fn0040239F
// Return size: 4
void fn0040239F()
fn0040239F_entry:
	// succ:  l0040239F
l0040239F:
	Mem0[esp:word32] = ecx
	// succ:  l004023A7
l004023A7:
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = bl - dl
	SCZO = cond(bl)
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	bh = bh - al
	SCZO = cond(bh)
	ebx = ebx ^ ecx
	SZO = cond(ebx)
	C = false
	goto l00402568
	// succ:  l00402568
l004023BD:
	cl = cl + bh
	SCZO = cond(cl)
	ecx = ecx - edi
	SCZO = cond(ecx)
	dh = dh ^ dl
	SZO = cond(dh)
	C = false
	// succ:  l004023C1_thunk_fn004023C3
l004023C1_thunk_fn004023C3:
	call fn004023C3 (retsize: 0;)
	return
	// succ:  fn0040239F_exit
l00402568:
	ebx = ebx + ecx
	SCZO = cond(ebx)
	ch = ch - 0x99 - C
	SCZO = cond(ch)
	dl = dl ^ ch
	SZO = cond(dl)
	C = false
	edi = eax
	dl = dl - 0x01
	SZO = cond(dl)
	dl = 0xFB
	al = al - 0x01
	SZO = cond(al)
	eax = eax | edx
	SZO = cond(eax)
	C = false
	dl = 0x72
	branch Test(OV,O) l004028B0
	// succ:  l00402581 l004028B0
l00402581:
l004028B0:
	dh = dh | ch
	SZO = cond(dh)
	C = false
	edi = edi ^ esi
	SZO = cond(edi)
	C = false
	cl = cl - 0x01
	SZO = cond(cl)
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	bh = 0x2B
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	dl = cl
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00003000
	ch = 0xB7
	dh = dh - 0x01
	SZO = cond(dh)
	goto l004023BD
	// succ:  l004023BD
fn0040239F_exit:


// fn004023C3
// Return size: 0
void fn004023C3()
fn004023C3_entry:
	// succ:  l004023C3
l004023C3:
	esp = fp
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	ecx = ecx - edx
	SCZO = cond(ecx)
	bl = bl ^ ah
	SZO = cond(bl)
	C = false
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	eax = eax ^ esi
	SZO = cond(eax)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	ch = ch - bl
	SCZO = cond(ch)
	branch Test(PE,P) l004023D0_thunk_fn0040251B
	goto l004023D0_thunk_fn004023D6
	// succ:  l004023D0_thunk_fn004023D6 l004023D0_thunk_fn0040251B
l004023C3:
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	ecx = ecx - edx
	SCZO = cond(ecx)
	bl = bl ^ ah
	SZO = cond(bl)
	C = false
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	eax = eax ^ esi
	SZO = cond(eax)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	ch = ch - bl
	SCZO = cond(ch)
	branch Test(PE,P) l0040251B
	goto l004023D0_thunk_fn004023D6
	// succ:  l004023D0_thunk_fn004023D6 l004023D0_thunk_fn0040251B
l004023D0_thunk_fn004023D6:
	call fn004023D6 (retsize: 0;)
	return
	// succ:  fn004023C3_exit l004023D0_thunk_fn004023D6
l004023D0_thunk_fn004023D6:
	call fn004023D6 (retsize: 0;)
	return
	// succ:  fn004023C3_exit
l004023D0_thunk_fn004023D6:
	call fn004023D6 (retsize: 0;)
	return
	// succ:  fn004023C3_exit
l004023D0_thunk_fn0040251B:
	call fn0040251B (retsize: 0;)
	return
	// succ:  fn004023C3_exit
l004023D0_thunk_fn0040251B:
	call fn0040251B (retsize: 0;)
	return
	// succ:  fn004023C3_exit
fn004023C3_exit:


// fn004023D6
// Return size: 0
void fn004023D6()
fn004023D6_entry:
	// succ:  l004023D6
l004023D6:
	esi = esi
	branch Test(PO,P) l0040251B
	goto l004023DE
	// succ:  l004023DE l004023D8_thunk_fn0040251B
l004023D8_thunk_fn0040251B:
	call fn0040251B (retsize: 0;)
	return
	// succ:  fn004023D6_exit
l004023DE:
	es = Mem0[esp:selector]
	esp = esp + 0x00000002
	SZO = cond(eax & 0x3D369497)
	C = false
	SCZO = cond(eax - 0x43D4F688)
	// succ:  l004023E6
l004023E6:
	dl = dl + 0x01
	SZO = cond(dl)
	eax = esi
	edx = edx - 0x00000001
	SZO = cond(edx)
	bl = bl - ch
	SCZO = cond(bl)
	bl = dl
	call fn004026F6 (retsize: 4;)
	eax = eax + 0xD28778CE
	SCZO = cond(eax)
	return
fn004023D6_exit:


// fn004023FD
// Return size: 0
void fn004023FD()
fn004023FD_entry:
	// succ:  l004023FD
l004023FD:
	esp = fp
	eax = eax - 0x00000001
	SZO = cond(eax)
	cl = cl + 0xF1 + C
	SCZO = cond(cl)
	ah = ah - 0x4A - C
	SCZO = cond(ah)
	ecx = ecx + esi
	SCZO = cond(ecx)
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	ah = ah - 0x61 - C
	SCZO = cond(ah)
	ecx = ecx ^ edx
	SZO = cond(ecx)
	C = false
	goto l0040240D_thunk_fn00402745
	// succ:  l0040240D_thunk_fn00402745
l004023FD:
	goto fn004023FD_exit
	// succ:  fn004023FD_exit
l0040240D_thunk_fn00402745:
	call fn00402745 (retsize: 0;)
	return
	// succ:  fn004023FD_exit
fn004023FD_exit:


// fn00402435
// Return size: 0
void fn00402435()
fn00402435_entry:
	// succ:  l00402435
l00402435:
	esp = fp
	esp = esp + 0x00000004
	// succ:  l00402435_thunk_fn00402436
l00402435_thunk_fn00402436:
	call fn00402436 (retsize: 0;)
	return
	// succ:  fn00402435_exit
fn00402435_exit:


// fn00402436
// Return size: 0
void fn00402436()
fn00402436_entry:
	// succ:  l00402436
l00402436:
	esp = fp
	al = al & 0x04
	SZO = cond(al)
	C = false
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bl = bl + 0xC7
	SCZO = cond(bl)
	bh = bh ^ bl
	SZO = cond(bh)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	edi = edi | ecx
	SZO = cond(edi)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	bl = ~bl
	goto l00402448_thunk_fn00402218
	// succ:  l00402448_thunk_fn00402218
l00402436:
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bl = bl + 0xC7
	SCZO = cond(bl)
	bh = bh ^ bl
	SZO = cond(bh)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	edi = edi | ecx
	SZO = cond(edi)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	bl = ~bl
	goto l00402448_thunk_fn00402218
	// succ:  l00402448_thunk_fn00402218
l00402448_thunk_fn00402218:
	call fn00402218 (retsize: 0;)
	return
	// succ:  fn00402436_exit
l00402448_thunk_fn00402218:
	call fn00402218 (retsize: 0;)
	return
	// succ:  fn00402436_exit
fn00402436_exit:


// fn00402453
// Return size: 0
void fn00402453()
fn00402453_entry:
	// succ:  l00402453
l00402453:
	esp = fp
	Mem0[esp:word32] = edx
	esi = esi
	esi = esi
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi | esi
	SZO = cond(edi)
	C = false
	bh = ~bh
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	bh = ~bh
	call fn00402832 (retsize: 4;)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[edx - 0x0000000E:word16] = fs
	ss = Mem0[esp:selector]
	esp = esp + 0x00000002
	// succ:  l0040246C_thunk_fn0040246D
l0040246C_thunk_fn0040246D:
	call fn0040246D (retsize: 0;)
	return
	// succ:  fn00402453_exit
fn00402453_exit:


// fn0040246D
// Return size: 0
void fn0040246D()
fn0040246D_entry:
	// succ:  l0040246D
l0040246D:
	esp = fp
	ah = ah + 0x01
	SZO = cond(ah)
	bh = bh ^ dh
	SZO = cond(bh)
	C = false
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	bl = bl + 0x01
	SZO = cond(bl)
	ah = ah ^ dl
	SZO = cond(ah)
	C = false
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	goto l00402479_thunk_fn0040271D
	// succ:  l00402479_thunk_fn0040271D
l0040246D:
l00402479_thunk_fn0040271D:
	call fn0040271D (retsize: 0;)
	return
	// succ:  fn0040246D_exit
fn0040246D_exit:


// fn004024AF
// Return size: 0
void fn004024AF()
fn004024AF_entry:
	// succ:  l004024AF
l004024AF:
	esp = fp
	edi = edi - ebx
	SCZO = cond(edi)
	dh = bh
	bl = bl ^ cl
	SZO = cond(bl)
	C = false
	bl = ~bl
	bh = bh - al
	SCZO = cond(bh)
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	bl = cl
	call fn00402B53 (retsize: 4;)
	D = false
l004024AF:
fn004024AF_exit:


// fn004024C7
// Return size: 0
void fn004024C7()
fn004024C7_entry:
	// succ:  l004024C7
l004024C7:
	esp = fp
	Mem0[esp - 0x0000002C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = bl + cl
	SCZO = cond(bl)
	cl = cl - 0xEE - C
	SCZO = cond(cl)
	edi = edi + esi
	SCZO = cond(edi)
	dl = dl - cl
	SCZO = cond(dl)
	edi = esi
fn004024C7_exit:


// fn004024E3
// Return size: 0
void fn004024E3()
fn004024E3_entry:
	// succ:  l004024E3
l004024E3:
	branch Test(NE,Z) l004024E3_thunk_fn004022E3
	goto l004024E9
	// succ:  l004024E9 l004024E3_thunk_fn004022E3
l004024E3_thunk_fn004022E3:
	call fn004022E3 (retsize: 0;)
	return
	// succ:  fn004024E3_exit
l004024E9:
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	dh = dh + ch
	SCZO = cond(dh)
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	dh = bl
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	bl = bl ^ dh
	SZO = cond(bl)
	C = false
	dh = dh + 0x18 + C
	SCZO = cond(dh)
	// succ:  l004024F8_thunk_fn00402A7F
l004024F8_thunk_fn00402A7F:
	call fn00402A7F (retsize: 0;)
	return
	// succ:  fn004024E3_exit
fn004024E3_exit:


// fn0040251B
// Return size: 0
void fn0040251B()
fn0040251B_entry:
	// succ:  l0040251B
l0040251B:
	bh = dh
	bh = bh + 0xF2 + C
	SCZO = cond(bh)
	call fn00402527 (retsize: 4;)
	// succ:  l0040251D_thunk_fn0040251E l00402522_thunk_fn00402527
l0040251D_thunk_fn0040251E:
	call fn0040251E (retsize: 0;)
	return
	// succ:  fn0040251B_exit
l00402522_thunk_fn00402527:
	call fn00402527 (retsize: 0;)
	return
	// succ:  fn0040251B_exit
fn0040251B_exit:


// fn0040251E
// Return size: 0
void fn0040251E()
fn0040251E_entry:
	// succ:  l0040251E
l0040251E:
	esp = fp
	al = Mem0[ebx + (uint32) al:byte]
l0040251E:
	dl = 0x2D
fn0040251E_exit:


// fn00402527
// Return size: 0
void fn00402527()
fn00402527_entry:
	// succ:  l00402527
l00402527:
	esp = fp
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	dl = dl ^ bh
	SZO = cond(dl)
	C = false
	branch Test(ULE,CZ) l0040252D_thunk_fn004023FD
	goto l00402533
	// succ:  l00402533 l0040252D_thunk_fn004023FD
l0040252D_thunk_fn004023FD:
	call fn004023FD (retsize: 0;)
	return
	// succ:  fn00402527_exit
l00402533:
	bx = ebx
	branch Test(UGT,CZ) l00402536_thunk_fn004023FD
	goto l0040253C
	// succ:  l0040253C l00402536_thunk_fn004023FD
l00402536_thunk_fn004023FD:
	call fn004023FD (retsize: 0;)
	return
	// succ:  fn00402527_exit
l0040253C:
	C = false
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
fn00402527_exit:


// fn00402543
// Return size: 0
void fn00402543()
fn00402543_entry:
	// succ:  l00402543
l00402543:
	bh = bh + 0x01
	SZO = cond(bh)
	bl = bl - bh
	SCZO = cond(bl)
	bh = bh - al
	SCZO = cond(bh)
	bh = bh + 0x01
	SZO = cond(bh)
	bl = bl + 0xFD + C
	SCZO = cond(bl)
	bh = ~bh
	branch Test(ULT,C) l00402550_thunk_fn00402271
	goto l00402556
	// succ:  l00402556 l00402550_thunk_fn00402271
l00402550_thunk_fn00402271:
	call fn00402271 (retsize: 0;)
	return
	// succ:  fn00402543_exit
l00402556:
fn00402543_exit:


// fn0040258E
// Return size: 0
void fn0040258E()
fn0040258E_entry:
	goto l0040258E
	// succ:  l0040258E
l0040241A:
	edx = edx - 0x00000001
	SZO = cond(edx)
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	ah = ah + 0x02 + C
	SCZO = cond(ah)
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	ah = dh
	eax = eax + ebx
	SCZO = cond(eax)
	dh = dh ^ al
	SZO = cond(dh)
	C = false
	dh = dh ^ bl
	SZO = cond(dh)
	C = false
	call fn00402A95 (retsize: 4;)
	SCZO = ah
	esi = esi - 0x00000001
	SZO = cond(esi)
	Mem0[edi:word32] = __in(edx)
	edi = edi + 0x00000004
	branch Test(ULT,C) l00402434_thunk_fn004023C3
	goto l00402434_thunk_fn00402436
	// succ:  l00402434_thunk_fn00402436 l00402434_thunk_fn004023C3
l00402434_thunk_fn004023C3:
	call fn004023C3 (retsize: 0;)
	return
	// succ:  fn0040258E_exit
l00402434_thunk_fn00402436:
	call fn00402436 (retsize: 0;)
	return
	// succ:  fn0040258E_exit l00402434_thunk_fn00402436
l00402434_thunk_fn00402436:
	call fn00402436 (retsize: 0;)
	return
	// succ:  fn0040258E_exit
l0040258E:
	Mem0[esp - 0x00000018:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx ^ esi
	SZO = cond(edx)
	C = false
	ah = ah + 0x01
	SZO = cond(ah)
	eax = eax - edx
	SCZO = cond(eax)
	bh = bh ^ ah
	SZO = cond(bh)
	C = false
	bl = al
	dl = dl + bh
	SCZO = cond(dl)
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	edx = edx ^ edi
	SZO = cond(edx)
	C = false
	ecx = ecx + 0x00000991
	SCZO = cond(ecx)
	branch Test(ULE,CZ) l0040241A
	// succ:  l004025AE l0040241A
l004025AE:
fn0040258E_exit:


// fn004025BF
// Return size: 0
void fn004025BF()
fn004025BF_entry:
	// succ:  l004025BF
l004025BF:
	esp = fp
	eax = eax - 0x00000001
	SZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	dh = dh + 0x01
	SZO = cond(dh)
	dl = dh
	bh = bh + 0x01
	SZO = cond(bh)
	bh = bh - bl
	SCZO = cond(bh)
	dh = dh + 0x8F
	SCZO = cond(dh)
	bh = bh - cl
	SCZO = cond(bh)
	edx = edx + 0x00000001
	SZO = cond(edx)
	dh = dh + ah
	SCZO = cond(dh)
	goto l004025D1_thunk_fn00402BCF
	// succ:  l004025D1_thunk_fn00402BCF
l004025BF:
l004025D1_thunk_fn00402BCF:
	call fn00402BCF (retsize: 0;)
	return
	// succ:  fn004025BF_exit
fn004025BF_exit:


// fn00402605
// Return size: 0
void fn00402605()
fn00402605_entry:
	// succ:  l00402605
l00402605:
	esp = fp
	ch = ch - 0x01
	SZO = cond(ch)
	ebx = eax
	edi = eax
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	bh = bh - 0xB6 - C
	SCZO = cond(bh)
	edi = edi | edx
	SZO = cond(edi)
	C = false
	bl = bl + 0x81
	SCZO = cond(bl)
	eax = Mem0[edx:word32]
	dl = dl ^ ah
	SZO = cond(dl)
	C = false
	edx = edx ^ ebx
	SZO = cond(edx)
	C = false
	branch Test(OV,O) TMP!
l00402605:
fn00402605_exit:


// fn00402643
// Return size: 0
void fn00402643()
fn00402643_entry:
	goto l00402643
	// succ:  l00402643
l0040262E:
	esi = esi - ecx
	SCZO = cond(esi)
	edi = edi - eax
	SCZO = cond(edi)
	eax = eax + ebx
	SCZO = cond(eax)
	bl = bl + 0xCE + C
	SCZO = cond(bl)
	bh = bh + bl
	SCZO = cond(bh)
	bl = bh
	goto l004026A2
	// succ:  l004026A2
l00402643:
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	eax = eax >>u 0x00000010
	SCZO = cond(eax)
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	esi = esi | edi
	SZO = cond(esi)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	edi = edi | edx
	SZO = cond(edi)
	C = false
	esi = esi ^ ecx
	SZO = cond(esi)
	C = false
	eax = eax + edx
	SCZO = cond(eax)
	branch Test(EQ,Z) l0040262E
	// succ:  l00402655 l0040262E
l00402655:
	esp = esp - 0x00000002
	Mem0[esp:word16] = cx
	cx = Mem0[esp:word16]
	esp = esp + 0x00000002
	branch Test(NE,Z) l0040262E
	// succ:  l0040265B l0040262E
l0040265B:
l004026A2:
	esi = esi ^ ecx
	SZO = cond(esi)
	C = false
	ebx = ebx - ecx
	SCZO = cond(ebx)
	// succ:  l004026A4_thunk_fn004026A5
l004026A4_thunk_fn004026A5:
	call fn004026A5 (retsize: 6;)
	return
	// succ:  fn00402643_exit
fn00402643_exit:


// fn00402660
// Return size: 0
void fn00402660()
fn00402660_entry:
	// succ:  l00402660
l00402660:
	esp = fp
	Mem0[esp:word32] = edx
fn00402660_exit:


// fn00402676
// Return size: 6
void fn00402676()
fn00402676_entry:
	goto l00402676
	// succ:  l00402676
l00402341:
	esi = esi + 0x00000001
	SZO = cond(esi)
	ebx = ebx - ecx
	SCZO = cond(ebx)
	bh = bh + cl
	SCZO = cond(bh)
	bl = bl + 0x26 + C
	SCZO = cond(bl)
	bl = bl + ch
	SCZO = cond(bl)
	bh = bh - al
	SCZO = cond(bh)
	bh = bh - 0x01
	SZO = cond(bh)
	call fn0040228A (retsize: 4;)
	SCZO = cond(Mem0[esi:word32] - Mem0[edi:word32])
	esi = esi + 0x00000004
	edi = edi + 0x00000004
	Mem0[ebp - 0x0000007B:word16] = ss
	eax = eax + ecx
	SCZO = cond(eax)
	// succ:  l00402358_thunk_fn00402359
l00402358_thunk_fn00402359:
	call fn00402359 (retsize: 0;)
	return
	// succ:  fn00402676_exit
l00402676:
	esp = fp
	eax = eax + Mem0[eax + 0x0000003C:word32]
	SCZO = cond(eax)
	bl = 0xAA
	bh = bh - 0x4A - C
	SCZO = cond(bh)
	bh = bh - 0x01
	SZO = cond(bh)
	bl = 0x3B
	bl = bl + al
	SCZO = cond(bl)
	bh = bh - dh
	SCZO = cond(bh)
	edi = eax
	bh = bh + 0x01
	SZO = cond(bh)
	bh = bh + al
	SCZO = cond(bh)
	branch Test(ULT,C) l00402341
	goto l00402692
	// succ:  l00402692 l00402341
l00402676:
l00402692:
	branch Test(GE,SO) l00402694
	// succ:  l00402694
l00402694:
	branch Test(UGE,C) l00402341
	// succ:  l0040269A l00402341
l0040269A:
	v13 = eax
	eax = ebp
	ebp = v13
	ebp = Mem0[edi:word32] *s 0xFFFFFFA8
	SCZO = cond(ebp)
	dh = 0x6F
	edx = 0x2BF133E7
	// succ:  l004026A0_thunk_fn004026A5
l004026A0_thunk_fn004026A5:
	call fn004026A5 (retsize: 6;)
	return
	// succ:  fn00402676_exit
fn00402676_exit:


// fn004026A5
// Return size: 6
void fn004026A5()
fn004026A5_entry:
	goto l004026A5
	// succ:  l004026A5
l004025DB:
	bl = bl - dl
	SCZO = cond(bl)
	bh = bh - 0x15 - C
	SCZO = cond(bh)
	esi = esi | edi
	SZO = cond(esi)
	C = false
	bl = bl + 0x51 + C
	SCZO = cond(bl)
	edi = edi | esi
	SZO = cond(edi)
	C = false
	bl = 0x31
	bl = bl ^ ch
	SZO = cond(bl)
	C = false
	bh = bh + ah
	SCZO = cond(bh)
	eax = eax ^ 0xFFFFFEC8
	SZO = cond(eax)
	C = false
	branch Test(PE,P) TMP!
l004026A5:
	esp = fp
	rArg0 = sin(rArg0)
	SCZO = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004026A5_exit
l004026A5:
	bh = bh - 0x01
	SZO = cond(bh)
	bh = bh - 0xED - C
	SCZO = cond(bh)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
	bh = bh - 0x99 - C
	SCZO = cond(bh)
	branch Test(SG,S) l004025DB
	// succ:  l004026B7 l004025DB
l004026B7:
	v11 = bh
	bh = bh
	bh = v11
	branch Test(NS,S) l004025DB
	// succ:  l004026BF l004025DB
l004026BF:
	__cli()
	v13 = Mem0[eax + 0xC480EADD:byte] << 0x11
	Mem0[eax + 0xC480EADD:byte] = v13
	SCZO = cond(v13)
	// succ:  l004026C0_thunk_fn004026C7
l004026C0_thunk_fn004026C7:
	call fn004026C7 (retsize: 0;)
	return
	// succ:  fn004026A5_exit
fn004026A5_exit:


// fn004026C7
// Return size: 0
void fn004026C7()
fn004026C7_entry:
	// succ:  l004026C7
l004026C7:
	esp = fp
	eax = eax - 0x00000001
	SZO = cond(eax)
	eax = eax - edx
	SCZO = cond(eax)
	ah = ah - 0x01
	SZO = cond(ah)
	ah = -ah
	SCZO = cond(ah)
	C = ah == 0x00
	bl = al
	bl = bl + 0x01
	SZO = cond(bl)
	eax = edi
	ebx = ebx - ecx
	SCZO = cond(ebx)
	// succ:  l004026D6_thunk_fn00402DE7
l004026D6_thunk_fn00402DE7:
	call fn00402DE7 (retsize: 0;)
	return
	// succ:  fn004026C7_exit
fn004026C7_exit:


// fn004026F6
// Return size: 0
void fn004026F6()
fn004026F6_entry:
	// succ:  l004026F6
l004026F6:
	esp = fp
	Mem0[esp:word32] = ebx
fn004026F6_exit:


// fn0040271D
// Return size: 0
void fn0040271D()
fn0040271D_entry:
	// succ:  l0040271D
l0040271D:
	esp = fp
	bh = bh | ah
	SZO = cond(bh)
	C = false
	eax = eax + 0x00000001
	SZO = cond(eax)
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	eax = eax | ecx
	SZO = cond(eax)
	C = false
	al = ~al
	al = al ^ ch
	SZO = cond(al)
	C = false
	bh = ~bh
	bh = 0x79
	bl = 0x64
	branch Test(LE,SZO) l0040272E_thunk_fn0040209B
	goto l00402734
	// succ:  l00402734 l0040272E_thunk_fn0040209B
l0040271D:
l0040272E_thunk_fn0040209B:
	call fn0040209B (retsize: 0;)
	return
	// succ:  fn0040271D_exit
l00402734:
	si = esi
	branch Test(GT,SZO) l00402737_thunk_fn0040209B
	goto l0040273D
	// succ:  l0040273D l00402737_thunk_fn0040209B
l00402737_thunk_fn0040209B:
	call fn0040209B (retsize: 0;)
	return
	// succ:  fn0040271D_exit
l0040273D:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	SZO = cond(Mem0[esi + 0xF61A6BDF + ecx * 0x00000002:word32] & ebp)
	C = false
	// succ:  l0040273F_thunk_fn00402746
l0040273F_thunk_fn00402746:
	call fn00402746 (retsize: 0;)
	return
	// succ:  fn0040271D_exit
fn0040271D_exit:


// fn00402745
// Return size: 0
void fn00402745()
fn00402745_entry:
	// succ:  l00402745
l00402745:
	esp = fp
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	call fn0040216E (retsize: 4;)
	// succ:  l00402745_thunk_fn00402746 l00402758_thunk_fn0040275D
l00402745:
l00402745_thunk_fn00402746:
	call fn00402746 (retsize: 0;)
	return
	// succ:  fn00402745_exit
l00402758_thunk_fn0040275D:
	call fn0040275D (retsize: 0;)
	return
	// succ:  fn00402745_exit
fn00402745_exit:


// fn00402746
// Return size: 0
void fn00402746()
fn00402746_entry:
	// succ:  l00402746
l00402746:
	esp = fp
	Mem0[ecx - 0x00000002:int32] = (int32) rArg0
	v6 = Mem0[ebx:byte] >>u 0xD1
	Mem0[ebx:byte] = v6
	SCZO = cond(v6)
	bl = bl - 0x06 - C
	SCZO = cond(bl)
	edx = edx + ebx
	SCZO = cond(edx)
	ah = ah + 0x02
	SCZO = cond(ah)
	dh = dh - 0x01
	SZO = cond(dh)
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	call fn0040216E (retsize: 4; FPU: -1;)
	goto l00402758_thunk_fn0040275D
	// succ:  l00402758_thunk_fn0040275D
l00402746:
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	al = al + 0x01
	SZO = cond(al)
	edx = edx - ecx
	SCZO = cond(edx)
	bl = bl - 0x06 - C
	SCZO = cond(bl)
	edx = edx + ebx
	SCZO = cond(edx)
	ah = ah + 0x02
	SCZO = cond(ah)
	dh = dh - 0x01
	SZO = cond(dh)
	al = -al
	SCZO = cond(al)
	C = al == 0x00
l00402758_thunk_fn0040275D:
	call fn0040275D (retsize: 0;)
	return
	// succ:  fn00402746_exit
fn00402746_exit:


// fn0040275D
// Return size: 0
void fn0040275D()
fn0040275D_entry:
	// succ:  l0040275D
l0040275D:
	esp = fp
	bh = bh ^ 0x2D
	SZO = cond(bh)
	C = false
	eax = (int32) ax
	ebx = ebx ^ Mem0[fs:eax - 0x00000027:word32]
	SZO = cond(ebx)
	C = false
	goto l00402761_thunk_fn00402765
	// succ:  l00402761_thunk_fn00402765
l0040275D:
	bh = bh ^ 0x2D
	SZO = cond(bh)
	C = false
	eax = (int32) ax
	ebx = ebx ^ Mem0[fs:eax - 0x00000027:word32]
	SZO = cond(ebx)
	C = false
	goto l00402761_thunk_fn00402765
	// succ:  l00402761_thunk_fn00402765
l00402761_thunk_fn00402765:
	call fn00402765 (retsize: 0;)
	return
	// succ:  fn0040275D_exit
l00402761_thunk_fn00402765:
	call fn00402765 (retsize: 0;)
	return
	// succ:  fn0040275D_exit
fn0040275D_exit:


// fn00402765
// Return size: 0
void fn00402765()
fn00402765_entry:
	// succ:  l00402765
l00402765:
	esp = fp
	bh = bh ^ bl
	SZO = cond(bh)
	C = false
	bl = bl ^ ch
	SZO = cond(bl)
	C = false
	ebx = ebx - esi
	SCZO = cond(ebx)
	ebx = ebx ^ edi
	SZO = cond(ebx)
	C = false
	al = ~al
	eax = eax - ecx
	SCZO = cond(eax)
	al = al + 0x11
	SCZO = cond(al)
	bh = bh + 0x01
	SZO = cond(bh)
	bl = bl ^ dl
	SZO = cond(bl)
	C = false
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	branch Test(EQ,Z) l00402779_thunk_fn00402B74
	goto l0040277F
	// succ:  l0040277F l00402779_thunk_fn00402B74
l00402765:
l00402779_thunk_fn00402B74:
	call fn00402B74 (retsize: 0;)
	return
	// succ:  fn00402765_exit
l0040277F:
	// succ:  l00402784
l00402784:
	branch Test(NE,Z) l00402784_thunk_fn00402B74
	goto l0040278A
	// succ:  l0040278A l00402784_thunk_fn00402B74
l00402784_thunk_fn00402B74:
	call fn00402B74 (retsize: 0;)
	return
	// succ:  fn00402765_exit
l0040278A:
	v18 = Mem0[ebp - 0x00000055:word32] << 0xFFFFFFAE
	Mem0[ebp - 0x00000055:word32] = v18
	SCZO = cond(v18)
	// succ:  l0040278A_thunk_fn0040278C
l0040278A_thunk_fn0040278C:
	call fn0040278C (retsize: 0;)
	return
	// succ:  fn00402765_exit
fn00402765_exit:


// fn0040278C
// Return size: 0
void fn0040278C()
fn0040278C_entry:
	// succ:  l0040278C
l0040278C:
	esp = fp
	Mem0[edi:word32] = eax
	edi = edi + 0x00000004
	SCZO = cond(al - Mem0[edi:byte])
	edi = edi + 0x00000001
	ebp = ebp + 0x00000001
	SZO = cond(ebp)
	esp = 0xD802FB02
	goto l0040278F_thunk_fn00402794
	// succ:  l0040278F_thunk_fn00402794
l0040278C:
	ebp = ebp + 0x00000001
	SZO = cond(ebp)
	esp = 0xD802FB02
	goto l0040278F_thunk_fn00402794
	// succ:  l0040278F_thunk_fn00402794
l0040278F_thunk_fn00402794:
	call fn00402794 (retsize: 0;)
	return
	// succ:  fn0040278C_exit
l0040278F_thunk_fn00402794:
	call fn00402794 (retsize: 0;)
	return
	// succ:  fn0040278C_exit
fn0040278C_exit:


// fn00402790
// Return size: 0
void fn00402790()
fn00402790_entry:
	// succ:  l00402790
l00402790:
	esp = fp
	bh = bh + bl
	SCZO = cond(bh)
	bl = bl + al
	SCZO = cond(bl)
	goto l00402792_thunk_fn00402794
	// succ:  l00402792_thunk_fn00402794
l00402790:
l00402792_thunk_fn00402794:
	call fn00402794 (retsize: 0;)
	return
	// succ:  fn00402790_exit
l004027A4_thunk_fn00402D4B:
	call fn00402D4B (retsize: 0;)
	return
	// succ:  fn00402790_exit
fn00402790_exit:


// fn00402794
// Return size: 0
void fn00402794()
fn00402794_entry:
	// succ:  l00402794
l00402794:
	esp = fp
	bh = 0x40
	ch = ch - 0x45 - C
	SCZO = cond(ch)
	dl = dl - 0x52 - C
	SCZO = cond(dl)
	edi = edi + ebx
	SCZO = cond(edi)
	edx = edx + ecx
	SCZO = cond(edx)
	esi = esi - 0x00000001
	SZO = cond(esi)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ch = ch | ah
	SZO = cond(ch)
	C = false
	// succ:  l004027A4_thunk_fn00402D4B l004027A4_thunk_fn00402D4B
l00402794:
	bh = 0x40
	ch = ch - 0x45 - C
	SCZO = cond(ch)
	dl = dl - 0x52 - C
	SCZO = cond(dl)
	edi = edi + ebx
	SCZO = cond(edi)
	edx = edx + ecx
	SCZO = cond(edx)
	esi = esi - 0x00000001
	SZO = cond(esi)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ch = ch | ah
	SZO = cond(ch)
	C = false
l004027A4_thunk_fn00402D4B:
	call fn00402D4B (retsize: 0;)
	return
	// succ:  fn00402794_exit
fn00402794_exit:


// fn004027D9
// Return size: 0
void fn004027D9()
fn004027D9_entry:
	// succ:  l004027D9
l004027D9:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[edx + 0x00000008:word32]
	bl = ~bl
	bh = bh - 0x18 - C
	SCZO = cond(bh)
	bl = bl - ah
	SCZO = cond(bl)
	ebx = ebx - eax
	SCZO = cond(ebx)
	bh = bh + dl
	SCZO = cond(bh)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bl = ah
	goto l004027EA_thunk_fn0040280F
	// succ:  l004027EA_thunk_fn0040280F
l004027D9:
l004027EA_thunk_fn0040280F:
	call fn0040280F (retsize: 0;)
	return
	// succ:  fn004027D9_exit
fn004027D9_exit:


// fn004027F4
// Return size: 0
void fn004027F4()
fn004027F4_entry:
	// succ:  l004027F4
l004027F4:
	esp = fp
	Mem0[esp:word32] = ecx
	dx = edx
	al = al
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx - 0x00000001
	SZO = cond(edx)
	bh = bh + 0x92
	SCZO = cond(bh)
	dh = dh + al
	SCZO = cond(dh)
	eax = eax ^ ecx
	SZO = cond(eax)
	C = false
	call fn00402ACB (retsize: 4;)
	branch Test(PE,P) l0040280A_thunk_fn0040278C
	goto l0040280C
	// succ:  l0040280C l0040280A_thunk_fn0040278C
l0040280A_thunk_fn0040278C:
	call fn0040278C (retsize: 0;)
	return
	// succ:  fn004027F4_exit
l0040280C:
fn004027F4_exit:


// fn0040280F
// Return size: 0
void fn0040280F()
fn0040280F_entry:
	goto l0040280F
	// succ:  l0040280F
l004020B5:
	bh = bh + ch
	SCZO = cond(bh)
	esi = esi | edx
	SZO = cond(esi)
	C = false
	bl = bl | ah
	SZO = cond(bl)
	C = false
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	edi = esi
	bl = bl + cl
	SCZO = cond(bl)
	eax = eax + 0x00000008
	SCZO = cond(eax)
	ebx = ecx
	call fn00402660 (retsize: 4;)
	call Mem0[0x5ABE32F2:ptr32] (retsize: 4;)
	eax = eax ^ 0x4BFB0A7D
	SZO = cond(eax)
	C = false
	// succ:  l004020D1_thunk_fn004020D6
l004020D1_thunk_fn004020D6:
	call fn004020D6 (retsize: 0;)
	return
	// succ:  fn0040280F_exit
l0040280F:
	esp = fp
	bl = bl ^ al
	SZO = cond(bl)
	C = false
	bl = 0xA9
	bh = bh + 0xB4 + C
	SCZO = cond(bh)
	edi = edi - 0x00000001
	SZO = cond(edi)
	eax = eax + 0x00000078
	bl = bl - 0xDC - C
	SCZO = cond(bl)
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	bh = bh + 0x3C
	SCZO = cond(bh)
	bl = bl + 0x01
	SZO = cond(bl)
	goto l004020B5
	// succ:  l004020B5
l0040280F:
fn0040280F_exit:


// fn00402832
// Return size: 0
void fn00402832()
fn00402832_entry:
	// succ:  l00402832
l00402832:
	esp = fp
	Mem0[esp - 0x00000034:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = bl + 0x01
	SZO = cond(bl)
	esi = eax
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	eax = ~eax
	edi = edi - ecx
	SCZO = cond(edi)
	bh = ~bh
	branch Test(ULT,C) l00402DCC
	// succ:  l00402847 l00402DCC
l00402847:
	branch Test(GT,SZO) l00402849
	// succ:  l00402849
l00402849:
	dl = dl
	branch Test(UGE,C) l00402DCC
	// succ:  l00402851 l00402DCC
l00402851:
	__outw(dx, ax)
	SZO = cond(Mem0[edx:byte] & dh)
	C = false
	// succ:  l00402852_thunk_fn00402855
l00402852_thunk_fn00402855:
	call fn00402855 (retsize: 0;)
	return
	// succ:  fn00402832_exit
l00402DCC:
	bl = bl + ch
	SCZO = cond(bl)
	bh = bh ^ bl
	SZO = cond(bh)
	C = false
	bh = bh ^ bl
	SZO = cond(bh)
	C = false
	edi = edi + eax
	SCZO = cond(edi)
	bh = bh - 0x06 - C
	SCZO = cond(bh)
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	bh = bh ^ al
	SZO = cond(bh)
	C = false
	// succ:  l00402DDB_thunk_fn00402D2B
l00402DDB_thunk_fn00402D2B:
	call fn00402D2B (retsize: 0;)
	return
	// succ:  fn00402832_exit
fn00402832_exit:


// fn00402855
// Return size: 0
void fn00402855()
fn00402855_entry:
	// succ:  l00402855
l00402855:
	esp = fp
	ah = 0x5A
	edx = edx - edi
	SCZO = cond(edx)
	eax = eax + ebx
	SCZO = cond(eax)
	al = al - bl
	SCZO = cond(al)
	dl = dl - ch
	SCZO = cond(dl)
	edx = edx - 0x00000001
	SZO = cond(edx)
	eax = eax - 0x00000001
	SZO = cond(eax)
	eax = eax - ecx
	SCZO = cond(eax)
	bh = bh | dl
	SZO = cond(bh)
	C = false
	bh = 0xE9
l00402855:
fn00402855_exit:


// fn00402871
// Return size: 0
void fn00402871()
fn00402871_entry:
	// succ:  l00402871
l00402871:
	esp = fp
	esi = esi + 0x00000001
	SZO = cond(esi)
	bl = bl - 0x01
	SZO = cond(bl)
	bl = bl + 0x5C
	SCZO = cond(bl)
	esi = edx
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	ebx = ebx - ecx
	SCZO = cond(ebx)
	bl = bl + dh
	SCZO = cond(bl)
l00402871:
fn00402871_exit:


// fn00402888
// Return size: 0
void fn00402888()
fn00402888_entry:
	goto l00402888
	// succ:  l00402888
l004027B1:
	bl = bl - ch
	SCZO = cond(bl)
	bh = bh - 0xF3 - C
	SCZO = cond(bh)
	al = al ^ ah
	SZO = cond(al)
	C = false
	eax = eax - ebx
	SCZO = cond(eax)
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	ebx = ebx - eax
	SCZO = cond(ebx)
	al = al + 0x93
	SCZO = cond(al)
	ebx = ebx - esi
	SCZO = cond(ebx)
	bl = dh
	branch Test(ULE,CZ) l00402D68
	// succ:  l004027CB l00402D68
l004027CB:
l00402888:
	esp = esp + 0x00000004
	bh = ch
	ah = ah + 0x01
	SZO = cond(ah)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	eax = eax ^ ebx
	SZO = cond(eax)
	C = false
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	eax = eax ^ esi
	SZO = cond(eax)
	C = false
	bl = bl + 0x01
	SZO = cond(bl)
	ebx = ebx - edx
	SCZO = cond(ebx)
	v14 = (dh & 0x01 << 0x0F) != 0x00
	dh = __ror(dh, 0x0F)
	C = v14
	branch Test(PE,P) l004027B1
	// succ:  l004028A4 l004027B1
l004028A4:
l00402D68:
	eax = eax | ebx
	SZO = cond(eax)
	C = false
	ah = ah + 0x3E
	SCZO = cond(ah)
	bh = bh - ah
	SCZO = cond(bh)
	al = ~al
	eax = eax | esi
	SZO = cond(eax)
	C = false
	eax = edx
	branch Test(LT,SO) l00402D75_thunk_fn0040246D
	goto l00402D7B
	// succ:  l00402D7B l00402D75_thunk_fn0040246D
l00402D75_thunk_fn0040246D:
	call fn0040246D (retsize: 0;)
	return
	// succ:  fn00402888_exit
l00402D7B:
fn00402888_exit:


// fn004028FC
// Return size: 0
void fn004028FC()
fn004028FC_entry:
	// succ:  l004028FC
l004028FC:
	esp = fp
	Mem0[esp - 0x00000018:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = bl + 0xDD + C
	SCZO = cond(bl)
	ecx = eax
	bl = bl - 0x01
	SZO = cond(bl)
	bh = bh - 0x0C - C
	SCZO = cond(bh)
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	cl = cl + 0xBD + C
	SCZO = cond(cl)
	bh = bh + 0x6D + C
	SCZO = cond(bh)
	branch Test(LT,SO) l00402912_thunk_fn00402605
	goto l00402918
	// succ:  l00402918 l00402912_thunk_fn00402605
l00402912_thunk_fn00402605:
	call fn00402605 (retsize: 0;)
	return
	// succ:  fn004028FC_exit
l00402918:
	// succ:  l0040291E
l0040291E:
	edi = edi
	branch Test(GE,SO) l00402920_thunk_fn00402605
	goto l00402926
	// succ:  l00402926 l00402920_thunk_fn00402605
l00402920_thunk_fn00402605:
	call fn00402605 (retsize: 0;)
	return
	// succ:  fn004028FC_exit
l00402926:
	al = al ^ 0x0E
	SZO = cond(al)
	C = false
	C = !C
	branch Test(PO,P) l00402929_thunk_fn00402951
	goto l0040292B
	// succ:  l0040292B l00402929_thunk_fn00402951
l00402929_thunk_fn00402951:
	call fn00402951 (retsize: 0;)
	return
	// succ:  fn004028FC_exit
l0040292B:
	eax = eax + 0x43D80B07
	SCZO = cond(eax)
	// succ:  l0040292B_thunk_fn00402930
l0040292B_thunk_fn00402930:
	call fn00402930 (retsize: 0;)
	return
	// succ:  fn004028FC_exit
fn004028FC_exit:


// fn00402930
// Return size: 0
void fn00402930()
fn00402930_entry:
	// succ:  l00402930
l00402930:
	esp = fp
	ebx = ebx + esi
	SCZO = cond(ebx)
	bl = bl + 0x01
	SZO = cond(bl)
	bh = bh + 0x63
	SCZO = cond(bh)
	bl = bl - 0x01
	SZO = cond(bl)
	SCZO = cond(eax - 0xA7BC8D39)
	goto l0040293F_thunk_fn004024E3
	// succ:  l0040293F_thunk_fn004024E3
l00402930:
	ebx = ebx + esi
	SCZO = cond(ebx)
	bl = bl + 0x01
	SZO = cond(bl)
	bh = bh + 0x63
	SCZO = cond(bh)
	bl = bl - 0x01
	SZO = cond(bl)
	SCZO = cond(eax - 0xA7BC8D39)
	// succ:  l00402939_thunk_fn004024E3
l00402939_thunk_fn004024E3:
	call fn004024E3 (retsize: 0;)
	return
	// succ:  fn00402930_exit
l0040293F_thunk_fn004024E3:
	call fn004024E3 (retsize: 0;)
	return
	// succ:  fn00402930_exit
fn00402930_exit:


// fn00402951
// Return size: 0
void fn00402951()
fn00402951_entry:
	// succ:  l00402951
l00402951:
	esp = fp
	eax = ecx
	edi = edi + ecx
	SCZO = cond(edi)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bh = ch
	branch Test(LT,SO) l00402958_thunk_fn00402A64
	goto l00402958_thunk_fn0040295E
	// succ:  l00402958_thunk_fn0040295E l00402958_thunk_fn00402A64
l00402951:
	eax = ecx
	edi = edi + ecx
	SCZO = cond(edi)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bh = ch
	branch Test(LT,SO) l00402A64
	goto l00402958_thunk_fn0040295E
	// succ:  l00402958_thunk_fn0040295E l00402958_thunk_fn00402A64
l00402958_thunk_fn0040295E:
	call fn0040295E (retsize: 0;)
	return
	// succ:  fn00402951_exit l00402958_thunk_fn0040295E
l00402958_thunk_fn0040295E:
	call fn0040295E (retsize: 0;)
	return
	// succ:  fn00402951_exit
l00402958_thunk_fn0040295E:
	call fn0040295E (retsize: 0;)
	return
	// succ:  fn00402951_exit
l00402958_thunk_fn00402A64:
	call fn00402A64 (retsize: 0;)
	return
	// succ:  fn00402951_exit
l00402958_thunk_fn00402A64:
	call fn00402A64 (retsize: 0;)
	return
	// succ:  fn00402951_exit
fn00402951_exit:


// fn0040295E
// Return size: 0
void fn0040295E()
fn0040295E_entry:
	// succ:  l0040295E
l0040295E:
	branch Test(OV,O) l00402960
	// succ:  l00402960
l00402960:
	v4 = ebx
	ebx = ebx
	ebx = v4
	branch Test(GE,SO) l00402A64
	goto l00402968
	// succ:  l00402968 l00402962_thunk_fn00402A64
l00402962_thunk_fn00402A64:
	call fn00402A64 (retsize: 0;)
	return
	// succ:  fn0040295E_exit
l00402968:
	eax = eax - 0x4C5408D9
	SCZO = cond(eax)
	// succ:  l00402968_thunk_fn0040296D
l00402968_thunk_fn0040296D:
	call fn0040296D (retsize: 0;)
	return
	// succ:  fn0040295E_exit
fn0040295E_exit:


// fn0040296D
// Return size: 0
void fn0040296D()
fn0040296D_entry:
	// succ:  l0040296D
l0040296D:
	esp = fp
	Mem0[esp - 0x00000014:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	al = cl
	bh = bh ^ bl
	SZO = cond(bh)
	C = false
	eax = eax - 0x00000001
	SZO = cond(eax)
	ebx = ebx - ecx
	SCZO = cond(ebx)
	dh = dh + cl
	SCZO = cond(dh)
	branch Test(EQ,Z) l0040297A_thunk_fn00402034
	goto l00402980
	// succ:  l00402980 l0040297A_thunk_fn00402034
l0040297A_thunk_fn00402034:
	call fn00402034 (retsize: 0;)
	return
	// succ:  fn0040296D_exit
l00402980:
	v15 = cl
	cl = cl
	cl = v15
	branch Test(NE,Z) l00402982_thunk_fn00402034
	goto l00402988
	// succ:  l00402988 l00402982_thunk_fn00402034
l00402982_thunk_fn00402034:
	call fn00402034 (retsize: 0;)
	return
	// succ:  fn0040296D_exit
l00402988:
	__hlt()
fn0040296D_exit:


// fn00402989
// Return size: 4
void fn00402989()
fn00402989_entry:
	// succ:  l00402989
l00402989:
	esp = fp
	al = Mem0[esi:byte]
	esi = esi + 0x00000001
	v6 = Mem0[esi - 0x00000024:byte] ^ ch
	Mem0[esi - 0x00000024:byte] = v6
	SZO = cond(Mem0[esi - 0x00000024:byte])
	C = false
	al = Mem0[esi:byte]
	esi = esi + 0x00000001
	eax = 0x8A240C87
	goto l0040298E_thunk_fn00402993
	// succ:  l0040298E_thunk_fn00402993
l00402989:
l0040298E_thunk_fn00402993:
	call fn00402993 (retsize: 4;)
	return
	// succ:  fn00402989_exit
fn00402989_exit:


// fn0040298F
// Return size: 0
void fn0040298F()
fn0040298F_entry:
	// succ:  l0040298F
l0040298F:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = ecx
	ecx = v3
	dl = dl
	// succ:  l00402992_thunk_fn00402993
l00402992_thunk_fn00402993:
	call fn00402993 (retsize: 4;)
	return
	// succ:  fn0040298F_exit
fn0040298F_exit:


// fn00402993
// Return size: 4
void fn00402993()
fn00402993_entry:
	goto l00402993
	// succ:  l00402993
l00402503:
	ebx = ebx - ecx
	SCZO = cond(ebx)
	ah = ~ah
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	esi = esi - 0x00000001
	SZO = cond(esi)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bl = bl ^ bh
	SZO = cond(bl)
	C = false
	al = al ^ ch
	SZO = cond(al)
	C = false
	call fn00402CDC (retsize: 4;)
	SCZO = cond(edi - edi)
	bh = bh - bh - C
	SCZO = cond(bh)
	al = al - Mem0[ebx + 0x80FE8AA8:byte] - C
	SCZO = cond(al)
	// succ:  l00402518_thunk_fn0040251E
l00402518_thunk_fn0040251E:
	call fn0040251E (retsize: 0;)
	return
	// succ:  fn00402993_exit
l00402993:
	esp = fp
	v4 = (Mem0[ecx + 0x00000033:byte] & 0x01 << cl) != 0x00
	Mem0[ecx + 0x00000033:byte] = __rcr(Mem0[ecx + 0x00000033:byte], cl, C)
	C = v4
	return
	// succ:  fn00402993_exit
l00402993:
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax ^ edx
	SZO = cond(eax)
	C = false
	ah = ah + al
	SCZO = cond(ah)
	al = al + 0x62 + C
	SCZO = cond(al)
	eax = eax ^ ecx
	SZO = cond(eax)
	C = false
	eax = eax + 0x00000001
	SZO = cond(eax)
	ah = ah ^ bl
	SZO = cond(ah)
	C = false
	goto l00402503
	// succ:  l00402503
fn00402993_exit:


// fn004029AD
// Return size: 4
void fn004029AD()
fn004029AD_entry:
	// succ:  l004029AD
l004029AD:
	esp = fp
	Mem0[esp - 0x00000014:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	cl = cl - bh
	SCZO = cond(cl)
	cl = cl + 0xAB
	SCZO = cond(cl)
	esi = esi - 0x00000001
	SZO = cond(esi)
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	bl = ~bl
	ebx = ebx - ecx
	SCZO = cond(ebx)
	bh = bh - 0x01
	SZO = cond(bh)
	bl = bl | dh
	SZO = cond(bl)
	C = false
	branch Test(SG,S) l004029C3_thunk_fn00402BF9
	goto l004029C9
	// succ:  l004029C9 l004029C3_thunk_fn00402BF9
l004029C3_thunk_fn00402BF9:
	call fn00402BF9 (retsize: 4;)
	return
	// succ:  fn004029AD_exit
l004029C9:
	branch Test(ULT,C) l004029CB
	// succ:  l004029CB
l004029CB:
	edi = edi
	branch Test(NS,S) l004029CD_thunk_fn00402BF9
	goto l004029D3
	// succ:  l004029D3 l004029CD_thunk_fn00402BF9
l004029CD_thunk_fn00402BF9:
	call fn00402BF9 (retsize: 4;)
	return
	// succ:  fn004029AD_exit
l004029D3:
	cx = cx - 0x0001
	branch Test(NE,Z) && cx != 0x0000 l004029D3_thunk_fn00402989
	goto l004029D7
	// succ:  l004029D7 l004029D3_thunk_fn00402989
l004029D3_thunk_fn00402989:
	call fn00402989 (retsize: 4;)
	return
	// succ:  fn004029AD_exit
l004029D7:
fn004029AD_exit:


// fn004029D8
// Return size: 0
void fn004029D8()
fn004029D8_entry:
	// succ:  l004029D8
l004029D8:
	esp = fp
	bl = bl - 0xC1 - C
	SCZO = cond(bl)
	bl = ~bl
	dh = ~dh
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	dh = dh - 0x69 - C
	SCZO = cond(dh)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	eax = edx
l004029D8:
fn004029D8_exit:


// fn00402A2D
// Return size: 0
void fn00402A2D()
fn00402A2D_entry:
	// succ:  l00402A2D
l00402A2D:
	esp = fp
	eax = eax + 0x00000001
	SZO = cond(eax)
	dl = bh
	eax = esi
	dh = dh ^ bh
	SZO = cond(dh)
	C = false
	bh = bh - 0x8D - C
	SCZO = cond(bh)
	edi = eax
	al = al + 0x7A
	SCZO = cond(al)
	ch = ch + 0xFA
	SCZO = cond(ch)
	ebx = ecx
	cl = cl + al
	SCZO = cond(cl)
	al = al - 0x01
	SZO = cond(al)
	call fn004020EB (retsize: 4;)
	eax = eax | 0x3F7122B6
	SZO = cond(eax)
	C = false
	v17 = Mem0[eax - 0x00000079:byte] - 0x01
	Mem0[eax - 0x00000079:byte] = v17
	SZO = cond(v17)
	// succ:  l00402A4F_thunk_fn00402A52
l00402A4F_thunk_fn00402A52:
	call fn00402A52 (retsize: 0;)
	return
	// succ:  fn00402A2D_exit
fn00402A2D_exit:


// fn00402A51
// Return size: 0
void fn00402A51()
fn00402A51_entry:
	// succ:  l00402A51
l00402A51:
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = eax
	eax = v3
	// succ:  l00402A51_thunk_fn00402A52
l00402A51_thunk_fn00402A52:
	call fn00402A52 (retsize: 0;)
	return
	// succ:  fn00402A51_exit
fn00402A51_exit:


// fn00402A52
// Return size: 0
void fn00402A52()
fn00402A52_entry:
	// succ:  l00402A52
l00402A52:
	esp = fp
	al = al + 0x24
	SCZO = cond(al)
	eax = eax
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi - 0x00000001
	SZO = cond(edi)
	edi = edi - esi
	SCZO = cond(edi)
	edi = edi + 0x00000001
	SZO = cond(edi)
	goto l00402A5B_thunk_fn00402643
	// succ:  l00402A5B_thunk_fn00402643
l00402A52:
	eax = eax
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi - 0x00000001
	SZO = cond(edi)
	edi = edi - esi
	SCZO = cond(edi)
	edi = edi + 0x00000001
	SZO = cond(edi)
	// succ:  l00402A58_thunk_fn00402643
l00402A58_thunk_fn00402643:
	call fn00402643 (retsize: 0;)
	return
	// succ:  fn00402A52_exit
l00402A5B_thunk_fn00402643:
	call fn00402643 (retsize: 0;)
	return
	// succ:  fn00402A52_exit
fn00402A52_exit:


// fn00402A64
// Return size: 0
void fn00402A64()
fn00402A64_entry:
	// succ:  l00402A64
l00402A64:
	esi = esi - eax
	SCZO = cond(esi)
	edi = edi - eax
	SCZO = cond(edi)
	bh = bh | ah
	SZO = cond(bh)
	C = false
	ebx = ebx - edx
	SCZO = cond(ebx)
	bl = bl + ch
	SCZO = cond(bl)
	bl = bl + 0x01
	SZO = cond(bl)
	bl = bl - 0x9D - C
	SCZO = cond(bl)
	ebx = ebx + ecx
	SCZO = cond(ebx)
	goto l00402A75_thunk_fn00402235
	// succ:  l00402A75_thunk_fn00402235
fn00402A64_exit:


// fn00402A7F
// Return size: 0
void fn00402A7F()
fn00402A7F_entry:
	// succ:  l00402A7F
l00402A7F:
	esp = fp
	bl = bl + 0x01
	SZO = cond(bl)
	al = al + 0x01
	SZO = cond(al)
	ah = 0x1E
	bh = ch
	dl = dl | bh
	SZO = cond(dl)
	C = false
	eax = eax + 0x00000001
	SZO = cond(eax)
	ch = -ch
	SCZO = cond(ch)
	C = ch == 0x00
	call fn00402BB0 (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	dh = dh | ah
	SZO = cond(dh)
	C = false
	ecx = eax *s 0x8A243C89
	SCZO = cond(ecx)
l00402A7F:
fn00402A7F_exit:


// fn00402A95
// Return size: 0
void fn00402A95()
fn00402A95_entry:
	// succ:  l00402A95
l00402A95:
	esp = fp
	Mem0[esp:word32] = edi
	bh = bh
	goto l00402A99
	// succ:  l00402A99
l00402AA1_thunk_fn004025BF:
	call fn004025BF (retsize: 0;)
	return
	// succ:  fn00402A95_exit
l00402AA1_thunk_fn00402AA7:
	call fn00402AA7 (retsize: 0;)
	return
	// succ:  fn00402A95_exit l00402AA1_thunk_fn00402AA7
l00402AA1_thunk_fn00402AA7:
	call fn00402AA7 (retsize: 0;)
	return
	// succ:  fn00402A95_exit
fn00402A95_exit:


// fn00402A99
// Return size: 0
void fn00402A99()
fn00402A99_entry:
	// succ:  l00402A99
l00402A99:
	call Mem0[edi - 0x00000076:ptr32] (retsize: 4;)
	__cli()
	ah = ah ^ dl
	SZO = cond(ah)
	C = false
	bh = 0xEF
	branch Test(SG,S) l00402AA1_thunk_fn004025BF
	// succ:  l00402AA1_thunk_fn00402AA7 l00402AA1_thunk_fn004025BF l00402AA1_thunk_fn00402AA7 l00402AA1_thunk_fn004025BF
l00402AA1_thunk_fn004025BF:
	call fn004025BF (retsize: 0;)
	return
	// succ:  fn00402A99_exit
l00402AA1_thunk_fn00402AA7:
	call fn00402AA7 (retsize: 0;)
	return
	// succ:  fn00402A99_exit
fn00402A99_exit:


// fn00402AA7
// Return size: 0
void fn00402AA7()
fn00402AA7_entry:
	// succ:  l00402AA7
l00402AA7:
fn00402AA7_exit:


// fn00402AB4
// Return size: 4
void fn00402AB4()
fn00402AB4_entry:
	// succ:  l00402AB4
l00402AB4:
	esp = fp
	ebx = ebx + ecx
	SCZO = cond(ebx)
	return
	// succ:  fn00402AB4_exit
l00402AB4:
fn00402AB4_exit:


// fn00402ACB
// Return size: 0
void fn00402ACB()
fn00402ACB_entry:
	// succ:  l00402ACB
l00402ACB:
	esp = fp
	esp = esp + 0x00000004
	esi = esi + edi
	SCZO = cond(esi)
	ah = ah + 0x0E
	SCZO = cond(ah)
	edx = edx ^ ecx
	SZO = cond(edx)
	C = false
	ebx = ebx - edx
	SCZO = cond(ebx)
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	branch Test(ULE,CZ) l00402ADA_thunk_fn00402855
l00402ADA_thunk_fn00402855:
	call fn00402855 (retsize: 0;)
	return
	// succ:  fn00402ACB_exit
l00402ADD:
	D = true
	// succ:  l00402AE0 l00402ADA_thunk_fn00402855
l00402AE0:
	// succ:  l00402AE6
l00402AE6:
	branch Test(LT,SO) l00402AE8
	// succ:  l00402AE8
l00402AE8:
	branch Test(UGT,CZ) l00402AE8_thunk_fn00402855
	goto l00402AEE
	// succ:  l00402AEE l00402AE8_thunk_fn00402855
l00402AE8_thunk_fn00402855:
	call fn00402855 (retsize: 0;)
	return
	// succ:  fn00402ACB_exit
l00402AEE:
	dh = dh << 0xEA
	SCZO = cond(dh)
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx - 0x00000001
	branch Test(NE,Z) && ecx != 0x00000000 l00402ADD
	// succ:  l00402AF3_thunk_fn00402AF5 l00402ADD
l00402AF3_thunk_fn00402AF5:
	call fn00402AF5 (retsize: 0;)
	return
	// succ:  fn00402ACB_exit l00402AF3_thunk_fn00402AF5
l00402AF3_thunk_fn00402AF5:
	call fn00402AF5 (retsize: 0;)
	return
	// succ:  fn00402ACB_exit
fn00402ACB_exit:


// fn00402AF5
// Return size: 0
void fn00402AF5()
fn00402AF5_entry:
	// succ:  l00402AF5
l00402AF5:
	esp = fp
	esp = esp + 0x00000004
	bh = 0x4C
	bl = bl - 0x01
	SZO = cond(bl)
	bh = ~bh
	bh = bh + 0x9D
	SCZO = cond(bh)
	edi = edi ^ eax
	SZO = cond(edi)
	C = false
	edi = edi - esi
	SCZO = cond(edi)
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	branch Test(ULT,C) l00402B08_thunk_fn00402359
	goto l00402B0E
	// succ:  l00402B0E l00402B08_thunk_fn00402359
l00402B08_thunk_fn00402359:
	call fn00402359 (retsize: 0;)
	return
	// succ:  fn00402AF5_exit
l00402B0E:
	v12 = al
	al = al
	al = v12
	branch Test(UGE,C) l00402B10_thunk_fn00402359
	goto l00402B16
	// succ:  l00402B16 l00402B10_thunk_fn00402359
l00402B10_thunk_fn00402359:
	call fn00402359 (retsize: 0;)
	return
	// succ:  fn00402AF5_exit
l00402B16:
	ebp = ebp - 0x00000001
	SZO = cond(ebp)
	SCZO = cond(Mem0[esi:word32] - Mem0[edi:word32])
	esi = esi + 0x00000004
	edi = edi + 0x00000004
	ebp = 0x33E05CA4
	// succ:  l00402B18_thunk_fn00402B1D
l00402B18_thunk_fn00402B1D:
	call fn00402B1D (retsize: 0;)
	return
	// succ:  fn00402AF5_exit
fn00402AF5_exit:


// fn00402B1C
// Return size: 0
void fn00402B1C()
fn00402B1C_entry:
	// succ:  l00402B1C
l00402B1C:
	esp = fp
	eax = eax ^ ecx
	SZO = cond(eax)
	C = false
	goto l00402B1C_thunk_fn00402B1D
	// succ:  l00402B1C_thunk_fn00402B1D
l00402B1C:
l00402B1C_thunk_fn00402B1D:
	call fn00402B1D (retsize: 0;)
	return
	// succ:  fn00402B1C_exit
fn00402B1C_exit:


// fn00402B1D
// Return size: 0
void fn00402B1D()
fn00402B1D_entry:
	// succ:  l00402B1D
l00402B1D:
	esp = fp
	v4 = Mem0[ebx:word32] >>u 0xFFFFFFD6
	Mem0[ebx:word32] = v4
	SCZO = cond(v4)
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	bl = bl + dl
	SCZO = cond(bl)
	dh = dh | bh
	SZO = cond(dh)
	C = false
	bl = bl + bh
	SCZO = cond(bl)
	eax = eax ^ edi
	SZO = cond(eax)
	C = false
	dl = dl - 0xD7 - C
	SCZO = cond(dl)
	call fn00402E62 (retsize: 4;)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	dh = dh - ah
	SCZO = cond(dh)
	branch Test(UGE,C) TMP!
l00402B1D:
	edx = edx - esi
	SCZO = cond(edx)
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	bl = bl + dl
	SCZO = cond(bl)
	dh = dh | bh
	SZO = cond(dh)
	C = false
	bl = bl + bh
	SCZO = cond(bl)
	eax = eax ^ edi
	SZO = cond(eax)
	C = false
	dl = dl - 0xD7 - C
	SCZO = cond(dl)
fn00402B1D_exit:


// fn00402B39
// Return size: 0
void fn00402B39()
fn00402B39_entry:
	// succ:  l00402B39
l00402B39:
	esp = fp
	bl = bl | dl
	SZO = cond(bl)
	C = false
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	ebx = edi
	edi = edi - eax
	SCZO = cond(edi)
	esi = esi + edi
	SCZO = cond(esi)
	edi = edi + 0x00000001
	SZO = cond(edi)
	goto l00402B46_thunk_fn0040201E
	// succ:  l00402B46_thunk_fn0040201E
l00402B39:
l00402B46_thunk_fn0040201E:
	call fn0040201E (retsize: 0;)
	return
	// succ:  fn00402B39_exit
fn00402B39_exit:


// fn00402B53
// Return size: 0
void fn00402B53()
fn00402B53_entry:
	// succ:  l00402B53
l00402B53:
	esp = fp
	Mem0[esp - 0x00000020:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	dh = dh + 0x88 + C
	SCZO = cond(dh)
	esi = esi - 0x00000001
	SZO = cond(esi)
	edi = edi - 0x00000001
	SZO = cond(edi)
	dh = bl
	dh = al
	bh = ch
	bl = bl - 0xB0 - C
	SCZO = cond(bl)
	dl = dl ^ ah
	SZO = cond(dl)
	C = false
	edx = (word32) al
	call fn00402435 (retsize: 4;)
fn00402B53_exit:


// fn00402B74
// Return size: 0
void fn00402B74()
fn00402B74_entry:
	// succ:  l00402B74
l00402B74:
	esp = fp
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	al = al + 0x01
	SZO = cond(al)
	eax = eax - 0x00000001
	SZO = cond(eax)
	eax = eax + 0x00000001
	SZO = cond(eax)
	bl = bl - bh
	SCZO = cond(bl)
	al = bh
	bh = ah
	ah = -ah
	SCZO = cond(ah)
	C = ah == 0x00
	al = al | dh
	SZO = cond(al)
	C = false
	bl = bl | bh
	SZO = cond(bl)
	C = false
	goto l00402B85
	// succ:  l00402B85
l00402B74:
fn00402B74_exit:


// fn00402B92
// Return size: 0
void fn00402B92()
fn00402B92_entry:
	goto l00402B92
	// succ:  l00402B92
l00402377:
	esi = ebx
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = bl + 0x60 + C
	SCZO = cond(bl)
	ebx = esi
	bh = bh - 0xBC - C
	SCZO = cond(bh)
	bl = bl + 0x01
	SZO = cond(bl)
	bh = bh + 0xC0 + C
	SCZO = cond(bh)
	branch Test(ULE,CZ) l00402387_thunk_fn00402E2C
	goto l0040238D
	// succ:  l0040238D l00402387_thunk_fn00402E2C
l00402387_thunk_fn00402E2C:
	call fn00402E2C (retsize: 0;)
	return
	// succ:  fn00402B92_exit
l0040238D:
l00402B92:
	esp = esp + 0x00000004
	edi = edi | ecx
	SZO = cond(edi)
	C = false
	bl = bl + 0x5A
	SCZO = cond(bl)
	bh = ah
	bh = cl
	bl = dh
	bh = bh - 0xDE - C
	SCZO = cond(bh)
	goto l00402377
	// succ:  l00402377
fn00402B92_exit:


// fn00402BB0
// Return size: 4
void fn00402BB0()
fn00402BB0_entry:
	// succ:  l00402BB0
l00402BB0:
	esp = fp
	esp = esp + 0x00000004
	dl = dl - 0x43 - C
	SCZO = cond(dl)
	edx = edx + 0x00000001
	SZO = cond(edx)
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	ch = ch - 0x01
	SZO = cond(ch)
	esi = eax
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	dh = dh + al
	SCZO = cond(dh)
	branch Test(ULT,C) l00402BC1_thunk_fn00402C16
	goto l00402BC3
	// succ:  l00402BC3 l00402BC1_thunk_fn00402C16
l00402BC1_thunk_fn00402C16:
	call fn00402C16 (retsize: 4;)
	return
	// succ:  fn00402BB0_exit
l00402BC3:
	bx = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	branch Test(UGE,C) l00402BC8_thunk_fn00402C16
	goto l00402BCA
	// succ:  l00402BCA l00402BC8_thunk_fn00402C16
l00402BC8_thunk_fn00402C16:
	call fn00402C16 (retsize: 4;)
	return
	// succ:  fn00402BB0_exit
l00402BCA:
fn00402BB0_exit:


// fn00402BCF
// Return size: 0
void fn00402BCF()
fn00402BCF_entry:
	// succ:  l00402BCF
l00402BCF:
	esp = fp
	al = ah
	dl = ~dl
	ecx = ecx - 0x00000991
	SCZO = cond(ecx)
	bh = bh + bl
	SCZO = cond(bh)
	dh = 0x3A
	bl = bl ^ ch
	SZO = cond(bl)
	C = false
	al = al - 0x01
	SZO = cond(al)
	dl = ~dl
	dl = dl + 0x01
	SZO = cond(dl)
	eax = eax - ebx
	SCZO = cond(eax)
	branch Test(OV,O) l00402BE7_thunk_fn00402200
	goto l00402BED
	// succ:  l00402BED l00402BE7_thunk_fn00402200
l00402BCF:
l00402BE7_thunk_fn00402200:
	call fn00402200 (retsize: 0;)
	return
	// succ:  fn00402BCF_exit
l00402BED:
	edi = edi
	branch Test(NO,O) l00402BEF_thunk_fn00402200
	goto l00402BF5
	// succ:  l00402BF5 l00402BEF_thunk_fn00402200
l00402BEF_thunk_fn00402200:
	call fn00402200 (retsize: 0;)
	return
	// succ:  fn00402BCF_exit
l00402BF5:
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	v18 = Mem0[esi:word32]
	Mem0[edi:word32] = v18
	esi = esi + 0x00000004
	edi = edi + 0x00000004
	v20 = Mem0[esi:byte]
	Mem0[edi:byte] = v20
	esi = esi + 0x00000001
	edi = edi + 0x00000001
	v21 = Mem0[ebx:byte] & dh
	Mem0[ebx:byte] = v21
	SZO = cond(Mem0[ebx:byte])
	C = false
fn00402BCF_exit:


// fn00402BF9
// Return size: 4
void fn00402BF9()
fn00402BF9_entry:
	// succ:  l00402BF9
l00402BF9:
	esp = fp
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	goto l00402BFA
	// succ:  l00402BFA
l00402BF9:
l00402C15_thunk_fn00402C16:
	call fn00402C16 (retsize: 4;)
	return
	// succ:  fn00402BF9_exit
fn00402BF9_exit:


// fn00402C16
// Return size: 4
void fn00402C16()
fn00402C16_entry:
	// succ:  l00402C16
l00402C16:
	esp = fp
	dl = dl + dh
	SCZO = cond(dl)
	bl = ~bl
	al = al + 0xC2 + C
	SCZO = cond(al)
	al = al + 0x1E
	SCZO = cond(al)
	ch = ch - al
	SCZO = cond(ch)
	ebx = ecx
	cl = cl ^ ah
	SZO = cond(cl)
	C = false
	bh = bh + 0x01
	SZO = cond(bh)
	dl = dl | dh
	SZO = cond(dl)
	C = false
	goto l00402C2A_thunk_fn00402AB4
	// succ:  l00402C2A_thunk_fn00402AB4
l00402C16:
l00402C2A_thunk_fn00402AB4:
	call fn00402AB4 (retsize: 4;)
	return
	// succ:  fn00402C16_exit
fn00402C16_exit:


// fn00402C61
// Return size: 0
void fn00402C61()
fn00402C61_entry:
	// succ:  l00402C61
l00402C61:
	bl = bl + 0xE3 + C
	SCZO = cond(bl)
	bh = ~bh
	dh = dh + 0x01
	SZO = cond(dh)
	cl = dh
	bh = bh - 0xD0 - C
	SCZO = cond(bh)
	esi = esi - edx
	SCZO = cond(esi)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	bl = bl - 0x92 - C
	SCZO = cond(bl)
	ch = ch | al
	SZO = cond(ch)
	C = false
	ch = ch - 0x01
	SZO = cond(ch)
	call fn004024C7 (retsize: 4;)
	branch Test(ULE,CZ) l00402C7D_thunk_fn00402CC5
	goto l00402C7F
	// succ:  l00402C7F l00402C7D_thunk_fn00402CC5
l00402C7D_thunk_fn00402CC5:
	call fn00402CC5 (retsize: 0;)
	return
	// succ:  fn00402C61_exit
l00402C7F:
fn00402C61_exit:


// fn00402C85
// Return size: 0
void fn00402C85()
fn00402C85_entry:
	// succ:  l00402C85
l00402C85:
	Mem0[esp:word32] = esi
	v4 = esi
	esi = esi
	esi = v4
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[ecx:byte] = dl
	eax = eax + 0x00000001
	SZO = cond(eax)
	eax = eax - 0x00000001
	SZO = cond(eax)
	branch Test(OV,O) l00402C8F_thunk_fn00402055
	goto l00402C95
	// succ:  l00402C95 l00402C8F_thunk_fn00402055
l00402C8F_thunk_fn00402055:
	call fn00402055 (retsize: 0;)
	return
	// succ:  fn00402C85_exit
l00402C95:
fn00402C85_exit:


// fn00402CA2
// Return size: 0
void fn00402CA2()
fn00402CA2_entry:
	// succ:  l00402CA2
l00402CA2:
	esp = fp
	esp = esp + 0x00000004
	ah = ah + 0x20 + C
	SCZO = cond(ah)
	bh = bh ^ dl
	SZO = cond(bh)
	C = false
	eax = eax + ecx
	SCZO = cond(eax)
	dh = dh ^ al
	SZO = cond(dh)
	C = false
	ah = ah | bl
	SZO = cond(ah)
	C = false
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax ^ edx
	SZO = cond(eax)
	C = false
	call fn00402D0E (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ds
	v18 = Mem0[esp + 0x00000002 + ebx:byte] + bl + C
	Mem0[esp + 0x00000002 + ebx:byte] = v18
	SCZO = cond(v18)
	// succ:  l00402CBA_thunk_fn00402CBE
l00402CBA_thunk_fn00402CBE:
	call fn00402CBE (retsize: 0;)
	return
	// succ:  fn00402CA2_exit
fn00402CA2_exit:


// fn00402CBD
// Return size: 0
void fn00402CBD()
fn00402CBD_entry:
	// succ:  l00402CBD
l00402CBD:
	esp = fp
	bh = bh + dl
	SCZO = cond(bh)
	goto l00402CBD_thunk_fn00402CBE
	// succ:  l00402CBD_thunk_fn00402CBE
l00402CBD:
l00402CBD_thunk_fn00402CBE:
	call fn00402CBE (retsize: 0;)
	return
	// succ:  fn00402CBD_exit
fn00402CBD_exit:


// fn00402CBE
// Return size: 0
void fn00402CBE()
fn00402CBE_entry:
	// succ:  l00402CBE
l00402CBE:
	esp = fp
	__cli()
	bl = bl + 0x88
	SCZO = cond(bl)
	bh = bh + 0xF7 + C
	SCZO = cond(bh)
	goto l00402CC2_thunk_fn00402CC5
	// succ:  l00402CC2_thunk_fn00402CC5
l00402CBE:
	bl = bl + 0x88
	SCZO = cond(bl)
	bh = bh + 0xF7 + C
	SCZO = cond(bh)
	esi = edx
	edi = edi - ecx
	SCZO = cond(edi)
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	bl = bl + 0x01
	SZO = cond(bl)
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	goto l00402CCF_thunk_fn004027D9
	// succ:  l00402CCF_thunk_fn004027D9
l00402CC2_thunk_fn00402CC5:
	call fn00402CC5 (retsize: 0;)
	return
	// succ:  fn00402CBE_exit
l00402CCF_thunk_fn004027D9:
	call fn004027D9 (retsize: 0;)
	return
	// succ:  fn00402CBE_exit
fn00402CBE_exit:


// fn00402CC5
// Return size: 0
void fn00402CC5()
fn00402CC5_entry:
	// succ:  l00402CC5
l00402CC5:
	esp = fp
	esi = edx
	edi = edi - ecx
	SCZO = cond(edi)
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	bl = bl + 0x01
	SZO = cond(bl)
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	goto l00402CCF_thunk_fn004027D9
	// succ:  l00402CCF_thunk_fn004027D9
l00402CC5:
	esi = edx
	edi = edi - ecx
	SCZO = cond(edi)
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	bl = bl + 0x01
	SZO = cond(bl)
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	goto l00402CCF_thunk_fn004027D9
	// succ:  l00402CCF_thunk_fn004027D9
l00402CCF_thunk_fn004027D9:
	call fn004027D9 (retsize: 0;)
	return
	// succ:  fn00402CC5_exit
l00402CCF_thunk_fn004027D9:
	call fn004027D9 (retsize: 0;)
	return
	// succ:  fn00402CC5_exit
fn00402CC5_exit:


// fn00402CDC
// Return size: 0
void fn00402CDC()
fn00402CDC_entry:
	// succ:  l00402CDC
l00402CDC:
	esp = fp
	esp = esp + 0x00000004
	eax = eax ^ ebx
	SZO = cond(eax)
	C = false
	bh = bh + 0x2B + C
	SCZO = cond(bh)
	eax = eax | ebx
	SZO = cond(eax)
	C = false
	bh = bh - 0x01
	SZO = cond(bh)
	bl = 0x99
	// succ:  l00402CEB_thunk_fn00401FE8
l00402CEB_thunk_fn00401FE8:
	call fn00401FE8 (retsize: 0;)
	return
	// succ:  fn00402CDC_exit
fn00402CDC_exit:


// fn00402CF6
// Return size: 0
void fn00402CF6()
fn00402CF6_entry:
	// succ:  l00402CF6
l00402CF6:
	esp = fp
	esp = esp + 0x00000004
	bh = bh - 0x01
	SZO = cond(bh)
	bl = bl + dh
	SCZO = cond(bl)
	al = al - 0x1E - C
	SCZO = cond(al)
	ebx = ebx - edi
	SCZO = cond(ebx)
	dl = ~dl
	// succ:  l00402D05_thunk_fn004029D8
l00402D05_thunk_fn004029D8:
	call fn004029D8 (retsize: 0;)
	return
	// succ:  fn00402CF6_exit
fn00402CF6_exit:


// fn00402D0E
// Return size: 0
void fn00402D0E()
fn00402D0E_entry:
	// succ:  l00402D0E
l00402D0E:
	esp = fp
	Mem0[esp - 0x00000014:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	dh = dh - ch
	SCZO = cond(dh)
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	edx = edx + 0x00000001
	SZO = cond(edx)
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	eax = eax ^ ebx
	SZO = cond(eax)
	C = false
	al = al - bl
	SCZO = cond(al)
	call fn004027F4 (retsize: 4;)
	SCZDOP = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[edi:byte] = __in(edx)
	edi = edi + 0x00000001
	C = !C
	v16 = eax
	eax = edi
	edi = v16
	edx_eax = (int64) eax
fn00402D0E_exit:


// fn00402D2B
// Return size: 0
void fn00402D2B()
fn00402D2B_entry:
	// succ:  l00402D2B
l00402D2B:
	esp = fp
	edi = edi - 0x00000001
	SZO = cond(edi)
	edi = edi | eax
	SZO = cond(edi)
	C = false
	eax = eax | eax
	SZO = cond(eax)
	C = false
	branch Test(NE,Z) l00402D30_thunk_fn0040217E
	goto l00402D36
	// succ:  l00402D36 l00402D30_thunk_fn0040217E
l00402D2B:
l00402D30_thunk_fn0040217E:
	call fn0040217E (retsize: 0;)
	return
	// succ:  fn00402D2B_exit
l00402D36:
	bh = 0x86
	bh = bh ^ bl
	SZO = cond(bh)
	C = false
	bl = bl - 0x0B - C
	SCZO = cond(bl)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bl = bl + 0x01
	SZO = cond(bl)
	// succ:  l00402D41_thunk_fn00402257
l00402D41_thunk_fn00402257:
	call fn00402257 (retsize: 0;)
	return
	// succ:  fn00402D2B_exit
fn00402D2B_exit:


// fn00402D4B
// Return size: 0
void fn00402D4B()
fn00402D4B_entry:
	// succ:  l00402D4B
l00402D4B:
	esp = fp
	esi = esi - ecx
	SCZO = cond(esi)
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	cl = cl + 0xE5
	SCZO = cond(cl)
	Mem0[esp - 0x00000008:word32] = eax
	dl = dl + 0xB8 + C
	SCZO = cond(dl)
	bl = bl + 0xC8
	SCZO = cond(bl)
	dl = dl - 0x31 - C
	SCZO = cond(dl)
	goto l00402E82
	// succ:  l00402E82
l00402D4B:
l00402E80:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	branch Test(OV,O) l00402E81_thunk_fn00402E03
	goto l00402E83
	// succ:  l00402E83 l00402E81_thunk_fn00402E03
l00402E81_thunk_fn00402E03:
	call fn00402E03 (retsize: 0;)
	return
	// succ:  fn00402D4B_exit
l00402E82:
	dh = dh + 0x58 + C
	SCZO = cond(dh)
	// succ:  l00402E83
l00402E83:
	bl = al
	dl = dl | bh
	SZO = cond(dl)
	C = false
	cl = 0x4A
	edx = edx - 0x00000001
	SZO = cond(edx)
	dl = dl - cl
	SCZO = cond(dl)
	cl = cl - bl
	SCZO = cond(cl)
	call fn004021DA (retsize: 4;)
	branch Test(UGT,CZ) l00402E80
	// succ:  l00402E97 l00402E80
l00402E97:
	al = al - Mem0[(eax + 0x00000000) + eax:byte]
	SCZO = cond(al)
	v18 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v18
	SCZO = cond(v18)
	v19 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v19
	SCZO = cond(v19)
	v20 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v20
	SCZO = cond(v20)
	v21 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v21
	SCZO = cond(v21)
	v22 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v22
	SCZO = cond(v22)
	v23 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v23
	SCZO = cond(v23)
	v24 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v24
	SCZO = cond(v24)
	v25 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v25
	SCZO = cond(v25)
	v26 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v26
	SCZO = cond(v26)
	v27 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v27
	SCZO = cond(v27)
	v28 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v28
	SCZO = cond(v28)
	v29 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v29
	SCZO = cond(v29)
	v30 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v30
	SCZO = cond(v30)
	v31 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v31
	SCZO = cond(v31)
	v32 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v32
	SCZO = cond(v32)
	v33 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v33
	SCZO = cond(v33)
	v34 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v34
	SCZO = cond(v34)
	v35 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v35
	SCZO = cond(v35)
	v36 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v36
	SCZO = cond(v36)
	v37 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v37
	SCZO = cond(v37)
	v38 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v38
	SCZO = cond(v38)
	v39 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v39
	SCZO = cond(v39)
	v40 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v40
	SCZO = cond(v40)
	v41 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v41
	SCZO = cond(v41)
	v42 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v42
	SCZO = cond(v42)
	v43 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v43
	SCZO = cond(v43)
	v44 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v44
	SCZO = cond(v44)
	v45 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v45
	SCZO = cond(v45)
	v46 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v46
	SCZO = cond(v46)
	v47 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v47
	SCZO = cond(v47)
	v48 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v48
	SCZO = cond(v48)
	v49 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v49
	SCZO = cond(v49)
	v50 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v50
	SCZO = cond(v50)
	v51 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v51
	SCZO = cond(v51)
	v52 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v52
	SCZO = cond(v52)
	v53 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v53
	SCZO = cond(v53)
	v54 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v54
	SCZO = cond(v54)
	v55 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v55
	SCZO = cond(v55)
	v56 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v56
	SCZO = cond(v56)
	v57 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v57
	SCZO = cond(v57)
	v58 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v58
	SCZO = cond(v58)
	v59 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v59
	SCZO = cond(v59)
	v60 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v60
	SCZO = cond(v60)
	v61 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v61
	SCZO = cond(v61)
	v62 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v62
	SCZO = cond(v62)
	v63 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v63
	SCZO = cond(v63)
	v64 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v64
	SCZO = cond(v64)
	v65 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v65
	SCZO = cond(v65)
	v66 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v66
	SCZO = cond(v66)
	v67 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v67
	SCZO = cond(v67)
	v68 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v68
	SCZO = cond(v68)
	v69 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v69
	SCZO = cond(v69)
	v70 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v70
	SCZO = cond(v70)
	v71 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v71
	SCZO = cond(v71)
	v72 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v72
	SCZO = cond(v72)
	v73 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v73
	SCZO = cond(v73)
	v74 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v74
	SCZO = cond(v74)
	v75 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v75
	SCZO = cond(v75)
	v76 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v76
	SCZO = cond(v76)
	v77 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v77
	SCZO = cond(v77)
	v78 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v78
	SCZO = cond(v78)
	v79 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v79
	SCZO = cond(v79)
	v80 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v80
	SCZO = cond(v80)
	v81 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v81
	SCZO = cond(v81)
	v82 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v82
	SCZO = cond(v82)
	v83 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v83
	SCZO = cond(v83)
	v84 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v84
	SCZO = cond(v84)
	v85 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v85
	SCZO = cond(v85)
	v86 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v86
	SCZO = cond(v86)
	v87 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v87
	SCZO = cond(v87)
	v88 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v88
	SCZO = cond(v88)
	v89 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v89
	SCZO = cond(v89)
	v90 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v90
	SCZO = cond(v90)
	v91 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v91
	SCZO = cond(v91)
	v92 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v92
	SCZO = cond(v92)
	v93 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v93
	SCZO = cond(v93)
	v94 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v94
	SCZO = cond(v94)
	v95 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v95
	SCZO = cond(v95)
	v96 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v96
	SCZO = cond(v96)
	v97 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v97
	SCZO = cond(v97)
	v98 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v98
	SCZO = cond(v98)
	v99 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v99
	SCZO = cond(v99)
	v100 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v100
	SCZO = cond(v100)
	v101 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v101
	SCZO = cond(v101)
	v102 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v102
	SCZO = cond(v102)
	v103 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v103
	SCZO = cond(v103)
	v104 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v104
	SCZO = cond(v104)
	v105 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v105
	SCZO = cond(v105)
	v106 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v106
	SCZO = cond(v106)
	v107 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v107
	SCZO = cond(v107)
	v108 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v108
	SCZO = cond(v108)
	v109 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v109
	SCZO = cond(v109)
	v110 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v110
	SCZO = cond(v110)
	v111 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v111
	SCZO = cond(v111)
	v112 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v112
	SCZO = cond(v112)
	v113 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v113
	SCZO = cond(v113)
	v114 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v114
	SCZO = cond(v114)
	v115 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v115
	SCZO = cond(v115)
	v116 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v116
	SCZO = cond(v116)
	v117 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v117
	SCZO = cond(v117)
	v118 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v118
	SCZO = cond(v118)
	v119 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v119
	SCZO = cond(v119)
	v120 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v120
	SCZO = cond(v120)
	v121 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v121
	SCZO = cond(v121)
	v122 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v122
	SCZO = cond(v122)
	v123 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v123
	SCZO = cond(v123)
	v124 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v124
	SCZO = cond(v124)
	v125 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v125
	SCZO = cond(v125)
	v126 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v126
	SCZO = cond(v126)
	v127 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v127
	SCZO = cond(v127)
	v128 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v128
	SCZO = cond(v128)
	v129 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v129
	SCZO = cond(v129)
	v130 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v130
	SCZO = cond(v130)
	v131 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v131
	SCZO = cond(v131)
	v132 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v132
	SCZO = cond(v132)
	v133 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v133
	SCZO = cond(v133)
	v134 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v134
	SCZO = cond(v134)
	v135 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v135
	SCZO = cond(v135)
	v136 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v136
	SCZO = cond(v136)
	v137 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v137
	SCZO = cond(v137)
	v138 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v138
	SCZO = cond(v138)
	v139 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v139
	SCZO = cond(v139)
	v140 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v140
	SCZO = cond(v140)
	v141 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v141
	SCZO = cond(v141)
	v142 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v142
	SCZO = cond(v142)
	v143 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v143
	SCZO = cond(v143)
	v144 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v144
	SCZO = cond(v144)
	v145 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v145
	SCZO = cond(v145)
	v146 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v146
	SCZO = cond(v146)
	v147 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v147
	SCZO = cond(v147)
	v148 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v148
	SCZO = cond(v148)
	v149 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v149
	SCZO = cond(v149)
	v150 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v150
	SCZO = cond(v150)
	v151 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v151
	SCZO = cond(v151)
	v152 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v152
	SCZO = cond(v152)
	v153 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v153
	SCZO = cond(v153)
	v154 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v154
	SCZO = cond(v154)
	v155 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v155
	SCZO = cond(v155)
	v156 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v156
	SCZO = cond(v156)
	v157 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v157
	SCZO = cond(v157)
	v158 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v158
	SCZO = cond(v158)
	v159 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v159
	SCZO = cond(v159)
	v160 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v160
	SCZO = cond(v160)
	v161 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v161
	SCZO = cond(v161)
	v162 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v162
	SCZO = cond(v162)
	v163 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v163
	SCZO = cond(v163)
	v164 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v164
	SCZO = cond(v164)
	v165 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v165
	SCZO = cond(v165)
	v166 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v166
	SCZO = cond(v166)
	v167 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v167
	SCZO = cond(v167)
	v168 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v168
	SCZO = cond(v168)
	v169 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v169
	SCZO = cond(v169)
	v170 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v170
	SCZO = cond(v170)
	v171 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v171
	SCZO = cond(v171)
	v172 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v172
	SCZO = cond(v172)
	v173 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v173
	SCZO = cond(v173)
	v174 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v174
	SCZO = cond(v174)
	v175 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v175
	SCZO = cond(v175)
	v176 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v176
	SCZO = cond(v176)
	v177 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v177
	SCZO = cond(v177)
	v178 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v178
	SCZO = cond(v178)
	v179 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v179
	SCZO = cond(v179)
	v180 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v180
	SCZO = cond(v180)
	v181 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v181
	SCZO = cond(v181)
	v182 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v182
	SCZO = cond(v182)
	v183 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v183
	SCZO = cond(v183)
	v184 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v184
	SCZO = cond(v184)
	v185 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v185
	SCZO = cond(v185)
	v186 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v186
	SCZO = cond(v186)
	v187 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v187
	SCZO = cond(v187)
	v188 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v188
	SCZO = cond(v188)
	v189 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v189
	SCZO = cond(v189)
	v190 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v190
	SCZO = cond(v190)
	v191 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v191
	SCZO = cond(v191)
	v192 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v192
	SCZO = cond(v192)
	v193 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v193
	SCZO = cond(v193)
	v194 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v194
	SCZO = cond(v194)
	v195 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v195
	SCZO = cond(v195)
	v196 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v196
	SCZO = cond(v196)
	SZO = cond(Mem0[eax:word32] & 0x9148D138)
	C = false
	__outb(0x4A, al)
	v197 = eax
	eax = ebp
	ebp = v197
	edi = edi *s 0x23B5E0FF
	SCZO = cond(edi)
	__cli()
	v199 = (Mem0[eax:byte] & 0x01 << cl) != 0x00
	Mem0[eax:byte] = __rcr(Mem0[eax:byte], cl, C)
	C = v199
	al = al + Mem0[eax:byte]
	SCZO = cond(al)
	v200 = eax
	eax = ebp
	ebp = v200
	al = al - 0x7F - C
	SCZO = cond(al)
	v201 = Mem0[ecx + 0x44441DEC:word32] + 0x00600A21
	Mem0[ecx + 0x44441DEC:word32] = v201
	SCZO = cond(v201)
	// succ:  l00403021
l00403021:
	branch ecx == 0x00000000 l00403024
	// succ:  l00403024
l00403024:
	v202 = Mem0[edi:byte] + bh
	Mem0[edi:byte] = v202
	SCZO = cond(v202)
	v204 = Mem0[ebx + 0xFF762A41:byte] + dh
	Mem0[ebx + 0xFF762A41:byte] = v204
	SCZO = cond(v204)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	branch Test(UGT,CZ) l00403021
	// succ:  l0040302F l00403021
l0040302F:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	C = __daa(al, &al)
	eax = eax + Mem0[edx - 0x0000003F:word32] + C
	SCZO = cond(eax)
	Z = __arpl(ax, bx, &ax)
	al = al ^ 0xFF
	SZO = cond(al)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = esp
	al = al ^ 0x1C
	SZO = cond(al)
	C = false
fn00402D4B_exit:


// fn00402D8C
// Return size: 0
void fn00402D8C()
fn00402D8C_entry:
	// succ:  l00402D8C
l00402D8C:
	esp = fp
	bh = ~bh
	eax = eax - edx
	SCZO = cond(eax)
	eax = eax | esi
	SZO = cond(eax)
	C = false
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	bl = bl - 0x01
	SZO = cond(bl)
	bl = bl - 0xC8 - C
	SCZO = cond(bl)
	bl = bl - 0x01
	SZO = cond(bl)
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
l00402D8C:
fn00402D8C_exit:


// fn00402DA9
// Return size: 4
void fn00402DA9()
fn00402DA9_entry:
	// succ:  l00402DA9
l00402DA9:
	esp = fp
	Mem0[esp - 0x00000018:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx + ebx
	SCZO = cond(edx)
	bh = bh - 0x01
	SZO = cond(bh)
	dh = dh - 0xCA - C
	SCZO = cond(dh)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bl = bl + 0x76
	SCZO = cond(bl)
	ah = ah + 0xD0 + C
	SCZO = cond(ah)
	bh = bh + 0xD3 + C
	SCZO = cond(bh)
	al = al ^ bl
	SZO = cond(al)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	// succ:  l00402DC1_thunk_fn004022A6
l00402DC1_thunk_fn004022A6:
	call fn004022A6 (retsize: 4;)
	return
	// succ:  fn00402DA9_exit
fn00402DA9_exit:


// fn00402DE7
// Return size: 0
void fn00402DE7()
fn00402DE7_entry:
	// succ:  l00402DE7
l00402DE7:
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bl = bl | ch
	SZO = cond(bl)
	C = false
	dh = dh - 0xA0
	SCZO = cond(dh)
	ebx = ebx - ecx
	SCZO = cond(ebx)
	ah = -ah
	SCZO = cond(ah)
	C = ah == 0x00
	bh = bh + 0x93 + C
	SCZO = cond(bh)
	bh = bh + 0x01
	SZO = cond(bh)
fn00402DE7_exit:


// fn00402E03
// Return size: 0
void fn00402E03()
fn00402E03_entry:
	goto l00402E03
	// succ:  l00402E03
l0040292D:
	ebx = ebx | eax
	SZO = cond(ebx)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	// succ:  l0040292F_thunk_fn00402930
l0040292F_thunk_fn00402930:
	call fn00402930 (retsize: 0;)
	return
	// succ:  fn00402E03_exit
l00402E03:
	esp = fp
	Mem0[esp - 0x0000000C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax - 0x584372C7
	SCZO = cond(eax)
	bh = bh + 0x01
	SZO = cond(bh)
	bl = 0x13
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	bh = ~bh
	branch Test(OV,O) l0040292D
	// succ:  l00402E1B l0040292D
l00402E1B:
	esp = esp - 0x00000002
	Mem0[esp:word16] = dx
	dx = Mem0[esp:word16]
	esp = esp + 0x00000002
	v13 = bl
	bl = bl
	bl = v13
	branch Test(NO,O) l0040292D
	// succ:  l00402E27 l0040292D
l00402E27:
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = es
	SCZO = cond(al - Mem0[edi:byte])
	edi = edi + 0x00000001
	eax = Mem0[0x80DF0B2C:word32]
	// succ:  l00402E2A_thunk_fn00402E2C
l00402E2A_thunk_fn00402E2C:
	call fn00402E2C (retsize: 0;)
	return
	// succ:  fn00402E03_exit
fn00402E03_exit:


// fn00402E2C
// Return size: 0
void fn00402E2C()
fn00402E2C_entry:
	// succ:  l00402E2C
l00402E2C:
	esp = fp
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	bh = bh + 0x78
	SCZO = cond(bh)
	bh = ~bh
	esi = esi | eax
	SZO = cond(esi)
	C = false
	bl = bl - 0xF4 - C
	SCZO = cond(bl)
	bl = ~bl
	edx = edx + ecx
	SCZO = cond(edx)
	call fn004029AD (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	eax = eax + 0x00000001
	SZO = cond(eax)
	v15 = Mem0[eax + 0xC3E2D5D0:word32] - ebp
	Mem0[eax + 0xC3E2D5D0:word32] = v15
	SCZO = cond(v15)
	goto l00402E42_thunk_fn00402E48
	// succ:  l00402E42_thunk_fn00402E48
l00402E2C:
	Mem0[eax - 0x0000000A:word32] = 0x80F00BD7
l00402E42_thunk_fn00402E48:
	call fn00402E48 (retsize: 0;)
	return
	// succ:  fn00402E2C_exit
fn00402E2C_exit:


// fn00402E48
// Return size: 0
void fn00402E48()
fn00402E48_entry:
	// succ:  l00402E48
l00402E48:
	esp = fp
	edi = edi - eax
	SCZO = cond(edi)
	al = al - bl
	SCZO = cond(al)
	dh = dh + 0xF8
	SCZO = cond(dh)
	ah = ah - 0x01
	SZO = cond(ah)
	edx = edx - edi
	SCZO = cond(edx)
	ah = ~ah
	bl = ~bl
	ah = ah + al
	SCZO = cond(ah)
fn00402E48_exit:


// fn00402E62
// Return size: 0
void fn00402E62()
fn00402E62_entry:
	goto l00402E62
	// succ:  l00402E62
l004026C4:
	ah = ah + 0x11
	SCZO = cond(ah)
	goto l004026C7
	// succ:  l004026C7
l004026D4_thunk_fn00402DE7:
	call fn00402DE7 (retsize: 0;)
	return
	// succ:  fn00402E62_exit
l00402E62:
	esp = esp + 0x00000004
	al = ~al
	bh = 0xA0
	dh = Mem0[edi:byte]
	al = al + 0xE0
	SCZO = cond(al)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	eax = eax + edx
	SCZO = cond(eax)
	bh = ~bh
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	eax = esi
	goto l004026C4
	// succ:  l004026C4
fn00402E62_exit:


