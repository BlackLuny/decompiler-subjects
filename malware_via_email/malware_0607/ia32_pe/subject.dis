// fn0040101F
// Return size: 0
void fn0040101F()
fn0040101F_entry:
	// succ:  l0040101F
l0040101F:
	esp = fp
	Mem0[esp - 0x00000028:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	edx = edx | ecx
	SZO = cond(edx)
	C = false
	esi = esi + ebx
	SCZO = cond(esi)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ecx = ebx
fn0040101F_exit:


// fn0040105B
// Return size: 0
void fn0040105B()
fn0040105B_entry:
	// succ:  l0040105B
l0040105B:
	esp = fp
	esi = edx
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	eax = Mem0[eax + 0x00000090:word32]
	goto l0040105F_thunk_fn00401064
	// succ:  l0040105F_thunk_fn00401064
l0040105B:
l0040105F_thunk_fn00401064:
	call fn00401064 (retsize: 0;)
	return
	// succ:  fn0040105B_exit
fn0040105B_exit:


// fn00401064
// Return size: 0
void fn00401064()
fn00401064_entry:
	// succ:  l00401064
l00401064:
	esp = fp
	v5 = Mem0[ebx:byte] + ch
	Mem0[ebx:byte] = v5
	SCZO = cond(v5)
l00401064:
	edx = edx - esi
	SCZO = cond(edx)
	edx = edx | eax
	SZO = cond(edx)
	C = false
	edx = edi
	// succ:  l0040106B_thunk_fn00401278
l0040106B_thunk_fn00401278:
	call fn00401278 (retsize: 0;)
	return
	// succ:  fn00401064_exit
fn00401064_exit:


// fn00401074
// Return size: 0
void fn00401074()
fn00401074_entry:
	// succ:  l00401074
l00401074:
	esp = fp
	Mem0[esp:word32] = edx
	cl = cl
fn00401074_exit:


// fn004010A8
// Return size: 0
void fn004010A8()
fn004010A8_entry:
	// succ:  l004010A8
l004010A8:
	esp = fp
	esi = esi - ebx
	SCZO = cond(esi)
	esi = esi + 0x00000001
	SZO = cond(esi)
	edi = edi + 0x00000001
	SZO = cond(edi)
	esi = edi
	edx = edx + 0x00000001
	SZO = cond(edx)
	ebx = ebx | edx
	SZO = cond(ebx)
	C = false
	edx = edx + 0x00000001
	SZO = cond(edx)
	esi = esi - 0x00000001
	SZO = cond(esi)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	edx = edi
	call fn00401074 (retsize: 4;)
	eax = eax | ecx
	SZO = cond(eax)
	C = false
	edx = 0x448F1CB0
	goto l004010BD_thunk_fn004010C2
	// succ:  l004010BD_thunk_fn004010C2
l004010A8:
	esi = esi - ebx
	SCZO = cond(esi)
	esi = esi + 0x00000001
	SZO = cond(esi)
	edi = edi + 0x00000001
	SZO = cond(edi)
	esi = edi
	edx = edx + 0x00000001
	SZO = cond(edx)
	ebx = ebx | edx
	SZO = cond(ebx)
	C = false
	edx = edx + 0x00000001
	SZO = cond(edx)
	esi = esi - 0x00000001
	SZO = cond(esi)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	edx = edi
	call fn00401074 (retsize: 4;)
	eax = eax | ecx
	SZO = cond(eax)
	C = false
	edx = 0x448F1CB0
	goto l004010BD_thunk_fn004010C2
	// succ:  l004010BD_thunk_fn004010C2
l004010BD_thunk_fn004010C2:
	call fn004010C2 (retsize: 0;)
	return
	// succ:  fn004010A8_exit
l004010BD_thunk_fn004010C2:
	call fn004010C2 (retsize: 0;)
	return
	// succ:  fn004010A8_exit
fn004010A8_exit:


// fn004010C0
// Return size: 0
void fn004010C0()
fn004010C0_entry:
	// succ:  l004010C0
l004010C0:
	Mem0[esp - 0x00000028:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l004010C0_thunk_fn004010C2
l004010C0_thunk_fn004010C2:
	call fn004010C2 (retsize: 0;)
	return
	// succ:  fn004010C0_exit
fn004010C0_exit:


// fn004010C2
// Return size: 0
void fn004010C2()
fn004010C2_entry:
	// succ:  l004010C2
l004010C2:
	esp = fp
	al = al & 0xD8
	SZO = cond(al)
	C = false
	ebx = ebx + ecx
	SCZO = cond(ebx)
	edi = edi - edx
	SCZO = cond(edi)
	edi = edi + 0x00000001
	SZO = cond(edi)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ebx = edi
	edi = edi - 0x00000001
	SZO = cond(edi)
	edi = edi + ecx
	SCZO = cond(edi)
	branch Test(SG,S) l004010D1_thunk_fn00401162
	goto l004010D1_thunk_fn004010D7
	// succ:  l004010D1_thunk_fn004010D7 l004010D1_thunk_fn00401162
l004010C2:
	ebx = ebx + ecx
	SCZO = cond(ebx)
	edi = edi - edx
	SCZO = cond(edi)
	edi = edi + 0x00000001
	SZO = cond(edi)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ebx = edi
	edi = edi - 0x00000001
	SZO = cond(edi)
	edi = edi + ecx
	SCZO = cond(edi)
	branch Test(SG,S) l00401162
	// succ:  l004010CF_thunk_fn004010D7 l004010CF_thunk_fn00401162
l004010CF_thunk_fn004010D7:
	call fn004010D7 (retsize: 0;)
	return
	// succ:  fn004010C2_exit
l004010CF_thunk_fn00401162:
	call fn00401162 (retsize: 0;)
	return
	// succ:  fn004010C2_exit
l004010D1_thunk_fn004010D7:
	call fn004010D7 (retsize: 0;)
	return
	// succ:  fn004010C2_exit l004010D1_thunk_fn004010D7
l004010D1_thunk_fn004010D7:
	call fn004010D7 (retsize: 0;)
	return
	// succ:  fn004010C2_exit
l004010D1_thunk_fn00401162:
	call fn00401162 (retsize: 0;)
	return
	// succ:  fn004010C2_exit
fn004010C2_exit:


// fn004010D7
// Return size: 0
void fn004010D7()
fn004010D7_entry:
	// succ:  l004010D7
l004010D7:
fn004010D7_exit:


// fn004010E6
// Return size: 0
void fn004010E6()
fn004010E6_entry:
	goto l004010E6
	// succ:  l004010E6
l00400FEC:
	v21 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v21
	SCZO = cond(v21)
	v22 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v22
	SCZO = cond(v22)
	v23 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v23
	SCZO = cond(v23)
	v24 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v24
	SCZO = cond(v24)
	v25 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v25
	SCZO = cond(v25)
	v26 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v26
	SCZO = cond(v26)
	v27 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v27
	SCZO = cond(v27)
	v28 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v28
	SCZO = cond(v28)
	v29 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v29
	SCZO = cond(v29)
	v30 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v30
	SCZO = cond(v30)
	__lock()
	branch ecx == 0x00000000 l00401001_thunk_fn00401064
	goto l00401003
	// succ:  l00401003 l00401001_thunk_fn00401064
l00401001_thunk_fn00401064:
	call fn00401064 (retsize: 0;)
	return
	// succ:  fn004010E6_exit
l00401003:
	v31 = Mem0[ebx:word32] ^ ecx
	Mem0[ebx:word32] = v31
	SZO = cond(Mem0[ebx:word32])
	C = false
l00401037:
	dh = dh + bh
	SCZO = cond(dh)
	dl = dl + 0x75 + C
	SCZO = cond(dl)
	ebx = edx
	ch = ch + 0x55
	SCZO = cond(ch)
	dl = dl - 0xE3 - C
	SCZO = cond(dl)
	dh = 0x77
	bl = bl + 0xF2
	SCZO = cond(bl)
	ch = ch ^ dh
	SZO = cond(ch)
	C = false
	edx = edx - ebx
	SCZO = cond(edx)
	cl = cl - bl
	SCZO = cond(cl)
	call fn00401225 (retsize: 4;)
	goto l00400FEC
	// succ:  l00400FEC
l0040108A:
	bl = bl - 0xA0 - C
	SCZO = cond(bl)
	cl = 0xBF
	edx = ebx
	dh = dh - 0xA0 - C
	SCZO = cond(dh)
	edx = edx + 0x00000001
	SZO = cond(edx)
	esi = ecx
	branch Test(LE,SZO) l00401037
	// succ:  l00401099 l00401037
l00401099:
	bl = bl
	// succ:  l004010A0
l004010A0:
	branch Test(GT,SZO) l00401037
	// succ:  l004010A2 l00401037
l004010A2:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx + Mem0[edx - 0x0000004E:word32] + C
	SCZO = cond(ebx)
	eax = Mem0[esi:word32]
	esi = esi + 0x00000004
	// succ:  l004010A7_thunk_fn004010A8
l004010A7_thunk_fn004010A8:
	call fn004010A8 (retsize: 0;)
	return
	// succ:  fn004010E6_exit
l004010E6:
	esp = fp
	esp = esp + 0x00000004
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ecx = ecx - edx
	SCZO = cond(ecx)
	edx = edx - edi
	SCZO = cond(edx)
	ecx = ecx | ebx
	SZO = cond(ecx)
	C = false
	bh = bh + 0x7F + C
	SCZO = cond(bh)
	ecx = ebx
	branch Test(OV,O) l0040108A
	// succ:  l004010FA l0040108A
l004010FA:
	eax = eax
	bl = bl
	branch Test(NO,O) l0040108A
	// succ:  l00401100 l0040108A
l00401100:
fn004010E6_exit:


// fn00401105
// Return size: 0
void fn00401105()
fn00401105_entry:
	// succ:  l00401105
l00401105:
	esp = fp
	ecx = ecx ^ eax
	SZO = cond(ecx)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	edx = edx | edi
	SZO = cond(edx)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ecx = ecx ^ eax
	SZO = cond(ecx)
	C = false
	ebx = ebx + edx
	SCZO = cond(ebx)
	goto l0040123F
	// succ:  l0040123F
l00401105:
l00401190:
	esi = esi | edi
	SZO = cond(esi)
	C = false
	esi = edx
	eax = eax ^ edx
	SZO = cond(eax)
	C = false
	edx = edx - 0x00000001
	SZO = cond(edx)
	ecx = ecx - eax
	SCZO = cond(ecx)
	edi = edi - esi
	SCZO = cond(edi)
	esi = esi + 0x00000001
	SZO = cond(esi)
	edi = edi - 0x00000001
	SZO = cond(edi)
	// succ:  l0040119D_thunk_fn004010A8
l0040119D_thunk_fn004010A8:
	call fn004010A8 (retsize: 0;)
	return
	// succ:  fn00401105_exit
l0040123F:
	edi = edi + 0x00000001
	SZO = cond(edi)
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	edi = edi + ecx
	SCZO = cond(edi)
	esi = edx
	ecx = ecx - esi
	SCZO = cond(ecx)
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi | eax
	SZO = cond(esi)
	C = false
	ecx = ecx | edx
	SZO = cond(ecx)
	C = false
	edi = edi + edx
	SCZO = cond(edi)
	ebx = ebx - esi
	SCZO = cond(ebx)
	goto l00401190
	// succ:  l00401190
fn00401105_exit:


// fn0040111B
// Return size: 0
void fn0040111B()
fn0040111B_entry:
	// succ:  l0040111B
l0040111B:
	esp = fp
	esi = ebx
	edx = edx - 0x00000001
	SZO = cond(edx)
	esi = esi - edx
	SCZO = cond(esi)
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	ecx = ecx | edi
	SZO = cond(ecx)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edx = edx - ebx
	SCZO = cond(edx)
	edi = edi - 0x00000001
	SZO = cond(edi)
	edx = edx | ecx
	SZO = cond(edx)
	C = false
	ecx = ecx + esi
	SCZO = cond(ecx)
	branch Test(LT,SO) l0040113B
	goto l0040112E
	// succ:  l0040112E l0040113B
l0040111B:
l0040112E:
	// succ:  l00401133
l00401133:
	v20 = ch
	ch = ch
	ch = v20
	branch Test(GE,SO) l0040113B
	// succ:  l00401137 l0040113B
l00401137:
	v22 = Mem0[esi:word32]
	Mem0[esi:word32] = esi
	esi = v22
l0040113B:
	eax = eax - 0xEEEEEEEE
	SCZO = cond(eax)
	edx = edx ^ ecx
	SZO = cond(edx)
	C = false
	edi = edi ^ eax
	SZO = cond(edi)
	C = false
	edi = edi | eax
	SZO = cond(edi)
	C = false
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	branch Test(PE,P) l0040114D_thunk_fn004012CA
	goto l00401153
	// succ:  l00401153 l0040114D_thunk_fn004012CA
l0040114D_thunk_fn004012CA:
	call fn004012CA (retsize: 0;)
	return
	// succ:  fn0040111B_exit
l00401153:
	dh = dh
	branch Test(PO,P) l00401155_thunk_fn004012CA
	goto l0040115B
	// succ:  l0040115B l00401155_thunk_fn004012CA
l00401155_thunk_fn004012CA:
	call fn004012CA (retsize: 0;)
	return
	// succ:  fn0040111B_exit
l0040115B:
	D = true
	eax = (int32) ax
	C = __aaa(al, ah, &al, &ah)
	branch Test(NO,O) l0040115E_thunk_fn004011D7
	goto l00401160
	// succ:  l00401160 l0040115E_thunk_fn004011D7
l0040115E_thunk_fn004011D7:
	call fn004011D7 (retsize: 0;)
	return
	// succ:  fn0040111B_exit
l00401160:
	al = al + 0xA0 + C
	SCZO = cond(al)
	// succ:  l00401160_thunk_fn00401162
l00401160_thunk_fn00401162:
	call fn00401162 (retsize: 0;)
	return
	// succ:  fn0040111B_exit
fn0040111B_exit:


// fn00401162
// Return size: 0
void fn00401162()
fn00401162_entry:
	// succ:  l00401162
l00401162:
	ebx = ecx
	ebx = ebx + edx
	SCZO = cond(ebx)
	esi = esi - 0x00000001
	SZO = cond(esi)
	ebx = eax
	edi = edi | ecx
	SZO = cond(edi)
	C = false
	ecx = ecx | eax
	SZO = cond(ecx)
	C = false
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	call fn004010E6 (retsize: 4;)
	edx_eax = (int64) eax
	al = Mem0[ebx + (uint32) al:byte]
	dh = 0xDB
	Mem0[edi:word32] = __in(edx)
	edi = edi + 0x00000004
	__hlt()
fn00401162_exit:


// fn0040117B
// Return size: 0
void fn0040117B()
fn0040117B_entry:
	// succ:  l0040117B
l0040117B:
	esp = fp
	ebx = ebx + edi
	SCZO = cond(ebx)
	ecx = ecx | esi
	SZO = cond(ecx)
	C = false
	ebx = ebx | edx
	SZO = cond(ebx)
	C = false
	edx = ebx
	edi = edi - esi
	SCZO = cond(edi)
	ebx = ebx - ecx
	SCZO = cond(ebx)
	goto l004011A9
	// succ:  l004011A9
l0040117B:
l004011A9:
	edi = ecx
	edx = edx | esi
	SZO = cond(edx)
	C = false
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ebx = ebx - edi
	SCZO = cond(ebx)
	edi = edi - ecx
	SCZO = cond(edi)
	eax = Mem0[eax + 0x00000008:word32]
	// succ:  l004011B2_thunk_fn004011B5
l004011B2_thunk_fn004011B5:
	call fn004011B5 (retsize: 0;)
	return
	// succ:  fn0040117B_exit
fn0040117B_exit:


// fn004011B5
// Return size: 0
void fn004011B5()
fn004011B5_entry:
	// succ:  l004011B5
l004011B5:
	esp = fp
	edx = edx + ebx
	SCZO = cond(edx)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	edx = edx - 0x00000001
	SZO = cond(edx)
	goto l004011B9_thunk_fn0040128C
	// succ:  l004011B9_thunk_fn0040128C
l004011B5:
	edx = edx + ebx
	SCZO = cond(edx)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	edx = edx - 0x00000001
	SZO = cond(edx)
	goto l004011B9_thunk_fn0040128C
	// succ:  l004011B9_thunk_fn0040128C
l004011B9_thunk_fn0040128C:
	call fn0040128C (retsize: 0;)
	return
	// succ:  fn004011B5_exit
l004011B9_thunk_fn0040128C:
	call fn0040128C (retsize: 0;)
	return
	// succ:  fn004011B5_exit
fn004011B5_exit:


// fn004011C6
// Return size: 0
void fn004011C6()
fn004011C6_entry:
	// succ:  l004011C6
l004011C6:
	esp = esp + 0x00000004
	edx = edx - edi
	SCZO = cond(edx)
	edx = ebx
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	edi = edi + 0x00000001
	SZO = cond(edi)
	edx = edx - edi
	SCZO = cond(edx)
	eax = Mem0[eax:word32]
	branch Test(EQ,Z) l004011D4_thunk_fn0040117B
	goto l004011D6
	// succ:  l004011D6 l004011D4_thunk_fn0040117B
l004011D4_thunk_fn0040117B:
	call fn0040117B (retsize: 0;)
	return
	// succ:  fn004011C6_exit
l004011D6:
fn004011C6_exit:


// fn004011D7
// Return size: 0
void fn004011D7()
fn004011D7_entry:
	// succ:  l004011D7
l004011D7:
	esp = fp
	v3 = bh
	bh = bh
	bh = v3
	branch Test(NE,Z) l004011D9_thunk_fn0040117B
	goto l004011DB
	// succ:  l004011DB l004011D9_thunk_fn0040117B
l004011D7:
l004011D9_thunk_fn0040117B:
	call fn0040117B (retsize: 0;)
	return
	// succ:  fn004011D7_exit
l004011DB:
	al = al & 0xCD
	SZO = cond(al)
	C = false
	Mem0[0x961B81BA:word32] = eax
	// succ:  l004011DD_thunk_fn004011E2
l004011DD_thunk_fn004011E2:
	call fn004011E2 (retsize: 0;)
	return
	// succ:  fn004011D7_exit
fn004011D7_exit:


// fn004011E2
// Return size: 0
void fn004011E2()
fn004011E2_entry:
	// succ:  l004011E2
l004011E2:
	edi = edi - edx
	SCZO = cond(edi)
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	edi = edi | esi
	SZO = cond(edi)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edx = edx | eax
	SZO = cond(edx)
	C = false
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	branch Test(LT,SO) l004011ED_thunk_fn0040111B
	goto l004011F3
	// succ:  l004011F3 l004011ED_thunk_fn0040111B
l004011ED_thunk_fn0040111B:
	call fn0040111B (retsize: 0;)
	return
	// succ:  fn004011E2_exit
l004011F3:
fn004011E2_exit:


// fn00401201
// Return size: 0
void fn00401201()
fn00401201_entry:
	// succ:  l00401201
l00401201:
	esp = fp
	ecx = ecx | edi
	SZO = cond(ecx)
	C = false
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	edi = edi + 0x00000001
	SZO = cond(edi)
	edx = edx + ebx
	SCZO = cond(edx)
	edx = edx ^ esi
	SZO = cond(edx)
	C = false
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	ecx = ecx | ebx
	SZO = cond(ecx)
	C = false
	edx = edx - esi
	SCZO = cond(edx)
	branch Test(ULT,C) l00401210_thunk_fn0040105B
	goto l00401216
	// succ:  l00401216 l00401210_thunk_fn0040105B
l00401201:
l00401210_thunk_fn0040105B:
	call fn0040105B (retsize: 0;)
	return
	// succ:  fn00401201_exit
l00401216:
	ah = ah
	branch Test(UGE,C) l00401218_thunk_fn0040105B
	goto l0040121E
	// succ:  l0040121E l00401218_thunk_fn0040105B
l00401218_thunk_fn0040105B:
	call fn0040105B (retsize: 0;)
	return
	// succ:  fn00401201_exit
l0040121E:
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	v14 = eax
	eax = ebx
	ebx = v14
	bh = Mem0[edi - 0x0000005A:byte]
	branch Test(OV,O) l00401224_thunk_fn004011B5
	goto l00401224_thunk_fn00401226
	// succ:  l00401224_thunk_fn00401226 l00401224_thunk_fn004011B5
l00401224_thunk_fn004011B5:
	call fn004011B5 (retsize: 0;)
	return
	// succ:  fn00401201_exit
l00401224_thunk_fn00401226:
	call fn00401226 (retsize: 0;)
	return
	// succ:  fn00401201_exit l00401224_thunk_fn00401226
l00401224_thunk_fn00401226:
	call fn00401226 (retsize: 0;)
	return
	// succ:  fn00401201_exit
fn00401201_exit:


// fn00401225
// Return size: 0
void fn00401225()
fn00401225_entry:
	// succ:  l00401225
l00401225:
	esp = fp
	Mem0[esp - 0x00000034:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00401225_thunk_fn00401226
l00401225_thunk_fn00401226:
	call fn00401226 (retsize: 0;)
	return
	// succ:  fn00401225_exit
fn00401225_exit:


// fn00401226
// Return size: 0
void fn00401226()
fn00401226_entry:
	// succ:  l00401226
l00401226:
	esp = fp
	esp = esp + 0x00000001
	SZO = cond(esp)
	al = al & 0xCC
	SZO = cond(al)
	C = false
	ecx = ecx - edi
	SCZO = cond(ecx)
	bh = bh + bl
	SCZO = cond(bh)
	dh = ~dh
	edi = edi + 0x00000001
	SZO = cond(edi)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	dh = dh ^ ch
	SZO = cond(dh)
	C = false
	bl = bl + 0xD0
	SCZO = cond(bl)
	dh = dh - cl
	SCZO = cond(dh)
	goto l00401238_thunk_fn0040125A
	// succ:  l00401238_thunk_fn0040125A
l00401226:
	ecx = ecx - edi
	SCZO = cond(ecx)
	bh = bh + bl
	SCZO = cond(bh)
	dh = ~dh
	edi = edi + 0x00000001
	SZO = cond(edi)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	dh = dh ^ ch
	SZO = cond(dh)
	C = false
	bl = bl + 0xD0
	SCZO = cond(bl)
	dh = dh - cl
	SCZO = cond(dh)
	// succ:  l00401233_thunk_fn0040125A
l00401233_thunk_fn0040125A:
	call fn0040125A (retsize: 0;)
	return
	// succ:  fn00401226_exit
l00401238_thunk_fn0040125A:
	call fn0040125A (retsize: 0;)
	return
	// succ:  fn00401226_exit
fn00401226_exit:


// fn0040125A
// Return size: 0
void fn0040125A()
fn0040125A_entry:
	// succ:  l0040125A
l0040125A:
	dh = dh | ah
	SZO = cond(dh)
	C = false
	ecx = ecx - edx
	SCZO = cond(ecx)
	dl = dl - bl
	SCZO = cond(dl)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	esi = edx
	ch = ~ch
	ch = ch + 0x61
	SCZO = cond(ch)
	dh = ~dh
	dh = dh - cl
	SCZO = cond(dh)
	call fn0040101F (retsize: 4;)
	eax = eax + 0xB40CF89D
	SCZO = cond(eax)
	int3()
	eax = Mem0[0xD68BFE33:word32]
	// succ:  l00401277_thunk_fn0040127C
l00401277_thunk_fn0040127C:
	call fn0040127C (retsize: 0;)
	return
	// succ:  fn0040125A_exit
fn0040125A_exit:


// fn00401278
// Return size: 0
void fn00401278()
fn00401278_entry:
	// succ:  l00401278
l00401278:
	esp = fp
	edi = edi ^ esi
	SZO = cond(edi)
	C = false
	edx = esi
	goto l0040127A_thunk_fn0040127C
	// succ:  l0040127A_thunk_fn0040127C
l00401278:
l0040127A_thunk_fn0040127C:
	call fn0040127C (retsize: 0;)
	return
	// succ:  fn00401278_exit
fn00401278_exit:


// fn0040127C
// Return size: 0
void fn0040127C()
fn0040127C_entry:
	// succ:  l0040127C
l0040127C:
	esp = fp
	edx = edx - eax
	SCZO = cond(edx)
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	ecx = ecx - edx
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SZO = cond(edx)
	call fn004011C6 (retsize: 4;)
	Mem0[edi:word32] = __in(edx)
	edi = edi + 0x00000004
	al = al + 0x6D + C
	SCZO = cond(al)
	v14 = Mem0[ebx:word32] >>u cl
	Mem0[ebx:word32] = v14
	SCZO = cond(v14)
	goto l0040128B_thunk_fn0040128D
	// succ:  l0040128B_thunk_fn0040128D
l0040127C:
	edx = edx - eax
	SCZO = cond(edx)
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	ecx = ecx - edx
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SZO = cond(edx)
l0040128B_thunk_fn0040128D:
	call fn0040128D (retsize: 0;)
	return
	// succ:  fn0040127C_exit
fn0040127C_exit:


// fn0040128C
// Return size: 0
void fn0040128C()
fn0040128C_entry:
	// succ:  l0040128C
l0040128C:
	esp = fp
	edi = edi - ecx
	SCZO = cond(edi)
	goto l0040128C_thunk_fn0040128D
	// succ:  l0040128C_thunk_fn0040128D
l0040128C:
l0040128C_thunk_fn0040128D:
	call fn0040128D (retsize: 0;)
	return
	// succ:  fn0040128C_exit
fn0040128C_exit:


// fn0040128D
// Return size: 0
void fn0040128D()
fn0040128D_entry:
	// succ:  l0040128D
l0040128D:
	esp = fp
	C = true
	ecx = ecx | esi
	SZO = cond(ecx)
	C = false
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	esi = esi + 0x00000001
	SZO = cond(esi)
	edi = edi + edx
	SCZO = cond(edi)
	esi = edi
	ebx = ebx - eax
	SCZO = cond(ebx)
	edi = edi + 0x00000001
	SZO = cond(edi)
	eax = eax & 0xEEEEEEEE
	SZO = cond(eax)
	C = false
	edi = ecx
	goto l004012A0_thunk_fn004011E2
	// succ:  l004012A0_thunk_fn004011E2
l0040128D:
	ecx = ecx | esi
	SZO = cond(ecx)
	C = false
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	esi = esi + 0x00000001
	SZO = cond(esi)
	edi = edi + edx
	SCZO = cond(edi)
	esi = edi
	ebx = ebx - eax
	SCZO = cond(ebx)
	edi = edi + 0x00000001
	SZO = cond(edi)
	eax = eax & 0xEEEEEEEE
	SZO = cond(eax)
	C = false
	edi = ecx
l004012A0_thunk_fn004011E2:
	call fn004011E2 (retsize: 0;)
	return
	// succ:  fn0040128D_exit
fn0040128D_exit:


// fn004012AA
// Return size: 0
void fn004012AA()
fn004012AA_entry:
	// succ:  l004012AA
l004012AA:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	esi = esi ^ ecx
	SZO = cond(esi)
	C = false
	esi = esi - ebx
	SCZO = cond(esi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	edx = edx + 0x00000001
	SZO = cond(edx)
	edi = ebx
	esi = eax
	edi = esi
	ebx = ebx + edi
	SCZO = cond(ebx)
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
fn004012AA_exit:


// fn004012CA
// Return size: 0
void fn004012CA()
fn004012CA_entry:
	// succ:  l004012CA
l004012CA:
	esp = fp
	edi = edi - ebx
	SCZO = cond(edi)
	edx = edx | edi
	SZO = cond(edx)
	C = false
	edx = eax
	ecx = edx
	eax = eax | eax
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l004012D4_thunk_fn00401105
	goto l004012DA
	// succ:  l004012DA l004012D4_thunk_fn00401105
l004012CA:
l004012D4_thunk_fn00401105:
	call fn00401105 (retsize: 0;)
	return
	// succ:  fn004012CA_exit
l004012DA:
	return
	// succ:  fn004012CA_exit
fn004012CA_exit:


// fn004012F3
// Return size: 0
void fn004012F3()
fn004012F3_entry:
	goto l004012F3
	// succ:  l004012F3
l00401004:
	esi = esi | edx
	SZO = cond(esi)
	C = false
	goto l00401005
	// succ:  l00401005
l0040100E_thunk_fn00401201:
	call fn00401201 (retsize: 0;)
	return
	// succ:  fn004012F3_exit
l00401014:
l004012F3:
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = ebx
	ebx = v3
	v5 = edi
	edi = edi
	edi = v5
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = edi
	edi = edx
	edi = edi - 0x00000001
	SZO = cond(edi)
	edx = esi
	edx = edx - 0x00000001
	SZO = cond(edx)
	eax = Mem0[fs:0x00000030:word32]
	ebx = ebx - ecx
	SCZO = cond(ebx)
	goto l00401004
	// succ:  l00401004
fn004012F3_exit:


