// fn00401027
// Return size: 0
void fn00401027()
fn00401027_entry:
	// succ:  l00401027
l00401027:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = eax
	eax = v3
	branch Test(GE,SO) l0040102C
	// succ:  l0040102C
l0040102C:
	cl = cl
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi | eax
	SZO = cond(edi)
	C = false
	edi = edx
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ecx = edx
	edx = edx + 0x00000001
	SZO = cond(edx)
	edx = ecx
	esi = 0xBD6B978D
	eax = edi
	ecx = ecx | ebx
	SZO = cond(ecx)
	C = false
	edx = edx + 0x00000001
	SZO = cond(edx)
	eax = eax - 0x00000001
	SZO = cond(eax)
	edx = edi
	call fn00401418 (retsize: 4;)
fn00401027_exit:


// fn00401053
// Return size: 0
void fn00401053()
fn00401053_entry:
	// succ:  l00401053
l00401053:
	esp = fp
	Mem0[esp - 0x00000030:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edx = edx + 0x00000001
	SZO = cond(edx)
	ebx = ebx | eax
	SZO = cond(ebx)
	C = false
	edx = edx - 0x00000001
	SZO = cond(edx)
	esi = esi | ecx
	SZO = cond(esi)
	C = false
	edx = edx - 0x00000001
	SZO = cond(edx)
	esi = esi + 0x00000001
	SZO = cond(esi)
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	edi = edi + 0x00000001
	SZO = cond(edi)
	edi = edi - 0x00000001
	SZO = cond(edi)
	call fn00401205 (retsize: 4;)
	branch Test(EQ,Z) l004010E4
	// succ:  l00401070 l004010E4
l00401070:
l004010E4:
	edx = edx - 0x00000001
	SZO = cond(edx)
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	esi = esi | edx
	SZO = cond(esi)
	C = false
	esi = ecx
	edx = edx - 0x00000001
	SZO = cond(edx)
	esi = ecx
	edi = edi - 0x00000001
	SZO = cond(edi)
	esi = ebx
	esi = esi - 0x00000001
	SZO = cond(esi)
	edi = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[ecx + 0x00000008:word32]
	esi = esi + 0x00000001
	SZO = cond(esi)
	edi = ecx
	esi = esi - 0x00000001
	SZO = cond(esi)
	edx = edi
	call fn00401072 (retsize: 4;)
	eax = eax & 0xE8747474
	SZO = cond(eax)
	C = false
	// succ:  l00401103_thunk_fn00401108
l00401103_thunk_fn00401108:
	call fn00401108 (retsize: 0;)
	return
	// succ:  fn00401053_exit
fn00401053_exit:


// fn00401072
// Return size: 0
void fn00401072()
fn00401072_entry:
	// succ:  l00401072
l00401072:
	esp = fp
	Mem0[esp:word32] = ecx
fn00401072_exit:


// fn004010BC
// Return size: 0
void fn004010BC()
fn004010BC_entry:
	// succ:  l004010BC
l004010BC:
	esp = fp
	esp = esp + 0x00000004
	esi = esi - 0x00000001
	SZO = cond(esi)
	cl = al
	ch = ch - dh
	SCZO = cond(ch)
	edi = edi - 0x00000001
	SZO = cond(edi)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	bh = bh ^ cl
	SZO = cond(bh)
	C = false
	bl = 0x77
	edi = edi + 0x00000001
	SZO = cond(edi)
	ch = ch ^ bh
	SZO = cond(ch)
	C = false
	cl = 0x4C
	bh = bh - bl
	SCZO = cond(bh)
	cl = bl
	cl = cl ^ al
	SZO = cond(cl)
	C = false
	call fn004011B7 (retsize: 4;)
fn004010BC_exit:


// fn00401108
// Return size: 0
void fn00401108()
fn00401108_entry:
	// succ:  l00401108
l00401108:
	esp = fp
	Mem0[esp - 0x00000034:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l0040110C
l0040110C:
	al = 0x21
	esi = esi + 0xB3E90627
	SCZO = cond(esi)
	ch = al
	ebx = edi
	SCZO = cond(esi - 0xD9B2B44B)
	branch Test(NE,Z) l0040110C
	// succ:  l00401120 l0040110C
l00401120:
	ecx = esi
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edi = edx
	edi = edi - 0x00000001
	SZO = cond(edi)
	eax = esi
	edx = edx | esi
	SZO = cond(edx)
	C = false
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ecx = ecx | eax
	SZO = cond(ecx)
	C = false
	edx = ebx
	eax = eax + 0x00000001
	SZO = cond(eax)
	call fn004013F5 (retsize: 4;)
	branch Test(EQ,Z) l00401136
	goto l00401137
	// succ:  l00401137 l00401136
l00401136:
l00401137:
fn00401108_exit:


// fn00401139
// Return size: 0
void fn00401139()
fn00401139_entry:
	// succ:  l00401139
l00401139:
	esp = fp
	ecx = ecx | esi
	SZO = cond(ecx)
	C = false
	edi = edi + 0x00000001
	SZO = cond(edi)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ecx = esi
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edi = edi | edx
	SZO = cond(edi)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edi = edi | edx
	SZO = cond(edi)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ecx = edi
	edi = edi + 0x00000001
	SZO = cond(edi)
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ecx = ecx | esi
	SZO = cond(ecx)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edi = edi - 0x00000001
	SZO = cond(edi)
	esi = edx
	ecx = ecx | edx
	SZO = cond(ecx)
	C = false
	edi = edx
	call fn00401490 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[ebp + 0x00000074:word32]
	branch Test(EQ,Z) l00401187
	goto l00401162
	// succ:  l00401162 l00401160_thunk_fn00401187
l00401160_thunk_fn00401187:
	call fn00401187 (retsize: 0;)
	return
	// succ:  fn00401139_exit
l00401162:
fn00401139_exit:


// fn00401163
// Return size: 0
void fn00401163()
fn00401163_entry:
	// succ:  l00401163
l00401163:
	esp = fp
	esp = esp + 0x00000004
	esi = esi | ecx
	SZO = cond(esi)
	C = false
	edx = edx + 0x00000001
	SZO = cond(edx)
	esi = esi - 0x00000001
	SZO = cond(esi)
	edi = edi + 0x00000001
	SZO = cond(edi)
	edx = edx | edi
	SZO = cond(edx)
	C = false
	edx = edx + 0x00000001
	SZO = cond(edx)
	edx = edx - 0x00000001
	SZO = cond(edx)
	edx = eax
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	edi = edi + 0x00000001
	SZO = cond(edi)
	edi = edi | edx
	SZO = cond(edi)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	esi = esi | edi
	SZO = cond(esi)
	C = false
	edi = ebx
	edi = edi | ecx
	SZO = cond(edi)
	C = false
	ecx = ecx - 0xEEEEEEEE
	SCZO = cond(ecx)
	edx = ecx
	// succ:  l00401185_thunk_fn00401187
l00401185_thunk_fn00401187:
	call fn00401187 (retsize: 0;)
	return
	// succ:  fn00401163_exit
fn00401163_exit:


// fn00401187
// Return size: 0
void fn00401187()
fn00401187_entry:
	// succ:  l00401187
l00401187:
	call fn004012FA (retsize: 4;)
	eax = eax & 0x2574FF25
	SZO = cond(eax)
	C = false
	Mem0[esp - 0x0000000C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = esi
	edi = edi | edx
	SZO = cond(edi)
	C = false
	edi = edi + 0x00000001
	SZO = cond(edi)
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
	edi = edi + 0x00000001
	SZO = cond(edi)
	esi = esi | edi
	SZO = cond(esi)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ecx = ecx & 0xEEEEEEEE
	SZO = cond(ecx)
	C = false
	esi = esi | eax
	SZO = cond(esi)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	ebx = ecx
	call fn00401163 (retsize: 4;)
	branch Test(EQ,Z) l00401228
	// succ:  l004011B4 l00401228
l004011B4:
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[esp - 0x00000071 + esi * 0x00000002:word32]
	esp = esp + 0x00000001
	SZO = cond(esp)
	al = al & 0xF4
	SZO = cond(al)
	C = false
	ch = 0x0F
	bl = bl | bh
	SZO = cond(bl)
	C = false
	edi = edi | eax
	SZO = cond(edi)
	C = false
	bl = bl ^ ah
	SZO = cond(bl)
	C = false
	bh = bh | al
	SZO = cond(bh)
	C = false
	bl = bl - dh
	SCZO = cond(bl)
	bl = bl + ch
	SCZO = cond(bl)
	esi = edi
	cl = 0x82
	edx = edx + 0x00000001
	SZO = cond(edx)
	eax = esi
	eax = eax + 0x00000001
	SZO = cond(eax)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	eax = eax + 0x00000001
	SZO = cond(eax)
	ebx = edx
	call fn00401027 (retsize: 4;)
l004011D9:
l00401228:
	eax = eax & 0x0424648D
	SZO = cond(eax)
	C = false
	esi = edi
	edx = edx + 0x00000001
	SZO = cond(edx)
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
	esi = ebx
	edx = edx + 0x00000001
	SZO = cond(edx)
	eax = eax | 0x00000010
	SZO = cond(eax)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	ebx = esi
	edx = edx - 0x00000001
	SZO = cond(edx)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edx = edx - 0x00000001
	SZO = cond(edx)
	edi = edi + 0x00000001
	SZO = cond(edi)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	call fn004013A3 (retsize: 4;)
	eax = eax & 0x2525FF25
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l004011D9
	// succ:  l0040124C l004011D9
l0040124C:
	al = al & 0x04
	SZO = cond(al)
	C = false
	bh = bh ^ dl
	SZO = cond(bh)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	bl = bl ^ al
	SZO = cond(bl)
	C = false
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	cl = bh
	bh = bh | ah
	SZO = cond(bh)
	C = false
	bh = bh + bl
	SCZO = cond(bh)
	bh = 0x84
	edi = ecx
	bh = bh - bl
	SCZO = cond(bh)
	bl = bl | al
	SZO = cond(bl)
	C = false
	ch = ch + cl
	SCZO = cond(ch)
	bl = dl
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	call fn004010BC (retsize: 4;)
fn00401187_exit:


// fn004011B7
// Return size: 0
void fn004011B7()
fn004011B7_entry:
	// succ:  l004011B7
l004011B7:
	esp = fp
	Mem0[esp - 0x0000000C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ch = 0x0F
	bl = bl | bh
	SZO = cond(bl)
	C = false
	edi = edi | eax
	SZO = cond(edi)
	C = false
	bl = bl ^ ah
	SZO = cond(bl)
	C = false
	bh = bh | al
	SZO = cond(bh)
	C = false
	bl = bl - dh
	SCZO = cond(bl)
	bl = bl + ch
	SCZO = cond(bl)
	esi = edi
	cl = 0x82
	edx = edx + 0x00000001
	SZO = cond(edx)
	eax = esi
	eax = eax + 0x00000001
	SZO = cond(eax)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	eax = eax + 0x00000001
	SZO = cond(eax)
	ebx = edx
	call fn00401027 (retsize: 4;)
	// succ:  l004011D5_thunk_fn004011DA
l004011D5_thunk_fn004011DA:
	call fn004011DA (retsize: 0;)
	return
	// succ:  fn004011B7_exit
fn004011B7_exit:


// fn004011DA
// Return size: 0
void fn004011DA()
fn004011DA_entry:
	// succ:  l004011DA
l004011DA:
	esp = fp
l004011DA:
fn004011DA_exit:


// fn004011E0
// Return size: 0
void fn004011E0()
fn004011E0_entry:
	// succ:  l004011E0
l004011E0:
	esp = fp
	Mem0[esp:word32] = ecx
	edi = edi
	branch Test(ULE,CZ) l004011E7
	// succ:  l004011E7
l004011E7:
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	edi = ecx
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edi = edi + 0x00000001
	SZO = cond(edi)
	edi = edi - 0x00000001
	SZO = cond(edi)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edi = edi | eax
	SZO = cond(edi)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	ebx = edi
	edi = edi - 0x00000001
	SZO = cond(edi)
	edi = edi + 0x00000001
	SZO = cond(edi)
	edx = edx | ecx
	SZO = cond(edx)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[eax + ecx:word32]
	call fn00401324 (retsize: 4;)
	eax = eax & 0x8DFF7425
	SZO = cond(eax)
	C = false
	// succ:  l00401201_thunk_fn00401206
l00401201_thunk_fn00401206:
	call fn00401206 (retsize: 0;)
	return
	// succ:  fn004011E0_exit
fn004011E0_exit:


// fn00401205
// Return size: 0
void fn00401205()
fn00401205_entry:
	// succ:  l00401205
l00401205:
	esp = fp
	esp = esp + 0x00000004
	// succ:  l00401205_thunk_fn00401206
l00401205_thunk_fn00401206:
	call fn00401206 (retsize: 0;)
	return
	// succ:  fn00401205_exit
fn00401205_exit:


// fn00401206
// Return size: 0
void fn00401206()
fn00401206_entry:
	// succ:  l00401206
l00401206:
	esp = fp
	al = al & 0x04
	SZO = cond(al)
	C = false
	edi = ecx
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	esi = edx
	edx = edx | eax
	SZO = cond(edx)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[eax + ecx:word32]
	edx = eax
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	edx = eax
	edx = edx | edi
	SZO = cond(edx)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	edx = edx - 0x00000001
	SZO = cond(edx)
	edx = edi
	call fn004014CC (retsize: 4;)
l00401206:
	edi = ecx
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	esi = edx
	edx = edx | eax
	SZO = cond(edx)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[eax + ecx:word32]
	edx = eax
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	edx = eax
	edx = edx | edi
	SZO = cond(edx)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	edx = edx - 0x00000001
	SZO = cond(edx)
	edx = edi
	call fn004014CC (retsize: 4;)
fn00401206_exit:


// fn0040128C
// Return size: 0
void fn0040128C()
fn0040128C_entry:
	// succ:  l0040128C
l0040128C:
	esp = fp
	Mem0[esp - 0x00000018:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[fs:eax:word32]
	esi = esi + 0x00000001
	SZO = cond(esi)
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	edi = edi + 0x00000001
	SZO = cond(edi)
	edi = edx
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	edx = edx | eax
	SZO = cond(edx)
	C = false
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	edi = edi - 0x00000001
	SZO = cond(edi)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edi = edi - 0x00000001
	SZO = cond(edi)
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	call fn00401378 (retsize: 4;)
	branch Test(EQ,Z) l004012AB_thunk_fn00401321
	goto l004012AD
	// succ:  l004012AD l004012AB_thunk_fn00401321
l004012AB_thunk_fn00401321:
	call fn00401321 (retsize: 0;)
	return
	// succ:  fn0040128C_exit
l004012AD:
	eax = eax & 0x0487E8FF
	SZO = cond(eax)
	C = false
	// succ:  l004012AD_thunk_fn004012B2
l004012AD_thunk_fn004012B2:
	call fn004012B2 (retsize: 0;)
	return
	// succ:  fn0040128C_exit
fn0040128C_exit:


// fn004012B0
// Return size: 0
void fn004012B0()
fn004012B0_entry:
	// succ:  l004012B0
l004012B0:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = eax
	eax = v3
	call fn0040128C (retsize: 4;)
	// succ:  l004012B0_thunk_fn004012B2 l004012C8_thunk_fn004012CD
l004012B0_thunk_fn004012B2:
	call fn004012B2 (retsize: 0;)
	return
	// succ:  fn004012B0_exit
l004012C8_thunk_fn004012CD:
	call fn004012CD (retsize: 0;)
	return
	// succ:  fn004012B0_exit
fn004012B0_exit:


// fn004012B2
// Return size: 0
void fn004012B2()
fn004012B2_entry:
	// succ:  l004012B2
l004012B2:
	esp = fp
	al = al & 0x50
	SZO = cond(al)
	C = false
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = eax
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	ebx = edi
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	edi = edi | edx
	SZO = cond(edi)
	C = false
	edx = edx - 0x00000001
	SZO = cond(edx)
	edi = ecx
	edx = edx | ebx
	SZO = cond(edx)
	C = false
	esi = ebx
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	call fn0040128C (retsize: 4;)
	goto l004012C8_thunk_fn004012CD
	// succ:  l004012C8_thunk_fn004012CD
l004012B2:
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = eax
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	ebx = edi
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	edi = edi | edx
	SZO = cond(edi)
	C = false
	edx = edx - 0x00000001
	SZO = cond(edx)
	edi = ecx
	edx = edx | ebx
	SZO = cond(edx)
	C = false
	esi = ebx
	esi = esi | ebx
	SZO = cond(esi)
	C = false
l004012C8_thunk_fn004012CD:
	call fn004012CD (retsize: 0;)
	return
	// succ:  fn004012B2_exit
fn004012B2_exit:


// fn004012CD
// Return size: 0
void fn004012CD()
fn004012CD_entry:
	// succ:  l004012CD
l004012CD:
	esp = fp
	branch Test(EQ,Z) l004012CE_in_fn004012CD
	goto l004012CD_thunk_fn004012CF
	// succ:  l004012CD_thunk_fn004012CF l004012CE_in_fn004012CD
l004012CD:
	branch Test(EQ,Z) l004012CE
	goto l004012CD_thunk_fn004012CF
	// succ:  l004012CD_thunk_fn004012CF l004012CE
l004012CD_thunk_fn004012CF:
	call fn004012CF (retsize: 0;)
	return
	// succ:  fn004012CD_exit l004012CD_thunk_fn004012CF
l004012CD_thunk_fn004012CF:
	call fn004012CF (retsize: 0;)
	return
	// succ:  fn004012CD_exit
l004012CD_thunk_fn004012CF:
	call fn004012CF (retsize: 0;)
	return
	// succ:  fn004012CD_exit
l004012CE:
	call Mem0[0x240C8725:word32] (retsize: 4;)
	return
	// succ:  fn004012CD_exit
l004012CE_in_fn004012CD:
	call Mem0[0x240C8725:word32] (retsize: 4;)
	return
	// succ:  fn004012CD_exit
fn004012CD_exit:


// fn004012CF
// Return size: 0
void fn004012CF()
fn004012CF_entry:
	// succ:  l004012CF
l004012CF:
	eax = eax & 0x240C8725
	SZO = cond(eax)
	C = false
fn004012CF_exit:


// fn004012D1
// Return size: 0
void fn004012D1()
fn004012D1_entry:
	// succ:  l004012D1
l004012D1:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = ecx
	ecx = v3
fn004012D1_exit:


// fn004012FA
// Return size: 0
void fn004012FA()
fn004012FA_entry:
	// succ:  l004012FA
l004012FA:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = edi
	edi = v3
fn004012FA_exit:


// fn00401321
// Return size: 0
void fn00401321()
fn00401321_entry:
	// succ:  l00401321
l00401321:
	esp = fp
	branch Test(EQ,Z) l00401348
	goto l00401323
	// succ:  l00401323 l00401348
l00401321:
l00401323:
	eax = eax & 0x0424648D
	SZO = cond(eax)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	edx = edx + 0x00000001
	SZO = cond(edx)
	edi = ecx
	edi = edi | edx
	SZO = cond(edi)
	C = false
	edx = edx - 0x00000001
	SZO = cond(edx)
	esi = esi | edx
	SZO = cond(esi)
	C = false
	edx = ecx
	esi = esi - 0x00000001
	SZO = cond(esi)
	esi = esi | edx
	SZO = cond(esi)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edi
	edi = edi | edx
	SZO = cond(edi)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edi = edi | esi
	SZO = cond(edi)
	C = false
	call fn004012D1 (retsize: 4;)
l00401348:
	branch Test(EQ,Z) l00401349
	goto l0040134A
	// succ:  l0040134A l00401349
l00401349:
l0040134A:
fn00401321_exit:


// fn00401324
// Return size: 0
void fn00401324()
fn00401324_entry:
	// succ:  l00401324
l00401324:
	esp = fp
	esp = esp + 0x00000004
	edi = edi - 0x00000001
	SZO = cond(edi)
	edx = edx + 0x00000001
	SZO = cond(edx)
	edi = ecx
	edi = edi | edx
	SZO = cond(edi)
	C = false
	edx = edx - 0x00000001
	SZO = cond(edx)
	esi = esi | edx
	SZO = cond(esi)
	C = false
	edx = ecx
	esi = esi - 0x00000001
	SZO = cond(esi)
	esi = esi | edx
	SZO = cond(esi)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edi
	edi = edi | edx
	SZO = cond(edi)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edi = edi | esi
	SZO = cond(edi)
	C = false
	call fn004012D1 (retsize: 4;)
fn00401324_exit:


// fn0040134D
// Return size: 0
void fn0040134D()
fn0040134D_entry:
	// succ:  l0040134D
l0040134D:
	esp = fp
	esp = esp + 0x00000004
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edx = eax
	edi = edi + 0x00000001
	SZO = cond(edi)
	edi = edi - 0x00000001
	SZO = cond(edi)
	ebx = ecx
	esi = esi + 0x00000001
	SZO = cond(esi)
	edi = edi - 0x00000001
	SZO = cond(edi)
	esi = eax
	ecx = ecx | ebx
	SZO = cond(ecx)
	C = false
	edx = edx - 0x00000001
	SZO = cond(edx)
	eax = eax << 0x00000003
	SCZO = cond(eax)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	edx = edi
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edx = esi
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edi = edi - 0x00000001
	SZO = cond(edi)
	edx = edx + 0x00000001
	SZO = cond(edx)
	call fn004012B0 (retsize: 4;)
	branch Test(EQ,Z) TMP!
fn0040134D_exit:


// fn00401378
// Return size: 0
void fn00401378()
fn00401378_entry:
	// succ:  l00401378
l00401378:
	esp = fp
	esp = esp + 0x00000004
	edi = edi + 0x00000001
	SZO = cond(edi)
	ebx = ebx | eax
	SZO = cond(ebx)
	C = false
	edx = eax
	esi = esi + 0x00000001
	SZO = cond(esi)
	edx = edx - 0x00000001
	SZO = cond(edx)
	edi = edi | edx
	SZO = cond(edi)
	C = false
	edi = ebx
	edi = edi | esi
	SZO = cond(edi)
	C = false
	edi = edi + 0x00000001
	SZO = cond(edi)
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	ebx = edi
	edx = edx + 0x00000001
	SZO = cond(edx)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	eax = eax << 0x00000001
	SCZO = cond(eax)
	esi = ebx
	goto l00401397
	// succ:  l00401397
fn00401378_exit:


// fn004013A3
// Return size: 0
void fn004013A3()
fn004013A3_entry:
	// succ:  l004013A3
l004013A3:
	esp = fp
	Mem0[esp - 0x00000018:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = ebx
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edi = edi - 0x00000001
	SZO = cond(edi)
	esi = esi | edi
	SZO = cond(esi)
	C = false
	edx = edi
	esi = esi - 0x00000001
	SZO = cond(esi)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edx = edx - 0x00000001
	SZO = cond(edx)
	ebx = ebx | edx
	SZO = cond(ebx)
	C = false
	esi = ecx
	edi = edi - 0x00000001
	SZO = cond(edi)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	esi = esi - 0x00000001
	SZO = cond(esi)
	eax = (word32) al
	edi = edi - 0x00000001
	SZO = cond(edi)
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	call fn004011E0 (retsize: 4;)
fn004013A3_exit:


// fn004013F5
// Return size: 0
void fn004013F5()
fn004013F5_entry:
	// succ:  l004013F5
l004013F5:
	esp = fp
	Mem0[esp - 0x00000010:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	eax = eax | ecx
	SZO = cond(eax)
	C = false
	eax = eax + 0x00000001
	SZO = cond(eax)
	eax = esp
	ecx = ecx | esi
	SZO = cond(ecx)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ecx = ecx | edi
	SZO = cond(ecx)
	C = false
	ecx = ebx
	esi = esi | ecx
	SZO = cond(esi)
	C = false
	ecx = edi
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	call fn0040143C (retsize: 4;)
fn004013F5_exit:


// fn00401418
// Return size: 0
void fn00401418()
fn00401418_entry:
	// succ:  l00401418
l00401418:
	esp = fp
	esp = esp + 0x00000004
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edx = edx + 0x00000001
	SZO = cond(edx)
	edi = eax
	edx = edx - 0x00000001
	SZO = cond(edx)
	eax = eax + 0x00000001
	SZO = cond(eax)
	edx = edx - 0x00000001
	SZO = cond(edx)
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	eax = edi
	eax = eax | ebx
	SZO = cond(eax)
	C = false
	eax = ebx
	eax = eax | ebx
	SZO = cond(eax)
	C = false
	eax = eax - 0x00000001
	SZO = cond(eax)
	edi = edi + 0x00000001
	SZO = cond(edi)
	ecx = ecx | edi
	SZO = cond(ecx)
	C = false
	call fn00401108 (retsize: 4;)
fn00401418_exit:


// fn0040143C
// Return size: 0
void fn0040143C()
fn0040143C_entry:
	// succ:  l0040143C
l0040143C:
	esp = fp
	esp = esp + 0x00000004
	eax = ~eax
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	esi = esi | eax
	SZO = cond(esi)
	C = false
	edx = ebx
	edx = edx - 0x00000001
	SZO = cond(edx)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	esi = edx
	edx = edx | eax
	SZO = cond(edx)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	eax = eax & 0x00000003
	SZO = cond(eax)
	C = false
	ebx = esi
	esi = esi | edx
	SZO = cond(esi)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	call fn0040134D (retsize: 4;)
	eax = eax & 0x25E82525
	SZO = cond(eax)
	C = false
fn0040143C_exit:


// fn00401490
// Return size: 0
void fn00401490()
fn00401490_entry:
	// succ:  l00401490
l00401490:
	esp = fp
	Mem0[esp:word32] = edx
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	edi = eax
	ecx = ecx | edi
	SZO = cond(ecx)
	C = false
	edi = edi + 0x00000001
	SZO = cond(edi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	edi = edi | ecx
	SZO = cond(edi)
	C = false
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	esi = esi - 0x00000001
	SZO = cond(esi)
	ecx = ebx
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	call fn004014EB (retsize: 4;)
fn00401490_exit:


// fn004014AF
// Return size: 0
void fn004014AF()
fn004014AF_entry:
	// succ:  l004014AF
l004014AF:
	esp = fp
	Mem0[esp:word32] = ebx
fn004014AF_exit:


// fn004014CC
// Return size: 0
void fn004014CC()
fn004014CC_entry:
	// succ:  l004014CC
l004014CC:
	esp = fp
	esp = esp + 0x00000004
	edi = edi + 0x00000001
	SZO = cond(edi)
	edi = ecx
	esi = esi - 0x00000001
	SZO = cond(esi)
	edx = ebx
	edx = edx | edi
	SZO = cond(edx)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	edi = esi
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi | eax
	SZO = cond(edi)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edi = edi | eax
	SZO = cond(edi)
	C = false
	edx = edx - 0x00000001
	SZO = cond(edx)
	call fn004014AF (retsize: 4;)
	eax = eax & 0x8725FF25
	SZO = cond(eax)
	C = false
	// succ:  l004014E7_thunk_fn004014EC
l004014E7_thunk_fn004014EC:
	call fn004014EC (retsize: 0;)
	return
	// succ:  fn004014CC_exit
fn004014CC_exit:


// fn004014EB
// Return size: 0
void fn004014EB()
fn004014EB_entry:
	// succ:  l004014EB
l004014EB:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = edi
	edi = v3
fn004014EB_exit:


// fn004014EC
// Return size: 0
void fn004014EC()
fn004014EC_entry:
	// succ:  l004014EC
l004014EC:
	esp = fp
	SCZO = cond(al - 0x24)
l004014EC:
fn004014EC_exit:


