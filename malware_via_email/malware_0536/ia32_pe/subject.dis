// fn00401005
// Return size: 0
void fn00401005()
fn00401005_entry:
	// succ:  l00401005
l00401005:
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edx = esi
	edx = edx - ebx
	SCZO = cond(edx)
	esi = esi - edi
	SCZO = cond(esi)
	ecx = ecx | ebx
	SZO = cond(ecx)
	C = false
	ecx = esi
	// succ:  l00401309_in_fn004010D6
l00401309_in_fn004010D6:
	SCZO = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00401005_exit
fn00401005_exit:


// fn00401019
// Return size: 6
void fn00401019()
fn00401019_entry:
	// succ:  l00401019
l00401019:
	esp = fp
	Mem0[esp:word32] = esi
	// succ:  l00401021
l00401021:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi - esi
	SCZO = cond(edi)
	edi = edi | esi
	SZO = cond(edi)
	C = false
	edi = edi | esi
	SZO = cond(edi)
	C = false
	branch Test(EQ,Z) l00401028_thunk_fn004012F3
	goto l0040102E
	// succ:  l0040102E l00401028_thunk_fn004012F3
l00401028_thunk_fn004012F3:
	call fn004012F3 (retsize: 6;)
	return
	// succ:  fn00401019_exit
l0040102E:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	branch Test(NE,Z) l00401030_thunk_fn004012F3
	goto l00401036
	// succ:  l00401036 l00401030_thunk_fn004012F3
l00401030_thunk_fn004012F3:
	call fn004012F3 (retsize: 6;)
	return
	// succ:  fn00401019_exit
l00401036:
fn00401019_exit:


// fn0040104F
// Return size: 0
void fn0040104F()
fn0040104F_entry:
	// succ:  l0040104F
l0040104F:
	esp = fp
	esp = esp + 0x00000004
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	ecx = ecx ^ edi
	SZO = cond(ecx)
	C = false
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	edx = edx + 0x00000001
	SZO = cond(edx)
	edi = edi + ecx
	SCZO = cond(edi)
	eax = eax + 0x00000001
	SZO = cond(eax)
	eax = eax + esi
	SCZO = cond(eax)
	edi = eax
	// succ:  l00401060_thunk_fn004013AC
l00401060_thunk_fn004013AC:
	call fn004013AC (retsize: 0;)
	return
	// succ:  fn0040104F_exit
fn0040104F_exit:


// fn0040107F
// Return size: 0
void fn0040107F()
fn0040107F_entry:
	// succ:  l0040107F
l0040107F:
	esp = fp
	v5 = Mem0[eax + 0x49F9BD10:byte] + ch
	Mem0[eax + 0x49F9BD10:byte] = v5
	SCZO = cond(v5)
	goto l0040107F_thunk_fn00401080
	// succ:  l0040107F_thunk_fn00401080
l0040107F:
l0040107F_thunk_fn00401080:
	call fn00401080 (retsize: 0;)
	return
	// succ:  fn0040107F_exit
fn0040107F_exit:


// fn00401080
// Return size: 0
void fn00401080()
fn00401080_entry:
	// succ:  l00401080
l00401080:
	esp = fp
	SZO = cond(al & 0x10)
	C = false
	ebp = 0xDE2B49F9
	edi = edi + eax
	SCZO = cond(edi)
	ecx = esi
	ebx = ebx + ecx
	SCZO = cond(ebx)
	ebx = edx
	eax = Mem0[eax + 0x00000008:word32]
	call fn00401019 (retsize: 4;)
	esp = esp + 0xFFFFFFFA
	al = Mem0[0xF4930F91:byte]
	goto l00401097_thunk_fn0040109C
	// succ:  l00401097_thunk_fn0040109C
l00401080:
	ebx = ebx - esi
	SCZO = cond(ebx)
	edi = edi + eax
	SCZO = cond(edi)
	ecx = esi
	ebx = ebx + ecx
	SCZO = cond(ebx)
	ebx = edx
	eax = Mem0[eax + 0x00000008:word32]
	call fn00401019 (retsize: 4;)
	esp = esp + 0xFFFFFFFA
	al = Mem0[0xF4930F91:byte]
	goto l00401097_thunk_fn0040109C
	// succ:  l00401097_thunk_fn0040109C
l00401097_thunk_fn0040109C:
	call fn0040109C (retsize: 0;)
	return
	// succ:  fn00401080_exit
l00401097_thunk_fn0040109C:
	call fn0040109C (retsize: 0;)
	return
	// succ:  fn00401080_exit
fn00401080_exit:


// fn0040109C
// Return size: 0
void fn0040109C()
fn0040109C_entry:
	// succ:  l0040109C
l0040109C:
	esp = fp
	esp = esp + 0x00000004
	ecx = ecx - edx
	SCZO = cond(ecx)
	edx = eax
	esi = esi + edi
	SCZO = cond(esi)
	edi = edi ^ eax
	SZO = cond(edi)
	C = false
	esi = esi + ecx
	SCZO = cond(esi)
	edi = edi ^ esi
	SZO = cond(edi)
	C = false
	esi = esi - eax
	SCZO = cond(esi)
	esi = esi ^ ecx
	SZO = cond(esi)
	C = false
	call fn0040121D (retsize: 4;)
	esp = esp + 0x00000001
	SZO = cond(esp)
	dl = dl + dh
	SCZO = cond(dl)
	eax = eax + 0x4B471C5F
	SCZO = cond(eax)
	// succ:  l004010B8_thunk_fn004010BB
l004010B8_thunk_fn004010BB:
	call fn004010BB (retsize: 0;)
	return
	// succ:  fn0040109C_exit
fn0040109C_exit:


// fn004010BB
// Return size: 0
void fn004010BB()
fn004010BB_entry:
	// succ:  l004010BB
l004010BB:
	esp = fp
	edi = edi + 0x00000001
	SZO = cond(edi)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	edi = edi - ecx
	SCZO = cond(edi)
	eax = Mem0[eax + 0x00000090:word32]
	edi = edi + eax
	SCZO = cond(edi)
	esi = esi | eax
	SZO = cond(esi)
	C = false
	edx = edx + eax
	SCZO = cond(edx)
	call fn004010D6 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ss
	Mem0[ecx + 0x24648D55:word32] = ebx
	goto l004010D3_thunk_fn004010D9
	// succ:  l004010D3_thunk_fn004010D9
l004010BB:
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	edi = edi - ecx
	SCZO = cond(edi)
	eax = Mem0[eax + 0x00000090:word32]
	edi = edi + eax
	SCZO = cond(edi)
	esi = esi | eax
	SZO = cond(esi)
	C = false
	edx = edx + eax
	SCZO = cond(edx)
	call fn004010D6 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ss
	Mem0[ecx + 0x24648D55:word32] = ebx
	goto l004010D3_thunk_fn004010D9
	// succ:  l004010D3_thunk_fn004010D9
l004010D3_thunk_fn004010D9:
	call fn004010D9 (retsize: 0;)
	return
	// succ:  fn004010BB_exit
l004010D3_thunk_fn004010D9:
	call fn004010D9 (retsize: 0;)
	return
	// succ:  fn004010BB_exit
fn004010BB_exit:


// fn004010D6
// Return size: 0
void fn004010D6()
fn004010D6_entry:
	// succ:  l004010D6
l004010D6:
	esp = fp
	esp = esp + 0x00000004
	// succ:  l004010D6_thunk_fn004010D9
l004010D6_thunk_fn004010D9:
	call fn004010D9 (retsize: 0;)
	return
	// succ:  fn004010D6_exit
fn004010D6_exit:


// fn004010D9
// Return size: 0
void fn004010D9()
fn004010D9_entry:
	// succ:  l004010D9
l004010D9:
	esp = fp
	al = al + 0x4E
	SCZO = cond(al)
	edx = edx + eax
	SCZO = cond(edx)
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	edi = esi
	ecx = ecx | ebx
	SZO = cond(ecx)
	C = false
	goto l004010E5_thunk_fn00401005
	// succ:  l004010E5_thunk_fn00401005
l004010D9:
	esi = esi - 0x00000001
	SZO = cond(esi)
	edx = edx + eax
	SCZO = cond(edx)
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	edi = esi
	ecx = ecx | ebx
	SZO = cond(ecx)
	C = false
	// succ:  l004010E2_thunk_fn00401005
l004010E2_thunk_fn00401005:
	call fn00401005 (retsize: 0;)
	return
	// succ:  fn004010D9_exit
l004010E5_thunk_fn00401005:
	call fn00401005 (retsize: 0;)
	return
	// succ:  fn004010D9_exit
fn004010D9_exit:


// fn004010F1
// Return size: 4
void fn004010F1()
fn004010F1_entry:
	// succ:  l004010F1
l004010F1:
	ebx = ecx
	edi = edi + 0x00000001
	SZO = cond(edi)
	ecx = eax
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	edi = edi - edx
	SCZO = cond(edi)
	esi = esi - edx
	SCZO = cond(esi)
	esi = esi + 0x00000001
	SZO = cond(esi)
	// succ:  l0040135A
l0040135A:
	edx = edx | ebx
	SZO = cond(edx)
	C = false
	edx = edx ^ edi
	SZO = cond(edx)
	C = false
	ecx = ecx ^ eax
	SZO = cond(ecx)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	edx = edx | ecx
	SZO = cond(edx)
	C = false
	edx = esi
	call fn0040115A (retsize: 4;)
	dl = 0x9E
	SCZO = cond(al - 0x8F)
	// succ:  l0040136C_thunk_fn0040136F
l0040136C_thunk_fn0040136F:
	call fn0040136F (retsize: 4;)
	return
	// succ:  fn004010F1_exit
fn004010F1_exit:


// fn00401105
// Return size: 4
void fn00401105()
fn00401105_entry:
	// succ:  l00401105
l00401105:
	esp = fp
	eax = eax | eax
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0040110A
	goto l00401109
	// succ:  l00401109 l0040110A
l00401105:
l00401109:
	return
	// succ:  fn00401105_exit
l0040110A:
	edx = edx ^ ecx
	SZO = cond(edx)
	C = false
	esi = esi | eax
	SZO = cond(esi)
	C = false
	ebx = esi
	edi = edi + 0x00000001
	SZO = cond(edi)
	call fn00401175 (retsize: 4;)
	SCZO = ah
	SCZO = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00401105_exit
fn00401105_exit:


// fn0040111C
// Return size: 4
void fn0040111C()
fn0040111C_entry:
	// succ:  l0040111C
l0040111C:
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = ebx
	ebx = v3
	esi = esi
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi - 0x00000001
	SZO = cond(esi)
	edi = edi + 0x00000001
	SZO = cond(edi)
	ecx = edi
	esi = esi + ebx
	SCZO = cond(esi)
	ebx = eax
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	branch Test(ULE,CZ) l0040112C_thunk_fn00401296
	goto l00401132
	// succ:  l00401132 l0040112C_thunk_fn00401296
l0040112C_thunk_fn00401296:
	call fn00401296 (retsize: 4;)
	return
	// succ:  fn0040111C_exit
l00401132:
fn0040111C_exit:


// fn0040113E
// Return size: 0
void fn0040113E()
fn0040113E_entry:
	// succ:  l0040113E
l0040113E:
	esp = fp
	esp = esp + 0x00000004
	eax = eax - 0xEEEEEEEE
	SCZO = cond(eax)
	edi = edi + 0x00000001
	SZO = cond(edi)
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	edi = edi + 0x00000001
	SZO = cond(edi)
	esi = esi ^ edi
	SZO = cond(esi)
	C = false
fn0040113E_exit:


// fn0040115A
// Return size: 0
void fn0040115A()
fn0040115A_entry:
	// succ:  l0040115A
l0040115A:
	esp = fp
	esp = esp + 0x00000004
	eax = Mem0[fs:0x00000030:word32]
	ebx = edi
	edx = edx ^ ecx
	SZO = cond(edx)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	ebx = esi
	call fn00401235 (retsize: 4;)
	edi = edi + 0x00000001
	SZO = cond(edi)
	eax = eax + 0x8F0BF52D
	SCZO = cond(eax)
	// succ:  l00401171_thunk_fn00401176
l00401171_thunk_fn00401176:
	call fn00401176 (retsize: 0;)
	return
	// succ:  fn0040115A_exit
fn0040115A_exit:


// fn00401175
// Return size: 0
void fn00401175()
fn00401175_entry:
	// succ:  l00401175
l00401175:
	esp = fp
	Mem0[esp - 0x0000000C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00401175_thunk_fn00401176
l00401175_thunk_fn00401176:
	call fn00401176 (retsize: 0;)
	return
	// succ:  fn00401175_exit
fn00401175_exit:


// fn00401176
// Return size: 0
void fn00401176()
fn00401176_entry:
	// succ:  l00401176
l00401176:
	esp = fp
	esp = esp + 0x00000001
	SZO = cond(esp)
	al = al & 0xF4
	SZO = cond(al)
	C = false
	ecx = ecx ^ ebx
	SZO = cond(ecx)
	C = false
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	edi = edi - ecx
	SCZO = cond(edi)
	edx = esi
	edx = edx - 0x00000001
	SZO = cond(edx)
	ecx = ecx ^ eax
	SZO = cond(ecx)
	C = false
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	branch Test(ULT,C) l00401185_thunk_fn00401191
	goto l00401185_thunk_fn00401187
	// succ:  l00401185_thunk_fn00401187 l00401185_thunk_fn00401191
l00401176:
	ecx = ecx ^ ebx
	SZO = cond(ecx)
	C = false
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	edi = edi - ecx
	SCZO = cond(edi)
	edx = esi
	edx = edx - 0x00000001
	SZO = cond(edx)
	ecx = ecx ^ eax
	SZO = cond(ecx)
	C = false
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	branch Test(ULT,C) l00401191
	// succ:  l00401182_thunk_fn00401187 l00401182_thunk_fn00401191
l00401182_thunk_fn00401187:
	call fn00401187 (retsize: 0;)
	return
	// succ:  fn00401176_exit
l00401182_thunk_fn00401191:
	call fn00401191 (retsize: 0;)
	return
	// succ:  fn00401176_exit
l00401185_thunk_fn00401187:
	call fn00401187 (retsize: 0;)
	return
	// succ:  fn00401176_exit l00401185_thunk_fn00401187
l00401185_thunk_fn00401187:
	call fn00401187 (retsize: 0;)
	return
	// succ:  fn00401176_exit
l00401185_thunk_fn00401191:
	call fn00401191 (retsize: 0;)
	return
	// succ:  fn00401176_exit
fn00401176_exit:


// fn00401187
// Return size: 0
void fn00401187()
fn00401187_entry:
	// succ:  l00401187
l00401187:
	branch Test(ULE,CZ) l00401189
	// succ:  l00401189
l00401189:
	dl = dl
	branch Test(UGE,C) l00401191
	goto l0040118D
	// succ:  l0040118D l0040118B_thunk_fn00401191
l0040118B_thunk_fn00401191:
	call fn00401191 (retsize: 0;)
	return
	// succ:  fn00401187_exit
l0040118D:
	esp = esp - 0x00000002
	Mem0[esp:word16] = cs
	ebp = Mem0[ecx + 0x0B47CB2B:word32] *s 0x4AF92BDA
	SCZO = cond(ebp)
	// succ:  l0040118F_thunk_fn00401191
l0040118F_thunk_fn00401191:
	call fn00401191 (retsize: 0;)
	return
	// succ:  fn00401187_exit
fn00401187_exit:


// fn00401191
// Return size: 0
void fn00401191()
fn00401191_entry:
	// succ:  l00401191
l00401191:
	ecx = ecx - ebx
	SCZO = cond(ecx)
	edi = edi + 0x00000001
	SZO = cond(edi)
	ebx = ebx | edx
	SZO = cond(ebx)
	C = false
	edi = edi - ecx
	SCZO = cond(edi)
	edx = edx - 0x00000001
	SZO = cond(edx)
	// succ:  l00401199
l00401199:
	edi = edi + 0x00000001
	SZO = cond(edi)
	edi = edi - 0x00000001
	SZO = cond(edi)
	edi = edi + 0x00000001
	SZO = cond(edi)
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l0040119F_thunk_fn004011BD
l0040119F_thunk_fn004011BD:
	call fn004011BD (retsize: 0;)
	return
	// succ:  fn00401191_exit
fn00401191_exit:


// fn004011A5
// Return size: 4
void fn004011A5()
fn004011A5_entry:
	// succ:  l004011A5
l004011A5:
	esp = fp
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ecx = ecx | eax
	SZO = cond(ecx)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	esi = esi + ecx
	SCZO = cond(esi)
	eax = eax & 0xEEEEEEEE
	SZO = cond(eax)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	call fn0040109C (retsize: 4;)
	bl = 0xF3
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	es_ebx = Mem0[esi + 0x00000000:segptr32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	eax = __indw(0x8B)
	goto l004011BC_thunk_fn004011BE
	// succ:  l004011BC_thunk_fn004011BE
l004011A5:
l004011BC_thunk_fn004011BE:
	call fn004011BE (retsize: 4;)
	return
	// succ:  fn004011A5_exit
fn004011A5_exit:


// fn004011BD
// Return size: 4
void fn004011BD()
fn004011BD_entry:
	// succ:  l004011BD
l004011BD:
	esp = fp
	eax = edx
	goto l004011BD_thunk_fn004011BE
	// succ:  l004011BD_thunk_fn004011BE
l004011BD:
l004011BD_thunk_fn004011BE:
	call fn004011BE (retsize: 4;)
	return
	// succ:  fn004011BD_exit
fn004011BD_exit:


// fn004011BE
// Return size: 4
void fn004011BE()
fn004011BE_entry:
	// succ:  l004011BE
l004011BE:
	esp = fp
	return
	// succ:  fn004011BE_exit
l004011BE:
	ebx = ebx - eax
	SCZO = cond(ebx)
	ecx = ecx ^ ebx
	SZO = cond(ecx)
	C = false
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ecx = ecx | ebx
	SZO = cond(ecx)
	C = false
	esi = esi | eax
	SZO = cond(esi)
	C = false
fn004011BE_exit:


// fn004011EA
// Return size: 0
void fn004011EA()
fn004011EA_entry:
	// succ:  l004011EA
l004011EA:
	esp = fp
	esp = esp + 0x00000004
	esi = esi ^ edi
	SZO = cond(esi)
	C = false
	ecx = ecx - ebx
	SCZO = cond(ecx)
	ecx = ecx + esi
	SCZO = cond(ecx)
	edx = edx + 0x00000001
	SZO = cond(edx)
	edx = edx | edi
	SZO = cond(edx)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	edx = edx + eax
	SCZO = cond(edx)
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	// succ:  l004011FC_thunk_fn00401327
l004011FC_thunk_fn00401327:
	call fn00401327 (retsize: 0;)
	return
	// succ:  fn004011EA_exit
fn004011EA_exit:


// fn00401208
// Return size: 0
void fn00401208()
fn00401208_entry:
	// succ:  l00401208
l00401208:
	Mem0[esp - 0x00000010:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi + ecx
	SCZO = cond(esi)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	eax = eax + ebx
	SCZO = cond(eax)
	esi = esi + 0x00000001
	SZO = cond(esi)
	edx = ecx
fn00401208_exit:


// fn00401215
// Return size: 0
void fn00401215()
fn00401215_entry:
	goto l00401215
	// succ:  l00401215
l0040103A:
	eax = eax + 0x00000001
	SZO = cond(eax)
	ebx = ebx | edx
	SZO = cond(ebx)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	ecx = ecx + esi
	SCZO = cond(ecx)
	ecx = edi
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	call fn0040104F (retsize: 4;)
	branch Test(SG,S) l00401049_thunk_fn0040107F
	goto l0040104B
	// succ:  l0040104B l00401049_thunk_fn0040107F
l00401049_thunk_fn0040107F:
	call fn0040107F (retsize: 0;)
	return
	// succ:  fn00401215_exit
l0040104B:
	D = false
l00401215:
	esp = fp
	__outdw(edx, eax)
	esi = esi + 0x00000004
	v6 = Mem0[eax:word32] + eax
	Mem0[eax:word32] = v6
	SCZO = cond(v6)
	v10 = Mem0[edi + 0x00000007:byte] + cl
	Mem0[edi + 0x00000007:byte] = v10
	SCZO = cond(v10)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	al = al - 0x89
	SCZO = cond(al)
	goto l0040121C_thunk_fn0040121E
	// succ:  l0040121C_thunk_fn0040121E
l00401215:
	goto l00401388
	// succ:  l00401388
l0040121C_thunk_fn0040121E:
	call fn0040121E (retsize: 0;)
	return
	// succ:  fn00401215_exit
l00401388:
	ebx = ebx + eax
	SCZO = cond(ebx)
	ecx = ecx + edx
	SCZO = cond(ecx)
	edi = edi - ecx
	SCZO = cond(edi)
	esi = ebx
	ebx = ebx - edx
	SCZO = cond(ebx)
	edx = edx | esi
	SZO = cond(edx)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	branch Test(LE,SZO) l0040103A
	// succ:  l0040139B l0040103A
l0040139B:
fn00401215_exit:


// fn0040121D
// Return size: 0
void fn0040121D()
fn0040121D_entry:
	// succ:  l0040121D
l0040121D:
	esp = fp
	Mem0[esp:word32] = esi
	// succ:  l0040121D_thunk_fn0040121E
l0040121D_thunk_fn0040121E:
	call fn0040121E (retsize: 0;)
	return
	// succ:  fn0040121D_exit
fn0040121D_exit:


// fn0040121E
// Return size: 0
void fn0040121E()
fn0040121E_entry:
	// succ:  l0040121E
l0040121E:
	esp = fp
	al = al ^ 0x24
	SZO = cond(al)
	C = false
	al = al
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = eax
	edi = edi + 0x00000001
	SZO = cond(edi)
	edx = edx + 0x00000001
	SZO = cond(edx)
	edx = edx - 0x00000001
	SZO = cond(edx)
	call fn0040113E (retsize: 4;)
	ch = 0x13
	__outb(edx, al)
	esi = esi + 0x00000001
	esi = esi | esi
	SZO = cond(esi)
	C = false
l0040121E:
	al = al
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = eax
	edi = edi + 0x00000001
	SZO = cond(edi)
	edx = edx + 0x00000001
	SZO = cond(edx)
	edx = edx - 0x00000001
	SZO = cond(edx)
	call fn0040113E (retsize: 4;)
	ch = 0x13
	__outb(edx, al)
	esi = esi + 0x00000001
	esi = esi | esi
	SZO = cond(esi)
	C = false
fn0040121E_exit:


// fn00401235
// Return size: 0
void fn00401235()
fn00401235_entry:
	// succ:  l00401235
l00401235:
	esp = fp
	esp = esp + 0x00000004
	edi = edi + edx
	SCZO = cond(edi)
	esi = esi | ecx
	SZO = cond(esi)
	C = false
	edi = ebx
	esi = esi ^ edi
	SZO = cond(esi)
	C = false
	edi = edi + 0x00000001
	SZO = cond(edi)
	// succ:  l00401242_thunk_fn004010BB
l00401242_thunk_fn004010BB:
	call fn004010BB (retsize: 0;)
	return
	// succ:  fn00401235_exit
fn00401235_exit:


// fn0040124D
// Return size: 0
void fn0040124D()
fn0040124D_entry:
	goto l0040124D
	// succ:  l0040124D
l004011D1:
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	esi = esi - 0x00000001
	SZO = cond(esi)
	edi = edi + esi
	SCZO = cond(edi)
	edx = edx ^ edi
	SZO = cond(edx)
	C = false
	ecx = ecx | ebx
	SZO = cond(ecx)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	esi = eax
	call fn004011EA (retsize: 4;)
	branch Test(NO,O) l004011E2_thunk_fn00401215
	goto l004011E4
	// succ:  l004011E4 l004011E2_thunk_fn00401215
l004011E2_thunk_fn00401215:
	call fn00401215 (retsize: 0;)
	return
	// succ:  fn0040124D_exit
l004011E4:
	__outw(dx, ax)
l0040124D:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	esi = eax
	edi = edi + esi
	SCZO = cond(edi)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ecx = ecx | eax
	SZO = cond(ecx)
	C = false
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	edx = edx - edi
	SCZO = cond(edx)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	branch Test(EQ,Z) l004011D1
	// succ:  l00401262 l004011D1
l00401262:
	branch Test(NE,Z) l00401264
	// succ:  l00401264
l00401264:
	v14 = dl
	dl = dl
	dl = v14
	branch Test(NE,Z) l004011D1
	// succ:  l0040126C l004011D1
l0040126C:
	bl = bl & Mem0[ebx + 0x51A34D62:byte]
	SZO = cond(bl)
	C = false
	al = al & 0x47
	SZO = cond(al)
	C = false
	// succ:  l00401272_thunk_fn00401274
l00401272_thunk_fn00401274:
	call fn00401274 (retsize: 0;)
	return
	// succ:  fn0040124D_exit
fn0040124D_exit:


// fn00401274
// Return size: 0
void fn00401274()
fn00401274_entry:
	// succ:  l00401274
l00401274:
	esp = fp
	bl = ~bl
	dl = dl - 0x0C - C
	SCZO = cond(dl)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	edi = edi | edx
	SZO = cond(edi)
	C = false
	edx = edx + eax
	SCZO = cond(edx)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edx = edx ^ ebx
	SZO = cond(edx)
	C = false
	branch Test(ULE,CZ) l00401282_thunk_fn004010F1
	goto l00401282_thunk_fn00401288
	// succ:  l00401282_thunk_fn00401288 l00401282_thunk_fn004010F1
l00401274:
	bl = ~bl
	dl = dl - 0x0C - C
	SCZO = cond(dl)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	edi = edi | edx
	SZO = cond(edi)
	C = false
	edx = edx + eax
	SCZO = cond(edx)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edx = edx ^ ebx
	SZO = cond(edx)
	C = false
	branch Test(ULE,CZ) l004010F1
	goto l00401282_thunk_fn00401288
	// succ:  l00401282_thunk_fn00401288 l00401282_thunk_fn004010F1
l00401282_thunk_fn004010F1:
	call fn004010F1 (retsize: 0;)
	return
	// succ:  fn00401274_exit
l00401282_thunk_fn004010F1:
	call fn004010F1 (retsize: 0;)
	return
	// succ:  fn00401274_exit
l00401282_thunk_fn00401288:
	call fn00401288 (retsize: 0;)
	return
	// succ:  fn00401274_exit l00401282_thunk_fn00401288
l00401282_thunk_fn00401288:
	call fn00401288 (retsize: 0;)
	return
	// succ:  fn00401274_exit
l00401282_thunk_fn00401288:
	call fn00401288 (retsize: 0;)
	return
	// succ:  fn00401274_exit
fn00401274_exit:


// fn00401288
// Return size: 0
void fn00401288()
fn00401288_entry:
	// succ:  l00401288
l00401288:
	v3 = ch
	ch = ch
	ch = v3
	branch Test(UGT,CZ) l004010F1
	goto l00401290
	// succ:  l00401290 l0040128A_thunk_fn004010F1
l0040128A_thunk_fn004010F1:
	call fn004010F1 (retsize: 0;)
	return
	// succ:  fn00401288_exit
l00401290:
	al = Mem0[esi:byte]
	esi = esi + 0x00000001
	v7 = Mem0[esi:byte]
	Mem0[edi:byte] = v7
	esi = esi + 0x00000001
	edi = edi + 0x00000001
	al = Mem0[esi:byte]
	esi = esi + 0x00000001
	eax = Mem0[esi:word32]
	esi = esi + 0x00000004
fn00401288_exit:


// fn00401296
// Return size: 4
void fn00401296()
fn00401296_entry:
	// succ:  l00401296
l00401296:
	esp = fp
	edx = edx - ebx
	SCZO = cond(edx)
	edi = edi - 0x00000001
	SZO = cond(edi)
	esi = esi + 0x00000001
	SZO = cond(esi)
	ebx = ebx | edx
	SZO = cond(ebx)
	C = false
	edi = esi
	edx = edx + edi
	SCZO = cond(edx)
	esi = ebx
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	esi = esi ^ edi
	SZO = cond(esi)
	C = false
	goto l004012A5_thunk_fn00401105
	// succ:  l004012A5_thunk_fn00401105
l00401296:
l004012A5_thunk_fn00401105:
	call fn00401105 (retsize: 4;)
	return
	// succ:  fn00401296_exit
fn00401296_exit:


// fn004012B0
// Return size: 0
void fn004012B0()
fn004012B0_entry:
	// succ:  l004012B0
l004012B0:
	esp = fp
	edi = edx
	bh = bh + 0xA6
	SCZO = cond(bh)
	bh = cl
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	ch = ch + cl
	SCZO = cond(ch)
	ch = ~ch
	bl = bl - 0x19 - C
	SCZO = cond(bl)
	bl = bl + 0x01
	SZO = cond(bl)
	esi = esi - 0x00000001
	SZO = cond(esi)
	branch Test(SG,S) l004012C3_thunk_fn00401274
	goto l004012C5
	// succ:  l004012C5 l004012C3_thunk_fn00401274
l004012B0:
l004012C3_thunk_fn00401274:
	call fn00401274 (retsize: 0;)
	return
	// succ:  fn004012B0_exit
l004012C5:
	di = di
	edx = edx
	branch Test(NS,S) l004012CA_thunk_fn00401274
	goto l004012CC
	// succ:  l004012CC l004012CA_thunk_fn00401274
l004012CA_thunk_fn00401274:
	call fn00401274 (retsize: 0;)
	return
	// succ:  fn004012B0_exit
l004012CC:
	v15 = eax
	eax = edx
	edx = v15
	ebp = ebp + 0x00000001
	SZO = cond(ebp)
	v18 = (Mem0[ecx:byte] & 0x01 << 0x01) != 0x00
	Mem0[ecx:byte] = __ror(Mem0[ecx:byte], 0x01)
	C = v18
	v20 = Mem0[esi:byte]
	Mem0[edi:byte] = v20
	esi = esi + 0x00000001
	edi = edi + 0x00000001
	// succ:  l004012D0_thunk_fn004012D2
l004012D0_thunk_fn004012D2:
	call fn004012D2 (retsize: 0;)
	return
	// succ:  fn004012B0_exit
fn004012B0_exit:


// fn004012D2
// Return size: 0
void fn004012D2()
fn004012D2_entry:
	// succ:  l004012D2
l004012D2:
	esp = fp
	esp = esp + 0x00000004
	ebx = ebx - ecx
	SCZO = cond(ebx)
	ch = ch + 0x01
	SZO = cond(ch)
	cl = cl - 0x01
	SZO = cond(cl)
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	edx = edx | esi
	SZO = cond(edx)
	C = false
	ebx = ebx ^ edi
	SZO = cond(ebx)
	C = false
	bh = ah
	cl = cl + 0x3F
	SCZO = cond(cl)
	branch Test(SG,S) l004012E7_thunk_fn004012B0
	goto l004012E9
	// succ:  l004012E9 l004012E7_thunk_fn004012B0
l004012E7_thunk_fn004012B0:
	call fn004012B0 (retsize: 0;)
	return
	// succ:  fn004012D2_exit
l004012E9:
	al = al
	branch Test(NS,S) l004012EB_thunk_fn004012B0
	goto l004012ED
	// succ:  l004012ED l004012EB_thunk_fn004012B0
l004012EB_thunk_fn004012B0:
	call fn004012B0 (retsize: 0;)
	return
	// succ:  fn004012D2_exit
l004012ED:
	eax = eax | 0x824A651F
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 0x0BC80342)
	call fn0040136E (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	// succ:  l004012F2_thunk_fn004012F3 l00401300_thunk_fn00401305
l004012F2_thunk_fn004012F3:
	call fn004012F3 (retsize: 6;)
	return
	// succ:  fn004012D2_exit
l00401300_thunk_fn00401305:
	call fn00401305 (retsize: 0;)
	return
	// succ:  fn004012D2_exit
fn004012D2_exit:


// fn004012F3
// Return size: 6
void fn004012F3()
fn004012F3_entry:
	// succ:  l004012F3
l004012F3:
	esp = fp
	edx = edx + 0x00000001
	SZO = cond(edx)
	ecx = ecx + eax
	SCZO = cond(ecx)
	edi = edi | esi
	SZO = cond(edi)
	C = false
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	edx = eax
	ebx = esi
	esi = esi ^ ecx
	SZO = cond(esi)
	C = false
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	call fn0040136E (retsize: 4;)
	goto l00401300_thunk_fn00401305
	// succ:  l00401300_thunk_fn00401305
l004012F3:
	v12 = Mem0[ecx - 0x00000075:byte] + 0x01
	Mem0[ecx - 0x00000075:byte] = v12
	SZO = cond(v12)
	v13 = (Mem0[ebx + 0x41F133DE:byte] & 0x01 << 0x01) != 0x00
	Mem0[ebx + 0x41F133DE:byte] = __ror(Mem0[ebx + 0x41F133DE:byte], 0x01)
	C = v13
l00401300_thunk_fn00401305:
	call fn00401305 (retsize: 0;)
	return
	// succ:  fn004012F3_exit
fn004012F3_exit:


// fn00401305
// Return size: 0
void fn00401305()
fn00401305_entry:
	// succ:  l00401305
l00401305:
	esp = fp
	ebx = 0x2B986F37
	goto l0040130A_in_fn00401305
	// succ:  l0040130A_in_fn00401305
l00401305:
	ebx = 0x2B986F37
	// succ:  l00401309
l00401309:
	// succ:  l0040130A
l0040130A:
	SCZO = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00401305_exit
l0040130A_in_fn00401305:
	SCZO = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00401305_exit
fn00401305_exit:


// fn00401327
// Return size: 0
void fn00401327()
fn00401327_entry:
	goto l00401327
	// succ:  l00401327
l00401065:
	ecx = esi
	dl = dl - bl
	SCZO = cond(dl)
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
	ch = -ch
	SCZO = cond(ch)
	C = ch == 0x00
	bh = bh + 0xBF
	SCZO = cond(bh)
	ecx = ecx - eax
	SCZO = cond(ecx)
	dh = bh
	dl = dl + 0xC0
	SCZO = cond(dl)
	cl = cl + 0xCE + C
	SCZO = cond(cl)
	edx = edx + 0x00000001
	SZO = cond(edx)
	call fn004012D2 (retsize: 4;)
	// succ:  l0040107B_thunk_fn00401080
l0040107B_thunk_fn00401080:
	call fn00401080 (retsize: 0;)
	return
	// succ:  fn00401327_exit
l00401327:
	esp = fp
	esi = esi | edx
	SZO = cond(esi)
	C = false
	ecx = ecx | eax
	SZO = cond(ecx)
	C = false
	ecx = ecx + edi
	SCZO = cond(ecx)
	cl = cl - 0xD9 - C
	SCZO = cond(cl)
	ebx = ebx ^ edi
	SZO = cond(ebx)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ch = ch | ah
	SZO = cond(ch)
	C = false
	goto l00401065
	// succ:  l00401065
l00401327:
fn00401327_exit:


// fn0040136E
// Return size: 4
void fn0040136E()
fn0040136E_entry:
	// succ:  l0040136E
l0040136E:
	esp = fp
	Mem0[esp - 0x00000020:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l0040136E_thunk_fn0040136F
l0040136E_thunk_fn0040136F:
	call fn0040136F (retsize: 4;)
	return
	// succ:  fn0040136E_exit
fn0040136E_exit:


// fn0040136F
// Return size: 4
void fn0040136F()
fn0040136F_entry:
	// succ:  l0040136F
l0040136F:
	esp = fp
	esp = esp + 0x00000001
	SZO = cond(esp)
	al = al & 0xE0
	SZO = cond(al)
	C = false
	ebx = edi
	ecx = ecx + edx
	SCZO = cond(ecx)
	edi = edi + 0x00000001
	SZO = cond(edi)
	ecx = ecx ^ esi
	SZO = cond(ecx)
	C = false
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	goto l0040137B_thunk_fn004011A5
	// succ:  l0040137B_thunk_fn004011A5
l0040136F:
	ebx = edi
	ecx = ecx + edx
	SCZO = cond(ecx)
	edi = edi + 0x00000001
	SZO = cond(edi)
	ecx = ecx ^ esi
	SZO = cond(ecx)
	C = false
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	goto l0040137B_thunk_fn004011A5
	// succ:  l0040137B_thunk_fn004011A5
l0040137B_thunk_fn004011A5:
	call fn004011A5 (retsize: 4;)
	return
	// succ:  fn0040136F_exit
l0040137B_thunk_fn004011A5:
	call fn004011A5 (retsize: 4;)
	return
	// succ:  fn0040136F_exit
fn0040136F_exit:


// fn004013AC
// Return size: 0
void fn004013AC()
fn004013AC_entry:
	// succ:  l004013AC
l004013AC:
	esp = fp
	call fn00402D29 (retsize: 4;)
	esp = esp + 0xFFFFFFFA
	v3 = eax
	eax = ebx
	ebx = v3
	al = al ^ 0x53
	SZO = cond(al)
	C = false
	ds = Mem0[edx - 0x0000001F + esi * 0x0008:selector]
l004013AC:
fn004013AC_exit:


// fn00402083
// Return size: 6
void fn00402083()
fn00402083_entry:
	// succ:  l00402083
l00402083:
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = ecx
	ecx = v3
	v5 = edx
	edx = edx
	edx = v5
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax + Mem0[eax + 0x0000003C:word32]
	SCZO = cond(eax)
	bh = bh | dh
	SZO = cond(bh)
	C = false
	bh = bh ^ dh
	SZO = cond(bh)
	C = false
	ebx = ebx ^ ecx
	SZO = cond(ebx)
	C = false
	bh = bh - ah
	SCZO = cond(bh)
	bh = ch
	bl = dl
	branch Test(ULE,CZ) l00402697
	// succ:  l004020A0 l00402697
l004020A0:
	branch Test(LT,SO) l004020A2
	// succ:  l004020A2
l004020A2:
	v20 = dl
	dl = dl
	dl = v20
	branch Test(UGT,CZ) l00402697
	// succ:  l004020AA l00402697
l004020AA:
	branch Test(NO,O) l004020E2
	// succ:  l004020AC l004020E2
l004020AC:
	v22 = Mem0[ecx + 0xCBFE9FB7:byte] + ch + C
	Mem0[ecx + 0xCBFE9FB7:byte] = v22
	SCZO = cond(v22)
	// succ:  l004020AC_thunk_fn004020B2
l004020AC_thunk_fn004020B2:
	call fn004020B2 (retsize: 6;)
	return
	// succ:  fn00402083_exit
l004020E2:
	Mem0[ebx + 0xF640D92B:word16] = cs
	// succ:  l004020E2_thunk_fn004020E8
l004020E2_thunk_fn004020E8:
	call fn004020E8 (retsize: 0;)
	return
	// succ:  fn00402083_exit
l00402697:
	bl = bl ^ ah
	SZO = cond(bl)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	bl = bl - 0x01
	SZO = cond(bl)
	esi = esi | ecx
	SZO = cond(esi)
	C = false
	bh = bh + bl
	SCZO = cond(bh)
	// succ:  l00402A23
l00402A23:
	esi = esi + eax
	SCZO = cond(esi)
	bh = bh + 0x71 + C
	SCZO = cond(bh)
	bh = bh + 0xCA + C
	SCZO = cond(bh)
	bh = bh + ah
	SCZO = cond(bh)
	bl = bl | cl
	SZO = cond(bl)
	C = false
	bh = bh - 0xA9 - C
	SCZO = cond(bh)
	branch Test(LE,SZO) l00402C99
	// succ:  l00402A38 l00402C99
l00402A38:
	v27 = si
	si = si
	si = v27
	branch Test(GT,SZO) l00402C99
	// succ:  l00402A41 l00402C99
l00402A41:
	esp = esp - 0x00000004
	Mem0[esp:word32] = es
	int3()
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	al = al & 0xC3
	SZO = cond(al)
	C = false
	bl = bl + 0x01
	SZO = cond(bl)
	bl = bl - ch
	SCZO = cond(bl)
	bl = bl - ah
	SCZO = cond(bl)
	edi = edi + ecx
	SCZO = cond(edi)
	bl = bl + dl
	SCZO = cond(bl)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	eax = ecx
	bl = bl - bh
	SCZO = cond(bl)
	bh = bh + 0xDA + C
	SCZO = cond(bh)
	// succ:  l00402A58_thunk_fn00402C05
l00402A58_thunk_fn00402C05:
	call fn00402C05 (retsize: 6;)
	return
	// succ:  fn00402083_exit
l00402C99:
	edx = eax + 0x000000F8
	bh = ~bh
	bh = ch
	ebx = ebx - edx
	SCZO = cond(ebx)
	bh = bh + 0x01
	SZO = cond(bh)
	bh = bh - 0x3D - C
	SCZO = cond(bh)
	ebx = ebx + edi
	SCZO = cond(ebx)
	esi = ebx
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	branch Test(OV,O) l00402CB2_thunk_fn00402F33
	goto l00402CB8
	// succ:  l00402CB8 l00402CB2_thunk_fn00402F33
l00402CB2_thunk_fn00402F33:
	call fn00402F33 (retsize: 0;)
	return
	// succ:  fn00402083_exit
l00402CB8:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	branch Test(NO,O) l00402CBA_thunk_fn00402F33
	goto l00402CC0
	// succ:  l00402CC0 l00402CBA_thunk_fn00402F33
l00402CBA_thunk_fn00402F33:
	call fn00402F33 (retsize: 0;)
	return
	// succ:  fn00402083_exit
l00402CC0:
fn00402083_exit:


// fn004020AE
// Return size: 0
void fn004020AE()
fn004020AE_entry:
	// succ:  l004020AE
l004020AE:
	esp = fp
	bh = 0x9F
	bl = bl - 0x01
	SZO = cond(bl)
	goto l004020B0_thunk_fn004020B2
	// succ:  l004020B0_thunk_fn004020B2
l004020AE:
l004020B0_thunk_fn004020B2:
	call fn004020B2 (retsize: 6;)
	return
	// succ:  fn004020AE_exit
fn004020AE_exit:


// fn004020B2
// Return size: 6
void fn004020B2()
fn004020B2_entry:
	// succ:  l004020B2
l004020B2:
	esp = fp
	esi = esi - eax
	SCZO = cond(esi)
	bl = bl + 0x2C
	SCZO = cond(bl)
	bl = bl ^ dh
	SZO = cond(bl)
	C = false
	bh = bh ^ dh
	SZO = cond(bh)
	C = false
	bl = bl + dl
	SCZO = cond(bl)
	call fn00402BC7 (retsize: 4;)
	edx = edx - 0x00000001
	SZO = cond(edx)
	Mem0[edi:word32] = __in(edx)
	edi = edi + 0x00000004
	al = al ^ 0xE6
	SZO = cond(al)
	C = false
	goto l004020C4_thunk_fn004020C6
	// succ:  l004020C4_thunk_fn004020C6
l004020B2:
	esi = esi - eax
	SCZO = cond(esi)
	bl = bl + 0x2C
	SCZO = cond(bl)
	bl = bl ^ dh
	SZO = cond(bl)
	C = false
	bh = bh ^ dh
	SZO = cond(bh)
	C = false
	bl = bl + dl
	SCZO = cond(bl)
	call fn00402BC7 (retsize: 4;)
	edx = edx - 0x00000001
	SZO = cond(edx)
	Mem0[edi:word32] = __in(edx)
	edi = edi + 0x00000004
	al = al ^ 0xE6
	SZO = cond(al)
	C = false
	goto l004020C4_thunk_fn004020C6
	// succ:  l004020C4_thunk_fn004020C6
l004020C4_thunk_fn004020C6:
	call fn004020C6 (retsize: 6;)
	return
	// succ:  fn004020B2_exit
l004020C4_thunk_fn004020C6:
	call fn004020C6 (retsize: 0;)
	return
	// succ:  fn004020B2_exit
fn004020B2_exit:


// fn004020C6
// Return size: 6
void fn004020C6()
fn004020C6_entry:
	// succ:  l004020C6
l004020C6:
	esp = fp
	dh = dh - ch
	SCZO = cond(dh)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	dh = dl
	bl = bl ^ cl
	SZO = cond(bl)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[ecx:word32]
	bh = bh + 0xEE + C
	SCZO = cond(bh)
	dh = dh + cl
	SCZO = cond(dh)
	dl = dl - 0x01
	SZO = cond(dl)
	bh = bh + dl
	SCZO = cond(bh)
	bl = bl + 0xBC
	SCZO = cond(bl)
	goto l0040256F
	// succ:  l0040256F
l004020C6:
l0040256F:
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	bh = bh + 0xF2 + C
	SCZO = cond(bh)
	bh = ~bh
	dh = dh ^ dl
	SZO = cond(dh)
	C = false
	dl = dl | bl
	SZO = cond(dl)
	C = false
	ah = ah + 0x84
	SCZO = cond(ah)
	bl = 0x7C
	esi = esi | edx
	SZO = cond(esi)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	// succ:  l00402EB7
l00402EB7:
	edi = edi - ebx
	SCZO = cond(edi)
	edx = edx + 0x00000001
	SZO = cond(edx)
	dh = dh + cl
	SCZO = cond(dh)
	bh = bh | dl
	SZO = cond(bh)
	C = false
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	bh = bh - 0xF7 - C
	SCZO = cond(bh)
	edx = edx - 0x00000001
	SZO = cond(edx)
	call fn004028C0 (retsize: 4;)
	esp = esp + 0xFFFFFFFA
	return
	// succ:  fn004020C6_exit
fn004020C6_exit:


// fn004020E4
// Return size: 0
void fn004020E4()
fn004020E4_entry:
	// succ:  l004020E4
l004020E4:
	esp = fp
	ebx = ebx - ecx
	SCZO = cond(ebx)
	eax = eax + 0x00000001
	SZO = cond(eax)
	cl = ~cl
	goto l004020E7_thunk_fn004020E8
	// succ:  l004020E7_thunk_fn004020E8
l004020E4:
l004020E7_thunk_fn004020E8:
	call fn004020E8 (retsize: 0;)
	return
	// succ:  fn004020E4_exit
fn004020E4_exit:


// fn004020E8
// Return size: 0
void fn004020E8()
fn004020E8_entry:
	// succ:  l004020E8
l004020E8:
	esp = fp
	esi = esi >> 0x00000001
	SCZO = cond(esi)
l004020E8:
	ch = ch - 0x01
	SZO = cond(ch)
	ecx = ebx
	ch = ch - 0x01
	SZO = cond(ch)
	eax = eax + 0x00000001
	SZO = cond(eax)
	ecx = ecx - ebx
	SCZO = cond(ecx)
	branch Test(ULT,C) TMP!
fn004020E8_exit:


// fn00402107
// Return size: 0
void fn00402107()
fn00402107_entry:
	// succ:  l00402107
l00402107:
	esp = fp
	Mem0[esp - 0x00000024:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = bl + 0x89
	SCZO = cond(bl)
	bh = bh + 0x01
	SZO = cond(bh)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bl = bl + 0x77
	SCZO = cond(bl)
	bl = bl - 0x09 - C
	SCZO = cond(bl)
	edi = edi | edx
	SZO = cond(edi)
	C = false
	bh = bh ^ cl
	SZO = cond(bh)
	C = false
	edi = ecx
	bh = bh - 0x01
	SZO = cond(bh)
fn00402107_exit:


// fn0040212A
// Return size: 6
void fn0040212A()
fn0040212A_entry:
	// succ:  l0040212A
l0040212A:
	esp = fp
	ch = ch + 0x2C + C
	SCZO = cond(ch)
	edx = eax
	ebx = ebx + ecx
	SCZO = cond(ebx)
	eax = eax | ebx
	SZO = cond(eax)
	C = false
	ch = ch - dl
	SCZO = cond(ch)
	esi = esi | edx
	SZO = cond(esi)
	C = false
	bl = ~bl
	goto l0040291C
	// succ:  l0040291C
l0040212A:
l0040291C:
	ch = ch + cl
	SCZO = cond(ch)
	edi = edi + 0x00000001
	SZO = cond(edi)
	edi = edi | edx
	SZO = cond(edi)
	C = false
	ah = ah - 0xDB - C
	SCZO = cond(ah)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ch = ~ch
	al = al + 0x29 + C
	SCZO = cond(al)
	al = al + 0x01
	SZO = cond(al)
	// succ:  l00402ED2
l00402ED2:
	cl = cl ^ bh
	SZO = cond(cl)
	C = false
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	bl = cl
	ch = 0xB2
	bl = ~bl
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	branch Test(ULT,C) l00402EDD_thunk_fn00402BE8
	goto l00402EE3
	// succ:  l00402EE3 l00402EDD_thunk_fn00402BE8
l00402EDD_thunk_fn00402BE8:
	call fn00402BE8 (retsize: 6;)
	return
	// succ:  fn0040212A_exit
l00402EE3:
	ecx = ecx
	branch Test(UGE,C) l00402EE5_thunk_fn00402BE8
	goto l00402EEB
	// succ:  l00402EEB l00402EE5_thunk_fn00402BE8
l00402EE5_thunk_fn00402BE8:
	call fn00402BE8 (retsize: 6;)
	return
	// succ:  fn0040212A_exit
l00402EEB:
	esp = esp - 0x00000004
	Mem0[esp:word32] = cs
	al = __inb(dx)
	al = al & Mem0[edi + 0x2A1B4D56:byte]
	SZO = cond(al)
	C = false
	// succ:  l00402EED_thunk_fn00402EF3
l00402EED_thunk_fn00402EF3:
	call fn00402EF3 (retsize: 0;)
	return
	// succ:  fn0040212A_exit
fn0040212A_exit:


// fn00402146
// Return size: 0
void fn00402146()
fn00402146_entry:
	// succ:  l00402146
l00402146:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = edi
	edi = v3
	v5 = cl
	cl = cl
	cl = v5
	esi = esi
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax + ebx
	SCZO = cond(eax)
	bh = bh - 0x01
	SZO = cond(bh)
	bl = bl | dl
	SZO = cond(bl)
	C = false
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	// succ:  l00402156_thunk_fn004020AE
l00402156_thunk_fn004020AE:
	call fn004020AE (retsize: 0;)
	return
	// succ:  fn00402146_exit
fn00402146_exit:


// fn00402162
// Return size: 4
void fn00402162()
fn00402162_entry:
	// succ:  l00402162
l00402162:
	esp = esp + 0x00000004
	esi = esi + 0x00000001
	SZO = cond(esi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	bh = bh + ch
	SCZO = cond(bh)
	eax = eax + ecx
	SCZO = cond(eax)
	bh = bh | bl
	SZO = cond(bh)
	C = false
	branch Test(OV,O) l00402AB7
	// succ:  l00402174 l00402AB7
l00402174:
l00402185:
	ah = ah | bl
	SZO = cond(ah)
	C = false
	esi = esi - eax
	SCZO = cond(esi)
	bl = ~bl
	dl = dl + bh
	SCZO = cond(dl)
	al = al - ch
	SCZO = cond(al)
	ebx = ebx ^ ecx
	SZO = cond(ebx)
	C = false
	// succ:  l00402A62
l00402A62:
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	dl = dl + 0x01
	SZO = cond(dl)
	cl = cl + 0x2A + C
	SCZO = cond(cl)
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	dh = dh ^ bl
	SZO = cond(dh)
	C = false
	dh = dh + 0x93 + C
	SCZO = cond(dh)
	esi = esi ^ ecx
	SZO = cond(esi)
	C = false
	call fn00402B3C (retsize: 4;)
	SCZDOP = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000001
	SZO = cond(esp)
	v24 = Mem0[esi + 0xC00B57C6 + ebp:byte] + 0x0F
	Mem0[esi + 0xC00B57C6 + ebp:byte] = v24
	SCZO = cond(v24)
	// succ:  l00402A7B_thunk_fn00402A80
l00402A7B_thunk_fn00402A80:
	call fn00402A80 (retsize: 0;)
	return
	// succ:  fn00402162_exit
l00402AB7:
	bh = bh ^ al
	SZO = cond(bh)
	C = false
	bh = bh + 0xE8
	SCZO = cond(bh)
	bl = bl ^ bh
	SZO = cond(bl)
	C = false
	bh = bh + ch
	SCZO = cond(bh)
	edi = edi + 0x00000001
	SZO = cond(edi)
	edi = edi - 0x00000001
	SZO = cond(edi)
	bl = bl - 0x45 - C
	SCZO = cond(bl)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bl = al
	bh = bh - 0x01
	SZO = cond(bh)
	call fn00402376 (retsize: 4;)
	Mem0[edi + 0x34877ABA:byte] = bh
	al = al & 0xF2
	SZO = cond(al)
	C = false
	bh = bh
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	cl = cl - 0x02 - C
	SCZO = cond(cl)
	bh = bh - 0x01
	SZO = cond(bh)
	al = al - 0xE2 - C
	SCZO = cond(al)
	branch Test(ULE,CZ) l00402185
	// succ:  l00402AE9 l00402185
l00402AE9:
	// succ:  l00402AEE
l00402AEE:
	branch Test(UGT,CZ) l00402185
	// succ:  l00402AF4 l00402185
l00402AF4:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	return
	// succ:  fn00402162_exit
fn00402162_exit:


// fn004021E6
// Return size: 6
void fn004021E6()
fn004021E6_entry:
	// succ:  l004021E6
l004021E6:
	esp = fp
	bh = bh + al
	SCZO = cond(bh)
	goto l004021E7
	// succ:  l004021E7
l004021E6:
l004021E7:
	edi = edi - 0x00000001
	SZO = cond(edi)
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	bh = bh - al
	SCZO = cond(bh)
	bh = ~bh
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bl = dl
	edi = edi | eax
	SZO = cond(edi)
	C = false
	call fn00402F82 (retsize: 4;)
	edx_eax = (int64) eax
	return
	// succ:  fn004021E6_exit
fn004021E6_exit:


// fn004021FE
// Return size: 0
void fn004021FE()
fn004021FE_entry:
	// succ:  l004021FE
l004021FE:
	esp = fp
	esp = esp + 0x00000004
	al = bh
	al = 0x49
	eax = eax + ecx
	SCZO = cond(eax)
	cl = ~cl
	ah = ah + 0x79 + C
	SCZO = cond(ah)
	eax = ebx
	ch = dh
	branch Test(LT,SO) l00402211_thunk_fn00402479
	goto l00402217
	// succ:  l00402217 l00402211_thunk_fn00402479
l00402211_thunk_fn00402479:
	call fn00402479 (retsize: 0;)
	return
	// succ:  fn004021FE_exit
l00402217:
	bl = bl
	bx = bx
	branch Test(GE,SO) l0040221C_thunk_fn00402479
	goto l00402222
	// succ:  l00402222 l0040221C_thunk_fn00402479
l0040221C_thunk_fn00402479:
	call fn00402479 (retsize: 0;)
	return
	// succ:  fn004021FE_exit
l00402222:
	al = al - 0xED - C
	SCZO = cond(al)
	v17 = eax
	eax = edx
	edx = v17
	al = al & 0xC5
	SZO = cond(al)
	C = false
	// succ:  l00402225_thunk_fn00402227
l00402225_thunk_fn00402227:
	call fn00402227 (retsize: 0;)
	return
	// succ:  fn004021FE_exit
fn004021FE_exit:


// fn00402227
// Return size: 0
void fn00402227()
fn00402227_entry:
	// succ:  l00402227
l00402227:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = ebx
	ebx = v3
	esp = esp - 0x00000002
	Mem0[esp:word16] = cx
	cx = Mem0[esp:word16]
	esp = esp + 0x00000002
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh | dh
	SZO = cond(bh)
	C = false
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	ecx = ecx | ebx
	SZO = cond(ecx)
	C = false
	cl = cl ^ dl
	SZO = cond(cl)
	C = false
	edi = edx
	esi = esi | edx
	SZO = cond(esi)
	C = false
	branch Test(OV,O) l0040223B_thunk_fn0040265C
	goto l00402241
	// succ:  l00402241 l0040223B_thunk_fn0040265C
l0040223B_thunk_fn0040265C:
	call fn0040265C (retsize: 0;)
	return
	// succ:  fn00402227_exit
l00402241:
	// succ:  l00402246
l00402246:
	branch Test(NO,O) l00402246_thunk_fn0040265C
	goto l0040224C
	// succ:  l0040224C l00402246_thunk_fn0040265C
l00402246_thunk_fn0040265C:
	call fn0040265C (retsize: 0;)
	return
	// succ:  fn00402227_exit
l0040224C:
	v18 = Mem0[esi + 0xE70A48F9:word32] + 0xCA0BEE02 + C
	Mem0[esi + 0xE70A48F9:word32] = v18
	SCZO = cond(v18)
	// succ:  l0040224C_thunk_fn00402250
l0040224C_thunk_fn00402250:
	call fn00402250 (retsize: 0;)
	return
	// succ:  fn00402227_exit
l00402549_thunk_fn00402800:
	call fn00402800 (retsize: 6;)
	return
	// succ:  fn00402227_exit
fn00402227_exit:


// fn00402250
// Return size: 0
void fn00402250()
fn00402250_entry:
	// succ:  l00402250
l00402250:
	esp = fp
	ah = ah | bh
	SZO = cond(ah)
	C = false
	ch = ch + dh
	SCZO = cond(ch)
	ecx = ecx | edx
	SZO = cond(ecx)
	C = false
	ecx = ecx | edx
	SZO = cond(ecx)
	C = false
	ch = ~ch
	edi = edi - 0x00000001
	SZO = cond(edi)
	edi = esi
	al = al - ah
	SCZO = cond(al)
	bh = bh + 0x5F + C
	SCZO = cond(bh)
	branch Test(ULE,CZ) l00402262_thunk_fn0040253D
	goto l00402262_thunk_fn00402268
	// succ:  l00402262_thunk_fn00402268 l00402262_thunk_fn0040253D
l00402250:
	ecx = ecx | edx
	SZO = cond(ecx)
	C = false
	ch = ~ch
	edi = edi - 0x00000001
	SZO = cond(edi)
	edi = esi
	al = al - ah
	SCZO = cond(al)
	bh = bh + 0x5F + C
	SCZO = cond(bh)
	branch Test(ULE,CZ) l0040253D
	// succ:  l0040225C_thunk_fn00402268 l0040225C_thunk_fn0040253D
l0040225C_thunk_fn00402268:
	call fn00402268 (retsize: 0;)
	return
	// succ:  fn00402250_exit
l0040225C_thunk_fn0040253D:
	call fn0040253D (retsize: 0;)
	return
	// succ:  fn00402250_exit
l00402262_thunk_fn00402268:
	call fn00402268 (retsize: 0;)
	return
	// succ:  fn00402250_exit l00402262_thunk_fn00402268
l00402262_thunk_fn00402268:
	call fn00402268 (retsize: 0;)
	return
	// succ:  fn00402250_exit
l00402262_thunk_fn0040253D:
	call fn0040253D (retsize: 0;)
	return
	// succ:  fn00402250_exit
fn00402250_exit:


// fn00402268
// Return size: 0
void fn00402268()
fn00402268_entry:
	// succ:  l00402268
l00402268:
	v3 = eax
	eax = eax
	eax = v3
	branch Test(LE,SZO) l0040226C
	// succ:  l0040226C
l0040226C:
	branch Test(UGT,CZ) l0040253D
	goto l00402272
	// succ:  l00402272 l0040226C_thunk_fn0040253D
l0040226C_thunk_fn0040253D:
	call fn0040253D (retsize: 0;)
	return
	// succ:  fn00402268_exit
l00402272:
	cs = di
	__outb(0x8D, al)
	esp = esp - 0x00000004
	Mem0[esp:word32] = es
	__outb(dx, al)
	// succ:  l00402277_thunk_fn00402278
l00402277_thunk_fn00402278:
	call fn00402278 (retsize: 0;)
	return
	// succ:  fn00402268_exit
fn00402268_exit:


// fn00402278
// Return size: 4
void fn00402278()
fn00402278_entry:
	call fn00402A05 (retsize: 0;)
	return
	// succ:  l00402278 fn00402278_exit
l00402278:
	ecx = ecx ^ eax
	SZO = cond(ecx)
	C = false
	al = al - dh
	SCZO = cond(al)
	eax = eax ^ edi
	SZO = cond(eax)
	C = false
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ch = ~ch
	eax = eax | edi
	SZO = cond(eax)
	C = false
	ah = ah | bl
	SZO = cond(ah)
	C = false
	v13 = (bl & 0x01 << 0x0E) != 0x00
	bl = __ror(bl, 0x0E)
	C = v13
	al = al - dl
	SCZO = cond(al)
	call fn00402936 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	v26 = (dl & 0x01 << 0x3D) != 0x00
	dl = __rcr(dl, 0x3D, C)
	C = v26
	ebx = Mem0[edx + 0x0000005A:word32] *s 0x800FE1C1
	SCZO = cond(ebx)
	// succ:  l00402293_thunk_fn0040229A
l00402293_thunk_fn0040229A:
	call fn0040229A (retsize: 4;)
	return
	// succ:  fn00402278_exit
fn00402278_exit:


// fn00402296
// Return size: 6
void fn00402296()
fn00402296_entry:
	// succ:  l00402296
l00402296:
	esp = fp
	ecx = ecx << 0x0000000F
	SCZO = cond(ecx)
	dl = dl + 0xF4
	SCZO = cond(dl)
	goto l00402299_thunk_fn0040229A
	// succ:  l00402299_thunk_fn0040229A
l00402296:
l00402299_thunk_fn0040229A:
	call fn0040229A (retsize: 4;)
	return
	// succ:  fn00402296_exit
fn00402296_exit:


// fn0040229A
// Return size: 4
void fn0040229A()
fn0040229A_entry:
	// succ:  l0040229A
l0040229A:
	esp = fp
	return
	// succ:  fn0040229A_exit
l0040229A:
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	dl = dl ^ ah
	SZO = cond(dl)
	C = false
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bh = ~bh
	bh = bh - 0x01
	SZO = cond(bh)
	bl = bl ^ dl
	SZO = cond(bl)
	C = false
	// succ:  l004022A8_thunk_fn00402827
l004022A8_thunk_fn00402827:
	call fn00402827 (retsize: 6;)
	return
	// succ:  fn0040229A_exit
fn0040229A_exit:


// fn004022B5
// Return size: 4
void fn004022B5()
fn004022B5_entry:
	// succ:  l004022B5
l004022B5:
	esp = fp
	esi = esi + 0x00000001
	SZO = cond(esi)
	ecx = eax
	eax = eax - edx
	SCZO = cond(eax)
	al = 0x1A
	cl = cl - 0x01
	SZO = cond(cl)
	ecx = ecx + edi
	SCZO = cond(ecx)
	al = al - 0x01
	SZO = cond(al)
	eax = eax - 0x00000001
	SZO = cond(eax)
	cl = cl + 0x0E
	SCZO = cond(cl)
	goto l0040276C
	// succ:  l0040276C
l004022B5:
l0040276C:
	ecx = esi
	eax = eax | ebx
	SZO = cond(eax)
	C = false
	call fn00402DEE (retsize: 4;)
	esp = esp + 0xFFFFFFFA
	// succ:  l0040276E_thunk_fn0040276F
l0040276E_thunk_fn0040276F:
	call fn0040276F (retsize: 4;)
	return
	// succ:  fn004022B5_exit
fn004022B5_exit:


// fn004022D2
// Return size: 0
void fn004022D2()
fn004022D2_entry:
	// succ:  l004022D2
l004022D2:
	esp = fp
	eax = eax + 0x00000078
	edi = edi + 0x00000001
	SZO = cond(edi)
	edi = edi ^ esi
	SZO = cond(edi)
	C = false
	bh = bh + 0x61
	SCZO = cond(bh)
	bh = bh - 0x01
	SZO = cond(bh)
	bl = bl ^ ah
	SZO = cond(bl)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	bl = ch
	bl = bl + bh
	SCZO = cond(bl)
	edi = edi - ecx
	SCZO = cond(edi)
	goto l00402E9E
	// succ:  l00402E9E
l004022D2:
l00402E69:
	bl = bl - 0x01
	SZO = cond(bl)
	eax = eax + 0x00000008
	SCZO = cond(eax)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bl = bl - 0xE0 - C
	SCZO = cond(bl)
	bl = bl - dh
	SCZO = cond(bl)
	ebx = ebx ^ edi
	SZO = cond(ebx)
	C = false
	call fn00402107 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	bl = bl - Mem0[eax + 0xF1B49F02:byte] - C
	SCZO = cond(bl)
	call fn004028DF (retsize: 4;)
	// succ:  l00402E7D_thunk_fn00402E81 l00402E94_thunk_fn00402E99
l00402E7D_thunk_fn00402E81:
	call fn00402E81 (retsize: 0;)
	return
	// succ:  fn004022D2_exit
l00402E94_thunk_fn00402E99:
	call fn00402E99 (retsize: 0;)
	return
	// succ:  fn004022D2_exit
l00402E9E:
	ebx = ecx
	goto l00402E9F
	// succ:  l00402E9F
fn004022D2_exit:


// fn004022F0
// Return size: 6
void fn004022F0()
fn004022F0_entry:
	// succ:  l004022F0
l004022F0:
	esp = fp
	Mem0[esp - 0x00000020:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh | dh
	SZO = cond(bh)
	C = false
	bh = bh + 0x7F + C
	SCZO = cond(bh)
	bl = 0x0A
	bh = ~bh
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	edi = edi | edx
	SZO = cond(edi)
	C = false
	// succ:  l004027E4
l004027E4:
	edi = ebx
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	bh = bh - 0x01
	SZO = cond(bh)
	bl = bl - 0x01
	SZO = cond(bl)
	edi = edi - ebx
	SCZO = cond(edi)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	bl = bl + 0xD8 + C
	SCZO = cond(bl)
	bl = ~bl
	ebx = (word32) ah
	// succ:  l004027FA_thunk_fn0040284A
l004027FA_thunk_fn0040284A:
	call fn0040284A (retsize: 6;)
	return
	// succ:  fn004022F0_exit
fn004022F0_exit:


// fn00402376
// Return size: 0
void fn00402376()
fn00402376_entry:
	// succ:  l00402376
l00402376:
	esp = fp
	Mem0[esp:word32] = edx
	eax = eax
fn00402376_exit:


// fn00402393
// Return size: 6
void fn00402393()
fn00402393_entry:
	// succ:  l00402393
l00402393:
	esp = fp
	edx = edx - eax
	SCZO = cond(edx)
	edx = edx + ebx
	SCZO = cond(edx)
	bh = bh + 0xF6 + C
	SCZO = cond(bh)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	dl = dl - 0x01
	SZO = cond(dl)
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	edx = (word32) al
	bl = bl | ch
	SZO = cond(bl)
	C = false
	goto l004023A4
	// succ:  l004023A4
l00402393:
l004023A4:
	call fn004022F0 (retsize: 4;)
	esp = esp + 0xFFFFFFFA
	branch Test(GE,SO) l004023A4
	// succ:  l004023AC l004023A4
l004023AC:
	dh = 0x5D
	return
	// succ:  fn00402393_exit
fn00402393_exit:


// fn004023AF
// Return size: 6
void fn004023AF()
fn004023AF_entry:
	// succ:  l004023AF
l004023AF:
	esp = fp
	dh = dh + 0xFC + C
	SCZO = cond(dh)
	bl = bl | cl
	SZO = cond(bl)
	C = false
	eax = ebx
	edi = edi - 0x00000001
	SZO = cond(edi)
	dl = 0x35
	edi = edi - 0x00000001
	SZO = cond(edi)
	eax = eax + ebx
	SCZO = cond(eax)
	goto l00402554
	// succ:  l00402554
l004023AF:
l00402554:
	dh = dh - bh
	SCZO = cond(dh)
	bh = bh | dl
	SZO = cond(bh)
	C = false
	al = al + 0x3E + C
	SCZO = cond(al)
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	dl = dl - 0xDE - C
	SCZO = cond(dl)
	eax = eax + edi
	SCZO = cond(eax)
	ah = ah ^ dl
	SZO = cond(ah)
	C = false
	// succ:  l00402564_thunk_fn00402296
l00402564_thunk_fn00402296:
	call fn00402296 (retsize: 6;)
	return
	// succ:  fn004023AF_exit
fn004023AF_exit:


// fn004023C8
// Return size: 0
void fn004023C8()
fn004023C8_entry:
	// succ:  l004023C8
l004023C8:
	esp = fp
	eax = eax + esi
	SCZO = cond(eax)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ch = ~ch
	ecx = ecx ^ edx
	SZO = cond(ecx)
	C = false
	ah = ah + ch
	SCZO = cond(ah)
	al = al + 0xCF + C
	SCZO = cond(al)
l004023C8:
fn004023C8_exit:


// fn004023E0
// Return size: 6
void fn004023E0()
fn004023E0_entry:
	// succ:  l004023E0
l004023E0:
	esp = fp
	ch = bh
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	ch = ch | dh
	SZO = cond(ch)
	C = false
	ecx = ebx
	ecx = edx
	ecx = ecx | eax
	SZO = cond(ecx)
	C = false
	cl = cl + ah
	SCZO = cond(cl)
	ecx = ecx | ebx
	SZO = cond(ecx)
	C = false
	call fn0040260A (retsize: 4;)
	ecx = 0xBF780048
	goto l004023F5_thunk_fn004023FA
	// succ:  l004023F5_thunk_fn004023FA
l004023E0:
l004023F5_thunk_fn004023FA:
	call fn004023FA (retsize: 6;)
	return
	// succ:  fn004023E0_exit
fn004023E0_exit:


// fn004023FA
// Return size: 6
void fn004023FA()
fn004023FA_entry:
	// succ:  l004023FA
l004023FA:
	esp = fp
	edx = edx ^ ecx
	SZO = cond(edx)
	C = false
	bh = ~bh
	ah = ~ah
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	ah = 0xF5
	esi = esi | edi
	SZO = cond(esi)
	C = false
	call fn00402F11 (retsize: 4;)
	v12 = eax
	eax = edx
	edx = v12
	al = al + 0x8A
	SCZO = cond(al)
	v16 = Mem0[edi + 0xD424448F:word32] >>u cl
	Mem0[edi + 0xD424448F:word32] = v16
	SCZO = cond(v16)
	goto l0040240E_thunk_fn00402414
	// succ:  l0040240E_thunk_fn00402414
l004023FA:
l0040240E_thunk_fn00402414:
	call fn00402414 (retsize: 6;)
	return
	// succ:  fn004023FA_exit
fn004023FA_exit:


// fn00402410
// Return size: 6
void fn00402410()
fn00402410_entry:
	// succ:  l00402410
l00402410:
	Mem0[esp - 0x0000002C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00402410_thunk_fn00402414
l00402410_thunk_fn00402414:
	call fn00402414 (retsize: 6;)
	return
	// succ:  fn00402410_exit
fn00402410_exit:


// fn00402414
// Return size: 6
void fn00402414()
fn00402414_entry:
	// succ:  l00402414
l00402414:
	esp = fp
	edi = edi | esi
	SZO = cond(edi)
	C = false
	edi = edi | edx
	SZO = cond(edi)
	C = false
	bh = bl
	bl = bl + 0x3C
	SCZO = cond(bl)
	eax = Mem0[eax:word32]
	branch Test(EQ,Z) l0040241F_thunk_fn004021E6
	goto l0040241F_thunk_fn00402425
	// succ:  l0040241F_thunk_fn00402425 l0040241F_thunk_fn004021E6
l00402414:
	edi = edi | esi
	SZO = cond(edi)
	C = false
	edi = edi | edx
	SZO = cond(edi)
	C = false
	bh = bl
	bl = bl + 0x3C
	SCZO = cond(bl)
	eax = Mem0[eax:word32]
	branch Test(EQ,Z) l0040241F_thunk_fn004021E6
	goto l0040241F_thunk_fn00402425
	// succ:  l0040241F_thunk_fn00402425 l0040241F_thunk_fn004021E6
l0040241F_thunk_fn004021E6:
	call fn004021E6 (retsize: 6;)
	return
	// succ:  fn00402414_exit
l0040241F_thunk_fn004021E6:
	call fn004021E6 (retsize: 6;)
	return
	// succ:  fn00402414_exit
l0040241F_thunk_fn00402425:
	call fn00402425 (retsize: 0;)
	return
	// succ:  fn00402414_exit l0040241F_thunk_fn00402425
l0040241F_thunk_fn00402425:
	call fn00402425 (retsize: 0;)
	return
	// succ:  fn00402414_exit
l0040241F_thunk_fn00402425:
	call fn00402425 (retsize: 0;)
	return
	// succ:  fn00402414_exit
fn00402414_exit:


// fn00402425
// Return size: 0
void fn00402425()
fn00402425_entry:
	// succ:  l00402425
l00402425:
fn00402425_exit:


// fn00402436
// Return size: 0
void fn00402436()
fn00402436_entry:
	// succ:  l00402436
l00402436:
	esp = fp
	ch = ch ^ cl
	SZO = cond(ch)
	C = false
	ecx = ecx | esi
	SZO = cond(ecx)
	C = false
	ecx = ecx | esi
	SZO = cond(ecx)
	C = false
	SCZO = cond(eax - 0x004586FF)
	branch Test(NE,Z) l00402442_thunk_fn00402B61
	goto l00402448
	// succ:  l00402448 l00402442_thunk_fn00402B61
l00402436:
l00402442_thunk_fn00402B61:
	call fn00402B61 (retsize: 0;)
	return
	// succ:  fn00402436_exit
l00402448:
	bh = cl
	edx = esi
	cl = cl - al
	SCZO = cond(cl)
	bl = bl + 0xFC
	SCZO = cond(bl)
	call fn00402AD4 (retsize: 4;)
	v16 = (Mem0[esi:word32] & 0x00000001 << 0x20 - 0x01) != 0x00000000
	Mem0[esi:word32] = __rol(Mem0[esi:word32], 0x01)
	C = v16
	eax = Mem0[esi:word32]
	esi = esi + 0x00000004
	ecx = ecx | Mem0[edi + 0x80EC2444:word32]
	SZO = cond(ecx)
	C = false
	// succ:  l00402459_thunk_fn0040245F
l00402459_thunk_fn0040245F:
	call fn0040245F (retsize: 6;)
	return
	// succ:  fn00402436_exit
fn00402436_exit:


// fn0040245A
// Return size: 6
void fn0040245A()
fn0040245A_entry:
	// succ:  l0040245A
l0040245A:
	esp = fp
	Mem0[esp - 0x00000014:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh + 0x65 + C
	SCZO = cond(bh)
	// succ:  l0040245E_thunk_fn0040245F
l0040245E_thunk_fn0040245F:
	call fn0040245F (retsize: 6;)
	return
	// succ:  fn0040245A_exit
fn0040245A_exit:


// fn0040245F
// Return size: 6
void fn0040245F()
fn0040245F_entry:
	// succ:  l0040245F
l0040245F:
	esp = fp
	al = Mem0[ebx + (uint32) al:byte]
	bh = bh + 0x01
	SZO = cond(bh)
	bl = bl ^ bh
	SZO = cond(bl)
	C = false
	bl = bl + 0x01
	SZO = cond(bl)
	bh = bh + 0xA7 + C
	SCZO = cond(bh)
	bh = bh - 0x3B - C
	SCZO = cond(bh)
	call fn00402AF9 (retsize: 4;)
	SCZO = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040245F_exit
l0040245F:
	bh = bh + 0x01
	SZO = cond(bh)
	bl = bl ^ bh
	SZO = cond(bl)
	C = false
	bl = bl + 0x01
	SZO = cond(bl)
	bh = bh + 0xA7 + C
	SCZO = cond(bh)
	bh = bh - 0x3B - C
	SCZO = cond(bh)
fn0040245F_exit:


// fn00402479
// Return size: 0
void fn00402479()
fn00402479_entry:
	// succ:  l00402479
l00402479:
	esp = fp
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	ah = ah - bh
	SCZO = cond(ah)
	al = dl
	eax = eax + 0x00000001
	SZO = cond(eax)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ah = ah + 0x54
	SCZO = cond(ah)
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	ecx = ecx ^ ebx
	SZO = cond(ecx)
	C = false
	call fn00402494 (retsize: 4;)
	eax = 0xCF6D36BC
	eax = 0x24648DEC
	goto l00402492_thunk_fn00402497
	// succ:  l00402492_thunk_fn00402497
l00402479:
l00402492_thunk_fn00402497:
	call fn00402497 (retsize: 0;)
	return
	// succ:  fn00402479_exit
fn00402479_exit:


// fn00402494
// Return size: 0
void fn00402494()
fn00402494_entry:
	// succ:  l00402494
l00402494:
	esp = fp
	esp = esp + 0x00000004
	// succ:  l00402494_thunk_fn00402497
l00402494_thunk_fn00402497:
	call fn00402497 (retsize: 0;)
	return
	// succ:  fn00402494_exit
fn00402494_exit:


// fn00402497
// Return size: 0
void fn00402497()
fn00402497_entry:
	// succ:  l00402497
l00402497:
	esp = fp
	al = al + 0x02
	SCZO = cond(al)
	Mem0[edx:word32] = 0x80D5F6C7
	v6 = (Mem0[esi:word32] & 0x00000001 << 0x20 - 0x01) != 0x00000000
	Mem0[esi:word32] = __rcl(Mem0[esi:word32], 0x01, C)
	C = v6
	cl = ~cl
	ecx = ecx ^ esi
	SZO = cond(ecx)
	C = false
	branch Test(PE,P) l004024A5_thunk_fn004028A4
	goto l004024A5_thunk_fn004024AB
	// succ:  l004024A5_thunk_fn004024AB l004024A5_thunk_fn004028A4
l00402497:
	al = al + bh
	SCZO = cond(al)
	al = al ^ bh
	SZO = cond(al)
	C = false
	ch = ~ch
	cl = cl + 0x16 + C
	SCZO = cond(cl)
	cl = ~cl
	ecx = ecx ^ esi
	SZO = cond(ecx)
	C = false
	branch Test(PE,P) l004024A5_thunk_fn004028A4
	// succ:  l004024A4_thunk_fn004024AB l004024A5_thunk_fn004028A4
l004024A4_thunk_fn004024AB:
	call fn004024AB (retsize: 0;)
	return
	// succ:  fn00402497_exit
l004024A5_thunk_fn004024AB:
	call fn004024AB (retsize: 0;)
	return
	// succ:  fn00402497_exit l004024A5_thunk_fn004024AB
l004024A5_thunk_fn004024AB:
	call fn004024AB (retsize: 0;)
	return
	// succ:  fn00402497_exit
l004024A5_thunk_fn004028A4:
	call fn004028A4 (retsize: 0;)
	return
	// succ:  fn00402497_exit
l004024A5_thunk_fn004028A4:
	call fn004028A4 (retsize: 0;)
	return
	// succ:  fn00402497_exit
fn00402497_exit:


// fn004024AB
// Return size: 0
void fn004024AB()
fn004024AB_entry:
	// succ:  l004024AB
l004024AB:
	bl = bl
	branch Test(PO,P) l004024AD_thunk_fn004028A4
	goto l004024B3
	// succ:  l004024B3 l004024AD_thunk_fn004028A4
l004024AD_thunk_fn004028A4:
	call fn004028A4 (retsize: 0;)
	return
	// succ:  fn004024AB_exit
l004024B3:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	edi = edi + 0x00000001
	SZO = cond(edi)
	cl = cl | cl
	SZO = cond(cl)
	C = false
	__outb(0xED, al)
	eax = __indw(0x6E)
	// succ:  l004024B9_thunk_fn004024BB
l004024B9_thunk_fn004024BB:
	call fn004024BB (retsize: 0;)
	return
	// succ:  fn004024AB_exit
fn004024AB_exit:


// fn004024BB
// Return size: 0
void fn004024BB()
fn004024BB_entry:
	// succ:  l004024BB
l004024BB:
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = edi
	edi = v3
	v5 = al
	al = al
	al = v5
	v7 = di
	di = di
	di = v7
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	al = al - 0x6C - C
	SCZO = cond(al)
	eax = edi
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	branch Test(ULE,CZ) l00402A01
	// succ:  l004024D1 l00402A01
l004024D1:
l00402A01:
	ecx = ecx - ebx
	SCZO = cond(ecx)
	ch = ch + dl
	SCZO = cond(ch)
	// succ:  l00402A03_thunk_fn00402A05
l00402A03_thunk_fn00402A05:
	call fn00402A05 (retsize: 0;)
	return
	// succ:  fn004024BB_exit
fn004024BB_exit:


// fn004024DD
// Return size: 0
void fn004024DD()
fn004024DD_entry:
	// succ:  l004024DD
l004024DD:
	esp = fp
	ecx = ecx + eax
	SCZO = cond(ecx)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	eax = eax | ebx
	SZO = cond(eax)
	C = false
	ch = ah
	cl = cl + 0x01
	SZO = cond(cl)
	ch = ch - 0xF6 - C
	SCZO = cond(ch)
	ch = ch | cl
	SZO = cond(ch)
	C = false
	ah = 0xDA
l004024DD:
fn004024DD_exit:


// fn004024FA
// Return size: 6
void fn004024FA()
fn004024FA_entry:
	// succ:  l004024FA
l004024FA:
	esp = fp
	esp = esp + 0x00000004
	ch = ch - 0x01
	SZO = cond(ch)
	cl = 0x36
	ch = ch | bh
	SZO = cond(ch)
	C = false
	ecx = esi
	ah = ah + bh
	SCZO = cond(ah)
	eax = esi
	cl = ~cl
	bh = bh ^ dl
	SZO = cond(bh)
	C = false
	al = ~al
	branch Test(SG,S) l00402510_thunk_fn00402D0A
	goto l00402516
	// succ:  l00402516 l00402510_thunk_fn00402D0A
l00402510_thunk_fn00402D0A:
	call fn00402D0A (retsize: 6;)
	return
	// succ:  fn004024FA_exit
l00402516:
	v16 = ah
	ah = ah
	ah = v16
	branch Test(NS,S) l00402518_thunk_fn00402D0A
	goto l0040251E
	// succ:  l0040251E l00402518_thunk_fn00402D0A
l00402518_thunk_fn00402D0A:
	call fn00402D0A (retsize: 6;)
	return
	// succ:  fn004024FA_exit
l0040251E:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esp
	SCZO = cond(eax - Mem0[edx - 0x0000004A:word32])
	v18 = eax
	eax = esp
	esp = v18
	// succ:  l00402522_thunk_fn00402523
l00402522_thunk_fn00402523:
	call fn00402523 (retsize: 0;)
	return
	// succ:  fn004024FA_exit
fn004024FA_exit:


// fn00402523
// Return size: 6
void fn00402523()
fn00402523_entry:
	// succ:  l00402523
l00402523:
	esp = fp
	cl = cl | ah
	SZO = cond(cl)
	C = false
	ah = ah + ch
	SCZO = cond(ah)
	cl = cl - ah
	SCZO = cond(cl)
	cl = cl + 0x54 + C
	SCZO = cond(cl)
	eax = eax + 0x00000001
	SZO = cond(eax)
	ch = -ch
	SCZO = cond(ch)
	C = ch == 0x00
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	eax = edi
	goto l00402532_thunk_fn00402B8B
	// succ:  l00402532_thunk_fn00402B8B
l00402523:
l00402532_thunk_fn00402B8B:
	call fn00402B8B (retsize: 6;)
	return
	// succ:  fn00402523_exit
fn00402523_exit:


// fn0040253D
// Return size: 0
void fn0040253D()
fn0040253D_entry:
	// succ:  l0040253D
l0040253D:
	ecx = eax
	edi = edi - 0x00000001
	SZO = cond(edi)
	ebx = ebx ^ edi
	SZO = cond(ebx)
	C = false
	ah = ah + 0x01
	SZO = cond(ah)
	ah = ah + 0x1F + C
	SCZO = cond(ah)
	ah = ~ah
	goto l00402549_thunk_fn00402800
	// succ:  l00402549_thunk_fn00402800
fn0040253D_exit:


// fn004025AF
// Return size: 6
void fn004025AF()
fn004025AF_entry:
	// succ:  l004025AF
l004025AF:
	esp = fp
	al = al - 0x2E - C
	SCZO = cond(al)
	edi = edi - 0x00000001
	SZO = cond(edi)
	ah = ah + dh
	SCZO = cond(ah)
	cl = cl + 0x01
	SZO = cond(cl)
	eax = eax | ecx
	SZO = cond(eax)
	C = false
	ch = -ch
	SCZO = cond(ch)
	C = ch == 0x00
	al = al ^ ah
	SZO = cond(al)
	C = false
	eax = eax + 0x00000001
	SZO = cond(eax)
	goto l004025BE_thunk_fn00402523
	// succ:  l004025BE_thunk_fn00402523
l004025AF:
l004025BE_thunk_fn00402523:
	call fn00402523 (retsize: 6;)
	return
	// succ:  fn004025AF_exit
fn004025AF_exit:


// fn004025E9
// Return size: 0
void fn004025E9()
fn004025E9_entry:
	// succ:  l004025E9
l004025E9:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = ecx
	ecx = v3
	si = esi
	v7 = esi
	esi = esi
	esi = v7
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax + ecx
	SCZO = cond(eax)
	al = bl
	cl = cl + dh
	SCZO = cond(cl)
	edi = edi + ebx
	SCZO = cond(edi)
	eax = eax - 0x00000001
	SZO = cond(eax)
	cl = ~cl
	bh = bh + 0x02
	SCZO = cond(bh)
	call fn00402E1E (retsize: 4;)
	Mem0[edx:word32] = 0x8DB9408C
	// succ:  l00402605_thunk_fn0040260B
l00402605_thunk_fn0040260B:
	call fn0040260B (retsize: 0;)
	return
	// succ:  fn004025E9_exit
fn004025E9_exit:


// fn0040260A
// Return size: 0
void fn0040260A()
fn0040260A_entry:
	// succ:  l0040260A
l0040260A:
	esp = fp
	esp = esp + 0x00000004
	// succ:  l0040260A_thunk_fn0040260B
l0040260A_thunk_fn0040260B:
	call fn0040260B (retsize: 0;)
	return
	// succ:  fn0040260A_exit
l00402624_thunk_fn00402436:
	call fn00402436 (retsize: 0;)
	return
	// succ:  fn0040260A_exit
fn0040260A_exit:


// fn0040260B
// Return size: 0
void fn0040260B()
fn0040260B_entry:
	// succ:  l0040260B
l0040260B:
	esp = fp
	al = al & 0x04
	SZO = cond(al)
	C = false
	cl = 0x61
	eax = eax - 0xFFBA7901
	SCZO = cond(eax)
	ecx = ecx - eax
	SCZO = cond(ecx)
	ch = ch + bh
	SCZO = cond(ch)
	ch = ch | dh
	SZO = cond(ch)
	C = false
	ch = ch | ah
	SZO = cond(ch)
	C = false
	cl = cl ^ ah
	SZO = cond(cl)
	C = false
	cl = cl | bh
	SZO = cond(cl)
	C = false
	ecx = ecx + eax
	SCZO = cond(ecx)
	// succ:  l00402624_thunk_fn00402436 l00402624_thunk_fn00402436
l0040260B:
	cl = 0x61
	eax = eax - 0xFFBA7901
	SCZO = cond(eax)
	ecx = ecx - eax
	SCZO = cond(ecx)
	ch = ch + bh
	SCZO = cond(ch)
	ch = ch | dh
	SZO = cond(ch)
	C = false
	ch = ch | ah
	SZO = cond(ch)
	C = false
	cl = cl ^ ah
	SZO = cond(cl)
	C = false
	cl = cl | bh
	SZO = cond(cl)
	C = false
	ecx = ecx + eax
	SCZO = cond(ecx)
l00402624_thunk_fn00402436:
	call fn00402436 (retsize: 0;)
	return
	// succ:  fn0040260B_exit
fn0040260B_exit:


// fn00402631
// Return size: 0
void fn00402631()
fn00402631_entry:
	// succ:  l00402631
l00402631:
	esp = fp
	Mem0[esp - 0x00000034:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	al = al + 0x9A + C
	SCZO = cond(al)
	dl = dl - bh
	SCZO = cond(dl)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000040
	al = al + 0x9F
	SCZO = cond(al)
	dh = dh + cl
	SCZO = cond(dh)
	cl = cl + 0x22 + C
	SCZO = cond(cl)
	ch = ch + 0x0C
	SCZO = cond(ch)
	ah = ah ^ bh
	SZO = cond(ah)
	C = false
	branch Test(EQ,Z) l00402649_thunk_fn00402D47
	goto l0040264F
	// succ:  l0040264F l00402649_thunk_fn00402D47
l00402649_thunk_fn00402D47:
	call fn00402D47 (retsize: 0;)
	return
	// succ:  fn00402631_exit
l0040264F:
	v14 = eax
	eax = eax
	eax = v14
	branch Test(NE,Z) l00402651_thunk_fn00402D47
	goto l00402657
	// succ:  l00402657 l00402651_thunk_fn00402D47
l00402651_thunk_fn00402D47:
	call fn00402D47 (retsize: 0;)
	return
	// succ:  fn00402631_exit
l00402657:
	esp = esp + ecx
	SCZO = cond(esp)
	al = __inb(0x94)
	SCZO = cond(al - Mem0[ecx + 0x000004C2:byte])
	// succ:  l0040265B_thunk_fn00402661
l0040265B_thunk_fn00402661:
	call fn00402661 (retsize: 0;)
	return
	// succ:  fn00402631_exit
fn00402631_exit:


// fn0040265C
// Return size: 0
void fn0040265C()
fn0040265C_entry:
	// succ:  l0040265C
l0040265C:
	esp = fp
	edx = edx + 0x00000004
	SCZO = cond(edx)
	goto l0040265C_thunk_fn00402661
	// succ:  l0040265C_thunk_fn00402661
l0040265C:
l0040265C_thunk_fn00402661:
	call fn00402661 (retsize: 0;)
	return
	// succ:  fn0040265C_exit
fn0040265C_exit:


// fn00402661
// Return size: 0
void fn00402661()
fn00402661_entry:
	// succ:  l00402661
l00402661:
	esp = fp
	v5 = Mem0[edx:byte] + dh
	Mem0[edx:byte] = v5
	SCZO = cond(v5)
	rArg0 = rArg0 + (real64) Mem0[eax + 0xEA8A09C3:word16]
	bl = bl + bh
	SCZO = cond(bl)
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	goto l0040266D_thunk_fn00402A9C
	// succ:  l0040266D_thunk_fn00402A9C
l00402661:
	bl = bl ^ dh
	SZO = cond(bl)
	C = false
	bl = bl + 0x09
	SCZO = cond(bl)
	ch = dl
	bl = bl + bh
	SCZO = cond(bl)
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	goto l0040266D_thunk_fn00402A9C
	// succ:  l0040266D_thunk_fn00402A9C
l0040266D_thunk_fn00402A9C:
	call fn00402A9C (retsize: 0;)
	return
	// succ:  fn00402661_exit
l0040266D_thunk_fn00402A9C:
	call fn00402A9C (retsize: 0;)
	return
	// succ:  fn00402661_exit
fn00402661_exit:


// fn004026AE
// Return size: 0
void fn004026AE()
fn004026AE_entry:
	// succ:  l004026AE
l004026AE:
	esp = fp
	esp = esp + 0x00000004
	cl = cl | bl
	SZO = cond(cl)
	C = false
	bh = bh + dl
	SCZO = cond(bh)
	esi = esi + edx
	SCZO = cond(esi)
	ah = ah | dh
	SZO = cond(ah)
	C = false
	ch = ch - dl
	SCZO = cond(ch)
	ebx = ebx | edx
	SZO = cond(ebx)
	C = false
	call fn004027A6 (retsize: 4;)
	ebp = 0x41E9B041
	// succ:  l004026C3_thunk_fn004026C8
l004026C3_thunk_fn004026C8:
	call fn004026C8 (retsize: 0;)
	return
	// succ:  fn004026AE_exit
fn004026AE_exit:


// fn004026C8
// Return size: 0
void fn004026C8()
fn004026C8_entry:
	// succ:  l004026C8
l004026C8:
	esp = fp
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bl = bl - 0x82 - C
	SCZO = cond(bl)
	bl = bl ^ al
	SZO = cond(bl)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	esi = esi | ecx
	SZO = cond(esi)
	C = false
	bl = bl - 0x01
	SZO = cond(bl)
	bl = bl + 0x6D + C
	SCZO = cond(bl)
	bl = bl + 0x08
	SCZO = cond(bl)
	esi = esi - edi
	SCZO = cond(esi)
	goto l004026DC_thunk_fn004022D2
	// succ:  l004026DC_thunk_fn004022D2
l004026C8:
l004026DC_thunk_fn004022D2:
	call fn004022D2 (retsize: 0;)
	return
	// succ:  fn004026C8_exit
fn004026C8_exit:


// fn0040270E
// Return size: 6
void fn0040270E()
fn0040270E_entry:
	// succ:  l0040270E
l0040270E:
	esp = fp
	ch = ch + 0x0F
	SCZO = cond(ch)
	edx = edx - ebx
	SCZO = cond(edx)
	ch = ch | cl
	SZO = cond(ch)
	C = false
	ch = ~ch
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	dh = dh - 0x01
	SZO = cond(dh)
	dh = dh | ah
	SZO = cond(dh)
	C = false
	branch Test(ULT,C) l00402BAA
l0040270E:
fn0040270E_exit:


// fn0040271E
// Return size: 0
void fn0040271E()
fn0040271E_entry:
	// succ:  l0040271E
l0040271E:
	esp = fp
	v4 = Mem0[edi + 0x86000004:byte] + 0xED
	Mem0[edi + 0x86000004:byte] = v4
	SCZO = cond(v4)
	goto l0040271E_thunk_fn00402725
	// succ:  l0040271E_thunk_fn00402725
l0040271E:
	call fn00402BAA (retsize: 0;)
	return
	// succ:  l00402723 l0040271E_thunk_fn00402BAA fn0040271E_exit
l0040271E_thunk_fn00402725:
	call fn00402725 (retsize: 0;)
	return
	// succ:  fn0040271E_exit
l0040271E_thunk_fn00402BAA:
	call fn00402BAA (retsize: 0;)
	return
	// succ:  fn0040271E_exit
l00402723:
	v7 = ch
	ch = ch
	ch = v7
	// succ:  l00402723_thunk_fn00402725
l00402723_thunk_fn00402725:
	call fn00402725 (retsize: 0;)
	return
	// succ:  fn0040271E_exit
fn0040271E_exit:


// fn00402725
// Return size: 0
void fn00402725()
fn00402725_entry:
	// succ:  l00402725
l00402725:
	esp = fp
	branch Test(UGE,C) l00402725_thunk_fn00402BAA
	goto l00402725_thunk_fn0040272B
	// succ:  l00402725_thunk_fn0040272B l00402725_thunk_fn00402BAA
l00402725:
	branch Test(UGE,C) l00402BAA
	goto l00402725_thunk_fn0040272B
	// succ:  l00402725_thunk_fn0040272B l00402725_thunk_fn00402BAA
l00402725_thunk_fn0040272B:
	call fn0040272B (retsize: 0;)
	return
	// succ:  fn00402725_exit l00402725_thunk_fn0040272B
l00402725_thunk_fn0040272B:
	call fn0040272B (retsize: 0;)
	return
	// succ:  fn00402725_exit
l00402725_thunk_fn0040272B:
	call fn0040272B (retsize: 0;)
	return
	// succ:  fn00402725_exit
l00402725_thunk_fn00402BAA:
	call fn00402BAA (retsize: 0;)
	return
	// succ:  fn00402725_exit
l00402725_thunk_fn00402BAA:
	call fn00402BAA (retsize: 0;)
	return
	// succ:  fn00402725_exit
fn00402725_exit:


// fn0040272B
// Return size: 0
void fn0040272B()
fn0040272B_entry:
	// succ:  l0040272B
l0040272B:
fn0040272B_exit:


// fn00402752
// Return size: 0
void fn00402752()
fn00402752_entry:
	// succ:  l00402752
l00402752:
	esp = fp
	dl = dl - 0x01
	SZO = cond(dl)
	dh = dh - 0x01
	SZO = cond(dh)
	esi = esi + edx
	SCZO = cond(esi)
	ah = ah + 0x54
	SCZO = cond(ah)
	bl = bl | cl
	SZO = cond(bl)
	C = false
	bl = al
	call fn004029D8 (retsize: 4;)
	esp = esp + 0xFFFFFFFA
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	branch ecx == 0x00000000 l00402765_thunk_fn0040271E
	goto l00402767
	// succ:  l00402767 l00402765_thunk_fn0040271E
l00402752:
l00402765_thunk_fn0040271E:
	call fn0040271E (retsize: 0;)
	return
	// succ:  fn00402752_exit
l00402767:
	edi = edi - 0x00000001
	SZO = cond(edi)
	v16 = Mem0[esi:word32]
	Mem0[edi:word32] = v16
	esi = esi + 0x00000004
	edi = edi + 0x00000004
	v18 = Mem0[0x0BCE8B26:word32] & ebp
	Mem0[0x0BCE8B26:word32] = v18
	SZO = cond(Mem0[0x0BCE8B26:word32])
	C = false
	// succ:  l00402769_thunk_fn0040276F
l00402769_thunk_fn0040276F:
	call fn0040276F (retsize: 4;)
	return
	// succ:  fn00402752_exit
fn00402752_exit:


// fn0040276F
// Return size: 4
void fn0040276F()
fn0040276F_entry:
	// succ:  l0040276F
l0040276F:
	esp = fp
	return
	// succ:  fn0040276F_exit
l0040276F:
	ecx = ecx ^ ebx
	SZO = cond(ecx)
	C = false
	cl = cl | bh
	SZO = cond(cl)
	C = false
	edx = edx + 0x00000001
	SZO = cond(edx)
	cl = cl + 0x6F + C
	SCZO = cond(cl)
	cl = ~cl
	cl = ~cl
	al = al - 0xB1 - C
	SCZO = cond(al)
	cl = cl - 0xFD - C
	SCZO = cond(cl)
fn0040276F_exit:


// fn004027A6
// Return size: 0
void fn004027A6()
fn004027A6_entry:
	// succ:  l004027A6
l004027A6:
	esp = fp
	Mem0[esp - 0x0000000C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	cl = cl - 0x01
	SZO = cond(cl)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	dl = dl - 0xD4 - C
	SCZO = cond(dl)
	edi = edi - esi
	SCZO = cond(edi)
	call fn004027B7 (retsize: 4;)
	// succ:  l004027B2_thunk_fn004027B7
l004027B2_thunk_fn004027B7:
	call fn004027B7 (retsize: 0;)
	return
	// succ:  fn004027A6_exit
fn004027A6_exit:


// fn004027B6
// Return size: 6
void fn004027B6()
fn004027B6_entry:
	// succ:  l004027B6
l004027B6:
	esp = fp
	v5 = Mem0[eax + 0x0000004E:byte] + al
	Mem0[eax + 0x0000004E:byte] = v5
	SCZO = cond(v5)
	cl = cl + 0x01
	SZO = cond(cl)
	ch = ch ^ dl
	SZO = cond(ch)
	C = false
l004027B6:
l004027BD_thunk_fn0040294C:
	call fn0040294C (retsize: 6;)
	return
	// succ:  fn004027B6_exit
fn004027B6_exit:


// fn004027B7
// Return size: 0
void fn004027B7()
fn004027B7_entry:
	// succ:  l004027B7
l004027B7:
	esp = fp
	eax = eax + 0x00000001
	SZO = cond(eax)
	esi = esi - 0x00000001
	SZO = cond(esi)
	cl = cl + 0x01
	SZO = cond(cl)
	ch = ch ^ dl
	SZO = cond(ch)
	C = false
	// succ:  l004027BD_thunk_fn0040294C l004027BD_thunk_fn0040294C
l004027BD_thunk_fn0040294C:
	call fn0040294C (retsize: 0;)
	return
	// succ:  fn004027B7_exit
fn004027B7_exit:


// fn00402800
// Return size: 6
void fn00402800()
fn00402800_entry:
	// succ:  l00402800
l00402800:
	esp = fp
	cl = cl + 0x01
	SZO = cond(cl)
	al = al + ch
	SCZO = cond(al)
	edx = edx + 0x00000AD7
	SCZO = cond(edx)
	bl = bl + 0x32
	SCZO = cond(bl)
	al = al - dh
	SCZO = cond(al)
	ch = ch + 0x53 + C
	SCZO = cond(ch)
	branch Test(PE,P) l00402B6D
	goto l00402818
	// succ:  l00402818 l00402B6D
l00402800:
l00402818:
	v13 = cl
	cl = cl
	cl = v13
	branch Test(PO,P) l00402B6D
	// succ:  l00402820 l00402B6D
l00402820:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0000007F
	edi = edi | eax
	SZO = cond(edi)
	C = false
	branch Test(SG,S) l00402824_thunk_fn004027B6
	goto l00402826
	// succ:  l00402826 l00402824_thunk_fn004027B6
l00402824_thunk_fn004027B6:
	call fn004027B6 (retsize: 6;)
	return
	// succ:  fn00402800_exit
l00402826:
	v17 = eax
	eax = esi
	esi = v17
	// succ:  l00402826_thunk_fn00402827
l00402826_thunk_fn00402827:
	call fn00402827 (retsize: 6;)
	return
	// succ:  fn00402800_exit
l00402B6D:
	bl = bl - 0xA7 - C
	SCZO = cond(bl)
	ch = ch ^ bl
	SZO = cond(ch)
	C = false
	ebx = ebx + edx
	SCZO = cond(ebx)
	al = al | dh
	SZO = cond(al)
	C = false
	cl = cl + 0x3B
	SCZO = cond(cl)
	bh = bh - 0x97 - C
	SCZO = cond(bh)
	edi = edi - edx
	SCZO = cond(edi)
	// succ:  l00402B7E_thunk_fn0040299E
l00402B7E_thunk_fn0040299E:
	call fn0040299E (retsize: 0;)
	return
	// succ:  fn00402800_exit
fn00402800_exit:


// fn00402827
// Return size: 6
void fn00402827()
fn00402827_entry:
	// succ:  l00402827
l00402827:
	esp = fp
	eax = eax + ecx
	SCZO = cond(eax)
	ah = ~ah
	edx = edx + 0x00000001
	SZO = cond(edx)
	dl = dl - ch
	SCZO = cond(dl)
	ah = ~ah
	dh = bl
	branch Test(OV,O) l00402832_thunk_fn004020C6
	goto l00402838
	// succ:  l00402838 l00402832_thunk_fn004020C6
l00402827:
l00402832_thunk_fn004020C6:
	call fn004020C6 (retsize: 6;)
	return
	// succ:  fn00402827_exit
l00402838:
	// succ:  l0040283D
l0040283D:
	branch Test(NO,O) l0040283D_thunk_fn004020C6
	goto l00402843
	// succ:  l00402843 l0040283D_thunk_fn004020C6
l0040283D_thunk_fn004020C6:
	call fn004020C6 (retsize: 6;)
	return
	// succ:  fn00402827_exit
l00402843:
	branch ecx == 0x00000000 l00402843_thunk_fn0040288A
	goto l00402845
	// succ:  l00402845 l00402843_thunk_fn0040288A
l00402843_thunk_fn0040288A:
	call fn0040288A (retsize: 0;)
	return
	// succ:  fn00402827_exit
l00402845:
fn00402827_exit:


// fn0040284A
// Return size: 6
void fn0040284A()
fn0040284A_entry:
	// succ:  l0040284A
l0040284A:
	esp = fp
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	esi = ebx
	esi = esi - 0x00000001
	SZO = cond(esi)
	eax = eax >>u 0x00000010
	SCZO = cond(eax)
	edi = eax
	edi = edi - ebx
	SCZO = cond(edi)
	edi = edi + ecx
	SCZO = cond(edi)
	eax = eax + edx
	SCZO = cond(eax)
	esi = esi + 0x00000001
	SZO = cond(esi)
	call fn00402146 (retsize: 4;)
	rArg0 = rArg0 - (real64) Mem0[ebx + 0x0000006A:word32]
	esi = esi - 0x00000001
	SZO = cond(esi)
	esi = esi - edi
	SCZO = cond(esi)
	return
	// succ:  fn0040284A_exit
l0040284A:
fn0040284A_exit:


// fn0040288A
// Return size: 0
void fn0040288A()
fn0040288A_entry:
	// succ:  l0040288A
l0040288A:
	esp = fp
	v5 = Mem0[ebp + 0xF6CA2AE3:word32] & esi
	Mem0[ebp + 0xF6CA2AE3:word32] = v5
	SZO = cond(Mem0[ebp + 0xF6CA2AE3:word32])
	C = false
l0040288A:
	ch = 0xE3
	cl = cl - dl
	SCZO = cond(cl)
	ch = ~ch
	eax = eax + ecx
	SCZO = cond(eax)
	bl = bl + 0xE3
	SCZO = cond(bl)
	ah = ~ah
fn0040288A_exit:


// fn0040289D
// Return size: 0
void fn0040289D()
fn0040289D_entry:
	// succ:  l0040289D
l0040289D:
	esp = fp
	v3 = eax
	eax = esi
	esi = v3
	Mem0[edi:word32] = __in(edx)
	edi = edi + 0x00000004
	bh = 0x1E
	al = al + 0xE6
	SCZO = cond(al)
	goto l004028A2_thunk_fn004028A4
	// succ:  l004028A2_thunk_fn004028A4
l0040289D:
l004028A2_thunk_fn004028A4:
	call fn004028A4 (retsize: 0;)
	return
	// succ:  fn0040289D_exit
fn0040289D_exit:


// fn004028A4
// Return size: 0
void fn004028A4()
fn004028A4_entry:
	// succ:  l004028A4
l004028A4:
	esp = fp
	ecx = ecx - edx
	SCZO = cond(ecx)
	ah = ah | dl
	SZO = cond(ah)
	C = false
	ecx = ecx ^ edx
	SZO = cond(ecx)
	C = false
	al = al - dl
	SCZO = cond(al)
	ecx = esi
	ecx = ecx ^ esi
	SZO = cond(ecx)
	C = false
	ch = -ch
	SCZO = cond(ch)
	C = ch == 0x00
	Mem0[edx:byte] = bl
	ah = ah | bl
	SZO = cond(ah)
	C = false
	goto l004028B6_thunk_fn004024DD
	// succ:  l004028B6_thunk_fn004024DD
l004028A4:
l004028B6_thunk_fn004024DD:
	call fn004024DD (retsize: 0;)
	return
	// succ:  fn004028A4_exit
fn004028A4_exit:


// fn004028C0
// Return size: 6
void fn004028C0()
fn004028C0_entry:
	// succ:  l004028C0
l004028C0:
	esp = fp
	Mem0[esp - 0x0000000C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = bl + ah
	SCZO = cond(bl)
	bl = bl | cl
	SZO = cond(bl)
	C = false
	esi = esi - ebx
	SCZO = cond(esi)
	ebx = ebx - esi
	SCZO = cond(ebx)
	bh = bh + 0x4B
	SCZO = cond(bh)
	dl = dl - 0x48 - C
	SCZO = cond(dl)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	// succ:  l004028D4_thunk_fn00402393
l004028D4_thunk_fn00402393:
	call fn00402393 (retsize: 6;)
	return
	// succ:  fn004028C0_exit
fn004028C0_exit:


// fn004028DF
// Return size: 0
void fn004028DF()
fn004028DF_entry:
	goto l004028DF
	// succ:  l004028DF
l00402881:
	ah = -ah
	SCZO = cond(ah)
	C = ah == 0x00
	cl = cl + 0x47 + C
	SCZO = cond(cl)
	cl = 0xE3
	al = al + 0x21 + C
	SCZO = cond(al)
	call fn00402B1D (retsize: 4;)
	// succ:  l00402888_thunk_fn0040288A l00402898_thunk_fn0040289D
l00402888_thunk_fn0040288A:
	call fn0040288A (retsize: 0;)
	return
	// succ:  fn004028DF_exit
l00402898_thunk_fn0040289D:
	call fn0040289D (retsize: 0;)
	return
	// succ:  fn004028DF_exit
l004028DF:
	esp = fp
	esp = esp + 0x00000004
	al = ~al
	ch = ch + 0xC9
	SCZO = cond(ch)
	al = 0xAC
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	cl = cl + 0xAA + C
	SCZO = cond(cl)
	al = al + 0x01
	SZO = cond(al)
	cl = cl - ch
	SCZO = cond(cl)
	eax = eax - edx
	SCZO = cond(eax)
	goto l00402881
	// succ:  l00402881
fn004028DF_exit:


// fn00402936
// Return size: 0
void fn00402936()
fn00402936_entry:
	// succ:  l00402936
l00402936:
	esp = fp
	esp = esp + 0x00000004
	ah = ~ah
	eax = eax ^ esi
	SZO = cond(eax)
	C = false
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ecx = ecx - eax
	SCZO = cond(ecx)
	eax = eax - 0x00000001
	SZO = cond(eax)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	call fn004021FE (retsize: 4;)
fn00402936_exit:


// fn0040294C
// Return size: 6
void fn0040294C()
fn0040294C_entry:
	goto l0040294C
	// succ:  l0040294C
l004026E7:
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ah = ah + 0x1E + C
	SCZO = cond(ah)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	esi = esi - edx
	SCZO = cond(esi)
	bl = ~bl
	edi = edi - edx
	SCZO = cond(edi)
	al = al ^ dh
	SZO = cond(al)
	C = false
	al = al ^ dh
	SZO = cond(al)
	C = false
	bl = bl - cl
	SCZO = cond(bl)
	esi = esi + ebx
	SCZO = cond(esi)
	branch Test(OV,O) l004026FA_thunk_fn004023FA
	goto l00402700
	// succ:  l00402700 l004026FA_thunk_fn004023FA
l004026FA_thunk_fn004023FA:
	call fn004023FA (retsize: 6;)
	return
	// succ:  fn0040294C_exit
l00402700:
	v20 = bh
	bh = bh
	bh = v20
	branch Test(NO,O) l00402702_thunk_fn004023FA
	goto l00402708
	// succ:  l00402708 l00402702_thunk_fn004023FA
l00402702_thunk_fn004023FA:
	call fn004023FA (retsize: 6;)
	return
	// succ:  fn0040294C_exit
l00402708:
l0040294C:
	esp = fp
	bl = bl - 0x01
	SZO = cond(bl)
	dl = dl ^ ah
	SZO = cond(dl)
	C = false
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	dl = ~dl
	ah = ah ^ bh
	SZO = cond(ah)
	C = false
	branch Test(LE,SZO) l004026E7
	goto l0040295E
	// succ:  l0040295E l004026E7
l0040294C:
l0040295E:
	esp = esp - 0x00000002
	Mem0[esp:word16] = si
	si = Mem0[esp:word16]
	esp = esp + 0x00000002
fn0040294C_exit:


// fn0040296F
// Return size: 0
void fn0040296F()
fn0040296F_entry:
	// succ:  l0040296F
l0040296F:
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = ecx
	ecx = v3
	// succ:  l00402978
l00402978:
fn0040296F_exit:


// fn0040299E
// Return size: 0
void fn0040299E()
fn0040299E_entry:
	// succ:  l0040299E
l0040299E:
	esp = fp
	ecx = edi
	bl = bl ^ dh
	SZO = cond(bl)
	C = false
	edi = ebx
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	cl = cl ^ dl
	SZO = cond(cl)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call fn004024FA (retsize: 4;)
	esp = esp + 0xFFFFFFFA
	eax = (int32) ax
	C = __aaa(al, ah, &al, &ah)
	ebp = ebp - 0x00000001
	SZO = cond(ebp)
	goto l004029AF_thunk_fn004029B0
	// succ:  l004029AF_thunk_fn004029B0
l0040299E:
l004029AF_thunk_fn004029B0:
	call fn004029B0 (retsize: 0;)
	return
	// succ:  fn0040299E_exit
fn0040299E_exit:


// fn004029B0
// Return size: 0
void fn004029B0()
fn004029B0_entry:
	goto l004029B0
	// succ:  l004029B0
l004028FE:
	ebx = ebx ^ ecx
	SZO = cond(ebx)
	C = false
	ch = ch ^ bh
	SZO = cond(ch)
	C = false
	bh = bh + 0x01
	SZO = cond(bh)
	ch = ch + 0x1E + C
	SCZO = cond(ch)
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	cl = cl + 0x01
	SZO = cond(cl)
	dh = dh - bl
	SCZO = cond(dh)
	dh = dh + 0x18
	SCZO = cond(dh)
	// succ:  l00402910_thunk_fn0040270E
l00402910_thunk_fn0040270E:
	call fn0040270E (retsize: 6;)
	return
	// succ:  fn004029B0_exit
l004029B0:
	esp = fp
	al = __inb(dx)
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	cl = cl | bl
	SZO = cond(cl)
	C = false
	dl = dh
	edi = ebx
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	dl = dl - cl
	SCZO = cond(dl)
	bh = bh - 0x01
	SZO = cond(bh)
	dh = dh | dl
	SZO = cond(dh)
	C = false
	call eax (retsize: 4;)
	branch Test(ULE,CZ) l004028FE
	goto l004029CA
	// succ:  l004029CA l004028FE
l004029B0:
l004029CA:
	eax = eax
	branch Test(UGT,CZ) l004028FE
	// succ:  l004029D2 l004028FE
l004029D2:
	v18 = (Mem0[ecx - 0x00000046:byte] & 0x01 << 0x08 - 0xE7) != 0x00
	Mem0[ecx - 0x00000046:byte] = __rcl(Mem0[ecx - 0x00000046:byte], 0xE7, C)
	C = v18
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	cl = cl & Mem0[ebp + 0x2B042464:byte]
	SZO = cond(cl)
	C = false
	// succ:  l004029D7_thunk_fn004029DD
l004029D7_thunk_fn004029DD:
	call fn004029DD (retsize: 0;)
	return
	// succ:  fn004029B0_exit
fn004029B0_exit:


// fn004029D8
// Return size: 6
void fn004029D8()
fn004029D8_entry:
	// succ:  l004029D8
l004029D8:
	esp = fp
	esp = esp + 0x00000004
	ebx = ebx - edx
	SCZO = cond(ebx)
	// succ:  l004029DC_thunk_fn004029DD
l004029DC_thunk_fn004029DD:
	call fn004029DD (retsize: 0;)
	return
	// succ:  fn004029D8_exit
l004029FD_thunk_fn004029B0:
	call fn004029B0 (retsize: 0;)
	return
	// succ:  fn004029D8_exit
l004029FD_thunk_fn004029FF:
	call fn004029FF (retsize: 0;)
	return
	// succ:  fn004029D8_exit l004029FD_thunk_fn004029FF
l004029FD_thunk_fn004029FF:
	call fn004029FF (retsize: 0;)
	return
	// succ:  fn004029D8_exit
fn004029D8_exit:


// fn004029DD
// Return size: 0
void fn004029DD()
fn004029DD_entry:
	// succ:  l004029DD
l004029DD:
	esp = fp
	v5 = Mem0[edx:word32] - (real64) rArg0
	Mem0[edx:word32] = v5
l004029DD:
	bl = bl - bh
	SCZO = cond(bl)
	al = ~al
	dh = dh - 0x01
	SZO = cond(dh)
	ebx = edi
	ah = ah + 0x01
	SZO = cond(ah)
	branch Test(OV,O) l004029E8_thunk_fn00402C3D
	goto l004029EE
	// succ:  l004029EE l004029E8_thunk_fn00402C3D
l004029E8_thunk_fn00402C3D:
	call fn00402C3D (retsize: 6;)
	return
	// succ:  fn004029DD_exit
l004029EE:
	cx = ecx
	v19 = dx
	dx = dx
	dx = v19
	branch Test(NO,O) l004029F4_thunk_fn00402C3D
	goto l004029FA
	// succ:  l004029FA l004029F4_thunk_fn00402C3D
l004029F4_thunk_fn00402C3D:
	call fn00402C3D (retsize: 6;)
	return
	// succ:  fn004029DD_exit
l004029FA:
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	al = al ^ 0xF3
	SZO = cond(al)
	C = false
	ecx = ecx - 0x00000001
	branch Test(NE,Z) && ecx != 0x00000000 l004029FD_thunk_fn004029B0
	goto l004029FD_thunk_fn004029FF
	// succ:  l004029FD_thunk_fn004029FF l004029FD_thunk_fn004029B0
fn004029DD_exit:


// fn004029FF
// Return size: 0
void fn004029FF()
fn004029FF_entry:
	// succ:  l004029FF
l004029FF:
	esp = fp
	SCZO = cond(al - Mem0[edi:byte])
	edi = edi + 0x00000001
	eax = Mem0[0xEA02CB2B:word32]
	goto l00402A00_thunk_fn00402A05
	// succ:  l00402A00_thunk_fn00402A05
l004029FF:
l00402A00_thunk_fn00402A05:
	call fn00402A05 (retsize: 0;)
	return
	// succ:  fn004029FF_exit
fn004029FF_exit:


// fn00402A05
// Return size: 0
void fn00402A05()
fn00402A05_entry:
	// succ:  l00402A05
l00402A05:
	esp = fp
	ch = ~ch
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	al = ~al
	cl = cl + ah
	SCZO = cond(cl)
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	al = al + 0x83
	SCZO = cond(al)
	al = al + 0x7D + C
	SCZO = cond(al)
	ch = ch + ah
	SCZO = cond(ch)
	goto l00402A17_thunk_fn00402278
	// succ:  l00402A17_thunk_fn00402278
l00402A05:
	ch = ~ch
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	al = ~al
	cl = cl + ah
	SCZO = cond(cl)
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	al = al + 0x83
	SCZO = cond(al)
	al = al + 0x7D + C
	SCZO = cond(al)
	ch = ch + ah
	SCZO = cond(ch)
	// succ:  l00402A15_thunk_fn00402278
l00402A15_thunk_fn00402278:
	call fn00402278 (retsize: 0;)
	return
	// succ:  fn00402A05_exit
l00402A17_thunk_fn00402278:
	call fn00402278 (retsize: 0;)
	return
	// succ:  fn00402A05_exit
fn00402A05_exit:


// fn00402A80
// Return size: 0
void fn00402A80()
fn00402A80_entry:
	// succ:  l00402A80
l00402A80:
	esp = fp
	eax = eax | eax
	SZO = cond(eax)
	C = false
	branch Test(NE,Z) TMP!
l00402A80:
	SZO = cond(Mem0[edx + 0x80000004:word32] & edx)
	C = false
fn00402A80_exit:


// fn00402A9C
// Return size: 0
void fn00402A9C()
fn00402A9C_entry:
	// succ:  l00402A9C
l00402A9C:
	esp = fp
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	bh = bh - dl
	SCZO = cond(bh)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	cl = 0xF8
	bl = 0x36
	eax = Mem0[edx:word32]
	bh = bh ^ bl
	SZO = cond(bh)
	C = false
l00402A9C:
fn00402A9C_exit:


// fn00402AD4
// Return size: 0
void fn00402AD4()
fn00402AD4_entry:
	// succ:  l00402AD4
l00402AD4:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = esi
	esi = v3
fn00402AD4_exit:


// fn00402AF9
// Return size: 0
void fn00402AF9()
fn00402AF9_entry:
	goto l00402AF9
	// succ:  l00402AF9
l00402332:
	eax = ~eax
	bl = ~bl
	bh = 0x81
	bh = bh ^ ch
	SZO = cond(bh)
	C = false
	bl = bl + al
	SCZO = cond(bl)
	bh = bh - cl
	SCZO = cond(bh)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	edi = edi | esi
	SZO = cond(edi)
	C = false
	bh = bh + dh
	SCZO = cond(bh)
	bl = al
	branch Test(LT,SO) l00402346_thunk_fn00402C61
	goto l0040234C
	// succ:  l0040234C l00402346_thunk_fn00402C61
l00402346_thunk_fn00402C61:
	call fn00402C61 (retsize: 0;)
	return
	// succ:  fn00402AF9_exit
l0040234C:
l00402AF9:
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = ebx
	ebx = v3
	edi = edi
	// succ:  l00402B04
l00402B04:
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi + edi
	SCZO = cond(esi)
	bh = 0xB7
	ebx = eax
	bh = bh + bl
	SCZO = cond(bh)
	bl = bl + 0x0F
	SCZO = cond(bl)
	goto l00402332
	// succ:  l00402332
fn00402AF9_exit:


// fn00402B1D
// Return size: 0
void fn00402B1D()
fn00402B1D_entry:
	// succ:  l00402B1D
l00402B1D:
	esp = fp
	Mem0[esp - 0x00000018:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	al = al ^ cl
	SZO = cond(al)
	C = false
	cl = 0xA0
	ecx = ecx ^ eax
	SZO = cond(ecx)
	C = false
	ch = ch + 0x5A
	SCZO = cond(ch)
	ah = ~ah
	ecx = ecx ^ ebx
	SZO = cond(ecx)
	C = false
	cl = cl - ah
	SCZO = cond(cl)
	al = al + 0x62 + C
	SCZO = cond(al)
	// succ:  l00402B33_thunk_fn004023C8
l00402B33_thunk_fn004023C8:
	call fn004023C8 (retsize: 0;)
	return
	// succ:  fn00402B1D_exit
fn00402B1D_exit:


// fn00402B3C
// Return size: 0
void fn00402B3C()
fn00402B3C_entry:
	// succ:  l00402B3C
l00402B3C:
	esp = fp
	Mem0[esp:word32] = esi
fn00402B3C_exit:


// fn00402B61
// Return size: 0
void fn00402B61()
fn00402B61_entry:
	goto l00402B61
	// succ:  l00402B61
l0040219C:
	bh = bh ^ dl
	SZO = cond(bh)
	C = false
	bh = bh ^ dh
	SZO = cond(bh)
	C = false
	ch = ch - 0x01
	SZO = cond(ch)
	ch = ch ^ bh
	SZO = cond(ch)
	C = false
	al = al - cl
	SCZO = cond(al)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bh = bh - bl
	SCZO = cond(bh)
	ah = ah + 0x01
	SZO = cond(ah)
	ah = ah - 0x01
	SZO = cond(ah)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	branch Test(ULT,C) l004021AF_thunk_fn004020E4
	goto l004021B5
	// succ:  l004021B5 l004021AF_thunk_fn004020E4
l004021AF_thunk_fn004020E4:
	call fn004020E4 (retsize: 0;)
	return
	// succ:  fn00402B61_exit
l004021B5:
	// succ:  l004021BB
l004021BB:
	bh = bh
	branch Test(UGE,C) l004021BD_thunk_fn004020E4
	goto l004021C3
	// succ:  l004021C3 l004021BD_thunk_fn004020E4
l004021BD_thunk_fn004020E4:
	call fn004020E4 (retsize: 0;)
	return
	// succ:  fn00402B61_exit
l004021C3:
	v18 = (Mem0[ebx + 0x0000005F:word32] & 0x00000001 << 0x20 - 0xB7) != 0x00000000
	Mem0[ebx + 0x0000005F:word32] = __rol(Mem0[ebx + 0x0000005F:word32], 0xB7)
	C = v18
	bl = bl | dl
	SZO = cond(bl)
	C = false
	edi = edi | eax
	SZO = cond(edi)
	C = false
	bl = bl + al
	SCZO = cond(bl)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	edi = edi - 0x00000001
	SZO = cond(edi)
	esi = esi | eax
	SZO = cond(esi)
	C = false
	bl = bl + 0xCD
	SCZO = cond(bl)
	esi = esi - edi
	SCZO = cond(esi)
	bl = bl + 0x92
	SCZO = cond(bl)
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	call fn00402C21 (retsize: 4;)
	esp = esp + 0xFFFFFFFA
	esi = Mem0[ecx + 0x02A24A7E:word32]
	// succ:  l004021E7_in_fn00402B61
l004021E7_in_fn00402B61:
	edi = edi - 0x00000001
	SZO = cond(edi)
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	bh = bh - al
	SCZO = cond(bh)
	bh = ~bh
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bl = dl
	edi = edi | eax
	SZO = cond(edi)
	C = false
	call fn00402F82 (retsize: 4;)
	edx_eax = (int64) eax
	return
	// succ:  fn00402B61_exit
l00402B61:
	esp = fp
	eax = eax - edx
	SCZO = cond(eax)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	goto l0040219C
	// succ:  l0040219C
l00402B61:
fn00402B61_exit:


// fn00402B8B
// Return size: 6
void fn00402B8B()
fn00402B8B_entry:
	// succ:  l00402B8B
l00402B8B:
	esp = fp
	ch = ch + 0x01
	SZO = cond(ch)
	cl = cl | bh
	SZO = cond(cl)
	C = false
	ecx = ecx ^ ebx
	SZO = cond(ecx)
	C = false
	ch = ch + 0x01
	SZO = cond(ch)
	cl = cl + 0x9F
	SCZO = cond(cl)
	ecx = ecx ^ ebx
	SZO = cond(ecx)
	C = false
	ch = ch + 0x61
	SCZO = cond(ch)
	ch = ch | ah
	SZO = cond(ch)
	C = false
	ecx = esi
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	goto l00402BA0_thunk_fn004023E0
	// succ:  l00402BA0_thunk_fn004023E0
l00402B8B:
l00402BA0_thunk_fn004023E0:
	call fn004023E0 (retsize: 6;)
	return
	// succ:  fn00402B8B_exit
fn00402B8B_exit:


// fn00402BAA
// Return size: 0
void fn00402BAA()
fn00402BAA_entry:
	goto l00402BAA
	// succ:  l00402BAA
l004025CB:
	esi = edx
	bh = ~bh
	ecx = ecx - edx
	SCZO = cond(ecx)
	edi = edi | eax
	SZO = cond(edi)
	C = false
	cl = cl + 0x01
	SZO = cond(cl)
	esi = esi + edx
	SCZO = cond(esi)
	edx = edx - ecx
	SCZO = cond(edx)
	ch = ch + 0xE4
	SCZO = cond(ch)
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	// succ:  l004025DE_thunk_fn0040212A
l004025DE_thunk_fn0040212A:
	call fn0040212A (retsize: 6;)
	return
	// succ:  fn00402BAA_exit
l00402BAA:
	bl = bl | bh
	SZO = cond(bl)
	C = false
	dh = 0x85
	ecx = eax
	Mem0[esp - 0x00000008:word32] = eax
	dh = bh
	edi = edi + 0x00000001
	SZO = cond(edi)
	ch = ah
	esi = esi + 0x00000001
	SZO = cond(esi)
	goto l004025CB
	// succ:  l004025CB
fn00402BAA_exit:


// fn00402BC7
// Return size: 0
void fn00402BC7()
fn00402BC7_entry:
	// succ:  l00402BC7
l00402BC7:
	esp = fp
	esp = esp + 0x00000004
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	bh = bh - 0x01
	SZO = cond(bh)
	bl = bl | cl
	SZO = cond(bl)
	C = false
	esi = esi | edx
	SZO = cond(esi)
	C = false
	bl = bl - 0x01
	SZO = cond(bl)
	eax = eax ^ 0xFFFFFEC8
	SZO = cond(eax)
	C = false
	edi = edi ^ esi
	SZO = cond(edi)
	C = false
	call fn00402D88 (retsize: 4;)
fn00402BC7_exit:


// fn00402BE8
// Return size: 6
void fn00402BE8()
fn00402BE8_entry:
	// succ:  l00402BE8
l00402BE8:
	esp = fp
	bl = bl + 0x40 + C
	SCZO = cond(bl)
	bh = bh | al
	SZO = cond(bh)
	C = false
	bl = bl + 0x54 + C
	SCZO = cond(bl)
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	cl = ~cl
	al = al + 0xA9 + C
	SCZO = cond(al)
	ah = ~ah
	call fn004025E9 (retsize: 4;)
	ebp = ebp + 0x00000001
	SZO = cond(ebp)
	v12 = (Mem0[ebp + 0xF69AFD68 + ecx:word32] & 0x00000001 << 0x01) != 0x00000000
	Mem0[ebp + 0xF69AFD68 + ecx:word32] = __rcr(Mem0[ebp + 0xF69AFD68 + ecx:word32], 0x01, C)
	C = v12
	goto l00402BFF_thunk_fn00402C05
	// succ:  l00402BFF_thunk_fn00402C05
l00402BE8:
l00402BFF_thunk_fn00402C05:
	call fn00402C05 (retsize: 6;)
	return
	// succ:  fn00402BE8_exit
fn00402BE8_exit:


// fn00402C05
// Return size: 6
void fn00402C05()
fn00402C05_entry:
	// succ:  l00402C05
l00402C05:
	esp = fp
	bh = ~bh
	esi = esi + edi
	SCZO = cond(esi)
	ebx = ebx - esi
	SCZO = cond(ebx)
	edi = edi + 0x00000001
	SZO = cond(edi)
	bh = ~bh
	bh = bh - 0x01
	SZO = cond(bh)
	edi = edi + 0x00000001
	SZO = cond(edi)
	bl = bl + 0xE1
	SCZO = cond(bl)
	call fn00402083 (retsize: 4;)
	esp = esp + 0xFFFFFFFA
	v11 = Mem0[eax + 0xA4DAB95C:word32] & 0x24448FFC
	Mem0[eax + 0xA4DAB95C:word32] = v11
	SZO = cond(Mem0[eax + 0xA4DAB95C:word32])
	C = false
	goto l00402C1A_thunk_fn00402C24
	// succ:  l00402C1A_thunk_fn00402C24
l00402C05:
	al = Mem0[ebx + (uint32) al:byte]
	esi = esi + edi
	SCZO = cond(esi)
	ebx = ebx - esi
	SCZO = cond(ebx)
	edi = edi + 0x00000001
	SZO = cond(edi)
	bh = ~bh
	bh = bh - 0x01
	SZO = cond(bh)
	edi = edi + 0x00000001
	SZO = cond(edi)
	bl = bl + 0xE1
	SCZO = cond(bl)
l00402C1A_thunk_fn00402C24:
	call fn00402C24 (retsize: 6;)
	return
	// succ:  fn00402C05_exit
fn00402C05_exit:


// fn00402C21
// Return size: 6
void fn00402C21()
fn00402C21_entry:
	// succ:  l00402C21
l00402C21:
	esp = fp
	Mem0[esp - 0x00000028:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	call fn00402227 (retsize: 4;)
	// succ:  l00402C21_thunk_fn00402C24 l00402C30_thunk_fn00402C35
l00402C21_thunk_fn00402C24:
	call fn00402C24 (retsize: 6;)
	return
	// succ:  fn00402C21_exit
l00402C30_thunk_fn00402C35:
	call fn00402C35 (retsize: 6;)
	return
	// succ:  fn00402C21_exit
fn00402C21_exit:


// fn00402C24
// Return size: 6
void fn00402C24()
fn00402C24_entry:
	// succ:  l00402C24
l00402C24:
	esp = fp
	rArg0 = rArg0 + Mem0[ebx:real32]
	v5 = (Mem0[ebx:word32] & 0x00000001 << 0x20 - 0x01) != 0x00000000
	Mem0[ebx:word32] = __rol(Mem0[ebx:word32], 0x01)
	C = v5
	__cli()
	esi = esi + eax
	SCZO = cond(esi)
	bl = ~bl
	ecx = eax
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	call fn00402227 (retsize: 4;)
	goto l00402C30_thunk_fn00402C35
	// succ:  l00402C30_thunk_fn00402C35
l00402C24:
	edx = edx + ecx
	SCZO = cond(edx)
	edi = edi + edx
	SCZO = cond(edi)
	esi = esi + eax
	SCZO = cond(esi)
	bl = ~bl
	ecx = eax
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
l00402C30_thunk_fn00402C35:
	call fn00402C35 (retsize: 6;)
	return
	// succ:  fn00402C24_exit
fn00402C24_exit:


// fn00402C35
// Return size: 6
void fn00402C35()
fn00402C35_entry:
	// succ:  l00402C35
l00402C35:
	esp = fp
	v5 = Mem0[esi + 0x00000027:word32] + 0xE70447A0 + C
	Mem0[esi + 0x00000027:word32] = v5
	SCZO = cond(v5)
	__outdw(edx, eax)
	esi = esi + 0x00000004
	goto l00402C3C_thunk_fn00402C3D
	// succ:  l00402C3C_thunk_fn00402C3D
l00402C35:
	v9 = Mem0[esi + 0x00000027:word32] + 0xE70447A0 + C
	Mem0[esi + 0x00000027:word32] = v9
	SCZO = cond(v9)
	__outdw(edx, eax)
	esi = esi + 0x00000004
	goto l00402C3C_thunk_fn00402C3D
	// succ:  l00402C3C_thunk_fn00402C3D
l00402C3C_thunk_fn00402C3D:
	call fn00402C3D (retsize: 6;)
	return
	// succ:  fn00402C35_exit
l00402C3C_thunk_fn00402C3D:
	call fn00402C3D (retsize: 6;)
	return
	// succ:  fn00402C35_exit
fn00402C35_exit:


// fn00402C3D
// Return size: 6
void fn00402C3D()
fn00402C3D_entry:
	// succ:  l00402C3D
l00402C3D:
	esp = fp
	ecx = ecx >>u 0x0000000F
	SCZO = cond(ecx)
	edx = edx + ecx
	SCZO = cond(edx)
	bh = ~bh
	bh = bh + ah
	SCZO = cond(bh)
	dl = dl - ah
	SCZO = cond(dl)
	bh = bh - 0x01
	SZO = cond(bh)
	eax = eax | ebx
	SZO = cond(eax)
	C = false
	branch Test(ULE,CZ) l00402C4C_thunk_fn004023AF
	goto l00402C52
	// succ:  l00402C52 l00402C4C_thunk_fn004023AF
l00402C3D:
l00402C4C_thunk_fn004023AF:
	call fn004023AF (retsize: 6;)
	return
	// succ:  fn00402C3D_exit
l00402C52:
	edi = edi
	v15 = bh
	bh = bh
	bh = v15
	branch Test(UGT,CZ) l00402C56_thunk_fn004023AF
	goto l00402C5C
	// succ:  l00402C5C l00402C56_thunk_fn004023AF
l00402C56_thunk_fn004023AF:
	call fn004023AF (retsize: 6;)
	return
	// succ:  fn00402C3D_exit
l00402C5C:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax ^ Mem0[ebp - 0x00000003:word32]
	SZO = cond(eax)
	C = false
	// succ:  l00402C5E_thunk_fn00402C61
l00402C5E_thunk_fn00402C61:
	call fn00402C61 (retsize: 0;)
	return
	// succ:  fn00402C3D_exit
fn00402C3D_exit:


// fn00402C61
// Return size: 0
void fn00402C61()
fn00402C61_entry:
	// succ:  l00402C61
l00402C61:
	esp = fp
	bl = bl - bh
	SCZO = cond(bl)
	ebx = ebx - esi
	SCZO = cond(ebx)
	esi = esi | edi
	SZO = cond(esi)
	C = false
	bl = bh
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	bl = bl + 0xAB + C
	SCZO = cond(bl)
	bl = bl + cl
	SCZO = cond(bl)
	goto l00402C70_thunk_fn00402A80
	// succ:  l00402C70_thunk_fn00402A80
l00402C61:
l00402C70_thunk_fn00402A80:
	call fn00402A80 (retsize: 0;)
	return
	// succ:  fn00402C61_exit
fn00402C61_exit:


// fn00402D0A
// Return size: 6
void fn00402D0A()
fn00402D0A_entry:
	// succ:  l00402D0A
l00402D0A:
	esp = fp
	cl = cl - 0x01
	SZO = cond(cl)
	bl = ~bl
	edi = edi | eax
	SZO = cond(edi)
	C = false
	cl = cl - ah
	SCZO = cond(cl)
	edx = edx - 0x00000AD7
	SCZO = cond(edx)
	eax = ebx
	cl = al
	call fn00402DA1 (retsize: 4;)
	v15 = Mem0[ecx - 0x00000001:word32] << cl
	Mem0[ecx - 0x00000001:word32] = v15
	SCZO = cond(v15)
	al = al + Mem0[edi:byte]
	SCZO = cond(al)
	Mem0[0xDE8001A2:word32] = eax
	goto l00402D26_thunk_fn00402D2B
	// succ:  l00402D26_thunk_fn00402D2B
l00402D0A:
l00402D26_thunk_fn00402D2B:
	call fn00402D2B (retsize: 6;)
	return
	// succ:  fn00402D0A_exit
fn00402D0A_exit:


// fn00402D29
// Return size: 6
void fn00402D29()
fn00402D29_entry:
	// succ:  l00402D29
l00402D29:
	esp = fp
	dh = dh - 0x3A - C
	SCZO = cond(dh)
	call fn00402631 (retsize: 4;)
	// succ:  l00402D29_thunk_fn00402D2B
l00402D29_thunk_fn00402D2B:
	call fn00402D2B (retsize: 6;)
	return
	// succ:  fn00402D29_exit
fn00402D29_exit:


// fn00402D2B
// Return size: 6
void fn00402D2B()
fn00402D2B_entry:
	// succ:  l00402D2B
l00402D2B:
	esp = fp
	SCZO = cond(dh - dh)
	rArg0 = rArg0 * (real64) Mem0[ebx + 0x33FB2BCA:word32]
	SCZO = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00402D2B_exit
l00402D2B:
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	ecx = edx
	edi = edi - ebx
	SCZO = cond(edi)
	ecx = ecx ^ edi
	SZO = cond(ecx)
	C = false
	edx = edx + esi
	SCZO = cond(edx)
	dh = dh - al
	SCZO = cond(dh)
	dh = dh - 0x01
	SZO = cond(dh)
fn00402D2B_exit:


// fn00402D47
// Return size: 0
void fn00402D47()
fn00402D47_entry:
	// succ:  l00402D47
l00402D47:
	esp = fp
	dh = dh ^ dl
	SZO = cond(dh)
	C = false
	al = al - dl
	SCZO = cond(al)
	ebx = edi
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	al = dl
	dh = dh - bh
	SCZO = cond(dh)
	al = al + 0x70
	SCZO = cond(al)
	branch Test(SG,S) l00402EF2
	goto l00402D5C
	// succ:  l00402D5C l00402EF2
l00402D47:
l00402D5C:
	v14 = bh
	bh = bh
	bh = v14
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	branch Test(NS,S) l00402EF2
	// succ:  l00402D66 l00402EF2
l00402D66:
	eax = 0x2BF12652
	// succ:  l00402D66_thunk_fn00402D6B
l00402D66_thunk_fn00402D6B:
	call fn00402D6B (retsize: 0;)
	return
	// succ:  fn00402D47_exit
l00402D7D_thunk_fn004026C8:
	call fn004026C8 (retsize: 0;)
	return
	// succ:  fn00402D47_exit
l00402EF2:
	bl = bl - ah
	SCZO = cond(bl)
	// succ:  l00402EF2_thunk_fn00402EF4
l00402EF2_thunk_fn00402EF4:
	call fn00402EF4 (retsize: 0;)
	return
	// succ:  fn00402D47_exit
fn00402D47_exit:


// fn00402D6B
// Return size: 0
void fn00402D6B()
fn00402D6B_entry:
	// succ:  l00402D6B
l00402D6B:
	esp = fp
	esi = esi - eax
	SCZO = cond(esi)
	bh = bh + 0x01
	SZO = cond(bh)
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[edx + 0x00000008:word32]
	bl = bl ^ dl
	SZO = cond(bl)
	C = false
	bh = ~bh
	bh = bh + 0xDE + C
	SCZO = cond(bh)
	edi = edi + edx
	SCZO = cond(edi)
	bl = bl - 0x01
	SZO = cond(bl)
	// succ:  l00402D7D_thunk_fn004026C8 l00402D7D_thunk_fn004026C8
l00402D6B:
	__lock()
	bh = bh + 0x01
	SZO = cond(bh)
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[edx + 0x00000008:word32]
	bl = bl ^ dl
	SZO = cond(bl)
	C = false
	bh = ~bh
	bh = bh + 0xDE + C
	SCZO = cond(bh)
	edi = edi + edx
	SCZO = cond(edi)
	bl = bl - 0x01
	SZO = cond(bl)
l00402D7D_thunk_fn004026C8:
	call fn004026C8 (retsize: 0;)
	return
	// succ:  fn00402D6B_exit
fn00402D6B_exit:


// fn00402D88
// Return size: 0
void fn00402D88()
fn00402D88_entry:
	// succ:  l00402D88
l00402D88:
	esp = fp
	esp = esp + 0x00000004
	esi = esi | edx
	SZO = cond(esi)
	C = false
	bh = ch
	edi = edi - 0x00000001
	SZO = cond(edi)
	edi = edi - 0x00000001
	SZO = cond(edi)
	bh = bh - dl
	SCZO = cond(bh)
	call fn0040245A (retsize: 4;)
	ch = ch - Mem0[ebx:byte]
	SCZO = cond(ch)
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi + Mem0[edi + 0x0000000E:word32]
	SCZO = cond(edi)
	SCZO = cond(Mem0[esi:word32] - Mem0[edi:word32])
	esi = esi + 0x00000004
	edi = edi + 0x00000004
	ax = __aam(al)
	al = al - 0x24 - C
	SCZO = cond(al)
fn00402D88_exit:


// fn00402DA1
// Return size: 0
void fn00402DA1()
fn00402DA1_entry:
	// succ:  l00402DA1
l00402DA1:
	esp = fp
	Mem0[esp:word32] = ebx
fn00402DA1_exit:


// fn00402DBE
// Return size: 4
void fn00402DBE()
fn00402DBE_entry:
	// succ:  l00402DBE
l00402DBE:
	Mem0[esp:word32] = ecx
	v4 = di
	di = di
	di = v4
	// succ:  l00402DCA
l00402DCA:
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax ^ ebx
	SZO = cond(eax)
	C = false
	ecx = ecx ^ eax
	SZO = cond(ecx)
	C = false
	ecx = ecx ^ edx
	SZO = cond(ecx)
	C = false
	cl = cl - 0x01
	SZO = cond(cl)
	eax = esi
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	ch = dl
	branch Test(LT,SO) l00402DD9_thunk_fn004022B5
	goto l00402DDF
	// succ:  l00402DDF l00402DD9_thunk_fn004022B5
l00402DD9_thunk_fn004022B5:
	call fn004022B5 (retsize: 4;)
	return
	// succ:  fn00402DBE_exit
l00402DDF:
fn00402DBE_exit:


// fn00402DEE
// Return size: 6
void fn00402DEE()
fn00402DEE_entry:
	// succ:  l00402DEE
l00402DEE:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = esi
	esi = v3
	esp = esp - 0x00000002
	Mem0[esp:word16] = di
	di = Mem0[esp:word16]
	esp = esp + 0x00000002
	// succ:  l00402DFB
l00402DFB:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	al = al + 0x01
	SZO = cond(al)
	ah = ah + cl
	SCZO = cond(ah)
	eax = eax - edi
	SCZO = cond(eax)
	cl = cl + 0x01
	SZO = cond(cl)
	eax = eax | ecx
	SZO = cond(eax)
	C = false
	eax = eax - 0x00000001
	SZO = cond(eax)
	ecx = ecx | edi
	SZO = cond(ecx)
	C = false
	branch Test(LE,SZO) l00402E09_thunk_fn004025AF
	goto l00402E0F
	// succ:  l00402E0F l00402E09_thunk_fn004025AF
l00402E09_thunk_fn004025AF:
	call fn004025AF (retsize: 6;)
	return
	// succ:  fn00402DEE_exit
l00402E0F:
	dx = dx
	branch Test(GT,SZO) l00402E12_thunk_fn004025AF
	goto l00402E18
	// succ:  l00402E18 l00402E12_thunk_fn004025AF
l00402E12_thunk_fn004025AF:
	call fn004025AF (retsize: 6;)
	return
	// succ:  fn00402DEE_exit
l00402E18:
	int3()
	al = al + 0x8F + C
	SCZO = cond(al)
	v16 = (Mem0[ebx - 0x00000079:byte] & 0x01 << 0x08 - 0x01) != 0x00
	Mem0[ebx - 0x00000079:byte] = __rcl(Mem0[ebx - 0x00000079:byte], 0x01, C)
	C = v16
	// succ:  l00402E1C_thunk_fn00402E1F
l00402E1C_thunk_fn00402E1F:
	call fn00402E1F (retsize: 0;)
	return
	// succ:  fn00402DEE_exit
fn00402DEE_exit:


// fn00402E1E
// Return size: 0
void fn00402E1E()
fn00402E1E_entry:
	// succ:  l00402E1E
l00402E1E:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = ebx
	ebx = v3
	// succ:  l00402E1E_thunk_fn00402E1F
l00402E1E_thunk_fn00402E1F:
	call fn00402E1F (retsize: 0;)
	return
	// succ:  fn00402E1E_exit
fn00402E1E_exit:


// fn00402E1F
// Return size: 0
void fn00402E1F()
fn00402E1F_entry:
	// succ:  l00402E1F
l00402E1F:
	esp = fp
	al = al - 0x24 - C
	SCZO = cond(al)
	v6 = dx
	dx = dx
	dx = v6
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx + edx
	SCZO = cond(ecx)
	al = al - 0x18 - C
	SCZO = cond(al)
	bh = bh + 0x01
	SZO = cond(bh)
	al = 0x67
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	ecx = ecx + edi
	SCZO = cond(ecx)
	branch Test(ULT,C) l00402E32_thunk_fn00402250
	goto l00402E32_thunk_fn00402E38
	// succ:  l00402E32_thunk_fn00402E38 l00402E32_thunk_fn00402250
l00402E1F:
	v15 = dx
	dx = dx
	dx = v15
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx + edx
	SCZO = cond(ecx)
	al = al - 0x18 - C
	SCZO = cond(al)
	bh = bh + 0x01
	SZO = cond(bh)
	al = 0x67
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	ecx = ecx + edi
	SCZO = cond(ecx)
	branch Test(ULT,C) l00402E32_thunk_fn00402250
	// succ:  l00402E30_thunk_fn00402E38 l00402E32_thunk_fn00402250
l00402E30_thunk_fn00402E38:
	call fn00402E38 (retsize: 0;)
	return
	// succ:  fn00402E1F_exit
l00402E32_thunk_fn00402250:
	call fn00402250 (retsize: 0;)
	return
	// succ:  fn00402E1F_exit
l00402E32_thunk_fn00402250:
	call fn00402250 (retsize: 0;)
	return
	// succ:  fn00402E1F_exit
l00402E32_thunk_fn00402E38:
	call fn00402E38 (retsize: 0;)
	return
	// succ:  fn00402E1F_exit l00402E32_thunk_fn00402E38
l00402E32_thunk_fn00402E38:
	call fn00402E38 (retsize: 0;)
	return
	// succ:  fn00402E1F_exit
fn00402E1F_exit:


// fn00402E38
// Return size: 0
void fn00402E38()
fn00402E38_entry:
	// succ:  l00402E38
l00402E38:
	branch Test(UGT,CZ) l00402E3A
	// succ:  l00402E3A
l00402E3A:
	// succ:  l00402E40
l00402E40:
	branch Test(UGE,C) l00402E40_thunk_fn00402250
	goto l00402E46
	// succ:  l00402E46 l00402E40_thunk_fn00402250
l00402E40_thunk_fn00402250:
	call fn00402250 (retsize: 0;)
	return
	// succ:  fn00402E38_exit
l00402E46:
	ax = __aam(al)
fn00402E38_exit:


// fn00402E4E
// Return size: 0
void fn00402E4E()
fn00402E4E_entry:
	// succ:  l00402E4E
l00402E4E:
	bl = Mem0[esi:byte]
	cl = cl - 0x01
	SZO = cond(cl)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	al = dl
	ah = ah + 0x53 + C
	SCZO = cond(ah)
	eax = eax + edi
	SCZO = cond(eax)
	eax = eax ^ edi
	SZO = cond(eax)
	C = false
	ch = ch - 0x01
	SZO = cond(ch)
	branch Test(PE,P) l00402E5E_thunk_fn00402E81
	goto l00402E60
	// succ:  l00402E60 l00402E5E_thunk_fn00402E81
l00402E5E_thunk_fn00402E81:
	call fn00402E81 (retsize: 0;)
	return
	// succ:  fn00402E4E_exit
l00402E60:
fn00402E4E_exit:


// fn00402E81
// Return size: 0
void fn00402E81()
fn00402E81_entry:
	// succ:  l00402E81
l00402E81:
	esp = fp
	ah = 0xF1
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	al = bl
	al = al | cl
	SZO = cond(al)
	C = false
	eax = eax + 0x00000001
	SZO = cond(eax)
	eax = ebx
	ah = ah + 0x18 + C
	SCZO = cond(ah)
	ch = ch + 0x23
	SCZO = cond(ch)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	bl = ~bl
	call fn004028DF (retsize: 4;)
	goto l00402E94_thunk_fn00402E99
	// succ:  l00402E94_thunk_fn00402E99
l00402E81:
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	al = bl
	al = al | cl
	SZO = cond(al)
	C = false
	eax = eax + 0x00000001
	SZO = cond(eax)
	eax = ebx
	ah = ah + 0x18 + C
	SCZO = cond(ah)
	ch = ch + 0x23
	SCZO = cond(ch)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	bl = ~bl
l00402E94_thunk_fn00402E99:
	call fn00402E99 (retsize: 0;)
	return
	// succ:  fn00402E81_exit
fn00402E81_exit:


// fn00402E99
// Return size: 0
void fn00402E99()
fn00402E99_entry:
	// succ:  l00402E99
l00402E99:
	esp = fp
	SCZO = cond(Mem0[ecx + 0x8BE0CBC2:byte] - cl)
l00402E99:
	SCZO = cond(Mem0[ecx + 0x8BE0CBC2:byte] - cl)
fn00402E99_exit:


// fn00402EF3
// Return size: 0
void fn00402EF3()
fn00402EF3_entry:
	// succ:  l00402EF3
l00402EF3:
	esp = fp
	rArg0 = rArg0 * Mem0[ebx + 0x300068DA:real64]
l00402EF3:
fn00402EF3_exit:


// fn00402EF4
// Return size: 0
void fn00402EF4()
fn00402EF4_entry:
	// succ:  l00402EF4
l00402EF4:
	esp = fp
	ebx = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00003000
	goto l00402EF6_thunk_fn00402EFB
	// succ:  l00402EF6_thunk_fn00402EFB
l00402EF4:
	call fn00402EF9 (retsize: 0;)
	return
	// succ:  l00402EF4_thunk_fn00402EF9 fn00402EF4_exit
l00402EF4_thunk_fn00402EF9:
	call fn00402EF9 (retsize: 0;)
	return
	// succ:  fn00402EF4_exit
l00402EF6_thunk_fn00402EFB:
	call fn00402EFB (retsize: 0;)
	return
	// succ:  fn00402EF4_exit
fn00402EF4_exit:


// fn00402EF9
// Return size: 0
void fn00402EF9()
fn00402EF9_entry:
	// succ:  l00402EF9
l00402EF9:
	v4 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v4
	SCZO = cond(v4)
	// succ:  l00402EF9_thunk_fn00402EFB
l00402EF9_thunk_fn00402EFB:
	call fn00402EFB (retsize: 0;)
	return
	// succ:  fn00402EF9_exit
fn00402EF9_exit:


// fn00402EFB
// Return size: 0
void fn00402EFB()
fn00402EFB_entry:
	// succ:  l00402EFB
l00402EFB:
	esp = fp
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	al = dl
	eax = eax | ebx
	SZO = cond(eax)
	C = false
	edx = edx + esi
	SCZO = cond(edx)
	bl = 0xE4
	dl = 0xAF
	call fn004026AE (retsize: 4;)
	branch Test(NO,O) l00402F0C_thunk_fn00402EF9
	goto l00402F0C_thunk_fn00402F0E
	// succ:  l00402F0C_thunk_fn00402F0E l00402F0C_thunk_fn00402EF9
l00402EFB:
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	al = dl
	eax = eax | ebx
	SZO = cond(eax)
	C = false
	edx = edx + esi
	SCZO = cond(edx)
	bl = 0xE4
	dl = 0xAF
	call fn004026AE (retsize: 4;)
	branch Test(NO,O) l00402EF9
	goto l00402F0C_thunk_fn00402F0E
	// succ:  l00402F0C_thunk_fn00402F0E l00402F0C_thunk_fn00402EF9
l00402F0C_thunk_fn00402EF9:
	call fn00402EF9 (retsize: 0;)
	return
	// succ:  fn00402EFB_exit
l00402F0C_thunk_fn00402EF9:
	call fn00402EF9 (retsize: 0;)
	return
	// succ:  fn00402EFB_exit
l00402F0C_thunk_fn00402F0E:
	call fn00402F0E (retsize: 0;)
	return
	// succ:  fn00402EFB_exit l00402F0C_thunk_fn00402F0E
l00402F0C_thunk_fn00402F0E:
	call fn00402F0E (retsize: 0;)
	return
	// succ:  fn00402EFB_exit
l00402F0C_thunk_fn00402F0E:
	call fn00402F0E (retsize: 0;)
	return
	// succ:  fn00402EFB_exit
fn00402EFB_exit:


// fn00402F0E
// Return size: 0
void fn00402F0E()
fn00402F0E_entry:
	call fn00402EF9 (retsize: 0;)
	return
	// succ:  l00402F0E fn00402F0E_exit
l00402F0E:
	ebx = Mem0[ebx - 0x00000077 + edx:word32]
	// succ:  l00402F0E_thunk_fn00402F12
l00402F0E_thunk_fn00402F12:
	call fn00402F12 (retsize: 0;)
	return
	// succ:  fn00402F0E_exit
fn00402F0E_exit:


// fn00402F11
// Return size: 0
void fn00402F11()
fn00402F11_entry:
	// succ:  l00402F11
l00402F11:
	esp = fp
	Mem0[esp:word32] = ecx
	// succ:  l00402F11_thunk_fn00402F12
l00402F11_thunk_fn00402F12:
	call fn00402F12 (retsize: 0;)
	return
	// succ:  fn00402F11_exit
l00402F1E_thunk_fn00402752:
	call fn00402752 (retsize: 0;)
	return
	// succ:  fn00402F11_exit
l00402F1E_thunk_fn00402F24:
	call fn00402F24 (retsize: 0;)
	return
	// succ:  fn00402F11_exit l00402F1E_thunk_fn00402F24
l00402F1E_thunk_fn00402F24:
	call fn00402F24 (retsize: 0;)
	return
	// succ:  fn00402F11_exit
fn00402F11_exit:


// fn00402F12
// Return size: 0
void fn00402F12()
fn00402F12_entry:
	// succ:  l00402F12
l00402F12:
	esp = fp
	al = al | 0x24
	SZO = cond(al)
	C = false
	v6 = cl
	cl = cl
	cl = v6
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	al = al - 0xA3 - C
	SCZO = cond(al)
	goto l00402F17_thunk_fn00402F1A
	// succ:  l00402F17_thunk_fn00402F1A
l00402F12:
	v10 = cl
	cl = cl
	cl = v10
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	al = al - 0xA3 - C
	SCZO = cond(al)
	goto l00402F1A
	// succ:  l00402F1A
l00402F17_thunk_fn00402F1A:
	call fn00402F1A (retsize: 0;)
	return
	// succ:  fn00402F12_exit
l00402F1A:
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	branch Test(EQ,Z) l00402F1E_thunk_fn00402752
fn00402F12_exit:


// fn00402F1A
// Return size: 0
void fn00402F1A()
fn00402F1A_entry:
	// succ:  l00402F1A
l00402F1A:
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	branch Test(EQ,Z) l00402F1E_thunk_fn00402752
	// succ:  l00402F1E_thunk_fn00402F24 l00402F1E_thunk_fn00402752 l00402F1E_thunk_fn00402F24 l00402F1E_thunk_fn00402752
l00402F1E_thunk_fn00402752:
	call fn00402752 (retsize: 0;)
	return
	// succ:  fn00402F1A_exit
l00402F1E_thunk_fn00402F24:
	call fn00402F24 (retsize: 0;)
	return
	// succ:  fn00402F1A_exit
fn00402F1A_exit:


// fn00402F24
// Return size: 0
void fn00402F24()
fn00402F24_entry:
	// succ:  l00402F24
l00402F24:
fn00402F24_exit:


// fn00402F33
// Return size: 0
void fn00402F33()
fn00402F33_entry:
	// succ:  l00402F33
l00402F33:
	esp = fp
	bl = bl ^ ch
	SZO = cond(bl)
	C = false
	bl = bl + 0x01
	SZO = cond(bl)
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	bl = bl + 0x01
	SZO = cond(bl)
	bh = 0x23
	bl = bl + 0x01
	SZO = cond(bl)
	bl = bl + 0xBC + C
	SCZO = cond(bl)
	branch Test(LE,SZO) l00402F42_thunk_fn00402D6B
	goto l00402F48
	// succ:  l00402F48 l00402F42_thunk_fn00402D6B
l00402F33:
l00402F42_thunk_fn00402D6B:
	call fn00402D6B (retsize: 0;)
	return
	// succ:  fn00402F33_exit
l00402F48:
	eax = eax
	esp = esp - 0x00000002
	Mem0[esp:word16] = cx
	cx = Mem0[esp:word16]
	esp = esp + 0x00000002
	branch Test(GT,SZO) l00402F4E_thunk_fn00402D6B
	goto l00402F54
	// succ:  l00402F54 l00402F4E_thunk_fn00402D6B
l00402F4E_thunk_fn00402D6B:
	call fn00402D6B (retsize: 0;)
	return
	// succ:  fn00402F33_exit
l00402F54:
	branch Test(GE,SO) l00402F58
	// succ:  l00402F56 l00402F58
l00402F56:
	eax = eax & 0x2B710F2E
	SZO = cond(eax)
	C = false
	goto l00402F5B
	// succ:  l00402F5B
l00402F58:
l00402F5B:
fn00402F33_exit:


// fn00402F82
// Return size: 0
void fn00402F82()
fn00402F82_entry:
	// succ:  l00402F82
l00402F82:
	esp = fp
	Mem0[esp - 0x00000018:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bl = bl ^ ah
	SZO = cond(bl)
	C = false
	bh = 0xB1
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bl = bl | dl
	SZO = cond(bl)
	C = false
	bh = 0x90
fn00402F82_exit:


