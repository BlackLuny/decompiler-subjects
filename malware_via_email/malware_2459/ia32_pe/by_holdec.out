INFO  an - ### holdec 1.1 Copyright 2003-2012 Raimar Falke
INFO  an - Using ./malware_via_email/malware_2459/ia32_pe/subject.exe as executable
read image                              : ............................................................ [ done ]
INFO  fG - Detected PE (Portable Executable)
INFO  ks - wrote ./malware_via_email/malware_2459/ia32_pe/subject.exe.info
INFO  fG - disassembleAndWrite: start a new loop with 1 extra block starts
Disassemble                             : ............................................................ [ done ]
INFO  fG - disassembleAndWrite: running multiline
INFO  ks - wrote ./malware_via_email/malware_2459/ia32_pe/subject.exe.info
Preprocessing 2039 asm lines            : ............................................................ [ done ]
INFO  ks - wrote ./malware_via_email/malware_2459/ia32_pe/subject.exe.info
INFO  fG - disassembleAndWrite: found no new addresses. will stop now.
INFO  ks - wrote ./malware_via_email/malware_2459/ia32_pe/subject.exe.info
Preprocessing 2412 asm lines            : ............................................................ [ done ]
INFO  ks - wrote ./malware_via_email/malware_2459/ia32_pe/subject.exe.info
INFO  fG - reading all asm lines ...
INFO  fG - ... read 2412 asm lines
create blocks                           : ............................................................ [ done ]
init blocks                             : ............................................................ [ done ]
WARN  M - The last line of the last block 365 is not a return or jump. Probably a data area.
Writing 24 methods to cache             : ............................................................ [ done ]
INFO  an - will decompile 24 functions
decompile F_00401010                    : ...INFO  ks - wrote ./malware_via_email/malware_2459/ia32_pe/subject.exe.info
......WARN  ac - Block 5 is already known to have a starting stack offset of -112 but when called from 4 it has an offset of -40
WARN  ac - Block 9 is already known to have a starting stack offset of -152 but when called from 7 it has an offset of -112
WARN  ac - Block 9 is already known to have a starting stack offset of -152 but when called from 8 it has an offset of -112
WARN  ac - Block 12 is already known to have a starting stack offset of -172 but when called from 11 it has an offset of -152
WARN  ac - Block 2 is already known to have a starting stack offset of -40 but when called from 21 it has an offset of -200
WARN  ac - Block 23 is already known to have a starting stack offset of -36 but when called from 22 it has an offset of -196
WARN  ac - Block 17 is already known to have a starting stack offset of -200 but when called from 16 it has an offset of -172
WARN  ac - Block 19 is already known to have a starting stack offset of -200 but when called from 15 it has an offset of -172
........ failed: A non-current expression of a variable is used in block L7 in if(CMP(MARKER_UNSIGNED(reg_pp11), <=, MARKER_UNSIGNED(reg_a22))) goto L9: The current setter is reg_b6 while [reg_pp11] was found. Related expressions are [reg_b7, reg_pp11, reg_b1, reg_b6, reg_b5, reg_pp41, reg_pp36]
decompile F_004011ca                    : .WARN  ag - Referencing unknown line 00401010.0
..INFO  ks - wrote ./malware_via_email/malware_2459/ia32_pe/subject.exe.info
......WARN  ac - Block 2 is already known to have a starting stack offset of -8 but when called from 2 it has an offset of -12
WARN  ac - Block 4 is already known to have a starting stack offset of -4 but when called from 3 it has an offset of -8
................................................... [ done ]
decompile F_004011f1                    : .WARN  ag - Referencing unknown line 004011ca.0
WARN  ag - Referencing unknown line 004011ca.0
WARN  ag - Referencing unknown line 004019f1.0
WARN  ag - Referencing unknown line 004019f1.0
..INFO  ks - wrote ./malware_via_email/malware_2459/ia32_pe/subject.exe.info
......WARN  ac - Block 2 is already known to have a starting stack offset of -40 but when called from 2 it has an offset of -44
WARN  ac - Block 4 is already known to have a starting stack offset of -36 but when called from 3 it has an offset of -40
................................................... [ done ]
decompile F_0040125c                    : ......................................WARN  d - may result in wrong values
WARN  d -   reg_pp24 = PHI(reg_24_local2, reg_24_local0) in Block6
WARN  d -   reg_24_local2 = ADD(reg_pp24, 2) in Block8
...................... [ done ]
decompile F_004012f0                    : ............................................................ [ done ]
decompile F_00401313                    : ............................................................ [ done ]
decompile F_00401319                    : .WARN  ag - Referencing unknown line 00401523.0
WARN  ag - Referencing unknown line 004019f1.0
..INFO  ks - wrote ./malware_via_email/malware_2459/ia32_pe/subject.exe.info
......WARN  ac - Block 9 is already known to have a starting stack offset of -40 but when called from 20 it has an offset of -56
WARN  ac - Block 10 is already known to have a starting stack offset of -40 but when called from 21 it has an offset of -88
WARN  ac - Block 10 is already known to have a starting stack offset of -88 but when called from 22 it has an offset of -40
WARN  ac - Block 9 is already known to have a starting stack offset of -56 but when called from 15 it has an offset of -40
................................................... [ done ]
decompile F_0040146e                    : .WARN  ag - Referencing unknown line 00401319.0
..INFO  ks - wrote ./malware_via_email/malware_2459/ia32_pe/subject.exe.info
......WARN  ac - Block 17 is already known to have a starting stack offset of -32 but when called from 16 it has an offset of -48
........ failed: A non-current expression of a variable is used in block L11 in reg_a13 = ADD(reg_a12, reg_pp15): The current setter is reg_d2 while [reg_pp15] was found. Related expressions are [reg_pp15, reg_d8, reg_d2, reg_d1]
decompile F_00401523                    : .................................................ERROR ie - Caught an Exception while trying to construct regions. Will dump blocks and regions (if available).
java.lang.AssertionError: Found 0 jumps but expected one jump to block 13 in the jumps of block 12 (exit block of region 12)
	at holdec.ie.a(Unknown Source)
	at holdec.ie.a(Unknown Source)
	at holdec.ie.a(Unknown Source)
	at holdec.ie.b(Unknown Source)
	at holdec.ie.a(Unknown Source)
	at holdec.ie.f(Unknown Source)
	at holdec.ie.b(Unknown Source)
	at holdec.ie.a(Unknown Source)
	at holdec.dQ.e(Unknown Source)
	at holdec.eQ.a(Unknown Source)
	at holdec.eI.a(Unknown Source)
	at holdec.dQ.a(Unknown Source)
	at holdec.fG.a(Unknown Source)
	at holdec.an.a(Unknown Source)
	at holdec.an.<init>(Unknown Source)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:532)
	at holdec.Holdec.main(Unknown Source)
 failed: java.lang.AssertionError: Found 0 jumps but expected one jump to block 13 in the jumps of block 12 (exit block of region 12)
decompile F_00401570                    : .WARN  ag - Referencing unknown line 004015f4.0
..INFO  ks - wrote ./malware_via_email/malware_2459/ia32_pe/subject.exe.info
......WARN  ac - Block 4 is already known to have a starting stack offset of -8 but when called from 5 it has an offset of -20
WARN  ac - Block 6 is already known to have a starting stack offset of -8 but when called from 5 it has an offset of -20
WARN  ac - Block 8 is already known to have a starting stack offset of 0 but when called from 7 it has an offset of -12
.............................WARN  d - may result in wrong values
WARN  d -   reg_pp9 = PHI(reg_var12, reg_var10) in Block4
WARN  d -   reg_var12 = ADD(reg_pp9, 20) in Block5
...........ERROR ie - Caught an Exception while trying to construct regions. Will dump blocks and regions (if available).
java.lang.AssertionError
	at holdec.iB.a(Unknown Source)
	at holdec.ie.l(Unknown Source)
	at holdec.ie.f(Unknown Source)
	at holdec.ie.b(Unknown Source)
	at holdec.ie.a(Unknown Source)
	at holdec.dQ.e(Unknown Source)
	at holdec.eQ.a(Unknown Source)
	at holdec.eI.a(Unknown Source)
	at holdec.dQ.a(Unknown Source)
	at holdec.fG.a(Unknown Source)
	at holdec.an.a(Unknown Source)
	at holdec.an.<init>(Unknown Source)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:532)
	at holdec.Holdec.main(Unknown Source)
 failed: java.lang.AssertionError
decompile F_004015c2                    : ............................................................ [ done ]
decompile F_004015f4                    : .WARN  ag - Referencing unknown line 00401319.0
..INFO  ks - wrote ./malware_via_email/malware_2459/ia32_pe/subject.exe.info
......WARN  ac - Block 11 is already known to have a starting stack offset of -16 but when called from 10 it has an offset of -28
WARN  ac - Block 2 is already known to have a starting stack offset of -16 but when called from 11 it has an offset of -28
WARN  ac - Block 14 is already known to have a starting stack offset of -16 but when called from 13 it has an offset of -28
WARN  ac - Block 15 is already known to have a starting stack offset of -12 but when called from 14 it has an offset of -24
.............................WARN  d - may result in wrong values
WARN  d -   reg_pp26 = PHI(reg_var30, reg_var32) in Block7
WARN  d -   reg_var32 = ADD(reg_pp26, -12) in Block9
...................... [ done ]
decompile F_00401652                    : ............................................................ [ done ]
decompile F_00401680                    : .WARN  ag - Referencing unknown line 004019cc.0
..INFO  ks - wrote ./malware_via_email/malware_2459/ia32_pe/subject.exe.info
......WARN  ac - Block 4 is already known to have a starting stack offset of -16 but when called from 4 it has an offset of -20
WARN  ac - Block 6 is already known to have a starting stack offset of -12 but when called from 5 it has an offset of -16
WARN  ac - Block 7 is already known to have a starting stack offset of -8 but when called from 6 it has an offset of -12
................................................... [ done ]
decompile F_004016d4                    : ............................................................ [ done ]
decompile F_004016f0                    : ............................................................ [ done ]
decompile F_00401722                    : .WARN  ag - Referencing unknown line 00401829.0
........WARN  ac - Block 12 is already known to have a starting stack offset of -28 but when called from 14 it has an offset of -36
WARN  ac - Block 13 is already known to have a starting stack offset of -28 but when called from 20 it has an offset of -36
............ failed: A non-current expression of a variable is used in block L5 in reg_c3 = LOAD(reg_pp2): The current setter is reg_c2 while [reg_pp2] was found. Related expressions are [reg_pp2, reg_c0, reg_c2]
decompile F_004017f7                    : ............................................................ [ done ]
decompile F_00401829                    : ...INFO  ks - wrote ./malware_via_email/malware_2459/ia32_pe/subject.exe.info
.............. failed: A non-current expression of a variable is used in block L5 in reg_d3 = UNSIGNED_EXTEND(LOAD(ADD(MULT(reg_pp7, 2), reg_d2, SEGMENT2ADDR(reg_pp5)))): The current setter is reg_a6 while [reg_pp7] was found. Related expressions are [reg_pp29, reg_a4, reg_a6, reg_a5, reg_pp7, reg_a45]
decompile F_004019cc                    : ...INFO  ks - wrote ./malware_via_email/malware_2459/ia32_pe/subject.exe.info
...................................WARN  d - may result in wrong values
WARN  d -   reg_pp6 = PHI(reg_var12, reg_var10) in Block2
WARN  d -   reg_var10 = ADD(InitValue(initial_value_of_esi), AND(LOAD(ADD(reg_pp6, 4)), 0x7fffffff), 16) in Block1
...................... [ done ]
decompile F_004019f1                    : ...INFO  ks - wrote ./malware_via_email/malware_2459/ia32_pe/subject.exe.info
......................................................... [ done ]
decompile F_00401a07                    : .WARN  ag - Referencing unknown line 004025ec.0
WARN  ag - Referencing unknown line 00401722.0
WARN  ag - Referencing unknown line 00401313.0
WARN  ag - Referencing unknown line 004012f0.0
WARN  ag - Referencing unknown line 004016f0.0
WARN  ag - Referencing unknown line 004017f7.0
WARN  ag - Referencing unknown line 00401319.0
WARN  ag - Referencing unknown line 004015c2.0
WARN  ag - Referencing unknown line 00401319.0
WARN  ag - Referencing unknown line 00401652.0
WARN  ag - Referencing unknown line 00401319.0
WARN  ag - Referencing unknown line 004016d4.0
WARN  ag - Referencing unknown line 00401319.0
WARN  ag - Referencing unknown line 004011f1.0
WARN  ag - Referencing unknown line 0040146e.0
WARN  ag - Referencing unknown line 00401570.0
WARN  ag - Referencing unknown line 00401680.0
WARN  ag - Referencing unknown line 0040125c.0
WARN  ag - Referencing unknown line 00401319.0
WARN  ag - Referencing unknown line 00402627.0
..INFO  ks - wrote ./malware_via_email/malware_2459/ia32_pe/subject.exe.info
......WARN  ac - Block 10 is already known to have a starting stack offset of -8 but when called from 9 it has an offset of -24
WARN  ac - Block 19 is already known to have a starting stack offset of -124 but when called from 20 it has an offset of -140
WARN  ac - Block 24 is already known to have a starting stack offset of -76 but when called from 20 it has an offset of -140
WARN  ac - Block 24 is already known to have a starting stack offset of -140 but when called from 22 it has an offset of -24
WARN  ac - Block 24 is already known to have a starting stack offset of -140 but when called from 23 it has an offset of -24
WARN  ac - Block 21 is already known to have a starting stack offset of -140 but when called from 33 it has an offset of -176
WARN  ac - Block 21 is already known to have a starting stack offset of -176 but when called from 35 it has an offset of -200
WARN  ac - Block 21 is already known to have a starting stack offset of -200 but when called from 38 it has an offset of -224
WARN  ac - Block 119 is already known to have a starting stack offset of -140 but when called from 37 it has an offset of -200
WARN  ac - Block 21 is already known to have a starting stack offset of -224 but when called from 43 it has an offset of -236
WARN  ac - Block 43 is already known to have a starting stack offset of -224 but when called from 42 it has an offset of -256
WARN  ac - Block 42 is already known to have a starting stack offset of -240 but when called from 41 it has an offset of -256
WARN  ac - Block 33 is already known to have a starting stack offset of -156 but when called from 26 it has an offset of -260
WARN  ac - Block 33 is already known to have a starting stack offset of -260 but when called from 32 it has an offset of -292
WARN  ac - Block 31 is already known to have a starting stack offset of -276 but when called from 29 it has an offset of -304
WARN  ac - Block 21 is already known to have a starting stack offset of -236 but when called from 50 it has an offset of -276
WARN  ac - Block 21 is already known to have a starting stack offset of -276 but when called from 51 it has an offset of -288
WARN  ac - Block 21 is already known to have a starting stack offset of -288 but when called from 54 it has an offset of -328
WARN  ac - Block 21 is already known to have a starting stack offset of -328 but when called from 55 it has an offset of -352
WARN  ac - Block 55 is already known to have a starting stack offset of -328 but when called from 53 it has an offset of -352
WARN  ac - Block 21 is already known to have a starting stack offset of -352 but when called from 86 it has an offset of -388
WARN  ac - Block 21 is already known to have a starting stack offset of -388 but when called from 83 it has an offset of -396
WARN  ac - Block 86 is already known to have a starting stack offset of -388 but when called from 85 it has an offset of -404
WARN  ac - Block 21 is already known to have a starting stack offset of -396 but when called from 65 it has an offset of -392
WARN  ac - Block 76 is already known to have a starting stack offset of -376 but when called from 68 it has an offset of -392
WARN  ac - Block 68 is already known to have a starting stack offset of -392 but when called from 67 it has an offset of -404
WARN  ac - Block 80 is already known to have a starting stack offset of -388 but when called from 79 it has an offset of -376
WARN  ac - Block 91 is already known to have a starting stack offset of -412 but when called from 89 it has an offset of -416
WARN  ac - Block 92 is already known to have a starting stack offset of -416 but when called from 93 it has an offset of -432
WARN  ac - Block 94 is already known to have a starting stack offset of -416 but when called from 93 it has an offset of -432
WARN  ac - Block 21 is already known to have a starting stack offset of -396 but when called from 102 it has an offset of -456
WARN  ac - Block 102 is already known to have a starting stack offset of -448 but when called from 101 it has an offset of -456
WARN  ac - Block 21 is already known to have a starting stack offset of -456 but when called from 99 it has an offset of -464
WARN  ac - Block 100 is already known to have a starting stack offset of -448 but when called from 99 it has an offset of -464
WARN  ac - Block 98 is already known to have a starting stack offset of -448 but when called from 95 it has an offset of -444
WARN  ac - Block 98 is already known to have a starting stack offset of -448 but when called from 96 it has an offset of -456
WARN  ac - Block 21 is already known to have a starting stack offset of -464 but when called from 106 it has an offset of -460
WARN  ac - Block 21 is already known to have a starting stack offset of -464 but when called from 112 it has an offset of -496
WARN  ac - Block 119 is already known to have a starting stack offset of -200 but when called from 118 it has an offset of -540
WARN  ac - Block 118 is already known to have a starting stack offset of -540 but when called from 114 it has an offset of -524
WARN  ac - Block 118 is already known to have a starting stack offset of -540 but when called from 115 it has an offset of -532
WARN  ac - Block 118 is already known to have a starting stack offset of -540 but when called from 116 it has an offset of -548
WARN  ac - Block 106 is already known to have a starting stack offset of -456 but when called from 104 it has an offset of -464
WARN  ac - Block 21 is already known to have a starting stack offset of -496 but when called from 74 it has an offset of -408
WARN  ac - Block 76 is already known to have a starting stack offset of -392 but when called from 75 it has an offset of -408
WARN  ac - Block 106 is already known to have a starting stack offset of -464 but when called from 105 it has an offset of -476
WARN  ac - Block 65 is already known to have a starting stack offset of -392 but when called from 63 it has an offset of -408
WARN  ac - Block 63 is already known to have a starting stack offset of -408 but when called from 61 it has an offset of -412
WARN  ac - Block 91 is already known to have a starting stack offset of -416 but when called from 90 it has an offset of -404
WARN  ac - Block 50 is already known to have a starting stack offset of -276 but when called from 48 it has an offset of -240
WARN  ac - Block 48 is already known to have a starting stack offset of -240 but when called from 47 it has an offset of -252
WARN  ac - Block 31 is already known to have a starting stack offset of -304 but when called from 30 it has an offset of -308
........ failed: A non-current expression of a variable is used in block L81 in (void) STORE(reg_h197, reg_pp107): The current setter is reg_b40 while [reg_pp107] was found. Related expressions are [reg_b30, reg_b31, reg_b32, reg_pp76, reg_pp107, reg_b41, reg_pp119, reg_pp88, reg_pp113, reg_b40, reg_b38, reg_pp83, reg_b39, reg_b36, reg_pp73, reg_b37]
decompile F_004025ec                    : ............................................................ [ done ]
decompile F_00402627                    : ............................................................ [ done ]
