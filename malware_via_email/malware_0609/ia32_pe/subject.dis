// fn0040101D
// Return size: 6
void fn0040101D()
fn0040101D_entry:
	// succ:  l0040101D
l0040101D:
	esp = fp
	Mem0[esp - 0x00000010:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l0040101D_thunk_fn0040101E
l0040101D_thunk_fn0040101E:
	call fn0040101E (retsize: 0;)
	return
	// succ:  fn0040101D_exit
fn0040101D_exit:


// fn0040101E
// Return size: 0
void fn0040101E()
fn0040101E_entry:
	// succ:  l0040101E
l0040101E:
	esp = fp
	esp = esp + 0x00000001
	SZO = cond(esp)
	al = al & 0xF0
	SZO = cond(al)
	C = false
	ecx = ecx ^ ebx
	SZO = cond(ecx)
	C = false
	ebx = ebx ^ ecx
	SZO = cond(ebx)
	C = false
	eax = eax + esi
	SCZO = cond(eax)
	edi = edi - ebx
	SCZO = cond(edi)
	esi = esi - ecx
	SCZO = cond(esi)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ebx = ebx + edx
	SCZO = cond(ebx)
	ebx = edx
	eax = eax + 0x00000001
	SZO = cond(eax)
	branch Test(ULE,CZ) l00401031_thunk_fn00401097
	goto l00401031_thunk_fn00401033
	// succ:  l00401031_thunk_fn00401033 l00401031_thunk_fn00401097
l0040101E:
	ecx = ecx ^ ebx
	SZO = cond(ecx)
	C = false
	ebx = ebx ^ ecx
	SZO = cond(ebx)
	C = false
	eax = eax + esi
	SCZO = cond(eax)
	edi = edi - ebx
	SCZO = cond(edi)
	esi = esi - ecx
	SCZO = cond(esi)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ebx = ebx + edx
	SCZO = cond(ebx)
	ebx = edx
	eax = eax + 0x00000001
	SZO = cond(eax)
	branch Test(ULE,CZ) l00401097
	// succ:  l0040102E_thunk_fn00401033 l0040102E_thunk_fn00401097
l0040102E_thunk_fn00401033:
	call fn00401033 (retsize: 0;)
	return
	// succ:  fn0040101E_exit
l0040102E_thunk_fn00401097:
	call fn00401097 (retsize: 0;)
	return
	// succ:  fn0040101E_exit
l00401031_thunk_fn00401033:
	call fn00401033 (retsize: 0;)
	return
	// succ:  fn0040101E_exit l00401031_thunk_fn00401033
l00401031_thunk_fn00401033:
	call fn00401033 (retsize: 0;)
	return
	// succ:  fn0040101E_exit
l00401031_thunk_fn00401097:
	call fn00401097 (retsize: 0;)
	return
	// succ:  fn0040101E_exit
fn0040101E_exit:


// fn00401033
// Return size: 0
void fn00401033()
fn00401033_entry:
	// succ:  l00401033
l00401033:
	al = al
	branch Test(PO,P) l00401037
	// succ:  l00401037
l00401037:
	branch Test(UGT,CZ) l00401097
	goto l00401039
	// succ:  l00401039 l00401037_thunk_fn00401097
l00401037_thunk_fn00401097:
	call fn00401097 (retsize: 0;)
	return
	// succ:  fn00401033_exit
l00401039:
	eax = eax + ebp + C
	SCZO = cond(eax)
	v9 = eax
	eax = edi
	edi = v9
	D = false
	return
	// succ:  fn00401033_exit
fn00401033_exit:


// fn00401040
// Return size: 0
void fn00401040()
fn00401040_entry:
	// succ:  l00401040
l00401040:
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	dl = dl ^ bh
	SZO = cond(dl)
	C = false
	ecx = ecx - ebx
	SCZO = cond(ecx)
	dh = dh + 0x01
	SZO = cond(dh)
	dh = dh | dl
	SZO = cond(dh)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	dh = dh + 0x01
	SZO = cond(dh)
	bh = bh + 0x01
	SZO = cond(bh)
	branch Test(ULT,C) l0040104F_thunk_fn00401209
	goto l0040104F_thunk_fn00401055
	// succ:  l0040104F_thunk_fn00401055 l0040104F_thunk_fn00401209
fn00401040_exit:


// fn00401055
// Return size: 0
void fn00401055()
fn00401055_entry:
	// succ:  l00401055
l00401055:
	esp = fp
	edi = edi
	al = al
	branch Test(UGE,C) l00401059_thunk_fn00401209
	goto l0040105F
	// succ:  l0040105F l00401059_thunk_fn00401209
l00401055:
l00401059_thunk_fn00401209:
	call fn00401209 (retsize: 0;)
	return
	// succ:  fn00401055_exit
l0040105F:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	ah = FPUF
	SCZO = cond(Mem0[ecx + 0x0000000B + edx * 0x02:byte] - bh)
	// succ:  l00401061_thunk_fn00401065
l00401061_thunk_fn00401065:
	call fn00401065 (retsize: 0;)
	return
	// succ:  fn00401055_exit
fn00401055_exit:


// fn00401064
// Return size: 0
void fn00401064()
fn00401064_entry:
	// succ:  l00401064
l00401064:
	esp = fp
	ebx = ebx | eax
	SZO = cond(ebx)
	C = false
	goto l00401064_thunk_fn00401065
	// succ:  l00401064_thunk_fn00401065
l00401064:
l00401064_thunk_fn00401065:
	call fn00401065 (retsize: 0;)
	return
	// succ:  fn00401064_exit
fn00401064_exit:


// fn00401065
// Return size: 0
void fn00401065()
fn00401065_entry:
	// succ:  l00401065
l00401065:
	esp = fp
	rArg0 = rArg0 * Mem0[esi + 0x0000002B:real32]
	rArg0 = rArg0 * (real64) Mem0[ebx:word16]
	v6 = Mem0[ebx:word16] - (real64) rArg0
	Mem0[ebx:word16] = v6
l00401065:
	esi = esi - 0x00000001
	SZO = cond(esi)
	ebx = ebx - esi
	SCZO = cond(ebx)
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	esi = esi - ecx
	SCZO = cond(esi)
	esi = esi + ebx
	SCZO = cond(esi)
	edi = edi + ebx
	SCZO = cond(edi)
fn00401065_exit:


// fn00401097
// Return size: 0
void fn00401097()
fn00401097_entry:
	// succ:  l00401097
l00401097:
	edi = edi | edx
	SZO = cond(edi)
	C = false
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
fn00401097_exit:


// fn004010A1
// Return size: 0
void fn004010A1()
fn004010A1_entry:
	// succ:  l004010A1
l004010A1:
	esp = fp
	esi = esi + ebx
	SCZO = cond(esi)
	edi = edi - ecx
	SCZO = cond(edi)
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	eax = eax - 0xEEEEEEEE
	SCZO = cond(eax)
	edx = edx ^ edi
	SZO = cond(edx)
	C = false
	ecx = esi
	goto l004010B0_thunk_fn00401064
	// succ:  l004010B0_thunk_fn00401064
l004010A1:
l004010B0_thunk_fn00401064:
	call fn00401064 (retsize: 0;)
	return
	// succ:  fn004010A1_exit
fn004010A1_exit:


// fn004010BA
// Return size: 0
void fn004010BA()
fn004010BA_entry:
	// succ:  l004010BA
l004010BA:
	esp = fp
	Mem0[esp - 0x00000028:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi + 0x00000001
	SZO = cond(esi)
	ebx = edx
	edi = edi - 0x00000001
	SZO = cond(edi)
	edx = ecx
	edx = edx - esi
	SCZO = cond(edx)
	ebx = ebx - edi
	SCZO = cond(ebx)
	esi = esi ^ edi
	SZO = cond(esi)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edi = edi | edx
	SZO = cond(edi)
	C = false
	branch Test(ULE,CZ) l004010DB
	// succ:  l004010CF l004010DB
l004010CF:
	// succ:  l004010D4
l004010D4:
	branch Test(UGT,CZ) l004010DB
	// succ:  l004010D6 l004010DB
l004010D6:
	al = al - 0x26 - C
	SCZO = cond(al)
	esi = ebp *s 0xFE2B91B7
	SCZO = cond(esi)
	goto l004010DF
	// succ:  l004010DF
l004010DB:
	bh = 0x91
	edi = edi - esi
	SCZO = cond(edi)
	// succ:  l004010DF
l004010DF:
	esi = edx
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	cl = cl | dl
	SZO = cond(cl)
	C = false
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	ch = bl
	esi = esi - edi
	SCZO = cond(esi)
	edx = edx - 0x00000001
	SZO = cond(edx)
	// succ:  l004010EB_thunk_fn00401230
l004010EB_thunk_fn00401230:
	call fn00401230 (retsize: 0;)
	return
	// succ:  fn004010BA_exit
fn004010BA_exit:


// fn004010F4
// Return size: 0
void fn004010F4()
fn004010F4_entry:
	// succ:  l004010F4
l004010F4:
	esp = fp
	Mem0[esp - 0x00000010:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx - esi
	SCZO = cond(edx)
	eax = eax + 0x00000001
	SZO = cond(eax)
	ebx = edi
	ecx = edi
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	call fn004012A6 (retsize: 4;)
	al = __inb(dx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	al = dh
	eax = (int32) ax
	// succ:  l00401109_thunk_fn0040110A
l00401109_thunk_fn0040110A:
	call fn0040110A (retsize: 0;)
	return
	// succ:  fn004010F4_exit
fn004010F4_exit:


// fn0040110A
// Return size: 0
void fn0040110A()
fn0040110A_entry:
	goto l0040110A
	// succ:  l0040110A
l00401006:
	ebx = ebx + edi
	SCZO = cond(ebx)
	esi = esi - 0x00000001
	SZO = cond(esi)
	esi = esi + ebx
	SCZO = cond(esi)
	edx = esi
	esi = esi + ebx
	SCZO = cond(esi)
	ecx = ecx + ebx
	SCZO = cond(ecx)
	branch Test(OV,O) l0040107C
	// succ:  l00401013 l0040107C
l00401013:
	bh = bh
	v14 = ah
	ah = ah
	ah = v14
	branch Test(NO,O) l0040107C
	// succ:  l00401019 l0040107C
l00401019:
	C = __das(al, &al)
	v17 = eax
	eax = esp
	esp = v17
	edx = edx - 0x00000001
	SZO = cond(edx)
	SZO = cond(al & 0x8F)
	C = false
	// succ:  l0040101C_thunk_fn0040101E
l0040101C_thunk_fn0040101E:
	call fn0040101E (retsize: 0;)
	return
	// succ:  fn0040110A_exit
l0040107C:
	edi = edi + edx
	SCZO = cond(edi)
	ebx = ebx - edx
	SCZO = cond(ebx)
	edx = ebx
	ebx = ecx
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ebx = ebx + ecx
	SCZO = cond(ebx)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	edi = edi - 0x00000001
	SZO = cond(edi)
	ecx = ecx | eax
	SZO = cond(ecx)
	C = false
	call fn00401334 (retsize: 4;)
	return
	// succ:  fn0040110A_exit
l0040110A:
	esi = esi - 0x00000001
	SZO = cond(esi)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	esi = esi | edx
	SZO = cond(esi)
	C = false
	edx = edx + eax
	SCZO = cond(edx)
	ecx = ecx | esi
	SZO = cond(ecx)
	C = false
	edx = edx - edi
	SCZO = cond(edx)
	eax = Mem0[eax + 0x00000090:word32]
	branch Test(LE,SZO) l00401006
	// succ:  l00401123 l00401006
l00401123:
	// succ:  l00401128
l00401128:
fn0040110A_exit:


// fn00401137
// Return size: 0
void fn00401137()
fn00401137_entry:
	// succ:  l00401137
l00401137:
	esp = esp + 0x00000004
	esi = esi - 0x00000001
	SZO = cond(esi)
	ebx = ecx
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	edi = edi ^ eax
	SZO = cond(edi)
	C = false
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	branch Test(ULT,C) l00401143_thunk_fn0040128D
	goto l00401149
	// succ:  l00401149 l00401143_thunk_fn0040128D
l00401143_thunk_fn0040128D:
	call fn0040128D (retsize: 0;)
	return
	// succ:  fn00401137_exit
l00401149:
	// succ:  l0040114F
l0040114F:
fn00401137_exit:


// fn0040115C
// Return size: 4
void fn0040115C()
fn0040115C_entry:
	// succ:  l0040115C
l0040115C:
	esp = fp
	esi = esi - eax
	SCZO = cond(esi)
	eax = eax | eax
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l00401163
	goto l00401162
	// succ:  l00401162 l00401163
l0040115C:
l00401162:
	return
	// succ:  fn0040115C_exit
l00401163:
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	ecx = ecx ^ edx
	SZO = cond(ecx)
	C = false
	edx = edx + edi
	SCZO = cond(edx)
	ecx = ecx - esi
	SCZO = cond(ecx)
	call fn0040126F (retsize: 4;)
	__outw(dx, ax)
	eax = eax - 0xCF8B4FF8 - C
	SCZO = cond(eax)
	// succ:  l00401172_thunk_fn00401178
l00401172_thunk_fn00401178:
	call fn00401178 (retsize: 0;)
	return
	// succ:  fn0040115C_exit
fn0040115C_exit:


// fn00401178
// Return size: 0
void fn00401178()
fn00401178_entry:
	// succ:  l00401178
l00401178:
	esp = fp
	ecx = ecx + edi
	SCZO = cond(ecx)
	edi = edi - ecx
	SCZO = cond(edi)
	edx = edx | eax
	SZO = cond(edx)
	C = false
	edi = edi | edx
	SZO = cond(edi)
	C = false
	esi = eax
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	edx = edx | esi
	SZO = cond(edx)
	C = false
	ebx = ebx + ecx
	SCZO = cond(ebx)
	call fn004010BA (retsize: 4;)
l00401178:
	ecx = ecx + edi
	SCZO = cond(ecx)
	edi = edi - ecx
	SCZO = cond(edi)
	edx = edx | eax
	SZO = cond(edx)
	C = false
	edi = edi | edx
	SZO = cond(edi)
	C = false
	esi = eax
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	edx = edx | esi
	SZO = cond(edx)
	C = false
	ebx = ebx + ecx
	SCZO = cond(ebx)
fn00401178_exit:


// fn00401192
// Return size: 0
void fn00401192()
fn00401192_entry:
	// succ:  l00401192
l00401192:
	esp = fp
	ecx = ecx ^ edi
	SZO = cond(ecx)
	C = false
	edx = edx ^ ecx
	SZO = cond(edx)
	C = false
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	edx = edx + 0x00000001
	SZO = cond(edx)
	ebx = ebx - ecx
	SCZO = cond(ebx)
	edi = edx
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	ebx = ebx + ecx
	SCZO = cond(ebx)
	call fn00401345 (retsize: 4;)
	v11 = Mem0[esi:word32]
	Mem0[edi:word32] = v11
	esi = esi + 0x00000004
	edi = edi + 0x00000004
	D = false
	eax = eax & 0x05217909
	SZO = cond(eax)
	C = false
	v14 = Mem0[edi + 0x46F42444:word32] + ecx
	Mem0[edi + 0x46F42444:word32] = v14
	SCZO = cond(v14)
	goto l004011AE_thunk_fn004011B4
	// succ:  l004011AE_thunk_fn004011B4
l00401192:
l004011AE_thunk_fn004011B4:
	call fn004011B4 (retsize: 0;)
	return
	// succ:  fn00401192_exit
fn00401192_exit:


// fn004011AF
// Return size: 0
void fn004011AF()
fn004011AF_entry:
	goto l004011AF
	// succ:  l004011AF
l0040104F_thunk_fn00401055:
	call fn00401055 (retsize: 0;)
	return
	// succ:  fn004011AF_exit l0040104F_thunk_fn00401055
l0040104F_thunk_fn00401055:
	call fn00401055 (retsize: 0;)
	return
	// succ:  fn004011AF_exit
l0040104F_thunk_fn00401209:
	call fn00401209 (retsize: 0;)
	return
	// succ:  fn004011AF_exit
l004011AF:
	esp = fp
	Mem0[esp - 0x0000000C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi + 0x00000001
	SZO = cond(esi)
	// succ:  l004011B3_thunk_fn004011B4
l004011B3_thunk_fn004011B4:
	call fn004011B4 (retsize: 0;)
	return
	// succ:  fn004011AF_exit
fn004011AF_exit:


// fn004011B4
// Return size: 0
void fn004011B4()
fn004011B4_entry:
	// succ:  l004011B4
l004011B4:
	esp = fp
	edi = edi - 0x00000001
	SZO = cond(edi)
	cl = 0xC1
	ch = ch ^ dl
	SZO = cond(ch)
	C = false
	ch = 0xD1
	goto l004011BB_thunk_fn00401040
	// succ:  l004011BB_thunk_fn00401040
l004011B4:
	edi = edi - 0x00000001
	SZO = cond(edi)
	cl = 0xC1
	ch = ch ^ dl
	SZO = cond(ch)
	C = false
	ch = 0xD1
	// succ:  l004011B9_thunk_fn00401040
l004011B9_thunk_fn00401040:
	call fn00401040 (retsize: 0;)
	return
	// succ:  fn004011B4_exit
l004011BB_thunk_fn00401040:
	call fn00401040 (retsize: 0;)
	return
	// succ:  fn004011B4_exit
fn004011B4_exit:


// fn004011C6
// Return size: 0
void fn004011C6()
fn004011C6_entry:
	goto l004011C6
	// succ:  l004011C6
l00401175:
	edi = edi - 0x00000001
	SZO = cond(edi)
	ecx = edi
	call fn004010BA (retsize: 4;)
	// succ:  l00401176_thunk_fn00401178
l00401176_thunk_fn00401178:
	call fn00401178 (retsize: 0;)
	return
	// succ:  fn004011C6_exit
l004011C6:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	ebx = ebx - ecx
	SCZO = cond(ebx)
	edi = edi - 0x00000001
	SZO = cond(edi)
	esi = esi + ebx
	SCZO = cond(esi)
	edx = edi
	esi = esi - edi
	SCZO = cond(esi)
	ebx = ebx - ecx
	SCZO = cond(ebx)
	edx = edx | eax
	SZO = cond(edx)
	C = false
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	branch Test(ULE,CZ) l00401175
	// succ:  l004011DA l00401175
l004011DA:
	// succ:  l004011DF
l004011DF:
	ecx = ecx
	branch Test(UGT,CZ) l00401175
	// succ:  l004011E3 l00401175
l004011E3:
	esi = Mem0[eax + ebp:word32]
	eax = __indw(dx)
	// succ:  l004011E6_thunk_fn004011E7
l004011E6_thunk_fn004011E7:
	call fn004011E7 (retsize: 4;)
	return
	// succ:  fn004011C6_exit
fn004011C6_exit:


// fn004011E7
// Return size: 4
void fn004011E7()
fn004011E7_entry:
	// succ:  l004011E7
l004011E7:
	edi = edi + esi
	SCZO = cond(edi)
	esi = esi | ecx
	SZO = cond(esi)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edi = edi - 0x00000001
	SZO = cond(edi)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ecx = ecx ^ eax
	SZO = cond(ecx)
	C = false
	edx = ecx
	ecx = ecx - esi
	SCZO = cond(ecx)
	branch Test(PE,P) l004011F5_thunk_fn0040115C
	goto l004011FB
	// succ:  l004011FB l004011F5_thunk_fn0040115C
l004011F5_thunk_fn0040115C:
	call fn0040115C (retsize: 4;)
	return
	// succ:  fn004011E7_exit
l004011FB:
fn004011E7_exit:


// fn00401209
// Return size: 0
void fn00401209()
fn00401209_entry:
	// succ:  l00401209
l00401209:
	esp = fp
	cl = cl + 0xFB + C
	SCZO = cond(cl)
	cl = cl | ch
	SZO = cond(cl)
	C = false
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	cl = ~cl
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ebx = ebx - ecx
	SCZO = cond(ebx)
	branch Test(OV,O) l00401215_thunk_fn00401192
	goto l0040121B
	// succ:  l0040121B l00401215_thunk_fn00401192
l00401209:
l00401215_thunk_fn00401192:
	call fn00401192 (retsize: 0;)
	return
	// succ:  fn00401209_exit
l0040121B:
	branch Test(UGE,C) l0040121D
	// succ:  l0040121D
l0040121D:
	// succ:  l00401222
l00401222:
	branch Test(NO,O) l00401222_thunk_fn00401192
	goto l00401228
	// succ:  l00401228 l00401222_thunk_fn00401192
l00401222_thunk_fn00401192:
	call fn00401192 (retsize: 0;)
	return
	// succ:  fn00401209_exit
l00401228:
	edx = edx - 0x00000001
	SZO = cond(edx)
	SCZO = ah
	cl = cl - Mem0[eax + 0x0C413A87:byte] - C
	SCZO = cond(cl)
	// succ:  l0040122A_thunk_fn00401230
l0040122A_thunk_fn00401230:
	call fn00401230 (retsize: 0;)
	return
	// succ:  fn00401209_exit
fn00401209_exit:


// fn00401230
// Return size: 0
void fn00401230()
fn00401230_entry:
	// succ:  l00401230
l00401230:
	esp = fp
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bh = bh - bl
	SCZO = cond(bh)
	ecx = edx
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	cl = cl - 0x8C - C
	SCZO = cond(cl)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ecx = esi
	call fn004011AF (retsize: 4;)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	v14 = Mem0[edx + 0xCF0BB1D8:byte] & dh
	Mem0[edx + 0xCF0BB1D8:byte] = v14
	SZO = cond(Mem0[edx + 0xCF0BB1D8:byte])
	C = false
	goto l00401244_thunk_fn0040124A
	// succ:  l00401244_thunk_fn0040124A
l00401230:
l00401244_thunk_fn0040124A:
	call fn0040124A (retsize: 0;)
	return
	// succ:  fn00401230_exit
fn00401230_exit:


// fn00401248
// Return size: 0
void fn00401248()
fn00401248_entry:
	// succ:  l00401248
l00401248:
	esp = fp
	ecx = ecx | edi
	SZO = cond(ecx)
	C = false
	goto l00401248_thunk_fn0040124A
	// succ:  l00401248_thunk_fn0040124A
l00401248:
l00401248_thunk_fn0040124A:
	call fn0040124A (retsize: 0;)
	return
	// succ:  fn00401248_exit
fn00401248_exit:


// fn0040124A
// Return size: 0
void fn0040124A()
fn0040124A_entry:
	// succ:  l0040124A
l0040124A:
	esp = fp
	esi = esi | ecx
	SZO = cond(esi)
	C = false
	ecx = ecx + edi
	SCZO = cond(ecx)
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	ecx = ecx ^ edx
	SZO = cond(ecx)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	eax = eax & 0xEEEEEEEE
	SZO = cond(eax)
	C = false
	branch Test(LT,SO) l00401258_thunk_fn0040131D
	goto l00401258_thunk_fn0040125E
	// succ:  l00401258_thunk_fn0040125E l00401258_thunk_fn0040131D
l0040124A:
	esi = esi | ecx
	SZO = cond(esi)
	C = false
	ecx = ecx + edi
	SCZO = cond(ecx)
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	ecx = ecx ^ edx
	SZO = cond(ecx)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	eax = eax & 0xEEEEEEEE
	SZO = cond(eax)
	C = false
	branch Test(LT,SO) l00401258_thunk_fn0040131D
	goto l00401258_thunk_fn0040125E
	// succ:  l00401258_thunk_fn0040125E l00401258_thunk_fn0040131D
l00401258_thunk_fn0040125E:
	call fn0040125E (retsize: 0;)
	return
	// succ:  fn0040124A_exit l00401258_thunk_fn0040125E
l00401258_thunk_fn0040125E:
	call fn0040125E (retsize: 0;)
	return
	// succ:  fn0040124A_exit
l00401258_thunk_fn0040125E:
	call fn0040125E (retsize: 0;)
	return
	// succ:  fn0040124A_exit
l00401258_thunk_fn0040131D:
	call fn0040131D (retsize: 0;)
	return
	// succ:  fn0040124A_exit
l00401258_thunk_fn0040131D:
	call fn0040131D (retsize: 0;)
	return
	// succ:  fn0040124A_exit
fn0040124A_exit:


// fn0040125E
// Return size: 0
void fn0040125E()
fn0040125E_entry:
	// succ:  l0040125E
l0040125E:
	esp = esp - 0x00000002
	Mem0[esp:word16] = cx
	cx = Mem0[esp:word16]
	esp = esp + 0x00000002
	branch Test(GE,SO) l00401262_thunk_fn0040131D
	goto l00401268
	// succ:  l00401268 l00401262_thunk_fn0040131D
l00401262_thunk_fn0040131D:
	call fn0040131D (retsize: 0;)
	return
	// succ:  fn0040125E_exit
l00401268:
	C = __daa(al, &al)
	SCZO = cond(eax - Mem0[edi:word32])
	edi = edi + 0x00000004
	SCZO = cond(Mem0[esi:word32] - Mem0[edi:word32])
	esi = esi + 0x00000004
	edi = edi + 0x00000004
	Mem0[edi:word32] = eax
	edi = edi + 0x00000004
	Mem0[es:0x24648DF2:byte] = al
	// succ:  l0040126C_thunk_fn00401272
l0040126C_thunk_fn00401272:
	call fn00401272 (retsize: 0;)
	return
	// succ:  fn0040125E_exit
fn0040125E_exit:


// fn0040126F
// Return size: 0
void fn0040126F()
fn0040126F_entry:
	// succ:  l0040126F
l0040126F:
	esp = fp
	esp = esp + 0x00000004
	// succ:  l0040126F_thunk_fn00401272
l0040126F_thunk_fn00401272:
	call fn00401272 (retsize: 0;)
	return
	// succ:  fn0040126F_exit
fn0040126F_exit:


// fn00401272
// Return size: 0
void fn00401272()
fn00401272_entry:
	// succ:  l00401272
l00401272:
	esp = fp
	al = al + 0x49
	SCZO = cond(al)
	ecx = ecx - esi
	SCZO = cond(ecx)
	ecx = edi
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	edx = edx + ebx
	SCZO = cond(edx)
	esi = esi + 0x00000001
	SZO = cond(esi)
	ebx = ebx + esi
	SCZO = cond(ebx)
	ebx = ebx - esi
	SCZO = cond(ebx)
	call fn00401137 (retsize: 4;)
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	SCZO = cond(edx - edx)
	al = Mem0[ebx + (uint32) al:byte]
	Mem0[0xC703F61E:word32] = eax
	goto l0040128A_thunk_fn0040128F
	// succ:  l0040128A_thunk_fn0040128F
l00401272:
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ecx = ecx - esi
	SCZO = cond(ecx)
	ecx = edi
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	edx = edx + ebx
	SCZO = cond(edx)
	esi = esi + 0x00000001
	SZO = cond(esi)
	ebx = ebx + esi
	SCZO = cond(ebx)
	ebx = ebx - esi
	SCZO = cond(ebx)
l0040128A_thunk_fn0040128F:
	call fn0040128F (retsize: 0;)
	return
	// succ:  fn00401272_exit
fn00401272_exit:


// fn0040128D
// Return size: 0
void fn0040128D()
fn0040128D_entry:
	// succ:  l0040128D
l0040128D:
	esp = fp
	eax = eax + edi
	SCZO = cond(eax)
	goto l0040128D_thunk_fn0040128F
	// succ:  l0040128D_thunk_fn0040128F
l0040128D:
l0040128D_thunk_fn0040128F:
	call fn0040128F (retsize: 0;)
	return
	// succ:  fn0040128D_exit
fn0040128D_exit:


// fn0040128F
// Return size: 0
void fn0040128F()
fn0040128F_entry:
	// succ:  l0040128F
l0040128F:
	esp = fp
	ebx = edx
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	edi = edi + edx
	SCZO = cond(edi)
	edx = edx - ecx
	SCZO = cond(edx)
	eax = eax | edx
	SZO = cond(eax)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	eax = eax - edx
	SCZO = cond(eax)
	call fn004010F4 (retsize: 4;)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	eax = eax & 0x8DAFEEF8
	SZO = cond(eax)
	C = false
	goto l004012A1_thunk_fn004012A7
	// succ:  l004012A1_thunk_fn004012A7
l0040128F:
	ebx = edx
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	edi = edi + edx
	SCZO = cond(edi)
	edx = edx - ecx
	SCZO = cond(edx)
	eax = eax | edx
	SZO = cond(eax)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	eax = eax - edx
	SCZO = cond(eax)
	call fn004010F4 (retsize: 4;)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	eax = eax & 0x8DAFEEF8
	SZO = cond(eax)
	C = false
	goto l004012A1_thunk_fn004012A7
	// succ:  l004012A1_thunk_fn004012A7
l004012A1_thunk_fn004012A7:
	call fn004012A7 (retsize: 0;)
	return
	// succ:  fn0040128F_exit
l004012A1_thunk_fn004012A7:
	call fn004012A7 (retsize: 0;)
	return
	// succ:  fn0040128F_exit
fn0040128F_exit:


// fn004012A6
// Return size: 0
void fn004012A6()
fn004012A6_entry:
	// succ:  l004012A6
l004012A6:
	esp = fp
	esp = esp + 0x00000004
	// succ:  l004012A6_thunk_fn004012A7
l004012A6_thunk_fn004012A7:
	call fn004012A7 (retsize: 0;)
	return
	// succ:  fn004012A6_exit
fn004012A6_exit:


// fn004012A7
// Return size: 0
void fn004012A7()
fn004012A7_entry:
	// succ:  l004012A7
l004012A7:
	esp = fp
	al = al & 0x04
	SZO = cond(al)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	edx = ecx
	edi = edi + ebx
	SCZO = cond(edi)
	eax = ecx
	ecx = edi
	call fn0040101D (retsize: 4;)
	esp = esp + 0x00007B23
	goto l004012B7_thunk_fn004012BC
	// succ:  l004012B7_thunk_fn004012BC
l004012A7:
	esi = esi + 0x00000001
	SZO = cond(esi)
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	edx = ecx
	edi = edi + ebx
	SCZO = cond(edi)
	eax = ecx
	ecx = edi
	call fn0040101D (retsize: 4;)
	esp = esp + 0x00007B23
	esp = esp - 0x00000004
	Mem0[esp:word32] = ss
	esi = esi - Mem0[edi - 0x00000080:word32]
	SCZO = cond(esi)
	goto l004012BD_thunk_fn004012C0
	// succ:  l004012BD_thunk_fn004012C0
l004012B7_thunk_fn004012BC:
	call fn004012BC (retsize: 0;)
	return
	// succ:  fn004012A7_exit
l004012BD_thunk_fn004012C0:
	call fn004012C0 (retsize: 0;)
	return
	// succ:  fn004012A7_exit
fn004012A7_exit:


// fn004012BC
// Return size: 0
void fn004012BC()
fn004012BC_entry:
	// succ:  l004012BC
l004012BC:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ss
	esi = esi - Mem0[edi - 0x00000080:word32]
	SCZO = cond(esi)
	goto l004012BD_thunk_fn004012C0
	// succ:  l004012BD_thunk_fn004012C0
l004012BC:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ss
	esi = esi - Mem0[edi - 0x00000080:word32]
	SCZO = cond(esi)
	goto l004012BD_thunk_fn004012C0
	// succ:  l004012BD_thunk_fn004012C0
l004012BD_thunk_fn004012C0:
	call fn004012C0 (retsize: 0;)
	return
	// succ:  fn004012BC_exit
l004012BD_thunk_fn004012C0:
	call fn004012C0 (retsize: 0;)
	return
	// succ:  fn004012BC_exit
fn004012BC_exit:


// fn004012C0
// Return size: 0
void fn004012C0()
fn004012C0_entry:
	// succ:  l004012C0
l004012C0:
	ecx = esi
	ecx = ecx ^ eax
	SZO = cond(ecx)
	C = false
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	ebx = ebx + ecx
	SCZO = cond(ebx)
	edx = edx + 0x00000001
	SZO = cond(edx)
	ecx = ecx - edi
	SCZO = cond(ecx)
	ecx = edi
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	branch Test(SG,S) l0040110A
	goto l004012D5
	// succ:  l004012D5 l004012CF_thunk_fn0040110A
l004012CF_thunk_fn0040110A:
	call fn0040110A (retsize: 0;)
	return
	// succ:  fn004012C0_exit
l004012D5:
	ebx = ebx
	branch Test(NS,S) l0040110A
	goto l004012DD
	// succ:  l004012DD l004012D7_thunk_fn0040110A
l004012D7_thunk_fn0040110A:
	call fn0040110A (retsize: 0;)
	return
	// succ:  fn004012C0_exit
l004012DD:
	eax = eax + 0x0B0488B3
	SCZO = cond(eax)
	SCZO = cond(al - 0xAA)
	v14 = Mem0[esp:word32]
	Mem0[esp:word32] = esi
	esi = v14
	// succ:  l004012E5_thunk_fn004012EE
l004012E5_thunk_fn004012EE:
	call fn004012EE (retsize: 0;)
	return
	// succ:  fn004012C0_exit
fn004012C0_exit:


// fn004012E5
// Return size: 0
void fn004012E5()
fn004012E5_entry:
	// succ:  l004012E5
l004012E5:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = esi
	esi = v3
	// succ:  l004012E8_thunk_fn004012EE
l004012E8_thunk_fn004012EE:
	call fn004012EE (retsize: 0;)
	return
	// succ:  fn004012E5_exit
fn004012E5_exit:


// fn004012EE
// Return size: 6
void fn004012EE()
fn004012EE_entry:
	// succ:  l004012EE
l004012EE:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx + eax
	SCZO = cond(ecx)
	ebx = ebx + eax
	SCZO = cond(ebx)
	eax = Mem0[eax + 0x00000008:word32]
	ecx = ecx + ebx
	SCZO = cond(ecx)
	edx = ecx
	call fn0040136C (retsize: 4;)
	D = true
	rLoc1 = (real64) Mem0[edi:int64]
	branch Test(UGT,CZ) l00401319
	// succ:  l00401306 l00401319
l00401306:
	Mem0[0x4FDF0BB2:byte] = al
	edi = edi + 0x00000001
	SZO = cond(edi)
	esi = esi - eax
	SCZO = cond(esi)
	ebx = ebx + eax
	SCZO = cond(ebx)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	edx = edx | ecx
	SZO = cond(edx)
	C = false
	// succ:  l00401316_thunk_fn0040138C
l00401316_thunk_fn0040138C:
	call fn0040138C (retsize: 6;)
	return
	// succ:  fn004012EE_exit
l00401319:
	D = true
	branch Test(ULT,C) l0040131A_thunk_fn004012BC
	goto l0040131C
	// succ:  l0040131C l0040131A_thunk_fn004012BC
l0040131A_thunk_fn004012BC:
	call fn004012BC (retsize: 0;)
	return
	// succ:  fn004012EE_exit
l0040131C:
	al = al + Mem0[ecx - 0x00000075:byte] + C
	SCZO = cond(al)
	// succ:  l0040131C_thunk_fn0040131F
l0040131C_thunk_fn0040131F:
	call fn0040131F (retsize: 6;)
	return
	// succ:  fn004012EE_exit
fn004012EE_exit:


// fn0040131D
// Return size: 0
void fn0040131D()
fn0040131D_entry:
	// succ:  l0040131D
l0040131D:
	esp = fp
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ecx = edx
	goto l0040131E_thunk_fn0040131F
	// succ:  l0040131E_thunk_fn0040131F
l0040131D:
l0040131E_thunk_fn0040131F:
	call fn0040131F (retsize: 6;)
	return
	// succ:  fn0040131D_exit
fn0040131D_exit:


// fn0040131F
// Return size: 6
void fn0040131F()
fn0040131F_entry:
	// succ:  l0040131F
l0040131F:
	esp = fp
	return
	// succ:  fn0040131F_exit
l0040131F:
	edi = edi + edx
	SCZO = cond(edi)
	edi = edi | esi
	SZO = cond(edi)
	C = false
	ebx = edx
	edx = edx | esi
	SZO = cond(edx)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	edx = edx ^ ecx
	SZO = cond(edx)
	C = false
	// succ:  l0040132B_thunk_fn004010A1
l0040132B_thunk_fn004010A1:
	call fn004010A1 (retsize: 0;)
	return
	// succ:  fn0040131F_exit
fn0040131F_exit:


// fn00401334
// Return size: 0
void fn00401334()
fn00401334_entry:
	// succ:  l00401334
l00401334:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = esi
	esi = v3
fn00401334_exit:


// fn00401345
// Return size: 0
void fn00401345()
fn00401345_entry:
	// succ:  l00401345
l00401345:
	esp = fp
	Mem0[esp - 0x00000028:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx + 0x00000001
	SZO = cond(edx)
	edx = edx ^ edi
	SZO = cond(edx)
	C = false
	ecx = ecx ^ edi
	SZO = cond(ecx)
	C = false
	edx = edx - eax
	SCZO = cond(edx)
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	eax = Mem0[fs:0x00000030:word32]
	branch Test(SG,S) TMP!
fn00401345_exit:


// fn0040136C
// Return size: 0
void fn0040136C()
fn0040136C_entry:
	// succ:  l0040136C
l0040136C:
	esp = fp
	Mem0[esp - 0x00000010:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edi = edi + ecx
	SCZO = cond(edi)
	edi = edi | ecx
	SZO = cond(edi)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edx = esi
	branch Test(ULE,CZ) l00401378_thunk_fn00401248
	goto l0040137E
	// succ:  l0040137E l00401378_thunk_fn00401248
l00401378_thunk_fn00401248:
	call fn00401248 (retsize: 0;)
	return
	// succ:  fn0040136C_exit
l0040137E:
	v12 = bx
	bx = bx
	bx = v12
	branch Test(UGT,CZ) l00401381_thunk_fn00401248
	goto l00401387
	// succ:  l00401387 l00401381_thunk_fn00401248
l00401381_thunk_fn00401248:
	call fn00401248 (retsize: 0;)
	return
	// succ:  fn0040136C_exit
l00401387:
	al = al + 0x17
	SCZO = cond(al)
	edi = edi - Mem0[esi + 0x00000001:word32] - C
	SCZO = cond(edi)
	// succ:  l00401389_thunk_fn0040138C
l00401389_thunk_fn0040138C:
	call fn0040138C (retsize: 6;)
	return
	// succ:  fn0040136C_exit
fn0040136C_exit:


// fn0040138C
// Return size: 6
void fn0040138C()
fn0040138C_entry:
	// succ:  l0040138C
l0040138C:
	esp = fp
	ecx = ecx ^ edi
	SZO = cond(ecx)
	C = false
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	edx = edx - 0x00000001
	SZO = cond(edx)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	edx = edx + edi
	SCZO = cond(edx)
	edx = edx + eax
	SCZO = cond(edx)
	edx = edx | edi
	SZO = cond(edx)
	C = false
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	ebx = ebx - edi
	SCZO = cond(ebx)
	call fn004012E5 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = SCZDOP
	v15 = Mem0[ebp - 0x00000015:byte] + cl + C
	Mem0[ebp - 0x00000015:byte] = v15
	SCZO = cond(v15)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	goto l004013A5_thunk_fn004013A6
	// succ:  l004013A5_thunk_fn004013A6
l0040138C:
	ecx = ecx ^ edi
	SZO = cond(ecx)
	C = false
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	edx = edx - 0x00000001
	SZO = cond(edx)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	edx = edx + edi
	SCZO = cond(edx)
	edx = edx + eax
	SCZO = cond(edx)
	edx = edx | edi
	SZO = cond(edx)
	C = false
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	ebx = ebx - edi
	SCZO = cond(ebx)
	call fn004012E5 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = SCZDOP
	v16 = Mem0[ebp - 0x00000015:byte] + cl + C
	Mem0[ebp - 0x00000015:byte] = v16
	SCZO = cond(v16)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	goto l004013A5_thunk_fn004013A6
	// succ:  l004013A5_thunk_fn004013A6
l004013A5_thunk_fn004013A6:
	call fn004013A6 (retsize: 6;)
	return
	// succ:  fn0040138C_exit
l004013A5_thunk_fn004013A6:
	call fn004013A6 (retsize: 6;)
	return
	// succ:  fn0040138C_exit
fn0040138C_exit:


// fn004013A6
// Return size: 6
void fn004013A6()
fn004013A6_entry:
	// succ:  l004013A6
l004013A6:
	call fn00402109 (retsize: 4;)
	branch Test(SG,S) l00401426
	// succ:  l004013AD l00401426
l004013AD:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	al = Mem0[0x34F3D637:byte]
	v9 = Mem0[edx:word32] + ecx + C
	Mem0[edx:word32] = v9
	SCZO = cond(v9)
	es = Mem0[esp:selector]
	esp = esp + 0x00000002
	edx = edx + ecx + C
	SCZO = cond(edx)
	ss = Mem0[esp:selector]
	esp = esp + 0x00000002
	__lock()
	eax = edx + 0x00000018
	al = al - 0x17
	SCZO = cond(al)
	C = __aaa(al, ah, &al, &ah)
	eax = (int32) ax
	v18 = Mem0[ebx:word32] ^ edi
	Mem0[ebx:word32] = v18
	SZO = cond(Mem0[ebx:word32])
	C = false
	C = __aaa(al, ah, &al, &ah)
	C = __aaa(al, ah, &al, &ah)
	al = al & 0xE0
	SZO = cond(al)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = es
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	cl = cl | bh
	SZO = cond(cl)
	C = false
	v22 = Mem0[esp:word32] ^ esp
	Mem0[esp:word32] = v22
	SZO = cond(Mem0[esp:word32])
	C = false
	v23 = Mem0[edx:word32] | ebp
	Mem0[edx:word32] = v23
	SZO = cond(Mem0[edx:word32])
	C = false
	es_esi = Mem0[esi + 0x00000039:segptr32]
	return
	// succ:  fn004013A6_exit
l004013E4:
	es = Mem0[esp:selector]
	esp = esp + 0x00000002
	SCZO = cond(bh - al)
	Mem0[0x072A19BF:word32] = eax
	v43 = Mem0[edx:word32] - ebp - C
	Mem0[edx:word32] = v43
	SCZO = cond(v43)
	ax = __aam(al)
	return
	// succ:  fn004013A6_exit
l00401426:
	v27 = Mem0[fs:edx:word32] + edx + C
	Mem0[fs:edx:word32] = v27
	SCZO = cond(v27)
	es = Mem0[esp:selector]
	esp = esp + 0x00000002
	ecx = ecx ^ Mem0[edx:word32]
	SZO = cond(ecx)
	C = false
	ah = 0x98
	esi = esi - Mem0[fs:edi:word32]
	SCZO = cond(esi)
	C = __aaa(al, ah, &al, &ah)
	bl = bl >>u 0xCB
	SCZO = cond(bl)
	esi = esi - Mem0[0x378ED374:word32] - C
	SCZO = cond(esi)
	eax = (int32) ax
	v30 = Mem0[edi:byte] | dl
	Mem0[edi:byte] = v30
	SZO = cond(Mem0[edi:byte])
	C = false
	C = __aaa(al, ah, &al, &ah)
	C = __aaa(al, ah, &al, &ah)
	ss = Mem0[edi:selector]
	v31 = Mem0[edx:word32] | ebp
	Mem0[edx:word32] = v31
	SZO = cond(Mem0[edx:word32])
	C = false
	al = __inb(0x76)
	dl = dl >>u 0x07
	SCZO = cond(dl)
	branch Test(ULE,CZ) l004013E4
	// succ:  l0040144C l004013E4
l0040144C:
	eax = Mem0[0xF9373717:word32]
	branch ecx == 0x00000000 l004014C1
	// succ:  l00401453 l004014C1
l00401453:
	branch Test(NE,Z) l00401495
	// succ:  l00401455 l00401495
l00401455:
	v34 = Mem0[edx:word32] >>u 0x00000001
	Mem0[edx:word32] = v34
	SCZO = cond(v34)
	v35 = eax
	eax = esi
	esi = v35
	v36 = Mem0[ecx + 0x0000002A + edx:byte] << 0xF4
	Mem0[ecx + 0x0000002A + edx:byte] = v36
	SCZO = cond(v36)
	v38 = Mem0[edi:byte] - ch - C
	Mem0[edi:byte] = v38
	SCZO = cond(v38)
	// succ:  l00401460
l00401460:
	C = __aaa(al, ah, &al, &ah)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000011
	SZO = cond(Mem0[eax + 0xC0C0C0B2:byte] & bl)
	C = false
	v39 = Mem0[ebp - 0x0000006A:word32] >>u 0x00000001
	Mem0[ebp - 0x0000006A:word32] = v39
	SCZO = cond(v39)
	eax = eax + 0x00000001
	SZO = cond(eax)
	al = __inb(0x6B)
	ah = 0x5A
	v40 = Mem0[edi:word32] ^ ebx
	Mem0[edi:word32] = v40
	SZO = cond(Mem0[edi:word32])
	C = false
	SCZO = cond(dl - bl)
	al = al | ah
	SZO = cond(al)
	C = false
	ebp = ebp + Mem0[0x37372301:word32]
	SCZO = cond(ebp)
	edx = edx + 0x00000001
	SZO = cond(edx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	v41 = Mem0[edi + edx:byte] - ch - C
	Mem0[edi + edx:byte] = v41
	SCZO = cond(v41)
	C = __aaa(al, ah, &al, &ah)
	eax = (int32) ax
	ebx = ebx - Mem0[ebx:word32] - C
	SCZO = cond(ebx)
	C = __aaa(al, ah, &al, &ah)
	C = __aaa(al, ah, &al, &ah)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	__lock()
	esp = esp - 0x00000004
	Mem0[esp:word32] = cs
	eax = eax + 0xE04BEAC6
	SCZO = cond(eax)
	al = al - ah
	SCZO = cond(al)
	C = __daa(al, &al)
	// succ:  l00401495
l00401495:
	C = __aaa(al, ah, &al, &ah)
	C = __aaa(al, ah, &al, &ah)
	C = __aaa(al, ah, &al, &ah)
	esp = esp + Mem0[0x37371B74:word32]
	SCZO = cond(esp)
	branch Test(ULE,CZ) l00401460
	// succ:  l004014A0 l00401460
l004014A0:
	goto l2363_9464
	// succ:  l2363_9464
l004014C1:
	// succ:  l004014F0
l004014F0:
	v44 = eax
	eax = esp
	esp = v44
	al = al + 0x0F + C
	SCZO = cond(al)
	C = __aaa(al, ah, &al, &ah)
	C = __aaa(al, ah, &al, &ah)
	eax = (int32) ax
	bl = bl + Mem0[edi:byte]
	SCZO = cond(bl)
	C = __aaa(al, ah, &al, &ah)
	C = __aaa(al, ah, &al, &ah)
	return
	// succ:  fn004013A6_exit
l2363_9464:
fn004013A6_exit:


// fn00402064
// Return size: 0
void fn00402064()
fn00402064_entry:
	// succ:  l00402064
l00402064:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = ecx
	ecx = v3
	branch Test(OV,O) l00402069
	// succ:  l00402069
l00402069:
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi + eax
	SCZO = cond(edi)
	ebx = eax
	bh = bh - dh
	SCZO = cond(bh)
	esi = esi + 0x00000001
	SZO = cond(esi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	// succ:  l00402072_thunk_fn00402970
l00402072_thunk_fn00402970:
	call fn00402970 (retsize: 0;)
	return
	// succ:  fn00402064_exit
fn00402064_exit:


// fn0040207F
// Return size: 0
void fn0040207F()
fn0040207F_entry:
	// succ:  l0040207F
l0040207F:
	esp = fp
	ch = ch - 0x01
	SZO = cond(ch)
	edx = edx | esi
	SZO = cond(edx)
	C = false
	cl = cl + 0x01
	SZO = cond(cl)
	cl = cl + 0xB2
	SCZO = cond(cl)
	edx = edx + 0x00000001
	SZO = cond(edx)
	dl = dl ^ cl
	SZO = cond(dl)
	C = false
	edx = edx | esi
	SZO = cond(edx)
	C = false
	dh = dh - 0x72 - C
	SCZO = cond(dh)
	ch = ch - bl
	SCZO = cond(ch)
	branch Test(ULE,CZ) l00402092_thunk_fn00402B27
	goto l00402098
	// succ:  l00402098 l00402092_thunk_fn00402B27
l0040207F:
l00402092_thunk_fn00402B27:
	call fn00402B27 (retsize: 0;)
	return
	// succ:  fn0040207F_exit
l00402098:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
fn0040207F_exit:


// fn004020A6
// Return size: 0
void fn004020A6()
fn004020A6_entry:
	// succ:  l004020A6
l004020A6:
	esp = fp
	esp = esp + 0x00000004
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bl = bl - 0x76 - C
	SCZO = cond(bl)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	cl = cl | bl
	SZO = cond(cl)
	C = false
	bh = bh + 0xC7 + C
	SCZO = cond(bh)
	call fn00402E13 (retsize: 4;)
	ebp = ebp + 0x00000001
	SZO = cond(ebp)
	Mem0[ebp + 0x31FFB2AF:byte] = Test(EQ,Z)
	// succ:  l004020BC_thunk_fn004020C3
l004020BC_thunk_fn004020C3:
	call fn004020C3 (retsize: 0;)
	return
	// succ:  fn004020A6_exit
fn004020A6_exit:


// fn004020C1
// Return size: 0
void fn004020C1()
fn004020C1_entry:
	// succ:  l004020C1
l004020C1:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[ecx:word32]
	goto l004020C1_thunk_fn004020C3
	// succ:  l004020C1_thunk_fn004020C3
l004020C1:
l004020C1_thunk_fn004020C3:
	call fn004020C3 (retsize: 0;)
	return
	// succ:  fn004020C1_exit
fn004020C1_exit:


// fn004020C3
// Return size: 0
void fn004020C3()
fn004020C3_entry:
	// succ:  l004020C3
l004020C3:
	esp = fp
	dl = dl - cl
	SCZO = cond(dl)
	bl = dh
	edx = edx - 0x00000001
	SZO = cond(edx)
	dh = dh | bl
	SZO = cond(dh)
	C = false
	eax = eax ^ edi
	SZO = cond(eax)
	C = false
	bh = dh
	al = al | bl
	SZO = cond(al)
	C = false
	dh = dh | dl
	SZO = cond(dh)
	C = false
	edi = edi | ecx
	SZO = cond(edi)
	C = false
	goto l004020D4_thunk_fn0040294B
	// succ:  l004020D4_thunk_fn0040294B
l004020C3:
	dl = dl - cl
	SCZO = cond(dl)
	bl = dh
	edx = edx - 0x00000001
	SZO = cond(edx)
	dh = dh | bl
	SZO = cond(dh)
	C = false
	eax = eax ^ edi
	SZO = cond(eax)
	C = false
	bh = dh
	al = al | bl
	SZO = cond(al)
	C = false
	dh = dh | dl
	SZO = cond(dh)
	C = false
	edi = edi | ecx
	SZO = cond(edi)
	C = false
l004020D4_thunk_fn0040294B:
	call fn0040294B (retsize: 0;)
	return
	// succ:  fn004020C3_exit
fn004020C3_exit:


// fn004020DF
// Return size: 4
void fn004020DF()
fn004020DF_entry:
	// succ:  l004020DF
l004020DF:
	esp = fp
	cl = cl - 0xCD - C
	SCZO = cond(cl)
	return
	// succ:  fn004020DF_exit
l004020DF:
fn004020DF_exit:


// fn00402109
// Return size: 0
void fn00402109()
fn00402109_entry:
	// succ:  l00402109
l00402109:
	esp = fp
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	eax = edx
	bh = bh + 0x15
	SCZO = cond(bh)
	bh = dh
	dh = dh + al
	SCZO = cond(dh)
	ch = ch + 0xEF + C
	SCZO = cond(ch)
	eax = eax + 0x00000001
	SZO = cond(eax)
	bh = bh - 0x01
	SZO = cond(bh)
	bh = bh - 0x01
	SZO = cond(bh)
	call fn00402624 (retsize: 4;)
	al = Mem0[0xABE75531:byte]
	v13 = Mem0[edx:byte]
	Mem0[edx:byte] = al
	al = v13
	// succ:  l00402125_thunk_fn00402127
l00402125_thunk_fn00402127:
	call fn00402127 (retsize: 0;)
	return
	// succ:  fn00402109_exit
fn00402109_exit:


// fn00402126
// Return size: 0
void fn00402126()
fn00402126_entry:
	// succ:  l00402126
l00402126:
	esp = fp
	bh = bh + dl
	SCZO = cond(bh)
	goto l00402126_thunk_fn00402127
	// succ:  l00402126_thunk_fn00402127
l00402126:
l00402126_thunk_fn00402127:
	call fn00402127 (retsize: 0;)
	return
	// succ:  fn00402126_exit
fn00402126_exit:


// fn00402127
// Return size: 0
void fn00402127()
fn00402127_entry:
	// succ:  l00402127
l00402127:
	esp = fp
	__cli()
	edx = edx + 0x00000014
	SCZO = cond(edx)
	cl = 0x8E
	bl = cl
	cl = cl + 0x01
	SZO = cond(cl)
	cl = cl + ch
	SCZO = cond(cl)
	ch = ch - 0x70 - C
	SCZO = cond(ch)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	branch Test(EQ,Z) l0040213B_thunk_fn00402EB1
	goto l00402141
	// succ:  l00402141 l0040213B_thunk_fn00402EB1
l00402127:
	edx = edx + 0x00000014
	SCZO = cond(edx)
	cl = 0x8E
	bl = cl
	cl = cl + 0x01
	SZO = cond(cl)
	cl = cl + ch
	SCZO = cond(cl)
	ch = ch - 0x70 - C
	SCZO = cond(ch)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	branch Test(EQ,Z) TMP!
l0040213B_thunk_fn00402EB1:
	call fn00402EB1 (retsize: 0;)
	return
	// succ:  fn00402127_exit
l00402141:
	al = al
	branch Test(NE,Z) l00402143_thunk_fn00402EB1
	goto l00402149
	// succ:  l00402149 l00402143_thunk_fn00402EB1
l00402143_thunk_fn00402EB1:
	call fn00402EB1 (retsize: 0;)
	return
	// succ:  fn00402127_exit
l00402149:
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	SZO = cond(al & 0xB8)
	C = false
	v18 = Mem0[esi:word32]
	Mem0[edi:word32] = v18
	esi = esi + 0x00000004
	edi = edi + 0x00000004
	eax = __indw(dx)
	bh = bh ^ ah
	SZO = cond(bh)
	C = false
	// succ:  l0040214F_thunk_fn00402151
l0040214F_thunk_fn00402151:
	call fn00402151 (retsize: 0;)
	return
	// succ:  fn00402127_exit
fn00402127_exit:


// fn00402151
// Return size: 0
void fn00402151()
fn00402151_entry:
	// succ:  l00402151
l00402151:
	esp = fp
	bl = 0x89
	esi = esi - 0x00000001
	SZO = cond(esi)
	bh = 0x66
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bh = bh ^ cl
	SZO = cond(bh)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bh = dh
	call fn00402593 (retsize: 4;)
	esp = esp + 0x00000001
	SZO = cond(esp)
	Mem0[0x8D0127AC:word32] = eax
l00402151:
fn00402151_exit:


// fn00402166
// Return size: 0
void fn00402166()
fn00402166_entry:
	// succ:  l00402166
l00402166:
	esp = fp
	esp = esp + 0x00000004
	goto l00402167
	// succ:  l00402167
l00402174_thunk_fn0040217A:
	call fn0040217A (retsize: 0;)
	return
	// succ:  fn00402166_exit l00402174_thunk_fn0040217A
l00402174_thunk_fn0040217A:
	call fn0040217A (retsize: 0;)
	return
	// succ:  fn00402166_exit
l00402174_thunk_fn00402A0F:
	call fn00402A0F (retsize: 0;)
	return
	// succ:  fn00402166_exit
fn00402166_exit:


// fn00402167
// Return size: 0
void fn00402167()
fn00402167_entry:
	// succ:  l00402167
l00402167:
	al = al & 0x04
	SZO = cond(al)
	C = false
	bh = bh - 0x01
	SZO = cond(bh)
	cl = 0x62
	cl = cl + 0x01
	SZO = cond(cl)
	dh = bh
	eax = eax + ecx
	SCZO = cond(eax)
	branch Test(OV,O) l00402174_thunk_fn00402A0F
	// succ:  l00402174_thunk_fn0040217A l00402174_thunk_fn00402A0F l00402174_thunk_fn0040217A l00402174_thunk_fn00402A0F
l00402174_thunk_fn0040217A:
	call fn0040217A (retsize: 0;)
	return
	// succ:  fn00402167_exit
l00402174_thunk_fn00402A0F:
	call fn00402A0F (retsize: 0;)
	return
	// succ:  fn00402167_exit
fn00402167_exit:


// fn0040217A
// Return size: 0
void fn0040217A()
fn0040217A_entry:
	// succ:  l0040217A
l0040217A:
fn0040217A_exit:


// fn00402189
// Return size: 0
void fn00402189()
fn00402189_entry:
	// succ:  l00402189
l00402189:
	bl = cl
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	esi = esi + edi
	SCZO = cond(esi)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bl = bl ^ ah
	SZO = cond(bl)
	C = false
	bl = bl | dl
	SZO = cond(bl)
	C = false
	bl = bl + 0xB8 + C
	SCZO = cond(bl)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bl = bl + ah
	SCZO = cond(bl)
	branch Test(PE,P) l00402459
	// succ:  l004021A0 l00402459
l004021A0:
	// succ:  l004021A5
l004021A5:
l00402459:
	bl = 0x24
	bh = bh | cl
	SZO = cond(bh)
	C = false
	bl = ~bl
	eax = eax + ecx
	SCZO = cond(eax)
	bh = bl
	esi = esi + 0x00000001
	SZO = cond(esi)
	bh = 0xAA
	branch Test(SG,S) l00402466_thunk_fn004024BC
	goto l00402468
	// succ:  l00402468 l00402466_thunk_fn004024BC
l00402466_thunk_fn004024BC:
	call fn004024BC (retsize: 0;)
	return
	// succ:  fn00402189_exit
l00402468:
	v18 = al
	al = al
	al = v18
fn00402189_exit:


// fn004021B0
// Return size: 0
void fn004021B0()
fn004021B0_entry:
	// succ:  l004021B0
l004021B0:
	esp = fp
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	edx = edx - ebx
	SCZO = cond(edx)
	dh = dh | dl
	SZO = cond(dh)
	C = false
	ah = ah - dl
	SCZO = cond(ah)
	eax = 0x40215998
	edx = edx + 0x00000001
	SZO = cond(edx)
	bh = 0xF0
	ch = ch + 0xA7 + C
	SCZO = cond(ch)
	bh = bh ^ cl
	SZO = cond(bh)
	C = false
	goto l004021C4_thunk_fn00402473
	// succ:  l004021C4_thunk_fn00402473
l004021B0:
l004021C4_thunk_fn00402473:
	call fn00402473 (retsize: 0;)
	return
	// succ:  fn004021B0_exit
fn004021B0_exit:


// fn004021E6
// Return size: 0
void fn004021E6()
fn004021E6_entry:
	// succ:  l004021E6
l004021E6:
	esp = fp
	esp = esp + 0x00000004
	edx = edx | eax
	SZO = cond(edx)
	C = false
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	ah = -ah
	SCZO = cond(ah)
	C = ah == 0x00
	bl = dh
	edi = edi + 0x00000001
	SZO = cond(edi)
	// succ:  l004021F2_thunk_fn004021F3
l004021F2_thunk_fn004021F3:
	call fn004021F3 (retsize: 0;)
	return
	// succ:  fn004021E6_exit
fn004021E6_exit:


// fn004021F3
// Return size: 0
void fn004021F3()
fn004021F3_entry:
	// succ:  l004021F3
l004021F3:
	esp = fp
	ah = ah ^ al
	SZO = cond(ah)
	C = false
	branch Test(LT,SO) l004021F5_thunk_fn004020C1
	goto l004021FB
	// succ:  l004021FB l004021F5_thunk_fn004020C1
l004021F3:
l004021F5_thunk_fn004020C1:
	call fn004020C1 (retsize: 0;)
	return
	// succ:  fn004021F3_exit
l004021FB:
	al = al
	branch Test(GE,SO) l004021FD_thunk_fn004020C1
	goto l00402203
	// succ:  l00402203 l004021FD_thunk_fn004020C1
l004021FD_thunk_fn004020C1:
	call fn004020C1 (retsize: 0;)
	return
	// succ:  fn004021F3_exit
l00402203:
	return
	// succ:  fn004021F3_exit
fn004021F3_exit:


// fn0040220B
// Return size: 0
void fn0040220B()
fn0040220B_entry:
	// succ:  l0040220B
l0040220B:
	esp = fp
	esi = esi - 0x00000001
	SZO = cond(esi)
	esi = esi + 0x00000001
	SZO = cond(esi)
	bh = bh + cl
	SCZO = cond(bh)
	eax = eax ^ 0xFFFFFEC8
	SZO = cond(eax)
	C = false
	bl = bl + 0x01
	SZO = cond(bl)
	bl = al
	call fn0040256B (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	edx = edx - 0x00000001
	SZO = cond(edx)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	branch Test(NS,S) l0040221F_thunk_fn004021F3
	goto l0040221F_thunk_fn00402221
	// succ:  l0040221F_thunk_fn00402221 l0040221F_thunk_fn004021F3
l0040220B:
l0040221F_thunk_fn004021F3:
	call fn004021F3 (retsize: 0;)
	return
	// succ:  fn0040220B_exit
l0040221F_thunk_fn00402221:
	call fn00402221 (retsize: 0;)
	return
	// succ:  fn0040220B_exit l0040221F_thunk_fn00402221
l0040221F_thunk_fn00402221:
	call fn00402221 (retsize: 0;)
	return
	// succ:  fn0040220B_exit
fn0040220B_exit:


// fn00402221
// Return size: 0
void fn00402221()
fn00402221_entry:
	// succ:  l00402221
l00402221:
	esp = fp
	cl = cl - al
	SCZO = cond(cl)
	cl = cl - 0x81 - C
	SCZO = cond(cl)
	ecx = ecx | edx
	SZO = cond(ecx)
	C = false
	dh = dh - 0x01
	SZO = cond(dh)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00003000
	edx = edx - 0x00000001
	SZO = cond(edx)
	bh = 0x71
	dh = dh - 0xD3 - C
	SCZO = cond(dh)
	ch = ch | ah
	SZO = cond(ch)
	C = false
	call fn0040267F (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esp
	Mem0[ebp - 0x0000007C:byte] = Test(SG,S)
	v16 = Mem0[ecx:word32] | ecx
	Mem0[ecx:word32] = v16
	SZO = cond(Mem0[ecx:word32])
	C = false
	cl = 0x80
	goto l00402243_thunk_fn00402245
	// succ:  l00402243_thunk_fn00402245
l00402221:
l00402243_thunk_fn00402245:
	call fn00402245 (retsize: 0;)
	return
	// succ:  fn00402221_exit
fn00402221_exit:


// fn00402244
// Return size: 0
void fn00402244()
fn00402244_entry:
	// succ:  l00402244
l00402244:
	esp = fp
	dl = dl + 0x7E + C
	SCZO = cond(dl)
	goto l00402244_thunk_fn00402245
	// succ:  l00402244_thunk_fn00402245
l00402244:
l00402244_thunk_fn00402245:
	call fn00402245 (retsize: 0;)
	return
	// succ:  fn00402244_exit
fn00402244_exit:


// fn00402245
// Return size: 0
void fn00402245()
fn00402245_entry:
	// succ:  l00402245
l00402245:
	esp = fp
	v5 = Mem0[esi + 0x0000000B:byte] >> cl
	Mem0[esi + 0x0000000B:byte] = v5
	SCZO = cond(v5)
l00402245:
	edx = edx | esi
	SZO = cond(edx)
	C = false
	dl = ~dl
	ecx = ecx + edi
	SCZO = cond(ecx)
	cl = 0xE3
	dh = bl
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bl = bl + 0x01
	SZO = cond(bl)
	call fn004020A6 (retsize: 4;)
	Mem0[esi:byte] = 0x43
	cl = 0xB1
	edi = edi + eax
	SCZO = cond(edi)
	// succ:  l0040225E_thunk_fn00402260
l0040225E_thunk_fn00402260:
	call fn00402260 (retsize: 0;)
	return
	// succ:  fn00402245_exit
fn00402245_exit:


// fn00402260
// Return size: 0
void fn00402260()
fn00402260_entry:
	// succ:  l00402260
l00402260:
	esp = fp
	Mem0[esp - 0x00000018:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	dl = dl - bl
	SCZO = cond(dl)
	dh = dh ^ bl
	SZO = cond(dh)
	C = false
	dh = dh - bl
	SCZO = cond(dh)
	v9 = (bl & 0x01 << 0x08 - 0x06) != 0x00
	bl = __rol(bl, 0x06)
	C = v9
	dl = dl | bh
	SZO = cond(dl)
	C = false
	ecx = ecx + esi
	SCZO = cond(ecx)
	edx = edx ^ esi
	SZO = cond(edx)
	C = false
	dl = dl - 0x68 - C
	SCZO = cond(dl)
	call fn00402386 (retsize: 4;)
	esi = eax
	C = true
	ax = __aam(al)
	v17 = eax
	eax = esp
	esp = v17
	// succ:  l00402282_thunk_fn00402283
l00402282_thunk_fn00402283:
	call fn00402283 (retsize: 0;)
	return
	// succ:  fn00402260_exit
fn00402260_exit:


// fn00402283
// Return size: 0
void fn00402283()
fn00402283_entry:
	// succ:  l00402283
l00402283:
	esp = fp
	Mem0[esp:word32] = ecx
	esi = esi
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	dh = dh - dl
	SCZO = cond(dh)
	bl = ~bl
	ch = ch + ah
	SCZO = cond(ch)
	edx = edx + edi
	SCZO = cond(edx)
	dl = dl + dh
	SCZO = cond(dl)
	// succ:  l00402293_thunk_fn00402ACB
l00402293_thunk_fn00402ACB:
	call fn00402ACB (retsize: 0;)
	return
	// succ:  fn00402283_exit
fn00402283_exit:


// fn004022BF
// Return size: 0
void fn004022BF()
fn004022BF_entry:
	// succ:  l004022BF
l004022BF:
	esp = fp
	esp = esp + 0x00000004
	goto l004022C0
	// succ:  l004022C0
l004022CD_thunk_fn004022D3:
	call fn004022D3 (retsize: 0;)
	return
	// succ:  fn004022BF_exit l004022CD_thunk_fn004022D3
l004022CD_thunk_fn004022D3:
	call fn004022D3 (retsize: 0;)
	return
	// succ:  fn004022BF_exit
l004022CD_thunk_fn00402600:
	call fn00402600 (retsize: 0;)
	return
	// succ:  fn004022BF_exit
fn004022BF_exit:


// fn004022C0
// Return size: 0
void fn004022C0()
fn004022C0_entry:
	// succ:  l004022C0
l004022C0:
	al = al & 0x04
	SZO = cond(al)
	C = false
	ecx = edi
	ch = 0xEA
	cl = cl + bh
	SCZO = cond(cl)
	bl = bl - dl
	SCZO = cond(bl)
	bl = Mem0[esi:byte]
	branch Test(LE,SZO) l004022CD_thunk_fn00402600
	// succ:  l004022CD_thunk_fn004022D3 l004022CD_thunk_fn00402600 l004022CD_thunk_fn004022D3 l004022CD_thunk_fn00402600
l004022CD_thunk_fn004022D3:
	call fn004022D3 (retsize: 0;)
	return
	// succ:  fn004022C0_exit
l004022CD_thunk_fn00402600:
	call fn00402600 (retsize: 0;)
	return
	// succ:  fn004022C0_exit
fn004022C0_exit:


// fn004022D3
// Return size: 0
void fn004022D3()
fn004022D3_entry:
	// succ:  l004022D3
l004022D3:
fn004022D3_exit:


// fn004022E3
// Return size: 0
void fn004022E3()
fn004022E3_entry:
	// succ:  l004022E3
l004022E3:
	esp = fp
	Mem0[esp - 0x00000018:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = eax
	dl = dl + 0xAE
	SCZO = cond(dl)
	dl = ah
	dh = 0xE0
	edi = eax
	ch = al
	dh = dh + 0x0A + C
	SCZO = cond(dh)
	bl = bl + dh
	SCZO = cond(bl)
	// succ:  l004022F9_thunk_fn00402BCF
l004022F9_thunk_fn00402BCF:
	call fn00402BCF (retsize: 0;)
	return
	// succ:  fn004022E3_exit
fn004022E3_exit:


// fn00402324
// Return size: 0
void fn00402324()
fn00402324_entry:
	// succ:  l00402324
l00402324:
	bl = bl ^ ah
	SZO = cond(bl)
	C = false
	bl = bl | al
	SZO = cond(bl)
	C = false
	esi = esi | edi
	SZO = cond(esi)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	bh = bh - ah
	SCZO = cond(bh)
	ebx = ebx + edx
	SCZO = cond(ebx)
	branch Test(PE,P) l0040232F_thunk_fn0040254F
	goto l0040232F_thunk_fn00402335
	// succ:  l0040232F_thunk_fn00402335 l0040232F_thunk_fn0040254F
fn00402324_exit:


// fn00402335
// Return size: 4
void fn00402335()
fn00402335_entry:
	// succ:  l00402335
l00402335:
	esp = fp
	cx = ecx
	eax = eax
	branch Test(PO,P) l0040233A_thunk_fn0040254F
	goto l00402340
	// succ:  l00402340 l0040233A_thunk_fn0040254F
l00402335:
l0040233A_thunk_fn0040254F:
	call fn0040254F (retsize: 4;)
	return
	// succ:  fn00402335_exit
l00402340:
	v7 = Mem0[0xFB751355:byte]
	Mem0[0xFB751355:byte] = ah
	ah = v7
	v11 = Mem0[edi - 0x0000000A:byte] - 0xDF - C
	Mem0[edi - 0x0000000A:byte] = v11
	SCZO = cond(v11)
	// succ:  l00402346_thunk_fn0040234A
l00402346_thunk_fn0040234A:
	call fn0040234A (retsize: 0;)
	return
	// succ:  fn00402335_exit
fn00402335_exit:


// fn0040234A
// Return size: 0
void fn0040234A()
fn0040234A_entry:
	// succ:  l0040234A
l0040234A:
	esp = fp
	dh = dh - 0x5F - C
	SCZO = cond(dh)
	eax = eax + esi
	SCZO = cond(eax)
	al = al - 0x01
	SZO = cond(al)
	dl = dl ^ dh
	SZO = cond(dl)
	C = false
	dh = dh + 0x92
	SCZO = cond(dh)
	bl = bl + 0x01
	SZO = cond(bl)
	goto l00402356_thunk_fn00402358
	// succ:  l00402356_thunk_fn00402358
l0040234A:
	dh = dh - 0x5F - C
	SCZO = cond(dh)
	eax = eax + esi
	SCZO = cond(eax)
	al = al - 0x01
	SZO = cond(al)
	dl = dl ^ dh
	SZO = cond(dl)
	C = false
	dh = dh + 0x92
	SCZO = cond(dh)
	bl = bl + 0x01
	SZO = cond(bl)
	goto l00402356_thunk_fn00402358
	// succ:  l00402356_thunk_fn00402358
l00402356_thunk_fn00402358:
	call fn00402358 (retsize: 0;)
	return
	// succ:  fn0040234A_exit
l00402356_thunk_fn00402358:
	call fn00402358 (retsize: 0;)
	return
	// succ:  fn0040234A_exit
fn0040234A_exit:


// fn00402358
// Return size: 0
void fn00402358()
fn00402358_entry:
	// succ:  l00402358
l00402358:
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
fn00402358_exit:


// fn00402386
// Return size: 0
void fn00402386()
fn00402386_entry:
	// succ:  l00402386
l00402386:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = esi
	esi = v3
	// succ:  l0040238E
l0040238E:
	ax = eax
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	dl = dl + 0x01
	SZO = cond(dl)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	dl = dl | ch
	SZO = cond(dl)
	C = false
	dh = dh - 0xCA - C
	SCZO = cond(dh)
fn00402386_exit:


// fn004023A7
// Return size: 0
void fn004023A7()
fn004023A7_entry:
	// succ:  l004023A7
l004023A7:
	esp = fp
	bl = bl + 0xB6 + C
	SCZO = cond(bl)
	bl = bl - cl
	SCZO = cond(bl)
	call eax (retsize: 4;)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	ch = ch ^ cl
	SZO = cond(ch)
	C = false
	ch = ch + 0x01
	SZO = cond(ch)
	goto l00402DD0
	// succ:  l00402DD0
l004023A7:
l00402DD0:
	edi = edi + esi
	SCZO = cond(edi)
	bl = bl | bh
	SZO = cond(bl)
	C = false
	dl = dl + 0x77 + C
	SCZO = cond(dl)
	bl = bl + 0xA1 + C
	SCZO = cond(bl)
	edx = edx | eax
	SZO = cond(edx)
	C = false
	dh = dl
	ch = ch + 0x76 + C
	SCZO = cond(ch)
	cl = 0x0A
	ch = ch + bh
	SCZO = cond(ch)
	call fn0040291C (retsize: 4;)
	Mem0[eax - 0x00000078:word32] = 0x91493955
	// succ:  l00402DEA_thunk_fn00402DF1
l00402DEA_thunk_fn00402DF1:
	call fn00402DF1 (retsize: 0;)
	return
	// succ:  fn004023A7_exit
fn004023A7_exit:


// fn004023FE
// Return size: 0
void fn004023FE()
fn004023FE_entry:
	// succ:  l004023FE
l004023FE:
	bl = bl + 0x9D
	SCZO = cond(bl)
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	esi = esi - edi
	SCZO = cond(esi)
	dh = dh + 0x78 + C
	SCZO = cond(dh)
	dh = dh - 0xD9 - C
	SCZO = cond(dh)
	edx = (word32) al
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
fn004023FE_exit:


// fn0040241A
// Return size: 0
void fn0040241A()
fn0040241A_entry:
	// succ:  l0040241A
l0040241A:
	esp = fp
	ecx = ecx ^ ebx
	SZO = cond(ecx)
	C = false
	bh = bh - 0x05 - C
	SCZO = cond(bh)
	dh = dh ^ ah
	SZO = cond(dh)
	C = false
	dl = al
	al = al - 0x11 - C
	SCZO = cond(al)
	cl = cl + 0x35
	SCZO = cond(cl)
	dh = dh - 0x27 - C
	SCZO = cond(dh)
	branch Test(OV,O) l0040242C_thunk_fn00402221
	goto l00402432
	// succ:  l00402432 l0040242C_thunk_fn00402221
l0040241A:
l0040242C_thunk_fn00402221:
	call fn00402221 (retsize: 0;)
	return
	// succ:  fn0040241A_exit
l00402432:
	v15 = di
	di = di
	di = v15
	branch Test(NO,O) l00402435_thunk_fn00402221
	goto l0040243B
	// succ:  l0040243B l00402435_thunk_fn00402221
l00402435_thunk_fn00402221:
	call fn00402221 (retsize: 0;)
	return
	// succ:  fn0040241A_exit
l0040243B:
	ah = ah & al
	SZO = cond(ah)
	C = false
	cl = cl + 0x09 + C
	SCZO = cond(cl)
	// succ:  l0040243D_thunk_fn00402440
l0040243D_thunk_fn00402440:
	call fn00402440 (retsize: 0;)
	return
	// succ:  fn0040241A_exit
fn0040241A_exit:


// fn00402440
// Return size: 0
void fn00402440()
fn00402440_entry:
	// succ:  l00402440
l00402440:
	esp = fp
	esp = esp + 0x00000004
	cl = 0xB2
	ecx = eax
	bh = bh - 0x7B - C
	SCZO = cond(bh)
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	bl = 0xDF
	// succ:  l0040244F_thunk_fn00402BB7
l0040244F_thunk_fn00402BB7:
	call fn00402BB7 (retsize: 0;)
	return
	// succ:  fn00402440_exit
fn00402440_exit:


// fn00402473
// Return size: 0
void fn00402473()
fn00402473_entry:
	// succ:  l00402473
l00402473:
	esp = fp
	edx = ecx
	cl = cl - 0x87 - C
	SCZO = cond(cl)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	bh = bh + 0x01
	SZO = cond(bh)
	ch = ch + 0xBD + C
	SCZO = cond(ch)
	dh = ~dh
	eax = eax ^ 0x4021552B
	SZO = cond(eax)
	C = false
	bl = bl + 0x01
	SZO = cond(bl)
	dh = dh - 0x01
	SZO = cond(dh)
	dh = dh + cl
	SCZO = cond(dh)
	branch Test(ULT,C) l00402CBD
	goto l00402492
	// succ:  l00402492 l00402CBD
l00402473:
l00402492:
	edx = edx
	branch Test(UGE,C) l00402CBD
	// succ:  l0040249A l00402CBD
l0040249A:
	al = al & Mem0[(edx - 0x0000005E) + esi * 0x02:byte]
	SZO = cond(al)
	C = false
	D = false
	call fn00402440 (retsize: 4;)
	// succ:  l0040249F l004024AF_thunk_fn004024B4
l004024AF_thunk_fn004024B4:
	call fn004024B4 (retsize: 0;)
	return
	// succ:  fn00402473_exit
l00402CBD:
	ebx = ebx + eax
	SCZO = cond(ebx)
	edx = edx - 0x00000001
	SZO = cond(edx)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	cl = ch
	dl = bl
	ch = ch | bl
	SZO = cond(ch)
	C = false
	ch = ch - dl
	SCZO = cond(ch)
	// succ:  l00402CC9_thunk_fn00402998
l00402CC9_thunk_fn00402998:
	call fn00402998 (retsize: 0;)
	return
	// succ:  fn00402473_exit
fn00402473_exit:


// fn0040249F
// Return size: 0
void fn0040249F()
fn0040249F_entry:
	// succ:  l0040249F
l0040249F:
	esp = fp
	bl = bl - 0x89 - C
	SCZO = cond(bl)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ebx = ebx ^ edi
	SZO = cond(ebx)
	C = false
	bh = 0x52
	ecx = ecx ^ eax
	SZO = cond(ecx)
	C = false
	ecx = ebx
	ecx = ecx | ebx
	SZO = cond(ecx)
	C = false
	ecx = edi
	call fn00402440 (retsize: 4;)
	// succ:  l004024AF_thunk_fn004024B4
l004024AF_thunk_fn004024B4:
	call fn004024B4 (retsize: 0;)
	return
	// succ:  fn0040249F_exit
fn0040249F_exit:


// fn004024B4
// Return size: 0
void fn004024B4()
fn004024B4_entry:
	// succ:  l004024B4
l004024B4:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = es
	Mem0[edi:byte] = __in(edx)
	edi = edi + 0x00000001
	Mem0[edx + 0x0000005E:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	v7 = Mem0[ebx + 0x0000000A:word32] & 0xFFFFFFD9
	Mem0[ebx + 0x0000000A:word32] = v7
	SZO = cond(Mem0[ebx + 0x0000000A:word32])
	C = false
	goto l004024BA_thunk_fn004024BE
	// succ:  l004024BA_thunk_fn004024BE
l004024B4:
	esp = esp - 0x00000004
	Mem0[esp:word32] = es
	Mem0[edi:byte] = __in(edx)
	edi = edi + 0x00000001
	Mem0[edx + 0x0000005E:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	v10 = Mem0[ebx + 0x0000000A:word32] & 0xFFFFFFD9
	Mem0[ebx + 0x0000000A:word32] = v10
	SZO = cond(Mem0[ebx + 0x0000000A:word32])
	C = false
	goto l004024BA_thunk_fn004024BE
	// succ:  l004024BA_thunk_fn004024BE
l004024BA_thunk_fn004024BE:
	call fn004024BE (retsize: 0;)
	return
	// succ:  fn004024B4_exit
l004024BA_thunk_fn004024BE:
	call fn004024BE (retsize: 0;)
	return
	// succ:  fn004024B4_exit
fn004024B4_exit:


// fn004024BC
// Return size: 0
void fn004024BC()
fn004024BC_entry:
	// succ:  l004024BC
l004024BC:
	esp = fp
	bl = bl | cl
	SZO = cond(bl)
	C = false
	goto l004024BC_thunk_fn004024BE
	// succ:  l004024BC_thunk_fn004024BE
l004024BC:
l004024BC_thunk_fn004024BE:
	call fn004024BE (retsize: 0;)
	return
	// succ:  fn004024BC_exit
l004024CA_thunk_fn0040265D:
	call fn0040265D (retsize: 0;)
	return
	// succ:  fn004024BC_exit
fn004024BC_exit:


// fn004024BE
// Return size: 0
void fn004024BE()
fn004024BE_entry:
	// succ:  l004024BE
l004024BE:
	esp = fp
	edi = edi | ecx
	SZO = cond(edi)
	C = false
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	bl = bl - 0x13 - C
	SCZO = cond(bl)
	bh = bh + 0x08
	SCZO = cond(bh)
	bh = bh - ah
	SCZO = cond(bh)
	// succ:  l004024CA_thunk_fn0040265D l004024CA_thunk_fn0040265D
l004024BE:
	edi = edi | ecx
	SZO = cond(edi)
	C = false
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	bl = bl - 0x13 - C
	SCZO = cond(bl)
	bh = bh + 0x08
	SCZO = cond(bh)
	bh = bh - ah
	SCZO = cond(bh)
l004024CA_thunk_fn0040265D:
	call fn0040265D (retsize: 0;)
	return
	// succ:  fn004024BE_exit
fn004024BE_exit:


// fn004024D4
// Return size: 0
void fn004024D4()
fn004024D4_entry:
	// succ:  l004024D4
l004024D4:
	esp = fp
	esp = esp + 0x00000004
	cl = 0xC7
	cl = cl - 0x01
	SZO = cond(cl)
	ebx = ebx - edi
	SCZO = cond(ebx)
	ch = ch - bh
	SCZO = cond(ch)
	ebx = eax
	ebx = ebx + eax
	SCZO = cond(ebx)
	ebx = ebx ^ edi
	SZO = cond(ebx)
	C = false
	ch = ch - 0xAA - C
	SCZO = cond(ch)
	// succ:  l004024E9_thunk_fn00402126
l004024E9_thunk_fn00402126:
	call fn00402126 (retsize: 0;)
	return
	// succ:  fn004024D4_exit
fn004024D4_exit:


// fn004024F3
// Return size: 0
void fn004024F3()
fn004024F3_entry:
	// succ:  l004024F3
l004024F3:
	esp = fp
	bh = bh + 0xF6
	SCZO = cond(bh)
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	bh = bh + cl
	SCZO = cond(bh)
	esi = esi + eax
	SCZO = cond(esi)
	edi = edi + esi
	SCZO = cond(edi)
	edi = edi - 0x00000001
	SZO = cond(edi)
	bl = ch
	bl = bl + 0x01
	SZO = cond(bl)
	bl = al
	ebx = ebx + ecx
	SCZO = cond(ebx)
	call fn00402C0A (retsize: 4;)
	al = al - Mem0[ecx + 0x00000018:byte]
	SCZO = cond(al)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	al = Mem0[ebx + (uint32) al:byte]
	v17 = eax
	eax = edx
	edx = v17
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	goto l00402513_thunk_fn00402514
	// succ:  l00402513_thunk_fn00402514
l004024F3:
l00402513_thunk_fn00402514:
	call fn00402514 (retsize: 0;)
	return
	// succ:  fn004024F3_exit
fn004024F3_exit:


// fn00402514
// Return size: 0
void fn00402514()
fn00402514_entry:
	// succ:  l00402514
l00402514:
	esp = fp
	bl = bl - 0x01
	SZO = cond(bl)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edx = edx | ebx
	SZO = cond(edx)
	C = false
	bl = bl ^ ch
	SZO = cond(bl)
	C = false
	dh = ch
	cl = cl ^ ch
	SZO = cond(cl)
	C = false
	ecx = ecx - eax
	SCZO = cond(ecx)
	bh = bh + ch
	SCZO = cond(bh)
	call fn004025D2 (retsize: 4;)
	es = Mem0[esp:selector]
	esp = esp + 0x00000002
fn00402514_exit:


// fn0040252D
// Return size: 0
void fn0040252D()
fn0040252D_entry:
	// succ:  l0040252D
l0040252D:
	bl = bl ^ dl
	SZO = cond(bl)
	C = false
	bh = bh - 0x85 - C
	SCZO = cond(bh)
	bh = 0xA2
	bl = bl + 0x60 + C
	SCZO = cond(bl)
	bh = bh - 0xE2 - C
	SCZO = cond(bh)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	bh = bh + 0xB0
	SCZO = cond(bh)
	eax = eax + 0x00000008
	SCZO = cond(eax)
	bh = 0x95
	branch Test(PE,P) l00402544_thunk_fn004024F3
	goto l00402546
	// succ:  l00402546 l00402544_thunk_fn004024F3
l00402544_thunk_fn004024F3:
	call fn004024F3 (retsize: 0;)
	return
	// succ:  fn0040252D_exit
l00402546:
fn0040252D_exit:


// fn0040254F
// Return size: 4
void fn0040254F()
fn0040254F_entry:
	// succ:  l0040254F
l0040254F:
	esp = fp
	bh = bh + 0x73 + C
	SCZO = cond(bh)
	esi = esi + edi
	SCZO = cond(esi)
	bh = bh + dh
	SCZO = cond(bh)
	bh = 0x52
	bh = dl
	esi = esi | eax
	SZO = cond(esi)
	C = false
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	esi = edi
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	call fn00402C5F (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = cs
	al = al + 0x5C
	SCZO = cond(al)
	esp = esp - 0x00000004
	Mem0[esp:word32] = SCZDOP
	goto l0040256A_thunk_fn0040256B
	// succ:  l0040256A_thunk_fn0040256B
l0040254F:
l0040256A_thunk_fn0040256B:
	call fn0040256B (retsize: 4;)
	return
	// succ:  fn0040254F_exit
fn0040254F_exit:


// fn0040256B
// Return size: 4
void fn0040256B()
fn0040256B_entry:
	// succ:  l0040256B
l0040256B:
	esp = fp
	Mem0[esp - 0x00000028:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh + al
	SCZO = cond(bh)
	edi = edi - 0x00000001
	SZO = cond(edi)
	edi = esi
	bl = bl + dl
	SCZO = cond(bl)
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	ebx = eax
	bl = ~bl
	bl = bh
	esi = esi - 0x00000001
	SZO = cond(esi)
	branch Test(PE,P) l0040257F_thunk_fn00402F51
	goto l00402585
	// succ:  l00402585 l0040257F_thunk_fn00402F51
l0040257F_thunk_fn00402F51:
	call fn00402F51 (retsize: 4;)
	return
	// succ:  fn0040256B_exit
l00402585:
	v15 = ecx
	ecx = ecx
	ecx = v15
	branch Test(PO,P) l00402587_thunk_fn00402F51
	goto l0040258D
	// succ:  l0040258D l00402587_thunk_fn00402F51
l00402587_thunk_fn00402F51:
	call fn00402F51 (retsize: 4;)
	return
	// succ:  fn0040256B_exit
l0040258D:
	__outw(dx, ax)
	SCZO = cond(Mem0[esi:byte] - Mem0[edi:byte])
	esi = esi + 0x00000001
	edi = edi + 0x00000001
	ebp = ebp + 0x00000001
	SZO = cond(ebp)
	ss = Mem0[edx + 0x24148796:selector]
	// succ:  l00402590_thunk_fn00402596
l00402590_thunk_fn00402596:
	call fn00402596 (retsize: 0;)
	return
	// succ:  fn0040256B_exit
fn0040256B_exit:


// fn00402593
// Return size: 0
void fn00402593()
fn00402593_entry:
	goto l00402593
	// succ:  l00402593
l0040232F_thunk_fn00402335:
	call fn00402335 (retsize: 4;)
	return
	// succ:  fn00402593_exit l0040232F_thunk_fn00402335
l0040232F_thunk_fn00402335:
	call fn00402335 (retsize: 4;)
	return
	// succ:  fn00402593_exit
l0040232F_thunk_fn0040254F:
	call fn0040254F (retsize: 4;)
	return
	// succ:  fn00402593_exit
l00402593:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = edx
	edx = v3
	// succ:  l00402593_thunk_fn00402596
l00402593_thunk_fn00402596:
	call fn00402596 (retsize: 0;)
	return
	// succ:  fn00402593_exit
fn00402593_exit:


// fn00402596
// Return size: 0
void fn00402596()
fn00402596_entry:
	// succ:  l00402596
l00402596:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh + dl
	SCZO = cond(bh)
	bl = ah
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	goto l0040259E_thunk_fn00402324
	// succ:  l0040259E_thunk_fn00402324
l00402596:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh + dl
	SCZO = cond(bh)
	bl = ah
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l0040259D_thunk_fn00402324
l0040259D_thunk_fn00402324:
	call fn00402324 (retsize: 0;)
	return
	// succ:  fn00402596_exit
l0040259E_thunk_fn00402324:
	call fn00402324 (retsize: 0;)
	return
	// succ:  fn00402596_exit
fn00402596_exit:


// fn004025A7
// Return size: 4
void fn004025A7()
fn004025A7_entry:
	// succ:  l004025A7
l004025A7:
	esp = fp
	ebx = edi
	ecx = ecx - 0xE2040A31
	SCZO = cond(ecx)
	bl = bl ^ dh
	SZO = cond(bl)
	C = false
	bl = ~bl
	bh = ~bh
	ebx = ebx | eax
	SZO = cond(ebx)
	C = false
	bl = bl - 0x01
	SZO = cond(bl)
	ebx = ebx | eax
	SZO = cond(ebx)
	C = false
	goto l004025BB
	// succ:  l004025BB
l004025A7:
l004025BF_thunk_fn004025C5:
	call fn004025C5 (retsize: 0;)
	return
	// succ:  fn004025A7_exit l004025BF_thunk_fn004025C5
l004025BF_thunk_fn004025C5:
	call fn004025C5 (retsize: 0;)
	return
	// succ:  fn004025A7_exit
l004025BF_thunk_fn00402744:
	call fn00402744 (retsize: 4;)
	return
	// succ:  fn004025A7_exit
fn004025A7_exit:


// fn004025BB
// Return size: 4
void fn004025BB()
fn004025BB_entry:
	// succ:  l004025BB
l004025BB:
	bh = bh - 0x01
	SZO = cond(bh)
	bh = bh + bl
	SCZO = cond(bh)
	branch Test(ULT,C) l004025BF_thunk_fn00402744
	// succ:  l004025BF_thunk_fn004025C5 l004025BF_thunk_fn00402744 l004025BF_thunk_fn004025C5 l004025BF_thunk_fn00402744
l004025BF_thunk_fn004025C5:
	call fn004025C5 (retsize: 0;)
	return
	// succ:  fn004025BB_exit
l004025BF_thunk_fn00402744:
	call fn00402744 (retsize: 4;)
	return
	// succ:  fn004025BB_exit
fn004025BB_exit:


// fn004025C5
// Return size: 0
void fn004025C5()
fn004025C5_entry:
	// succ:  l004025C5
l004025C5:
fn004025C5_exit:


// fn004025D2
// Return size: 0
void fn004025D2()
fn004025D2_entry:
	// succ:  l004025D2
l004025D2:
	esp = fp
	esp = esp + 0x00000004
	al = al + 0x01
	SZO = cond(al)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	edx = edx | edi
	SZO = cond(edx)
	C = false
	dl = dl + 0x92 + C
	SCZO = cond(dl)
	edx = edx - 0x00000001
	SZO = cond(edx)
	edx = edx + eax
	SCZO = cond(edx)
	ecx = ecx | edx
	SZO = cond(ecx)
	C = false
	ch = ~ch
	branch Test(LT,SO) l004025E7_thunk_fn00402BEA
	goto l004025ED
	// succ:  l004025ED l004025E7_thunk_fn00402BEA
l004025E7_thunk_fn00402BEA:
	call fn00402BEA (retsize: 0;)
	return
	// succ:  fn004025D2_exit
l004025ED:
	// succ:  l004025F3
l004025F3:
	v15 = ch
	ch = ch
	ch = v15
	branch Test(GE,SO) l004025F5_thunk_fn00402BEA
	goto l004025FB
	// succ:  l004025FB l004025F5_thunk_fn00402BEA
l004025F5_thunk_fn00402BEA:
	call fn00402BEA (retsize: 0;)
	return
	// succ:  fn004025D2_exit
l004025FB:
	ebp = ebp + 0x00000001
	SZO = cond(ebp)
	branch Test(NS,S) TMP!
fn004025D2_exit:


// fn00402600
// Return size: 0
void fn00402600()
fn00402600_entry:
	// succ:  l00402600
l00402600:
	esp = fp
	dh = dh - 0x01
	SZO = cond(dh)
	dl = dl - 0x73 - C
	SCZO = cond(dl)
	dh = dh - 0x01
	SZO = cond(dh)
	edx = edx | ebx
	SZO = cond(edx)
	C = false
	ch = ch + al
	SCZO = cond(ch)
	ch = 0xAD
	edx = edx ^ edi
	SZO = cond(edx)
	C = false
	dl = 0x05
	dh = dh + 0x47 + C
	SCZO = cond(dh)
	dh = dh - 0x17 - C
	SCZO = cond(dh)
	call fn00402283 (retsize: 4;)
	al = al + 0xA9
	SCZO = cond(al)
	es_eax = Mem0[edx + 0x00000000:segptr32]
	eax = Mem0[0x8FD67B91:word32]
	goto l00402620_thunk_fn00402625
	// succ:  l00402620_thunk_fn00402625
l00402600:
l00402620_thunk_fn00402625:
	call fn00402625 (retsize: 0;)
	return
	// succ:  fn00402600_exit
fn00402600_exit:


// fn00402624
// Return size: 0
void fn00402624()
fn00402624_entry:
	// succ:  l00402624
l00402624:
	esp = fp
	Mem0[esp - 0x00000010:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	call fn00402B42 (retsize: 4;)
	// succ:  l00402624_thunk_fn00402625
l00402624_thunk_fn00402625:
	call fn00402625 (retsize: 0;)
	return
	// succ:  fn00402624_exit
fn00402624_exit:


// fn00402625
// Return size: 0
void fn00402625()
fn00402625_entry:
	// succ:  l00402625
l00402625:
	esp = fp
	esp = esp + 0x00000001
	SZO = cond(esp)
	al = al & 0xF0
	SZO = cond(al)
	C = false
	dl = dl + 0xAA
	SCZO = cond(dl)
	bh = bh + 0x01
	SZO = cond(bh)
	bh = bh - bl
	SCZO = cond(bh)
	cl = cl + al
	SCZO = cond(cl)
	cl = 0x2A
	call fn00402B42 (retsize: 4;)
l00402625:
	dl = dl + 0xAA
	SCZO = cond(dl)
	bh = bh + 0x01
	SZO = cond(bh)
	bh = bh - bl
	SCZO = cond(bh)
	cl = cl + al
	SCZO = cond(cl)
	cl = 0x2A
fn00402625_exit:


// fn0040265D
// Return size: 0
void fn0040265D()
fn0040265D_entry:
	// succ:  l0040265D
l0040265D:
	esp = fp
	bl = dh
	bh = cl
	edi = edi | edx
	SZO = cond(edi)
	C = false
	bh = bh - 0xE9 - C
	SCZO = cond(bh)
	bh = bh + 0xD7 + C
	SCZO = cond(bh)
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[eax + 0x00000010:word32]
	bh = bh ^ dh
	SZO = cond(bh)
	C = false
	bh = bh - bl
	SCZO = cond(bh)
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	goto l00402672_thunk_fn00402151
	// succ:  l00402672_thunk_fn00402151
l0040265D:
l00402672_thunk_fn00402151:
	call fn00402151 (retsize: 0;)
	return
	// succ:  fn0040265D_exit
fn0040265D_exit:


// fn0040267F
// Return size: 0
void fn0040267F()
fn0040267F_entry:
	// succ:  l0040267F
l0040267F:
	esp = fp
	Mem0[esp:word32] = edi
	branch Test(OV,O) l00402684
	// succ:  l00402684
l00402684:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = dh
	dh = 0x10
	dh = dh + 0x01
	SZO = cond(dh)
	bh = bh + 0x9B
	SCZO = cond(bh)
	cl = cl + 0x91
	SCZO = cond(cl)
	call fn004029AF (retsize: 4;)
	__outdw(edx, eax)
	esi = esi + 0x00000004
	ebp = ebp | Mem0[(ebx + 0x1A2762B6) + eax * 0x00000004:word32]
	SZO = cond(ebp)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	ch = ch + 0x01
	SZO = cond(ch)
	edi = esi
	bh = 0x73
	dl = dl + bh
	SCZO = cond(dl)
	ch = ~ch
	edx = edx - ebx
	SCZO = cond(edx)
	call fn004028F2 (retsize: 4;)
	v18 = eax
	eax = esp
	esp = v18
	es = Mem0[esp:selector]
	esp = esp + 0x00000002
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = Mem0[edx:word32]
	// succ:  l004026B5_thunk_fn004026B7
l004026B5_thunk_fn004026B7:
	call fn004026B7 (retsize: 0;)
	return
	// succ:  fn0040267F_exit
fn0040267F_exit:


// fn004026B6
// Return size: 0
void fn004026B6()
fn004026B6_entry:
	// succ:  l004026B6
l004026B6:
	esp = fp
	dh = dh + al
	SCZO = cond(dh)
	goto l004026B6_thunk_fn004026B7
	// succ:  l004026B6_thunk_fn004026B7
l004026B6:
l004026B6_thunk_fn004026B7:
	call fn004026B7 (retsize: 0;)
	return
	// succ:  fn004026B6_exit
fn004026B6_exit:


// fn004026B7
// Return size: 0
void fn004026B7()
fn004026B7_entry:
	// succ:  l004026B7
l004026B7:
	esp = fp
	__lock()
	ebx = ebx | edx
	SZO = cond(ebx)
	C = false
	bh = bh + 0x28
	SCZO = cond(bh)
	cl = ~cl
	ebx = ebx - esi
	SCZO = cond(ebx)
	bh = bh + 0x1A
	SCZO = cond(bh)
	call fn004022BF (retsize: 4;)
	ebp = 0x51C41227
	FPUF = cond(rArg0 - rArg0)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	goto l004026D0_thunk_fn004026D1
	// succ:  l004026D0_thunk_fn004026D1
l004026B7:
	ebx = ebx | edx
	SZO = cond(ebx)
	C = false
	bh = bh + 0x28
	SCZO = cond(bh)
	cl = ~cl
	ebx = ebx - esi
	SCZO = cond(ebx)
	bh = bh + 0x1A
	SCZO = cond(bh)
	call fn004022BF (retsize: 4;)
	ebp = 0x51C41227
	FPUF = cond(rArg0 - rArg0)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	goto l004026D0_thunk_fn004026D1
	// succ:  l004026D0_thunk_fn004026D1
l004026D0_thunk_fn004026D1:
	call fn004026D1 (retsize: 0;)
	return
	// succ:  fn004026B7_exit
l004026D0_thunk_fn004026D1:
	call fn004026D1 (retsize: 0;)
	return
	// succ:  fn004026B7_exit
fn004026B7_exit:


// fn004026D1
// Return size: 0
void fn004026D1()
fn004026D1_entry:
	goto l004026D1
	// succ:  l004026D1
l004023BE:
	esi = esi - 0x00000001
	SZO = cond(esi)
	esi = eax
	esi = esi - eax
	SCZO = cond(esi)
	bh = ch
	edx = eax + 0x000000F8
	bh = bh - 0xC7 - C
	SCZO = cond(bh)
	goto l00402882
	// succ:  l00402882
l004026D1:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = ecx
	ecx = v3
	// succ:  l004026DA
l004026DA:
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx - edi
	SCZO = cond(ebx)
	bh = bh + ah
	SCZO = cond(bh)
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	goto l004023BE
	// succ:  l004023BE
l00402882:
	esi = ecx
	bl = ~bl
	bl = ~bl
	bl = bl + dh
	SCZO = cond(bl)
	bl = bl + 0x22
	SCZO = cond(bl)
	bl = ~bl
	esi = esi + ebx
	SCZO = cond(esi)
	call fn00402ED1 (retsize: 4;)
	eax = __indw(0x51)
	v18 = eax
	eax = ecx
	ecx = v18
	ebx = 0xFD2ADF02
	// succ:  l00402899_thunk_fn0040289E
l00402899_thunk_fn0040289E:
	call fn0040289E (retsize: 0;)
	return
	// succ:  fn004026D1_exit
fn004026D1_exit:


// fn004026EA
// Return size: 0
void fn004026EA()
fn004026EA_entry:
	goto l004026EA
	// succ:  l004026EA
l00402317_thunk_fn00402B66:
	call fn00402B66 (retsize: 6;)
	return
	// succ:  fn004026EA_exit
l004026EA:
	Mem0[esp - 0x0000001C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = eax
	bh = al
	bl = bl - dh
	SCZO = cond(bl)
	bl = ~bl
	bl = 0x3C
	branch Test(OV,O) l0040272E
	// succ:  l004026FA l0040272E
l004026FA:
	v11 = cx
	cx = cx
	cx = v11
	cl = cl
	branch Test(NO,O) l0040272E
	// succ:  l00402701 l0040272E
l00402701:
	SZO = cond(eax & 0x7C3BC3C0)
	C = false
	D = false
	Mem0[esp - 0x00000024:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bl = bl + 0x82 + C
	SCZO = cond(bl)
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	bh = bh + 0xA4 + C
	SCZO = cond(bh)
	bh = bh ^ bl
	SZO = cond(bh)
	C = false
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	bl = bl - 0x01
	SZO = cond(bl)
	branch Test(ULE,CZ) l00402EEF
	// succ:  l0040271A_thunk_fn00402720 l0040271A_thunk_fn00402EEF
l0040271A_thunk_fn00402720:
	call fn00402720 (retsize: 0;)
	return
	// succ:  fn004026EA_exit
l0040271A_thunk_fn00402EEF:
	call fn00402EEF (retsize: 0;)
	return
	// succ:  fn004026EA_exit
l0040272E:
	edi = edi + 0x00000001
	SZO = cond(edi)
	ebx = ebx - esi
	SCZO = cond(ebx)
	bl = bl + 0x21 + C
	SCZO = cond(bl)
	esi = esi - edx
	SCZO = cond(esi)
	bl = bl ^ ah
	SZO = cond(bl)
	C = false
	bl = bl ^ al
	SZO = cond(bl)
	C = false
	call fn00402C34 (retsize: 4;)
	C = __das(al, &al)
	// succ:  l2BD7_E751
l2BD7_E751:
fn004026EA_exit:


// fn00402707
// Return size: 0
void fn00402707()
fn00402707_entry:
	// succ:  l00402707
l00402707:
	esp = fp
	Mem0[esp - 0x00000024:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bl = bl + 0x82 + C
	SCZO = cond(bl)
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	bh = bh + 0xA4 + C
	SCZO = cond(bh)
	bh = bh ^ bl
	SZO = cond(bh)
	C = false
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	bl = bl - 0x01
	SZO = cond(bl)
	branch Test(ULE,CZ) l0040271A_thunk_fn00402EEF
	// succ:  l0040271A_thunk_fn00402720 l0040271A_thunk_fn00402EEF
l0040271A_thunk_fn00402720:
	call fn00402720 (retsize: 0;)
	return
	// succ:  fn00402707_exit l0040271A_thunk_fn00402720
l0040271A_thunk_fn00402720:
	call fn00402720 (retsize: 0;)
	return
	// succ:  fn00402707_exit
l0040271A_thunk_fn00402EEF:
	call fn00402EEF (retsize: 0;)
	return
	// succ:  fn00402707_exit
fn00402707_exit:


// fn00402720
// Return size: 0
void fn00402720()
fn00402720_entry:
	// succ:  l00402720
l00402720:
fn00402720_exit:


// fn00402744
// Return size: 4
void fn00402744()
fn00402744_entry:
	// succ:  l00402744
l00402744:
	esp = fp
	ebx = ebx - esi
	SCZO = cond(ebx)
	bl = bl + 0xEF
	SCZO = cond(bl)
	SCZO = cond(ecx - 0x1DFBF5CF)
	branch Test(NE,Z) l00402873
	goto l00402755
	// succ:  l00402755 l00402873
l00402744:
l00402755:
	ecx = ecx - edx
	SCZO = cond(ecx)
	edx = edx - esi
	SCZO = cond(edx)
	ah = ah + 0xA9 + C
	SCZO = cond(ah)
	ecx = ecx ^ eax
	SZO = cond(ecx)
	C = false
	branch Test(EQ,Z) l0040275E_thunk_fn00402B03
	goto l00402764
	// succ:  l00402764 l0040275E_thunk_fn00402B03
l0040275E_thunk_fn00402B03:
	call fn00402B03 (retsize: 4;)
	return
	// succ:  fn00402744_exit
l00402764:
	v14 = bh
	bh = bh
	bh = v14
	branch Test(NE,Z) l00402766_thunk_fn00402B03
	goto l0040276C
	// succ:  l0040276C l00402766_thunk_fn00402B03
l00402766_thunk_fn00402B03:
	call fn00402B03 (retsize: 4;)
	return
	// succ:  fn00402744_exit
l0040276C:
	rArg0 = rArg0 - Mem0[0x806857C3:real64]
	// succ:  l0040276C_thunk_fn00402772
l0040276C_thunk_fn00402772:
	call fn00402772 (retsize: 0;)
	return
	// succ:  fn00402744_exit
l00402873:
	edx = edx | ecx
	SZO = cond(edx)
	C = false
	bh = bh + cl
	SCZO = cond(bh)
	cl = cl + 0x01
	SZO = cond(cl)
	// succ:  l00402879_thunk_fn004026B6
l00402879_thunk_fn004026B6:
	call fn004026B6 (retsize: 0;)
	return
	// succ:  fn00402744_exit
fn00402744_exit:


// fn00402771
// Return size: 0
void fn00402771()
fn00402771_entry:
	// succ:  l00402771
l00402771:
	esp = fp
	bh = bh + 0x04 + C
	SCZO = cond(bh)
	goto l00402771_thunk_fn00402772
	// succ:  l00402771_thunk_fn00402772
l00402771:
l00402771_thunk_fn00402772:
	call fn00402772 (retsize: 0;)
	return
	// succ:  fn00402771_exit
l00402785_thunk_fn004025A7:
	call fn004025A7 (retsize: 4;)
	return
	// succ:  fn00402771_exit
fn00402771_exit:


// fn00402772
// Return size: 0
void fn00402772()
fn00402772_entry:
	// succ:  l00402772
l00402772:
	esp = fp
	al = Mem0[ebx + (uint32) al:byte]
	al = al + 0x02
	SCZO = cond(al)
	rArg6 = rArg0 / rArg6
	al = Mem0[ebx + (uint32) al:byte]
	bl = cl
	bh = bh | dl
	SZO = cond(bh)
	C = false
	bh = bh + 0xC0 + C
	SCZO = cond(bh)
	bl = ~bl
	bh = bh - 0x01
	SZO = cond(bh)
	bh = 0x45
	// succ:  l00402785_thunk_fn004025A7 l00402785_thunk_fn004025A7
l00402772:
	bl = bl + dh
	SCZO = cond(bl)
	bh = ~bh
	bl = cl
	bh = bh | dl
	SZO = cond(bh)
	C = false
	bh = bh + 0xC0 + C
	SCZO = cond(bh)
	bl = ~bl
	bh = bh - 0x01
	SZO = cond(bh)
	bh = 0x45
l00402785_thunk_fn004025A7:
	call fn004025A7 (retsize: 0;)
	return
	// succ:  fn00402772_exit
fn00402772_exit:


// fn004027BC
// Return size: 6
void fn004027BC()
fn004027BC_entry:
	// succ:  l004027BC
l004027BC:
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	bl = bl - 0x72 - C
	SCZO = cond(bl)
	bl = al
	bl = bl - 0x9E - C
	SCZO = cond(bl)
	eax = eax - 0x00000001
	SZO = cond(eax)
	dh = ~dh
	al = al | bh
	SZO = cond(al)
	C = false
	bl = bl + 0x25
	SCZO = cond(bl)
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	eax = eax + 0x00000001
	SZO = cond(eax)
	branch Test(ULE,CZ) l00402D21
	// succ:  l004027D7 l00402D21
l004027D7:
	eax = eax
	branch Test(UGT,CZ) l00402D21
	// succ:  l004027DF l00402D21
l004027DF:
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	Z = __arpl(Mem0[edx + 0x24648DA3:word16], bx, &Mem0[edx + 0x24648DA3:word16])
	// succ:  l004027E0_thunk_fn004027E6
l004027E0_thunk_fn004027E6:
	call fn004027E6 (retsize: 6;)
	return
	// succ:  fn004027BC_exit
l00402CF6:
	dl = dl - 0x01
	SZO = cond(dl)
	esi = esi - 0x00000001
	SZO = cond(esi)
	dl = bh
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	edi = edi + esi
	SCZO = cond(edi)
	dl = dl | ah
	SZO = cond(dl)
	C = false
	edi = edi + eax
	SCZO = cond(edi)
	ecx = ecx << 0x0000000F
	SCZO = cond(ecx)
	dh = dh - 0x01
	SZO = cond(dh)
	al = al - 0x2F - C
	SCZO = cond(al)
	branch Test(SG,S) l00402D0B_thunk_fn00402DB0
	goto l00402D11
	// succ:  l00402D11 l00402D0B_thunk_fn00402DB0
l00402D0B_thunk_fn00402DB0:
	call fn00402DB0 (retsize: 0;)
	return
	// succ:  fn004027BC_exit
l00402D11:
l00402D21:
	bl = 0x5C
	ah = 0x7E
	edx = edx + 0x00000001
	SZO = cond(edx)
	ah = ah | bl
	SZO = cond(ah)
	C = false
	ecx = ecx >>u 0x0000000F
	SCZO = cond(ecx)
	bh = al
	dl = dl + dh
	SCZO = cond(dl)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edi = ecx
	bh = bh - 0xB8 - C
	SCZO = cond(bh)
	branch Test(OV,O) l00402CF6
	// succ:  l00402D37 l00402CF6
l00402D37:
	al = al
	branch Test(NO,O) l00402CF6
	// succ:  l00402D3B l00402CF6
l00402D3B:
	al = __inb(0x82)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x8963C99D
	// succ:  l00402D3D_thunk_fn00402D42
l00402D3D_thunk_fn00402D42:
	call fn00402D42 (retsize: 0;)
	return
	// succ:  fn004027BC_exit
fn004027BC_exit:


// fn004027E3
// Return size: 0
void fn004027E3()
fn004027E3_entry:
	// succ:  l004027E3
l004027E3:
	esp = fp
	esp = esp + 0x00000004
	// succ:  l004027E3_thunk_fn004027E6
l004027E3_thunk_fn004027E6:
	call fn004027E6 (retsize: 6;)
	return
	// succ:  fn004027E3_exit
fn004027E3_exit:


// fn004027E6
// Return size: 6
void fn004027E6()
fn004027E6_entry:
	goto l004027E6
	// succ:  l004027E6
l00402348:
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	// succ:  l00402348_thunk_fn0040234A
l00402348_thunk_fn0040234A:
	call fn0040234A (retsize: 0;)
	return
	// succ:  fn004027E6_exit
l004027E6:
	esp = fp
	al = al + 0xFE
	SCZO = cond(al)
	return
	// succ:  fn004027E6_exit
l004027E6:
	dl = dl - 0x01
	SZO = cond(dl)
	dh = dh + 0x01
	SZO = cond(dh)
	bl = 0x84
	edx = edx + eax
	SCZO = cond(edx)
	dh = dh + 0x01
	SZO = cond(dh)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	ebx = ebx - ecx
	SCZO = cond(ebx)
	esi = edi
	goto l00402348
	// succ:  l00402348
fn004027E6_exit:


// fn0040281C
// Return size: 0
void fn0040281C()
fn0040281C_entry:
	// succ:  l0040281C
l0040281C:
	esp = fp
	esp = esp + 0x00000004
	ebx = ebx + esi
	SCZO = cond(ebx)
	ecx = ecx | edx
	SZO = cond(ecx)
	C = false
	ebx = esi
	ecx = ecx - edi
	SCZO = cond(ecx)
	ch = ch | dl
	SZO = cond(ch)
	C = false
	bl = bl + 0x01
	SZO = cond(bl)
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	bh = bh + 0x01
	SZO = cond(bh)
	branch Test(ULT,C) l00402830_thunk_fn00402AE9
	goto l00402836
	// succ:  l00402836 l00402830_thunk_fn00402AE9
l00402830_thunk_fn00402AE9:
	call fn00402AE9 (retsize: 0;)
	return
	// succ:  fn0040281C_exit
l00402836:
	branch Test(GT,SZO) l00402838
	// succ:  l00402838
l00402838:
	edx = edx
	branch Test(UGE,C) l0040283A_thunk_fn00402AE9
	goto l00402840
	// succ:  l00402840 l0040283A_thunk_fn00402AE9
l0040283A_thunk_fn00402AE9:
	call fn00402AE9 (retsize: 0;)
	return
	// succ:  fn0040281C_exit
l00402840:
	__outb(dx, al)
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	eax = eax - 0x00000001
	SZO = cond(eax)
	al = al ^ 0x67
	SZO = cond(al)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	dl = 0x66
	// succ:  l00402846_thunk_fn00402848
l00402846_thunk_fn00402848:
	call fn00402848 (retsize: 0;)
	return
	// succ:  fn0040281C_exit
fn0040281C_exit:


// fn00402848
// Return size: 0
void fn00402848()
fn00402848_entry:
	// succ:  l00402848
l00402848:
	dl = dl + 0x39 + C
	SCZO = cond(dl)
	dh = dh - 0x01
	SZO = cond(dh)
	dh = 0x99
	dl = dl + 0x12 + C
	SCZO = cond(dl)
	dl = al
	bl = bl ^ 0x4E
	SZO = cond(bl)
	C = false
	branch Test(ULE,CZ) l00402857_thunk_fn0040207F
	goto l0040285D
	// succ:  l0040285D l00402857_thunk_fn0040207F
l00402857_thunk_fn0040207F:
	call fn0040207F (retsize: 0;)
	return
	// succ:  fn00402848_exit
l0040285D:
	v11 = eax
	eax = eax
	eax = v11
fn00402848_exit:


// fn0040286D
// Return size: 0
void fn0040286D()
fn0040286D_entry:
	// succ:  l0040286D
l0040286D:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = eax
	eax = v3
fn0040286D_exit:


// fn0040289E
// Return size: 0
void fn0040289E()
fn0040289E_entry:
	// succ:  l0040289E
l0040289E:
	esp = fp
	bl = bl + 0x33
	SCZO = cond(bl)
	bh = bh + 0x01
	SZO = cond(bh)
	bl = bl - 0xBD - C
	SCZO = cond(bl)
	bh = 0x8D
	eax = eax + Mem0[eax + 0x0000003C:word32]
	SCZO = cond(eax)
	bl = ah
	esi = edi
	bl = bl + bh
	SCZO = cond(bl)
	call fn004026D1 (retsize: 4;)
	goto l004028B1_thunk_fn004028B6
	// succ:  l004028B1_thunk_fn004028B6
l0040289E:
	bl = bl + 0x33
	SCZO = cond(bl)
	bh = bh + 0x01
	SZO = cond(bh)
	bl = bl - 0xBD - C
	SCZO = cond(bl)
	bh = 0x8D
	eax = eax + Mem0[eax + 0x0000003C:word32]
	SCZO = cond(eax)
	bl = ah
	esi = edi
	bl = bl + bh
	SCZO = cond(bl)
l004028B1_thunk_fn004028B6:
	call fn004028B6 (retsize: 0;)
	return
	// succ:  fn0040289E_exit
fn0040289E_exit:


// fn004028B6
// Return size: 0
void fn004028B6()
fn004028B6_entry:
	// succ:  l004028B6
l004028B6:
	esp = fp
	eax = eax - Mem0[(ebp + 0x8FCDD971) + edx:word32]
	SCZO = cond(eax)
	goto l004028B6_thunk_fn004028BD
	// succ:  l004028B6_thunk_fn004028BD
l004028B6:
	eax = eax - Mem0[(ebp + 0x8FCDD971) + edx:word32]
	SCZO = cond(eax)
	goto l004028B6_thunk_fn004028BD
	// succ:  l004028B6_thunk_fn004028BD
l004028B6_thunk_fn004028BD:
	call fn004028BD (retsize: 0;)
	return
	// succ:  fn004028B6_exit
l004028B6_thunk_fn004028BD:
	call fn004028BD (retsize: 0;)
	return
	// succ:  fn004028B6_exit
fn004028B6_exit:


// fn004028BC
// Return size: 0
void fn004028BC()
fn004028BC_entry:
	// succ:  l004028BC
l004028BC:
	esp = fp
	Mem0[esp - 0x0000001C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l004028BC_thunk_fn004028BD
l004028BC_thunk_fn004028BD:
	call fn004028BD (retsize: 0;)
	return
	// succ:  fn004028BC_exit
fn004028BC_exit:


// fn004028BD
// Return size: 0
void fn004028BD()
fn004028BD_entry:
	// succ:  l004028BD
l004028BD:
	esp = fp
	esp = esp + 0x00000001
	SZO = cond(esp)
	al = al & 0xE4
	SZO = cond(al)
	C = false
	bl = bl ^ ah
	SZO = cond(bl)
	C = false
	ecx = eax
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	Mem0[edi:byte] = dh
	ebx = ebx + esi
	SCZO = cond(ebx)
	ebx = edi
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	call fn00402A4B (retsize: 4;)
	cl = 0x3F
	eax = eax - Mem0[ecx + 0xFAF0DD1C:word32]
	SCZO = cond(eax)
	edi = edi ^ eax
	SZO = cond(edi)
	C = false
	eax = eax + edx
	SCZO = cond(eax)
	esi = esi ^ edi
	SZO = cond(esi)
	C = false
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	edi = ecx
	edi = edi | edx
	SZO = cond(edi)
	C = false
	goto l004028E5_thunk_fn00402D8C
	// succ:  l004028E5_thunk_fn00402D8C
l004028BD:
	bl = bl ^ ah
	SZO = cond(bl)
	C = false
	ecx = eax
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	Mem0[edi:byte] = dh
	ebx = ebx + esi
	SCZO = cond(ebx)
	ebx = edi
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	call fn00402A4B (retsize: 4;)
	cl = 0x3F
	eax = eax - Mem0[ecx + 0xFAF0DD1C:word32]
	SCZO = cond(eax)
	edi = edi ^ eax
	SZO = cond(edi)
	C = false
	eax = eax + edx
	SCZO = cond(eax)
	esi = esi ^ edi
	SZO = cond(esi)
	C = false
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	edi = ecx
	edi = edi | edx
	SZO = cond(edi)
	C = false
	// succ:  l004028E0_thunk_fn00402D8C
l004028E0_thunk_fn00402D8C:
	call fn00402D8C (retsize: 0;)
	return
	// succ:  fn004028BD_exit
l004028E5_thunk_fn00402D8C:
	call fn00402D8C (retsize: 0;)
	return
	// succ:  fn004028BD_exit
fn004028BD_exit:


// fn004028F2
// Return size: 0
void fn004028F2()
fn004028F2_entry:
	// succ:  l004028F2
l004028F2:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = ebx
	ebx = v3
	// succ:  l004028FB
l004028FB:
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ch = ~ch
	edx = edx ^ ecx
	SZO = cond(edx)
	C = false
	cl = cl - dh
	SCZO = cond(cl)
	ecx = ecx | edi
	SZO = cond(ecx)
	C = false
	branch Test(PE,P) l00402F2B
	// succ:  l0040290A l00402F2B
l0040290A:
	v15 = bh
	bh = bh
	bh = v15
	// succ:  l00402911
l00402911:
	branch Test(PO,P) l00402F2B
	// succ:  l00402917 l00402F2B
l00402917:
	ebp = Mem0[edi - 0x0000003C + ebp * 0x00000002:word32] *s 0x00000055
	SCZO = cond(ebp)
	// succ:  l00402917_thunk_fn0040291C
l00402917_thunk_fn0040291C:
	call fn0040291C (retsize: 0;)
	return
	// succ:  fn004028F2_exit
l00402F2B:
	ch = ch + 0x21
	SCZO = cond(ch)
	goto l00402F2C
	// succ:  l00402F2C
l00402F3B_thunk_fn004023A7:
	call fn004023A7 (retsize: 0;)
	return
	// succ:  fn004028F2_exit
l00402F3B_thunk_fn00402F41:
	call fn00402F41 (retsize: 0;)
	return
	// succ:  fn004028F2_exit l00402F3B_thunk_fn00402F41
l00402F3B_thunk_fn00402F41:
	call fn00402F41 (retsize: 0;)
	return
	// succ:  fn004028F2_exit
fn004028F2_exit:


// fn0040291C
// Return size: 0
void fn0040291C()
fn0040291C_entry:
	// succ:  l0040291C
l0040291C:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = eax
	eax = v3
	branch Test(SG,S) l00402921
	// succ:  l00402921
l00402921:
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[esp - 0x00000008:word32] = eax
	esi = esi + 0x00000001
	SZO = cond(esi)
	ebx = ebx + ecx
	SCZO = cond(ebx)
	call fn00402F68 (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0000002E
	Mem0[edi:byte] = al
	edi = edi + 0x00000001
fn0040291C_exit:


// fn0040294B
// Return size: 0
void fn0040294B()
fn0040294B_entry:
	// succ:  l0040294B
l0040294B:
	eax = eax + 0x00000001
	SZO = cond(eax)
	bh = bh - 0x01
	SZO = cond(bh)
	eax = eax - ecx
	SCZO = cond(eax)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi | ecx
	SZO = cond(edi)
	C = false
	bh = bh ^ cl
	SZO = cond(bh)
	C = false
	bh = bh | dh
	SZO = cond(bh)
	C = false
	dl = ~dl
	dh = dh + bh
	SCZO = cond(dh)
	branch Test(OV,O) l0040295D_thunk_fn00402AA4
	goto l00402963
	// succ:  l00402963 l0040295D_thunk_fn00402AA4
l0040295D_thunk_fn00402AA4:
	call fn00402AA4 (retsize: 0;)
	return
	// succ:  fn0040294B_exit
l00402963:
fn0040294B_exit:


// fn00402970
// Return size: 0
void fn00402970()
fn00402970_entry:
	goto l00402970
	// succ:  l00402970
l00402790:
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	bh = bh - 0x1E - C
	SCZO = cond(bh)
	esi = esi - 0x00000001
	SZO = cond(esi)
	bl = 0xC1
	bh = bh ^ al
	SZO = cond(bh)
	C = false
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	bh = bh - 0xBF - C
	SCZO = cond(bh)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	bl = bl + 0x0F
	SCZO = cond(bl)
	branch Test(LT,SO) TMP!
l00402970:
	esp = fp
	esi = esi + ecx
	SCZO = cond(esi)
	edi = edi + esi
	SCZO = cond(edi)
	bl = ~bl
	bh = bh - 0x01
	SZO = cond(bh)
	bh = bh + 0xAC + C
	SCZO = cond(bh)
	eax = eax + 0x00000078
	bl = 0x1E
	bl = bl | ch
	SZO = cond(bl)
	C = false
	branch Test(LE,SZO) l00402790
	goto l00402988
	// succ:  l00402988 l00402790
l00402970:
l00402988:
	ax = eax
	branch Test(GT,SZO) l0040298D
	// succ:  l0040298D
l0040298D:
	branch Test(GT,SZO) l00402790
	// succ:  l00402993 l00402790
l00402993:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax & 0x0AE73ABD
	SZO = cond(eax)
	C = false
	// succ:  l00402994_thunk_fn00402998
l00402994_thunk_fn00402998:
	call fn00402998 (retsize: 0;)
	return
	// succ:  fn00402970_exit
fn00402970_exit:


// fn00402998
// Return size: 0
void fn00402998()
fn00402998_entry:
	// succ:  l00402998
l00402998:
	esp = fp
	dl = dl | ah
	SZO = cond(dl)
	C = false
	cl = cl + 0xC8 + C
	SCZO = cond(cl)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ecx = ebx
	bl = bl + bh
	SCZO = cond(bl)
	call fn0040286D (retsize: 4;)
	SCZDOP = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	v16 = -Mem0[eax + 0x3C895059:byte]
	Mem0[eax + 0x3C895059:byte] = v16
	SCZO = cond(v16)
	C = v16 == 0x00
	goto l004029AB_thunk_fn004029B1
	// succ:  l004029AB_thunk_fn004029B1
l00402998:
	ax = __aam(al)
	v19 = (eax & 0x00000001 << 0x01) != 0x00000000
	eax = __ror(eax, 0x01)
	C = v19
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ecx = ebx
	bl = bl + bh
	SCZO = cond(bl)
	call fn0040286D (retsize: 4;)
	SCZDOP = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	v20 = -Mem0[eax + 0x3C895059:byte]
	Mem0[eax + 0x3C895059:byte] = v20
	SCZO = cond(v20)
	C = v20 == 0x00
	goto l004029AB_thunk_fn004029B1
	// succ:  l004029AB_thunk_fn004029B1
l004029AB_thunk_fn004029B1:
	call fn004029B1 (retsize: 0;)
	return
	// succ:  fn00402998_exit
l004029AB_thunk_fn004029B1:
	call fn004029B1 (retsize: 0;)
	return
	// succ:  fn00402998_exit
fn00402998_exit:


// fn004029AF
// Return size: 0
void fn004029AF()
fn004029AF_entry:
	// succ:  l004029AF
l004029AF:
	esp = fp
	Mem0[esp:word32] = edi
	goto l004029B1
	// succ:  l004029B1
fn004029AF_exit:


// fn004029B1
// Return size: 0
void fn004029B1()
fn004029B1_entry:
	// succ:  l004029B1
l004029B1:
	esp = fp
	al = al & 0x87
	SZO = cond(al)
	C = false
	bl = bl << 0x5F
	SCZO = cond(bl)
	dh = dh + bh
	SCZO = cond(dh)
	bl = bl - ah
	SCZO = cond(bl)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	al = al | ah
	SZO = cond(al)
	C = false
	call fn004029C2 (retsize: 4;)
	// succ:  l004029BD_thunk_fn004029C2
l004029BD_thunk_fn004029C2:
	call fn004029C2 (retsize: 0;)
	return
	// succ:  fn004029B1_exit
fn004029B1_exit:


// fn004029C2
// Return size: 0
void fn004029C2()
fn004029C2_entry:
	// succ:  l004029C2
l004029C2:
	esp = fp
	ah = ah + dh
	SCZO = cond(ah)
	call fn00402F06 (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	Mem0[esi + 0xB3914216:byte] = Test(OV,O)
	// succ:  l004029C9_thunk_fn004029CF
l004029C9_thunk_fn004029CF:
	call fn004029CF (retsize: 0;)
	return
	// succ:  fn004029C2_exit
fn004029C2_exit:


// fn004029CF
// Return size: 0
void fn004029CF()
fn004029CF_entry:
	// succ:  l004029CF
l004029CF:
	esp = fp
	bl = 0xC5
	bl = bl ^ cl
	SZO = cond(bl)
	C = false
	ah = 0x91
	edx = edx | eax
	SZO = cond(edx)
	C = false
	dh = 0x52
	dl = dl + 0x01
	SZO = cond(dl)
	branch Test(OV,O) l004029DB_thunk_fn00402514
	goto l004029E1
	// succ:  l004029E1 l004029DB_thunk_fn00402514
l004029CF:
	ds_esi = Mem0[edx + 0x00000000:segptr32]
l004029DB_thunk_fn00402514:
	call fn00402514 (retsize: 0;)
	return
	// succ:  fn004029CF_exit
l004029E1:
	edx = edx
	branch Test(NO,O) l004029E3_thunk_fn00402514
	goto l004029E9
	// succ:  l004029E9 l004029E3_thunk_fn00402514
l004029E3_thunk_fn00402514:
	call fn00402514 (retsize: 0;)
	return
	// succ:  fn004029CF_exit
l004029E9:
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	Mem0[eax:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[edx:real32] = rArg0
	ah = ah - Mem0[eax + 0xF2241C87:byte] - C
	SCZO = cond(ah)
fn004029CF_exit:


// fn004029F0
// Return size: 0
void fn004029F0()
fn004029F0_entry:
	// succ:  l004029F0
l004029F0:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = ebx
	ebx = v3
fn004029F0_exit:


// fn004029F4
// Return size: 0
void fn004029F4()
fn004029F4_entry:
	// succ:  l004029F4
l004029F4:
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	cl = cl - 0x01
	SZO = cond(cl)
	dl = dl - bh
	SCZO = cond(dl)
	cl = cl | bh
	SZO = cond(cl)
	C = false
	ecx = ecx ^ eax
	SZO = cond(ecx)
	C = false
	branch Test(ULE,CZ) l004029FD_thunk_fn00402244
	goto l00402A03
	// succ:  l00402A03 l004029FD_thunk_fn00402244
l004029FD_thunk_fn00402244:
	call fn00402244 (retsize: 0;)
	return
	// succ:  fn004029F4_exit
l00402A03:
fn004029F4_exit:


// fn00402A0F
// Return size: 0
void fn00402A0F()
fn00402A0F_entry:
	// succ:  l00402A0F
l00402A0F:
	esp = fp
	al = al - 0x4E - C
	SCZO = cond(al)
	ah = ah + dl
	SCZO = cond(ah)
	edx = edx + edi
	SCZO = cond(edx)
	dl = dl - 0x01
	SZO = cond(dl)
	ecx = eax
	al = al + 0x24
	SCZO = cond(al)
	ecx = ecx - edi
	SCZO = cond(ecx)
	ah = ah | dh
	SZO = cond(ah)
	C = false
	call fn00402B8E (retsize: 4;)
	SCZO = cond(esp - ebp)
	SZO = cond(al & ah)
	C = false
	goto l00402A28_thunk_fn00402A2A
	// succ:  l00402A28_thunk_fn00402A2A
l00402A0F:
l00402A28_thunk_fn00402A2A:
	call fn00402A2A (retsize: 0;)
	return
	// succ:  fn00402A0F_exit
fn00402A0F_exit:


// fn00402A2A
// Return size: 0
void fn00402A2A()
fn00402A2A_entry:
	// succ:  l00402A2A
l00402A2A:
	esp = fp
	esp = esp + 0x00000004
	ch = ch - dh
	SCZO = cond(ch)
	dh = dh + 0x8D
	SCZO = cond(dh)
	dl = ch
	ecx = ecx | eax
	SZO = cond(ecx)
	C = false
	dl = dl + al
	SCZO = cond(dl)
	edx = edx - 0x00000001
	SZO = cond(edx)
	dl = 0x73
	cl = cl ^ dl
	SZO = cond(cl)
	C = false
	edx = edx + edi
	SCZO = cond(edx)
	// succ:  l00402A3E_thunk_fn00402848
l00402A3E_thunk_fn00402848:
	call fn00402848 (retsize: 0;)
	return
	// succ:  fn00402A2A_exit
fn00402A2A_exit:


// fn00402A4B
// Return size: 0
void fn00402A4B()
fn00402A4B_entry:
	// succ:  l00402A4B
l00402A4B:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = ecx
	ecx = v3
	branch Test(NS,S) l00402A50
	// succ:  l00402A50
l00402A50:
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = eax
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	ch = bl
	ebx = ebx - edi
	SCZO = cond(ebx)
	ecx = edx
	bl = bl + al
	SCZO = cond(bl)
	call fn00402D58 (retsize: 4;)
	esp = esp + 0xFFFFEBD0
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
fn00402A4B_exit:


// fn00402A67
// Return size: 0
void fn00402A67()
fn00402A67_entry:
	// succ:  l00402A67
l00402A67:
	esp = fp
	Mem0[esp:word32] = edi
fn00402A67_exit:


// fn00402A83
// Return size: 0
void fn00402A83()
fn00402A83_entry:
	// succ:  l00402A83
l00402A83:
	cl = cl + 0x01
	SZO = cond(cl)
	dh = dh - 0xD3 - C
	SCZO = cond(dh)
	edx = ecx
	dh = dh | cl
	SZO = cond(dh)
	C = false
	dl = 0x54
	ch = ch - 0x51 - C
	SCZO = cond(ch)
	ch = ch + dh
	SCZO = cond(ch)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	edx = edx + ecx
	SCZO = cond(edx)
	call fn00402A2A (retsize: 4;)
	branch Test(LE,SZO) l00402A9C_thunk_fn00402B15
	goto l00402A9E
	// succ:  l00402A9E l00402A9C_thunk_fn00402B15
l00402A9C_thunk_fn00402B15:
	call fn00402B15 (retsize: 0;)
	return
	// succ:  fn00402A83_exit
l00402A9E:
	v14 = ~Mem0[ebx + 0x0DAD5026:byte]
	Mem0[ebx + 0x0DAD5026:byte] = v14
	// succ:  l00402A9E_thunk_fn00402AA4
l00402A9E_thunk_fn00402AA4:
	call fn00402AA4 (retsize: 0;)
	return
	// succ:  fn00402A83_exit
fn00402A83_exit:


// fn00402AA4
// Return size: 0
void fn00402AA4()
fn00402AA4_entry:
	// succ:  l00402AA4
l00402AA4:
	esp = fp
	dh = 0x21
	dl = ~dl
	dl = dl + 0xBB + C
	SCZO = cond(dl)
	bl = bl + 0x01 + C
	SCZO = cond(bl)
	bh = bh - 0x59 - C
	SCZO = cond(bh)
	bl = bl + 0x01
	SZO = cond(bl)
	branch Test(LT,SO) l00402AB3_thunk_fn004023FE
l00402AA4:
	dh = 0x21
	dl = ~dl
	dl = dl + 0xBB + C
	SCZO = cond(dl)
	bl = bl + 0x01 + C
	SCZO = cond(bl)
	bh = bh - 0x59 - C
	SCZO = cond(bh)
	bl = bl + 0x01
	SZO = cond(bl)
	branch Test(LT,SO) l004023FE
	goto l00402AB3_thunk_fn00402AB9
	// succ:  l00402AB3_thunk_fn00402AB9 l00402AB3_thunk_fn004023FE
l00402AB3_thunk_fn004023FE:
	call fn004023FE (retsize: 0;)
	return
	// succ:  fn00402AA4_exit
l00402AB3_thunk_fn004023FE:
	call fn004023FE (retsize: 0;)
	return
	// succ:  fn00402AA4_exit
l00402AB3_thunk_fn00402AB9:
	call fn00402AB9 (retsize: 0;)
	return
	// succ:  fn00402AA4_exit l00402AB3_thunk_fn00402AB9
l00402AB3_thunk_fn00402AB9:
	call fn00402AB9 (retsize: 0;)
	return
	// succ:  fn00402AA4_exit
l00402AB3_thunk_fn00402AB9:
	call fn00402AB9 (retsize: 0;)
	return
	// succ:  fn00402AA4_exit
fn00402AA4_exit:


// fn00402AB9
// Return size: 0
void fn00402AB9()
fn00402AB9_entry:
	// succ:  l00402AB9
l00402AB9:
	// succ:  l00402ABE
l00402ABE:
	branch Test(GE,SO) l004023FE
	goto l00402AC4
	// succ:  l00402AC4 l00402ABE_thunk_fn004023FE
l00402ABE_thunk_fn004023FE:
	call fn004023FE (retsize: 0;)
	return
	// succ:  fn00402AB9_exit
l00402AC4:
fn00402AB9_exit:


// fn00402ACB
// Return size: 0
void fn00402ACB()
fn00402ACB_entry:
	// succ:  l00402ACB
l00402ACB:
	esp = fp
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	dh = dh - 0x01
	SZO = cond(dh)
	cl = cl + 0x01
	SZO = cond(cl)
	dl = ch
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	dh = dh - 0x01
	SZO = cond(dh)
	edx = esi
	ecx = ecx | eax
	SZO = cond(ecx)
	C = false
	dl = dl - 0xAD - C
	SCZO = cond(dl)
	call fn00402260 (retsize: 4;)
l00402ACB:
fn00402ACB_exit:


// fn00402AE9
// Return size: 0
void fn00402AE9()
fn00402AE9_entry:
	// succ:  l00402AE9
l00402AE9:
	esp = fp
	ch = al
	cl = cl ^ dl
	SZO = cond(cl)
	C = false
	edi = edi + 0x00000001
	SZO = cond(edi)
	cl = cl - 0xFD - C
	SCZO = cond(cl)
	ebx = ebx | eax
	SZO = cond(ebx)
	C = false
	bl = bl + 0x01
	SZO = cond(bl)
	ecx = edi
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	goto l00402AF8_thunk_fn00402CD5
	// succ:  l00402AF8_thunk_fn00402CD5
l00402AE9:
l00402AF8_thunk_fn00402CD5:
	call fn00402CD5 (retsize: 0;)
	return
	// succ:  fn00402AE9_exit
fn00402AE9_exit:


// fn00402B03
// Return size: 4
void fn00402B03()
fn00402B03_entry:
	// succ:  l00402B03
l00402B03:
	esp = fp
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	al = al - bh
	SCZO = cond(al)
	dh = dh | bl
	SZO = cond(dh)
	C = false
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	ch = ch - 0x01
	SZO = cond(ch)
	bl = 0xBE
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	ebx = edi
	branch Test(EQ,Z) l00402B12_thunk_fn00402E5F
l00402B03:
l00402B12_thunk_fn00402E5F:
	call fn00402E5F (retsize: 4;)
	return
	// succ:  fn00402B03_exit
l00402B18:
	v16 = edx
	edx = edx
	edx = v16
	branch Test(NE,Z) l00402B1A_thunk_fn00402E5F
fn00402B03_exit:


// fn00402B15
// Return size: 0
void fn00402B15()
fn00402B15_entry:
	// succ:  l00402B15
l00402B15:
	esp = fp
	eax = eax + Mem0[eax:word32]
	SCZO = cond(eax)
	v7 = Mem0[edi + 0x3F850FD2:byte] + al
	Mem0[edi + 0x3F850FD2:byte] = v7
	SCZO = cond(v7)
	// succ:  l00402B17_thunk_fn00402B1D
l00402B17_thunk_fn00402B1D:
	call fn00402B1D (retsize: 0;)
	return
	// succ:  fn00402B15_exit
fn00402B15_exit:


// fn00402B1D
// Return size: 0
void fn00402B1D()
fn00402B1D_entry:
	goto l00402B1D
	// succ:  l00402B1D
l00402B1A_thunk_fn00402E5F:
	call fn00402E5F (retsize: 4;)
	return
	// succ:  fn00402B1D_exit
l00402B1D:
	esp = fp
	eax = eax + Mem0[eax:word32]
	SCZO = cond(eax)
	dl = dl + bh
	SCZO = cond(dl)
	goto l00402B1F_thunk_fn00402B21
	// succ:  l00402B1F_thunk_fn00402B21
l00402B1D:
	// succ:  l00402B20 l00402B1A_thunk_fn00402E5F
l00402B1F_thunk_fn00402B21:
	call fn00402B21 (retsize: 0;)
	return
	// succ:  fn00402B1D_exit
l00402B20:
	__cli()
	// succ:  l00402B20_thunk_fn00402B21
l00402B20_thunk_fn00402B21:
	call fn00402B21 (retsize: 0;)
	return
	// succ:  fn00402B1D_exit
fn00402B1D_exit:


// fn00402B21
// Return size: 0
void fn00402B21()
fn00402B21_entry:
	// succ:  l00402B21
l00402B21:
	esp = fp
	SZO = cond(Mem0[ecx + 0x0000003B:byte] & al)
	C = false
l00402B21:
	SZO = cond(Mem0[ecx + 0x0000003B:byte] & al)
	C = false
fn00402B21_exit:


// fn00402B27
// Return size: 0
void fn00402B27()
fn00402B27_entry:
	goto l00402B27
	// succ:  l00402B27
l004021CD:
	ch = ch | ah
	SZO = cond(ch)
	C = false
	dl = dl + 0x3E
	SCZO = cond(dl)
	ecx = eax
	dl = dl | bh
	SZO = cond(dl)
	C = false
	edx = edx | eax
	SZO = cond(edx)
	C = false
	dh = dh - 0xFC - C
	SCZO = cond(dh)
	call fn004029F0 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	// succ:  l004021E1
l004021E1:
	branch ecx == 0x00000000 l004021E3
	// succ:  l004021E1_1 l004021E3
l004021E1_1:
	__outb(edx, al)
	esi = esi + 0x00000001
	ecx = ecx - 0x00000001
	goto l004021E1
	// succ:  l004021E1
l004021E3:
	__outb(edx, al)
	esi = esi + 0x00000001
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	v19 = Mem0[ebp + 0x0B042464:word32]
	Mem0[ebp + 0x0B042464:word32] = ecx
	ecx = v19
	dh = dh << 0x01
	SCZO = cond(dh)
l00402B27:
	esp = fp
	ch = ch ^ bl
	SZO = cond(ch)
	C = false
	dl = dl + cl
	SCZO = cond(dl)
	bl = bl + 0x80
	SCZO = cond(bl)
	dh = dh + bl
	SCZO = cond(dh)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	dh = dh - ch
	SCZO = cond(dh)
	dh = dh + bh
	SCZO = cond(dh)
	dl = dl + 0x01
	SZO = cond(dl)
	goto l004021CD
	// succ:  l004021CD
l00402B27:
fn00402B27_exit:


// fn00402B42
// Return size: 0
void fn00402B42()
fn00402B42_entry:
	// succ:  l00402B42
l00402B42:
	esp = fp
	esp = esp + 0x00000004
	ebx = ebx + edi
	SCZO = cond(ebx)
	dl = dl ^ ah
	SZO = cond(dl)
	C = false
	bl = bl + 0x01
	SZO = cond(bl)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000040
	bh = ~bh
	branch Test(ULE,CZ) l00402CA6
	// succ:  l00402B56 l00402CA6
l00402B56:
	bh = bh
l00402CA6:
	bl = bl + al
	SCZO = cond(bl)
	edi = edi - 0x00000001
	SZO = cond(edi)
	bl = bl - 0x26 - C
	SCZO = cond(bl)
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	bl = bl - cl
	SCZO = cond(bl)
	bl = bl + 0x79 + C
	SCZO = cond(bl)
	// succ:  l00402CB3_thunk_fn0040241A
l00402CB3_thunk_fn0040241A:
	call fn0040241A (retsize: 0;)
	return
	// succ:  fn00402B42_exit
fn00402B42_exit:


// fn00402B66
// Return size: 6
void fn00402B66()
fn00402B66_entry:
	goto l00402B66
	// succ:  l00402B66
l0040289A:
	bl = bl + bh
	SCZO = cond(bl)
	bh = bh - ch
	SCZO = cond(bh)
	call fn004026D1 (retsize: 4;)
	// succ:  l0040289C_thunk_fn0040289E l004028B1_thunk_fn004028B6
l0040289C_thunk_fn0040289E:
	call fn0040289E (retsize: 0;)
	return
	// succ:  fn00402B66_exit
l004028B1_thunk_fn004028B6:
	call fn004028B6 (retsize: 0;)
	return
	// succ:  fn00402B66_exit
l00402B66:
	esp = fp
	edi = edi - 0x00000001
	SZO = cond(edi)
	bl = bl - 0x01
	SZO = cond(bl)
	eax = ecx
	bl = 0xEC
	bh = bh + 0xD2
	SCZO = cond(bh)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bl = ~bl
	edi = edi + ebx
	SCZO = cond(edi)
	bl = bl - 0x17 - C
	SCZO = cond(bl)
	edi = edi + 0x00000001
	SZO = cond(edi)
	branch Test(OV,O) l0040289A
	// succ:  l00402B7F l0040289A
l00402B7F:
	branch Test(PE,P) l00402B81
	// succ:  l00402B81
l00402B81:
	bh = bh
	branch Test(NO,O) l0040289A
	// succ:  l00402B89 l0040289A
l00402B89:
	cl = cl - 0x11
	SCZO = cond(cl)
	SCZO = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00402B66_exit
fn00402B66_exit:


// fn00402B8E
// Return size: 0
void fn00402B8E()
fn00402B8E_entry:
	// succ:  l00402B8E
l00402B8E:
	esp = fp
	Mem0[esp - 0x0000000C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ah = ah - dh
	SCZO = cond(ah)
	cl = cl - bl
	SCZO = cond(cl)
	edx = edx - 0x00000001
	SZO = cond(edx)
	ecx = ecx ^ eax
	SZO = cond(ecx)
	C = false
	// succ:  l00402B97_thunk_fn00402B98
l00402B97_thunk_fn00402B98:
	call fn00402B98 (retsize: 0;)
	return
	// succ:  fn00402B8E_exit
l00402BA0_thunk_fn004021B0:
	call fn004021B0 (retsize: 0;)
	return
	// succ:  fn00402B8E_exit
l00402BA0_thunk_fn00402BA6:
	call fn00402BA6 (retsize: 0;)
	return
	// succ:  fn00402B8E_exit l00402BA0_thunk_fn00402BA6
l00402BA0_thunk_fn00402BA6:
	call fn00402BA6 (retsize: 0;)
	return
	// succ:  fn00402B8E_exit
fn00402B8E_exit:


// fn00402B98
// Return size: 0
void fn00402B98()
fn00402B98_entry:
	// succ:  l00402B98
l00402B98:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	esp = esp - 0xFFFFDA3A
	rArg0 = rArg0 + Mem0[eax + 0x8C0F4DD9:real64]
	dh = dh | dh
	SZO = cond(dh)
	C = false
	// succ:  l00402BA0_thunk_fn00402BA6 l00402BA0_thunk_fn004021B0
l00402B98:
	bl = bl ^ dl
	SZO = cond(bl)
	C = false
	bl = bl + ah
	SCZO = cond(bl)
	cl = cl - 0x4D - C
	SCZO = cond(cl)
	branch Test(LT,SO) l00402BA0_thunk_fn004021B0
fn00402B98_exit:


// fn00402BA6
// Return size: 0
void fn00402BA6()
fn00402BA6_entry:
	// succ:  l00402BA6
l00402BA6:
	esp = fp
	cx = ecx
	v5 = cx
	cx = cx
	cx = v5
	branch Test(GE,SO) l00402BAC_thunk_fn004021B0
	goto l00402BB2
	// succ:  l00402BB2 l00402BAC_thunk_fn004021B0
l00402BA6:
l00402BAC_thunk_fn004021B0:
	call fn004021B0 (retsize: 0;)
	return
	// succ:  fn00402BA6_exit
l00402BB2:
	SZO = cond(Mem0[edx + 0x00000068:word32] & 0xFB0A11F8)
	C = false
	// succ:  l00402BB2_thunk_fn00402BB9
l00402BB2_thunk_fn00402BB9:
	call fn00402BB9 (retsize: 0;)
	return
	// succ:  fn00402BA6_exit
fn00402BA6_exit:


// fn00402BB7
// Return size: 0
void fn00402BB7()
fn00402BB7_entry:
	// succ:  l00402BB7
l00402BB7:
	esp = fp
	bh = bh | bl
	SZO = cond(bh)
	C = false
	goto l00402BB7_thunk_fn00402BB9
	// succ:  l00402BB7_thunk_fn00402BB9
l00402BB7:
l00402BB7_thunk_fn00402BB9:
	call fn00402BB9 (retsize: 0;)
	return
	// succ:  fn00402BB7_exit
fn00402BB7_exit:


// fn00402BB9
// Return size: 0
void fn00402BB9()
fn00402BB9_entry:
	// succ:  l00402BB9
l00402BB9:
	esp = fp
	bl = bh
	bh = bh - 0x01
	SZO = cond(bh)
	bh = bh + al
	SCZO = cond(bh)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
	ebx = ebx + esi
	SCZO = cond(ebx)
	goto l00402BC4_thunk_fn00402771
	// succ:  l00402BC4_thunk_fn00402771
l00402BB9:
	bl = bh
	bh = bh - 0x01
	SZO = cond(bh)
	bh = bh + al
	SCZO = cond(bh)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
	ebx = ebx + esi
	SCZO = cond(ebx)
	goto l00402BC4_thunk_fn00402771
	// succ:  l00402BC4_thunk_fn00402771
l00402BC4_thunk_fn00402771:
	call fn00402771 (retsize: 0;)
	return
	// succ:  fn00402BB9_exit
l00402BC4_thunk_fn00402771:
	call fn00402771 (retsize: 0;)
	return
	// succ:  fn00402BB9_exit
fn00402BB9_exit:


// fn00402BCF
// Return size: 0
void fn00402BCF()
fn00402BCF_entry:
	// succ:  l00402BCF
l00402BCF:
	esp = fp
	ch = ch + 0xAB
	SCZO = cond(ch)
	ecx = ecx - edi
	SCZO = cond(ecx)
	eax = eax | esi
	SZO = cond(eax)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ch = ch + bl
	SCZO = cond(ch)
	ch = ch + 0x9D
	SCZO = cond(ch)
	call fn00402A67 (retsize: 4;)
	al = Mem0[0x17F743A5:byte]
	eax = eax ^ 0xEF814A5A
	SZO = cond(eax)
	C = false
	call fn00402166 (retsize: 4;)
	// succ:  l00402BEA l00402BFD_thunk_fn00402C02
l00402BCF:
l00402BFD_thunk_fn00402C02:
	call fn00402C02 (retsize: 0;)
	return
	// succ:  fn00402BCF_exit
fn00402BCF_exit:


// fn00402BEA
// Return size: 0
void fn00402BEA()
fn00402BEA_entry:
	// succ:  l00402BEA
l00402BEA:
	esp = fp
	edx = edx - 0x00000001
	SZO = cond(edx)
	edi = edi - 0x00000269
	SCZO = cond(edi)
	edx = edx ^ ebx
	SZO = cond(edx)
	C = false
	ebx = edi
	ebx = eax
	eax = eax + 0x00000001
	SZO = cond(eax)
	cl = cl | ch
	SZO = cond(cl)
	C = false
	cl = cl + 0x31
	SCZO = cond(cl)
	call fn00402166 (retsize: 4;)
	// succ:  l00402BFD_thunk_fn00402C02
l00402BFD_thunk_fn00402C02:
	call fn00402C02 (retsize: 0;)
	return
	// succ:  fn00402BEA_exit
fn00402BEA_exit:


// fn00402C02
// Return size: 0
void fn00402C02()
fn00402C02_entry:
	// succ:  l00402C02
l00402C02:
	esp = fp
	bh = 0x01
	Mem0[0xAB31CC35:byte] = al
	ecx = ecx - 0x00000001
	branch Test(EQ,Z) && ecx != 0x00000000 l00402C09_thunk_fn00402B98
	goto l00402C09_thunk_fn00402C0B
	// succ:  l00402C09_thunk_fn00402C0B l00402C09_thunk_fn00402B98
l00402C02:
	bh = 0x01
	Mem0[0xAB31CC35:byte] = al
	ecx = ecx - 0x00000001
	branch Test(EQ,Z) && ecx != 0x00000000 l00402C09_thunk_fn00402B98
	goto l00402C09_thunk_fn00402C0B
	// succ:  l00402C09_thunk_fn00402C0B l00402C09_thunk_fn00402B98
l00402C09_thunk_fn00402B98:
	call fn00402B98 (retsize: 0;)
	return
	// succ:  fn00402C02_exit
l00402C09_thunk_fn00402B98:
	call fn00402B98 (retsize: 0;)
	return
	// succ:  fn00402C02_exit
l00402C09_thunk_fn00402C0B:
	call fn00402C0B (retsize: 0;)
	return
	// succ:  fn00402C02_exit l00402C09_thunk_fn00402C0B
l00402C09_thunk_fn00402C0B:
	call fn00402C0B (retsize: 0;)
	return
	// succ:  fn00402C02_exit
l00402C09_thunk_fn00402C0B:
	call fn00402C0B (retsize: 0;)
	return
	// succ:  fn00402C02_exit l00402C09_thunk_fn00402C0B
l00402C09_thunk_fn00402C0B:
	call fn00402C0B (retsize: 0;)
	return
	// succ:  fn00402C02_exit
fn00402C02_exit:


// fn00402C0A
// Return size: 0
void fn00402C0A()
fn00402C0A_entry:
	// succ:  l00402C0A
l00402C0A:
	esp = fp
	esp = esp + 0x00000004
	// succ:  l00402C0A_thunk_fn00402C0B
l00402C0A_thunk_fn00402C0B:
	call fn00402C0B (retsize: 0;)
	return
	// succ:  fn00402C0A_exit
fn00402C0A_exit:


// fn00402C0B
// Return size: 0
void fn00402C0B()
fn00402C0B_entry:
	// succ:  l00402C0B
l00402C0B:
	esp = fp
	al = al & 0x04
	SZO = cond(al)
	C = false
	bl = ch
	edi = eax
	bh = bh + 0x0D
	SCZO = cond(bh)
	bl = bl | bh
	SZO = cond(bl)
	C = false
	eax = Mem0[eax:word32]
	bl = bl - 0x01
	SZO = cond(bl)
	bl = bl - 0x1D - C
	SCZO = cond(bl)
	branch Test(SG,S) l00402C1E_thunk_fn00402189
	goto l00402C24
	// succ:  l00402C24 l00402C1E_thunk_fn00402189
l00402C0B:
	bl = ch
	edi = eax
	bh = bh + 0x0D
	SCZO = cond(bh)
	bl = bl | bh
	SZO = cond(bl)
	C = false
	eax = Mem0[eax:word32]
	bl = bl - 0x01
	SZO = cond(bl)
	bl = bl - 0x1D - C
	SCZO = cond(bl)
	branch Test(SG,S) TMP!
l00402C1E_thunk_fn00402189:
	call fn00402189 (retsize: 0;)
	return
	// succ:  fn00402C0B_exit
l00402C24:
	dh = dh
	v14 = dx
	dx = dx
	dx = v14
	branch Test(NS,S) l00402C29_thunk_fn00402189
	goto l00402C2F
	// succ:  l00402C2F l00402C29_thunk_fn00402189
l00402C29_thunk_fn00402189:
	call fn00402189 (retsize: 0;)
	return
	// succ:  fn00402C0B_exit
l00402C2F:
	cl = 0x4A
	return
	// succ:  fn00402C0B_exit
fn00402C0B_exit:


// fn00402C34
// Return size: 0
void fn00402C34()
fn00402C34_entry:
	// succ:  l00402C34
l00402C34:
	esp = fp
	Mem0[esp:word32] = edi
fn00402C34_exit:


// fn00402C5F
// Return size: 0
void fn00402C5F()
fn00402C5F_entry:
	goto l00402C5F
	// succ:  l00402C5F
l004023D9:
	ecx = ecx ^ edi
	SZO = cond(ecx)
	C = false
	bh = bh - 0x01
	SZO = cond(bh)
	ch = ch - 0x01
	SZO = cond(ch)
	ch = ah
	edi = edi + 0x00000269
	SCZO = cond(edi)
	ah = ah + 0x63 + C
	SCZO = cond(ah)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bl = 0x8A
	bh = bh + 0x45 + C
	SCZO = cond(bh)
	edx = edx | ecx
	SZO = cond(edx)
	C = false
	// succ:  l004023F3_thunk_fn004029CF
l004023F3_thunk_fn004029CF:
	call fn004029CF (retsize: 0;)
	return
	// succ:  fn00402C5F_exit
l00402C5F:
	esp = fp
	esp = esp + 0x00000004
	edx = edx + ecx
	SCZO = cond(edx)
	ch = ch ^ bh
	SZO = cond(ch)
	C = false
	bl = bl - 0x11 - C
	SCZO = cond(bl)
	bl = bl + 0xF2
	SCZO = cond(bl)
	ch = ch | cl
	SZO = cond(ch)
	C = false
	bh = bh - 0xFF - C
	SCZO = cond(bh)
	branch Test(PE,P) l00402E79
	// succ:  l00402C78 l00402E79
l00402C78:
	ax = eax
	// succ:  l00402C81
l00402C81:
	branch Test(PO,P) l00402E79
	// succ:  l00402C87 l00402E79
l00402C87:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	Mem0[edi:word32] = eax
	edi = edi + 0x00000004
	ax = __aam(al)
	eax = eax - 0x66240487 - C
	SCZO = cond(eax)
	v20 = ebx
	ebx = ebx
	ebx = v20
	dh = dh
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = eax
	al = al - bh
	SCZO = cond(al)
	ecx = ecx - edx
	SCZO = cond(ecx)
	goto l004023D9
	// succ:  l004023D9
l00402E79:
	bl = bl - 0x0D - C
	SCZO = cond(bl)
	cl = cl + 0x01
	SZO = cond(cl)
	ch = ch - 0x31 - C
	SCZO = cond(ch)
	ecx = ecx ^ ebx
	SZO = cond(ecx)
	C = false
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ch = ch - 0x01
	SZO = cond(ch)
	call fn004024D4 (retsize: 4;)
	esp = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00402E8D_thunk_fn00402E8F
l00402E8D_thunk_fn00402E8F:
	call fn00402E8F (retsize: 0;)
	return
	// succ:  fn00402C5F_exit
fn00402C5F_exit:


// fn00402CD5
// Return size: 0
void fn00402CD5()
fn00402CD5_entry:
	// succ:  l00402CD5
l00402CD5:
	esp = fp
	bl = bl - 0xB0 - C
	SCZO = cond(bl)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ebx = ebx - ecx
	SCZO = cond(ebx)
	bl = bl + 0x54
	SCZO = cond(bl)
	bh = bh - 0x56 - C
	SCZO = cond(bh)
	cl = cl + 0xCE + C
	SCZO = cond(cl)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	bl = bl + 0x63
	SCZO = cond(bl)
	ebx = eax
	bh = bh + 0x01
	SZO = cond(bh)
	goto l00402CEC_thunk_fn00402DF1
	// succ:  l00402CEC_thunk_fn00402DF1
l00402CD5:
l00402CEC_thunk_fn00402DF1:
	call fn00402DF1 (retsize: 0;)
	return
	// succ:  fn00402CD5_exit
fn00402CD5_exit:


// fn00402D41
// Return size: 0
void fn00402D41()
fn00402D41_entry:
	// succ:  l00402D41
l00402D41:
	esp = fp
	Mem0[esp:word32] = edx
fn00402D41_exit:


// fn00402D42
// Return size: 0
void fn00402D42()
fn00402D42_entry:
	// succ:  l00402D42
l00402D42:
	esp = fp
	al = al + 0x24 + C
	SCZO = cond(al)
l00402D42:
fn00402D42_exit:


// fn00402D58
// Return size: 0
void fn00402D58()
fn00402D58_entry:
	// succ:  l00402D58
l00402D58:
	esp = fp
	Mem0[esp - 0x00000028:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = bl - 0x01
	SZO = cond(bl)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	cl = 0x8D
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	bh = ~bh
	branch Test(LE,SZO) l00402D65_thunk_fn00402E2E
	goto l00402D6B
	// succ:  l00402D6B l00402D65_thunk_fn00402E2E
l00402D65_thunk_fn00402E2E:
	call fn00402E2E (retsize: 0;)
	return
	// succ:  fn00402D58_exit
l00402D6B:
	ch = ch
	// succ:  l00402D73
l00402D73:
	branch Test(GT,SZO) l00402D73_thunk_fn00402E2E
	goto l00402D79
	// succ:  l00402D79 l00402D73_thunk_fn00402E2E
l00402D73_thunk_fn00402E2E:
	call fn00402E2E (retsize: 0;)
	return
	// succ:  fn00402D58_exit
l00402D79:
	return
	// succ:  fn00402D58_exit
fn00402D58_exit:


// fn00402D8C
// Return size: 0
void fn00402D8C()
fn00402D8C_entry:
	// succ:  l00402D8C
l00402D8C:
	eax = eax + ebx
	SCZO = cond(eax)
	bh = bh ^ dh
	SZO = cond(bh)
	C = false
	bl = bh
	bl = 0x35
	bh = bh + 0x01
	SZO = cond(bh)
	ebx = ebx + ecx
	SCZO = cond(ebx)
	bl = bl + ch
	SCZO = cond(bl)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	branch Test(PE,P) l00402D9C_thunk_fn0040220B
	goto l00402DA2
	// succ:  l00402DA2 l00402D9C_thunk_fn0040220B
l00402D9C_thunk_fn0040220B:
	call fn0040220B (retsize: 0;)
	return
	// succ:  fn00402D8C_exit
l00402DA2:
	v14 = dl
	dl = dl
	dl = v14
	branch Test(PO,P) l00402DA4_thunk_fn0040220B
	goto l00402DAA
	// succ:  l00402DAA l00402DA4_thunk_fn0040220B
l00402DA4_thunk_fn0040220B:
	call fn0040220B (retsize: 0;)
	return
	// succ:  fn00402D8C_exit
l00402DAA:
	v15 = eax
	eax = ebp
	ebp = v15
	cl = 0x6F
	esp = esp - 0x00000001
	SZO = cond(esp)
	Mem0[edx:byte] = ah
	// succ:  l00402DAE_thunk_fn00402DB0
l00402DAE_thunk_fn00402DB0:
	call fn00402DB0 (retsize: 0;)
	return
	// succ:  fn00402D8C_exit
fn00402D8C_exit:


// fn00402DB0
// Return size: 0
void fn00402DB0()
fn00402DB0_entry:
	// succ:  l00402DB0
l00402DB0:
	esp = fp
	al = al + 0x92 + C
	SCZO = cond(al)
	eax = eax ^ esi
	SZO = cond(eax)
	C = false
	ah = ah ^ dl
	SZO = cond(ah)
	C = false
	al = al - bl
	SCZO = cond(al)
	dh = ~dh
	edx = edx + edi
	SCZO = cond(edx)
	eax = esi
	ah = 0xB3
	dh = ch
	call fn004021E6 (retsize: 4;)
	SZO = cond(Mem0[ecx + 0xDE5926B6:byte] & bl)
	C = false
l00402DB0:
	al = al + 0x92 + C
	SCZO = cond(al)
	eax = eax ^ esi
	SZO = cond(eax)
	C = false
	ah = ah ^ dl
	SZO = cond(ah)
	C = false
	al = al - bl
	SCZO = cond(al)
	dh = ~dh
	edx = edx + edi
	SCZO = cond(edx)
	eax = esi
	ah = 0xB3
	dh = ch
	call fn004021E6 (retsize: 4;)
	SZO = cond(Mem0[ecx + 0xDE5926B6:byte] & bl)
	C = false
fn00402DB0_exit:


// fn00402DF1
// Return size: 0
void fn00402DF1()
fn00402DF1_entry:
	// succ:  l00402DF1
l00402DF1:
	esp = fp
	ch = cl
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ch = ch - 0x58 - C
	SCZO = cond(ch)
	ebx = ebx + edx
	SCZO = cond(ebx)
	bl = bl + al
	SCZO = cond(bl)
	eax = eax - 0x00000001
	SZO = cond(eax)
	bl = bl ^ al
	SZO = cond(bl)
	C = false
	branch Test(SG,S) l00402DFE_thunk_fn0040249F
	goto l00402E04
	// succ:  l00402E04 l00402DFE_thunk_fn0040249F
l00402DF1:
l00402DFE_thunk_fn0040249F:
	call fn0040249F (retsize: 0;)
	return
	// succ:  fn00402DF1_exit
l00402E04:
	v15 = bl
	bl = bl
	bl = v15
	branch Test(NS,S) l00402E06_thunk_fn0040249F
	goto l00402E0C
	// succ:  l00402E0C l00402E06_thunk_fn0040249F
l00402E06_thunk_fn0040249F:
	call fn0040249F (retsize: 0;)
	return
	// succ:  fn00402DF1_exit
l00402E0C:
	eax = Mem0[esi:word32]
	esi = esi + 0x00000004
	D = true
	eax = eax - 0x00000001
	SZO = cond(eax)
	v18 = eax
	eax = edx
	edx = v18
	branch Test(GT,SZO) TMP!
fn00402DF1_exit:


// fn00402E13
// Return size: 0
void fn00402E13()
fn00402E13_entry:
	// succ:  l00402E13
l00402E13:
	esp = fp
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = 0x31
	ch = ch | bh
	SZO = cond(ch)
	C = false
	ebx = ebx - esi
	SCZO = cond(ebx)
	cl = ~cl
	call fn004028BC (retsize: 4;)
	esi = Mem0[edx - 0x00000027:word32] *s 0x63ABD2A8
	SCZO = cond(esi)
	// succ:  l00402E26_thunk_fn00402E2E
l00402E26_thunk_fn00402E2E:
	call fn00402E2E (retsize: 0;)
	return
	// succ:  fn00402E13_exit
fn00402E13_exit:


// fn00402E2E
// Return size: 0
void fn00402E2E()
fn00402E2E_entry:
	// succ:  l00402E2E
l00402E2E:
	esp = fp
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bl = bl ^ ch
	SZO = cond(bl)
	C = false
	ebx = ebx | edx
	SZO = cond(ebx)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	call fn0040281C (retsize: 4;)
	// succ:  l00402E35 l00402E39_thunk_fn00402E3E
l00402E2E:
l00402E39_thunk_fn00402E3E:
	call fn00402E3E (retsize: 0;)
	return
	// succ:  fn00402E2E_exit
fn00402E2E_exit:


// fn00402E35
// Return size: 0
void fn00402E35()
fn00402E35_entry:
	// succ:  l00402E35
l00402E35:
	ecx = ecx ^ edi
	SZO = cond(ecx)
	C = false
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	call fn0040281C (retsize: 4;)
	// succ:  l00402E39_thunk_fn00402E3E
l00402E39_thunk_fn00402E3E:
	call fn00402E3E (retsize: 0;)
	return
	// succ:  fn00402E35_exit
fn00402E35_exit:


// fn00402E3E
// Return size: 0
void fn00402E3E()
fn00402E3E_entry:
	// succ:  l00402E3E
l00402E3E:
	esp = fp
	ss = Mem0[esp:selector]
	esp = esp + 0x00000002
	goto l00402E3F_thunk_fn847AD776
	// succ:  l00402E3F_thunk_fn847AD776
l00402E3E:
	ss = Mem0[esp:selector]
	esp = esp + 0x00000002
	// succ:  l00402E3E_thunk_fn847AD776
l00402E3E_thunk_fn847AD776:
	call fn847AD776 (retsize: 0;)
	return
	// succ:  fn00402E3E_exit
l00402E3F_thunk_fn847AD776:
	call fn847AD776 (retsize: 0;)
	return
	// succ:  fn00402E3E_exit
fn00402E3E_exit:


// fn00402E45
// Return size: 0
void fn00402E45()
fn00402E45_entry:
	// succ:  l00402E45
l00402E45:
	esp = fp
	bh = bh + dl
	SCZO = cond(bh)
	bh = 0x38
	edi = edi + ebx
	SCZO = cond(edi)
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[edx + 0x00000008:word32]
	ebx = ebx + eax
	SCZO = cond(ebx)
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	call fn00402064 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0000004B
	branch Test(GT,SZO) l00402E5B_thunk_fn00402E8F
	goto l00402E5D
	// succ:  l00402E5D l00402E5B_thunk_fn00402E8F
l00402E45:
l00402E5B_thunk_fn00402E8F:
	call fn00402E8F (retsize: 0;)
	return
	// succ:  fn00402E45_exit
l00402E5D:
	v14 = Mem0[edi - 0x00000002:byte]
	Mem0[edi - 0x00000002:byte] = cl
	cl = v14
	// succ:  l00402E5D_thunk_fn00402E60
l00402E5D_thunk_fn00402E60:
	call fn00402E60 (retsize: 4;)
	return
	// succ:  fn00402E45_exit
fn00402E45_exit:


// fn00402E5F
// Return size: 4
void fn00402E5F()
fn00402E5F_entry:
	// succ:  l00402E5F
l00402E5F:
	esp = fp
	ah = ah - 0x01
	SZO = cond(ah)
	goto l00402E5F_thunk_fn00402E60
	// succ:  l00402E5F_thunk_fn00402E60
l00402E5F:
l00402E5F_thunk_fn00402E60:
	call fn00402E60 (retsize: 4;)
	return
	// succ:  fn00402E5F_exit
fn00402E5F_exit:


// fn00402E60
// Return size: 4
void fn00402E60()
fn00402E60_entry:
	// succ:  l00402E60
l00402E60:
	esp = fp
	int3()
	ecx = ecx | edi
	SZO = cond(ecx)
	C = false
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	bl = ~bl
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	esi = esi + 0x00000001
	SZO = cond(esi)
	bl = bl + 0xB3
	SCZO = cond(bl)
	dh = dh | ch
	SZO = cond(dh)
	C = false
	goto l00402E6F_thunk_fn004020DF
	// succ:  l00402E6F_thunk_fn004020DF
l00402E60:
	ecx = ecx | edi
	SZO = cond(ecx)
	C = false
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	bl = ~bl
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	esi = esi + 0x00000001
	SZO = cond(esi)
	bl = bl + 0xB3
	SCZO = cond(bl)
	dh = dh | ch
	SZO = cond(dh)
	C = false
	goto l00402E6F_thunk_fn004020DF
	// succ:  l00402E6F_thunk_fn004020DF
l00402E6F_thunk_fn004020DF:
	call fn004020DF (retsize: 4;)
	return
	// succ:  fn00402E60_exit
l00402E6F_thunk_fn004020DF:
	call fn004020DF (retsize: 4;)
	return
	// succ:  fn00402E60_exit
fn00402E60_exit:


// fn00402E8F
// Return size: 0
void fn00402E8F()
fn00402E8F_entry:
	// succ:  l00402E8F
l00402E8F:
	esp = fp
	al = Mem0[ebx + (uint32) al:byte]
	SZO = cond(Mem0[ebx + 0x2AD7F602:word32] & ecx)
	C = false
	goto l00402E90_thunk_fn00402E96
	// succ:  l00402E90_thunk_fn00402E96
l00402E8F:
	al = Mem0[ebx + (uint32) al:byte]
	SZO = cond(Mem0[ebx + 0x2AD7F602:word32] & ecx)
	C = false
	goto l00402E90_thunk_fn00402E96
	// succ:  l00402E90_thunk_fn00402E96
l00402E90_thunk_fn00402E96:
	call fn00402E96 (retsize: 0;)
	return
	// succ:  fn00402E8F_exit
l00402E90_thunk_fn00402E96:
	call fn00402E96 (retsize: 0;)
	return
	// succ:  fn00402E8F_exit
fn00402E8F_exit:


// fn00402E91
// Return size: 0
void fn00402E91()
fn00402E91_entry:
	// succ:  l00402E91
l00402E91:
	esp = fp
	eax = Mem0[edx:word32]
	bh = ~bh
	dl = dl - bh
	SCZO = cond(dl)
	goto l00402E95_thunk_fn00402E96
	// succ:  l00402E95_thunk_fn00402E96
l00402E91:
l00402E95_thunk_fn00402E96:
	call fn00402E96 (retsize: 0;)
	return
	// succ:  fn00402E91_exit
fn00402E91_exit:


// fn00402E96
// Return size: 0
void fn00402E96()
fn00402E96_entry:
	// succ:  l00402E96
l00402E96:
	esp = fp
	al = Mem0[ebx + (uint32) al:byte]
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	ecx = ecx + eax
	SCZO = cond(ecx)
	cl = dl
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	esi = esi - edi
	SCZO = cond(esi)
	call fn00402D41 (retsize: 4;)
	cl = cl ^ Mem0[edx - 0x00000007:byte]
	SZO = cond(cl)
	C = false
	goto l00402EAA_thunk_fn00402EAD
	// succ:  l00402EAA_thunk_fn00402EAD
l00402E96:
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	ecx = ecx + eax
	SCZO = cond(ecx)
	cl = dl
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	esi = esi - edi
	SCZO = cond(esi)
	call fn00402D41 (retsize: 4;)
	cl = cl ^ Mem0[edx - 0x00000007:byte]
	SZO = cond(cl)
	C = false
	goto l00402EAA_thunk_fn00402EAD
	// succ:  l00402EAA_thunk_fn00402EAD
l00402EAA_thunk_fn00402EAD:
	call fn00402EAD (retsize: 0;)
	return
	// succ:  fn00402E96_exit
l00402EAA_thunk_fn00402EAD:
	call fn00402EAD (retsize: 0;)
	return
	// succ:  fn00402E96_exit
fn00402E96_exit:


// fn00402EAD
// Return size: 0
void fn00402EAD()
fn00402EAD_entry:
	// succ:  l00402EAD
l00402EAD:
	esp = fp
	C = __daa(al, &al)
	edx = edx - 0x00000001
	SZO = cond(edx)
	cl = 0x7C
	goto l00402EAF_thunk_fn00402EB1
	// succ:  l00402EAF_thunk_fn00402EB1
l00402EAD:
l00402EAF_thunk_fn00402EB1:
	call fn00402EB1 (retsize: 0;)
	return
	// succ:  fn00402EAD_exit
fn00402EAD_exit:


// fn00402EB1
// Return size: 0
void fn00402EB1()
fn00402EB1_entry:
	// succ:  l00402EB1
l00402EB1:
	bl = bl - al
	SCZO = cond(bl)
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	esi = esi + ecx
	SCZO = cond(esi)
	bl = 0x50
	bl = bl + 0x01
	SZO = cond(bl)
	edi = edi - ebx
	SCZO = cond(edi)
	bh = bh - 0x01
	SZO = cond(bh)
	cl = cl + 0x01
	SZO = cond(cl)
	esi = esi + 0x00000001
	SZO = cond(esi)
	branch Test(LE,SZO) l00402EC2_thunk_fn00402E91
	goto l00402EC4
	// succ:  l00402EC4 l00402EC2_thunk_fn00402E91
l00402EC2_thunk_fn00402E91:
	call fn00402E91 (retsize: 0;)
	return
	// succ:  fn00402EB1_exit
l00402EC4:
	// succ:  l00402ECA
l00402ECA:
fn00402EB1_exit:


// fn00402ED1
// Return size: 0
void fn00402ED1()
fn00402ED1_entry:
	// succ:  l00402ED1
l00402ED1:
	esp = fp
	esp = esp + 0x00000004
	ebx = esi
	esi = esi + ecx
	SCZO = cond(esi)
	bl = bl - 0x01
	SZO = cond(bl)
	bh = bh | ah
	SZO = cond(bh)
	C = false
	esi = esi | edi
	SZO = cond(esi)
	C = false
	bh = bh ^ ah
	SZO = cond(bh)
	C = false
	edi = edi + ecx
	SCZO = cond(edi)
	bh = bh - dh
	SCZO = cond(bh)
	// succ:  l00402EE5_thunk_fn00402E45
l00402EE5_thunk_fn00402E45:
	call fn00402E45 (retsize: 0;)
	return
	// succ:  fn00402ED1_exit
fn00402ED1_exit:


// fn00402EEF
// Return size: 0
void fn00402EEF()
fn00402EEF_entry:
	goto l00402EEF
	// succ:  l00402EEF
l00402304:
	branch Test(NE,Z) l00402358
	goto l00402306
	// succ:  l00402306 l00402304_thunk_fn00402358
l00402304_thunk_fn00402358:
	call fn00402358 (retsize: 0;)
	return
	// succ:  fn00402EEF_exit
l00402306:
	bh = dh
	edi = edi - 0x00000001
	SZO = cond(edi)
	edi = edi + 0x00000001
	SZO = cond(edi)
	bl = bl - 0x01
	SZO = cond(bl)
	bh = bh - 0x08 - C
	SCZO = cond(bh)
	bl = bl ^ dh
	SZO = cond(bl)
	C = false
	ebx = ebx - esi
	SCZO = cond(ebx)
	bl = bl | dh
	SZO = cond(bl)
	C = false
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	goto l00402317_thunk_fn00402B66
	// succ:  l00402317_thunk_fn00402B66
l00402EEF:
	bh = bh - ch
	SCZO = cond(bh)
	bl = 0x7E
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	esi = ebx
	esi = esi + 0x00000001
	SZO = cond(esi)
	eax = eax | eax
	SZO = cond(eax)
	C = false
	goto l00402304
	// succ:  l00402304
fn00402EEF_exit:


// fn00402F06
// Return size: 4
void fn00402F06()
fn00402F06_entry:
	goto l00402F06
	// succ:  l00402F06
l0040229F:
	dl = dl + 0x2A + C
	SCZO = cond(dl)
	dl = cl
	ah = 0xE4
	dl = dl - ch
	SCZO = cond(dl)
	edx = edx + 0x00000001
	SZO = cond(edx)
	ah = ~ah
	ebx = ebx + ecx
	SCZO = cond(ebx)
	cl = cl + 0x90 + C
	SCZO = cond(cl)
	bh = bh ^ dh
	SZO = cond(bh)
	C = false
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	call fn004027E3 (retsize: 4;)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	v26 = Mem0[eax:word32]
	Mem0[eax:word32] = esp
	esp = v26
	ebp = 0x8DA83D8B
l00402EAC:
l00402F06:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = ebx
	ebx = v3
	v5 = ax
	ax = ax
	ax = v5
	v7 = ecx
	ecx = ecx
	ecx = v7
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	eax = eax - esi
	SCZO = cond(eax)
	bl = bl + cl
	SCZO = cond(bl)
	branch Test(ULE,CZ) l0040229F
	// succ:  l00402F1B l0040229F
l00402F1B:
	ch = ch
	edi = edi
	branch Test(UGT,CZ) l0040229F
	// succ:  l00402F25 l0040229F
l00402F25:
	SCZO = cond(Mem0[esi:byte] - Mem0[edi:byte])
	esi = esi + 0x00000001
	edi = edi + 0x00000001
	branch Test(PO,P) l00402F26_thunk_fn00402F50
	goto l00402F28
	// succ:  l00402F28 l00402F26_thunk_fn00402F50
l00402F26_thunk_fn00402F50:
	call fn00402F50 (retsize: 4;)
	return
	// succ:  fn00402F06_exit
l00402F28:
	__outdw(edx, eax)
	esi = esi + 0x00000004
	branch Test(NO,O) l00402EAC
	// succ:  l00402F2A_thunk_fn00402F2C l00402EAC
l00402F2A_thunk_fn00402F2C:
	call fn00402F2C (retsize: 0;)
	return
	// succ:  fn00402F06_exit l00402F2A_thunk_fn00402F2C
l00402F2A_thunk_fn00402F2C:
	call fn00402F2C (retsize: 0;)
	return
	// succ:  fn00402F06_exit
fn00402F06_exit:


// fn00402F2C
// Return size: 0
void fn00402F2C()
fn00402F2C_entry:
	// succ:  l00402F2C
l00402F2C:
	esp = fp
	ds_esp = Mem0[ecx + 0x00000000:segptr32]
	ch = ch ^ bl
	SZO = cond(ch)
	C = false
	ch = 0x10
	bh = 0x2C
	ecx = ecx + edi
	SCZO = cond(ecx)
	bl = 0x2A
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ch = bh
	branch Test(LT,SO) l00402F3B_thunk_fn004023A7
	// succ:  l00402F3B_thunk_fn00402F41 l00402F3B_thunk_fn004023A7 l00402F3B_thunk_fn00402F41 l00402F3B_thunk_fn004023A7
l00402F3B_thunk_fn004023A7:
	call fn004023A7 (retsize: 0;)
	return
	// succ:  fn00402F2C_exit
l00402F3B_thunk_fn00402F41:
	call fn00402F41 (retsize: 0;)
	return
	// succ:  fn00402F2C_exit
fn00402F2C_exit:


// fn00402F41
// Return size: 0
void fn00402F41()
fn00402F41_entry:
	// succ:  l00402F41
l00402F41:
	eax = eax
fn00402F41_exit:


// fn00402F50
// Return size: 4
void fn00402F50()
fn00402F50_entry:
	// succ:  l00402F50
l00402F50:
	esp = fp
	al = al & 0x43
	SZO = cond(al)
	C = false
	// succ:  l00402F50_thunk_fn00402F51
l00402F50_thunk_fn00402F51:
	call fn00402F51 (retsize: 4;)
	return
	// succ:  fn00402F50_exit
fn00402F50_exit:


// fn00402F51
// Return size: 4
void fn00402F51()
fn00402F51_entry:
	// succ:  l00402F51
l00402F51:
	esp = fp
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bl = 0x47
	edi = edi + edx
	SCZO = cond(edi)
	ebx = esi
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bl = bl ^ al
	SZO = cond(bl)
	C = false
	eax = ~eax
	call fn00402707 (retsize: 4;)
	Mem0[edi:word32] = eax
	edi = edi + 0x00000004
	SZO = cond(Mem0[edx:word32] & 0x8F1408CE)
	C = false
	goto l00402F63_thunk_fn00402F69
	// succ:  l00402F63_thunk_fn00402F69
l00402F51:
	bl = 0x47
	edi = edi + edx
	SCZO = cond(edi)
	ebx = esi
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bl = bl ^ al
	SZO = cond(bl)
	C = false
	eax = ~eax
	call fn00402707 (retsize: 4;)
	Mem0[edi:word32] = eax
	edi = edi + 0x00000004
	SZO = cond(Mem0[edx:word32] & 0x8F1408CE)
	C = false
	goto l00402F63_thunk_fn00402F69
	// succ:  l00402F63_thunk_fn00402F69
l00402F63_thunk_fn00402F69:
	call fn00402F69 (retsize: 4;)
	return
	// succ:  fn00402F51_exit
l00402F63_thunk_fn00402F69:
	call fn00402F69 (retsize: 4;)
	return
	// succ:  fn00402F51_exit
fn00402F51_exit:


// fn00402F68
// Return size: 4
void fn00402F68()
fn00402F68_entry:
	// succ:  l00402F68
l00402F68:
	esp = fp
	Mem0[esp - 0x0000000C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	call fn004022E3 (retsize: 4;)
	// succ:  l00402F68_thunk_fn00402F69 l00402F7A_thunk_fn00402F7F
l00402F68_thunk_fn00402F69:
	call fn00402F69 (retsize: 4;)
	return
	// succ:  fn00402F68_exit
l00402F7A_thunk_fn00402F7F:
	call fn00402F7F (retsize: 0;)
	return
	// succ:  fn00402F68_exit
fn00402F68_exit:


// fn00402F69
// Return size: 4
void fn00402F69()
fn00402F69_entry:
	// succ:  l00402F69
l00402F69:
	esp = fp
	esp = esp + 0x00000001
	SZO = cond(esp)
	al = al & 0xF4
	SZO = cond(al)
	C = false
	cl = ~cl
	edi = edi + 0x00000001
	SZO = cond(edi)
	bh = bl
	bh = bh + ah
	SCZO = cond(bh)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	edx = edx ^ esi
	SZO = cond(edx)
	C = false
	edx = edi
	edx = edx | ebx
	SZO = cond(edx)
	C = false
	call fn004022E3 (retsize: 4;)
	goto l00402F7A_thunk_fn00402F7F
	// succ:  l00402F7A_thunk_fn00402F7F
l00402F69:
	cl = ~cl
	edi = edi + 0x00000001
	SZO = cond(edi)
	bh = bl
	bh = bh + ah
	SCZO = cond(bh)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	edx = edx ^ esi
	SZO = cond(edx)
	C = false
	edx = edi
	edx = edx | ebx
	SZO = cond(edx)
	C = false
l00402F7A_thunk_fn00402F7F:
	call fn00402F7F (retsize: 0;)
	return
	// succ:  fn00402F69_exit
fn00402F69_exit:


// fn00402F7F
// Return size: 0
void fn00402F7F()
fn00402F7F_entry:
	// succ:  l00402F7F
l00402F7F:
	esp = fp
	SCZO = cond(esp - edx)
	cl = 0x52
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	v9 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v9
	SCZO = cond(v9)
	v10 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v10
	SCZO = cond(v10)
	v11 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v11
	SCZO = cond(v11)
	v12 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v12
	SCZO = cond(v12)
	v13 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v13
	SCZO = cond(v13)
	v14 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v14
	SCZO = cond(v14)
	v15 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v15
	SCZO = cond(v15)
	v16 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v16
	SCZO = cond(v16)
	v17 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v17
	SCZO = cond(v17)
	v18 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v18
	SCZO = cond(v18)
	v19 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v19
	SCZO = cond(v19)
	v20 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v20
	SCZO = cond(v20)
	v21 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v21
	SCZO = cond(v21)
	v22 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v22
	SCZO = cond(v22)
	v23 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v23
	SCZO = cond(v23)
	v24 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v24
	SCZO = cond(v24)
	v25 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v25
	SCZO = cond(v25)
	v26 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v26
	SCZO = cond(v26)
	v27 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v27
	SCZO = cond(v27)
	v28 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v28
	SCZO = cond(v28)
	v29 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v29
	SCZO = cond(v29)
	v30 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v30
	SCZO = cond(v30)
	v31 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v31
	SCZO = cond(v31)
	v32 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v32
	SCZO = cond(v32)
	v33 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v33
	SCZO = cond(v33)
	v34 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v34
	SCZO = cond(v34)
	v35 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v35
	SCZO = cond(v35)
	v36 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v36
	SCZO = cond(v36)
	v37 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v37
	SCZO = cond(v37)
	v38 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v38
	SCZO = cond(v38)
	v39 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v39
	SCZO = cond(v39)
	v40 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v40
	SCZO = cond(v40)
	v41 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v41
	SCZO = cond(v41)
	v42 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v42
	SCZO = cond(v42)
	v43 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v43
	SCZO = cond(v43)
	v44 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v44
	SCZO = cond(v44)
	v45 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v45
	SCZO = cond(v45)
	v46 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v46
	SCZO = cond(v46)
	v47 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v47
	SCZO = cond(v47)
	v48 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v48
	SCZO = cond(v48)
	v49 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v49
	SCZO = cond(v49)
	v50 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v50
	SCZO = cond(v50)
	v51 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v51
	SCZO = cond(v51)
	v52 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v52
	SCZO = cond(v52)
	v53 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v53
	SCZO = cond(v53)
	v54 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v54
	SCZO = cond(v54)
	v55 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v55
	SCZO = cond(v55)
	v56 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v56
	SCZO = cond(v56)
	v57 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v57
	SCZO = cond(v57)
	v58 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v58
	SCZO = cond(v58)
	v59 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v59
	SCZO = cond(v59)
	v60 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v60
	SCZO = cond(v60)
	v61 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v61
	SCZO = cond(v61)
	v62 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v62
	SCZO = cond(v62)
	v63 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v63
	SCZO = cond(v63)
	v64 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v64
	SCZO = cond(v64)
	v65 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v65
	SCZO = cond(v65)
	v66 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v66
	SCZO = cond(v66)
	v67 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v67
	SCZO = cond(v67)
	v68 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v68
	SCZO = cond(v68)
	v69 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v69
	SCZO = cond(v69)
	v70 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v70
	SCZO = cond(v70)
	SCZO = cond(Mem0[esi:byte] - Mem0[edi:byte])
	esi = esi + 0x00000001
	edi = edi + 0x00000001
	ebx = 0x77F23105
	v73 = (Mem0[esi - 0x00000076:word32] & 0x00000001 << cl) != 0x00000000
	Mem0[esi - 0x00000076:word32] = __rcr(Mem0[esi - 0x00000076:word32], cl, C)
	C = v73
	v75 = eax
	eax = esi
	esi = v75
	al = Mem0[ebx + (uint32) al:byte]
	ss = Mem0[eax + 0xBF0000F0:selector]
	al = Mem0[0x5FC70000:byte]
	al = al + dl
	SCZO = cond(al)
	v79 = Mem0[esi + 0x00FD9562:byte] + al
	Mem0[esi + 0x00FD9562:byte] = v79
	SCZO = cond(v79)
	Mem0[0x54CB4F51:byte] = al
	branch Test(ULT,C) l00403023_thunk_fn00403024
	goto l00403023_thunk_fn00403025
	// succ:  l00403023_thunk_fn00403025 l00403023_thunk_fn00403024
l00402F7F:
	SCZO = cond(esp - edx)
	cl = 0x52
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	v80 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v80
	SCZO = cond(v80)
	v81 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v81
	SCZO = cond(v81)
	v82 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v82
	SCZO = cond(v82)
	v83 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v83
	SCZO = cond(v83)
	v84 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v84
	SCZO = cond(v84)
	v85 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v85
	SCZO = cond(v85)
	v86 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v86
	SCZO = cond(v86)
	v87 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v87
	SCZO = cond(v87)
	v88 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v88
	SCZO = cond(v88)
	v89 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v89
	SCZO = cond(v89)
	v90 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v90
	SCZO = cond(v90)
	v91 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v91
	SCZO = cond(v91)
	v92 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v92
	SCZO = cond(v92)
	v93 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v93
	SCZO = cond(v93)
	v94 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v94
	SCZO = cond(v94)
	v95 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v95
	SCZO = cond(v95)
	v96 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v96
	SCZO = cond(v96)
	v97 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v97
	SCZO = cond(v97)
	v98 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v98
	SCZO = cond(v98)
	v99 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v99
	SCZO = cond(v99)
	v100 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v100
	SCZO = cond(v100)
	v101 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v101
	SCZO = cond(v101)
	v102 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v102
	SCZO = cond(v102)
	v103 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v103
	SCZO = cond(v103)
	v104 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v104
	SCZO = cond(v104)
	v105 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v105
	SCZO = cond(v105)
	v106 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v106
	SCZO = cond(v106)
	v107 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v107
	SCZO = cond(v107)
	v108 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v108
	SCZO = cond(v108)
	v109 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v109
	SCZO = cond(v109)
	v110 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v110
	SCZO = cond(v110)
	v111 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v111
	SCZO = cond(v111)
	v112 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v112
	SCZO = cond(v112)
	v113 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v113
	SCZO = cond(v113)
	v114 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v114
	SCZO = cond(v114)
	v115 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v115
	SCZO = cond(v115)
	v116 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v116
	SCZO = cond(v116)
	v117 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v117
	SCZO = cond(v117)
	v118 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v118
	SCZO = cond(v118)
	v119 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v119
	SCZO = cond(v119)
	v120 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v120
	SCZO = cond(v120)
	v121 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v121
	SCZO = cond(v121)
	v122 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v122
	SCZO = cond(v122)
	v123 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v123
	SCZO = cond(v123)
	v124 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v124
	SCZO = cond(v124)
	v125 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v125
	SCZO = cond(v125)
	v126 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v126
	SCZO = cond(v126)
	v127 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v127
	SCZO = cond(v127)
	v128 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v128
	SCZO = cond(v128)
	v129 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v129
	SCZO = cond(v129)
	v130 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v130
	SCZO = cond(v130)
	v131 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v131
	SCZO = cond(v131)
	v132 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v132
	SCZO = cond(v132)
	v133 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v133
	SCZO = cond(v133)
	v134 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v134
	SCZO = cond(v134)
	v135 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v135
	SCZO = cond(v135)
	v136 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v136
	SCZO = cond(v136)
	v137 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v137
	SCZO = cond(v137)
	v138 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v138
	SCZO = cond(v138)
	v139 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v139
	SCZO = cond(v139)
	v140 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v140
	SCZO = cond(v140)
	v141 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v141
	SCZO = cond(v141)
	SCZO = cond(Mem0[esi:byte] - Mem0[edi:byte])
	esi = esi + 0x00000001
	edi = edi + 0x00000001
	ebx = 0x77F23105
	v142 = (Mem0[esi - 0x00000076:word32] & 0x00000001 << cl) != 0x00000000
	Mem0[esi - 0x00000076:word32] = __rcr(Mem0[esi - 0x00000076:word32], cl, C)
	C = v142
	v143 = eax
	eax = esi
	esi = v143
	al = Mem0[ebx + (uint32) al:byte]
	ss = Mem0[eax + 0xBF0000F0:selector]
	al = Mem0[0x5FC70000:byte]
	al = al + dl
	SCZO = cond(al)
	v144 = Mem0[esi + 0x00FD9562:byte] + al
	Mem0[esi + 0x00FD9562:byte] = v144
	SCZO = cond(v144)
	Mem0[0x54CB4F51:byte] = al
	branch Test(ULT,C) l00403024
	goto l00403023_thunk_fn00403025
	// succ:  l00403023_thunk_fn00403025 l00403023_thunk_fn00403024
l00403023_thunk_fn00403024:
	call fn00403024 (retsize: 0;)
	return
	// succ:  fn00402F7F_exit
l00403023_thunk_fn00403024:
	call fn00403024 (retsize: 0;)
	return
	// succ:  fn00402F7F_exit
l00403023_thunk_fn00403025:
	call fn00403025 (retsize: 0;)
	return
	// succ:  fn00402F7F_exit l00403023_thunk_fn00403025
l00403023_thunk_fn00403025:
	call fn00403025 (retsize: 0;)
	return
	// succ:  fn00402F7F_exit
l00403023_thunk_fn00403025:
	call fn00403025 (retsize: 0;)
	return
	// succ:  fn00402F7F_exit
fn00402F7F_exit:


// fn00403024
// Return size: 0
void fn00403024()
fn00403024_entry:
	// succ:  l00403024
l00403024:
	call Mem0[esi - 0x00000069:ptr32] (retsize: 4;)
	// succ:  l00403027
l00403027:
	SCZO = cond(ch - bh)
	sp = ds
	return
	// succ:  fn00403024_exit
fn00403024_exit:


// fn00403025
// Return size: 0
void fn00403025()
fn00403025_entry:
	// succ:  l00403025
l00403025:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	v5 = eax
	eax = edi
	edi = v5
	// succ:  l00403026_thunk_fn00403024
l00403026_thunk_fn00403024:
	call fn00403024 (retsize: 0;)
	return
	// succ:  fn00403025_exit
fn00403025_exit:


// fn847AD776
// Return size: 0
void fn847AD776()
fn847AD776_entry:
	// succ:  l847AD776
l847AD776:
fn847AD776_exit:


