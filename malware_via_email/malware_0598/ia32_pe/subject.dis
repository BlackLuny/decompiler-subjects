// fn00401020
// Return size: 0
void fn00401020()
fn00401020_entry:
	// succ:  l00401020
l00401020:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	edx = edx | eax
	SZO = cond(edx)
	C = false
	ebx = ebx - eax
	SCZO = cond(ebx)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	edi = edi - 0x00000001
	SZO = cond(edi)
	ecx = ecx ^ edx
	SZO = cond(ecx)
	C = false
	ebx = ebx - esi
	SCZO = cond(ebx)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	edx = edx ^ ecx
	SZO = cond(edx)
	C = false
	// succ:  l0040140D
l0040140D:
	esi = esi - ecx
	SCZO = cond(esi)
	ecx = ecx ^ esi
	SZO = cond(ecx)
	C = false
	// succ:  l0040140F_thunk_fn00401411
l0040140F_thunk_fn00401411:
	call fn00401411 (retsize: 0;)
	return
	// succ:  fn00401020_exit
fn00401020_exit:


// fn0040104E
// Return size: 0
void fn0040104E()
fn0040104E_entry:
	// succ:  l0040104E
l0040104E:
	edi = edi + ecx
	SCZO = cond(edi)
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi + 0x00000001
	SZO = cond(edi)
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	ecx = ecx | edi
	SZO = cond(ecx)
	C = false
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ebx = ebx - edx
	SCZO = cond(ebx)
	branch Test(PE,P) l0040117D
	// succ:  l0040105F l0040117D
l0040105F:
	v13 = dl
	dl = dl
	dl = v13
	branch Test(PO,P) l0040117D
	// succ:  l00401067 l0040117D
l00401067:
	__outb(dx, al)
	cl = 0xF5
	ecx = ecx + 0x8B66240C
	// succ:  l0040106A_thunk_fn00401070
l0040106A_thunk_fn00401070:
	call fn00401070 (retsize: 0;)
	return
	// succ:  fn0040104E_exit
l0040117D:
	ecx = ecx + esi
	SCZO = cond(ecx)
	ecx = ecx ^ ebx
	SZO = cond(ecx)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	esi = esi - 0x00000001
	SZO = cond(esi)
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[eax + 0x00000030:word32]
	edi = edi ^ esi
	SZO = cond(edi)
	C = false
	ebx = ebx - ecx
	SCZO = cond(ebx)
	branch Test(EQ,Z) l0040118D_thunk_fn00401455
	goto l00401193
	// succ:  l00401193 l0040118D_thunk_fn00401455
l0040118D_thunk_fn00401455:
	call fn00401455 (retsize: 6;)
	return
	// succ:  fn0040104E_exit
l00401193:
	v20 = dh
	dh = dh
	dh = v20
	v21 = cl
	cl = cl
	cl = v21
	branch Test(NE,Z) l00401197_thunk_fn00401455
	goto l0040119D
	// succ:  l0040119D l00401197_thunk_fn00401455
l00401197_thunk_fn00401455:
	call fn00401455 (retsize: 6;)
	return
	// succ:  fn0040104E_exit
l0040119D:
	edi = 0x462708EA
	v22 = Mem0[ebx:byte]
	Mem0[ebx:byte] = dh
	dh = v22
	__fldcw(Mem0[ebx:word16])
	v23 = (Mem0[ebx:word32] & 0x00000001 << cl) != 0x00000000
	Mem0[ebx:word32] = __ror(Mem0[ebx:word32], cl)
	C = v23
fn0040104E_exit:


// fn0040106B
// Return size: 0
void fn0040106B()
fn0040106B_entry:
	// succ:  l0040106B
l0040106B:
	esp = fp
	Mem0[esp:word32] = ecx
	bx = bx
	// succ:  l0040106E_thunk_fn00401070
l0040106E_thunk_fn00401070:
	call fn00401070 (retsize: 0;)
	return
	// succ:  fn0040106B_exit
l00401080_thunk_fn0040135A:
	call fn0040135A (retsize: 0;)
	return
	// succ:  fn0040106B_exit
fn0040106B_exit:


// fn00401070
// Return size: 0
void fn00401070()
fn00401070_entry:
	// succ:  l00401070
l00401070:
	esp = fp
	Mem0[ecx + 0x00000032:int32] = (int32) rArg0
l00401070:
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	dh = dh ^ bl
	SZO = cond(dh)
	C = false
	ecx = ecx - ebx
	SCZO = cond(ecx)
	bh = bh - 0x6E - C
	SCZO = cond(bh)
	bl = bl - dh
	SCZO = cond(bl)
	edi = edi | esi
	SZO = cond(edi)
	C = false
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	branch Test(ULE,CZ) TMP!
fn00401070_exit:


// fn0040109B
// Return size: 0
void fn0040109B()
fn0040109B_entry:
	goto l0040109B
	// succ:  l0040109B
l00401006:
	esi = edi
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edi = edi - 0x00000001
	SZO = cond(edi)
	dl = dl ^ bh
	SZO = cond(dl)
	C = false
	ecx = ecx ^ edx
	SZO = cond(ecx)
	C = false
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	dl = bh
	ecx = ecx + ebx
	SCZO = cond(ecx)
	ch = ch - 0x01
	SZO = cond(ch)
	goto l004010EF
	// succ:  l004010EF
l0040109B:
	edx = edx - 0x00000001
	SZO = cond(edx)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edx = edx + edi
	SCZO = cond(edx)
	ecx = ecx + eax
	SCZO = cond(ecx)
	ecx = edx
	edi = edi | esi
	SZO = cond(edi)
	C = false
	ebx = ebx - edi
	SCZO = cond(ebx)
	edx = edx - ebx
	SCZO = cond(edx)
	goto l00401006
	// succ:  l00401006
l004010EF:
	ch = ch + dl
	SCZO = cond(ch)
	// succ:  l004010F0
l004010F0:
	bl = bl - dl
	SCZO = cond(bl)
	cl = cl + bl
	SCZO = cond(cl)
	ebx = ebx - ecx
	SCZO = cond(ebx)
	bh = bh | cl
	SZO = cond(bh)
	C = false
	dl = dl | dh
	SZO = cond(dl)
	C = false
	ch = ch - 0xF0 - C
	SCZO = cond(ch)
	edi = edi ^ eax
	SZO = cond(edi)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	// succ:  l004010FF_thunk_fn0040122C
l004010FF_thunk_fn0040122C:
	call fn0040122C (retsize: 0;)
	return
	// succ:  fn0040109B_exit
fn0040109B_exit:


// fn004010B4
// Return size: 0
void fn004010B4()
fn004010B4_entry:
	// succ:  l004010B4
l004010B4:
	esp = fp
	esp = esp + 0x00000004
	bh = bh - 0x01
	SZO = cond(bh)
	esi = esi + 0x00000001
	SZO = cond(esi)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bl = ~bl
	dl = ch
	call fn0040106B (retsize: 4;)
	al = Mem0[ebp + 0x0000003D:byte]
	ecx = ecx - 0x00000001
	branch Test(EQ,Z) && ecx != 0x00000000 TMP!
l004010F5:
	ebx = ebx - ecx
	SCZO = cond(ebx)
	bh = bh | cl
	SZO = cond(bh)
	C = false
	dl = dl | dh
	SZO = cond(dl)
	C = false
	ch = ch - 0xF0 - C
	SCZO = cond(ch)
	edi = edi ^ eax
	SZO = cond(edi)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	// succ:  l00401101_thunk_fn0040122C
l00401101_thunk_fn0040122C:
	call fn0040122C (retsize: 0;)
	return
	// succ:  fn004010B4_exit
fn004010B4_exit:


// fn004010C9
// Return size: 0
void fn004010C9()
fn004010C9_entry:
	// succ:  l004010C9
l004010C9:
	esp = fp
	ecx = ecx - esi
	SCZO = cond(ecx)
	goto l004010CA
	// succ:  l004010CA
l004010C9:
l004010DD:
	branch Test(LE,SZO) l004010DF
	// succ:  l004010DF
l004010DF:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	branch Test(NE,Z) l0040146D
	// succ:  l004010E7 l0040146D
l004010E7:
	eax = __indw(0x57)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	eax = eax & 0x02EF7527
	SZO = cond(eax)
	C = false
l0040146D:
fn004010C9_exit:


// fn004010F0
// Return size: 0
void fn004010F0()
fn004010F0_entry:
	// succ:  l004010F0
l004010F0:
	// succ:  lCB02_DA2A
lCB02_DA2A:
fn004010F0_exit:


// fn0040110B
// Return size: 0
void fn0040110B()
fn0040110B_entry:
	// succ:  l0040110B
l0040110B:
	esp = fp
	Mem0[esp:word32] = ebx
	al = al
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi ^ eax
	SZO = cond(edi)
	C = false
	ecx = ecx ^ edi
	SZO = cond(ecx)
	C = false
	esi = esi + edx
	SCZO = cond(esi)
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	ebx = esi
	ecx = ecx | esi
	SZO = cond(ecx)
	C = false
	branch Test(ULT,C) l0040112A
	// succ:  l00401120 l0040112A
l00401120:
	branch Test(UGE,C) l00401122
	// succ:  l00401122
l00401122:
	branch Test(UGE,C) l0040112A
	// succ:  l00401124 l0040112A
l00401124:
	branch Test(PE,P) l0040112A
	// succ:  l00401126 l0040112A
l00401126:
	ebp = 0x42CB9F1A
	goto l0040112B
	// succ:  l0040112B
l0040112A:
	edx = edx + 0x00000001
	SZO = cond(edx)
	// succ:  l0040112B
l0040112B:
	eax = eax - 0xEEEEEEEE
	SCZO = cond(eax)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	edx = edx - esi
	SCZO = cond(edx)
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	edx = esi
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	call fn0040132B (retsize: 4;)
	eax = eax | 0x11D268A6
	SZO = cond(eax)
	C = false
	eax = eax ^ 0x41F80B9A
	SZO = cond(eax)
	C = false
	// succ:  l00401143_thunk_fn00401148
l00401143_thunk_fn00401148:
	call fn00401148 (retsize: 0;)
	return
	// succ:  fn0040110B_exit
fn0040110B_exit:


// fn00401148
// Return size: 0
void fn00401148()
fn00401148_entry:
	// succ:  l00401148
l00401148:
	esp = fp
	esi = ebx
	edi = edi + 0x00000001
	SZO = cond(edi)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	esi = eax
	edx = edx | edi
	SZO = cond(edx)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	branch Test(LE,SZO) l00401151_thunk_fn0040104E
	goto l00401151_thunk_fn00401157
	// succ:  l00401151_thunk_fn00401157 l00401151_thunk_fn0040104E
l00401148:
	esi = ebx
	edi = edi + 0x00000001
	SZO = cond(edi)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	esi = eax
	edx = edx | edi
	SZO = cond(edx)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	branch Test(LE,SZO) l0040104E
	goto l00401151_thunk_fn00401157
	// succ:  l00401151_thunk_fn00401157 l00401151_thunk_fn0040104E
l00401151_thunk_fn0040104E:
	call fn0040104E (retsize: 0;)
	return
	// succ:  fn00401148_exit
l00401151_thunk_fn0040104E:
	call fn0040104E (retsize: 0;)
	return
	// succ:  fn00401148_exit
l00401151_thunk_fn00401157:
	call fn00401157 (retsize: 0;)
	return
	// succ:  fn00401148_exit l00401151_thunk_fn00401157
l00401151_thunk_fn00401157:
	call fn00401157 (retsize: 0;)
	return
	// succ:  fn00401148_exit
l00401151_thunk_fn00401157:
	call fn00401157 (retsize: 0;)
	return
	// succ:  fn00401148_exit
fn00401148_exit:


// fn00401157
// Return size: 0
void fn00401157()
fn00401157_entry:
	// succ:  l00401157
l00401157:
fn00401157_exit:


// fn004011CF
// Return size: 0
void fn004011CF()
fn004011CF_entry:
	// succ:  l004011CF
l004011CF:
	esp = fp
	esp = esp + 0x00000004
	edx = edx - esi
	SCZO = cond(edx)
	ecx = edi
	ebx = ecx
	edi = edx
	edi = esi
	// succ:  l004011DD_thunk_fn004012F3
l004011DD_thunk_fn004012F3:
	call fn004012F3 (retsize: 0;)
	return
	// succ:  fn004011CF_exit
fn004011CF_exit:


// fn00401201
// Return size: 0
void fn00401201()
fn00401201_entry:
	// succ:  l00401201
l00401201:
	esp = fp
	edi = edi + 0x00000001
	SZO = cond(edi)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edx = edx - edi
	SCZO = cond(edx)
	edx = edx + 0x00000001
	SZO = cond(edx)
	edi = edi + 0x00000001
	SZO = cond(edi)
	edx = edx + 0x00000001
	SZO = cond(edx)
	ebx = ebx ^ eax
	SZO = cond(ebx)
	C = false
	call fn004013EE (retsize: 4;)
	esp = esp + 0xFFFFFFFA
	eax = eax - Mem0[eax - 0x0000001C:word32] - C
	SCZO = cond(eax)
	al = al & 0xE3
	SZO = cond(al)
	C = false
l00401201:
fn00401201_exit:


// fn00401215
// Return size: 0
void fn00401215()
fn00401215_entry:
	// succ:  l00401215
l00401215:
	esp = fp
	edx = edx | eax
	SZO = cond(edx)
	C = false
	ebx = ebx | edx
	SZO = cond(ebx)
	C = false
	edx = edx | esi
	SZO = cond(edx)
	C = false
	ecx = ecx | eax
	SZO = cond(ecx)
	C = false
	edi = edi - ebx
	SCZO = cond(edi)
	edi = edi - edx
	SCZO = cond(edi)
	call fn0040110B (retsize: 4;)
	edx = edx_eax % Mem0[esi + 0x43EFCA9D:byte]
	eax = edx_eax /u Mem0[esi + 0x43EFCA9D:byte]
	SCZO = cond(eax)
	goto l00401226_thunk_fn0040122C
	// succ:  l00401226_thunk_fn0040122C
l00401215:
l00401226_thunk_fn0040122C:
	call fn0040122C (retsize: 0;)
	return
	// succ:  fn00401215_exit
fn00401215_exit:


// fn0040122C
// Return size: 0
void fn0040122C()
fn0040122C_entry:
	// succ:  l0040122C
l0040122C:
	dl = bh
	edx = edx - ebx
	SCZO = cond(edx)
	esi = esi + 0x00000001
	SZO = cond(esi)
	dl = dl + cl
	SCZO = cond(dl)
	ecx = ebx
	dl = dl + 0x50 + C
	SCZO = cond(dl)
	dl = ~dl
	call fn004013D7 (retsize: 4;)
	esp = esp + 0xFFFFFFFA
	ebx = 0x89E3AA75
	al = al - 0x24 - C
	SCZO = cond(al)
	v21 = bh
	bh = bh
	bh = v21
	branch Test(GE,SO) l0040124A
	// succ:  l0040124A
l0040124A:
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi + 0x00000001
	SZO = cond(esi)
	edi = eax
	edi = edi - edx
	SCZO = cond(edi)
	ecx = esi
	edx = edx + ecx
	SCZO = cond(edx)
	eax = eax & 0xEEEEEEEE
	SZO = cond(eax)
	C = false
	// succ:  l00401259_thunk_fn00401215
l00401259_thunk_fn00401215:
	call fn00401215 (retsize: 0;)
	return
	// succ:  fn0040122C_exit
fn0040122C_exit:


// fn004012F3
// Return size: 0
void fn004012F3()
fn004012F3_entry:
	// succ:  l004012F3
l004012F3:
	esp = fp
	ebx = eax
	esi = esi - edi
	SCZO = cond(esi)
	ecx = ecx | edi
	SZO = cond(ecx)
	C = false
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edi = ebx
	branch Test(LE,SZO) l004012FD_thunk_fn004010C9
	goto l00401303
	// succ:  l00401303 l004012FD_thunk_fn004010C9
l004012F3:
l004012FD_thunk_fn004010C9:
	call fn004010C9 (retsize: 0;)
	return
	// succ:  fn004012F3_exit
l00401303:
	v11 = si
	si = si
	si = v11
	branch Test(GT,SZO) l00401306_thunk_fn004010C9
	goto l0040130C
	// succ:  l0040130C l00401306_thunk_fn004010C9
l00401306_thunk_fn004010C9:
	call fn004010C9 (retsize: 0;)
	return
	// succ:  fn004012F3_exit
l0040130C:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[ebx + 0x00000017:real64] = rArg0
	eax = Mem0[esi:word32]
	esi = esi + 0x00000004
	v14 = eax
	eax = esp
	esp = v14
	// succ:  l00401311_thunk_fn00401312
l00401311_thunk_fn00401312:
	call fn00401312 (retsize: 0;)
	return
	// succ:  fn004012F3_exit
fn004012F3_exit:


// fn00401312
// Return size: 0
void fn00401312()
fn00401312_entry:
	goto l00401312
	// succ:  l00401312
l00401145:
	edi = edi | eax
	SZO = cond(edi)
	C = false
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	// succ:  l00401147_thunk_fn00401148
l00401147_thunk_fn00401148:
	call fn00401148 (retsize: 0;)
	return
	// succ:  fn00401312_exit
l00401312:
	ecx = ecx | esi
	SZO = cond(ecx)
	C = false
	edx = edx + 0x00000001
	SZO = cond(edx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[fs:0x00000018:word32]
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	edi = edi + 0x00000001
	SZO = cond(edi)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	goto l00401145
	// succ:  l00401145
fn00401312_exit:


// fn0040132B
// Return size: 0
void fn0040132B()
fn0040132B_entry:
	// succ:  l0040132B
l0040132B:
	esp = fp
	Mem0[esp:word32] = edx
fn0040132B_exit:


// fn0040135A
// Return size: 0
void fn0040135A()
fn0040135A_entry:
	// succ:  l0040135A
l0040135A:
	esp = fp
	esi = esi + eax
	SCZO = cond(esi)
	ebx = ebx - esi
	SCZO = cond(ebx)
	ebx = ebx - eax
	SCZO = cond(ebx)
	edi = edi - ecx
	SCZO = cond(edi)
	edi = ebx
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	ebx = ebx ^ ecx
	SZO = cond(ebx)
	C = false
	branch Test(SG,S) TMP!
l0040135A:
fn0040135A_exit:


// fn00401392
// Return size: 6
void fn00401392()
fn00401392_entry:
	goto l00401392
	// succ:  l00401392
l0040103A:
	esi = esi ^ edi
	SZO = cond(esi)
	C = false
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	edi = edi | esi
	SZO = cond(edi)
	C = false
	esi = esi ^ edi
	SZO = cond(esi)
	C = false
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	esi = eax
	// succ:  l00401045_thunk_fn00401436
l00401045_thunk_fn00401436:
	call fn00401436 (retsize: 6;)
	return
	// succ:  fn00401392_exit
l00401392:
	esp = fp
	esi = esi - 0x00000001
	SZO = cond(esi)
	ecx = ecx ^ esi
	SZO = cond(ecx)
	C = false
	edx = edx - ecx
	SCZO = cond(edx)
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	esi = esi - edi
	SCZO = cond(esi)
	edi = edi + 0x00000001
	SZO = cond(edi)
	edx = edx | esi
	SZO = cond(edx)
	C = false
	goto l0040103A
	// succ:  l0040103A
l00401392:
fn00401392_exit:


// fn004013D7
// Return size: 6
void fn004013D7()
fn004013D7_entry:
	// succ:  l004013D7
l004013D7:
	esp = fp
	Mem0[esp - 0x00000034:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx + 0x00000001
	SZO = cond(edx)
	ch = ch + 0xAD + C
	SCZO = cond(ch)
	esi = eax
	bl = 0x46
	dl = ~dl
	call fn004010B4 (retsize: 4;)
	edx = edx + 0x00000001
	SZO = cond(edx)
	v13 = Mem0[edi + 0xD424448F:word32] ^ esi
	Mem0[edi + 0xD424448F:word32] = v13
	SZO = cond(Mem0[edi + 0xD424448F:word32])
	C = false
	// succ:  l004013EC_thunk_fn004013F2
l004013EC_thunk_fn004013F2:
	call fn004013F2 (retsize: 6;)
	return
	// succ:  fn004013D7_exit
fn004013D7_exit:


// fn004013EE
// Return size: 6
void fn004013EE()
fn004013EE_entry:
	// succ:  l004013EE
l004013EE:
	esp = fp
	Mem0[esp - 0x0000002C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l004013EE_thunk_fn004013F2
l004013EE_thunk_fn004013F2:
	call fn004013F2 (retsize: 6;)
	return
	// succ:  fn004013EE_exit
fn004013EE_exit:


// fn004013F2
// Return size: 6
void fn004013F2()
fn004013F2_entry:
	// succ:  l004013F2
l004013F2:
	esp = fp
	edx = edx - ebx
	SCZO = cond(edx)
	edx = edx | edi
	SZO = cond(edx)
	C = false
	edx = edx - esi
	SCZO = cond(edx)
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi - eax
	SCZO = cond(esi)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	edi = edi | esi
	SZO = cond(edi)
	C = false
	branch Test(SG,S) l004013FE_thunk_fn00401392
	goto l004013FE_thunk_fn00401400
	// succ:  l004013FE_thunk_fn00401400 l004013FE_thunk_fn00401392
l004013F2:
	edx = edx - ebx
	SCZO = cond(edx)
	edx = edx | edi
	SZO = cond(edx)
	C = false
	edx = edx - esi
	SCZO = cond(edx)
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi - eax
	SCZO = cond(esi)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	edi = edi | esi
	SZO = cond(edi)
	C = false
	branch Test(SG,S) l004013FE_thunk_fn00401392
	goto l004013FE_thunk_fn00401400
	// succ:  l004013FE_thunk_fn00401400 l004013FE_thunk_fn00401392
l004013FE_thunk_fn00401392:
	call fn00401392 (retsize: 6;)
	return
	// succ:  fn004013F2_exit
l004013FE_thunk_fn00401392:
	call fn00401392 (retsize: 6;)
	return
	// succ:  fn004013F2_exit
l004013FE_thunk_fn00401400:
	call fn00401400 (retsize: 0;)
	return
	// succ:  fn004013F2_exit l004013FE_thunk_fn00401400
l004013FE_thunk_fn00401400:
	call fn00401400 (retsize: 0;)
	return
	// succ:  fn004013F2_exit
l004013FE_thunk_fn00401400:
	call fn00401400 (retsize: 0;)
	return
	// succ:  fn004013F2_exit
fn004013F2_exit:


// fn00401400
// Return size: 0
void fn00401400()
fn00401400_entry:
	// succ:  l00401400
l00401400:
	cx = cx
	branch Test(NS,S) l00401403_thunk_fn00401392
	goto l00401405
	// succ:  l00401405 l00401403_thunk_fn00401392
l00401403_thunk_fn00401392:
	call fn00401392 (retsize: 6;)
	return
	// succ:  fn00401400_exit
l00401405:
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	C = __das(al, &al)
	call esi (retsize: 4;)
	al = al + 0x17 + C
	SCZO = cond(al)
	Mem0[0xCE33F12B:byte] = al
	// succ:  l0040140C_thunk_fn00401411
l0040140C_thunk_fn00401411:
	call fn00401411 (retsize: 0;)
	return
	// succ:  fn00401400_exit
fn00401400_exit:


// fn00401411
// Return size: 0
void fn00401411()
fn00401411_entry:
	// succ:  l00401411
l00401411:
	esp = fp
	edx = ebx
	esi = ecx
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ebx = eax
	ebx = ebx + edx
	SCZO = cond(ebx)
	ebx = esi
	ebx = edx
	branch Test(OV,O) l0040141E_thunk_fn0040109B
	goto l0040141E_thunk_fn00401424
	// succ:  l0040141E_thunk_fn00401424 l0040141E_thunk_fn0040109B
l00401411:
	edx = ebx
	esi = ecx
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ebx = eax
	ebx = ebx + edx
	SCZO = cond(ebx)
	ebx = esi
	ebx = edx
	branch Test(OV,O) l0040109B
	goto l0040141E_thunk_fn00401424
	// succ:  l0040141E_thunk_fn00401424 l0040141E_thunk_fn0040109B
l0040141E_thunk_fn0040109B:
	call fn0040109B (retsize: 0;)
	return
	// succ:  fn00401411_exit
l0040141E_thunk_fn0040109B:
	call fn0040109B (retsize: 0;)
	return
	// succ:  fn00401411_exit
l0040141E_thunk_fn00401424:
	call fn00401424 (retsize: 0;)
	return
	// succ:  fn00401411_exit l0040141E_thunk_fn00401424
l0040141E_thunk_fn00401424:
	call fn00401424 (retsize: 0;)
	return
	// succ:  fn00401411_exit
l0040141E_thunk_fn00401424:
	call fn00401424 (retsize: 0;)
	return
	// succ:  fn00401411_exit
fn00401411_exit:


// fn00401424
// Return size: 0
void fn00401424()
fn00401424_entry:
	// succ:  l00401424
l00401424:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	dl = dl
	branch Test(NO,O) l0040109B
	goto l0040142E
	// succ:  l0040142E l00401428_thunk_fn0040109B
l00401428_thunk_fn0040109B:
	call fn0040109B (retsize: 0;)
	return
	// succ:  fn00401424_exit
l0040142E:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
fn00401424_exit:


// fn00401436
// Return size: 6
void fn00401436()
fn00401436_entry:
	// succ:  l00401436
l00401436:
	esp = fp
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	ebx = ebx + edi
	SCZO = cond(ebx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[eax + 0x00000090:word32]
	esi = esi - ebx
	SCZO = cond(esi)
	ecx = ecx + edi
	SCZO = cond(ecx)
	esi = esi | eax
	SZO = cond(esi)
	C = false
	ebx = edx
	ecx = eax
	call fn004011CF (retsize: 4;)
	ax = __aam(al)
	eax = eax - 0x336A82B5
	SCZO = cond(eax)
	goto l00401451_thunk_fn00401456
	// succ:  l00401451_thunk_fn00401456
l00401436:
l00401451_thunk_fn00401456:
	call fn00401456 (retsize: 6;)
	return
	// succ:  fn00401436_exit
fn00401436_exit:


// fn00401455
// Return size: 6
void fn00401455()
fn00401455_entry:
	// succ:  l00401455
l00401455:
	esp = fp
	ecx = ecx ^ edx
	SZO = cond(ecx)
	C = false
	goto l00401455_thunk_fn00401456
	// succ:  l00401455_thunk_fn00401456
l00401455:
l00401455_thunk_fn00401456:
	call fn00401456 (retsize: 6;)
	return
	// succ:  fn00401455_exit
l00401460_thunk_fn00401201:
	call fn00401201 (retsize: 0;)
	return
	// succ:  fn00401455_exit
fn00401455_exit:


// fn00401456
// Return size: 6
void fn00401456()
fn00401456_entry:
	// succ:  l00401456
l00401456:
	esp = fp
	return
	// succ:  fn00401456_exit
l00401456:
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	edi = edi | esi
	SZO = cond(edi)
	C = false
	edx = edx + eax
	SCZO = cond(edx)
	edx = edx - 0x00000001
	SZO = cond(edx)
	edi = edi | ecx
	SZO = cond(edi)
	C = false
fn00401456_exit:


