// fn0040101F
// Return size: 4
void fn0040101F()
fn0040101F_entry:
	// succ:  l0040101F
l0040101F:
	esp = fp
	esp = esp + 0x00000004
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ecx = ecx | esi
	SZO = cond(ecx)
	C = false
	eax = eax - 0xEEEEEEEE
	SCZO = cond(eax)
	edx = edx + 0x00000001
	SZO = cond(edx)
	esi = esi + 0x00000001
	SZO = cond(esi)
	esi = esi - ecx
	SCZO = cond(esi)
	esi = esi + edx
	SCZO = cond(esi)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	edx = edx + eax
	SCZO = cond(edx)
	// succ:  l00401034_thunk_fn00401367
l00401034_thunk_fn00401367:
	call fn00401367 (retsize: 4;)
	return
	// succ:  fn0040101F_exit
fn0040101F_exit:


// fn00401079
// Return size: 0
void fn00401079()
fn00401079_entry:
	// succ:  l00401079
l00401079:
	esp = fp
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	dl = dl + dh
	SCZO = cond(dl)
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	edx = edx + 0x00000001
	SZO = cond(edx)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	branch Test(EQ,Z) l00401082_thunk_fn004012F3
l00401079:
fn00401079_exit:


// fn00401086
// Return size: 0
void fn00401086()
fn00401086_entry:
	goto l00401086
	// succ:  l00401086
l00401082_thunk_fn004012F3:
	call fn004012F3 (retsize: 0;)
	return
	// succ:  fn00401086_exit
l00401086:
	esp = fp
	v5 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v5
	SCZO = cond(v5)
	goto l00401086_thunk_fn00401088
	// succ:  l00401086_thunk_fn00401088
l00401086:
	call fn00401088 (retsize: 0;)
	return
	// succ:  l00401086_thunk_fn00401088 l00401082_thunk_fn004012F3 fn00401086_exit
l00401086_thunk_fn00401088:
	call fn00401088 (retsize: 0;)
	return
	// succ:  fn00401086_exit
l00401086_thunk_fn00401088:
	call fn00401088 (retsize: 0;)
	return
	// succ:  fn00401086_exit
fn00401086_exit:


// fn00401088
// Return size: 0
void fn00401088()
fn00401088_entry:
	// succ:  l00401088
l00401088:
	v3 = bh
	bh = bh
	bh = v3
	branch Test(NE,Z) l0040108A_thunk_fn004012F3
	goto l00401090
	// succ:  l00401090 l0040108A_thunk_fn004012F3
l0040108A_thunk_fn004012F3:
	call fn004012F3 (retsize: 0;)
	return
	// succ:  fn00401088_exit
l00401090:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esp
	al = __inb(dx)
	Mem0[0x35B0F587:word32] = eax
	Mem0[edi:word32] = eax
	edi = edi + 0x00000004
	// succ:  l00401097_thunk_fn00401098
l00401097_thunk_fn00401098:
	call fn00401098 (retsize: 0;)
	return
	// succ:  fn00401088_exit
fn00401088_exit:


// fn00401098
// Return size: 0
void fn00401098()
fn00401098_entry:
	// succ:  l00401098
l00401098:
	esp = fp
	esp = esp + 0x00000004
	edx = ebx
	ecx = ecx + edx
	SCZO = cond(ecx)
	edx = edx + ecx
	SCZO = cond(edx)
	edx = ecx
	esi = esi - eax
	SCZO = cond(esi)
	ecx = ecx - ebx
	SCZO = cond(ecx)
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	edx = edx + esi
	SCZO = cond(edx)
	edx = edx - eax
	SCZO = cond(edx)
	branch Test(LE,SZO) l004010AE_thunk_fn00401160
	goto l004010B4
	// succ:  l004010B4 l004010AE_thunk_fn00401160
l004010AE_thunk_fn00401160:
	call fn00401160 (retsize: 0;)
	return
	// succ:  fn00401098_exit
l004010B4:
	v12 = di
	di = di
	di = v12
fn00401098_exit:


// fn004010C3
// Return size: 0
void fn004010C3()
fn004010C3_entry:
	goto l004010C3
	// succ:  l004010C3
l00401006:
	dl = 0x9A
	dh = dh - 0xD5 - C
	SCZO = cond(dh)
	ecx = edi
	ch = ch + 0x5D
	SCZO = cond(ch)
	ecx = ecx ^ edx
	SZO = cond(ecx)
	C = false
	cl = cl - bh
	SCZO = cond(cl)
	bh = bh - 0x01
	SZO = cond(bh)
	ch = 0xB5
	// succ:  l00401018_thunk_fn00401079
l00401018_thunk_fn00401079:
	call fn00401079 (retsize: 0;)
	return
	// succ:  fn004010C3_exit
l004010C3:
	esp = fp
	Mem0[esp - 0x0000001C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = edx
	dh = dh + 0x9C
	SCZO = cond(dh)
	ecx = ecx + eax
	SCZO = cond(ecx)
	cl = 0x45
	dh = dh | bh
	SZO = cond(dh)
	C = false
	goto l00401006
	// succ:  l00401006
fn004010C3_exit:


// fn004010DC
// Return size: 0
void fn004010DC()
fn004010DC_entry:
	// succ:  l004010DC
l004010DC:
	esp = fp
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = ecx
	esi = esi + 0x00000001
	SZO = cond(esi)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	esi = esi + eax
	SCZO = cond(esi)
	esi = esi | ecx
	SZO = cond(esi)
	C = false
	edx = edx + 0x00000001
	SZO = cond(edx)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	// succ:  l004010EC_thunk_fn004011E7
l004010EC_thunk_fn004011E7:
	call fn004011E7 (retsize: 0;)
	return
	// succ:  fn004010DC_exit
fn004010DC_exit:


// fn004010F9
// Return size: 0
void fn004010F9()
fn004010F9_entry:
	// succ:  l004010F9
l004010F9:
	esp = fp
	esp = esp + 0x00000004
	edi = eax
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edi = edi | eax
	SZO = cond(edi)
	C = false
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	edi = edi | ecx
	SZO = cond(edi)
	C = false
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00401106_thunk_fn00401250
l00401106_thunk_fn00401250:
	call fn00401250 (retsize: 0;)
	return
	// succ:  fn004010F9_exit
fn004010F9_exit:


// fn0040110F
// Return size: 0
void fn0040110F()
fn0040110F_entry:
	// succ:  l0040110F
l0040110F:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = edi
	edi = v3
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax ^ edx
	SZO = cond(eax)
	C = false
	ecx = ecx | edi
	SZO = cond(ecx)
	C = false
	edx = edx + 0x00000001
	SZO = cond(edx)
	eax = eax - ebx
	SCZO = cond(eax)
	ecx = ecx ^ edi
	SZO = cond(ecx)
	C = false
	eax = eax + 0x00000001
	SZO = cond(eax)
	esi = esi - edi
	SCZO = cond(esi)
	call fn00401328 (retsize: 4;)
	v15 = Mem0[ebp + 0xD53BEDBF:byte] + cl + C
	Mem0[ebp + 0xD53BEDBF:byte] = v15
	SCZO = cond(v15)
	esi = esi - 0x00000001
	SZO = cond(esi)
	// succ:  l0040112C_thunk_fn0040112D
l0040112C_thunk_fn0040112D:
	call fn0040112D (retsize: 0;)
	return
	// succ:  fn0040110F_exit
fn0040110F_exit:


// fn0040112D
// Return size: 0
void fn0040112D()
fn0040112D_entry:
	// succ:  l0040112D
l0040112D:
	edx = edx - eax
	SCZO = cond(edx)
	edx = edx + eax
	SCZO = cond(edx)
	ebx = ebx - eax
	SCZO = cond(ebx)
	edi = edi | edx
	SZO = cond(edi)
	C = false
	ebx = ecx
	esi = esi + edi
	SCZO = cond(esi)
	call fn00401176 (retsize: 4;)
	Mem0[ebp + 0x586FB225:int64] = (int64) rArg0
	// succ:  l0040113E_thunk_fn00401144
l0040113E_thunk_fn00401144:
	call fn00401144 (retsize: 0;)
	return
	// succ:  fn0040112D_exit
fn0040112D_exit:


// fn00401144
// Return size: 0
void fn00401144()
fn00401144_entry:
	// succ:  l00401144
l00401144:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	edx = edx - ebx
	SCZO = cond(edx)
	edx = edx - ecx
	SCZO = cond(edx)
	edi = ebx
	ecx = ecx ^ edx
	SZO = cond(ecx)
	C = false
	edx = edx + 0x00000001
	SZO = cond(edx)
	edi = edi - 0x00000001
	SZO = cond(edi)
	edx = edx - ebx
	SCZO = cond(edx)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	branch Test(EQ,Z) l0040112D
	goto l00401156
	// succ:  l00401156 l00401154_thunk_fn0040112D
l00401154_thunk_fn0040112D:
	call fn0040112D (retsize: 0;)
	return
	// succ:  fn00401144_exit
l00401156:
	al = al
	branch Test(NE,Z) l0040112D
	goto l0040115A
	// succ:  l0040115A l00401158_thunk_fn0040112D
l00401158_thunk_fn0040112D:
	call fn0040112D (retsize: 0;)
	return
	// succ:  fn00401144_exit
l0040115A:
	al = al - 0x01 - C
	SCZO = cond(al)
	dl = dl | Mem0[esi:byte]
	SZO = cond(dl)
	C = false
	branch Test(NE,Z) l00401160
	// succ:  l0040115E_thunk_fn00401160
l0040115E_thunk_fn00401160:
	call fn00401160 (retsize: 0;)
	return
	// succ:  fn00401144_exit
fn00401144_exit:


// fn00401160
// Return size: 0
void fn00401160()
fn00401160_entry:
	// succ:  l00401160
l00401160:
	esi = esi + ecx
	SCZO = cond(esi)
	ebx = eax
	ecx = ebx
	ebx = ebx | eax
	SZO = cond(ebx)
	C = false
	edx = edx - 0x00000001
	SZO = cond(edx)
	edx = edx ^ eax
	SZO = cond(edx)
	C = false
	call fn0040101F (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	ss = Mem0[esp:selector]
	esp = esp + 0x00000002
	Mem0[edi:word32] = edi
	ds_ebx = Mem0[0x24348939:segptr32]
fn00401160_exit:


// fn00401176
// Return size: 0
void fn00401176()
fn00401176_entry:
	// succ:  l00401176
l00401176:
	esp = fp
	Mem0[esp:word32] = esi
fn00401176_exit:


// fn00401194
// Return size: 0
void fn00401194()
fn00401194_entry:
	// succ:  l00401194
l00401194:
	esp = fp
	edx = edx - edi
	SCZO = cond(edx)
	ecx = ecx - esi
	SCZO = cond(ecx)
	esi = esi + 0x00000001
	SZO = cond(esi)
	edi = edi - ebx
	SCZO = cond(edi)
	goto l0040137C
	// succ:  l0040137C
l00401194:
l0040137C:
fn00401194_exit:


// fn004011C8
// Return size: 4
void fn004011C8()
fn004011C8_entry:
	// succ:  l004011C8
l004011C8:
	esp = fp
	Mem0[esp - 0x00000034:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi - 0x00000001
	SZO = cond(esi)
	ecx = ecx - edx
	SCZO = cond(ecx)
	edx = edx ^ ebx
	SZO = cond(edx)
	C = false
	ecx = ebx
	edi = edi - edx
	SCZO = cond(edi)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	esi = ecx
	edx = edx + edi
	SCZO = cond(edx)
	edi = edi - 0x00000001
	SZO = cond(edi)
	call fn00401261 (retsize: 4;)
	v11 = eax
	eax = edi
	edi = v11
	es_ebp = Mem0[ebp + 0x0000001D:segptr32]
	v16 = eax
	eax = esi
	esi = v16
	return
	// succ:  fn004011C8_exit
fn004011C8_exit:


// fn004011E7
// Return size: 0
void fn004011E7()
fn004011E7_entry:
	goto l004011E7
	// succ:  l004011E7
l00401040:
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	cl = 0x67
	esi = esi + 0x00000001
	SZO = cond(esi)
	dh = dh + 0x01
	SZO = cond(dh)
	dh = 0x08
	esi = edx
	cl = cl ^ bh
	SZO = cond(cl)
	C = false
	call fn004010C3 (retsize: 4;)
	v19 = eax
	eax = esi
	esi = v19
	ax = __aam(al)
	cl = cl & Mem0[edx:byte]
	SZO = cond(cl)
	C = false
	__outb(0x39, al)
	branch Test(LE,SZO) TMP!
l00401059_thunk_fn00401086:
	call fn00401086 (retsize: 0;)
	return
	// succ:  fn004011E7_exit
l004011A9:
	ebx = ebx - eax
	SCZO = cond(ebx)
	ecx = ecx - edx
	SCZO = cond(ecx)
	bh = bh + 0x3E + C
	SCZO = cond(bh)
	bh = bh - ah
	SCZO = cond(bh)
	branch Test(ULT,C) l00401040
	// succ:  l004011B8 l00401040
l004011B8:
	ebx = ebx
	branch Test(UGE,C) l00401040
	// succ:  l004011C0 l00401040
l004011C0:
	al = Mem0[esi:byte]
	esi = esi + 0x00000001
	SCZO = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004011E7_exit
l004011E7:
	esp = fp
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edx = edx ^ edi
	SZO = cond(edx)
	C = false
	edx = edx - 0x00000001
	SZO = cond(edx)
	ecx = ecx ^ ebx
	SZO = cond(ecx)
	C = false
	esi = esi + edx
	SCZO = cond(esi)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	eax = eax & 0xEEEEEEEE
	SZO = cond(eax)
	C = false
	edx = edx + 0x00000001
	SZO = cond(edx)
	ebx = ebx ^ edi
	SZO = cond(ebx)
	C = false
	ebx = ebx - edx
	SCZO = cond(ebx)
	call fn00401098 (retsize: 4;)
	branch Test(SG,S) l004011A9
	goto l00401201
	// succ:  l00401201 l004011A9
l004011E7:
l00401201:
	al = al + 0x06
	SCZO = cond(al)
	// succ:  l00401201_thunk_fn00401204
l00401201_thunk_fn00401204:
	call fn00401204 (retsize: 0;)
	return
	// succ:  fn004011E7_exit
fn004011E7_exit:


// fn00401204
// Return size: 0
void fn00401204()
fn00401204_entry:
	goto l00401204
	// succ:  l00401204
l0040105A:
	edx = edx - esi
	SCZO = cond(edx)
	call fn004010DC (retsize: 4;)
	goto l0040105B
	// succ:  l0040105B
l00401204:
	edi = edi + eax
	SCZO = cond(edi)
	esi = esi + 0x00000001
	SZO = cond(esi)
	ecx = ecx + edi
	SCZO = cond(ecx)
	esi = eax
	esi = esi - 0x00000001
	SZO = cond(esi)
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	esi = esi - ecx
	SCZO = cond(esi)
	edx = edx + 0x00000001
	SZO = cond(edx)
	branch Test(EQ,Z) l0040105A
	// succ:  l00401218 l0040105A
l00401218:
	di = edi
	bx = ebx
	branch Test(NE,Z) l0040105A
	// succ:  l00401224 l0040105A
l00401224:
	D = false
	bl = bl & Mem0[edi + 0x00000013:byte]
	SZO = cond(bl)
	C = false
	edx_eax = (int64) eax
	branch Test(NO,O) l0040125E
	// succ:  l0040122B l0040125E
l0040122B:
l0040125E:
	cl = Mem0[eax + 0x24648D5C:byte]
	// succ:  l0040125E_thunk_fn00401264
l0040125E_thunk_fn00401264:
	call fn00401264 (retsize: 0;)
	return
	// succ:  fn00401204_exit
fn00401204_exit:


// fn00401250
// Return size: 0
void fn00401250()
fn00401250_entry:
	// succ:  l00401250
l00401250:
	esp = fp
	esi = esi + 0x00000001
	SZO = cond(esi)
	eax = eax | ebx
	SZO = cond(eax)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	edx = edx | esi
	SZO = cond(edx)
	C = false
	eax = eax + edi
	SCZO = cond(eax)
	goto l00401293
	// succ:  l00401293
l00401250:
l00401293:
	eax = eax + 0x00000001
	SZO = cond(eax)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	edi = edi - edx
	SCZO = cond(edi)
	esi = esi - ecx
	SCZO = cond(esi)
	edi = ecx
	edi = edi + edx
	SCZO = cond(edi)
	edx = edx - edi
	SCZO = cond(edx)
	call fn0040110F (retsize: 4;)
	branch Test(NO,O) l004012A4_thunk_fn0040131A
	goto l004012A6
	// succ:  l004012A6 l004012A4_thunk_fn0040131A
l004012A4_thunk_fn0040131A:
	call fn0040131A (retsize: 0;)
	return
	// succ:  fn00401250_exit
l004012A6:
	esi = Mem0[edx + 0x00000066:word32] *s 0x0000001F
	SCZO = cond(esi)
	call fn004011C8 (retsize: 4;)
	// succ:  l004012A6_thunk_fn004012AA l004012B9_thunk_fn004012BE
l004012A6_thunk_fn004012AA:
	call fn004012AA (retsize: 0;)
	return
l004012A7:
	goto fn00401250_exit
	// succ:  fn00401250_exit
l004012B9_thunk_fn004012BE:
	call fn004012BE (retsize: 0;)
	return
	// succ:  fn00401250_exit
fn00401250_exit:


// fn00401261
// Return size: 0
void fn00401261()
fn00401261_entry:
	// succ:  l00401261
l00401261:
	esp = fp
	esp = esp + 0x00000004
	// succ:  l00401261_thunk_fn00401264
l00401261_thunk_fn00401264:
	call fn00401264 (retsize: 0;)
	return
	// succ:  fn00401261_exit
l00401274_thunk_fn00401311:
	call fn00401311 (retsize: 0;)
	return
	// succ:  fn00401261_exit
fn00401261_exit:


// fn00401264
// Return size: 0
void fn00401264()
fn00401264_entry:
	// succ:  l00401264
l00401264:
	esp = fp
	al = al + 0x43
	SCZO = cond(al)
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	ebx = ebx + ecx
	SCZO = cond(ebx)
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	esi = ecx
	eax = Mem0[eax + 0x00000090:word32]
	// succ:  l00401274_thunk_fn00401311 l00401274_thunk_fn00401311
l00401264:
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	ebx = ebx + ecx
	SCZO = cond(ebx)
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	esi = ecx
	eax = Mem0[eax + 0x00000090:word32]
l00401274_thunk_fn00401311:
	call fn00401311 (retsize: 0;)
	return
	// succ:  fn00401264_exit
fn00401264_exit:


// fn004012AA
// Return size: 0
void fn004012AA()
fn004012AA_entry:
	// succ:  l004012AA
l004012AA:
	esp = fp
	eax = Mem0[fs:0x00000030:word32]
	edx = edx - 0x00000001
	SZO = cond(edx)
	esi = esi - edx
	SCZO = cond(esi)
	esi = esi - ecx
	SCZO = cond(esi)
	edx = edx | esi
	SZO = cond(edx)
	C = false
	ecx = ecx - esi
	SCZO = cond(ecx)
	call fn004011C8 (retsize: 4;)
	goto l004012B9_thunk_fn004012BE
	// succ:  l004012B9_thunk_fn004012BE
l004012AA:
	eax = Mem0[fs:0x00000030:word32]
	edx = edx - 0x00000001
	SZO = cond(edx)
	esi = esi - edx
	SCZO = cond(esi)
	esi = esi - ecx
	SCZO = cond(esi)
	edx = edx | esi
	SZO = cond(edx)
	C = false
	ecx = ecx - esi
	SCZO = cond(ecx)
l004012B9_thunk_fn004012BE:
	call fn004012BE (retsize: 0;)
	return
	// succ:  fn004012AA_exit
fn004012AA_exit:


// fn004012BE
// Return size: 0
void fn004012BE()
fn004012BE_entry:
	// succ:  l004012BE
l004012BE:
	esp = fp
	SCZO = cond(eax - Mem0[edi:word32])
	edi = edi + 0x00000004
	v7 = Mem0[0x431735BD:word32] ^ ebx
	Mem0[0x431735BD:word32] = v7
	SZO = cond(Mem0[0x431735BD:word32])
	C = false
	goto l004012BF_thunk_fn004012C5
	// succ:  l004012BF_thunk_fn004012C5
l004012BE:
	SCZO = cond(eax - Mem0[edi:word32])
	edi = edi + 0x00000004
	v10 = Mem0[0x431735BD:word32] ^ ebx
	Mem0[0x431735BD:word32] = v10
	SZO = cond(Mem0[0x431735BD:word32])
	C = false
	goto l004012BF_thunk_fn004012C5
	// succ:  l004012BF_thunk_fn004012C5
l004012BF_thunk_fn004012C5:
	call fn004012C5 (retsize: 0;)
	return
	// succ:  fn004012BE_exit
l004012BF_thunk_fn004012C5:
	call fn004012C5 (retsize: 0;)
	return
	// succ:  fn004012BE_exit
fn004012BE_exit:


// fn004012C5
// Return size: 0
void fn004012C5()
fn004012C5_entry:
	// succ:  l004012C5
l004012C5:
	esp = fp
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ecx = ecx ^ esi
	SZO = cond(ecx)
	C = false
	edi = edx
	edi = ecx
	ecx = ecx - ebx
	SCZO = cond(ecx)
	esi = esi | eax
	SZO = cond(esi)
	C = false
	ebx = ebx | eax
	SZO = cond(ebx)
	C = false
	goto l004012D3_thunk_fn004012AA
	// succ:  l004012D3_thunk_fn004012AA
l004012C5:
l004012D3_thunk_fn004012AA:
	call fn004012AA (retsize: 0;)
	return
	// succ:  fn004012C5_exit
fn004012C5_exit:


// fn004012DB
// Return size: 0
void fn004012DB()
fn004012DB_entry:
	// succ:  l004012DB
l004012DB:
	esp = fp
	ecx = ecx + eax
	SCZO = cond(ecx)
	edi = edi - 0x00000001
	SZO = cond(edi)
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edx = edx + 0x00000001
	SZO = cond(edx)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	edx = edx - esi
	SCZO = cond(edx)
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	call fn004010F9 (retsize: 4;)
	eax = __indw(0x82)
	ecx = ecx - 0x00000001
	branch Test(NE,Z) && ecx != 0x00000000 TMP!
l004012DB:
fn004012DB_exit:


// fn004012F3
// Return size: 0
void fn004012F3()
fn004012F3_entry:
	// succ:  l004012F3
l004012F3:
	esp = fp
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	edx = ebx
	ecx = ecx - esi
	SCZO = cond(ecx)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ebx = edx
	edx = edx ^ ecx
	SZO = cond(edx)
	C = false
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	edi = edi + 0x00000001
	SZO = cond(edi)
	ecx = ecx - ebx
	SCZO = cond(ecx)
	branch Test(PE,P) l00401303_thunk_fn004012C5
	goto l00401305
	// succ:  l00401305 l00401303_thunk_fn004012C5
l004012F3:
l00401303_thunk_fn004012C5:
	call fn004012C5 (retsize: 0;)
	return
	// succ:  fn004012F3_exit
l00401305:
	bl = bl
	esp = esp - 0x00000002
	Mem0[esp:word16] = di
	di = Mem0[esp:word16]
	esp = esp + 0x00000002
	branch Test(PO,P) l0040130B_thunk_fn004012C5
	goto l0040130D
	// succ:  l0040130D l0040130B_thunk_fn004012C5
l0040130B_thunk_fn004012C5:
	call fn004012C5 (retsize: 0;)
	return
	// succ:  fn004012F3_exit
l0040130D:
	v14 = eax
	eax = edx
	edx = v14
	cl = cl | Mem0[ecx + 0xF90B4147:byte]
	SZO = cond(cl)
	C = false
	// succ:  l0040130E_thunk_fn00401315
l0040130E_thunk_fn00401315:
	call fn00401315 (retsize: 0;)
	return
	// succ:  fn004012F3_exit
fn004012F3_exit:


// fn00401311
// Return size: 0
void fn00401311()
fn00401311_entry:
	// succ:  l00401311
l00401311:
	esp = fp
	edi = edi + 0x00000001
	SZO = cond(edi)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	edi = edi | ecx
	SZO = cond(edi)
	C = false
	// succ:  l00401313_thunk_fn00401315 l00401319_thunk_fn0040131B
l00401311:
l00401313_thunk_fn00401315:
	call fn00401315 (retsize: 0;)
	return
	// succ:  fn00401311_exit
l00401319_thunk_fn0040131B:
	call fn0040131B (retsize: 0;)
	return
	// succ:  fn00401311_exit
fn00401311_exit:


// fn00401315
// Return size: 0
void fn00401315()
fn00401315_entry:
	// succ:  l00401315
l00401315:
	esp = fp
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ecx = ecx + edi
	SCZO = cond(ecx)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edx = edx + eax
	SCZO = cond(edx)
	goto l00401319_thunk_fn0040131B
	// succ:  l00401319_thunk_fn0040131B
l00401315:
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ecx = ecx + edi
	SCZO = cond(ecx)
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	edx = edx + eax
	SCZO = cond(edx)
l00401319_thunk_fn0040131B:
	call fn0040131B (retsize: 0;)
	return
	// succ:  fn00401315_exit
fn00401315_exit:


// fn0040131A
// Return size: 0
void fn0040131A()
fn0040131A_entry:
	// succ:  l0040131A
l0040131A:
	esp = fp
	v3 = (Mem0[ecx - 0x00000017:byte] & 0x01 << 0x08 - 0x01) != 0x00
	Mem0[ecx - 0x00000017:byte] = __rol(Mem0[ecx - 0x00000017:byte], 0x01)
	C = v3
	goto l0040131A_thunk_fn0040131B
	// succ:  l0040131A_thunk_fn0040131B
l0040131A:
l0040131A_thunk_fn0040131B:
	call fn0040131B (retsize: 0;)
	return
	// succ:  fn0040131A_exit
fn0040131A_exit:


// fn0040131B
// Return size: 0
void fn0040131B()
fn0040131B_entry:
	goto l0040131B
	// succ:  l0040131B
l00401281:
	esi = esi + 0x00000001
	SZO = cond(esi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ecx = ecx ^ esi
	SZO = cond(ecx)
	C = false
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	eax = Mem0[eax:word32]
l0040131B:
	esp = fp
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	goto l00401281
	// succ:  l00401281
l0040131B:
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
fn0040131B_exit:


// fn00401328
// Return size: 0
void fn00401328()
fn00401328_entry:
	// succ:  l00401328
l00401328:
	esp = fp
	Mem0[esp - 0x00000030:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax - esi
	SCZO = cond(eax)
	esi = esi + 0x00000001
	SZO = cond(esi)
	ecx = ecx + eax
	SCZO = cond(ecx)
	ecx = esi
	edi = edi + 0x00000001
	SZO = cond(edi)
	branch Test(SG,S) l00401334_thunk_fn00401194
	goto l0040133A
	// succ:  l0040133A l00401334_thunk_fn00401194
l00401334_thunk_fn00401194:
	call fn00401194 (retsize: 0;)
	return
	// succ:  fn00401328_exit
l0040133A:
	v10 = ch
	ch = ch
	ch = v10
	branch Test(LT,SO) l0040133E
	// succ:  l0040133E
l0040133E:
	branch Test(NS,S) l0040133E_thunk_fn00401194
	goto l00401344
	// succ:  l00401344 l0040133E_thunk_fn00401194
l0040133E_thunk_fn00401194:
	call fn00401194 (retsize: 0;)
	return
	// succ:  fn00401328_exit
l00401344:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	eax = eax - 0x42838019
	SCZO = cond(eax)
	// succ:  l00401345_thunk_fn0040134A
l00401345_thunk_fn0040134A:
	call fn0040134A (retsize: 0;)
	return
	// succ:  fn00401328_exit
fn00401328_exit:


// fn00401349
// Return size: 4
void fn00401349()
fn00401349_entry:
	// succ:  l00401349
l00401349:
	esp = fp
	edx = edx + 0x00000001
	SZO = cond(edx)
	goto l00401349_thunk_fn0040134A
	// succ:  l00401349_thunk_fn0040134A
l00401349:
l00401349_thunk_fn0040134A:
	call fn0040134A (retsize: 0;)
	return
	// succ:  fn00401349_exit
l00401357_thunk_fn004012DB:
	call fn004012DB (retsize: 0;)
	return
	// succ:  fn00401349_exit
l00401357_thunk_fn00401359:
	call fn00401359 (retsize: 0;)
	return
	// succ:  fn00401349_exit l00401357_thunk_fn00401359
l00401357_thunk_fn00401359:
	call fn00401359 (retsize: 0;)
	return
	// succ:  fn00401349_exit
fn00401349_exit:


// fn0040134A
// Return size: 0
void fn0040134A()
fn0040134A_entry:
	// succ:  l0040134A
l0040134A:
	esp = fp
	ecx = ecx - edx
	SCZO = cond(ecx)
	edx = edx | ebx
	SZO = cond(edx)
	C = false
	eax = eax | eax
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l00401350_thunk_fn00401353
	goto l00401352_in_fn0040134A
	// succ:  l00401352_in_fn0040134A l00401350_thunk_fn00401353
l0040134A:
	ecx = ecx - edx
	SCZO = cond(ecx)
	edx = edx | ebx
	SZO = cond(edx)
	C = false
	eax = eax | eax
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l00401353
	goto l00401352
	// succ:  l00401352 l00401350_thunk_fn00401353
l00401350_thunk_fn00401353:
	call fn00401353 (retsize: 0;)
	return
	// succ:  fn0040134A_exit
l00401350_thunk_fn00401353:
	call fn00401353 (retsize: 0;)
	return
	// succ:  fn0040134A_exit
l00401352:
	return
	// succ:  fn0040134A_exit
l00401352_in_fn0040134A:
	return
	// succ:  fn0040134A_exit l00401352_in_fn0040134A
l00401352_in_fn0040134A:
	return
	// succ:  fn0040134A_exit
fn0040134A_exit:


// fn00401353
// Return size: 0
void fn00401353()
fn00401353_entry:
	// succ:  l00401353
l00401353:
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	ebx = edx
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	branch Test(SG,S) l00401357_thunk_fn004012DB
	goto l00401357_thunk_fn00401359
	// succ:  l00401357_thunk_fn00401359 l00401357_thunk_fn004012DB
fn00401353_exit:


// fn00401359
// Return size: 0
void fn00401359()
fn00401359_entry:
	// succ:  l00401359
l00401359:
	esp = fp
	al = al
	branch Test(NS,S) l0040135B_thunk_fn004012DB
	goto l00401361
	// succ:  l00401361 l0040135B_thunk_fn004012DB
l00401359:
l0040135B_thunk_fn004012DB:
	call fn004012DB (retsize: 0;)
	return
	// succ:  fn00401359_exit
l00401361:
	SCZO = cond(Mem0[ecx:word32] - eax)
	C = false
	Z = __arpl(bx, bx, &bx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	// succ:  l00401366_thunk_fn00401367
l00401366_thunk_fn00401367:
	call fn00401367 (retsize: 0;)
	return
	// succ:  fn00401359_exit
fn00401359_exit:


// fn00401367
// Return size: 4
void fn00401367()
fn00401367_entry:
	// succ:  l00401367
l00401367:
	esp = fp
	edx = edx - 0x00000001
	SZO = cond(edx)
	ebx = ebx ^ edi
	SZO = cond(ebx)
	C = false
	edi = edx
	esi = esi + 0x00000001
	SZO = cond(esi)
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	ebx = ebx ^ edi
	SZO = cond(ebx)
	C = false
	edx = edx + eax
	SCZO = cond(edx)
	goto l00401375_thunk_fn00401349
	// succ:  l00401375_thunk_fn00401349
l00401367:
l00401375_thunk_fn00401349:
	call fn00401349 (retsize: 4;)
	return
	// succ:  fn00401367_exit
fn00401367_exit:


// fn00401FFD
// Return size: 0
void fn00401FFD()
fn00401FFD_entry:
	// succ:  l00401FFD
l00401FFD:
	esp = fp
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	bh = bh | cl
	SZO = cond(bh)
	C = false
	bh = 0x61
	esi = esi - 0x00000001
	SZO = cond(esi)
	bl = ~bl
	eax = eax + ecx
	SCZO = cond(eax)
	edi = edi + 0x00000001
	SZO = cond(edi)
	bl = bl + 0xE8 + C
	SCZO = cond(bl)
	goto l0040200C_thunk_fn0040253B
	// succ:  l0040200C_thunk_fn0040253B
l00401FFD:
l0040200C_thunk_fn0040253B:
	call fn0040253B (retsize: 0;)
	return
	// succ:  fn00401FFD_exit
fn00401FFD_exit:


// fn00402015
// Return size: 0
void fn00402015()
fn00402015_entry:
	// succ:  l00402015
l00402015:
	esp = fp
	Mem0[esp - 0x00000020:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	dh = dh ^ cl
	SZO = cond(dh)
	C = false
	cl = cl - 0x42 - C
	SCZO = cond(cl)
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	esi = esi + ebx
	SCZO = cond(esi)
	ch = ~ch
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	dl = dl - 0x30 - C
	SCZO = cond(dl)
	// succ:  l00402026_thunk_fn00402BF7
l00402026_thunk_fn00402BF7:
	call fn00402BF7 (retsize: 0;)
	return
	// succ:  fn00402015_exit
fn00402015_exit:


// fn00402068
// Return size: 6
void fn00402068()
fn00402068_entry:
	// succ:  l00402068
l00402068:
	esp = fp
	esp = esp + 0x00000004
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	esi = esi + 0x00000001
	SZO = cond(esi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	cl = cl ^ dh
	SZO = cond(cl)
	C = false
	cl = cl ^ al
	SZO = cond(cl)
	C = false
	ch = ~ch
	cl = cl - 0x01
	SZO = cond(cl)
	cl = cl - 0x58 - C
	SCZO = cond(cl)
	// succ:  l00402EF2
l00402EF2:
	ch = ch - 0xD4 - C
	SCZO = cond(ch)
	ch = ch + 0x0F
	SCZO = cond(ch)
	ecx = ecx + edi
	SCZO = cond(ecx)
	ch = ch ^ al
	SZO = cond(ch)
	C = false
	ch = ch + 0x01
	SZO = cond(ch)
	cl = cl - 0x01
	SZO = cond(cl)
	ch = ch - 0x0F - C
	SCZO = cond(ch)
	dl = dl - 0xF5
	SCZO = cond(dl)
	esi = esi + ecx
	SCZO = cond(esi)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	call fn004027A3 (retsize: 4;)
	return
	// succ:  fn00402068_exit
fn00402068_exit:


// fn004020DA
// Return size: 0
void fn004020DA()
fn004020DA_entry:
	// succ:  l004020DA
l004020DA:
	esp = fp
	Mem0[esp - 0x00000028:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	ch = dl
	eax = eax - 0x00000001
	SZO = cond(eax)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	esi = esi | edi
	SZO = cond(esi)
	C = false
	cl = cl ^ bh
	SZO = cond(cl)
	C = false
	branch Test(SG,S) l004020E6_thunk_fn00402739
	goto l004020EC
	// succ:  l004020EC l004020E6_thunk_fn00402739
l004020E6_thunk_fn00402739:
	call fn00402739 (retsize: 0;)
	return
	// succ:  fn004020DA_exit
l004020EC:
	v14 = dl
	dl = dl
	dl = v14
fn004020DA_exit:


// fn004020FA
// Return size: 0
void fn004020FA()
fn004020FA_entry:
	// succ:  l004020FA
l004020FA:
	Mem0[esp - 0x00000028:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = ch
	esi = esi + 0x00000001
	SZO = cond(esi)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	ebx = edi
	bl = 0x0A
	bh = bh + al
	SCZO = cond(bh)
	bl = ~bl
	bh = ~bh
	eax = eax | eax
	SZO = cond(eax)
	C = false
	// succ:  l00402DD4
l00402DD4:
	branch Test(NE,Z) l004026D8
	goto l00402DDA
	// succ:  l00402DDA l00402DD4_thunk_fn004026D8
l00402DD4_thunk_fn004026D8:
	call fn004026D8 (retsize: 0;)
	return
	// succ:  fn004020FA_exit
l00402DDA:
	bh = bh + cl
	SCZO = cond(bh)
	bl = bl ^ bh
	SZO = cond(bl)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	edi = edi + 0x00000001
	SZO = cond(edi)
	ebx = ebx + edi
	SCZO = cond(ebx)
	branch Test(OV,O) l00402DE2_thunk_fn0040290B
	goto l00402DE8
	// succ:  l00402DE8 l00402DE2_thunk_fn0040290B
l00402DE2_thunk_fn0040290B:
	call fn0040290B (retsize: 0;)
	return
	// succ:  fn004020FA_exit
l00402DE8:
	branch Test(NO,O) l00402DEA
	// succ:  l00402DEA
l00402DEA:
	branch Test(NO,O) l00402DEA_thunk_fn0040290B
	goto l00402DF0
	// succ:  l00402DF0 l00402DEA_thunk_fn0040290B
l00402DEA_thunk_fn0040290B:
	call fn0040290B (retsize: 0;)
	return
	// succ:  fn004020FA_exit
l00402DF0:
	ss = Mem0[esp:selector]
	esp = esp + 0x00000002
	// succ:  l31DC3342
l31DC3342:
fn004020FA_exit:


// fn00402159
// Return size: 0
void fn00402159()
fn00402159_entry:
	// succ:  l00402159
l00402159:
	edi = edi - 0x00000001
	SZO = cond(edi)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	edi = esi
	bh = bh | dl
	SZO = cond(bh)
	C = false
	edx = edx + edi
	SCZO = cond(edx)
	ecx = ecx << 0x0000000F
	SCZO = cond(ecx)
	esi = eax
	branch Test(ULE,CZ) l0040246D
	goto l0040216C
	// succ:  l0040216C l00402166_thunk_fn00402173
l00402166_thunk_fn00402173:
	call fn00402173 (retsize: 0;)
	return
	// succ:  fn00402159_exit
l0040216C:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	v15 = ecx
	ecx = ecx
	ecx = v15
	branch Test(UGT,CZ) l0040246D
fn00402159_exit:


// fn00402173
// Return size: 0
void fn00402173()
fn00402173_entry:
	// succ:  l00402173
l00402173:
	esp = fp
	al = al + Mem0[eax:byte]
	SCZO = cond(al)
	v7 = Mem0[eax - 0x0000002F:byte] + cl
	Mem0[eax - 0x0000002F:byte] = v7
	SCZO = cond(v7)
	goto l00402175_thunk_fn00402178
	// succ:  l00402175_thunk_fn00402178
l00402173:
	// succ:  l00402176 l0040246D
l00402175_thunk_fn00402178:
	call fn00402178 (retsize: 0;)
	return
	// succ:  fn00402173_exit
l00402176:
	eax = eax - 0x00000001
	SZO = cond(eax)
	v9 = (Mem0[eax:word32] & 0x00000001 << 0x01) != 0x00000000
	Mem0[eax:word32] = __rcr(Mem0[eax:word32], 0x01, C)
	C = v9
	// succ:  l00402177_thunk_fn00402178 l00402179_thunk_fn0040217F
l00402177_thunk_fn00402178:
	call fn00402178 (retsize: 0;)
	return
	// succ:  fn00402173_exit
l0040246D:
	ebx = ebx - edi
	SCZO = cond(ebx)
	bl = 0x9E
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	al = al + bl
	SCZO = cond(al)
	dl = dl - 0x5E - C
	SCZO = cond(dl)
	bl = bl + 0x38 + C
	SCZO = cond(bl)
	bh = bh + 0x01
	SZO = cond(bh)
	dl = dl | bl
	SZO = cond(dl)
	C = false
	dh = dh + 0x43
	SCZO = cond(dh)
	// succ:  l00402482_thunk_fn004024EE
l00402482_thunk_fn004024EE:
	call fn004024EE (retsize: 0;)
	return
	// succ:  fn00402173_exit
fn00402173_exit:


// fn00402178
// Return size: 0
void fn00402178()
fn00402178_entry:
	// succ:  l00402178
l00402178:
	esp = fp
	v6 = Mem0[eax:byte] - ah - C
	Mem0[eax:byte] = v6
	SCZO = cond(v6)
	SZO = cond(eax & 0xD98BAC70)
	C = false
	goto l0040217A_thunk_fn0040217F
	// succ:  l0040217A_thunk_fn0040217F
l00402178:
	v11 = Mem0[ecx + 0xD98BAC70:byte] & ch
	Mem0[ecx + 0xD98BAC70:byte] = v11
	SZO = cond(Mem0[ecx + 0xD98BAC70:byte])
	C = false
l0040217A_thunk_fn0040217F:
	call fn0040217F (retsize: 0;)
	return
	// succ:  fn00402178_exit
fn00402178_exit:


// fn0040217F
// Return size: 0
void fn0040217F()
fn0040217F_entry:
	// succ:  l0040217F
l0040217F:
	esp = fp
	edi = edi + edx
	SCZO = cond(edi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	bl = bl + 0xDF + C
	SCZO = cond(bl)
	ebx = ebx ^ edi
	SZO = cond(ebx)
	C = false
	bl = bl + 0xCA
	SCZO = cond(bl)
	edi = edi + 0x00000001
	SZO = cond(edi)
	bl = bl - 0x01
	SZO = cond(bl)
	edx = eax + 0x000000F8
	call fn004025C3 (retsize: 4;)
	esp = esp + 0xFFFFFFFA
	branch Test(UGE,C) l00402198_thunk_fn00402173
	goto l0040219A
	// succ:  l0040219A l00402198_thunk_fn00402173
l0040217F:
	edi = edi + edx
	SCZO = cond(edi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	bl = bl + 0xDF + C
	SCZO = cond(bl)
	ebx = ebx ^ edi
	SZO = cond(ebx)
	C = false
	bl = bl + 0xCA
	SCZO = cond(bl)
	edi = edi + 0x00000001
	SZO = cond(edi)
	bl = bl - 0x01
	SZO = cond(bl)
	edx = eax + 0x000000F8
l00402198_thunk_fn00402173:
	call fn00402173 (retsize: 0;)
	return
	// succ:  fn0040217F_exit
l0040219A:
fn0040217F_exit:


// fn004021CB
// Return size: 6
void fn004021CB()
fn004021CB_entry:
	// succ:  l004021CB
l004021CB:
	esp = fp
	Mem0[esp - 0x0000000C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = bl + al
	SCZO = cond(bl)
	cl = cl - 0x13 - C
	SCZO = cond(cl)
	bl = bl + 0x01
	SZO = cond(bl)
	ch = ch + 0xA3
	SCZO = cond(ch)
	bh = ~bh
	cl = 0x50
	branch Test(LT,SO) l004021DD_thunk_fn004022E6
	goto l004021E3
	// succ:  l004021E3 l004021DD_thunk_fn004022E6
l004021DD_thunk_fn004022E6:
	call fn004022E6 (retsize: 6;)
	return
	// succ:  fn004021CB_exit
l004021E3:
	ah = ah
	esp = esp - 0x00000002
	Mem0[esp:word16] = dx
	dx = Mem0[esp:word16]
	esp = esp + 0x00000002
	branch Test(GE,SO) l004021E9_thunk_fn004022E6
	goto l004021EF
	// succ:  l004021EF l004021E9_thunk_fn004022E6
l004021E9_thunk_fn004022E6:
	call fn004022E6 (retsize: 6;)
	return
	// succ:  fn004021CB_exit
l004021EF:
	v16 = Mem0[esi:byte] + dl + C
	Mem0[esi:byte] = v16
	SCZO = cond(v16)
	return
	// succ:  fn004021CB_exit
fn004021CB_exit:


// fn004021F3
// Return size: 0
void fn004021F3()
fn004021F3_entry:
	goto l004021F3
	// succ:  l004021F3
l00402179_thunk_fn0040217F:
	call fn0040217F (retsize: 0;)
	return
	// succ:  fn004021F3_exit
l004021F3:
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = edx
	edx = v3
	ch = ch
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax + 0x00000001
	SZO = cond(eax)
	esi = esi + ecx
	SCZO = cond(esi)
	ah = ah + cl
	SCZO = cond(ah)
	ah = ah - 0x01
	SZO = cond(ah)
	eax = eax + edx
	SCZO = cond(eax)
	branch Test(OV,O) l00402159
	goto l00402208
	// succ:  l00402208 l00402202_thunk_fn00402159
l00402202_thunk_fn00402159:
	call fn00402159 (retsize: 0;)
	return
	// succ:  fn004021F3_exit
l00402208:
fn004021F3_exit:


// fn00402217
// Return size: 0
void fn00402217()
fn00402217_entry:
	goto l00402217
	// succ:  l00402217
l00402033:
	bl = bl + 0xDD
	SCZO = cond(bl)
	dh = dh + bl
	SCZO = cond(dh)
	dh = dh ^ al
	SZO = cond(dh)
	C = false
	dl = dl - 0xB3 - C
	SCZO = cond(dl)
	dl = dl + 0x92
	SCZO = cond(dl)
	edx = edi
	bh = bh + 0xE6
	SCZO = cond(bh)
	call fn00402311 (retsize: 4;)
	v19 = Mem0[esi:word32]
	Mem0[edi:word32] = v19
	esi = esi + 0x00000004
	edi = edi + 0x00000004
l00402217:
	edi = edi + ebx
	SCZO = cond(edi)
	eax = eax ^ ebx
	SZO = cond(eax)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[ecx:word32]
	ebx = ebx + edx
	SCZO = cond(ebx)
	edx = edx + ebx
	SCZO = cond(edx)
	edx = edx ^ esi
	SZO = cond(edx)
	C = false
	bl = cl
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	eax = edi
	branch Test(PE,P) l00402033
	// succ:  l0040222E l00402033
l0040222E:
fn00402217_exit:


// fn0040223D
// Return size: 0
void fn0040223D()
fn0040223D_entry:
	// succ:  l0040223D
l0040223D:
	esp = fp
	eax = 0xAE909635
	dl = 0xC0
	ch = ch + 0x40
	SCZO = cond(ch)
	esi = esi + 0x00000001
	SZO = cond(esi)
	dh = dh - 0x01
	SZO = cond(dh)
	ecx = ecx ^ ebx
	SZO = cond(ecx)
	C = false
	ecx = ecx - edx
	SCZO = cond(ecx)
	esi = esi | ecx
	SZO = cond(esi)
	C = false
	call fn00402015 (retsize: 4;)
	cl = 0x16
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh | cl
	SZO = cond(bh)
	C = false
	goto l00402258_thunk_fn0040225A
	// succ:  l00402258_thunk_fn0040225A
l0040223D:
l00402258_thunk_fn0040225A:
	call fn0040225A (retsize: 0;)
	return
	// succ:  fn0040223D_exit
fn0040223D_exit:


// fn0040225A
// Return size: 0
void fn0040225A()
fn0040225A_entry:
	// succ:  l0040225A
l0040225A:
	esp = fp
	Mem0[esp - 0x00000020:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh - al
	SCZO = cond(bh)
	al = al - bl
	SCZO = cond(al)
	cl = cl - dl
	SCZO = cond(cl)
	edi = edi + ebx
	SCZO = cond(edi)
	cl = 0x20
	bh = 0x3C
	ch = ~ch
	cl = cl + bl
	SCZO = cond(cl)
	edi = edi | eax
	SZO = cond(edi)
	C = false
	// succ:  l0040248B
l0040248B:
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = 0x03
	dh = dh + ch
	SCZO = cond(dh)
	edi = edi + eax
	SCZO = cond(edi)
	dh = dh - ch
	SCZO = cond(dh)
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	eax = eax ^ edx
	SZO = cond(eax)
	C = false
	ah = ah + al
	SCZO = cond(ah)
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	dh = dh ^ ch
	SZO = cond(dh)
	C = false
	branch Test(ULE,CZ) l004026CC
	// succ:  l004024A3 l004026CC
l004024A3:
	bx = bx
l004026CC:
	bl = bl + 0x4C + C
	SCZO = cond(bl)
	al = al ^ dh
	SZO = cond(al)
	C = false
	bh = bh + 0x84 + C
	SCZO = cond(bh)
	dh = dh ^ cl
	SZO = cond(dh)
	C = false
	dh = dh - 0x01
	SZO = cond(dh)
	// succ:  l004026D6_thunk_fn004026D8
l004026D6_thunk_fn004026D8:
	call fn004026D8 (retsize: 0;)
	return
	// succ:  fn0040225A_exit
fn0040225A_exit:


// fn0040227C
// Return size: 0
void fn0040227C()
fn0040227C_entry:
	goto l0040227C
	// succ:  l0040227C
l0040204F:
	cl = cl - 0x01
	SZO = cond(cl)
	ebx = eax
	ch = ch + 0x01
	SZO = cond(ch)
	dl = dl + 0x1E
	SCZO = cond(dl)
	cl = 0x97
	ecx = ecx ^ ebx
	SZO = cond(ecx)
	C = false
	// succ:  l0040205C_thunk_fn00402F15
l0040205C_thunk_fn00402F15:
	call fn00402F15 (retsize: 0;)
	return
	// succ:  fn0040227C_exit
l0040227C:
	ch = ch | ah
	SZO = cond(ch)
	C = false
	dl = bl
	dh = dh + 0x37 + C
	SCZO = cond(dh)
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	bh = bh + 0x4B + C
	SCZO = cond(bh)
	bh = 0xFC
	ebx = ebx ^ ecx
	SZO = cond(ebx)
	C = false
	branch Test(ULE,CZ) l0040204F
	// succ:  l00402292 l0040204F
l00402292:
fn0040227C_exit:


// fn0040229D
// Return size: 0
void fn0040229D()
fn0040229D_entry:
	// succ:  l0040229D
l0040229D:
	esp = fp
	dl = ~dl
	bh = bh + 0x66
	SCZO = cond(bh)
	edi = edi + ebx
	SCZO = cond(edi)
	ecx = ecx ^ edx
	SZO = cond(ecx)
	C = false
	bl = bl + 0x01
	SZO = cond(bl)
	bl = cl
	goto l004022AA_thunk_fn00402877
	// succ:  l004022AA_thunk_fn00402877
l0040229D:
l004022AA_thunk_fn00402877:
	call fn00402877 (retsize: 0;)
	return
	// succ:  fn0040229D_exit
fn0040229D_exit:


// fn004022B4
// Return size: 6
void fn004022B4()
fn004022B4_entry:
	// succ:  l004022B4
l004022B4:
	esp = fp
	bl = bl - dl
	SCZO = cond(bl)
	edi = edi - 0x00000001
	SZO = cond(edi)
	bl = dh
	edx = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh + 0x18
	SCZO = cond(bh)
	esi = edx
	call fn00402E65 (retsize: 4;)
	al = al | Mem0[eax:byte]
	SZO = cond(al)
	C = false
	edi = edi - esi
	SCZO = cond(edi)
	al = al & 0x60
	SZO = cond(al)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = es
	goto l004022CA_thunk_fn004022CB
	// succ:  l004022CA_thunk_fn004022CB
l004022B4:
l004022CA_thunk_fn004022CB:
	call fn004022CB (retsize: 6;)
	return
	// succ:  fn004022B4_exit
fn004022B4_exit:


// fn004022CB
// Return size: 6
void fn004022CB()
fn004022CB_entry:
	// succ:  l004022CB
l004022CB:
	esp = fp
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	ecx = ecx | edx
	SZO = cond(ecx)
	C = false
	bh = bh - 0x01
	SZO = cond(bh)
	cl = cl - 0x01
	SZO = cond(cl)
	dl = dl | ah
	SZO = cond(dl)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	cl = cl + 0xA3
	SCZO = cond(cl)
	cl = ch
	edx = ebx
	call fn00402558 (retsize: 4;)
	ebx = ebx & Mem0[edx - 0x0000006E:word32]
	SZO = cond(ebx)
	C = false
	esi = esi ^ edi
	SZO = cond(esi)
	C = false
	goto l004022E5_thunk_fn004022E7
	// succ:  l004022E5_thunk_fn004022E7
l004022CB:
l004022E5_thunk_fn004022E7:
	call fn004022E7 (retsize: 6;)
	return
	// succ:  fn004022CB_exit
fn004022CB_exit:


// fn004022E6
// Return size: 6
void fn004022E6()
fn004022E6_entry:
	// succ:  l004022E6
l004022E6:
	esp = fp
	bl = bl - 0x01
	SZO = cond(bl)
	goto l004022E6_thunk_fn004022E7
	// succ:  l004022E6_thunk_fn004022E7
l004022E6:
l004022E6_thunk_fn004022E7:
	call fn004022E7 (retsize: 6;)
	return
	// succ:  fn004022E6_exit
l004022FA_thunk_fn00402DB7:
	call fn00402DB7 (retsize: 4;)
	return
	// succ:  fn004022E6_exit
l00402300:
	di = edi
	branch Test(NE,Z) l00402303_thunk_fn00402DB7
	goto l00402309
	// succ:  l00402309 l00402303_thunk_fn00402DB7
l00402303_thunk_fn00402DB7:
	call fn00402DB7 (retsize: 4;)
	return
	// succ:  fn004022E6_exit
l00402309:
	ebp = edi + 0x8011B99C
	v14 = (edx & 0x00000001 << cl) != 0x00000000
	edx = __rcr(edx, cl, C)
	C = v14
	// succ:  l0040230F_thunk_fn00402311
l0040230F_thunk_fn00402311:
	call fn00402311 (retsize: 0;)
	return
	// succ:  fn004022E6_exit
fn004022E6_exit:


// fn004022E7
// Return size: 6
void fn004022E7()
fn004022E7_entry:
	// succ:  l004022E7
l004022E7:
	esp = fp
	return
	// succ:  fn004022E7_exit
l004022E7:
	cl = cl + 0xCD
	SCZO = cond(cl)
	ch = ch + 0xB6
	SCZO = cond(ch)
	bh = bh - 0x01
	SZO = cond(bh)
	ch = ch + bl
	SCZO = cond(ch)
	bl = cl
	edx = edx + 0x00000014
	SCZO = cond(edx)
	branch Test(EQ,Z) l004022FA_thunk_fn00402DB7
fn004022E7_exit:


// fn00402311
// Return size: 0
void fn00402311()
fn00402311_entry:
	// succ:  l00402311
l00402311:
	esp = fp
	Mem0[esp:word32] = eax
fn00402311_exit:


// fn0040232F
// Return size: 0
void fn0040232F()
fn0040232F_entry:
	// succ:  l0040232F
l0040232F:
	esp = fp
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bl = ~bl
	bh = bh ^ cl
	SZO = cond(bh)
	C = false
	bh = 0x55
	goto l0040233A_thunk_fn00402D7D
	// succ:  l0040233A_thunk_fn00402D7D
l0040232F:
l0040233A_thunk_fn00402D7D:
	call fn00402D7D (retsize: 0;)
	return
	// succ:  fn0040232F_exit
fn0040232F_exit:


// fn00402344
// Return size: 0
void fn00402344()
fn00402344_entry:
	// succ:  l00402344
l00402344:
	esp = fp
	esi = esi - edx
	SCZO = cond(esi)
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	edx = edx + 0x00000001
	SZO = cond(edx)
	edx = ebx
	goto l00402349_thunk_fn0040234B
	// succ:  l00402349_thunk_fn0040234B
l00402344:
l00402349_thunk_fn0040234B:
	call fn0040234B (retsize: 0;)
	return
	// succ:  fn00402344_exit
l00402403_thunk_fn00402409:
	call fn00402409 (retsize: 0;)
	return
	// succ:  fn00402344_exit l00402403_thunk_fn00402409
l00402403_thunk_fn00402409:
	call fn00402409 (retsize: 0;)
	return
	// succ:  fn00402344_exit
l00402403_thunk_fn004029F0:
	call fn004029F0 (retsize: 6;)
	return
	// succ:  fn00402344_exit
fn00402344_exit:


// fn0040234B
// Return size: 0
void fn0040234B()
fn0040234B_entry:
	// succ:  l0040234B
l0040234B:
	esp = fp
	ecx = ecx ^ eax
	SZO = cond(ecx)
	C = false
	dh = dh - ah
	SCZO = cond(dh)
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	cl = cl + 0x01
	SZO = cond(cl)
	goto l00402353_thunk_fn004023B1
	// succ:  l00402353_thunk_fn004023B1
l0040234B:
	ecx = ecx ^ eax
	SZO = cond(ecx)
	C = false
	dh = dh - ah
	SCZO = cond(dh)
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	cl = cl + 0x01
	SZO = cond(cl)
	// succ:  l00402351_thunk_fn004023B1
l00402351_thunk_fn004023B1:
	call fn004023B1 (retsize: 0;)
	return
	// succ:  fn0040234B_exit
l00402353_thunk_fn004023B1:
	call fn004023B1 (retsize: 0;)
	return
	// succ:  fn0040234B_exit
fn0040234B_exit:


// fn004023A0
// Return size: 0
void fn004023A0()
fn004023A0_entry:
	goto l004023A0
	// succ:  l004023A0
l00402119:
	esi = esi - 0x00000001
	SZO = cond(esi)
	ecx = ecx - 0x6E5955AF
	SCZO = cond(ecx)
	esi = esi + edi
	SCZO = cond(esi)
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	esi = esi + edi
	SCZO = cond(esi)
	esi = esi + edx
	SCZO = cond(esi)
	esi = edi
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	SCZO = cond(ecx - 0x91A6AA51)
	goto l00402BD9
	// succ:  l00402BD9
l004023A0:
	esi = ecx
	esi = esi - ecx
	SCZO = cond(esi)
	esi = esi - 0x00000001
	SZO = cond(esi)
	esi = esi + 0x00000001
	SZO = cond(esi)
	esi = edi
	goto l00402119
	// succ:  l00402119
l00402BD9:
	branch Test(NE,Z) l00402BD9_thunk_fn0040234B
	goto l00402BDF
	// succ:  l00402BDF l00402BD9_thunk_fn0040234B
l00402BD9_thunk_fn0040234B:
	call fn0040234B (retsize: 0;)
	return
	// succ:  fn004023A0_exit
l00402BDF:
	cl = cl - al
	SCZO = cond(cl)
	ecx = ebx
	ecx = ecx | ebx
	SZO = cond(ecx)
	C = false
	ch = ch - 0x5B - C
	SCZO = cond(ch)
	eax = eax + 0x00000001
	SZO = cond(eax)
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	esi = esi + ebx
	SCZO = cond(esi)
	call fn00402A56 (retsize: 4;)
	branch Test(SG,S) l00402BF2_thunk_fn00402BA9
	goto l00402BF4
	// succ:  l00402BF4 l00402BF2_thunk_fn00402BA9
l00402BF2_thunk_fn00402BA9:
	call fn00402BA9 (retsize: 0;)
	return
	// succ:  fn004023A0_exit
l00402BF4:
	v18 = (Mem0[eax - 0x00000028:byte] & 0x01 << 0x08 - cl) != 0x00
	Mem0[eax - 0x00000028:byte] = __rol(Mem0[eax - 0x00000028:byte], cl)
	C = v18
	// succ:  l00402BF4_thunk_fn00402BF7
l00402BF4_thunk_fn00402BF7:
	call fn00402BF7 (retsize: 0;)
	return
	// succ:  fn004023A0_exit
fn004023A0_exit:


// fn004023B1
// Return size: 0
void fn004023B1()
fn004023B1_entry:
	// succ:  l004023B1
l004023B1:
	cl = cl - dl
	SCZO = cond(cl)
	esi = esi ^ edi
	SZO = cond(esi)
	C = false
	cl = al
	ch = dl
	ch = ch - 0x1A - C
	SCZO = cond(ch)
	cl = cl | ah
	SZO = cond(cl)
	C = false
	call fn00402780 (retsize: 4;)
	branch Test(PE,P) l004023C5
	// succ:  l004023C5
l004023C5:
	v15 = Mem0[ebx + 0x0000002F:word32] & esp
	Mem0[ebx + 0x0000002F:word32] = v15
	SZO = cond(Mem0[ebx + 0x0000002F:word32])
	C = false
	Mem0[esp - 0x00000034:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi + edx
	SCZO = cond(esi)
	cl = cl ^ dl
	SZO = cond(cl)
	C = false
	cl = cl - 0x62 - C
	SCZO = cond(cl)
	cl = cl + 0x01
	SZO = cond(cl)
	v17 = (dl & 0x01 << 0x17) != 0x00
	dl = __ror(dl, 0x17)
	C = v17
	ch = cl
	ch = ch ^ al
	SZO = cond(ch)
	C = false
	ch = 0x1E
	ch = al
	branch Test(EQ,Z) l00402763
	// succ:  l004023E0_thunk_fn004023E6 l004023E0_thunk_fn00402763
l004023E0_thunk_fn004023E6:
	call fn004023E6 (retsize: 0;)
	return
	// succ:  fn004023B1_exit
l004023E0_thunk_fn00402763:
	call fn00402763 (retsize: 0;)
	return
	// succ:  fn004023B1_exit
fn004023B1_exit:


// fn004023C8
// Return size: 0
void fn004023C8()
fn004023C8_entry:
	// succ:  l004023C8
l004023C8:
	esp = fp
	Mem0[esp - 0x00000034:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = esi + edx
	SCZO = cond(esi)
	cl = cl ^ dl
	SZO = cond(cl)
	C = false
	cl = cl - 0x62 - C
	SCZO = cond(cl)
	cl = cl + 0x01
	SZO = cond(cl)
	v10 = (dl & 0x01 << 0x17) != 0x00
	dl = __ror(dl, 0x17)
	C = v10
	ch = cl
	ch = ch ^ al
	SZO = cond(ch)
	C = false
	ch = 0x1E
	ch = al
	branch Test(EQ,Z) l004023E0_thunk_fn00402763
	// succ:  l004023E0_thunk_fn004023E6 l004023E0_thunk_fn00402763
l004023E0_thunk_fn004023E6:
	call fn004023E6 (retsize: 0;)
	return
	// succ:  fn004023C8_exit l004023E0_thunk_fn004023E6
l004023E0_thunk_fn004023E6:
	call fn004023E6 (retsize: 0;)
	return
	// succ:  fn004023C8_exit
l004023E0_thunk_fn00402763:
	call fn00402763 (retsize: 0;)
	return
	// succ:  fn004023C8_exit
fn004023C8_exit:


// fn004023E6
// Return size: 0
void fn004023E6()
fn004023E6_entry:
	// succ:  l004023E6
l004023E6:
	v3 = dl
	dl = dl
	dl = v3
	branch Test(NE,Z) l00402763
	goto l004023EE
	// succ:  l004023EE l004023E8_thunk_fn00402763
l004023E8_thunk_fn00402763:
	call fn00402763 (retsize: 0;)
	return
	// succ:  fn004023E6_exit
l004023EE:
	C = __das(al, &al)
	edx = edx + 0x00000001
	SZO = cond(edx)
	ch = 0xCC
	ecx = ecx - 0x00000001
	branch ecx != 0x00000000 l004023A0
	goto l004023F5
	// succ:  l004023F5 l004023F3_thunk_fn004023A0
l004023F3_thunk_fn004023A0:
	call fn004023A0 (retsize: 0;)
	return
	// succ:  fn004023E6_exit
l004023F5:
	SZO = cond(Mem0[edx + 0x32EE32CE:byte] & 0xC8)
	C = false
	// succ:  l004023F5_thunk_fn004023F6
l004023F5_thunk_fn004023F6:
	call fn004023F6 (retsize: 0;)
	return
	// succ:  fn004023E6_exit
fn004023E6_exit:


// fn004023F6
// Return size: 0
void fn004023F6()
fn004023F6_entry:
	// succ:  l004023F6
l004023F6:
	esp = fp
	cl = dh
	ch = ch ^ dh
	SZO = cond(ch)
	C = false
	cl = cl ^ al
	SZO = cond(cl)
	C = false
	cl = cl - 0x93 - C
	SCZO = cond(cl)
	ch = ch + 0x01
	SZO = cond(ch)
	cl = bl
	branch Test(ULE,CZ) l00402403_thunk_fn004029F0
	// succ:  l00402403_thunk_fn00402409 l00402403_thunk_fn004029F0 l00402403_thunk_fn00402409 l00402403_thunk_fn004029F0
l004023F6:
	cl = cl - 0x93 - C
	SCZO = cond(cl)
	ch = ch + 0x01
	SZO = cond(ch)
	cl = bl
	branch Test(ULE,CZ) l00402403_thunk_fn004029F0
l00402403_thunk_fn00402409:
	call fn00402409 (retsize: 0;)
	return
	// succ:  fn004023F6_exit
l00402403_thunk_fn004029F0:
	call fn004029F0 (retsize: 0;)
	return
	// succ:  fn004023F6_exit
fn004023F6_exit:


// fn00402409
// Return size: 0
void fn00402409()
fn00402409_entry:
	// succ:  l00402409
l00402409:
	branch Test(UGE,C) l0040240B
	// succ:  l0040240B
l0040240B:
	v4 = si
	si = si
	si = v4
	branch Test(UGT,CZ) l0040240E_thunk_fn004029F0
	goto l00402414
	// succ:  l00402414 l0040240E_thunk_fn004029F0
l0040240E_thunk_fn004029F0:
	call fn004029F0 (retsize: 0;)
	return
	// succ:  fn00402409_exit
l00402414:
	dl = 0x18
	es = Mem0[esp:selector]
	esp = esp + 0x00000002
	v11 = Mem0[ebx:real64] - rArg0
	Mem0[ebx:real64] = v11
fn00402409_exit:


// fn00402418
// Return size: 0
void fn00402418()
fn00402418_entry:
	// succ:  l00402418
l00402418:
	esp = fp
	esi = esi - edx
	SCZO = cond(esi)
	goto l00402419
	// succ:  l00402419
l00402418:
l00402429_thunk_fn0040258E:
	call fn0040258E (retsize: 0;)
	return
	// succ:  fn00402418_exit
fn00402418_exit:


// fn00402432
// Return size: 0
void fn00402432()
fn00402432_entry:
	// succ:  l00402432
l00402432:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = eax
	eax = v3
	v5 = dh
	dh = dh
	dh = v5
	// succ:  l0040243D
l0040243D:
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	ch = ch + 0x01
	SZO = cond(ch)
	ch = -ch
	SCZO = cond(ch)
	C = ch == 0x00
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	call eax (retsize: 4;)
	dh = dh - 0x99 - C
	SCZO = cond(dh)
	dl = dl + cl
	SCZO = cond(dl)
	edx = edx - ebx
	SCZO = cond(edx)
	call fn00402EAD (retsize: 4;)
	al = al + 0x76
	SCZO = cond(al)
	Mem0[edi:byte] = al
	edi = edi + 0x00000001
	v17 = Mem0[edi - 0x00000002:word32] - 0x00000001
	Mem0[edi - 0x00000002:word32] = v17
	SZO = cond(v17)
	// succ:  l00402454_thunk_fn00402457
l00402454_thunk_fn00402457:
	call fn00402457 (retsize: 0;)
	return
	// succ:  fn00402432_exit
fn00402432_exit:


// fn00402455
// Return size: 0
void fn00402455()
fn00402455_entry:
	// succ:  l00402455
l00402455:
	esp = fp
	edi = edi - 0x00000001
	SZO = cond(edi)
	cl = cl + 0x01
	SZO = cond(cl)
	goto l00402456_thunk_fn00402457
	// succ:  l00402456_thunk_fn00402457
l00402455:
l00402456_thunk_fn00402457:
	call fn00402457 (retsize: 0;)
	return
	// succ:  fn00402455_exit
l00402462_thunk_fn00402A0E:
	call fn00402A0E (retsize: 6;)
	return
	// succ:  fn00402455_exit
fn00402455_exit:


// fn00402457
// Return size: 0
void fn00402457()
fn00402457_entry:
	// succ:  l00402457
l00402457:
	esp = fp
	v3 = (Mem0[edx + 0x5EDB80EA:word32] & 0x00000001 << 0x80) != 0x00000000
	Mem0[edx + 0x5EDB80EA:word32] = __ror(Mem0[edx + 0x5EDB80EA:word32], 0x80)
	C = v3
	goto l00402462_thunk_fn00402A0E
	// succ:  l00402462_thunk_fn00402A0E
l00402457:
	ch = dl
	bl = bl - 0x5E - C
	SCZO = cond(bl)
	dh = dh + 0x94 + C
	SCZO = cond(dh)
	esi = esi | ecx
	SZO = cond(esi)
	C = false
fn00402457_exit:


// fn004024CD
// Return size: 0
void fn004024CD()
fn004024CD_entry:
	// succ:  l004024CD
l004024CD:
	esp = fp
	edi = edi ^ eax
	SZO = cond(edi)
	C = false
	bl = bl + 0x3C + C
	SCZO = cond(bl)
	call fn00402B3A (retsize: 4;)
	esp = esp + 0xFFFFFFFA
	// succ:  l004024CF_thunk_fn004024D0 l004024E2_thunk_fn004024E7
l004024CD:
l004024CF_thunk_fn004024D0:
	call fn004024D0 (retsize: 0;)
	return
	// succ:  fn004024CD_exit
l004024E2_thunk_fn004024E7:
	call fn004024E7 (retsize: 0;)
	return
	// succ:  fn004024CD_exit
fn004024CD_exit:


// fn004024D0
// Return size: 0
void fn004024D0()
fn004024D0_entry:
	// succ:  l004024D0
l004024D0:
	esp = fp
	v6 = Mem0[edx + ecx * 0x00000004:word32] >> cl
	Mem0[edx + ecx * 0x00000004:word32] = v6
	SCZO = cond(v6)
	bh = 0x1F
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[eax + 0x00000010:word32]
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bl = bl - 0xC7 - C
	SCZO = cond(bl)
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	bh = bh + 0x7F
	SCZO = cond(bh)
	call fn00402B3A (retsize: 4;)
	goto l004024E2_thunk_fn004024E7
	// succ:  l004024E2_thunk_fn004024E7
l004024D0:
	bh = bl
	bh = 0x1F
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[eax + 0x00000010:word32]
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bl = bl - 0xC7 - C
	SCZO = cond(bl)
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	bh = bh + 0x7F
	SCZO = cond(bh)
l004024E2_thunk_fn004024E7:
	call fn004024E7 (retsize: 0;)
	return
	// succ:  fn004024D0_exit
fn004024D0_exit:


// fn004024E7
// Return size: 0
void fn004024E7()
fn004024E7_entry:
	// succ:  l004024E7
l004024E7:
	esp = fp
	D = false
l004024E7:
	D = false
fn004024E7_exit:


// fn004024EE
// Return size: 0
void fn004024EE()
fn004024EE_entry:
	// succ:  l004024EE
l004024EE:
	esp = fp
	dh = dh - 0x01
	SZO = cond(dh)
	bl = bl | dl
	SZO = cond(bl)
	C = false
	edx = edx + 0x00000001
	SZO = cond(edx)
	esi = esi - 0x00000001
	SZO = cond(esi)
	eax = eax - 0x00000001
	SZO = cond(eax)
	ah = 0xE1
	branch Test(SG,S) TMP!
l004024EE:
fn004024EE_exit:


// fn0040251F
// Return size: 0
void fn0040251F()
fn0040251F_entry:
	// succ:  l0040251F
l0040251F:
	esp = fp
	esp = esp + 0x00000004
	ch = ch + 0x01
	SZO = cond(ch)
	ch = ch + al
	SCZO = cond(ch)
	ch = ch + al
	SCZO = cond(ch)
	cl = cl - 0x01
	SZO = cond(cl)
	esi = esi | edi
	SZO = cond(esi)
	C = false
	cl = cl + ch
	SCZO = cond(cl)
	ch = ch - 0x35 - C
	SCZO = cond(ch)
	call fn004020DA (retsize: 4;)
	v12 = Mem0[eax - 0x00000066:byte] + 0xD8 + C
	Mem0[eax - 0x00000066:byte] = v12
	SCZO = cond(v12)
	// succ:  l00402537_thunk_fn0040253B
l00402537_thunk_fn0040253B:
	call fn0040253B (retsize: 0;)
	return
	// succ:  fn0040251F_exit
l00402547_thunk_fn004024CD:
	call fn004024CD (retsize: 0;)
	return
	// succ:  fn0040251F_exit
l00402547_thunk_fn00402549:
	call fn00402549 (retsize: 0;)
	return
	// succ:  fn0040251F_exit l00402547_thunk_fn00402549
l00402547_thunk_fn00402549:
	call fn00402549 (retsize: 0;)
	return
	// succ:  fn0040251F_exit
fn0040251F_exit:


// fn0040253B
// Return size: 0
void fn0040253B()
fn0040253B_entry:
	// succ:  l0040253B
l0040253B:
	esp = fp
	bl = al
	edi = edi ^ eax
	SZO = cond(edi)
	C = false
	bh = dl
	ebx = ebx + ecx
	SCZO = cond(ebx)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	edi = edi | edx
	SZO = cond(edi)
	C = false
	branch Test(SG,S) l00402547_thunk_fn004024CD
	// succ:  l00402547_thunk_fn00402549 l00402547_thunk_fn004024CD l00402547_thunk_fn00402549 l00402547_thunk_fn004024CD
l0040253B:
	bl = al
	edi = edi ^ eax
	SZO = cond(edi)
	C = false
	bh = dl
	ebx = ebx + ecx
	SCZO = cond(ebx)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	edi = edi | edx
	SZO = cond(edi)
	C = false
	branch Test(SG,S) l00402547_thunk_fn004024CD
l00402547_thunk_fn004024CD:
	call fn004024CD (retsize: 0;)
	return
	// succ:  fn0040253B_exit
l00402547_thunk_fn00402549:
	call fn00402549 (retsize: 0;)
	return
	// succ:  fn0040253B_exit
fn0040253B_exit:


// fn00402549
// Return size: 0
void fn00402549()
fn00402549_entry:
	// succ:  l00402549
l00402549:
	esi = esi
fn00402549_exit:


// fn00402558
// Return size: 0
void fn00402558()
fn00402558_entry:
	// succ:  l00402558
l00402558:
	esp = fp
	esp = esp + 0x00000004
	dh = dh + 0x4F + C
	SCZO = cond(dh)
	edx = edx - 0x00000001
	SZO = cond(edx)
	ch = ch + 0xC6 + C
	SCZO = cond(ch)
	ch = bl
	dh = dh + 0xAB
	SCZO = cond(dh)
	edi = edi - 0x00000001
	SZO = cond(edi)
	call fn00402432 (retsize: 4;)
	v11 = Mem0[0x236C711F:byte] - ch
	Mem0[0x236C711F:byte] = v11
	SCZO = cond(v11)
	esp = esp + 0x00000004
	ch = ch | bl
	SZO = cond(ch)
	C = false
	cl = cl - 0x63 - C
	SCZO = cond(cl)
	esi = esi | edi
	SZO = cond(esi)
	C = false
	ecx = ecx + edx
	SCZO = cond(ecx)
	cl = cl + 0x98 + C
	SCZO = cond(cl)
	esi = esi - 0x00000001
	SZO = cond(esi)
	// succ:  l00402585_thunk_fn004023F6
l00402585_thunk_fn004023F6:
	call fn004023F6 (retsize: 0;)
	return
	// succ:  fn00402558_exit
fn00402558_exit:


// fn00402574
// Return size: 0
void fn00402574()
fn00402574_entry:
	// succ:  l00402574
l00402574:
	esp = fp
	esp = esp + 0x00000004
	ch = ch | bl
	SZO = cond(ch)
	C = false
	cl = cl - 0x63 - C
	SCZO = cond(cl)
	esi = esi | edi
	SZO = cond(esi)
	C = false
	ecx = ecx + edx
	SCZO = cond(ecx)
	cl = cl + 0x98 + C
	SCZO = cond(cl)
	esi = esi - 0x00000001
	SZO = cond(esi)
	// succ:  l00402585_thunk_fn004023F6
l00402585_thunk_fn004023F6:
	call fn004023F6 (retsize: 0;)
	return
	// succ:  fn00402574_exit
fn00402574_exit:


// fn0040258E
// Return size: 0
void fn0040258E()
fn0040258E_entry:
	// succ:  l0040258E
l0040258E:
	esp = fp
	esi = esi | ecx
	SZO = cond(esi)
	C = false
	edi = edi - 0x00000001
	SZO = cond(edi)
	edi = edi - 0x00000001
	SZO = cond(edi)
	edi = edi - ecx
	SCZO = cond(edi)
	esi = esi + 0x00000001
	SZO = cond(esi)
	eax = eax + ebx
	SCZO = cond(eax)
	call fn00402C11 (retsize: 4;)
	__outb(dx, al)
	__outw(dx, ax)
	SCZO = cond(Mem0[esi:byte] - al)
l0040258E:
fn0040258E_exit:


// fn004025A2
// Return size: 0
void fn004025A2()
fn004025A2_entry:
	// succ:  l004025A2
l004025A2:
	esp = fp
	eax = eax + 0x00000001
	SZO = cond(eax)
	goto l004025A2_thunk_fn004025A3
	// succ:  l004025A2_thunk_fn004025A3
l004025A2:
l004025A2_thunk_fn004025A3:
	call fn004025A3 (retsize: 0;)
	return
	// succ:  fn004025A2_exit
fn004025A2_exit:


// fn004025A3
// Return size: 0
void fn004025A3()
fn004025A3_entry:
	// succ:  l004025A3
l004025A3:
	esp = fp
	edi = edi ^ eax
	SZO = cond(edi)
	C = false
	edx = edx - 0x00000001
	SZO = cond(edx)
	ch = 0xAF
	dh = dh - 0x4E - C
	SCZO = cond(dh)
	esi = esi + ebx
	SCZO = cond(esi)
	ch = ch - 0x01
	SZO = cond(ch)
	goto l004025AF
	// succ:  l004025AF
l004025A3:
l004025AF:
	cl = ~cl
	eax = ebx
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	esi = esi + 0x00000001
	SZO = cond(esi)
	call fn00402D2E (retsize: 4;)
	esp = esp + 0xFFFFFFFA
	branch Test(NE,Z) l004025BB_thunk_fn004025A2
	goto l004025BD
	// succ:  l004025BD l004025BB_thunk_fn004025A2
l004025BB_thunk_fn004025A2:
	call fn004025A2 (retsize: 0;)
	return
	// succ:  fn004025A3_exit
l004025BD:
	branch Test(SG,S) l004025AF
	// succ:  l004025BF l004025AF
l004025BF:
	es_edx = Mem0[edi + 0x00000000:segptr32]
	edx = edx - 0x00000001
	SZO = cond(edx)
	ah = FPUF
	// succ:  l004025C2_thunk_fn004025C3
l004025C2_thunk_fn004025C3:
	call fn004025C3 (retsize: 6;)
	return
	// succ:  fn004025A3_exit
fn004025A3_exit:


// fn004025C3
// Return size: 6
void fn004025C3()
fn004025C3_entry:
	// succ:  l004025C3
l004025C3:
	esp = esp + 0x00000004
	bh = bh + 0x5E
	SCZO = cond(bh)
	bl = bl + 0x85
	SCZO = cond(bl)
	bh = bh - ah
	SCZO = cond(bh)
	bh = bh - 0x01
	SZO = cond(bh)
	bh = bh - cl
	SCZO = cond(bh)
	branch Test(LE,SZO) l004025D3_thunk_fn004029B8
	goto l004025D9
	// succ:  l004025D9 l004025D3_thunk_fn004029B8
l004025D3_thunk_fn004029B8:
	call fn004029B8 (retsize: 6;)
	return
	// succ:  fn004025C3_exit
l004025D9:
fn004025C3_exit:


// fn0040261A
// Return size: 0
void fn0040261A()
fn0040261A_entry:
	// succ:  l0040261A
l0040261A:
	esp = fp
	v5 = Mem0[esi + 0x2E850FE4:byte] + al
	Mem0[esi + 0x2E850FE4:byte] = v5
	SCZO = cond(v5)
	es = Mem0[esp:selector]
	esp = esp + 0x00000002
	v9 = Mem0[eax:byte] + al
	Mem0[eax:byte] = v9
	SCZO = cond(v9)
	v11 = Mem0[eax + 0x0000004B:word32] - 0x28 - C
	Mem0[eax + 0x0000004B:word32] = v11
	SCZO = cond(v11)
	ah = 0x89
	goto l00402627_thunk_fn00402629
	// succ:  l00402627_thunk_fn00402629
l0040261A:
l00402627_thunk_fn00402629:
	call fn00402629 (retsize: 0;)
	return
	// succ:  fn0040261A_exit
fn0040261A_exit:


// fn00402628
// Return size: 0
void fn00402628()
fn00402628_entry:
	// succ:  l00402628
l00402628:
	esp = fp
	Mem0[esp:word32] = ebx
	// succ:  l00402628_thunk_fn00402629
l00402628_thunk_fn00402629:
	call fn00402629 (retsize: 0;)
	return
	// succ:  fn00402628_exit
l00402652_thunk_fn0040261A:
	call fn0040261A (retsize: 0;)
	return
	// succ:  fn00402628_exit
l00402652_thunk_fn00402654:
	call fn00402654 (retsize: 0;)
	return
	// succ:  fn00402628_exit l00402652_thunk_fn00402654
l00402652_thunk_fn00402654:
	call fn00402654 (retsize: 0;)
	return
	// succ:  fn00402628_exit
fn00402628_exit:


// fn00402629
// Return size: 0
void fn00402629()
fn00402629_entry:
	// succ:  l00402629
l00402629:
	esp = fp
	al = al - 0x24 - C
	SCZO = cond(al)
	eax = eax
	v7 = edx
	edx = edx
	edx = v7
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	dh = dh + 0x41 + C
	SCZO = cond(dh)
	ecx = ecx | edx
	SZO = cond(ecx)
	C = false
	esi = esi - ecx
	SCZO = cond(esi)
	esi = esi | edx
	SZO = cond(esi)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	cl = cl - bh
	SCZO = cond(cl)
	branch Test(SG,S) l0040263C_thunk_fn00402344
	goto l0040263C_thunk_fn00402642
	// succ:  l0040263C_thunk_fn00402642 l0040263C_thunk_fn00402344
l00402629:
	eax = eax
	v17 = edx
	edx = edx
	edx = v17
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	dh = dh + 0x41 + C
	SCZO = cond(dh)
	ecx = ecx | edx
	SZO = cond(ecx)
	C = false
	esi = esi - ecx
	SCZO = cond(esi)
	esi = esi | edx
	SZO = cond(esi)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	cl = cl - bh
	SCZO = cond(cl)
	branch Test(SG,S) l0040263C_thunk_fn00402344
	// succ:  l0040263A_thunk_fn00402642 l0040263C_thunk_fn00402344
l0040263A_thunk_fn00402642:
	call fn00402642 (retsize: 0;)
	return
	// succ:  fn00402629_exit
l0040263C_thunk_fn00402344:
	call fn00402344 (retsize: 0;)
	return
	// succ:  fn00402629_exit
l0040263C_thunk_fn00402344:
	call fn00402344 (retsize: 0;)
	return
	// succ:  fn00402629_exit
l0040263C_thunk_fn00402642:
	call fn00402642 (retsize: 0;)
	return
	// succ:  fn00402629_exit l0040263C_thunk_fn00402642
l0040263C_thunk_fn00402642:
	call fn00402642 (retsize: 0;)
	return
	// succ:  fn00402629_exit
fn00402629_exit:


// fn00402642
// Return size: 0
void fn00402642()
fn00402642_entry:
	// succ:  l00402642
l00402642:
	// succ:  l00402648
l00402648:
	cx = cx
	branch Test(NS,S) l0040264B_thunk_fn00402344
	goto l00402651
	// succ:  l00402651 l0040264B_thunk_fn00402344
l0040264B_thunk_fn00402344:
	call fn00402344 (retsize: 0;)
	return
	// succ:  fn00402642_exit
l00402651:
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	branch ecx == 0x00000000 l00402652_thunk_fn0040261A
	goto l00402652_thunk_fn00402654
	// succ:  l00402652_thunk_fn00402654 l00402652_thunk_fn0040261A
fn00402642_exit:


// fn00402654
// Return size: 0
void fn00402654()
fn00402654_entry:
	// succ:  l00402654
l00402654:
	esp = fp
	esi = 0x34D3807C
	goto l00402654_thunk_fn00402659
	// succ:  l00402654_thunk_fn00402659
l00402654:
l00402654_thunk_fn00402659:
	call fn00402659 (retsize: 0;)
	return
	// succ:  fn00402654_exit
fn00402654_exit:


// fn00402656
// Return size: 0
void fn00402656()
fn00402656_entry:
	// succ:  l00402656
l00402656:
	esp = fp
	bl = bl + 0x34 + C
	SCZO = cond(bl)
	goto l00402656_thunk_fn00402659
	// succ:  l00402656_thunk_fn00402659
l00402656:
l00402656_thunk_fn00402659:
	call fn00402659 (retsize: 0;)
	return
	// succ:  fn00402656_exit
fn00402656_exit:


// fn00402659
// Return size: 0
void fn00402659()
fn00402659_entry:
	// succ:  l00402659
l00402659:
	esp = fp
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bh = bh - dh
	SCZO = cond(bh)
	bl = bl - dl
	SCZO = cond(bl)
	bh = bh + 0x01
	SZO = cond(bh)
	branch Test(OV,O) l00402663_thunk_fn00402A71
	goto l00402669
	// succ:  l00402669 l00402663_thunk_fn00402A71
l00402659:
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bh = bh - dh
	SCZO = cond(bh)
	bl = bl - dl
	SCZO = cond(bl)
	bh = bh + 0x01
	SZO = cond(bh)
	branch Test(OV,O) TMP!
l00402663_thunk_fn00402A71:
	call fn00402A71 (retsize: 0;)
	return
	// succ:  fn00402659_exit
l00402669:
	branch Test(GT,SZO) l0040266B
	// succ:  l0040266B
l0040266B:
	ch = ch
	branch Test(NO,O) l0040266D_thunk_fn00402A71
	goto l00402673
	// succ:  l00402673 l0040266D_thunk_fn00402A71
l0040266D_thunk_fn00402A71:
	call fn00402A71 (retsize: 0;)
	return
	// succ:  fn00402659_exit
l00402673:
	C = __das(al, &al)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ds
	__outb(0x9D, al)
	// succ:  l00402675_thunk_fn00402677
l00402675_thunk_fn00402677:
	call fn00402677 (retsize: 0;)
	return
	// succ:  fn00402659_exit
fn00402659_exit:


// fn00402677
// Return size: 0
void fn00402677()
fn00402677_entry:
	// succ:  l00402677
l00402677:
	esp = fp
	ch = ch + 0x01
	SZO = cond(ch)
	edx = edx | esi
	SZO = cond(edx)
	C = false
	dl = dl + 0xC8
	SCZO = cond(dl)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	al = al | bh
	SZO = cond(al)
	C = false
	edx = edx - ebx
	SCZO = cond(edx)
	ah = ah + 0x01
	SZO = cond(ah)
	goto l00402686_thunk_fn00402ED8
	// succ:  l00402686_thunk_fn00402ED8
l00402677:
l00402686_thunk_fn00402ED8:
	call fn00402ED8 (retsize: 0;)
	return
	// succ:  fn00402677_exit
fn00402677_exit:


// fn004026A8
// Return size: 0
void fn004026A8()
fn004026A8_entry:
	// succ:  l004026A8
l004026A8:
	cl = cl + 0x01
	SZO = cond(cl)
	esi = esi | eax
	SZO = cond(esi)
	C = false
	ah = ah + dl
	SCZO = cond(ah)
	bl = bl | ch
	SZO = cond(bl)
	C = false
	bl = bl + 0x7E + C
	SCZO = cond(bl)
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	dh = dh + 0x01
	SZO = cond(dh)
	bh = bh + dl
	SCZO = cond(bh)
	edi = edi | ecx
	SZO = cond(edi)
	C = false
	al = al - 0xC4 - C
	SCZO = cond(al)
	ebx = ebx ^ ecx
	SZO = cond(ebx)
	C = false
	// succ:  l00402A2D
l00402A2D:
	ah = ah + bl
	SCZO = cond(ah)
	dl = ~dl
	cl = cl + 0x01
	SZO = cond(cl)
	ah = ah + dh
	SCZO = cond(ah)
	eax = eax | esi
	SZO = cond(eax)
	C = false
	dh = dh - cl
	SCZO = cond(dh)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000040
	cl = cl + 0x01
	SZO = cond(cl)
	branch Test(LT,SO) l00402E14
	// succ:  l00402A43 l00402E14
l00402A43:
	v20 = edx
	edx = edx
	edx = v20
	// succ:  l00402A4A
l00402A4A:
	branch Test(GE,SO) l00402E14
	// succ:  l00402A50 l00402E14
l00402A50:
	esp = 0x8F896BB5
	esp = esp + 0x00000001
	SZO = cond(esp)
	al = al & 0xD4
	SZO = cond(al)
	C = false
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	ch = ch ^ ah
	SZO = cond(ch)
	C = false
	ch = ah
	esi = esi + 0x00000001
	SZO = cond(esi)
	dh = ~dh
	dl = dl - 0x01
	SZO = cond(dl)
	call fn00402A97 (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	// succ:  l00402A65_thunk_fn00402A6A
l00402A65_thunk_fn00402A6A:
	call fn00402A6A (retsize: 0;)
	return
	// succ:  fn004026A8_exit
l00402E14:
	eax = eax ^ esi
	SZO = cond(eax)
	C = false
	al = 0x26
	esi = esi | edx
	SZO = cond(esi)
	C = false
	ebx = ebx ^ esi
	SZO = cond(ebx)
	C = false
	ch = ch + 0x6F + C
	SCZO = cond(ch)
	// succ:  l00402E1C_thunk_fn00402E1E
l00402E1C_thunk_fn00402E1E:
	call fn00402E1E (retsize: 0;)
	return
	// succ:  fn004026A8_exit
fn004026A8_exit:


// fn004026D8
// Return size: 0
void fn004026D8()
fn004026D8_entry:
	goto l004026D8
	// succ:  l004026D8
l004020BD:
	esi = esi - 0x00000001
	SZO = cond(esi)
	al = al - 0x01
	SZO = cond(al)
	al = dl
	dl = dl - 0x01
	SZO = cond(dl)
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	ecx = ecx >>u 0x0000000F
	SCZO = cond(ecx)
	edi = edi ^ ecx
	SZO = cond(edi)
	C = false
	bh = bh ^ al
	SZO = cond(bh)
	C = false
	edi = edi - ecx
	SCZO = cond(edi)
l004026D8:
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ebx = ebx + esi
	SCZO = cond(ebx)
	ah = 0x69
	edx = esi
	branch Test(ULT,C) l00402F2E
	// succ:  l004026E5 l00402F2E
l004026E5:
	branch Test(PE,P) l004026E7
	// succ:  l004026E7
l004026E7:
	branch Test(UGE,C) l00402F2E
	// succ:  l004026ED l00402F2E
l004026ED:
	ah = FPUF
	al = al + 0x51 + C
	SCZO = cond(al)
	ebp = ebp | esp
	SZO = cond(ebp)
	C = false
	SCZDOP = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l004026F2_thunk_fn004026F3
l004026F2_thunk_fn004026F3:
	call fn004026F3 (retsize: 0;)
	return
	// succ:  fn004026D8_exit
l00402F2E:
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	dh = dh | al
	SZO = cond(dh)
	C = false
	bl = bl - dh
	SCZO = cond(bl)
	bh = bh ^ al
	SZO = cond(bh)
	C = false
	dl = dl + 0x01
	SZO = cond(dl)
	edx = edx - edi
	SCZO = cond(edx)
	bh = bh - 0x16 - C
	SCZO = cond(bh)
	goto l004020BD
	// succ:  l004020BD
fn004026D8_exit:


// fn004026F3
// Return size: 0
void fn004026F3()
fn004026F3_entry:
	goto l004026F3
	// succ:  l004026F3
fn004026F3_exit:


// fn00402711
// Return size: 4
void fn00402711()
fn00402711_entry:
	// succ:  l00402711
l00402711:
	dh = dh | bh
	SZO = cond(dh)
	C = false
	edx = edx + 0x00000001
	SZO = cond(edx)
	esi = esi - 0x00000001
	SZO = cond(esi)
	bh = bh + 0x77 + C
	SCZO = cond(bh)
	bh = bh + 0xD6 + C
	SCZO = cond(bh)
	bh = dh
	dl = dl + 0x15 + C
	SCZO = cond(dl)
	edx = (word32) al
	edi = edi - 0x00000001
	SZO = cond(edi)
	bh = bh ^ dh
	SZO = cond(bh)
	C = false
	branch Test(PE,P) l00402E9A
	// succ:  l0040272C l00402E9A
l0040272C:
l00402E9A:
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	ebx = ebx | eax
	SZO = cond(ebx)
	C = false
	ebx = ebx + ecx
	SCZO = cond(ebx)
	ebx = ebx - esi
	SCZO = cond(ebx)
	esi = esi + 0x00000001
	SZO = cond(esi)
	call fn0040295C (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	SCZO = cond(al - 0xFF)
	branch Test(EQ,Z) l00402EAC_thunk_fn00402E3B
	goto l00402EAC_thunk_fn00402EAE
	// succ:  l00402EAC_thunk_fn00402EAE l00402EAC_thunk_fn00402E3B
l00402EAC_thunk_fn00402E3B:
	call fn00402E3B (retsize: 4;)
	return
	// succ:  fn00402711_exit
l00402EAC_thunk_fn00402EAE:
	call fn00402EAE (retsize: 0;)
	return
	// succ:  fn00402711_exit l00402EAC_thunk_fn00402EAE
l00402EAC_thunk_fn00402EAE:
	call fn00402EAE (retsize: 0;)
	return
	// succ:  fn00402711_exit
fn00402711_exit:


// fn00402739
// Return size: 0
void fn00402739()
fn00402739_entry:
	// succ:  l00402739
l00402739:
	esp = fp
	ch = ~ch
	ecx = ecx + ebx
	SCZO = cond(ecx)
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ch = 0xD8
	esi = esi | ebx
	SZO = cond(esi)
	C = false
	ecx = ebx
	ch = -ch
	SCZO = cond(ch)
	C = ch == 0x00
	cl = cl + 0x75
	SCZO = cond(cl)
	ch = ch - 0xA3 - C
	SCZO = cond(ch)
	ch = ch - 0x01
	SZO = cond(ch)
	branch Test(LE,SZO) l0040274E_thunk_fn00402C6B
	goto l00402754
	// succ:  l00402754 l0040274E_thunk_fn00402C6B
l00402739:
l0040274E_thunk_fn00402C6B:
	call fn00402C6B (retsize: 0;)
	return
	// succ:  fn00402739_exit
l00402754:
	dx = edx
	branch Test(GT,SZO) l00402757_thunk_fn00402C6B
	goto l0040275D
	// succ:  l0040275D l00402757_thunk_fn00402C6B
l00402757_thunk_fn00402C6B:
	call fn00402C6B (retsize: 0;)
	return
	// succ:  fn00402739_exit
l0040275D:
	v13 = Mem0[edx + 0x00000027:byte] + 0x69
	Mem0[edx + 0x00000027:byte] = v13
	SCZO = cond(v13)
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
fn00402739_exit:


// fn00402763
// Return size: 0
void fn00402763()
fn00402763_entry:
	// succ:  l00402763
l00402763:
	cl = cl + ah
	SCZO = cond(cl)
	ch = ch + 0x8E + C
	SCZO = cond(ch)
	esi = esi + 0x00000001
	SZO = cond(esi)
	ch = 0x72
	cl = cl | al
	SZO = cond(cl)
	C = false
	ecx = ecx - edi
	SCZO = cond(ecx)
	esi = esi + 0x00000001
	SZO = cond(esi)
	ch = ch + 0x01
	SZO = cond(ch)
	ch = 0x9B
	call fn00402574 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = es
fn00402763_exit:


// fn00402780
// Return size: 0
void fn00402780()
fn00402780_entry:
	// succ:  l00402780
l00402780:
	esp = fp
	Mem0[esp:word32] = ecx
	eax = eax
fn00402780_exit:


// fn004027A3
// Return size: 0
void fn004027A3()
fn004027A3_entry:
	// succ:  l004027A3
l004027A3:
	esp = fp
	esp = esp + 0x00000004
	ch = ~ch
	cl = 0x7F
	ch = bl
	ch = ch - 0x01
	SZO = cond(ch)
	cl = 0x92
	ch = ch ^ bh
	SZO = cond(ch)
	C = false
	ch = ch - 0x01
	SZO = cond(ch)
	cl = cl ^ al
	SZO = cond(cl)
	C = false
	esi = esi - 0x00000001
	SZO = cond(esi)
	call fn004023C8 (retsize: 4;)
	v13 = Mem0[edx + 0x2CDB86A0:byte] + ah + C
	Mem0[edx + 0x2CDB86A0:byte] = v13
	SCZO = cond(v13)
	// succ:  l004027BD_thunk_fn004027C3
l004027BD_thunk_fn004027C3:
	call fn004027C3 (retsize: 0;)
	return
	// succ:  fn004027A3_exit
fn004027A3_exit:


// fn004027C3
// Return size: 4
void fn004027C3()
fn004027C3_entry:
	// succ:  l004027C3
l004027C3:
	esp = fp
	esp = esp + 0x00000004
	ch = -ch
	SCZO = cond(ch)
	C = ch == 0x00
	ecx = ecx - edx
	SCZO = cond(ecx)
	esi = esi + 0x00000001
	SZO = cond(esi)
	cl = cl + bh
	SCZO = cond(cl)
	ecx = ecx | eax
	SZO = cond(ecx)
	C = false
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	ch = -ch
	SCZO = cond(ch)
	C = ch == 0x00
	ecx = ecx ^ esi
	SZO = cond(ecx)
	C = false
	call fn00402CD2 (retsize: 4;)
	bh = al
	ecx = ecx - 0x00000001
	branch Test(EQ,Z) && ecx != 0x00000000 l004027DC_thunk_fn00402828
	goto l004027DE
	// succ:  l004027DE l004027DC_thunk_fn00402828
l004027DC_thunk_fn00402828:
	call fn00402828 (retsize: 4;)
	return
	// succ:  fn004027C3_exit
l004027DE:
	edi = edi + 0x00000001
	SZO = cond(edi)
	// succ:  l004027DE_thunk_fn004027DF
l004027DE_thunk_fn004027DF:
	call fn004027DF (retsize: 0;)
	return
	// succ:  fn004027C3_exit
fn004027C3_exit:


// fn004027DF
// Return size: 0
void fn004027DF()
fn004027DF_entry:
	// succ:  l004027DF
l004027DF:
	esp = fp
	eax = eax + ebx
	SCZO = cond(eax)
	dh = dh - 0x01
	SZO = cond(dh)
	dl = -dl
	SCZO = cond(dl)
	C = dl == 0x00
	cl = cl - dh
	SCZO = cond(cl)
	dl = dl ^ dh
	SZO = cond(dl)
	C = false
	dl = dl | bh
	SZO = cond(dl)
	C = false
	edx = edx + edi
	SCZO = cond(edx)
	edx = edx - 0x00000001
	SZO = cond(edx)
	eax = eax + ecx
	SCZO = cond(eax)
	call fn00402B5F (retsize: 4;)
	Mem0[ecx:byte] = dl
	v16 = Mem0[ecx + 0x24648D26:byte] & bl
	Mem0[ecx + 0x24648D26:byte] = v16
	SZO = cond(Mem0[ecx + 0x24648D26:byte])
	C = false
	al = al + 0x80
	SCZO = cond(al)
	v19 = Mem0[esi + 0x0249CE03:word32] >>u 0xFFFFFFCB
	Mem0[esi + 0x0249CE03:word32] = v19
	SCZO = cond(v19)
	ch = ch + 0xD8 + C
	SCZO = cond(ch)
	ecx = ecx + ebx
	SCZO = cond(ecx)
l004027DF:
l0040280B_thunk_fn00402899:
	call fn00402899 (retsize: 0;)
	return
	// succ:  fn004027DF_exit
fn004027DF_exit:


// fn004027FA
// Return size: 0
void fn004027FA()
fn004027FA_entry:
	// succ:  l004027FA
l004027FA:
	esp = fp
	esp = esp + 0x00000004
	cl = cl + 0xAE
	SCZO = cond(cl)
	ecx = ecx + esi
	SCZO = cond(ecx)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	cl = cl + bl
	SCZO = cond(cl)
	ch = ch + 0xD8 + C
	SCZO = cond(ch)
	ecx = ecx + ebx
	SCZO = cond(ecx)
	// succ:  l0040280B_thunk_fn00402899 l0040280B_thunk_fn00402899
l0040280B_thunk_fn00402899:
	call fn00402899 (retsize: 0;)
	return
	// succ:  fn004027FA_exit
fn004027FA_exit:


// fn00402818
// Return size: 0
void fn00402818()
fn00402818_entry:
	// succ:  l00402818
l00402818:
	dl = ch
	bl = bl - 0x01
	SZO = cond(bl)
	dl = dl | cl
	SZO = cond(dl)
	C = false
	edi = edx
	dl = 0xB5
	al = al - 0x73 - C
	SCZO = cond(al)
	cl = cl ^ dl
	SZO = cond(cl)
	C = false
	eax = eax - ebx
	SCZO = cond(eax)
fn00402818_exit:


// fn00402828
// Return size: 4
void fn00402828()
fn00402828_entry:
	// succ:  l00402828
l00402828:
	esp = fp
	return
	// succ:  fn00402828_exit
l00402828:
fn00402828_exit:


// fn0040285D
// Return size: 0
void fn0040285D()
fn0040285D_entry:
	// succ:  l0040285D
l0040285D:
	esp = fp
	esp = esp + 0x00000004
	edi = edi - 0x00000001
	SZO = cond(edi)
	bh = bh + 0x01
	SZO = cond(bh)
	ebx = ebx + edi
	SCZO = cond(ebx)
	bh = bh + 0x99 + C
	SCZO = cond(bh)
	bl = bl ^ al
	SZO = cond(bl)
	C = false
	bl = bl + 0xAD + C
	SCZO = cond(bl)
	call fn00402D9C (retsize: 4;)
	__outb(0xD8, al)
fn0040285D_exit:


// fn00402877
// Return size: 0
void fn00402877()
fn00402877_entry:
	// succ:  l00402877
l00402877:
	esp = fp
	ch = ~ch
	Mem0[esp - 0x00000008:word32] = eax
	dh = dh ^ dl
	SZO = cond(dh)
	C = false
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	ecx = eax
	cl = cl + 0x11
	SCZO = cond(cl)
	branch Test(ULT,C) TMP!
l00402877:
fn00402877_exit:


// fn00402899
// Return size: 0
void fn00402899()
fn00402899_entry:
	// succ:  l00402899
l00402899:
	esp = fp
	cl = cl - dl
	SCZO = cond(cl)
	esi = esi + eax
	SCZO = cond(esi)
	cl = cl - 0xEA - C
	SCZO = cond(cl)
	cl = cl + 0x01
	SZO = cond(cl)
	esi = esi - edi
	SCZO = cond(esi)
	ch = ~ch
	ecx = ecx | eax
	SZO = cond(ecx)
	C = false
	ch = ch + 0x01
	SZO = cond(ch)
	ch = ch | al
	SZO = cond(ch)
	C = false
	call fn00402068 (retsize: 4;)
	esp = esp + 0x00003BD7
	v14 = Mem0[eax - 0x0000005C:word32] & esp
	Mem0[eax - 0x0000005C:word32] = v14
	SZO = cond(Mem0[eax - 0x0000005C:word32])
	C = false
	eax = Mem0[esi:word32]
	esi = esi + 0x00000004
	esi = esi >> 0xFFFFFFC0
	SCZO = cond(esi)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00003000
	dh = dh + 0x8B + C
	SCZO = cond(dh)
	dh = dh + 0x88
	SCZO = cond(dh)
	cl = cl ^ bl
	SZO = cond(cl)
	C = false
	ebx = ebx | edi
	SZO = cond(ebx)
	C = false
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	edi = edi - edx
	SCZO = cond(edi)
	ch = ch - 0x01
	SZO = cond(ch)
	al = al + 0x6B
	SCZO = cond(al)
	branch Test(EQ,Z) l004028D1_thunk_fn004025A3
	goto l004028D7
	// succ:  l004028D7 l004028D1_thunk_fn004025A3
l00402899:
l004028D1_thunk_fn004025A3:
	call fn004025A3 (retsize: 0;)
	return
	// succ:  fn00402899_exit
l004028D7:
	esp = esp - 0x00000002
	Mem0[esp:word16] = di
	di = Mem0[esp:word16]
	esp = esp + 0x00000002
fn00402899_exit:


// fn004028E8
// Return size: 6
void fn004028E8()
fn004028E8_entry:
	// succ:  l004028E8
l004028E8:
	ch = ch + 0x37
	SCZO = cond(ch)
	cl = cl - bh
	SCZO = cond(cl)
	// succ:  l004028EB_thunk_fn004028EC
l004028EB_thunk_fn004028EC:
	call fn004028EC (retsize: 6;)
	return
	// succ:  fn004028E8_exit
fn004028E8_exit:


// fn004028EC
// Return size: 6
void fn004028EC()
fn004028EC_entry:
	goto l004028EC
	// succ:  l004028EC
l004026F3:
	cl = ~cl
	ch = ~ch
	cl = cl - 0x01 - C
	SCZO = cond(cl)
	cl = cl + al
	SCZO = cond(cl)
	ecx = ecx ^ edx
	SZO = cond(ecx)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	cl = cl ^ bl
	SZO = cond(cl)
	C = false
	ch = bl
	cl = cl + 0x0D + C
	SCZO = cond(cl)
	esi = esi | ecx
	SZO = cond(esi)
	C = false
	call fn0040251F (retsize: 4;)
	al = al & 0xA8
	SZO = cond(al)
	C = false
	SCZO = cond(esp - esi)
	// succ:  l0040270F_thunk_fn00402711
l0040270F_thunk_fn00402711:
	call fn00402711 (retsize: 4;)
	return
	// succ:  fn004028EC_exit
l004028EC:
	esp = fp
	SCZO = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004028EC_exit
l004028EC:
	ch = ch ^ al
	SZO = cond(ch)
	C = false
	ch = ch + 0x24
	SCZO = cond(ch)
	cl = cl ^ bl
	SZO = cond(cl)
	C = false
	ch = ah
	ch = ~ch
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	branch Test(ULT,C) l004026F3
	// succ:  l004028FF l004026F3
l004028FF:
fn004028EC_exit:


// fn0040290B
// Return size: 0
void fn0040290B()
fn0040290B_entry:
	// succ:  l0040290B
l0040290B:
	esp = fp
	bh = bh + ch
	SCZO = cond(bh)
	bh = bh | dl
	SZO = cond(bh)
	C = false
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bh = bh ^ dl
	SZO = cond(bh)
	C = false
	esi = esi + ecx
	SCZO = cond(esi)
	bh = bh + 0x01
	SZO = cond(bh)
	bl = bl + 0x7F
	SCZO = cond(bl)
	bl = ch
	branch Test(OV,O) l0040291C_thunk_fn00402C8D
	goto l00402922
	// succ:  l00402922 l0040291C_thunk_fn00402C8D
l0040291C_thunk_fn00402C8D:
	call fn00402C8D (retsize: 0;)
	return
	// succ:  fn0040290B_exit
l00402922:
	v13 = al
	al = al
	al = v13
	branch Test(NO,O) l00402924_thunk_fn00402C8D
	goto l0040292A
	// succ:  l0040292A l00402924_thunk_fn00402C8D
l00402924_thunk_fn00402C8D:
	call fn00402C8D (retsize: 0;)
	return
	// succ:  fn0040290B_exit
l0040292A:
	return
	// succ:  fn0040290B_exit
fn0040290B_exit:


// fn0040292E
// Return size: 0
void fn0040292E()
fn0040292E_entry:
	goto l0040292E
	// succ:  l0040292E
l004024B1:
	bl = bl | al
	SZO = cond(bl)
	C = false
	ebx = ebx - edx
	SCZO = cond(ebx)
	bh = dl
	bh = bh | ah
	SZO = cond(bh)
	C = false
	bh = bh - 0x50 - C
	SCZO = cond(bh)
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	bl = bl - bh
	SCZO = cond(bl)
	call fn00402C4B (retsize: 4;)
	edx = 0xFC210157
	v23 = Mem0[edi + 0x80F833C9:word32] >>u 0x00000001
	Mem0[edi + 0x80F833C9:word32] = v23
	SCZO = cond(v23)
	// succ:  l004024CA_thunk_fn004024D0
l004024CA_thunk_fn004024D0:
	call fn004024D0 (retsize: 0;)
	return
	// succ:  fn0040292E_exit
l0040292E:
	esp = fp
	bl = bl - dh
	SCZO = cond(bl)
	eax = eax + 0x00000078
	edi = edi - 0x00000001
	SZO = cond(edi)
	bl = bl + 0x2A
	SCZO = cond(bl)
	bl = bl + 0x01
	SZO = cond(bl)
	bh = bh | dl
	SZO = cond(bh)
	C = false
	ebx = edi
	bl = bl + 0x49
	SCZO = cond(bl)
	branch Test(EQ,Z) l00402B18
	goto l00402946
	// succ:  l00402946 l00402B18
l0040292E:
l00402946:
	dx = dx
	// succ:  l0040294E
l0040294E:
	branch Test(NE,Z) l00402B18
	// succ:  l00402954 l00402B18
l00402954:
	C = __aaa(al, ah, &al, &ah)
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	es = Mem0[esp:selector]
	esp = esp + 0x00000002
	esp = 0x740DAFA3
	// succ:  l00402957_thunk_fn0040295B
l00402957_thunk_fn0040295B:
	call fn0040295B (retsize: 6;)
	return
	// succ:  fn0040292E_exit
l00402B18:
	bh = bh | ch
	SZO = cond(bh)
	C = false
	bl = bl + ah
	SCZO = cond(bl)
	bh = 0x81
	bl = bl + cl
	SCZO = cond(bl)
	bl = bl ^ ah
	SZO = cond(bl)
	C = false
	edi = edi - ecx
	SCZO = cond(edi)
	bh = bh + 0x59 + C
	SCZO = cond(bh)
	eax = eax + 0x00000008
	SCZO = cond(eax)
	bh = bh - ah
	SCZO = cond(bh)
	esi = esi - eax
	SCZO = cond(esi)
	goto l004024B1
	// succ:  l004024B1
fn0040292E_exit:


// fn0040295B
// Return size: 6
void fn0040295B()
fn0040295B_entry:
	// succ:  l0040295B
l0040295B:
	esp = fp
	branch Test(EQ,Z) l0040295B_thunk_fn004028EC
	goto l0040295D
	// succ:  l0040295D l0040295B_thunk_fn004028EC
l0040295B:
	Mem0[esp - 0x00000010:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = 0x0D
	bh = bh - 0x1B - C
	SCZO = cond(bh)
	ebx = (word32) ah
	edi = edi - ecx
	SCZO = cond(edi)
	esi = esi + edi
	SCZO = cond(esi)
	goto l0040296C_thunk_fn00402418
	// succ:  l0040296C_thunk_fn00402418
l0040295B_thunk_fn004028EC:
	call fn004028EC (retsize: 6;)
	return
	// succ:  fn0040295B_exit
l0040295D:
	esp = esp + 0x00000001
	SZO = cond(esp)
	al = al & 0xF0
	SZO = cond(al)
	C = false
	// succ:  l0040295E_thunk_fn00402960
l0040295E_thunk_fn00402960:
	call fn00402960 (retsize: 0;)
	return
	// succ:  fn0040295B_exit
l0040296C_thunk_fn00402418:
	call fn00402418 (retsize: 0;)
	return
	// succ:  fn0040295B_exit
fn0040295B_exit:


// fn0040295C
// Return size: 0
void fn0040295C()
fn0040295C_entry:
	// succ:  l0040295C
l0040295C:
	esp = fp
	Mem0[esp - 0x00000010:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l0040295C_thunk_fn00402960
l0040295C_thunk_fn00402960:
	call fn00402960 (retsize: 0;)
	return
	// succ:  fn0040295C_exit
fn0040295C_exit:


// fn00402960
// Return size: 0
void fn00402960()
fn00402960_entry:
	// succ:  l00402960
l00402960:
	esp = fp
	bl = 0x0D
	bh = bh - 0x1B - C
	SCZO = cond(bh)
	ebx = (word32) ah
	edi = edi - ecx
	SCZO = cond(edi)
	esi = esi + edi
	SCZO = cond(esi)
	goto l0040296C_thunk_fn00402418
	// succ:  l0040296C_thunk_fn00402418
l00402960:
	bl = 0x0D
	bh = bh - 0x1B - C
	SCZO = cond(bh)
	ebx = (word32) ah
	edi = edi - ecx
	SCZO = cond(edi)
	esi = esi + edi
	SCZO = cond(esi)
	goto l0040296C_thunk_fn00402418
	// succ:  l0040296C_thunk_fn00402418
l0040296C_thunk_fn00402418:
	call fn00402418 (retsize: 0;)
	return
	// succ:  fn00402960_exit
l0040296C_thunk_fn00402418:
	call fn00402418 (retsize: 0;)
	return
	// succ:  fn00402960_exit
fn00402960_exit:


// fn004029B8
// Return size: 6
void fn004029B8()
fn004029B8_entry:
	// succ:  l004029B8
l004029B8:
	esp = fp
	bh = al
	bl = ~bl
	bh = bh - dl
	SCZO = cond(bh)
	esi = ebx
	bl = bl + 0x01
	SZO = cond(bl)
	bh = bh | cl
	SZO = cond(bh)
	C = false
	call fn00402CF4 (retsize: 4;)
	ecx = ecx - 0x00000001
	branch Test(NE,Z) && ecx != 0x00000000 l004029C9_thunk_fn0040295B
	goto l004029CB
	// succ:  l004029CB l004029C9_thunk_fn0040295B
l004029B8:
l004029C9_thunk_fn0040295B:
	call fn0040295B (retsize: 6;)
	return
	// succ:  fn004029B8_exit
l004029CB:
	esi = 0xB51E710B
	// succ:  l004029CB_thunk_fn004029D0
l004029CB_thunk_fn004029D0:
	call fn004029D0 (retsize: 0;)
	return
	// succ:  fn004029B8_exit
fn004029B8_exit:


// fn004029D0
// Return size: 0
void fn004029D0()
fn004029D0_entry:
	goto l004029D0
	// succ:  l004029D0
l0040217D:
	ebx = ecx
	// succ:  l0040217D_thunk_fn0040217F
l0040217D_thunk_fn0040217F:
	call fn0040217F (retsize: 0;)
	return
	// succ:  fn004029D0_exit
l004029D0:
	esp = fp
	esi = esi - edx
	SCZO = cond(esi)
	edi = esi
	ebx = ebx | esi
	SZO = cond(ebx)
	C = false
	bh = bh + 0x36 + C
	SCZO = cond(bh)
	bh = al
	bh = bh | al
	SZO = cond(bh)
	C = false
	branch Test(ULE,CZ) l0040217D
	goto l004029E3
	// succ:  l004029E3 l0040217D
l004029D0:
l004029E3:
	dl = dl
	branch Test(UGT,CZ) l0040217D
	// succ:  l004029EB l0040217D
l004029EB:
	ebp = ebp + ecx
	SCZO = cond(ebp)
	eax = eax - 0xD9F6ED15 - C
	SCZO = cond(eax)
	// succ:  l004029ED_thunk_fn004029F2
l004029ED_thunk_fn004029F2:
	call fn004029F2 (retsize: 0;)
	return
	// succ:  fn004029D0_exit
fn004029D0_exit:


// fn004029F0
// Return size: 6
void fn004029F0()
fn004029F0_entry:
	// succ:  l004029F0
l004029F0:
	esp = fp
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	call fn004027C3 (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	// succ:  l004029F2 l00402A04_thunk_fn00402A09
l004029F0:
l00402A04_thunk_fn00402A09:
	call fn00402A09 (retsize: 6;)
	return
	// succ:  fn004029F0_exit
fn004029F0_exit:


// fn004029F2
// Return size: 0
void fn004029F2()
fn004029F2_entry:
	// succ:  l004029F2
l004029F2:
	esp = fp
	ecx = esi
	ecx = ecx | eax
	SZO = cond(ecx)
	C = false
	ch = ch + 0x01
	SZO = cond(ch)
	ch = ch + 0xF3 + C
	SCZO = cond(ch)
	ch = ch + 0x40
	SCZO = cond(ch)
	cl = cl | ah
	SZO = cond(cl)
	C = false
	cl = ~cl
	Mem0[ebx:byte] = dl
	call fn004027C3 (retsize: 4;)
	// succ:  l00402A04_thunk_fn00402A09
l00402A04_thunk_fn00402A09:
	call fn00402A09 (retsize: 6;)
	return
	// succ:  fn004029F2_exit
fn004029F2_exit:


// fn00402A09
// Return size: 6
void fn00402A09()
fn00402A09_entry:
	// succ:  l00402A09
l00402A09:
	esp = fp
	esi = 0x7A5AB185
	goto l00402A09_thunk_fn00402A0E
	// succ:  l00402A09_thunk_fn00402A0E
l00402A09:
	esi = 0x7A5AB185
	goto l00402A09_thunk_fn00402A0E
	// succ:  l00402A09_thunk_fn00402A0E
l00402A09_thunk_fn00402A0E:
	call fn00402A0E (retsize: 6;)
	return
	// succ:  fn00402A09_exit
l00402A09_thunk_fn00402A0E:
	call fn00402A0E (retsize: 0;)
	return
	// succ:  fn00402A09_exit
fn00402A09_exit:


// fn00402A0E
// Return size: 6
void fn00402A0E()
fn00402A0E_entry:
	// succ:  l00402A0E
l00402A0E:
	esp = fp
	esi = esi | edx
	SZO = cond(esi)
	C = false
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	dh = dh - ch
	SCZO = cond(dh)
	dl = dl + 0x01
	SZO = cond(dl)
	bl = 0x05
	edx = edx ^ edi
	SZO = cond(edx)
	C = false
	ecx = edi
	dl = dl | cl
	SZO = cond(dl)
	C = false
	dh = dh - 0x01
	SZO = cond(dh)
	cl = cl - 0x01
	SZO = cond(cl)
	goto l00402A22_thunk_fn004022CB
	// succ:  l00402A22_thunk_fn004022CB
l00402A0E:
l00402A22_thunk_fn004022CB:
	call fn004022CB (retsize: 6;)
	return
	// succ:  fn00402A0E_exit
fn00402A0E_exit:


// fn00402A56
// Return size: 0
void fn00402A56()
fn00402A56_entry:
	// succ:  l00402A56
l00402A56:
	esp = fp
	Mem0[esp - 0x0000002C:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	dh = -dh
	SCZO = cond(dh)
	C = dh == 0x00
	ch = ch ^ ah
	SZO = cond(ch)
	C = false
	ch = ah
	esi = esi + 0x00000001
	SZO = cond(esi)
	dh = ~dh
	dl = dl - 0x01
	SZO = cond(dl)
	call fn00402A97 (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	// succ:  l00402A65_thunk_fn00402A6A
l00402A65_thunk_fn00402A6A:
	call fn00402A6A (retsize: 0;)
	return
	// succ:  fn00402A56_exit
fn00402A56_exit:


// fn00402A6A
// Return size: 0
void fn00402A6A()
fn00402A6A_entry:
	// succ:  l00402A6A
l00402A6A:
	esp = fp
	dl = 0xD1
	v6 = Mem0[ebp + 0x00000050:byte] + ch
	Mem0[ebp + 0x00000050:byte] = v6
	SCZO = cond(v6)
	D = true
	esp = esp + 0x00000001
	SZO = cond(esp)
	goto l00402A70_thunk_fn00402A71
	// succ:  l00402A70_thunk_fn00402A71
l00402A6A:
	dl = 0xD1
	v10 = Mem0[ebp + 0x00000050:byte] + ch
	Mem0[ebp + 0x00000050:byte] = v10
	SCZO = cond(v10)
	D = true
	esp = esp + 0x00000001
	SZO = cond(esp)
	goto l00402A70_thunk_fn00402A71
	// succ:  l00402A70_thunk_fn00402A71
l00402A70_thunk_fn00402A71:
	call fn00402A71 (retsize: 0;)
	return
	// succ:  fn00402A6A_exit
l00402A70_thunk_fn00402A71:
	call fn00402A71 (retsize: 0;)
	return
	// succ:  fn00402A6A_exit
fn00402A6A_exit:


// fn00402A71
// Return size: 0
void fn00402A71()
fn00402A71_entry:
	// succ:  l00402A71
l00402A71:
	bl = bl | cl
	SZO = cond(bl)
	C = false
	esi = esi | edx
	SZO = cond(esi)
	C = false
	edi = esi
	bh = bh | al
	SZO = cond(bh)
	C = false
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	bh = bh - cl
	SCZO = cond(bh)
	bh = bh ^ ch
	SZO = cond(bh)
	C = false
	bh = bh - 0x5C - C
	SCZO = cond(bh)
	bl = dl
	branch Test(ULE,CZ) l00402A83_thunk_fn0040292E
	goto l00402A89
	// succ:  l00402A89 l00402A83_thunk_fn0040292E
l00402A83_thunk_fn0040292E:
	call fn0040292E (retsize: 0;)
	return
	// succ:  fn00402A71_exit
l00402A89:
fn00402A71_exit:


// fn00402A97
// Return size: 4
void fn00402A97()
fn00402A97_entry:
	// succ:  l00402A97
l00402A97:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = ecx
	ecx = v3
	branch Test(LE,SZO) l00402A9C
	// succ:  l00402A9C
l00402A9C:
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx + esi
	SCZO = cond(ecx)
	cl = bh
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	al = al ^ bl
	SZO = cond(al)
	C = false
	branch Test(OV,O) l00402AA4_thunk_fn00402E3C
	goto l00402AAA
	// succ:  l00402AAA l00402AA4_thunk_fn00402E3C
l00402AA4_thunk_fn00402E3C:
	call fn00402E3C (retsize: 4;)
	return
	// succ:  fn00402A97_exit
l00402AAA:
	branch Test(PO,P) l00402AAC
	// succ:  l00402AAC
l00402AAC:
	branch Test(NO,O) l00402AAC_thunk_fn00402E3C
	goto l00402AB2
	// succ:  l00402AB2 l00402AAC_thunk_fn00402E3C
l00402AAC_thunk_fn00402E3C:
	call fn00402E3C (retsize: 4;)
	return
	// succ:  fn00402A97_exit
l00402AB2:
	edi = 0x03CDFDBC
	v16 = (Mem0[edx + 0x8ADEF6EC:word32] & 0x00000001 << 0xE3) != 0x00000000
	Mem0[edx + 0x8ADEF6EC:word32] = __ror(Mem0[edx + 0x8ADEF6EC:word32], 0xE3)
	C = v16
	esi = esi - ecx
	SCZO = cond(esi)
	cl = cl - 0x66 - C
	SCZO = cond(cl)
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	ecx = edi
	ch = -ch
	SCZO = cond(ch)
	C = ch == 0x00
	ah = ~ah
	// succ:  l00402ACB_thunk_fn0040223D
l00402ACB_thunk_fn0040223D:
	call fn0040223D (retsize: 0;)
	return
	// succ:  fn00402A97_exit
fn00402A97_exit:


// fn00402B3A
// Return size: 6
void fn00402B3A()
fn00402B3A_entry:
	// succ:  l00402B3A
l00402B3A:
	esp = fp
	Mem0[esp:word32] = edi
	ch = ch
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh + 0xE2
	SCZO = cond(bh)
	bl = -bl
	SCZO = cond(bl)
	C = bl == 0x00
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	bl = 0xA9
	branch Test(OV,O) l00402B49_thunk_fn004022B4
	goto l00402B4F
	// succ:  l00402B4F l00402B49_thunk_fn004022B4
l00402B49_thunk_fn004022B4:
	call fn004022B4 (retsize: 6;)
	return
	// succ:  fn00402B3A_exit
l00402B4F:
	cl = cl
	branch Test(NO,O) l00402B51_thunk_fn004022B4
	goto l00402B51_thunk_fn00402B57
	// succ:  l00402B51_thunk_fn00402B57 l00402B51_thunk_fn004022B4
l00402B51_thunk_fn004022B4:
	call fn004022B4 (retsize: 6;)
	return
	// succ:  fn00402B3A_exit
l00402B51_thunk_fn00402B57:
	call fn00402B57 (retsize: 0;)
	return
	// succ:  fn00402B3A_exit l00402B51_thunk_fn00402B57
l00402B51_thunk_fn00402B57:
	call fn00402B57 (retsize: 0;)
	return
	// succ:  fn00402B3A_exit
fn00402B3A_exit:


// fn00402B53
// Return size: 0
void fn00402B53()
fn00402B53_entry:
	// succ:  l00402B53
l00402B53:
	esp = fp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	edx = edx_eax % edi
	eax = edx_eax / edi
	SCZO = cond(eax)
fn00402B53_exit:


// fn00402B57
// Return size: 0
void fn00402B57()
fn00402B57_entry:
	// succ:  l00402B57
l00402B57:
	esp = fp
	SCZO = cond(al - ah)
	__cli()
	ebp = ebp - 0x8DEC3792
	SCZO = cond(ebp)
	goto l00402B5A_thunk_fn00402B60
	// succ:  l00402B5A_thunk_fn00402B60
l00402B57:
l00402B5A_thunk_fn00402B60:
	call fn00402B60 (retsize: 0;)
	return
	// succ:  fn00402B57_exit
fn00402B57_exit:


// fn00402B5F
// Return size: 0
void fn00402B5F()
fn00402B5F_entry:
	// succ:  l00402B5F
l00402B5F:
	esp = fp
	esp = esp + 0x00000004
	// succ:  l00402B5F_thunk_fn00402B60
l00402B5F_thunk_fn00402B60:
	call fn00402B60 (retsize: 0;)
	return
	// succ:  fn00402B5F_exit
fn00402B5F_exit:


// fn00402B60
// Return size: 0
void fn00402B60()
fn00402B60_entry:
	// succ:  l00402B60
l00402B60:
	esp = fp
	al = al & 0x04
	SZO = cond(al)
	C = false
	eax = eax - edi
	SCZO = cond(eax)
	goto l00402B63_thunk_fn00402B65
	// succ:  l00402B63_thunk_fn00402B65
l00402B60:
	eax = eax - edi
	SCZO = cond(eax)
	// succ:  l00402B60_thunk_fn00402B77
l00402B60_thunk_fn00402B77:
	call fn00402B77 (retsize: 0;)
	return
	// succ:  fn00402B60_exit
l00402B63_thunk_fn00402B65:
	call fn00402B65 (retsize: 0;)
	return
	// succ:  fn00402B60_exit
fn00402B60_exit:


// fn00402B65
// Return size: 0
void fn00402B65()
fn00402B65_entry:
	// succ:  l00402B65
l00402B65:
	esp = fp
	edx = edx | edi
	SZO = cond(edx)
	C = false
	ah = ah + dh
	SCZO = cond(ah)
	ebx = ebx + 0x000002A1
	SCZO = cond(ebx)
	eax = eax + edx
	SCZO = cond(eax)
	ah = ah - 0x93 - C
	SCZO = cond(ah)
	esi = esi - 0x00000001
	SZO = cond(esi)
	branch Test(LT,SO) l00402B75_thunk_fn00402BA5
	goto l00402B75_thunk_fn00402B77
	// succ:  l00402B75_thunk_fn00402B77 l00402B75_thunk_fn00402BA5
l00402B65:
	edx = edx | edi
	SZO = cond(edx)
	C = false
	ah = ah + dh
	SCZO = cond(ah)
	ebx = ebx + 0x000002A1
	SCZO = cond(ebx)
	eax = eax + edx
	SCZO = cond(eax)
	ah = ah - 0x93 - C
	SCZO = cond(ah)
	esi = esi - 0x00000001
	SZO = cond(esi)
	branch Test(LT,SO) l00402BA5
	goto l00402B75_thunk_fn00402B77
	// succ:  l00402B75_thunk_fn00402B77 l00402B75_thunk_fn00402BA5
l00402B75_thunk_fn00402B77:
	call fn00402B77 (retsize: 0;)
	return
	// succ:  fn00402B65_exit l00402B75_thunk_fn00402B77
l00402B75_thunk_fn00402B77:
	call fn00402B77 (retsize: 0;)
	return
	// succ:  fn00402B65_exit
l00402B75_thunk_fn00402B77:
	call fn00402B77 (retsize: 0;)
	return
	// succ:  fn00402B65_exit
l00402B75_thunk_fn00402BA5:
	call fn00402BA5 (retsize: 0;)
	return
	// succ:  fn00402B65_exit
l00402B75_thunk_fn00402BA5:
	call fn00402BA5 (retsize: 0;)
	return
	// succ:  fn00402B65_exit
fn00402B65_exit:


// fn00402B77
// Return size: 0
void fn00402B77()
fn00402B77_entry:
	goto l00402B77
	// succ:  l00402B77
l00402B34:
l00402B64:
	call fn00402B65 (retsize: 0;)
	return
	// succ:  l00402B65 fn00402B77_exit
l00402B77:
	branch Test(NE,Z) l00402B79
	// succ:  l00402B79
l00402B79:
	branch Test(GE,SO) l00402BA5
	goto l00402B7B
	// succ:  l00402B7B l00402B79_thunk_fn00402BA5
l00402B79_thunk_fn00402BA5:
	call fn00402BA5 (retsize: 0;)
	return
	// succ:  fn00402B77_exit
l00402B7B:
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebx - 0x00000001
	SZO = cond(ebx)
	branch Test(UGT,CZ) l00402B64
	// succ:  l00402B7F l00402B64
l00402B7F:
	branch Test(ULE,CZ) l00402B34
	// succ:  l00402B7F_thunk_fn00402B81 l00402B34
l00402B7F_thunk_fn00402B81:
	call fn00402B81 (retsize: 0;)
	return
	// succ:  fn00402B77_exit
fn00402B77_exit:


// fn00402B81
// Return size: 0
void fn00402B81()
fn00402B81_entry:
	goto l00402B81
	// succ:  l00402B81
l0040237E:
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	eax = ~eax
	bh = ~bh
	ebx = ecx
	bh = bh + 0xD0
	SCZO = cond(bh)
	esi = esi + 0x00000001
	SZO = cond(esi)
	bh = bh - 0xB8 - C
	SCZO = cond(bh)
l00402B81:
	bh = 0x6A
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	bl = bl | dh
	SZO = cond(bl)
	C = false
	bl = bl - 0x01
	SZO = cond(bl)
	ebx = ebx - esi
	SCZO = cond(ebx)
	branch Test(PE,P) l0040237E
	// succ:  l00402B93 l0040237E
l00402B93:
	v12 = dh
	dh = dh
	dh = v12
	esp = esp - 0x00000002
	Mem0[esp:word16] = bx
	bx = Mem0[esp:word16]
	esp = esp + 0x00000002
	branch Test(PO,P) l0040237E
	// succ:  l00402B9F l0040237E
l00402B9F:
	SZO = cond(Mem0[ecx + ebp * 0x00000008:word32] & esi)
	C = false
	branch Test(EQ,Z) l00402BA2_thunk_fn00402B53
	goto l00402BA4
	// succ:  l00402BA4 l00402BA2_thunk_fn00402B53
l00402BA2_thunk_fn00402B53:
	call fn00402B53 (retsize: 0;)
	return
	// succ:  fn00402B81_exit
l00402BA4:
	SZO = cond(Mem0[ebx:word32] & eax)
	C = false
	// succ:  l00402BA6
l00402BA6:
	v19 = Mem0[esi + 0xDE804A9D:byte] << 0x01
	Mem0[esi + 0xDE804A9D:byte] = v19
	SCZO = cond(v19)
	// succ:  l00402BAC
l00402BAC:
fn00402B81_exit:


// fn00402BA5
// Return size: 0
void fn00402BA5()
fn00402BA5_entry:
	// succ:  l00402BA5
l00402BA5:
	edx = edx + eax
	SCZO = cond(edx)
	// succ:  l00402BA7
l00402BA7:
	dh = 0x9D
	// succ:  l00402BA7_thunk_fn00402BA9
l00402BA7_thunk_fn00402BA9:
	call fn00402BA9 (retsize: 0;)
	return
	// succ:  fn00402BA5_exit
fn00402BA5_exit:


// fn00402BA9
// Return size: 0
void fn00402BA9()
fn00402BA9_entry:
	// succ:  l00402BA9
l00402BA9:
	esp = fp
	edx = edx - 0x00000001
	SZO = cond(edx)
	dh = dh - 0x55 - C
	SCZO = cond(dh)
	goto l00402BAA_thunk_fn00402BAD
	// succ:  l00402BAA_thunk_fn00402BAD
l00402BA9:
	edx = edx - 0x00000001
	SZO = cond(edx)
	dh = dh - 0x55 - C
	SCZO = cond(dh)
	goto l00402BAA_thunk_fn00402BAD
	// succ:  l00402BAA_thunk_fn00402BAD
l00402BAA_thunk_fn00402BAD:
	call fn00402BAD (retsize: 0;)
	return
	// succ:  fn00402BA9_exit
l00402BAA_thunk_fn00402BAD:
	call fn00402BAD (retsize: 0;)
	return
	// succ:  fn00402BA9_exit
fn00402BA9_exit:


// fn00402BAD
// Return size: 0
void fn00402BAD()
fn00402BAD_entry:
	// succ:  l00402BAD
l00402BAD:
fn00402BAD_exit:


// fn00402BBD
// Return size: 0
void fn00402BBD()
fn00402BBD_entry:
	// succ:  l00402BBD
l00402BBD:
	esp = fp
	al = al - 0x01
	SZO = cond(al)
	ch = ch ^ bh
	SZO = cond(ch)
	C = false
	ah = ah ^ al
	SZO = cond(ah)
	C = false
	ch = ch ^ ah
	SZO = cond(ch)
	C = false
	ch = ch | bh
	SZO = cond(ch)
	C = false
	edx = edx + 0x00000001
	SZO = cond(edx)
	ecx = ecx | esi
	SZO = cond(ecx)
	C = false
	cl = ~cl
	goto l00402BCC_thunk_fn004027DF
	// succ:  l00402BCC_thunk_fn004027DF
l00402BBD:
l00402BCC_thunk_fn004027DF:
	call fn004027DF (retsize: 0;)
	return
	// succ:  fn00402BBD_exit
fn00402BBD_exit:


// fn00402BF7
// Return size: 0
void fn00402BF7()
fn00402BF7_entry:
	// succ:  l00402BF7
l00402BF7:
	dl = 0xC6
	dh = dh + dl
	SCZO = cond(dh)
	dl = dl + 0x01
	SZO = cond(dl)
	dh = ch
	cl = ~cl
	eax = eax ^ 0xAE909A43
	SZO = cond(eax)
	C = false
	call fn00402628 (retsize: 4;)
	v15 = Mem0[ecx + 0x0000005C:word32] + ebp + C
	Mem0[ecx + 0x0000005C:word32] = v15
	SCZO = cond(v15)
fn00402BF7_exit:


// fn00402C11
// Return size: 0
void fn00402C11()
fn00402C11_entry:
	// succ:  l00402C11
l00402C11:
	esp = fp
	Mem0[esp - 0x00000018:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = 0x3F
	bh = bh + 0x1E
	SCZO = cond(bh)
	edi = edi - ecx
	SCZO = cond(edi)
	bh = bh ^ ah
	SZO = cond(bh)
	C = false
	bh = bh + 0x2B + C
	SCZO = cond(bh)
	call fn0040285D (retsize: 4;)
	eax = eax + 0x87EFF068
	SCZO = cond(eax)
	// succ:  l00402C26_thunk_fn00402C2B
l00402C26_thunk_fn00402C2B:
	call fn00402C2B (retsize: 0;)
	return
	// succ:  fn00402C11_exit
fn00402C11_exit:


// fn00402C2A
// Return size: 0
void fn00402C2A()
fn00402C2A_entry:
	// succ:  l00402C2A
l00402C2A:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = esi
	esi = v3
	// succ:  l00402C2A_thunk_fn00402C2B
l00402C2A_thunk_fn00402C2B:
	call fn00402C2B (retsize: 0;)
	return
	// succ:  fn00402C2A_exit
l00402C3E_thunk_fn0040232F:
	call fn0040232F (retsize: 0;)
	return
	// succ:  fn00402C2A_exit
fn00402C2A_exit:


// fn00402C2B
// Return size: 0
void fn00402C2B()
fn00402C2B_entry:
	// succ:  l00402C2B
l00402C2B:
	esp = fp
	al = al ^ 0x24
	SZO = cond(al)
	C = false
	cx = ecx
	goto l00402C30_thunk_fn00402C35
	// succ:  l00402C30_thunk_fn00402C35
l00402C2B:
	cx = ecx
	// succ:  l00402C2B_thunk_fn00402C35
l00402C2B_thunk_fn00402C35:
	call fn00402C35 (retsize: 0;)
	return
	// succ:  fn00402C2B_exit
l00402C30_thunk_fn00402C35:
	call fn00402C35 (retsize: 0;)
	return
	// succ:  fn00402C2B_exit
fn00402C2B_exit:


// fn00402C35
// Return size: 0
void fn00402C35()
fn00402C35_entry:
	// succ:  l00402C35
l00402C35:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = bl - 0xAA - C
	SCZO = cond(bl)
	bh = bh + 0x02
	SCZO = cond(bh)
	bh = bh | dh
	SZO = cond(bh)
	C = false
	goto l00402C3E_thunk_fn0040232F
	// succ:  l00402C3E_thunk_fn0040232F
fn00402C35_exit:


// fn00402C4B
// Return size: 0
void fn00402C4B()
fn00402C4B_entry:
	// succ:  l00402C4B
l00402C4B:
	esp = fp
	Mem0[esp - 0x00000010:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bl = bl + 0x0D
	SCZO = cond(bl)
	edi = edi ^ ebx
	SZO = cond(edi)
	C = false
	bh = bh + 0x5E
	SCZO = cond(bh)
	esi = ebx
	eax = Mem0[eax:word32]
	bh = -bh
	SCZO = cond(bh)
	C = bh == 0x00
	bh = ah
	// succ:  l00402D17
l00402D17:
	bh = bh | bl
	SZO = cond(bh)
	C = false
	bl = ~bl
	esi = esi + 0x00000001
	SZO = cond(esi)
	bl = ch
	bl = al
	bl = bl + 0x01
	SZO = cond(bl)
	bh = dh
	// succ:  l00402D24_thunk_fn00401FFD
l00402D24_thunk_fn00401FFD:
	call fn00401FFD (retsize: 0;)
	return
	// succ:  fn00402C4B_exit
fn00402C4B_exit:


// fn00402C6B
// Return size: 0
void fn00402C6B()
fn00402C6B_entry:
	goto l00402C6B
	// succ:  l00402C6B
l0040239A:
	esi = esi - edi
	SCZO = cond(esi)
	esi = esi ^ ebx
	SZO = cond(esi)
	C = false
	esi = esi - ebx
	SCZO = cond(esi)
	// succ:  l0040239E_thunk_fn004023A0
l0040239E_thunk_fn004023A0:
	call fn004023A0 (retsize: 0;)
	return
	// succ:  fn00402C6B_exit
l00402C6B:
	esp = fp
	esi = esi - 0x00000001
	SZO = cond(esi)
	cl = cl ^ al
	SZO = cond(cl)
	C = false
	ecx = ecx + ebx
	SCZO = cond(ecx)
	ecx = ecx + esi
	SCZO = cond(ecx)
	ch = 0x60
	ecx = ecx - 0x00000001
	SZO = cond(ecx)
	cl = cl - 0x01
	SZO = cond(cl)
	ecx = eax
	branch Test(ULT,C) l0040239A
	goto l00402C7F
	// succ:  l00402C7F l0040239A
l00402C6B:
l00402C7F:
	v13 = cl
	cl = cl
	cl = v13
	edi = edi
	branch Test(UGE,C) l0040239A
	// succ:  l00402C89 l0040239A
l00402C89:
fn00402C6B_exit:


// fn00402C8D
// Return size: 0
void fn00402C8D()
fn00402C8D_entry:
	// succ:  l00402C8D
l00402C8D:
	esp = fp
	bl = bl + 0xC5
	SCZO = cond(bl)
	bh = bh | al
	SZO = cond(bh)
	C = false
	ebx = ebx - ecx
	SCZO = cond(ebx)
	eax = ecx
	ebx = ebx - esi
	SCZO = cond(ebx)
	edi = eax
	branch Test(LT,SO) l00402CA9
	goto l00402C9C
	// succ:  l00402C9C l00402CA9
l00402C8D:
l00402C9C:
	dl = dl
	bx = ebx
	branch Test(GE,SO) l00402CA9
	// succ:  l00402CA3 l00402CA9
l00402CA3:
	Mem0[ebp + 0x4F113643 + edi:word16] = cs
	goto l00402CAA
	// succ:  l00402CAA
l00402CA9:
	edi = edi - 0x00000001
	SZO = cond(edi)
	// succ:  l00402CAA
l00402CAA:
	bl = bh
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	bh = bh ^ ch
	SZO = cond(bh)
	C = false
	bl = bl + 0x01
	SZO = cond(bl)
	bl = 0xC2
	bl = bl | dh
	SZO = cond(bl)
	C = false
	edi = edi ^ esi
	SZO = cond(edi)
	C = false
	bh = bh - ch
	SCZO = cond(bh)
	eax = eax + Mem0[eax + 0x0000003C:word32]
	SCZO = cond(eax)
	branch Test(ULT,C) l00402CBC_thunk_fn004029D0
	goto l00402CC2
	// succ:  l00402CC2 l00402CBC_thunk_fn004029D0
l00402CBC_thunk_fn004029D0:
	call fn004029D0 (retsize: 0;)
	return
	// succ:  fn00402C8D_exit
l00402CC2:
	ah = ah
	branch Test(UGE,C) l00402CC4_thunk_fn004029D0
	goto l00402CCA
	// succ:  l00402CCA l00402CC4_thunk_fn004029D0
l00402CC4_thunk_fn004029D0:
	call fn004029D0 (retsize: 0;)
	return
	// succ:  fn00402C8D_exit
l00402CCA:
	C = __das(al, &al)
	__outb(0xD5, al)
	edx = edx - ebx
	SCZO = cond(edx)
	branch Test(NO,O) l00402CCF_thunk_fn00402D07
	goto l00402CD1
	// succ:  l00402CD1 l00402CCF_thunk_fn00402D07
l00402CCF_thunk_fn00402D07:
	call fn00402D07 (retsize: 0;)
	return
	// succ:  fn00402C8D_exit
l00402CD1:
	v25 = Mem0[ebp + 0x8A042464:byte] | cl
	Mem0[ebp + 0x8A042464:byte] = v25
	SZO = cond(Mem0[ebp + 0x8A042464:byte])
	C = false
	// succ:  l00402CD1_thunk_fn00402CD7
l00402CD1_thunk_fn00402CD7:
	call fn00402CD7 (retsize: 0;)
	return
	// succ:  fn00402C8D_exit
fn00402C8D_exit:


// fn00402CD2
// Return size: 0
void fn00402CD2()
fn00402CD2_entry:
	// succ:  l00402CD2
l00402CD2:
	esp = fp
	esp = esp + 0x00000004
	ch = al
	// succ:  l00402CD6_thunk_fn00402CD7
l00402CD6_thunk_fn00402CD7:
	call fn00402CD7 (retsize: 0;)
	return
	// succ:  fn00402CD2_exit
fn00402CD2_exit:


// fn00402CD7
// Return size: 0
void fn00402CD7()
fn00402CD7_entry:
	goto l00402CD7
	// succ:  l00402CD7
l00402AD6:
	ecx = edx
	ch = ch | cl
	SZO = cond(ch)
	C = false
	esi = edi
	cl = cl + 0x45
	SCZO = cond(cl)
	ch = ch - 0x01
	SZO = cond(ch)
	ch = ~ch
	ch = ch - 0x01
	SZO = cond(ch)
	cl = cl + 0x8D
	SCZO = cond(cl)
	ch = bh
l00402CD7:
	esp = fp
l00402CD7:
	ch = 0xA8
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	cl = 0xA4
	edi = edi + 0x00000001
	SZO = cond(edi)
	branch Test(OV,O) l00402AD6
	// succ:  l00402CE5 l00402AD6
l00402CE5:
	bx = bx
fn00402CD7_exit:


// fn00402CF4
// Return size: 0
void fn00402CF4()
fn00402CF4_entry:
	// succ:  l00402CF4
l00402CF4:
	esp = fp
	Mem0[esp - 0x00000034:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bl
	bl = bl + 0xA6 + C
	SCZO = cond(bl)
	bl = ~bl
	bh = bh - bl
	SCZO = cond(bh)
	esi = esi - eax
	SCZO = cond(esi)
	bl = bl ^ ch
	SZO = cond(bl)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = Mem0[edx + 0x00000008:word32]
	// succ:  l00402D05_thunk_fn00402D07
l00402D05_thunk_fn00402D07:
	call fn00402D07 (retsize: 0;)
	return
	// succ:  fn00402CF4_exit
fn00402CF4_exit:


// fn00402D07
// Return size: 0
void fn00402D07()
fn00402D07_entry:
	// succ:  l00402D07
l00402D07:
	esp = fp
	v5 = Mem0[edx:byte] | dh
	Mem0[edx:byte] = v5
	SZO = cond(Mem0[edx:byte])
	C = false
	C = true
	esi = esi + eax
	SCZO = cond(esi)
	goto l00402D0C_thunk_fn00402656
	// succ:  l00402D0C_thunk_fn00402656
l00402D07:
	bh = bh ^ cl
	SZO = cond(bh)
	C = false
	esi = esi + eax
	SCZO = cond(esi)
	goto l00402D0C_thunk_fn00402656
	// succ:  l00402D0C_thunk_fn00402656
l00402D0C_thunk_fn00402656:
	call fn00402656 (retsize: 0;)
	return
	// succ:  fn00402D07_exit
l00402D0C_thunk_fn00402656:
	call fn00402656 (retsize: 0;)
	return
	// succ:  fn00402D07_exit
fn00402D07_exit:


// fn00402D2E
// Return size: 6
void fn00402D2E()
fn00402D2E_entry:
	// succ:  l00402D2E
l00402D2E:
	esp = fp
	esp = esp + 0x00000004
	call fn00402D37 (retsize: 4;)
	esp = esp + 0xFFFF8DF8
	// succ:  l00402D32_thunk_fn00402D37
l00402D32_thunk_fn00402D37:
	call fn00402D37 (retsize: 6;)
	return
	// succ:  fn00402D2E_exit
fn00402D2E_exit:


// fn00402D37
// Return size: 6
void fn00402D37()
fn00402D37_entry:
	goto l00402D37
	// succ:  l00402D37
l0040213B:
	cl = cl + 0x67
	SCZO = cond(cl)
	ch = 0xEB
	esi = esi ^ edx
	SZO = cond(esi)
	C = false
	ch = ch - 0x48 - C
	SCZO = cond(ch)
	ch = ~ch
	cl = ~cl
	ch = ch ^ dl
	SZO = cond(ch)
	C = false
	v26 = (dl & 0x01 << 0x08 - 0x03) != 0x00
	dl = __rol(dl, 0x03)
	C = v26
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	call fn004027FA (retsize: 4;)
	ebp = ebp + 0x00000001
	SZO = cond(ebp)
	SZO = cond(al & 0x76)
	C = false
	cl = dl
	// succ:  l00402157_thunk_fn00402159
l00402157_thunk_fn00402159:
	call fn00402159 (retsize: 0;)
	return
	// succ:  fn00402D37_exit
l00402975:
	ch = ch - 0xBB - C
	SCZO = cond(ch)
	ch = ~ch
	esi = esi - ebx
	SCZO = cond(esi)
	cl = ~cl
	esi = esi + 0x00000001
	SZO = cond(esi)
	dl = dl + 0x86
	SCZO = cond(dl)
	ch = ch + 0x01
	SZO = cond(ch)
	esi = esi + ebx
	SCZO = cond(esi)
	ch = dh
	cl = cl + ch
	SCZO = cond(cl)
	goto l0040213B
	// succ:  l0040213B
l00402D37:
	esp = fp
	ch = ch + 0x40 + C
	SCZO = cond(ch)
	ch = ch - 0x01
	SZO = cond(ch)
	ah = ah - 0xAD - C
	SCZO = cond(ah)
	bl = bl ^ ch
	SZO = cond(bl)
	C = false
	eax = eax - edx
	SCZO = cond(eax)
	ebx = ecx
	ebx = ebx + edx
	SCZO = cond(ebx)
	edi = edi - 0x00000001
	SZO = cond(edi)
	call fn0040225A (retsize: 4;)
	esp = esp + esi + C
	SCZO = cond(esp)
	es_esp = Mem0[edx + 0x804EDDF6:segptr32]
	ds_edi = Mem0[edi + 0x00000000:segptr32]
	dl = ~dl
	ch = ch ^ bl
	SZO = cond(ch)
	C = false
	cl = cl + 0x01
	SZO = cond(cl)
	cl = cl ^ ch
	SZO = cond(cl)
	C = false
	esi = esi + 0x00000001
	SZO = cond(esi)
	ch = ch | cl
	SZO = cond(ch)
	C = false
	ch = ch + 0xDF + C
	SCZO = cond(ch)
	branch Test(ULE,CZ) l00402975
	// succ:  l00402D6B l00402975
l00402D6B:
	v22 = bh
	bh = bh
	bh = v22
	bx = ebx
	branch Test(UGT,CZ) l00402975
	// succ:  l00402D76 l00402975
l00402D76:
	return
	// succ:  fn00402D37_exit
fn00402D37_exit:


// fn00402D7D
// Return size: 0
void fn00402D7D()
fn00402D7D_entry:
	// succ:  l00402D7D
l00402D7D:
	esp = fp
	bh = bh ^ cl
	SZO = cond(bh)
	C = false
	bl = bl + 0x05 + C
	SCZO = cond(bl)
	bh = bh + 0x7E + C
	SCZO = cond(bh)
	edx = edx + ecx
	SCZO = cond(edx)
	ch = ch + 0x01
	SZO = cond(ch)
	ch = 0xC7
	ch = ch + bh
	SCZO = cond(ch)
	bh = bh - 0x01
	SZO = cond(bh)
	bl = bl ^ dl
	SZO = cond(bl)
	C = false
	call fn004021CB (retsize: 4;)
	esp = esp + 0xFFFF87A3
	Mem0[edi:word32] = __in(edx)
	edi = edi + 0x00000004
	esp = esp - Mem0[eax + 0x0000004A:word32]
	SCZO = cond(esp)
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	v16 = eax
	eax = edx
	edx = v16
	goto l00402D9B_thunk_fn00402D9C
	// succ:  l00402D9B_thunk_fn00402D9C
l00402D7D:
l00402D9B_thunk_fn00402D9C:
	call fn00402D9C (retsize: 0;)
	return
	// succ:  fn00402D7D_exit
fn00402D7D_exit:


// fn00402D9C
// Return size: 0
void fn00402D9C()
fn00402D9C_entry:
	// succ:  l00402D9C
l00402D9C:
	esp = fp
	esp = esp + 0x00000004
	bh = bh + 0xF7 + C
	SCZO = cond(bh)
	bl = bh
	esi = esi - ebx
	SCZO = cond(esi)
	bl = bl - 0xDA - C
	SCZO = cond(bl)
	bl = ~bl
	bh = bh ^ cl
	SZO = cond(bh)
	C = false
	call fn00402DF7 (retsize: 4;)
	branch Test(ULT,C) l00402DB3_thunk_fn00402E1E
	goto l00402DB5
	// succ:  l00402DB5 l00402DB3_thunk_fn00402E1E
l00402DB3_thunk_fn00402E1E:
	call fn00402E1E (retsize: 0;)
	return
	// succ:  fn00402D9C_exit
l00402DB5:
	v11 = Mem0[esi - 0x0000004D:word32]
	Mem0[esi - 0x0000004D:word32] = ebx
	ebx = v11
	// succ:  l00402DB5_thunk_fn00402DB8
l00402DB5_thunk_fn00402DB8:
	call fn00402DB8 (retsize: 4;)
	return
	// succ:  fn00402D9C_exit
fn00402D9C_exit:


// fn00402DB7
// Return size: 4
void fn00402DB7()
fn00402DB7_entry:
	goto l00402DB7
	// succ:  l00402DB7
l004020B1_thunk_fn00402455:
	call fn00402455 (retsize: 0;)
	return
	// succ:  fn00402DB7_exit
l00402DB7:
	esp = fp
	bl = 0xDA
	goto l00402DB7_thunk_fn00402DB8
	// succ:  l00402DB7_thunk_fn00402DB8
l00402DB7:
l00402DB7_thunk_fn00402DB8:
	call fn00402DB8 (retsize: 4;)
	return
	// succ:  fn00402DB7_exit
fn00402DB7_exit:


// fn00402DB8
// Return size: 4
void fn00402DB8()
fn00402DB8_entry:
	goto l00402DB8
	// succ:  l00402DB8
l0040209F:
	edi = eax
	ch = ch + 0xE0
	SCZO = cond(ch)
	edi = edi + 0x00000001
	SZO = cond(edi)
	ch = ch + 0x01
	SZO = cond(ch)
	bh = bh | bl
	SZO = cond(bh)
	C = false
	ebx = ebx - eax
	SCZO = cond(ebx)
	bl = bl + 0x01
	SZO = cond(bl)
	eax = Mem0[edx:word32]
	ebx = ebx - edi
	SCZO = cond(ebx)
	goto l004020B1_thunk_fn00402455
	// succ:  l004020B1_thunk_fn00402455
l00402DB8:
	esp = fp
	rArg0 = rArg0 + (real64) Mem0[eax + 0xD1800EC3:word32]
	return
	// succ:  fn00402DB8_exit
l00402DB8:
	bl = bl + 0x0E
	SCZO = cond(bl)
	cl = cl + 0xC2 + C
	SCZO = cond(cl)
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	edi = eax
	edi = edi | eax
	SZO = cond(edi)
	C = false
	cl = cl ^ dh
	SZO = cond(cl)
	C = false
	goto l0040209F
	// succ:  l0040209F
fn00402DB8_exit:


// fn00402DF7
// Return size: 0
void fn00402DF7()
fn00402DF7_entry:
	goto l00402DF7
	// succ:  l00402DF7
l00402997:
	bh = bh - 0x8B - C
	SCZO = cond(bh)
	esi = esi + eax
	SCZO = cond(esi)
	bl = cl
	bh = ~bh
	bh = bh + 0xFB
	SCZO = cond(bh)
	bl = bl + 0x01
	SZO = cond(bl)
	bl = bl + 0x01
	SZO = cond(bl)
	bh = ch
	ebx = ebx ^ edx
	SZO = cond(ebx)
	C = false
	bl = bl | cl
	SZO = cond(bl)
	C = false
	// succ:  l004029AD_thunk_fn00402B81
l004029AD_thunk_fn00402B81:
	call fn00402B81 (retsize: 0;)
	return
	// succ:  fn00402DF7_exit
l00402DF7:
	esp = fp
	Mem0[esp - 0x00000034:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	bh = bh + 0x01
	SZO = cond(bh)
	edi = edi ^ edx
	SZO = cond(edi)
	C = false
	eax = eax ^ 0xFFFFFEC8
	SZO = cond(eax)
	C = false
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	bl = bl | dh
	SZO = cond(bl)
	C = false
	bh = bh - 0x01
	SZO = cond(bh)
	goto l00402997
	// succ:  l00402997
fn00402DF7_exit:


// fn00402E1E
// Return size: 0
void fn00402E1E()
fn00402E1E_entry:
	// succ:  l00402E1E
l00402E1E:
	esp = fp
	__outdw(edx, eax)
	esi = esi + 0x00000004
	ch = ch + 0x01
	SZO = cond(ch)
	edi = edi | ecx
	SZO = cond(edi)
	C = false
	bh = bh + 0xAF
	SCZO = cond(bh)
	branch Test(LE,SZO) l00402E26_thunk_fn00402818
	goto l00402E26_thunk_fn00402E2C
	// succ:  l00402E26_thunk_fn00402E2C l00402E26_thunk_fn00402818
l00402E1E:
	ch = ch + 0x01
	SZO = cond(ch)
	edi = edi | ecx
	SZO = cond(edi)
	C = false
	bh = bh + 0xAF
	SCZO = cond(bh)
	branch Test(LE,SZO) l00402818
	goto l00402E25_thunk_fn00402E2C
	// succ:  l00402E25_thunk_fn00402E2C l00402E25_thunk_fn00402818
l00402E25_thunk_fn00402818:
	call fn00402818 (retsize: 0;)
	return
	// succ:  fn00402E1E_exit
l00402E25_thunk_fn00402E2C:
	call fn00402E2C (retsize: 0;)
	return
	// succ:  fn00402E1E_exit
l00402E26_thunk_fn00402818:
	call fn00402818 (retsize: 0;)
	return
	// succ:  fn00402E1E_exit
l00402E26_thunk_fn00402E2C:
	call fn00402E2C (retsize: 0;)
	return
	// succ:  fn00402E1E_exit l00402E26_thunk_fn00402E2C
l00402E26_thunk_fn00402E2C:
	call fn00402E2C (retsize: 0;)
	return
	// succ:  fn00402E1E_exit
fn00402E1E_exit:


// fn00402E2C
// Return size: 0
void fn00402E2C()
fn00402E2C_entry:
	// succ:  l00402E2C
l00402E2C:
fn00402E2C_exit:


// fn00402E3B
// Return size: 4
void fn00402E3B()
fn00402E3B_entry:
	// succ:  l00402E3B
l00402E3B:
	esp = fp
	edx_eax = (int64) eax
	goto l00402E3B_thunk_fn00402E3C
	// succ:  l00402E3B_thunk_fn00402E3C
l00402E3B:
l00402E3B_thunk_fn00402E3C:
	call fn00402E3C (retsize: 4;)
	return
	// succ:  fn00402E3B_exit
fn00402E3B_exit:


// fn00402E3C
// Return size: 4
void fn00402E3C()
fn00402E3C_entry:
	// succ:  l00402E3C
l00402E3C:
	esp = fp
	ebx = ebx | ecx
	SZO = cond(ebx)
	C = false
	esi = esi | ecx
	SZO = cond(esi)
	C = false
	edi = edi | eax
	SZO = cond(edi)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	dh = 0x27
	return
	// succ:  fn00402E3C_exit
l00402E3C:
fn00402E3C_exit:


// fn00402E65
// Return size: 0
void fn00402E65()
fn00402E65_entry:
	// succ:  l00402E65
l00402E65:
	esp = fp
	v3 = Mem0[esp:word32]
	Mem0[esp:word32] = eax
	eax = v3
	v5 = ch
	ch = ch
	ch = v5
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = edi | ebx
	SZO = cond(edi)
	C = false
	ebx = ebx | eax
	SZO = cond(ebx)
	C = false
	bh = 0x97
	edi = edi + 0x00000001
	SZO = cond(edi)
	call fn00402C2A (retsize: 4;)
	al = al ^ 0x62
	SZO = cond(al)
	C = false
	bl = 0x54
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0xFFFFFF8F
	esp = esp + 0x00000001
	SZO = cond(esp)
	al = al & 0xE4
	SZO = cond(al)
	C = false
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = ecx
	esi = esi + edx
	SCZO = cond(esi)
	bl = bl + 0xC6
	SCZO = cond(bl)
	bl = bl ^ ah
	SZO = cond(bl)
	C = false
	ebx = ebx + esi
	SCZO = cond(ebx)
	edi = ebx
	bh = bh + 0xAF + C
	SCZO = cond(bh)
fn00402E65_exit:


// fn00402EAD
// Return size: 0
void fn00402EAD()
fn00402EAD_entry:
	// succ:  l00402EAD
l00402EAD:
	esp = fp
	esp = esp + 0x00000004
	// succ:  l00402EAD_thunk_fn00402EAE
l00402EAD_thunk_fn00402EAE:
	call fn00402EAE (retsize: 0;)
	return
	// succ:  fn00402EAD_exit
fn00402EAD_exit:


// fn00402EAE
// Return size: 0
void fn00402EAE()
fn00402EAE_entry:
	// succ:  l00402EAE
l00402EAE:
	esp = fp
	al = al & 0x04
	SZO = cond(al)
	C = false
	ebx = ebx ^ ecx
	SZO = cond(ebx)
	C = false
	cl = cl + 0x01
	SZO = cond(cl)
	edx = edx + 0x00000001
	SZO = cond(edx)
	cl = cl + 0xCF
	SCZO = cond(cl)
	ch = ch + 0x2A + C
	SCZO = cond(ch)
	ch = ch + 0xEE + C
	SCZO = cond(ch)
	dh = dh + cl
	SCZO = cond(dh)
	dl = dl - 0x0C - C
	SCZO = cond(dl)
	branch Test(LT,SO) l00402EC4_thunk_fn0040229D
	goto l00402EC4_thunk_fn00402ECA
	// succ:  l00402EC4_thunk_fn00402ECA l00402EC4_thunk_fn0040229D
l00402EAE:
	ebx = ebx ^ ecx
	SZO = cond(ebx)
	C = false
	cl = cl + 0x01
	SZO = cond(cl)
	edx = edx + 0x00000001
	SZO = cond(edx)
	cl = cl + 0xCF
	SCZO = cond(cl)
	ch = ch + 0x2A + C
	SCZO = cond(ch)
	ch = ch + 0xEE + C
	SCZO = cond(ch)
	dh = dh + cl
	SCZO = cond(dh)
	dl = dl - 0x0C - C
	SCZO = cond(dl)
	branch Test(LT,SO) l00402EC4_thunk_fn0040229D
	// succ:  l00402EC1_thunk_fn00402ECA l00402EC4_thunk_fn0040229D
l00402EC1_thunk_fn00402ECA:
	call fn00402ECA (retsize: 0;)
	return
	// succ:  fn00402EAE_exit
l00402EC4_thunk_fn0040229D:
	call fn0040229D (retsize: 0;)
	return
	// succ:  fn00402EAE_exit
l00402EC4_thunk_fn0040229D:
	call fn0040229D (retsize: 0;)
	return
	// succ:  fn00402EAE_exit
l00402EC4_thunk_fn00402ECA:
	call fn00402ECA (retsize: 0;)
	return
	// succ:  fn00402EAE_exit l00402EC4_thunk_fn00402ECA
l00402EC4_thunk_fn00402ECA:
	call fn00402ECA (retsize: 0;)
	return
	// succ:  fn00402EAE_exit
fn00402EAE_exit:


// fn00402ECA
// Return size: 0
void fn00402ECA()
fn00402ECA_entry:
	// succ:  l00402ECA
l00402ECA:
	bl = bl
	branch Test(GE,SO) l00402ECC_thunk_fn0040229D
	goto l00402ED2
	// succ:  l00402ED2 l00402ECC_thunk_fn0040229D
l00402ECC_thunk_fn0040229D:
	call fn0040229D (retsize: 0;)
	return
	// succ:  fn00402ECA_exit
l00402ED2:
	esi = Mem0[ebx + 0x095FBBBB:word32] *s 0x0000004E
	SCZO = cond(esi)
	// succ:  l00402ED2_thunk_fn00402ED9
l00402ED2_thunk_fn00402ED9:
	call fn00402ED9 (retsize: 0;)
	return
	// succ:  fn00402ECA_exit
fn00402ECA_exit:


// fn00402ED8
// Return size: 0
void fn00402ED8()
fn00402ED8_entry:
	// succ:  l00402ED8
l00402ED8:
	esp = fp
	esi = esi - 0x00000001
	SZO = cond(esi)
	goto l00402ED8_thunk_fn00402ED9
	// succ:  l00402ED8_thunk_fn00402ED9
l00402ED8:
l00402ED8_thunk_fn00402ED9:
	call fn00402ED9 (retsize: 0;)
	return
	// succ:  fn00402ED8_exit
fn00402ED8_exit:


// fn00402ED9
// Return size: 0
void fn00402ED9()
fn00402ED9_entry:
	// succ:  l00402ED9
l00402ED9:
	esp = fp
	al = al + 0x01
	SZO = cond(al)
	dl = dl | ah
	SZO = cond(dl)
	C = false
	al = al + 0x01
	SZO = cond(al)
	ch = ch + 0x01
	SZO = cond(ch)
	ah = ah ^ ch
	SZO = cond(ah)
	C = false
	ch = ch - 0x2B - C
	SCZO = cond(ch)
	ecx = ecx | eax
	SZO = cond(ecx)
	C = false
	goto l00402EE8_thunk_fn00402BBD
	// succ:  l00402EE8_thunk_fn00402BBD
l00402ED9:
	al = al + 0x01
	SZO = cond(al)
	dl = dl | ah
	SZO = cond(dl)
	C = false
	al = al + 0x01
	SZO = cond(al)
	ch = ch + 0x01
	SZO = cond(ch)
	ah = ah ^ ch
	SZO = cond(ah)
	C = false
	ch = ch - 0x2B - C
	SCZO = cond(ch)
	ecx = ecx | eax
	SZO = cond(ecx)
	C = false
	goto l00402EE8_thunk_fn00402BBD
	// succ:  l00402EE8_thunk_fn00402BBD
l00402EE8_thunk_fn00402BBD:
	call fn00402BBD (retsize: 0;)
	return
	// succ:  fn00402ED9_exit
l00402EE8_thunk_fn00402BBD:
	call fn00402BBD (retsize: 0;)
	return
	// succ:  fn00402ED9_exit
fn00402ED9_exit:


// fn00402F15
// Return size: 0
void fn00402F15()
fn00402F15_entry:
	// succ:  l00402F15
l00402F15:
	esp = fp
	ecx = ecx | edx
	SZO = cond(ecx)
	C = false
	dh = dh + 0x01
	SZO = cond(dh)
	dl = al
	ch = ch - 0x01
	SZO = cond(ch)
	edx = edx | edi
	SZO = cond(edx)
	C = false
	eax = eax - esi
	SCZO = cond(eax)
	goto l00402F21_thunk_fn00402677
	// succ:  l00402F21_thunk_fn00402677
l00402F15:
l00402F21_thunk_fn00402677:
	call fn00402677 (retsize: 0;)
	return
	// succ:  fn00402F15_exit
fn00402F15_exit:


