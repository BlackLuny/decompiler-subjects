// subject.h
// Generated by decompiling subject.exe
// using Reko decompiler version VERSION

/*
// Equivalence classes ////////////
Eq_1: (struct "Globals")
	globals_t (in globals : (ptr (struct "Globals")))
Eq_7: (fn word32 (int32))
	T_7 (in fn00401000 : ptr32)
	T_8 (in signature of fn00401000 : void)
	T_12 (in fn00401000 : ptr32)
	T_67 (in fn00401000 : ptr32)
	T_70 (in fn00401000 : ptr32)
Eq_64: DWORD
	T_64 (in eax : Eq_64)
	T_78 (in fn00401050(fn00401000(0x00000009) + fn00401000(0x00000008), fp - 0x00000064, 0x00000064) : word32)
Eq_65: (fn Eq_64 (word32, ptr32, word32))
	T_65 (in fn00401050 : ptr32)
	T_66 (in signature of fn00401050 : void)
// Type Variables ////////////
globals_t: (in globals : (ptr (struct "Globals")))
  Class: Eq_1
  DataType: (ptr Eq_1)
  OrigDataType: (ptr (struct "Globals"))
T_2: (in eax : word32)
  Class: Eq_2
  DataType: word32
  OrigDataType: word32
T_3: (in dwArg04 : int32)
  Class: Eq_3
  DataType: int32
  OrigDataType: word32
T_4: (in dwArg04 : word32)
  Class: Eq_4
  DataType: int32
  OrigDataType: int32
T_5: (in 0x00000001 : word32)
  Class: Eq_4
  DataType: int32
  OrigDataType: int32
T_6: (in dwArg04 >= 0x00000001 : bool)
  Class: Eq_6
  DataType: bool
  OrigDataType: bool
T_7: (in fn00401000 : ptr32)
  Class: Eq_7
  DataType: (ptr Eq_7)
  OrigDataType: (ptr (fn T_11 (T_10)))
T_8: (in signature of fn00401000 : void)
  Class: Eq_7
  DataType: (ptr Eq_7)
  OrigDataType: 
T_9: (in 0x00000001 : word32)
  Class: Eq_9
  DataType: int32
  OrigDataType: int32
T_10: (in dwArg04 - 0x00000001 : word32)
  Class: Eq_3
  DataType: int32
  OrigDataType: int32
T_11: (in fn00401000(dwArg04 - 0x00000001) : word32)
  Class: Eq_11
  DataType: word32
  OrigDataType: word32
T_12: (in fn00401000 : ptr32)
  Class: Eq_7
  DataType: (ptr Eq_7)
  OrigDataType: (ptr (fn T_15 (T_14)))
T_13: (in 0x00000002 : word32)
  Class: Eq_13
  DataType: int32
  OrigDataType: int32
T_14: (in dwArg04 - 0x00000002 : word32)
  Class: Eq_3
  DataType: int32
  OrigDataType: int32
T_15: (in fn00401000(dwArg04 - 0x00000002) : word32)
  Class: Eq_11
  DataType: word32
  OrigDataType: word32
T_16: (in fn00401000(dwArg04 - 0x00000001) + fn00401000(dwArg04 - 0x00000002) : word32)
  Class: Eq_2
  DataType: word32
  OrigDataType: word32
T_17: (in 0x00000001 : word32)
  Class: Eq_2
  DataType: word32
  OrigDataType: word32
T_18: (in eax : uint32)
  Class: Eq_18
  DataType: uint32
  OrigDataType: word32
T_19: (in dwArg04 : word32)
  Class: Eq_19
  DataType: word32
  OrigDataType: word32
T_20: (in dwArg08 : ptr32)
  Class: Eq_20
  DataType: ptr32
  OrigDataType: word32
T_21: (in dwArg0C : word32)
  Class: Eq_21
  DataType: word32
  OrigDataType: word32
T_22: (in ecx_25 : (ptr byte))
  Class: Eq_22
  DataType: (ptr byte)
  OrigDataType: (ptr (struct 0001 (0 byte b0000)))
T_23: (in dwArg08 : word32)
  Class: Eq_22
  DataType: (ptr byte)
  OrigDataType: uint32
T_24: (in eax_23 : uint32)
  Class: Eq_18
  DataType: uint32
  OrigDataType: uint32
T_25: (in dwArg0C : word32)
  Class: Eq_18
  DataType: uint32
  OrigDataType: word32
T_26: (in edi_12 : (ptr byte))
  Class: Eq_22
  DataType: (ptr byte)
  OrigDataType: uint32
T_27: (in 0x00000001 : word32)
  Class: Eq_27
  DataType: word32
  OrigDataType: word32
T_28: (in dwArg08 - 0x00000001 : word32)
  Class: Eq_28
  DataType: word32
  OrigDataType: word32
T_29: (in dwArg08 - 0x00000001 + dwArg0C : word32)
  Class: Eq_22
  DataType: (ptr byte)
  OrigDataType: word32
T_30: (in dwArg08 >= edi_12 : bool)
  Class: Eq_30
  DataType: bool
  OrigDataType: bool
T_31: (in 0x00 : byte)
  Class: Eq_31
  DataType: byte
  OrigDataType: byte
T_32: (in 0x00000000 : word32)
  Class: Eq_32
  DataType: word32
  OrigDataType: word32
T_33: (in ecx_25 + 0x00000000 : word32)
  Class: Eq_33
  DataType: word32
  OrigDataType: word32
T_34: (in Mem30[ecx_25 + 0x00000000:byte] : byte)
  Class: Eq_31
  DataType: byte
  OrigDataType: byte
T_35: (in esi_38 : uint32)
  Class: Eq_35
  DataType: uint32
  OrigDataType: uint32
T_36: (in dwArg04 : word32)
  Class: Eq_35
  DataType: uint32
  OrigDataType: word32
T_37: (in edx_43 : uint32)
  Class: Eq_37
  DataType: uint32
  OrigDataType: uint32
T_38: (in 0xCCCCCCCD : word32)
  Class: Eq_38
  DataType: uint32
  OrigDataType: uint32
T_39: (in esi_38 * 0xCCCCCCCD : uint64)
  Class: Eq_39
  DataType: uint64
  OrigDataType: uint64
T_40: (in SLICE(esi_38 * 0xCCCCCCCD, word32, 32) : word32)
  Class: Eq_37
  DataType: uint32
  OrigDataType: word32
T_41: (in eax_49 : uint32)
  Class: Eq_41
  DataType: uint32
  OrigDataType: uint32
T_42: (in 0x00000003 : word32)
  Class: Eq_42
  DataType: word32
  OrigDataType: word32
T_43: (in edx_43 >> 0x00000003 : word32)
  Class: Eq_43
  DataType: uint32
  OrigDataType: uint32
T_44: (in edx_43 >> 0x00000003 : word32)
  Class: Eq_44
  DataType: uint32
  OrigDataType: uint32
T_45: (in 0x00000004 : word32)
  Class: Eq_45
  DataType: ui32
  OrigDataType: ui32
T_46: (in (edx_43 >> 0x00000003) * 0x00000004 : word32)
  Class: Eq_46
  DataType: ui32
  OrigDataType: ui32
T_47: (in (edx_43 >> 0x00000003) + (edx_43 >> 0x00000003) * 0x00000004 : word32)
  Class: Eq_47
  DataType: ui32
  OrigDataType: ui32
T_48: (in 0x00000002 : word32)
  Class: Eq_48
  DataType: ui32
  OrigDataType: ui32
T_49: (in ((edx_43 >> 0x00000003) + (edx_43 >> 0x00000003) * 0x00000004) * 0x00000002 : word32)
  Class: Eq_49
  DataType: uint32
  OrigDataType: uint32
T_50: (in esi_38 - ((edx_43 >> 0x00000003) + (edx_43 >> 0x00000003) * 0x00000004) * 0x00000002 : word32)
  Class: Eq_41
  DataType: uint32
  OrigDataType: uint32
T_51: (in al_50 : byte)
  Class: Eq_51
  DataType: byte
  OrigDataType: byte
T_52: (in (byte) eax_49 : byte)
  Class: Eq_51
  DataType: byte
  OrigDataType: byte
T_53: (in 0x30 : byte)
  Class: Eq_53
  DataType: byte
  OrigDataType: byte
T_54: (in al_50 + 0x30 : byte)
  Class: Eq_54
  DataType: byte
  OrigDataType: byte
T_55: (in 0x00000000 : word32)
  Class: Eq_55
  DataType: word32
  OrigDataType: word32
T_56: (in ecx_25 + 0x00000000 : word32)
  Class: Eq_56
  DataType: (ptr byte)
  OrigDataType: (ptr byte)
T_57: (in Mem54[ecx_25 + 0x00000000:byte] : byte)
  Class: Eq_54
  DataType: byte
  OrigDataType: byte
T_58: (in al_50 + 0x30 : byte)
  Class: Eq_58
  DataType: byte
  OrigDataType: byte
T_59: (in DPB(eax_49, al_50 + 0x30, 0) : word32)
  Class: Eq_18
  DataType: uint32
  OrigDataType: uint32
T_60: (in 0x00000001 : word32)
  Class: Eq_60
  DataType: int32
  OrigDataType: int32
T_61: (in ecx_25 + 0x00000001 : word32)
  Class: Eq_22
  DataType: (ptr byte)
  OrigDataType: ptr32
T_62: (in edx_43 >> 0x00000003 : word32)
  Class: Eq_35
  DataType: uint32
  OrigDataType: uint32
T_63: (in ecx_25 < edi_12 : bool)
  Class: Eq_63
  DataType: bool
  OrigDataType: bool
T_64: (in eax : Eq_64)
  Class: Eq_64
  DataType: Eq_64
  OrigDataType: DWORD
T_65: (in fn00401050 : ptr32)
  Class: Eq_65
  DataType: (ptr Eq_65)
  OrigDataType: (ptr (fn T_78 (T_73, T_76, T_77)))
T_66: (in signature of fn00401050 : void)
  Class: Eq_65
  DataType: (ptr Eq_65)
  OrigDataType: 
T_67: (in fn00401000 : ptr32)
  Class: Eq_7
  DataType: (ptr Eq_7)
  OrigDataType: (ptr (fn T_69 (T_68)))
T_68: (in 0x00000009 : word32)
  Class: Eq_3
  DataType: int32
  OrigDataType: word32
T_69: (in fn00401000(0x00000009) : word32)
  Class: Eq_11
  DataType: word32
  OrigDataType: word32
T_70: (in fn00401000 : ptr32)
  Class: Eq_7
  DataType: (ptr Eq_7)
  OrigDataType: (ptr (fn T_72 (T_71)))
T_71: (in 0x00000008 : word32)
  Class: Eq_3
  DataType: int32
  OrigDataType: word32
T_72: (in fn00401000(0x00000008) : word32)
  Class: Eq_11
  DataType: word32
  OrigDataType: word32
T_73: (in fn00401000(0x00000009) + fn00401000(0x00000008) : word32)
  Class: Eq_19
  DataType: word32
  OrigDataType: word32
T_74: (in fp : ptr32)
  Class: Eq_74
  DataType: ptr32
  OrigDataType: ptr32
T_75: (in 0x00000064 : word32)
  Class: Eq_75
  DataType: ui32
  OrigDataType: ui32
T_76: (in fp - 0x00000064 : word32)
  Class: Eq_20
  DataType: ptr32
  OrigDataType: ptr32
T_77: (in 0x00000064 : word32)
  Class: Eq_21
  DataType: word32
  OrigDataType: word32
T_78: (in fn00401050(fn00401000(0x00000009) + fn00401000(0x00000008), fp - 0x00000064, 0x00000064) : word32)
  Class: Eq_64
  DataType: Eq_64
  OrigDataType: word32
*/
typedef struct Globals {
} Eq_1;

typedef word32 (Eq_7)(int32);

typedef DWORD Eq_64;

typedef DWORD (Eq_65)(word32, ptr32, word32);

