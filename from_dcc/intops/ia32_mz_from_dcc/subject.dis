// fn0800_0000
// Return size: 2
void fn0800_0000()
fn0800_0000_entry:
	// succ:  l0800_0000
l0800_0000:
	sp = fp
	dx = 0x0905
	Mem0[0x0800:0x01F8:word16] = dx
	ah = 0x30
	al = msdos_get_dos_version(out ah)
	bp = Mem0[ds:0x0002:word16]
	bx = Mem0[ds:0x002C:word16]
	ds = dx
	Mem0[ds:0x0092:word16] = ax
	Mem0[ds:0x0090:word16] = es
	Mem0[ds:0x008C:word16] = bx
	Mem0[ds:0x00AC:word16] = bp
	Mem0[ds:0x0096:word16] = 0xFFFF
	call fn0800_0162 (retsize: 2;)
	es_di = Mem0[ds:0x008A:segptr32]
	ax = di
	bx = ax
	cx = 0x7FFF
	// succ:  l0800_0039
l0800_0039:
	SCZO = cond(Mem0[es:di:word16] - 0x3738)
	branch Test(NE,Z) l0800_0059
	// succ:  l0800_0040 l0800_0059
l0800_0040:
	dx = Mem0[es:di + 0x0002:word16]
	SCZO = cond(dl - 0x3D)
	branch Test(NE,Z) l0800_0059
	// succ:  l0800_0049 l0800_0059
l0800_0049:
	dh = dh & 0xDF
	SZO = cond(dh)
	C = false
	v20 = Mem0[ds:0x0096:word16] + 0x0001
	Mem0[ds:0x0096:word16] = v20
	SZO = cond(v20)
	SCZO = cond(dh - 0x59)
	branch Test(NE,Z) l0800_0059
	// succ:  l0800_0055 l0800_0059
l0800_0055:
	v21 = Mem0[ds:0x0096:word16] + 0x0001
	Mem0[ds:0x0096:word16] = v21
	SZO = cond(v21)
	// succ:  l0800_0059
l0800_0059:
	branch cx == 0x0000 l0800_005B
	// succ:  l0800_0059_1 l0800_005B
l0800_0059_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_0059
	// succ:  l0800_005B l0800_0059
l0800_005B:
	branch cx == 0x0000 l0800_00BE
	// succ:  l0800_005D l0800_00BE
l0800_005D:
	bx = bx + 0x0001
	SZO = cond(bx)
	SCZO = cond(Mem0[es:di:byte] - al)
	branch Test(NE,Z) l0800_0039
	// succ:  l0800_0063 l0800_0039
l0800_0063:
	ch = ch | 0x80
	SZO = cond(ch)
	C = false
	cx = -cx
	SCZO = cond(cx)
	C = cx == 0x0000
	Mem0[ds:0x008A:word16] = cx
	cx = 0x0001
	bx = bx << cl
	SCZO = cond(bx)
	bx = bx + 0x0008
	SCZO = cond(bx)
	bx = bx & 0xFFF8
	SZO = cond(bx)
	C = false
	Mem0[ds:0x008E:word16] = bx
	dx = ds
	bp = bp - dx
	SCZO = cond(bp)
	di = Mem0[ds:0x0208:word16]
	SCZO = cond(di - 0x0200)
	branch Test(UGE,C) l0800_0090
	// succ:  l0800_0089 l0800_0090
l0800_0089:
	di = 0x0200
	Mem0[ds:0x0208:word16] = di
	// succ:  l0800_0090
l0800_0090:
	di = di + 0x0474
	SCZO = cond(di)
	branch Test(ULT,C) l0800_00BE
	// succ:  l0800_0096 l0800_00BE
l0800_0096:
	di = di + Mem0[ds:0x0206:word16]
	SCZO = cond(di)
	branch Test(ULT,C) l0800_00BE
	// succ:  l0800_009C l0800_00BE
l0800_009C:
	cl = 0x04
	di = di >>u cl
	SCZO = cond(di)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(bp - di)
	branch Test(ULT,C) l0800_00BE
	// succ:  l0800_00A5 l0800_00BE
l0800_00A5:
	SCZO = cond(Mem0[ds:0x0208:word16] - 0x0000)
	branch Test(EQ,Z) l0800_00B3
	// succ:  l0800_00AC l0800_00B3
l0800_00AC:
	SCZO = cond(Mem0[ds:0x0206:word16] - 0x0000)
	branch Test(NE,Z) l0800_00C1
	// succ:  l0800_00B3 l0800_00C1
l0800_00B3:
	di = 0x1000
	SCZO = cond(bp - di)
	branch Test(UGT,CZ) l0800_00C1
	// succ:  l0800_00BA l0800_00C1
l0800_00BA:
	di = bp
	goto l0800_00C1
	// succ:  l0800_00C1
l0800_00BE:
	goto l0800_01E2
	// succ:  l0800_01E2
l0800_00C1:
	bx = di
	bx = bx + dx
	SCZO = cond(bx)
	Mem0[ds:0x00A4:word16] = bx
	Mem0[ds:0x00A8:word16] = bx
	ax = Mem0[ds:0x0090:word16]
	bx = bx - ax
	SCZO = cond(bx)
	es = ax
	ah = 0x4A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	C = msdos_resize_memory_block(es, bx, out bx)
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = di << cl
	SCZO = cond(di)
	__cli()
	ss = dx
	sp = di
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = Mem0[0x0800:0x01F8:selector]
	di = 0x042E
	cx = 0x0474
	cx = cx - di
	SCZO = cond(cx)
	// succ:  l0800_00F1
l0800_00F1:
	branch cx == 0x0000 l0800_00F3
	// succ:  l0800_00F1_1 l0800_00F3
l0800_00F1_1:
	Mem0[es:di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_00F1
	// succ:  l0800_00F1
l0800_00F3:
	sp = sp - 0x0002
	call SEQ(cs, Mem0[ds:0x0420:word16]) (retsize: 2;)
	call fn0800_02C7 (retsize: 2;)
	call fn0800_03B2 (retsize: 2;)
	ah = 0x00
	cx = bios_get_system_time(out dx)
	Mem0[ds:0x0098:word16] = dx
	Mem0[ds:0x009A:word16] = cx
	call SEQ(cs, Mem0[ds:0x0424:word16]) (retsize: 2;)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x0088:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x0086:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x0084:word16]
	call fn0800_01FA (retsize: 2;)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_0292 (retsize: 2;)
	// succ:  l0800_011E_thunk_fn0800_0121
l0800_011E_thunk_fn0800_0121:
	call fn0800_0121 (retsize: 0;)
	return
	// succ:  fn0800_0000_exit
l0800_01E2:
	cx = 0x001E
	dx = 0x0056
	ds = Mem0[0x0800:0x01F8:selector]
	call fn0800_01DA (retsize: 2;)
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_0121 (retsize: 2;)
	v27 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v27
	SCZO = cond(v27)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 0x0002:word16] = 0x00FF
	si = 0x008F
	ax = Mem0[ss:bp - 0x0002:word16]
	ax = ax + si
	SCZO = cond(ax)
	si = ax
	ax = Mem0[ss:bp - 0x0002:word16]
	ax = ax - si
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0002:word16] = ax
	ax = Mem0[ss:bp - 0x0002:word16]
	dx_ax = si *u ax
	SCZO = cond(dx_ax)
	Mem0[ss:bp - 0x0002:word16] = ax
	ax = si
	dx_ax = (word32) ax
	dx = dx_ax % Mem0[ss:bp - 0x0002:word16]
	ax = dx_ax / Mem0[ss:bp - 0x0002:word16]
	SCZO = cond(ax)
	si = ax
	ax = si
	dx_ax = (word32) ax
	dx = dx_ax % Mem0[ss:bp - 0x0002:word16]
	ax = dx_ax / Mem0[ss:bp - 0x0002:word16]
	SCZO = cond(ax)
	si = dx
	ax = Mem0[ss:bp - 0x0002:word16]
	cl = 0x05
	ax = ax << cl
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0002:word16] = ax
	ax = si
	cl = Mem0[ss:bp - 0x0002:byte]
	ax = ax >> cl
	SCZO = cond(ax)
	si = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0002:word16]
	ax = 0x0194
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_08FA (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_0000_exit
fn0800_0000_exit:


// fn0800_0121
// Return size: 0
void fn0800_0121()
fn0800_0121_entry:
	// succ:  l0800_0121
l0800_0121:
	sp = fp
	ds = Mem0[0x0800:0x01F8:selector]
	call fn0800_01A5 (retsize: 2;)
	sp = sp - 0x0002
	call SEQ(cs, Mem0[ds:0x0422:word16]) (retsize: 2;)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	si = ax
	cx = 0x002F
	D = false
	// succ:  l0800_0137
l0800_0137:
	al = al + Mem0[ds:si:byte]
	SCZO = cond(al)
	ah = ah + 0x00 + C
	SCZO = cond(ah)
	si = si + 0x0001
	SZO = cond(si)
	cx = cx - 0x0001
	branch cx != 0x0000 l0800_0137
	// succ:  l0800_013F l0800_0137
l0800_013F:
	ax = ax - 0x0D37
	SCZO = cond(ax)
	branch Test(EQ,Z) l0800_014F
	// succ:  l0800_0145 l0800_014F
l0800_0145:
	cx = 0x0019
	dx = 0x002F
	call fn0800_01DA (retsize: 2;)
	// succ:  l0800_014F
l0800_014F:
	bp = sp
	ah = 0x4C
	al = Mem0[ss:bp + 0x0002:byte]
	msdos_terminate(al)
	// succ:  fn0800_0121_exit
fn0800_0121_exit:


// fn0800_0162
// Return size: 2
void fn0800_0162()
fn0800_0162_entry:
	// succ:  l0800_0162
l0800_0162:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x3500
	es_bx = msdos_get_interrupt_vector(al)
	Mem0[ds:0x0074:word16] = bx
	Mem0[ds:0x0076:word16] = es
	ax = 0x3504
	es_bx = msdos_get_interrupt_vector(al)
	Mem0[ds:0x0078:word16] = bx
	Mem0[ds:0x007A:word16] = es
	ax = 0x3505
	es_bx = msdos_get_interrupt_vector(al)
	Mem0[ds:0x007C:word16] = bx
	Mem0[ds:0x007E:word16] = es
	ax = 0x3506
	es_bx = msdos_get_interrupt_vector(al)
	Mem0[ds:0x0080:word16] = bx
	Mem0[ds:0x0082:word16] = es
	ax = 0x2500
	dx = cs
	ds = dx
	dx = 0x0158
	msdos_set_interrupt_vector(al, ds_dx)
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	return
	// succ:  fn0800_0162_exit
fn0800_0162_exit:


// fn0800_01A5
// Return size: 2
void fn0800_01A5()
fn0800_01A5_entry:
	// succ:  l0800_01A5
l0800_01A5:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x2500
	ds_dx = Mem0[ds:0x0074:segptr32]
	msdos_set_interrupt_vector(al, ds_dx)
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x2504
	ds_dx = Mem0[ds:0x0078:segptr32]
	msdos_set_interrupt_vector(al, ds_dx)
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x2505
	ds_dx = Mem0[ds:0x007C:segptr32]
	msdos_set_interrupt_vector(al, ds_dx)
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x2506
	ds_dx = Mem0[ds:0x0080:segptr32]
	msdos_set_interrupt_vector(al, ds_dx)
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	return
	// succ:  fn0800_01A5_exit
fn0800_01A5_exit:


// fn0800_01DA
// Return size: 2
void fn0800_01DA()
fn0800_01DA_entry:
	// succ:  l0800_01DA
l0800_01DA:
	sp = fp
	ah = 0x40
	bx = 0x0002
	C = msdos_write_file(bx, cx, ds_dx, out ax)
	return
	// succ:  fn0800_01DA_exit
fn0800_01DA_exit:


// fn0800_01FA
// Return size: 2
void fn0800_01FA()
fn0800_01FA_entry:
	// succ:  l0800_01FA
l0800_01FA:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 0x0002:word16] = 0x00FF
	si = 0x008F
	ax = Mem0[ss:bp - 0x0002:word16]
	ax = ax + si
	SCZO = cond(ax)
	si = ax
	ax = Mem0[ss:bp - 0x0002:word16]
	ax = ax - si
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0002:word16] = ax
	ax = Mem0[ss:bp - 0x0002:word16]
	dx_ax = si *u ax
	SCZO = cond(dx_ax)
	Mem0[ss:bp - 0x0002:word16] = ax
	ax = si
	dx_ax = (word32) ax
	dx = dx_ax % Mem0[ss:bp - 0x0002:word16]
	ax = dx_ax / Mem0[ss:bp - 0x0002:word16]
	SCZO = cond(ax)
	si = ax
	ax = si
	dx_ax = (word32) ax
	dx = dx_ax % Mem0[ss:bp - 0x0002:word16]
	ax = dx_ax / Mem0[ss:bp - 0x0002:word16]
	SCZO = cond(ax)
	si = dx
	ax = Mem0[ss:bp - 0x0002:word16]
	cl = 0x05
	ax = ax << cl
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0002:word16] = ax
	ax = si
	cl = Mem0[ss:bp - 0x0002:byte]
	ax = ax >> cl
	SCZO = cond(ax)
	si = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0002:word16]
	ax = 0x0194
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_08FA (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_01FA_exit
fn0800_01FA_exit:


// fn0800_0292
// Return size: 2
void fn0800_0292()
fn0800_0292_entry:
	// succ:  l0800_0292
l0800_0292:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	goto l0800_02A1
	// succ:  l0800_02A1
l0800_0297:
	bx = Mem0[ds:0x020A:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	call SEQ(cs, Mem0[ds:bx + 0x042E:word16]) (retsize: 2;)
	// succ:  l0800_02A1
l0800_02A1:
	ax = Mem0[ds:0x020A:word16]
	v7 = Mem0[ds:0x020A:word16] - 0x0001
	Mem0[ds:0x020A:word16] = v7
	SZO = cond(v7)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_0297
	// succ:  l0800_02AC l0800_0297
l0800_02AC:
	call SEQ(cs, Mem0[ds:0x0200:word16]) (retsize: 2;)
	call SEQ(cs, Mem0[ds:0x0202:word16]) (retsize: 2;)
	call SEQ(cs, Mem0[ds:0x0204:word16]) (retsize: 2;)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0004:word16]
	call fn0800_0121 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_0292_exit
fn0800_0292_exit:


// fn0800_02C7
// Return size: 0
void fn0800_02C7()
fn0800_02C7_entry:
	goto l0800_02C7
	// succ:  l0800_02C7
l0800_01E2_in_fn0800_02C7:
	cx = 0x001E
	dx = 0x0056
	ds = Mem0[0x0800:0x01F8:selector]
	call fn0800_01DA (retsize: 2;)
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_0121 (retsize: 2;)
	v27 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v27
	SCZO = cond(v27)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 0x0002:word16] = 0x00FF
	si = 0x008F
	ax = Mem0[ss:bp - 0x0002:word16]
	ax = ax + si
	SCZO = cond(ax)
	si = ax
	ax = Mem0[ss:bp - 0x0002:word16]
	ax = ax - si
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0002:word16] = ax
	ax = Mem0[ss:bp - 0x0002:word16]
	dx_ax = si *u ax
	SCZO = cond(dx_ax)
	Mem0[ss:bp - 0x0002:word16] = ax
	ax = si
	dx_ax = (word32) ax
	dx = dx_ax % Mem0[ss:bp - 0x0002:word16]
	ax = dx_ax / Mem0[ss:bp - 0x0002:word16]
	SCZO = cond(ax)
	si = ax
	ax = si
	dx_ax = (word32) ax
	dx = dx_ax % Mem0[ss:bp - 0x0002:word16]
	ax = dx_ax / Mem0[ss:bp - 0x0002:word16]
	SCZO = cond(ax)
	si = dx
	ax = Mem0[ss:bp - 0x0002:word16]
	cl = 0x05
	ax = ax << cl
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0002:word16] = ax
	ax = si
	cl = Mem0[ss:bp - 0x0002:byte]
	ax = ax >> cl
	SCZO = cond(ax)
	si = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0002:word16]
	ax = 0x0194
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_08FA (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_02C7_exit
l0800_02C7:
	sp = fp
	Mem0[0x0800:0x02C1:word16] = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	Mem0[0x0800:0x02C3:word16] = ds
	D = false
	es = Mem0[ds:0x0090:selector]
	si = 0x0080
	ah = ah ^ ah
	SZO = cond(ah)
	C = false
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	ax = ax + 0x0001
	SZO = cond(ax)
	bp = es
	v14 = si
	si = dx
	dx = v14
	v16 = ax
	ax = bx
	bx = v16
	si = Mem0[ds:0x008A:word16]
	si = si + 0x0002
	SCZO = cond(si)
	cx = 0x0001
	SCZO = cond(Mem0[ds:0x0092:byte] - 0x03)
	branch Test(ULT,C) l0800_0305
	// succ:  l0800_02F4 l0800_0305
l0800_02F4:
	es = Mem0[ds:0x008C:selector]
	di = si
	cl = 0x7F
	al = al ^ al
	SZO = cond(al)
	C = false
	// succ:  l0800_02FE
l0800_02FE:
	branch cx == 0x0000 l0800_0300
	// succ:  l0800_02FE_1 l0800_0300
l0800_02FE_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_02FE
	// succ:  l0800_0300 l0800_02FE
l0800_0300:
	branch cx == 0x0000 l0800_0378
	// succ:  l0800_0302 l0800_0378
l0800_0302:
	cl = cl ^ 0x7F
	SZO = cond(cl)
	C = false
	// succ:  l0800_0305
l0800_0305:
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = 0x0001
	ax = ax + bx
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax & 0xFFFE
	SZO = cond(ax)
	C = false
	di = sp
	di = di - ax
	SCZO = cond(di)
	branch Test(ULT,C) l0800_0378
	// succ:  l0800_0318 l0800_0378
l0800_0318:
	sp = di
	ax = es
	ds = ax
	ax = ss
	es = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = cx - 0x0001
	SZO = cond(cx)
	// succ:  l0800_0324
l0800_0324:
	branch cx == 0x0000 l0800_0326
	// succ:  l0800_0324_1 l0800_0326
l0800_0324_1:
	v23 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v23
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_0324
	// succ:  l0800_0324
l0800_0326:
	al = al ^ al
	SZO = cond(al)
	C = false
	Mem0[es:di:byte] = al
	di = di + 0x0001
	ds = bp
	v24 = dx
	dx = si
	si = v24
	v25 = cx
	cx = bx
	bx = v25
	ax = bx
	dx = ax
	bx = bx + 0x0001
	SZO = cond(bx)
	// succ:  l0800_0334
l0800_0334:
	call fn0800_0350 (retsize: 2;)
	branch Test(UGT,CZ) l0800_0340
	// succ:  l0800_0339 l0800_0340
l0800_0339:
	branch Test(ULT,C) l0800_037B
	// succ:  l0800_033B l0800_037B
l0800_033B:
	call fn0800_0350 (retsize: 2;)
	branch Test(UGT,CZ) l0800_0339
	// succ:  l0800_0340 l0800_0339
l0800_0340:
	SCZO = cond(al - 0x20)
	branch Test(EQ,Z) l0800_034C
	// succ:  l0800_0344 l0800_034C
l0800_0344:
	SCZO = cond(al - 0x0D)
	branch Test(EQ,Z) l0800_034C
	// succ:  l0800_0348 l0800_034C
l0800_0348:
	SCZO = cond(al - 0x09)
	branch Test(NE,Z) l0800_0334
	// succ:  l0800_034C l0800_0334
l0800_034C:
	al = al ^ al
	SZO = cond(al)
	C = false
	goto l0800_0334
	// succ:  l0800_0334
l0800_0378:
	goto l0800_01E2_in_fn0800_02C7
	// succ:  l0800_01E2_in_fn0800_02C7
l0800_037B:
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = cx + dx
	SCZO = cond(cx)
	ds = Mem0[0x0800:0x02C3:selector]
	Mem0[ds:0x0084:word16] = bx
	bx = bx + 0x0001
	SZO = cond(bx)
	bx = bx + bx
	SCZO = cond(bx)
	si = sp
	bp = sp
	bp = bp - bx
	SCZO = cond(bp)
	branch Test(ULT,C) l0800_0378
	// succ:  l0800_0392 l0800_0378
l0800_0392:
	sp = bp
	Mem0[ds:0x0086:word16] = bp
	// succ:  l0800_0398
l0800_0398:
	branch cx == 0x0000 l0800_03A8
	// succ:  l0800_039A l0800_03A8
l0800_039A:
	Mem0[ss:bp + 0x0000:word16] = si
	bp = bp + 0x0002
	SCZO = cond(bp)
	// succ:  l0800_03A0
l0800_03A0:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al | al
	SZO = cond(al)
	C = false
	cx = cx - 0x0001
	branch Test(NE,Z) && cx != 0x0000 l0800_03A0
	// succ:  l0800_03A6 l0800_03A0
l0800_03A6:
	branch Test(EQ,Z) l0800_0398
	// succ:  l0800_03A8 l0800_0398
l0800_03A8:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	Mem0[ss:bp + 0x0000:word16] = ax
	call Mem0[0x0800:0x02C1:word16] (retsize: 4;)
	return
	// succ:  fn0800_02C7_exit
fn0800_02C7_exit:


// fn0800_0350
// Return size: 2
void fn0800_0350()
fn0800_0350_entry:
	// succ:  l0800_0350
l0800_0350:
	sp = fp
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_035B
	// succ:  l0800_0354 l0800_035B
l0800_0354:
	dx = dx + 0x0001
	SZO = cond(dx)
	Mem0[es:di:byte] = al
	di = di + 0x0001
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l0800_035B
	// succ:  l0800_035A l0800_035B
l0800_035A:
	bx = bx + 0x0001
	SZO = cond(bx)
	// succ:  l0800_035B
l0800_035B:
	v12 = al
	al = ah
	ah = v12
	al = al ^ al
	SZO = cond(al)
	C = false
	C = true
	branch cx == 0x0000 l0800_0377
	// succ:  l0800_0362 l0800_0377
l0800_0362:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	cx = cx - 0x0001
	SZO = cond(cx)
	al = al - 0x22
	SCZO = cond(al)
	branch Test(EQ,Z) l0800_0377
	// succ:  l0800_0368 l0800_0377
l0800_0368:
	al = al + 0x22
	SCZO = cond(al)
	SCZO = cond(al - 0x5C)
	branch Test(NE,Z) l0800_0375
	// succ:  l0800_036E l0800_0375
l0800_036E:
	SCZO = cond(Mem0[ds:si:byte] - 0x22)
	branch Test(NE,Z) l0800_0375
	// succ:  l0800_0373 l0800_0375
l0800_0373:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	cx = cx - 0x0001
	SZO = cond(cx)
	// succ:  l0800_0375
l0800_0375:
	si = si | si
	SZO = cond(si)
	C = false
	// succ:  l0800_0377
l0800_0377:
	return
	// succ:  fn0800_0350_exit
fn0800_0350_exit:


// fn0800_03B2
// Return size: 2
void fn0800_03B2()
fn0800_03B2_entry:
	goto l0800_03B2
	// succ:  l0800_03B2
l0800_01E2_in_fn0800_03B2:
	cx = 0x001E
	dx = 0x0056
	ds = Mem0[0x0800:0x01F8:selector]
	call fn0800_01DA (retsize: 2;)
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_0121 (retsize: 2;)
	v27 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v27
	SCZO = cond(v27)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 0x0002:word16] = 0x00FF
	si = 0x008F
	ax = Mem0[ss:bp - 0x0002:word16]
	ax = ax + si
	SCZO = cond(ax)
	si = ax
	ax = Mem0[ss:bp - 0x0002:word16]
	ax = ax - si
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0002:word16] = ax
	ax = Mem0[ss:bp - 0x0002:word16]
	dx_ax = si *u ax
	SCZO = cond(dx_ax)
	Mem0[ss:bp - 0x0002:word16] = ax
	ax = si
	dx_ax = (word32) ax
	dx = dx_ax % Mem0[ss:bp - 0x0002:word16]
	ax = dx_ax / Mem0[ss:bp - 0x0002:word16]
	SCZO = cond(ax)
	si = ax
	ax = si
	dx_ax = (word32) ax
	dx = dx_ax % Mem0[ss:bp - 0x0002:word16]
	ax = dx_ax / Mem0[ss:bp - 0x0002:word16]
	SCZO = cond(ax)
	si = dx
	ax = Mem0[ss:bp - 0x0002:word16]
	cl = 0x05
	ax = ax << cl
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0002:word16] = ax
	ax = si
	cl = Mem0[ss:bp - 0x0002:byte]
	ax = ax >> cl
	SCZO = cond(ax)
	si = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0002:word16]
	ax = 0x0194
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_08FA (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_03B2_exit
l0800_01E2_in_fn0800_03B2:
	cx = 0x001E
	dx = 0x0056
	ds = Mem0[0x0800:0x01F8:selector]
	call fn0800_01DA (retsize: 2;)
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_0121 (retsize: 2;)
	v27 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v27
	SCZO = cond(v27)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 0x0002:word16] = 0x00FF
	si = 0x008F
	ax = Mem0[ss:bp - 0x0002:word16]
	ax = ax + si
	SCZO = cond(ax)
	si = ax
	ax = Mem0[ss:bp - 0x0002:word16]
	ax = ax - si
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0002:word16] = ax
	ax = Mem0[ss:bp - 0x0002:word16]
	dx_ax = si *u ax
	SCZO = cond(dx_ax)
	Mem0[ss:bp - 0x0002:word16] = ax
	ax = si
	dx_ax = (word32) ax
	dx = dx_ax % Mem0[ss:bp - 0x0002:word16]
	ax = dx_ax / Mem0[ss:bp - 0x0002:word16]
	SCZO = cond(ax)
	si = ax
	ax = si
	dx_ax = (word32) ax
	dx = dx_ax % Mem0[ss:bp - 0x0002:word16]
	ax = dx_ax / Mem0[ss:bp - 0x0002:word16]
	SCZO = cond(ax)
	si = dx
	ax = Mem0[ss:bp - 0x0002:word16]
	cl = 0x05
	ax = ax << cl
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0002:word16] = ax
	ax = si
	cl = Mem0[ss:bp - 0x0002:byte]
	ax = ax >> cl
	SCZO = cond(ax)
	si = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0002:word16]
	ax = 0x0194
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_08FA (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_03B2_exit
l0800_03B2:
	sp = fp
	cx = Mem0[ds:0x008A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0800_0501 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_03E5
	// succ:  l0800_03C1 l0800_03E5
l0800_03C1:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	ds = Mem0[ds:0x008C:selector]
	si = si ^ si
	SZO = cond(si)
	C = false
	D = false
	// succ:  l0800_03CB
l0800_03CB:
	branch cx == 0x0000 l0800_03CD
	// succ:  l0800_03CB_1 l0800_03CD
l0800_03CB_1:
	v14 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v14
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_03CB
	// succ:  l0800_03CB
l0800_03CD:
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	di = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x008E:word16]
	call fn0800_0501 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	bx = ax
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	Mem0[ds:0x0088:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_03E8
	// succ:  l0800_03E5 l0800_03E8
l0800_03E5:
	// succ:  l0800_01E2_in_fn0800_03B2 l0800_01E2_in_fn0800_03B2
l0800_03E8:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_03ED
l0800_03ED:
	Mem0[ds:bx:word16] = di
	bx = bx + 0x0002
	SCZO = cond(bx)
	// succ:  l0800_03F2
l0800_03F2:
	branch cx == 0x0000 l0800_03F4
	// succ:  l0800_03F2_1 l0800_03F4
l0800_03F2_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_03F2
	// succ:  l0800_03F4 l0800_03F2
l0800_03F4:
	SCZO = cond(Mem0[es:di:byte] - al)
	branch Test(NE,Z) l0800_03ED
	// succ:  l0800_03F9 l0800_03ED
l0800_03F9:
	Mem0[ds:bx:word16] = ax
	return
	// succ:  fn0800_03B2_exit
fn0800_03B2_exit:


// fn0800_0422
// Return size: 2
void fn0800_0422()
fn0800_0422_entry:
	// succ:  l0800_0422
l0800_0422:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	di = Mem0[ss:bp + 0x0004:word16]
	ax = Mem0[ds:di + 0x0006:word16]
	Mem0[ds:0x0470:word16] = ax
	SCZO = cond(ax - di)
	branch Test(NE,Z) l0800_043C
	// succ:  l0800_0434 l0800_043C
l0800_0434:
	Mem0[ds:0x0470:word16] = 0x0000
	goto l0800_044C
	// succ:  l0800_044C
l0800_043C:
	si = Mem0[ds:di + 0x0004:word16]
	bx = Mem0[ds:0x0470:word16]
	Mem0[ds:bx + 0x0004:word16] = si
	ax = Mem0[ds:0x0470:word16]
	Mem0[ds:si + 0x0006:word16] = ax
	// succ:  l0800_044C
l0800_044C:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_0422_exit
fn0800_0422_exit:


// fn0800_0450
// Return size: 2
void fn0800_0450()
fn0800_0450_entry:
	// succ:  l0800_0450
l0800_0450:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	di = Mem0[ss:bp + 0x0004:word16]
	ax = Mem0[ss:bp + 0x0006:word16]
	v9 = Mem0[ds:di:word16] - ax
	Mem0[ds:di:word16] = v9
	SCZO = cond(v9)
	si = Mem0[ds:di:word16]
	si = si + di
	SCZO = cond(si)
	ax = Mem0[ss:bp + 0x0006:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	Mem0[ds:si:word16] = ax
	Mem0[ds:si + 0x0002:word16] = di
	ax = Mem0[ds:0x046E:word16]
	SCZO = cond(ax - di)
	branch Test(NE,Z) l0800_0477
	// succ:  l0800_0471 l0800_0477
l0800_0471:
	Mem0[ds:0x046E:word16] = si
	goto l0800_047F
	// succ:  l0800_047F
l0800_0477:
	di = si
	di = di + Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(di)
	Mem0[ds:di + 0x0002:word16] = si
	// succ:  l0800_047F
l0800_047F:
	ax = si
	ax = ax + 0x0004
	SCZO = cond(ax)
	// succ:  l0800_0486
l0800_0486:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_0450_exit
fn0800_0450_exit:


// fn0800_048A
// Return size: 2
void fn0800_048A()
fn0800_048A_entry:
	// succ:  l0800_048A
l0800_048A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp + 0x0004:word16]
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = ax & 0xFFFF
	SZO = cond(ax)
	C = false
	dx = dx & 0x0000
	SZO = cond(dx)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_0598 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = ax
	SCZO = cond(si - 0xFFFF)
	branch Test(NE,Z) l0800_04AC
	// succ:  l0800_04A8 l0800_04AC
l0800_04A8:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_04C4
	// succ:  l0800_04C4
l0800_04AC:
	ax = Mem0[ds:0x046E:word16]
	Mem0[ds:si + 0x0002:word16] = ax
	ax = Mem0[ss:bp + 0x0004:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	Mem0[ds:si:word16] = ax
	Mem0[ds:0x046E:word16] = si
	ax = Mem0[ds:0x046E:word16]
	ax = ax + 0x0004
	SCZO = cond(ax)
	// succ:  l0800_04C4
l0800_04C4:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_048A_exit
fn0800_048A_exit:


// fn0800_04C7
// Return size: 2
void fn0800_04C7()
fn0800_04C7_entry:
	// succ:  l0800_04C7
l0800_04C7:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp + 0x0004:word16]
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = ax & 0xFFFF
	SZO = cond(ax)
	C = false
	dx = dx & 0x0000
	SZO = cond(dx)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_0598 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = ax
	SCZO = cond(si - 0xFFFF)
	branch Test(NE,Z) l0800_04E9
	// succ:  l0800_04E5 l0800_04E9
l0800_04E5:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_04FE
	// succ:  l0800_04FE
l0800_04E9:
	Mem0[ds:0x0472:word16] = si
	Mem0[ds:0x046E:word16] = si
	ax = Mem0[ss:bp + 0x0004:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	Mem0[ds:si:word16] = ax
	ax = si
	ax = ax + 0x0004
	SCZO = cond(ax)
	// succ:  l0800_04FE
l0800_04FE:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_04C7_exit
fn0800_04C7_exit:


// fn0800_0501
// Return size: 2
void fn0800_0501()
fn0800_0501_entry:
	// succ:  l0800_0501
l0800_0501:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	di = Mem0[ss:bp + 0x0004:word16]
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l0800_0512
	// succ:  l0800_050D l0800_0512
l0800_050D:
	SCZO = cond(di - 0xFFF4)
	branch Test(ULE,CZ) l0800_0516
	// succ:  l0800_0512 l0800_0516
l0800_0512:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_0570
	// succ:  l0800_0570
l0800_0516:
	ax = di
	ax = ax + 0x000B
	SCZO = cond(ax)
	ax = ax & 0xFFF8
	SZO = cond(ax)
	C = false
	di = ax
	SCZO = cond(Mem0[ds:0x0472:word16] - 0x0000)
	branch Test(NE,Z) l0800_052E
	// succ:  l0800_0527 l0800_052E
l0800_0527:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn0800_04C7 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	goto l0800_0570
	// succ:  l0800_0570
l0800_052E:
	si = Mem0[ds:0x0470:word16]
	ax = si
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_0569
	// succ:  l0800_0538 l0800_0569
l0800_0538:
	ax = Mem0[ds:si:word16]
	dx = di
	dx = dx + 0x0028
	SCZO = cond(dx)
	SCZO = cond(ax - dx)
	branch Test(ULT,C) l0800_054C
	// succ:  l0800_0543 l0800_054C
l0800_0543:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn0800_0450 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	goto l0800_0570
	// succ:  l0800_0570
l0800_054C:
	ax = Mem0[ds:si:word16]
	SCZO = cond(ax - di)
	branch Test(ULT,C) l0800_0560
	// succ:  l0800_0552 l0800_0560
l0800_0552:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn0800_0422 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	v16 = Mem0[ds:si:word16] + 0x0001
	Mem0[ds:si:word16] = v16
	SZO = cond(v16)
	ax = si
	ax = ax + 0x0004
	SCZO = cond(ax)
	goto l0800_0570
	// succ:  l0800_0570
l0800_0560:
	si = Mem0[ds:si + 0x0006:word16]
	SCZO = cond(si - Mem0[ds:0x0470:word16])
	branch Test(NE,Z) l0800_0538
	// succ:  l0800_0569 l0800_0538
l0800_0569:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn0800_048A (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn0800_048A (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	// succ:  l0800_0570
l0800_0570:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_0501_exit
fn0800_0501_exit:


// fn0800_0598
// Return size: 2
void fn0800_0598()
fn0800_0598_entry:
	// succ:  l0800_0598
l0800_0598:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = Mem0[ss:bp + 0x0004:word16]
	dx = Mem0[ss:bp + 0x0006:word16]
	ax = ax + Mem0[ds:0x009E:word16]
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	cx = ax
	cx = cx + 0x0100
	SCZO = cond(cx)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(NE,Z) l0800_05BF
	// succ:  l0800_05B5 l0800_05BF
l0800_05B5:
	SCZO = cond(cx - sp)
	branch Test(UGE,C) l0800_05BF
	// succ:  l0800_05B9 l0800_05BF
l0800_05B9:
	v13 = Mem0[ds:0x009E:word16]
	Mem0[ds:0x009E:word16] = ax
	ax = v13
	goto l0800_05CA
	// succ:  l0800_05CA
l0800_05BF:
	Mem0[ds:0x0094:word16] = 0x0008
	ax = 0xFFFF
	// succ:  l0800_05CA
l0800_05CA:
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_0598_exit
fn0800_0598_exit:


// fn0800_08FA
// Return size: 2
void fn0800_08FA()
fn0800_08FA_entry:
	// succ:  l0800_08FA
l0800_08FA:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = 0x0A30
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x021C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0004:word16]
	ax = bp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_0B22 (retsize: 2;)
	sp = sp + 0x0008
	// succ:  l0800_0911
l0800_0911:
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_08FA_exit
fn0800_08FA_exit:


// fn0800_0B22
// Return size: 2
void fn0800_0B22()
fn0800_0B22_entry:
	// succ:  l0800_0B22
l0800_0B22:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0098
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	Mem0[ss:bp - 0x0058:word16] = 0x0000
	Mem0[ss:bp - 0x0055:byte] = 0x50
	Mem0[ss:bp - 0x0002:word16] = 0x0000
	// succ:  l0800_0B7C
l0800_0B7C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	D = false
	di = bp - 0x0054
	Mem0[ss:bp - 0x0096:word16] = di
	di = Mem0[ss:bp - 0x0096:word16]
	si = Mem0[ss:bp + 0x0006:word16]
	// succ:  l0800_0B8C
l0800_0B8C:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l0800_0BA2
	// succ:  l0800_0B91 l0800_0BA2
l0800_0B91:
	SCZO = cond(al - 0x25)
	branch Test(EQ,Z) l0800_0BA5
	// succ:  l0800_0B95 l0800_0BA5
l0800_0B95:
	Mem0[ds:di:byte] = al
	di = di + 0x0001
	SZO = cond(di)
	v15 = Mem0[ss:bp - 0x0055:byte] - 0x01
	Mem0[ss:bp - 0x0055:byte] = v15
	SZO = cond(v15)
	branch Test(GT,SZO) l0800_0B8C
	// succ:  l0800_0B9D l0800_0B8C
l0800_0B9D:
	call fn0800_0B50 (retsize: 2;)
	goto l0800_0B8C
	// succ:  l0800_0B8C
l0800_0BA2:
	goto l0800_1021
	// succ:  l0800_1021
l0800_0BA5:
	Mem0[ss:bp - 0x008A:word16] = si
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	SCZO = cond(al - 0x25)
	branch Test(EQ,Z) l0800_0B95
	// succ:  l0800_0BAE l0800_0B95
l0800_0BAE:
	Mem0[ss:bp - 0x0096:word16] = di
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	Mem0[ss:bp - 0x008C:word16] = cx
	Mem0[ss:bp - 0x0098:word16] = cx
	Mem0[ss:bp - 0x008D:byte] = cl
	Mem0[ss:bp - 0x0092:word16] = 0xFFFF
	Mem0[ss:bp - 0x0090:word16] = 0xFFFF
	// succ:  l0800_0BCF
l0800_0BCF:
	ah = ah ^ ah
	SZO = cond(ah)
	C = false
	dx = ax
	bx = ax
	bl = bl - 0x20
	SCZO = cond(bl)
	SCZO = cond(bl - 0x60)
	branch Test(UGE,C) l0800_0C24
	// succ:  l0800_0BDD l0800_0C24
l0800_0BDD:
	bl = Mem0[ds:bx + 0x03BF:byte]
	ax = bx
	SCZO = cond(ax - 0x0017)
	branch Test(ULE,CZ) l0800_0BEB
	// succ:  l0800_0BE8 l0800_0BEB
l0800_0BE8:
	goto l0800_100F
	// succ:  l0800_100F
l0800_0BEB:
	bx = ax
	bx = bx << 0x0001
	SCZO = cond(bx)
l0800_0C24:
	// succ:  l0800_100F
l0800_100F:
	si = Mem0[ss:bp - 0x008A:word16]
	di = Mem0[ss:bp - 0x0096:word16]
	al = 0x25
	// succ:  l0800_1019
l0800_1019:
	call fn0800_0B48 (retsize: 2;)
	sp = sp + 0xFFFE
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l0800_1019
	// succ:  l0800_1021 l0800_1019
l0800_1021:
	SCZO = cond(Mem0[ss:bp - 0x0055:byte] - 0x50)
	branch Test(GE,SO) l0800_102A
	SCZO = cond(Mem0[ss:bp - 0x0055:byte] - 0x50)
	branch Test(GE,SO) l0800_102A
	// succ:  l0800_1027 l0800_102A
l0800_1027:
	call fn0800_0B50 (retsize: 2;)
	call fn0800_0B50 (retsize: 2;)
	// succ:  l0800_102A
l0800_102A:
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	SCZO = cond(Mem0[ss:bp - 0x0002:word16] - 0x0000)
	branch Test(EQ,Z) l0800_1038
	// succ:  l0800_1031 l0800_1038
l0800_1031:
	ax = 0xFFFF
	goto l0800_103D
	// succ:  l0800_103D
l0800_1038:
	ax = Mem0[ss:bp - 0x0058:word16]
	// succ:  l0800_103D
l0800_103D:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_0B22_exit
fn0800_0B22_exit:


// fn0800_0B48
// Return size: 2
void fn0800_0B48()
fn0800_0B48_entry:
	// succ:  l0800_0B48
l0800_0B48:
	sp = fp
	Mem0[ds:di:byte] = al
	di = di + 0x0001
	SZO = cond(di)
	v9 = Mem0[ss:bp - 0x0055:byte] - 0x01
	Mem0[ss:bp - 0x0055:byte] = v9
	SZO = cond(v9)
	branch Test(LE,SZO) l0800_0B7B_in_fn0800_0B48
	// succ:  l0800_0B4E_thunk_fn0800_0B50 l0800_0B7B_in_fn0800_0B48
l0800_0B4E_thunk_fn0800_0B50:
	call fn0800_0B50 (retsize: 2;)
	return
	// succ:  fn0800_0B48_exit l0800_0B4E_thunk_fn0800_0B50
l0800_0B4E_thunk_fn0800_0B50:
	call fn0800_0B50 (retsize: 2;)
	return
	// succ:  fn0800_0B48_exit
l0800_0B7B_in_fn0800_0B48:
	return
	// succ:  fn0800_0B48_exit
fn0800_0B48_exit:


// fn0800_0B50
// Return size: 2
void fn0800_0B50()
fn0800_0B50_entry:
	// succ:  l0800_0B50
l0800_0B50:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	ax = bp - 0x0054
	di = di - ax
	SCZO = cond(di)
	ax = bp - 0x0054
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	call SEQ(cs, Mem0[ss:bp + 0x000A:word16]) (retsize: 2;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_0B6D
	// succ:  l0800_0B68 l0800_0B6D
l0800_0B68:
	Mem0[ss:bp - 0x0002:word16] = 0x0001
	// succ:  l0800_0B6D
l0800_0B6D:
	Mem0[ss:bp - 0x0055:byte] = 0x50
	v16 = Mem0[ss:bp - 0x0058:word16] + di
	Mem0[ss:bp - 0x0058:word16] = v16
	SCZO = cond(v16)
	di = bp - 0x0054
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	dx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	// succ:  l0800_0B7B
l0800_0B7B:
	return
	// succ:  fn0800_0B50_exit
fn0800_0B50_exit:


