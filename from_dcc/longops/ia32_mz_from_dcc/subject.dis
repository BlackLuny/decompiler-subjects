// fn0800_0000
// Return size: 2
void fn0800_0000()
fn0800_0000_entry:
	// succ:  l0800_0000
l0800_0000:
	sp = fp
	dx = 0x091B
	Mem0[0x0800:0x01F8:word16] = dx
	ah = 0x30
	al = msdos_get_dos_version(out ah)
	bp = Mem0[ds:0x0002:word16]
	bx = Mem0[ds:0x002C:word16]
	ds = dx
	Mem0[ds:0x0092:word16] = ax
	Mem0[ds:0x0090:word16] = es
	Mem0[ds:0x008C:word16] = bx
	Mem0[ds:0x00AC:word16] = bp
	Mem0[ds:0x0096:word16] = 0xFFFF
	call fn0800_0162 (retsize: 2;)
	es_di = Mem0[ds:0x008A:segptr32]
	ax = di
	bx = ax
	cx = 0x7FFF
	// succ:  l0800_0039
l0800_0039:
	SCZO = cond(Mem0[es:di:word16] - 0x3738)
	branch Test(NE,Z) l0800_0059
	// succ:  l0800_0040 l0800_0059
l0800_0040:
	dx = Mem0[es:di + 0x0002:word16]
	SCZO = cond(dl - 0x3D)
	branch Test(NE,Z) l0800_0059
	// succ:  l0800_0049 l0800_0059
l0800_0049:
	dh = dh & 0xDF
	SZO = cond(dh)
	C = false
	v20 = Mem0[ds:0x0096:word16] + 0x0001
	Mem0[ds:0x0096:word16] = v20
	SZO = cond(v20)
	SCZO = cond(dh - 0x59)
	branch Test(NE,Z) l0800_0059
	// succ:  l0800_0055 l0800_0059
l0800_0055:
	v21 = Mem0[ds:0x0096:word16] + 0x0001
	Mem0[ds:0x0096:word16] = v21
	SZO = cond(v21)
	// succ:  l0800_0059
l0800_0059:
	branch cx == 0x0000 l0800_005B
	// succ:  l0800_0059_1 l0800_005B
l0800_0059_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_0059
	// succ:  l0800_005B l0800_0059
l0800_005B:
	branch cx == 0x0000 l0800_00BE
	// succ:  l0800_005D l0800_00BE
l0800_005D:
	bx = bx + 0x0001
	SZO = cond(bx)
	SCZO = cond(Mem0[es:di:byte] - al)
	branch Test(NE,Z) l0800_0039
	// succ:  l0800_0063 l0800_0039
l0800_0063:
	ch = ch | 0x80
	SZO = cond(ch)
	C = false
	cx = -cx
	SCZO = cond(cx)
	C = cx == 0x0000
	Mem0[ds:0x008A:word16] = cx
	cx = 0x0001
	bx = bx << cl
	SCZO = cond(bx)
	bx = bx + 0x0008
	SCZO = cond(bx)
	bx = bx & 0xFFF8
	SZO = cond(bx)
	C = false
	Mem0[ds:0x008E:word16] = bx
	dx = ds
	bp = bp - dx
	SCZO = cond(bp)
	di = Mem0[ds:0x020A:word16]
	SCZO = cond(di - 0x0200)
	branch Test(UGE,C) l0800_0090
	// succ:  l0800_0089 l0800_0090
l0800_0089:
	di = 0x0200
	Mem0[ds:0x020A:word16] = di
	// succ:  l0800_0090
l0800_0090:
	di = di + 0x0476
	SCZO = cond(di)
	branch Test(ULT,C) l0800_00BE
	// succ:  l0800_0096 l0800_00BE
l0800_0096:
	di = di + Mem0[ds:0x0208:word16]
	SCZO = cond(di)
	branch Test(ULT,C) l0800_00BE
	// succ:  l0800_009C l0800_00BE
l0800_009C:
	cl = 0x04
	di = di >>u cl
	SCZO = cond(di)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(bp - di)
	branch Test(ULT,C) l0800_00BE
	// succ:  l0800_00A5 l0800_00BE
l0800_00A5:
	SCZO = cond(Mem0[ds:0x020A:word16] - 0x0000)
	branch Test(EQ,Z) l0800_00B3
	// succ:  l0800_00AC l0800_00B3
l0800_00AC:
	SCZO = cond(Mem0[ds:0x0208:word16] - 0x0000)
	branch Test(NE,Z) l0800_00C1
	// succ:  l0800_00B3 l0800_00C1
l0800_00B3:
	di = 0x1000
	SCZO = cond(bp - di)
	branch Test(UGT,CZ) l0800_00C1
	// succ:  l0800_00BA l0800_00C1
l0800_00BA:
	di = bp
	goto l0800_00C1
	// succ:  l0800_00C1
l0800_00BE:
	goto l0800_01E2
	// succ:  l0800_01E2
l0800_00C1:
	bx = di
	bx = bx + dx
	SCZO = cond(bx)
	Mem0[ds:0x00A4:word16] = bx
	Mem0[ds:0x00A8:word16] = bx
	ax = Mem0[ds:0x0090:word16]
	bx = bx - ax
	SCZO = cond(bx)
	es = ax
	ah = 0x4A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	C = msdos_resize_memory_block(es, bx, out bx)
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = di << cl
	SCZO = cond(di)
	__cli()
	ss = dx
	sp = di
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = Mem0[0x0800:0x01F8:selector]
	di = 0x0430
	cx = 0x0476
	cx = cx - di
	SCZO = cond(cx)
	// succ:  l0800_00F1
l0800_00F1:
	branch cx == 0x0000 l0800_00F3
	// succ:  l0800_00F1_1 l0800_00F3
l0800_00F1_1:
	Mem0[es:di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_00F1
	// succ:  l0800_00F1
l0800_00F3:
	sp = sp - 0x0002
	call SEQ(cs, Mem0[ds:0x0422:word16]) (retsize: 2;)
	call fn0800_032F (retsize: 2;)
	call fn0800_041A (retsize: 2;)
	ah = 0x00
	cx = bios_get_system_time(out dx)
	Mem0[ds:0x0098:word16] = dx
	Mem0[ds:0x009A:word16] = cx
	call SEQ(cs, Mem0[ds:0x0426:word16]) (retsize: 2;)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x0088:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x0086:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x0084:word16]
	call fn0800_01FA (retsize: 2;)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_02FA (retsize: 2;)
	// succ:  l0800_011E_thunk_fn0800_0121
l0800_011E_thunk_fn0800_0121:
	call fn0800_0121 (retsize: 0;)
	return
	// succ:  fn0800_0000_exit
l0800_01E2:
	cx = 0x001E
	dx = 0x0056
	ds = Mem0[0x0800:0x01F8:selector]
	call fn0800_01DA (retsize: 2;)
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_0121 (retsize: 2;)
	v27 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v27
	SCZO = cond(v27)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0008
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0006:word16] = 0x0000
	Mem0[ss:bp - 0x0008:word16] = 0x00FF
	Mem0[ss:bp - 0x0002:word16] = 0x0000
	Mem0[ss:bp - 0x0004:word16] = 0x008F
	dx = Mem0[ss:bp - 0x0006:word16]
	ax = Mem0[ss:bp - 0x0008:word16]
	ax = ax + Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax)
	dx = dx + Mem0[ss:bp - 0x0002:word16] + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	dx = Mem0[ss:bp - 0x0006:word16]
	ax = Mem0[ss:bp - 0x0008:word16]
	ax = ax - Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax)
	dx = dx - Mem0[ss:bp - 0x0002:word16] - C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0006:word16] = dx
	Mem0[ss:bp - 0x0008:word16] = ax
	dx = Mem0[ss:bp - 0x0006:word16]
	ax = Mem0[ss:bp - 0x0008:word16]
	cx = Mem0[ss:bp - 0x0002:word16]
	bx = Mem0[ss:bp - 0x0004:word16]
	call fn0800_08C3 (retsize: 4;)
	Mem0[ss:bp - 0x0006:word16] = dx
	Mem0[ss:bp - 0x0008:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	call fn0800_10C6 (retsize: 4;)
	sp = sp + 0x0008
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	call fn0800_10CF (retsize: 4;)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	dx = Mem0[ss:bp - 0x0006:word16]
	ax = Mem0[ss:bp - 0x0008:word16]
	cl = 0x05
	call fn0800_1187 (retsize: 4;)
	Mem0[ss:bp - 0x0006:word16] = dx
	Mem0[ss:bp - 0x0008:word16] = ax
	dx = Mem0[ss:bp - 0x0002:word16]
	ax = Mem0[ss:bp - 0x0004:word16]
	cl = Mem0[ss:bp - 0x0008:byte]
	call fn0800_1169 (retsize: 4;)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	ax = 0x0194
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_097B (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_0000_exit
fn0800_0000_exit:


// fn0800_0121
// Return size: 0
void fn0800_0121()
fn0800_0121_entry:
	// succ:  l0800_0121
l0800_0121:
	sp = fp
	ds = Mem0[0x0800:0x01F8:selector]
	call fn0800_01A5 (retsize: 2;)
	sp = sp - 0x0002
	call SEQ(cs, Mem0[ds:0x0424:word16]) (retsize: 2;)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	si = ax
	cx = 0x002F
	D = false
	// succ:  l0800_0137
l0800_0137:
	al = al + Mem0[ds:si:byte]
	SCZO = cond(al)
	ah = ah + 0x00 + C
	SCZO = cond(ah)
	si = si + 0x0001
	SZO = cond(si)
	cx = cx - 0x0001
	branch cx != 0x0000 l0800_0137
	// succ:  l0800_013F l0800_0137
l0800_013F:
	ax = ax - 0x0D37
	SCZO = cond(ax)
	branch Test(EQ,Z) l0800_014F
	// succ:  l0800_0145 l0800_014F
l0800_0145:
	cx = 0x0019
	dx = 0x002F
	call fn0800_01DA (retsize: 2;)
	// succ:  l0800_014F
l0800_014F:
	bp = sp
	ah = 0x4C
	al = Mem0[ss:bp + 0x0002:byte]
	msdos_terminate(al)
	// succ:  fn0800_0121_exit
fn0800_0121_exit:


// fn0800_0162
// Return size: 2
void fn0800_0162()
fn0800_0162_entry:
	// succ:  l0800_0162
l0800_0162:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x3500
	es_bx = msdos_get_interrupt_vector(al)
	Mem0[ds:0x0074:word16] = bx
	Mem0[ds:0x0076:word16] = es
	ax = 0x3504
	es_bx = msdos_get_interrupt_vector(al)
	Mem0[ds:0x0078:word16] = bx
	Mem0[ds:0x007A:word16] = es
	ax = 0x3505
	es_bx = msdos_get_interrupt_vector(al)
	Mem0[ds:0x007C:word16] = bx
	Mem0[ds:0x007E:word16] = es
	ax = 0x3506
	es_bx = msdos_get_interrupt_vector(al)
	Mem0[ds:0x0080:word16] = bx
	Mem0[ds:0x0082:word16] = es
	ax = 0x2500
	dx = cs
	ds = dx
	dx = 0x0158
	msdos_set_interrupt_vector(al, ds_dx)
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	return
	// succ:  fn0800_0162_exit
fn0800_0162_exit:


// fn0800_01A5
// Return size: 2
void fn0800_01A5()
fn0800_01A5_entry:
	// succ:  l0800_01A5
l0800_01A5:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x2500
	ds_dx = Mem0[ds:0x0074:segptr32]
	msdos_set_interrupt_vector(al, ds_dx)
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x2504
	ds_dx = Mem0[ds:0x0078:segptr32]
	msdos_set_interrupt_vector(al, ds_dx)
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x2505
	ds_dx = Mem0[ds:0x007C:segptr32]
	msdos_set_interrupt_vector(al, ds_dx)
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = 0x2506
	ds_dx = Mem0[ds:0x0080:segptr32]
	msdos_set_interrupt_vector(al, ds_dx)
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	return
	// succ:  fn0800_01A5_exit
fn0800_01A5_exit:


// fn0800_01DA
// Return size: 2
void fn0800_01DA()
fn0800_01DA_entry:
	// succ:  l0800_01DA
l0800_01DA:
	sp = fp
	ah = 0x40
	bx = 0x0002
	C = msdos_write_file(bx, cx, ds_dx, out ax)
	return
	// succ:  fn0800_01DA_exit
fn0800_01DA_exit:


// fn0800_01FA
// Return size: 2
void fn0800_01FA()
fn0800_01FA_entry:
	// succ:  l0800_01FA
l0800_01FA:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0008
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0006:word16] = 0x0000
	Mem0[ss:bp - 0x0008:word16] = 0x00FF
	Mem0[ss:bp - 0x0002:word16] = 0x0000
	Mem0[ss:bp - 0x0004:word16] = 0x008F
	dx = Mem0[ss:bp - 0x0006:word16]
	ax = Mem0[ss:bp - 0x0008:word16]
	ax = ax + Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax)
	dx = dx + Mem0[ss:bp - 0x0002:word16] + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	dx = Mem0[ss:bp - 0x0006:word16]
	ax = Mem0[ss:bp - 0x0008:word16]
	ax = ax - Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax)
	dx = dx - Mem0[ss:bp - 0x0002:word16] - C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0006:word16] = dx
	Mem0[ss:bp - 0x0008:word16] = ax
	dx = Mem0[ss:bp - 0x0006:word16]
	ax = Mem0[ss:bp - 0x0008:word16]
	cx = Mem0[ss:bp - 0x0002:word16]
	bx = Mem0[ss:bp - 0x0004:word16]
	call fn0800_08C3 (retsize: 4;)
	Mem0[ss:bp - 0x0006:word16] = dx
	Mem0[ss:bp - 0x0008:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	call fn0800_10C6 (retsize: 4;)
	sp = sp + 0x0008
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	call fn0800_10CF (retsize: 4;)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	dx = Mem0[ss:bp - 0x0006:word16]
	ax = Mem0[ss:bp - 0x0008:word16]
	cl = 0x05
	call fn0800_1187 (retsize: 4;)
	Mem0[ss:bp - 0x0006:word16] = dx
	Mem0[ss:bp - 0x0008:word16] = ax
	dx = Mem0[ss:bp - 0x0002:word16]
	ax = Mem0[ss:bp - 0x0004:word16]
	cl = Mem0[ss:bp - 0x0008:byte]
	call fn0800_1169 (retsize: 4;)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	ax = 0x0194
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_097B (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_01FA_exit
fn0800_01FA_exit:


// fn0800_02FA
// Return size: 2
void fn0800_02FA()
fn0800_02FA_entry:
	// succ:  l0800_02FA
l0800_02FA:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	goto l0800_0309
	// succ:  l0800_0309
l0800_02FF:
	bx = Mem0[ds:0x020C:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	call SEQ(cs, Mem0[ds:bx + 0x0430:word16]) (retsize: 2;)
	// succ:  l0800_0309
l0800_0309:
	ax = Mem0[ds:0x020C:word16]
	v7 = Mem0[ds:0x020C:word16] - 0x0001
	Mem0[ds:0x020C:word16] = v7
	SZO = cond(v7)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_02FF
	// succ:  l0800_0314 l0800_02FF
l0800_0314:
	call SEQ(cs, Mem0[ds:0x0202:word16]) (retsize: 2;)
	call SEQ(cs, Mem0[ds:0x0204:word16]) (retsize: 2;)
	call SEQ(cs, Mem0[ds:0x0206:word16]) (retsize: 2;)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0004:word16]
	call fn0800_0121 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_02FA_exit
fn0800_02FA_exit:


// fn0800_032F
// Return size: 0
void fn0800_032F()
fn0800_032F_entry:
	goto l0800_032F
	// succ:  l0800_032F
l0800_01E2_in_fn0800_032F:
	cx = 0x001E
	dx = 0x0056
	ds = Mem0[0x0800:0x01F8:selector]
	call fn0800_01DA (retsize: 2;)
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_0121 (retsize: 2;)
	v27 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v27
	SCZO = cond(v27)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0008
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0006:word16] = 0x0000
	Mem0[ss:bp - 0x0008:word16] = 0x00FF
	Mem0[ss:bp - 0x0002:word16] = 0x0000
	Mem0[ss:bp - 0x0004:word16] = 0x008F
	dx = Mem0[ss:bp - 0x0006:word16]
	ax = Mem0[ss:bp - 0x0008:word16]
	ax = ax + Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax)
	dx = dx + Mem0[ss:bp - 0x0002:word16] + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	dx = Mem0[ss:bp - 0x0006:word16]
	ax = Mem0[ss:bp - 0x0008:word16]
	ax = ax - Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax)
	dx = dx - Mem0[ss:bp - 0x0002:word16] - C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0006:word16] = dx
	Mem0[ss:bp - 0x0008:word16] = ax
	dx = Mem0[ss:bp - 0x0006:word16]
	ax = Mem0[ss:bp - 0x0008:word16]
	cx = Mem0[ss:bp - 0x0002:word16]
	bx = Mem0[ss:bp - 0x0004:word16]
	call fn0800_08C3 (retsize: 4;)
	Mem0[ss:bp - 0x0006:word16] = dx
	Mem0[ss:bp - 0x0008:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	call fn0800_10C6 (retsize: 4;)
	sp = sp + 0x0008
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	call fn0800_10CF (retsize: 4;)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	dx = Mem0[ss:bp - 0x0006:word16]
	ax = Mem0[ss:bp - 0x0008:word16]
	cl = 0x05
	call fn0800_1187 (retsize: 4;)
	Mem0[ss:bp - 0x0006:word16] = dx
	Mem0[ss:bp - 0x0008:word16] = ax
	dx = Mem0[ss:bp - 0x0002:word16]
	ax = Mem0[ss:bp - 0x0004:word16]
	cl = Mem0[ss:bp - 0x0008:byte]
	call fn0800_1169 (retsize: 4;)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	ax = 0x0194
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_097B (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_032F_exit
l0800_032F:
	sp = fp
	Mem0[0x0800:0x0329:word16] = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	Mem0[0x0800:0x032B:word16] = ds
	D = false
	es = Mem0[ds:0x0090:selector]
	si = 0x0080
	ah = ah ^ ah
	SZO = cond(ah)
	C = false
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	ax = ax + 0x0001
	SZO = cond(ax)
	bp = es
	v14 = si
	si = dx
	dx = v14
	v16 = ax
	ax = bx
	bx = v16
	si = Mem0[ds:0x008A:word16]
	si = si + 0x0002
	SCZO = cond(si)
	cx = 0x0001
	SCZO = cond(Mem0[ds:0x0092:byte] - 0x03)
	branch Test(ULT,C) l0800_036D
	// succ:  l0800_035C l0800_036D
l0800_035C:
	es = Mem0[ds:0x008C:selector]
	di = si
	cl = 0x7F
	al = al ^ al
	SZO = cond(al)
	C = false
	// succ:  l0800_0366
l0800_0366:
	branch cx == 0x0000 l0800_0368
	// succ:  l0800_0366_1 l0800_0368
l0800_0366_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_0366
	// succ:  l0800_0368 l0800_0366
l0800_0368:
	branch cx == 0x0000 l0800_03E0
	// succ:  l0800_036A l0800_03E0
l0800_036A:
	cl = cl ^ 0x7F
	SZO = cond(cl)
	C = false
	// succ:  l0800_036D
l0800_036D:
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = 0x0001
	ax = ax + bx
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax & 0xFFFE
	SZO = cond(ax)
	C = false
	di = sp
	di = di - ax
	SCZO = cond(di)
	branch Test(ULT,C) l0800_03E0
	// succ:  l0800_0380 l0800_03E0
l0800_0380:
	sp = di
	ax = es
	ds = ax
	ax = ss
	es = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = cx - 0x0001
	SZO = cond(cx)
	// succ:  l0800_038C
l0800_038C:
	branch cx == 0x0000 l0800_038E
	// succ:  l0800_038C_1 l0800_038E
l0800_038C_1:
	v23 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v23
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_038C
	// succ:  l0800_038C
l0800_038E:
	al = al ^ al
	SZO = cond(al)
	C = false
	Mem0[es:di:byte] = al
	di = di + 0x0001
	ds = bp
	v24 = dx
	dx = si
	si = v24
	v25 = cx
	cx = bx
	bx = v25
	ax = bx
	dx = ax
	bx = bx + 0x0001
	SZO = cond(bx)
	// succ:  l0800_039C
l0800_039C:
	call fn0800_03B8 (retsize: 2;)
	branch Test(UGT,CZ) l0800_03A8
	// succ:  l0800_03A1 l0800_03A8
l0800_03A1:
	branch Test(ULT,C) l0800_03E3
	// succ:  l0800_03A3 l0800_03E3
l0800_03A3:
	call fn0800_03B8 (retsize: 2;)
	branch Test(UGT,CZ) l0800_03A1
	// succ:  l0800_03A8 l0800_03A1
l0800_03A8:
	SCZO = cond(al - 0x20)
	branch Test(EQ,Z) l0800_03B4
	// succ:  l0800_03AC l0800_03B4
l0800_03AC:
	SCZO = cond(al - 0x0D)
	branch Test(EQ,Z) l0800_03B4
	// succ:  l0800_03B0 l0800_03B4
l0800_03B0:
	SCZO = cond(al - 0x09)
	branch Test(NE,Z) l0800_039C
	// succ:  l0800_03B4 l0800_039C
l0800_03B4:
	al = al ^ al
	SZO = cond(al)
	C = false
	goto l0800_039C
	// succ:  l0800_039C
l0800_03E0:
	goto l0800_01E2_in_fn0800_032F
	// succ:  l0800_01E2_in_fn0800_032F
l0800_03E3:
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = cx + dx
	SCZO = cond(cx)
	ds = Mem0[0x0800:0x032B:selector]
	Mem0[ds:0x0084:word16] = bx
	bx = bx + 0x0001
	SZO = cond(bx)
	bx = bx + bx
	SCZO = cond(bx)
	si = sp
	bp = sp
	bp = bp - bx
	SCZO = cond(bp)
	branch Test(ULT,C) l0800_03E0
	// succ:  l0800_03FA l0800_03E0
l0800_03FA:
	sp = bp
	Mem0[ds:0x0086:word16] = bp
	// succ:  l0800_0400
l0800_0400:
	branch cx == 0x0000 l0800_0410
	// succ:  l0800_0402 l0800_0410
l0800_0402:
	Mem0[ss:bp + 0x0000:word16] = si
	bp = bp + 0x0002
	SCZO = cond(bp)
	// succ:  l0800_0408
l0800_0408:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al | al
	SZO = cond(al)
	C = false
	cx = cx - 0x0001
	branch Test(NE,Z) && cx != 0x0000 l0800_0408
	// succ:  l0800_040E l0800_0408
l0800_040E:
	branch Test(EQ,Z) l0800_0400
	// succ:  l0800_0410 l0800_0400
l0800_0410:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	Mem0[ss:bp + 0x0000:word16] = ax
	call Mem0[0x0800:0x0329:word16] (retsize: 4;)
	return
	// succ:  fn0800_032F_exit
fn0800_032F_exit:


// fn0800_03B8
// Return size: 2
void fn0800_03B8()
fn0800_03B8_entry:
	// succ:  l0800_03B8
l0800_03B8:
	sp = fp
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_03C3
	// succ:  l0800_03BC l0800_03C3
l0800_03BC:
	dx = dx + 0x0001
	SZO = cond(dx)
	Mem0[es:di:byte] = al
	di = di + 0x0001
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l0800_03C3
	// succ:  l0800_03C2 l0800_03C3
l0800_03C2:
	bx = bx + 0x0001
	SZO = cond(bx)
	// succ:  l0800_03C3
l0800_03C3:
	v12 = al
	al = ah
	ah = v12
	al = al ^ al
	SZO = cond(al)
	C = false
	C = true
	branch cx == 0x0000 l0800_03DF
	// succ:  l0800_03CA l0800_03DF
l0800_03CA:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	cx = cx - 0x0001
	SZO = cond(cx)
	al = al - 0x22
	SCZO = cond(al)
	branch Test(EQ,Z) l0800_03DF
	// succ:  l0800_03D0 l0800_03DF
l0800_03D0:
	al = al + 0x22
	SCZO = cond(al)
	SCZO = cond(al - 0x5C)
	branch Test(NE,Z) l0800_03DD
	// succ:  l0800_03D6 l0800_03DD
l0800_03D6:
	SCZO = cond(Mem0[ds:si:byte] - 0x22)
	branch Test(NE,Z) l0800_03DD
	// succ:  l0800_03DB l0800_03DD
l0800_03DB:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	cx = cx - 0x0001
	SZO = cond(cx)
	// succ:  l0800_03DD
l0800_03DD:
	si = si | si
	SZO = cond(si)
	C = false
	// succ:  l0800_03DF
l0800_03DF:
	return
	// succ:  fn0800_03B8_exit
fn0800_03B8_exit:


// fn0800_041A
// Return size: 2
void fn0800_041A()
fn0800_041A_entry:
	goto l0800_041A
	// succ:  l0800_041A
l0800_01E2_in_fn0800_041A:
	cx = 0x001E
	dx = 0x0056
	ds = Mem0[0x0800:0x01F8:selector]
	call fn0800_01DA (retsize: 2;)
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_0121 (retsize: 2;)
	v27 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v27
	SCZO = cond(v27)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0008
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0006:word16] = 0x0000
	Mem0[ss:bp - 0x0008:word16] = 0x00FF
	Mem0[ss:bp - 0x0002:word16] = 0x0000
	Mem0[ss:bp - 0x0004:word16] = 0x008F
	dx = Mem0[ss:bp - 0x0006:word16]
	ax = Mem0[ss:bp - 0x0008:word16]
	ax = ax + Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax)
	dx = dx + Mem0[ss:bp - 0x0002:word16] + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	dx = Mem0[ss:bp - 0x0006:word16]
	ax = Mem0[ss:bp - 0x0008:word16]
	ax = ax - Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax)
	dx = dx - Mem0[ss:bp - 0x0002:word16] - C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0006:word16] = dx
	Mem0[ss:bp - 0x0008:word16] = ax
	dx = Mem0[ss:bp - 0x0006:word16]
	ax = Mem0[ss:bp - 0x0008:word16]
	cx = Mem0[ss:bp - 0x0002:word16]
	bx = Mem0[ss:bp - 0x0004:word16]
	call fn0800_08C3 (retsize: 4;)
	Mem0[ss:bp - 0x0006:word16] = dx
	Mem0[ss:bp - 0x0008:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	call fn0800_10C6 (retsize: 4;)
	sp = sp + 0x0008
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	call fn0800_10CF (retsize: 4;)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	dx = Mem0[ss:bp - 0x0006:word16]
	ax = Mem0[ss:bp - 0x0008:word16]
	cl = 0x05
	call fn0800_1187 (retsize: 4;)
	Mem0[ss:bp - 0x0006:word16] = dx
	Mem0[ss:bp - 0x0008:word16] = ax
	dx = Mem0[ss:bp - 0x0002:word16]
	ax = Mem0[ss:bp - 0x0004:word16]
	cl = Mem0[ss:bp - 0x0008:byte]
	call fn0800_1169 (retsize: 4;)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	ax = 0x0194
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_097B (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_041A_exit
l0800_01E2_in_fn0800_041A:
	cx = 0x001E
	dx = 0x0056
	ds = Mem0[0x0800:0x01F8:selector]
	call fn0800_01DA (retsize: 2;)
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_0121 (retsize: 2;)
	v27 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v27
	SCZO = cond(v27)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0008
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0006:word16] = 0x0000
	Mem0[ss:bp - 0x0008:word16] = 0x00FF
	Mem0[ss:bp - 0x0002:word16] = 0x0000
	Mem0[ss:bp - 0x0004:word16] = 0x008F
	dx = Mem0[ss:bp - 0x0006:word16]
	ax = Mem0[ss:bp - 0x0008:word16]
	ax = ax + Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax)
	dx = dx + Mem0[ss:bp - 0x0002:word16] + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	dx = Mem0[ss:bp - 0x0006:word16]
	ax = Mem0[ss:bp - 0x0008:word16]
	ax = ax - Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax)
	dx = dx - Mem0[ss:bp - 0x0002:word16] - C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0006:word16] = dx
	Mem0[ss:bp - 0x0008:word16] = ax
	dx = Mem0[ss:bp - 0x0006:word16]
	ax = Mem0[ss:bp - 0x0008:word16]
	cx = Mem0[ss:bp - 0x0002:word16]
	bx = Mem0[ss:bp - 0x0004:word16]
	call fn0800_08C3 (retsize: 4;)
	Mem0[ss:bp - 0x0006:word16] = dx
	Mem0[ss:bp - 0x0008:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	call fn0800_10C6 (retsize: 4;)
	sp = sp + 0x0008
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	call fn0800_10CF (retsize: 4;)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	dx = Mem0[ss:bp - 0x0006:word16]
	ax = Mem0[ss:bp - 0x0008:word16]
	cl = 0x05
	call fn0800_1187 (retsize: 4;)
	Mem0[ss:bp - 0x0006:word16] = dx
	Mem0[ss:bp - 0x0008:word16] = ax
	dx = Mem0[ss:bp - 0x0002:word16]
	ax = Mem0[ss:bp - 0x0004:word16]
	cl = Mem0[ss:bp - 0x0008:byte]
	call fn0800_1169 (retsize: 4;)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	ax = 0x0194
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_097B (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_041A_exit
l0800_041A:
	sp = fp
	cx = Mem0[ds:0x008A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0800_0569 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_044D
	// succ:  l0800_0429 l0800_044D
l0800_0429:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	ds = Mem0[ds:0x008C:selector]
	si = si ^ si
	SZO = cond(si)
	C = false
	D = false
	// succ:  l0800_0433
l0800_0433:
	branch cx == 0x0000 l0800_0435
	// succ:  l0800_0433_1 l0800_0435
l0800_0433_1:
	v14 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v14
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_0433
	// succ:  l0800_0433
l0800_0435:
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	di = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x008E:word16]
	call fn0800_0569 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	bx = ax
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	Mem0[ds:0x0088:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_0450
	// succ:  l0800_044D l0800_0450
l0800_044D:
	// succ:  l0800_01E2_in_fn0800_041A l0800_01E2_in_fn0800_041A
l0800_0450:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_0455
l0800_0455:
	Mem0[ds:bx:word16] = di
	bx = bx + 0x0002
	SCZO = cond(bx)
	// succ:  l0800_045A
l0800_045A:
	branch cx == 0x0000 l0800_045C
	// succ:  l0800_045A_1 l0800_045C
l0800_045A_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_045A
	// succ:  l0800_045C l0800_045A
l0800_045C:
	SCZO = cond(Mem0[es:di:byte] - al)
	branch Test(NE,Z) l0800_0455
	// succ:  l0800_0461 l0800_0455
l0800_0461:
	Mem0[ds:bx:word16] = ax
	return
	// succ:  fn0800_041A_exit
fn0800_041A_exit:


// fn0800_048A
// Return size: 2
void fn0800_048A()
fn0800_048A_entry:
	// succ:  l0800_048A
l0800_048A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	di = Mem0[ss:bp + 0x0004:word16]
	ax = Mem0[ds:di + 0x0006:word16]
	Mem0[ds:0x0472:word16] = ax
	SCZO = cond(ax - di)
	branch Test(NE,Z) l0800_04A4
	// succ:  l0800_049C l0800_04A4
l0800_049C:
	Mem0[ds:0x0472:word16] = 0x0000
	goto l0800_04B4
	// succ:  l0800_04B4
l0800_04A4:
	si = Mem0[ds:di + 0x0004:word16]
	bx = Mem0[ds:0x0472:word16]
	Mem0[ds:bx + 0x0004:word16] = si
	ax = Mem0[ds:0x0472:word16]
	Mem0[ds:si + 0x0006:word16] = ax
	// succ:  l0800_04B4
l0800_04B4:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_048A_exit
fn0800_048A_exit:


// fn0800_04B8
// Return size: 2
void fn0800_04B8()
fn0800_04B8_entry:
	// succ:  l0800_04B8
l0800_04B8:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	di = Mem0[ss:bp + 0x0004:word16]
	ax = Mem0[ss:bp + 0x0006:word16]
	v9 = Mem0[ds:di:word16] - ax
	Mem0[ds:di:word16] = v9
	SCZO = cond(v9)
	si = Mem0[ds:di:word16]
	si = si + di
	SCZO = cond(si)
	ax = Mem0[ss:bp + 0x0006:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	Mem0[ds:si:word16] = ax
	Mem0[ds:si + 0x0002:word16] = di
	ax = Mem0[ds:0x0470:word16]
	SCZO = cond(ax - di)
	branch Test(NE,Z) l0800_04DF
	// succ:  l0800_04D9 l0800_04DF
l0800_04D9:
	Mem0[ds:0x0470:word16] = si
	goto l0800_04E7
	// succ:  l0800_04E7
l0800_04DF:
	di = si
	di = di + Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(di)
	Mem0[ds:di + 0x0002:word16] = si
	// succ:  l0800_04E7
l0800_04E7:
	ax = si
	ax = ax + 0x0004
	SCZO = cond(ax)
	// succ:  l0800_04EE
l0800_04EE:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_04B8_exit
fn0800_04B8_exit:


// fn0800_04F2
// Return size: 2
void fn0800_04F2()
fn0800_04F2_entry:
	// succ:  l0800_04F2
l0800_04F2:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp + 0x0004:word16]
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = ax & 0xFFFF
	SZO = cond(ax)
	C = false
	dx = dx & 0x0000
	SZO = cond(dx)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_0600 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = ax
	SCZO = cond(si - 0xFFFF)
	branch Test(NE,Z) l0800_0514
	// succ:  l0800_0510 l0800_0514
l0800_0510:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_052C
	// succ:  l0800_052C
l0800_0514:
	ax = Mem0[ds:0x0470:word16]
	Mem0[ds:si + 0x0002:word16] = ax
	ax = Mem0[ss:bp + 0x0004:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	Mem0[ds:si:word16] = ax
	Mem0[ds:0x0470:word16] = si
	ax = Mem0[ds:0x0470:word16]
	ax = ax + 0x0004
	SCZO = cond(ax)
	// succ:  l0800_052C
l0800_052C:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_04F2_exit
fn0800_04F2_exit:


// fn0800_052F
// Return size: 2
void fn0800_052F()
fn0800_052F_entry:
	// succ:  l0800_052F
l0800_052F:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp + 0x0004:word16]
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = ax & 0xFFFF
	SZO = cond(ax)
	C = false
	dx = dx & 0x0000
	SZO = cond(dx)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_0600 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = ax
	SCZO = cond(si - 0xFFFF)
	branch Test(NE,Z) l0800_0551
	// succ:  l0800_054D l0800_0551
l0800_054D:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_0566
	// succ:  l0800_0566
l0800_0551:
	Mem0[ds:0x0474:word16] = si
	Mem0[ds:0x0470:word16] = si
	ax = Mem0[ss:bp + 0x0004:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	Mem0[ds:si:word16] = ax
	ax = si
	ax = ax + 0x0004
	SCZO = cond(ax)
	// succ:  l0800_0566
l0800_0566:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_052F_exit
fn0800_052F_exit:


// fn0800_0569
// Return size: 2
void fn0800_0569()
fn0800_0569_entry:
	// succ:  l0800_0569
l0800_0569:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	di = Mem0[ss:bp + 0x0004:word16]
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l0800_057A
	// succ:  l0800_0575 l0800_057A
l0800_0575:
	SCZO = cond(di - 0xFFF4)
	branch Test(ULE,CZ) l0800_057E
	// succ:  l0800_057A l0800_057E
l0800_057A:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_05D8
	// succ:  l0800_05D8
l0800_057E:
	ax = di
	ax = ax + 0x000B
	SCZO = cond(ax)
	ax = ax & 0xFFF8
	SZO = cond(ax)
	C = false
	di = ax
	SCZO = cond(Mem0[ds:0x0474:word16] - 0x0000)
	branch Test(NE,Z) l0800_0596
	// succ:  l0800_058F l0800_0596
l0800_058F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn0800_052F (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	goto l0800_05D8
	// succ:  l0800_05D8
l0800_0596:
	si = Mem0[ds:0x0472:word16]
	ax = si
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_05D1
	// succ:  l0800_05A0 l0800_05D1
l0800_05A0:
	ax = Mem0[ds:si:word16]
	dx = di
	dx = dx + 0x0028
	SCZO = cond(dx)
	SCZO = cond(ax - dx)
	branch Test(ULT,C) l0800_05B4
	// succ:  l0800_05AB l0800_05B4
l0800_05AB:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn0800_04B8 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	goto l0800_05D8
	// succ:  l0800_05D8
l0800_05B4:
	ax = Mem0[ds:si:word16]
	SCZO = cond(ax - di)
	branch Test(ULT,C) l0800_05C8
	// succ:  l0800_05BA l0800_05C8
l0800_05BA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn0800_048A (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	v16 = Mem0[ds:si:word16] + 0x0001
	Mem0[ds:si:word16] = v16
	SZO = cond(v16)
	ax = si
	ax = ax + 0x0004
	SCZO = cond(ax)
	goto l0800_05D8
	// succ:  l0800_05D8
l0800_05C8:
	si = Mem0[ds:si + 0x0006:word16]
	SCZO = cond(si - Mem0[ds:0x0472:word16])
	branch Test(NE,Z) l0800_05A0
	// succ:  l0800_05D1 l0800_05A0
l0800_05D1:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn0800_04F2 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn0800_04F2 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	// succ:  l0800_05D8
l0800_05D8:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_0569_exit
fn0800_0569_exit:


// fn0800_0600
// Return size: 2
void fn0800_0600()
fn0800_0600_entry:
	// succ:  l0800_0600
l0800_0600:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = Mem0[ss:bp + 0x0004:word16]
	dx = Mem0[ss:bp + 0x0006:word16]
	ax = ax + Mem0[ds:0x009E:word16]
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	cx = ax
	cx = cx + 0x0100
	SCZO = cond(cx)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(NE,Z) l0800_0627
	// succ:  l0800_061D l0800_0627
l0800_061D:
	SCZO = cond(cx - sp)
	branch Test(UGE,C) l0800_0627
	// succ:  l0800_0621 l0800_0627
l0800_0621:
	v13 = Mem0[ds:0x009E:word16]
	Mem0[ds:0x009E:word16] = ax
	ax = v13
	goto l0800_0632
	// succ:  l0800_0632
l0800_0627:
	Mem0[ds:0x0094:word16] = 0x0008
	ax = 0xFFFF
	// succ:  l0800_0632
l0800_0632:
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_0600_exit
fn0800_0600_exit:


// fn0800_08C3
// Return size: 4
void fn0800_08C3()
fn0800_08C3_entry:
	// succ:  l0800_08C3
l0800_08C3:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	v5 = ax
	ax = si
	si = v5
	v7 = ax
	ax = dx
	dx = v7
	SZO = cond(ax & ax)
	C = false
	branch Test(EQ,Z) l0800_08CC
	// succ:  l0800_08CA l0800_08CC
l0800_08CA:
	dx_ax = bx *u ax
	SCZO = cond(dx_ax)
	// succ:  l0800_08CC
l0800_08CC:
	v15 = ax
	ax = cx
	cx = v15
	SZO = cond(ax & ax)
	C = false
	branch Test(EQ,Z) l0800_08D5
	// succ:  l0800_08D1 l0800_08D5
l0800_08D1:
	dx_ax = si *u ax
	SCZO = cond(dx_ax)
	cx = cx + ax
	SCZO = cond(cx)
	// succ:  l0800_08D5
l0800_08D5:
	v17 = ax
	ax = si
	si = v17
	dx_ax = bx *u ax
	SCZO = cond(dx_ax)
	dx = dx + cx
	SCZO = cond(dx)
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_08C3_exit
fn0800_08C3_exit:


// fn0800_097B
// Return size: 2
void fn0800_097B()
fn0800_097B_entry:
	// succ:  l0800_097B
l0800_097B:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = 0x0AB1
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x021E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0004:word16]
	ax = bp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_0BA3 (retsize: 2;)
	sp = sp + 0x0008
	// succ:  l0800_0992
l0800_0992:
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_097B_exit
fn0800_097B_exit:


// fn0800_0BA3
// Return size: 2
void fn0800_0BA3()
fn0800_0BA3_entry:
	// succ:  l0800_0BA3
l0800_0BA3:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0098
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	Mem0[ss:bp - 0x0058:word16] = 0x0000
	Mem0[ss:bp - 0x0055:byte] = 0x50
	Mem0[ss:bp - 0x0002:word16] = 0x0000
	// succ:  l0800_0BFD
l0800_0BFD:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	D = false
	di = bp - 0x0054
	Mem0[ss:bp - 0x0096:word16] = di
	di = Mem0[ss:bp - 0x0096:word16]
	si = Mem0[ss:bp + 0x0006:word16]
	// succ:  l0800_0C0D
l0800_0C0D:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l0800_0C23
	// succ:  l0800_0C12 l0800_0C23
l0800_0C12:
	SCZO = cond(al - 0x25)
	branch Test(EQ,Z) l0800_0C26
	// succ:  l0800_0C16 l0800_0C26
l0800_0C16:
	Mem0[ds:di:byte] = al
	di = di + 0x0001
	SZO = cond(di)
	v15 = Mem0[ss:bp - 0x0055:byte] - 0x01
	Mem0[ss:bp - 0x0055:byte] = v15
	SZO = cond(v15)
	branch Test(GT,SZO) l0800_0C0D
	// succ:  l0800_0C1E l0800_0C0D
l0800_0C1E:
	call fn0800_0BD1 (retsize: 2;)
	goto l0800_0C0D
	// succ:  l0800_0C0D
l0800_0C23:
	goto l0800_10A2
	// succ:  l0800_10A2
l0800_0C26:
	Mem0[ss:bp - 0x008A:word16] = si
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	SCZO = cond(al - 0x25)
	branch Test(EQ,Z) l0800_0C16
	// succ:  l0800_0C2F l0800_0C16
l0800_0C2F:
	Mem0[ss:bp - 0x0096:word16] = di
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	Mem0[ss:bp - 0x008C:word16] = cx
	Mem0[ss:bp - 0x0098:word16] = cx
	Mem0[ss:bp - 0x008D:byte] = cl
	Mem0[ss:bp - 0x0092:word16] = 0xFFFF
	Mem0[ss:bp - 0x0090:word16] = 0xFFFF
	// succ:  l0800_0C50
l0800_0C50:
	ah = ah ^ ah
	SZO = cond(ah)
	C = false
	dx = ax
	bx = ax
	bl = bl - 0x20
	SCZO = cond(bl)
	SCZO = cond(bl - 0x60)
	branch Test(UGE,C) l0800_0CA5
	// succ:  l0800_0C5E l0800_0CA5
l0800_0C5E:
	bl = Mem0[ds:bx + 0x03C1:byte]
	ax = bx
	SCZO = cond(ax - 0x0017)
	branch Test(ULE,CZ) l0800_0C6C
	// succ:  l0800_0C69 l0800_0C6C
l0800_0C69:
	goto l0800_1090
	// succ:  l0800_1090
l0800_0C6C:
	bx = ax
	bx = bx << 0x0001
	SCZO = cond(bx)
l0800_0CA5:
	// succ:  l0800_1090
l0800_1090:
	si = Mem0[ss:bp - 0x008A:word16]
	di = Mem0[ss:bp - 0x0096:word16]
	al = 0x25
	// succ:  l0800_109A
l0800_109A:
	call fn0800_0BC9 (retsize: 2;)
	sp = sp + 0xFFFE
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l0800_109A
	// succ:  l0800_10A2 l0800_109A
l0800_10A2:
	SCZO = cond(Mem0[ss:bp - 0x0055:byte] - 0x50)
	branch Test(GE,SO) l0800_10AB
	SCZO = cond(Mem0[ss:bp - 0x0055:byte] - 0x50)
	branch Test(GE,SO) l0800_10AB
	// succ:  l0800_10A8 l0800_10AB
l0800_10A8:
	call fn0800_0BD1 (retsize: 2;)
	call fn0800_0BD1 (retsize: 2;)
	// succ:  l0800_10AB
l0800_10AB:
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	SCZO = cond(Mem0[ss:bp - 0x0002:word16] - 0x0000)
	branch Test(EQ,Z) l0800_10B9
	// succ:  l0800_10B2 l0800_10B9
l0800_10B2:
	ax = 0xFFFF
	goto l0800_10BE
	// succ:  l0800_10BE
l0800_10B9:
	ax = Mem0[ss:bp - 0x0058:word16]
	// succ:  l0800_10BE
l0800_10BE:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_0BA3_exit
fn0800_0BA3_exit:


// fn0800_0BC9
// Return size: 2
void fn0800_0BC9()
fn0800_0BC9_entry:
	// succ:  l0800_0BC9
l0800_0BC9:
	sp = fp
	Mem0[ds:di:byte] = al
	di = di + 0x0001
	SZO = cond(di)
	v9 = Mem0[ss:bp - 0x0055:byte] - 0x01
	Mem0[ss:bp - 0x0055:byte] = v9
	SZO = cond(v9)
	branch Test(LE,SZO) l0800_0BFC_in_fn0800_0BC9
	// succ:  l0800_0BCF_thunk_fn0800_0BD1 l0800_0BFC_in_fn0800_0BC9
l0800_0BCF_thunk_fn0800_0BD1:
	call fn0800_0BD1 (retsize: 2;)
	return
	// succ:  fn0800_0BC9_exit l0800_0BCF_thunk_fn0800_0BD1
l0800_0BCF_thunk_fn0800_0BD1:
	call fn0800_0BD1 (retsize: 2;)
	return
	// succ:  fn0800_0BC9_exit
l0800_0BFC_in_fn0800_0BC9:
	return
	// succ:  fn0800_0BC9_exit
fn0800_0BC9_exit:


// fn0800_0BD1
// Return size: 2
void fn0800_0BD1()
fn0800_0BD1_entry:
	// succ:  l0800_0BD1
l0800_0BD1:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	ax = bp - 0x0054
	di = di - ax
	SCZO = cond(di)
	ax = bp - 0x0054
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	call SEQ(cs, Mem0[ss:bp + 0x000A:word16]) (retsize: 2;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_0BEE
	// succ:  l0800_0BE9 l0800_0BEE
l0800_0BE9:
	Mem0[ss:bp - 0x0002:word16] = 0x0001
	// succ:  l0800_0BEE
l0800_0BEE:
	Mem0[ss:bp - 0x0055:byte] = 0x50
	v16 = Mem0[ss:bp - 0x0058:word16] + di
	Mem0[ss:bp - 0x0058:word16] = v16
	SCZO = cond(v16)
	di = bp - 0x0054
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	dx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	// succ:  l0800_0BFC
l0800_0BFC:
	return
	// succ:  fn0800_0BD1_exit
fn0800_0BD1_exit:


// fn0800_10C6
// Return size: 4
void fn0800_10C6()
fn0800_10C6_entry:
	// succ:  l0800_10C6
l0800_10C6:
	sp = fp
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	// succ:  l0800_10C6_thunk_fn0800_10D7
l0800_10C6_thunk_fn0800_10D7:
	call fn0800_10D7 (retsize: 0;)
	return
	// succ:  fn0800_10C6_exit
fn0800_10C6_exit:


// fn0800_10CF
// Return size: 0
void fn0800_10CF()
fn0800_10CF_entry:
	// succ:  l0800_10CF
l0800_10CF:
	sp = fp
	cx = 0x0002
	// succ:  l0800_10D2_thunk_fn0800_10D7
l0800_10D2_thunk_fn0800_10D7:
	call fn0800_10D7 (retsize: 0;)
	return
	// succ:  fn0800_10CF_exit
fn0800_10CF_exit:


// fn0800_10D7
// Return size: 0
void fn0800_10D7()
fn0800_10D7_entry:
	// succ:  l0800_10D7
l0800_10D7:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	bp = sp
	di = cx
	ax = Mem0[ss:bp + 0x000A:word16]
	dx = Mem0[ss:bp + 0x000C:word16]
	bx = Mem0[ss:bp + 0x000E:word16]
	cx = Mem0[ss:bp + 0x0010:word16]
	cx = cx | cx
	SZO = cond(cx)
	C = false
	branch Test(NE,Z) l0800_10F6
	// succ:  l0800_10EE l0800_10F6
l0800_10EE:
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l0800_115B
	// succ:  l0800_10F2 l0800_115B
l0800_10F2:
	bx = bx | bx
	SZO = cond(bx)
	C = false
	branch Test(EQ,Z) l0800_115B
	// succ:  l0800_10F6 l0800_115B
l0800_10F6:
	SZO = cond(di & 0x0001)
	C = false
	branch Test(NE,Z) l0800_1118
	// succ:  l0800_10FC l0800_1118
l0800_10FC:
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(NS,S) l0800_110A
	// succ:  l0800_1100 l0800_110A
l0800_1100:
	dx = -dx
	SCZO = cond(dx)
	C = dx == 0x0000
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	di = di | 0x000C
	SZO = cond(di)
	C = false
	// succ:  l0800_110A
l0800_110A:
	cx = cx | cx
	SZO = cond(cx)
	C = false
	branch Test(NS,S) l0800_1118
	// succ:  l0800_110E l0800_1118
l0800_110E:
	cx = -cx
	SCZO = cond(cx)
	C = cx == 0x0000
	bx = -bx
	SCZO = cond(bx)
	C = bx == 0x0000
	cx = cx - 0x00 - C
	SCZO = cond(cx)
	di = di ^ 0x0004
	SZO = cond(di)
	C = false
	// succ:  l0800_1118
l0800_1118:
	bp = cx
	cx = 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	di = di ^ di
	SZO = cond(di)
	C = false
	si = si ^ si
	SZO = cond(si)
	C = false
	// succ:  l0800_1122
l0800_1122:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v16 = (dx & 0x0001 << 0x10 - 0x01) != 0x0000
	dx = __rcl(dx, 0x01, C)
	C = v16
	v17 = (si & 0x0001 << 0x10 - 0x01) != 0x0000
	si = __rcl(si, 0x01, C)
	C = v17
	v18 = (di & 0x0001 << 0x10 - 0x01) != 0x0000
	di = __rcl(di, 0x01, C)
	C = v18
	SCZO = cond(di - bp)
	branch Test(ULT,C) l0800_1139
	// succ:  l0800_112E l0800_1139
l0800_112E:
	branch Test(UGT,CZ) l0800_1134
	// succ:  l0800_1130 l0800_1134
l0800_1130:
	SCZO = cond(si - bx)
	branch Test(ULT,C) l0800_1139
	// succ:  l0800_1134 l0800_1139
l0800_1134:
	si = si - bx
	SCZO = cond(si)
	di = di - bp - C
	SCZO = cond(di)
	ax = ax + 0x0001
	SZO = cond(ax)
	// succ:  l0800_1139
l0800_1139:
	cx = cx - 0x0001
	branch cx != 0x0000 l0800_1122
	// succ:  l0800_113B l0800_1122
l0800_113B:
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	SZO = cond(bx & 0x0002)
	C = false
	branch Test(EQ,Z) l0800_1148
	// succ:  l0800_1142 l0800_1148
l0800_1142:
	ax = si
	dx = di
	bx = bx >>u 0x0001
	SCZO = cond(bx)
	// succ:  l0800_1148
l0800_1148:
	SZO = cond(bx & 0x0004)
	C = false
	branch Test(EQ,Z) l0800_1155
	// succ:  l0800_114E l0800_1155
l0800_114E:
	dx = -dx
	SCZO = cond(dx)
	C = dx == 0x0000
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	// succ:  l0800_1155
l0800_1155:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_10D7_exit
l0800_115B:
	dx = dx_ax % bx
	ax = dx_ax /u bx
	SCZO = cond(ax)
	SZO = cond(di & 0x0002)
	C = false
	branch Test(EQ,Z) l0800_1165
	// succ:  l0800_1163 l0800_1165
l0800_1163:
	ax = dx
	// succ:  l0800_1165
l0800_1165:
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	goto l0800_1155
	// succ:  l0800_1155
fn0800_10D7_exit:


// fn0800_1169
// Return size: 4
void fn0800_1169()
fn0800_1169_entry:
	// succ:  l0800_1169
l0800_1169:
	sp = fp
	SCZO = cond(cl - 0x10)
	branch Test(UGE,C) l0800_117E
	// succ:  l0800_116E l0800_117E
l0800_116E:
	bx = dx
	ax = ax >>u cl
	SCZO = cond(ax)
	dx = dx >> cl
	SCZO = cond(dx)
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	cl = cl + 0x10
	SCZO = cond(cl)
	bx = bx << cl
	SCZO = cond(bx)
	ax = ax | bx
	SZO = cond(ax)
	C = false
	return
	// succ:  fn0800_1169_exit
l0800_117E:
	cl = cl - 0x10
	SCZO = cond(cl)
	ax = dx
	dx_ax = (int32) ax
	ax = ax >> cl
	SCZO = cond(ax)
	return
	// succ:  fn0800_1169_exit
fn0800_1169_exit:


// fn0800_1187
// Return size: 4
void fn0800_1187()
fn0800_1187_entry:
	// succ:  l0800_1187
l0800_1187:
	sp = fp
	SCZO = cond(cl - 0x10)
	branch Test(UGE,C) l0800_119C
	// succ:  l0800_118C l0800_119C
l0800_118C:
	bx = ax
	ax = ax << cl
	SCZO = cond(ax)
	dx = dx << cl
	SCZO = cond(dx)
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	cl = cl + 0x10
	SCZO = cond(cl)
	bx = bx >>u cl
	SCZO = cond(bx)
	dx = dx | bx
	SZO = cond(dx)
	C = false
	return
	// succ:  fn0800_1187_exit
l0800_119C:
	cl = cl - 0x10
	SCZO = cond(cl)
	dx = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = dx << cl
	SCZO = cond(dx)
	return
	// succ:  fn0800_1187_exit
fn0800_1187_exit:


