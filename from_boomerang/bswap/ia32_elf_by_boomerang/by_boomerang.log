got filename bswap.c for main
got filename bswap.c for bswap
after removing matching assigns (t[WILDSTR]).
after removing matching assigns (%pc).
### WARNING: iteration limit exceeded for dfaTypeAnalysis of procedure bswap ###
in proc bswap adding addrExp r28{0} - 4 to local table
finding final parameters for bswap
potential param r28
found new parameter r28
potential param m[r28{0} + 4]
found new parameter m[r28{0} + 4]
after removing matching assigns (t[WILDSTR]).
after removing matching assigns (%pc).
in proc main adding addrExp r28{0} - 4 to local table
in proc main adding addrExp r28{0} - 28 to local table
in proc main adding addrExp r28{0} - 32 to local table
in proc main adding addrExp r28{0} - 8 to local table
in proc main adding addrExp r28{0} - 24 to local table
in proc main adding addrExp r28{0} - 28 to local table
in proc main adding addrExp r28{0} - 32 to local table
in proc main adding addrExp r28{0} - 4 to local table
TYPE ERROR: at address 0xfffffffc, overlapping type __size32 does not resolve to compound or array
in proc main adding addrExp r28{0} - 28 to local table
in proc main adding addrExp r28{0} - 32 to local table
in proc main adding addrExp r28{0} - 8 to local table
in proc main adding addrExp r28{0} - 24 to local table
in proc main adding addrExp r28{0} - 28 to local table
in proc main adding addrExp r28{0} - 32 to local table
could not set type for unknown parameter expression m[r28{0} + 4]
could not set type for unknown parameter expression m[r28{0} + 8]
could not set type for unknown parameter expression m[r28{0} + 12]
### WARNING: iteration limit exceeded for dfaTypeAnalysis of procedure bswap ###
local eax has type unsigned int that doesn't agree with type of define __size32 of a library, why?
local esp has type __size32 that doesn't agree with type of define void of a library, why?
dest is not lib
call:   19 *u32* eax := CALL bswap(
                *j32* local0 := 0x12345678
              )
              Reaching definitions: r24=0,   r28=r28{0} - 32,   r29=r28{0} - 4,   m[r28{0} + 4]=m[r28{0} + 4]{0},
                m[r28{0} + 8]=m[r28{0} + 8]{0},   m[r28{0} + 12]=m[r28{0} + 12]{0},   m[r28{0} - 4]=r29{0},
                m[r28{0} - 28]=0x12345678,   m[r28{0} - 32]=%pc,   tmp1=r28{0} - 12,
                %flags=SUBFLAGS32( r28{0} - 12, 12, r28{0} - 24 ),   %ZF=(r28{0} - 24) = 0,   %CF=(r28{0} - 12) <u 12
              Live variables: eax in proc main
result:    0 *u32* eax := -
dest is not lib
call:   34 {*32* eax, *32* r25, *32* r26} := CALL printf(
                *c** local1 := "Output is %x
"
                *u32* local2 := eax
              )
              Reaching definitions: r24=r24{19},   r28=r28{0} - 32,   r29=r28{0} - 4,   m[r28{0} + 4]=m[r28{0} + 4]{0},
                m[r28{0} + 8]=m[r28{0} + 8]{0},   m[r28{0} + 12]=m[r28{0} + 12]{0},   m[r28{0} - 4]=r29{0},
                m[r28{0} - 8]=r24{19},   m[r28{0} - 24]=r24{19},   m[r28{0} - 28]=0x804848c,   m[r28{0} - 32]=%pc,
                tmp1=r28{0} - 12,   %flags=SUBFLAGS32( r28{0} - 12, 8, r28{0} - 20 ),   %ZF=(r28{0} - 20) = 0,
                %CF=(r28{0} - 12) <u 8
              Live variables:  in proc main
